ra. A las demás variables se puede acceder en
lectura para vigilar el estado del Modbus.
Variable

Tipo de da‐
tos

Valor de
arranque

Descripción

HR_Start_Offset

WORD

0

Asignar la dirección inicial del registro de parada de Modbus.

Request_Count

WORD

0

Número total de peticiones recibidas por el servidor.

Server_Messa‐
ge_Count

WORD

0

Número total de mensajes recibidos para el servidor en cuestión.

Xmt_Rcv_Count

WORD

0

Contador para el registro del número de transferencias en las que se ha
producido un error. El contador se incrementa aunque se reciba un men‐
saje Modbus no válido.

Exception_Count

WORD

0

Contador para el registro del número de errores específicos de Modbus
que dan lugar a un error de excepción.

Success_Count

WORD

0

Contador para el registro del número de peticiones que no contienen
errores en el protocolo transferido.

Connected

BOOL

0

Indica si la conexión con el cliente asignado está establecida o no: 1 =
conectado, 0 = no conectado.

Ejemplo: Direccionamiento a través de variable estática HR_Start_Offset
Las direcciones del registro de parada de Modbus empiezan en 0 (visto desde el MB_CLIENT
en 40.001). Estas direcciones corresponden al espacio de direcciones del área de memoria de
la CPU para el registro de parada. También es posible definir la variable HR_Start_Offset de
modo que el registro de parada de Modbus reciba una dirección de inicio distinta de 0.
Ejemplo: El registro de parada empieza en el MW100 y tiene una longitud de 100 WORD. Con
un valor de offset en el parámetro HR_Start_Offset, la dirección de inicio del registro de parada

Programación del PLC
Manual de programación y manejo, 11/2019

4609

Instrucciones
4.1 Instrucciones
se desplaza de 0 a 20. Todo direccionamiento del registro de parada por debajo de la dirección
20 y por encima de la dirección 119 da lugar a un error.
HR_Start_Offset

Dirección

Mínimo

Máximo

0

Dirección Modbus (WORD)

0

99

Dirección de la CPU

MW100

MW298

Dirección Modbus (WORD)

20

119

Dirección de la CPU

MW100

MW298

20

Consulte también
MB_SERVER Ejemplo: Varias conexiones TCP (Página 4616)
Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente (Página 618)

Parámetro MB_HOLD_REG
Descripción
El parámetro MB_HOLD_REG es un puntero hacia un búfer de datos para almacenar los datos
que se han leído o escrito en el servidor Modbus. Puede usarse como búfer de datos un bloque
de datos global o un área de memoria (M).
● El límite superior del número de direcciones en el bloque de datos (D) viene determinado
por la memoria de trabajo máxima de la CPU.
● El límite superior del número de marcas (M) viene determinado por el tamaño del área de
memoria de la CPU.
En la siguiente tabla se muestran ejemplos del mapeo de direcciones Modbus en el registro de
parada para las funciones Modbus 3 (leer WORD), 6 (escribir WORD), 16 (escribir varias
WORD) y 23 (escribir y leer varias palabras).
Direcciones
Modbus

Parámetro MB_HOLD_REG: ejemplos

0

MW100

DB10.DBW0

"Recipe".ingredient[1]

1

MW102

DB10.DBW2

"Recipe".ingredient[2]

2

MW104

DB10.DBW4

"Recipe".ingredient[3]

3

MW106

DB10.DBW6

"Recipe".ingredient[4]

4

MW108

DB10.DBW8

"Recipe".ingredient[5]

Consulte también
Descripción MB_SERVER (Página 4606)

4610

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetro STATUS
Parámetro STATUS (información de estado general) (versión de librería V2.1)
STATUS*
(W#16#)

Descripción

0000

Instrucción ejecutada sin errores.

7000

Ninguna llamada activa (REQ=0).

7001

Primera llamada con REQ=1: Ejecución iniciada; BUSY tiene el valor 1.

7002

Llamada intermedia (REQ irrelevante). Ejecución ya activa; BUSY tiene el valor 1.

7003

Deshaciendo la conexión.

* Los códigos de error en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Parámetro STATUS (información de estado general) (versión de librería V3.x)
STATUS*
(W#16#)

Descripción

0000

Instrucción ejecutada sin errores.

0001

Conexión establecida.

0003

Desconexión realizada.

7000

Ninguna llamada activa (REQ=0).

7001

Primera llamada. Establecimiento de conexión iniciado.

7002

Llamada intermedia. La conexión se está estableciendo.

7003

Deshaciendo la conexión.

7005

Enviando datos.

7006

Recibiendo datos.

* Los códigos de estado en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Parámetro STATUS (error de protocolo)
STATUS*
(W#16#)

Código de error
Descripción
en la respuesta de
MB_SERVER
(B#16#)

8380

-

El frame Modbus recibido no tiene el formato correcto o el número de bytes recibidos no es
suficiente.

8381

01

Código de función no soportado.

8382

03

Error en la longitud de datos

8383

02

Error en la dirección de los datos o acceso fuera del área de memoria deMB_HOLD_REG
(Página 4610).

8384

03

Error en el valor de datos (función 5)

Programación del PLC
Manual de programación y manejo, 11/2019

4611

Instrucciones
4.1 Instrucciones
STATUS*
(W#16#)

Código de error
Descripción
en la respuesta de
MB_SERVER
(B#16#)

8385

03

Código de diagnóstico no soportado

* Los códigos de estado en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Parámetro STATUS (error de parámetro)
STATUS* (W#16#) Descripción
80BB

Valor no válido en el parámetro ACTIVE_EST (identificador del modo de establecimiento de conexión,
véase T_CON_PARAM):
● El lado del servidor solo permite el establecimiento pasivo de la conexión (ACTIVE_EST = FALSE).
● El lado del cliente solo permite el establecimiento activo de la conexión (ACTIVE_EST = TRUE).

8187

Puntero no válido en el parámetro MB_HOLD_REG. El área de datos es demasiado pequeña.

818C

● El puntero del parámetro MB_HOLD_REG remite a un bloque de datos optimizado. Utilice un bloque
de datos con acceso estándar o un área de memoria.
● Error por tiempo excedido en la ejecución (por encima de 55 segundos).

* Los códigos de error en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Nota
Códigos de error de las instrucciones de comunicación utilizadas internamente.
Además de los errores listados en las tablas, con la instrucción "MB_SERVER" pueden
producirse también errores en las instrucciones de comunicación ("TCON", "TDISCON",
"TSEND" y "TRCV") utilizadas por la instrucción.
La asignación del código de error se puede realizar a través del bloque de datos de instancia
de la instrucción "MB_SERVER". En la sección Static se indican los códigos de error en la
instrucción correspondiente bajo STATUS.
El significado de los códigos de error se puede consultar en la documentación de la instrucción
de comunicación correspondiente.

Consulte también
Descripción MB_SERVER (Página 4606)
Cambiar formatos de visualización en el estado del programa (Página 8529)

4612

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplos
MB_CLIENT ejemplo 1: Enviar varias peticiones a través de una conexión TCP
Descripción
A través de una conexión TCP pueden enviarse varias peticiones de cliente Modbus. Al
hacerlo, utilice el mismo DB de instancia, la misma ID de conexión y el mismo número de
puerto.
Solo puede haber un cliente activo al mismo tiempo. Una vez finalizada la ejecución de un
cliente, se ejecuta el cliente siguiente. El orden de ejecución debe definirse en el programa.
En el siguiente programa de ejemplo se copia como ampliación el valor del parámetro de salida
STATUS.

Segmento 1: Función Modbus 1: leer 16 bits de salida

Programación del PLC
Manual de programación y manejo, 11/2019

4613

Instrucciones
4.1 Instrucciones

Segmento 2: Función Modbus 2: leer 32 bits de entrada

MB_CLIENT ejemplo 2: Enviar varias peticiones a través de varias conexiones TCP
Descripción
Las peticiones del cliente Modbus pueden enviarse a través de distintas conexiones TCP. Para
ello, utilice en cada caso un DB de instancia diferente y una ID de conexión diferente.
Si las conexiones se realizan al mismo servidor Modbus, utilice en cada caso un número de
puerto diferente. Si las conexiones se realizan cada una a un servidor Modbus distinto, puede
asignar libremente los números de puerto.

Segmento 1: Función Modbus 4: leer entrada (WORD)

4614

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Segmento 2: Función Modbus 3: leer registro de parada (WORD)

MB_CLIENT ejemplo 3: Coordinar varias peticiones
Descripción
Debe asegurarse de que se ejecuten cada una de las peticiones Modbus. La coordinación de
las peticiones se controla mediante el programa. El siguiente ejemplo muestra cómo pueden
utilizarse los parámetros de salida de la primera y segunda petición de cliente para coordinar
la ejecución de las instrucciones.

Segmento 1: Función Modbus 3: leer registro de parada (WORD)

Programación del PLC
Manual de programación y manejo, 11/2019

4615

Instrucciones
4.1 Instrucciones

Segmento 2: Función Modbus 3: leer registro de parada (WORD)

MB_SERVER Ejemplo: Varias conexiones TCP
Descripción
Pueden usarse varias conexiones de servidor Modbus TCP. Para ello, para cada conexión
debe llamarse separadamente la instrucción "MB_SERVER".
Cada conexión requiere:
● un bloque de datos de instancia independiente de la instrucción
● una ID de conexión unívoca
● un puerto IP propio (con S7-1200 solo se permite una conexión por cada puerto IP)
Para obtener un rendimiento óptimo, ejecute "MB_SERVER" para cada conexión una vez por
cada ciclo de programa.

Segmento 1: conexión #1 con el correspondiente puerto IP, ID de conexión y DB de instancia

4616

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Segmento 2: conexión #1 con el correspondiente puerto IP, ID de conexión y DB de instancia

MODBUS (TCP) para las versiones de librería V4.0 o superior de las CPU S7-1200 y V3.x o superior de
las CPU S7-1500
MB_CLIENT: Comunicarse como cliente Modbus TCP vía PROFINET
Descripción MB_CLIENT
Descripción
La instrucción "MB_CLIENT" permite la comunicación como cliente Modbus TCP a través de
la conexión PROFINET. La instrucción "MB_CLIENT" permite establecer una conexión entre
el cliente y el servidor, enviar órdenes Modbus y recibir respuestas, así como controlar la
desconexión del cliente Modbus TCP.
Para el S7-1200 con versión de firmware V4.0 puede utilizarse la instrucción "MB_CLIENT"
hasta la versión de librería V3.1 inclusive. Con el S7-1200 a partir de la versión de firmware
V4.1 y el S7-1500 puede utilizarse la instrucción "MB_CLIENT" de todas las versiones de
librería.
La conexión puede realizarse a través de la interfaz local de la CPU o CM/CP.
Para utilizar esta instrucción no se requiere ningún módulo de hardware adicional.

Conexiones múltiples a cliente
Un cliente Modbus TCP puede admitir varias conexiones TCP (el número máximo de
conexiones depende de la CPU utilizada). El total de conexiones de una CPU, incluidos los
clientes Modbus TCP y los servidores, no debe exceder el número máximo de conexiones
admitido. Las conexiones Modbus TCP también pueden ser utilizadas conjuntamente por
instancias de "MB_CLIENT" y/o "MB_SERVER".
En algunas conexiones de cliente deben respetarse las siguientes reglas:
● Cada conexión "MB_CLIENT" debe utilizar un DB de instancia unívoco.
● Para cada conexión "MB_CLIENT" debe especificarse una dirección IP unívoca del
servidor.

Programación del PLC
Manual de programación y manejo, 11/2019

4617

Instrucciones
4.1 Instrucciones
● Cada conexión "MB_CLIENT" requiere una ID de conexión unívoca.
Para cada DB de instancia de la instrucción debe utilizarse la correspondiente ID de
conexión. Los ID de conexión y los DB de instancia se agrupan por pares y deben ser
unívocos para cada conexión.
● Según la configuración del servidor, se requerirán o no números unívocos de puerto IP.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "MB_CLIENT":
Parámetro

Declaración

Tipo de datos Descripción

REQ (Página 4622)

Input

BOOL

Orden Modbus al servidor TCP Modbus
El parámetro REQ se controla por nivel. Así, mientras la entrada
esté activada (REQ=true), la instrucción enviará órdenes de comu‐
nicación.
● Al iniciar la orden Modbus se bloquea el DB de instancia para
otros clientes.
● Las modificaciones de los parámetros de entrada no se hacen
efectivas hasta que no hay respuesta del servidor o hasta que no
se devuelve un mensaje de error.
● Si durante una orden Modbus en curso se vuelve a activar el
parámetro REQ, a continuación no se ejecuta ninguna otra
transferencia.

DISCONNECT (Pá‐
gina 4622)

Input

BOOL

Mediante este parámetro se controla el establecimiento de la cone‐
xión y la desconexión con el servidor Modbus:
● 0: Establecer conexión de comunicación con el interlocutor
configurado en el parámetro CONNECT (ver parámetro
CONNECT).
● 1: Deshacer la conexión. Durante la desconexión no se ejecuta
ninguna otra función. Tras deshacer la conexión correctamente,
el parámetro STATUS devuelve el valor 0003.
Si el parámetro REQ está activado mientras se establece la cone‐
xión, la orden Modbus se envía de inmediato.

MB_MODE (Pági‐
na 4622)

Input

USINT

Selección del modo de orden Modbus (lectura, escritura o diagnós‐
tico) o selección directa de una función Modbus.

MB_DATA_ADDR
(Página 4622)

Input

UDINT

en función de MB_MODE

MB_DATA_LEN

Input

UINT

Longitud de datos: Número de bits o palabras para el acceso a los
datos (ver Parámetros MB_MODE, MB_DATA_ADDR y MB_DA‐
TA_LEN (Página 4622)).

VARIANT

Puntero hacia un búfer de datos para los datos que se van a recibir
desde el servidor Modbus o que se van a enviar al servidor Modbus.

MB_DATA_PTR (Pá‐ InOut
gina 4625)

4618

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos Descripción

CONNECT (Pági‐
na 4626)

InOut

VARIANT

Puntero hacia la estructura de la descripción de la conexión
Se pueden utilizar las siguientes estructuras (tipos de datos de sis‐
tema):
● TCON_IP_v4: contiene todos los parámetros de
direccionamiento necesarios para establecer una conexión
programada. Si se utiliza TCON_IP_v4, la conexión se establece
al llamar la instrucción "MB_CLIENT".
● TCON_Configured: contiene los parámetros de
direccionamiento de una conexión configurada. En el caso de
utilizar TCON_Configured se emplea una conexión existente,
establecida después de que la CPU cargara la configuración
hardware.

DONE

Out

BOOL

El bit del parámetro de salida DONE se pone a "1" en cuanto se
ejecuta sin errores la última orden Modbus.

BUSY

Out

BOOL

● 0: Ninguna orden Modbus en proceso
● 1: La orden Modbus se está ejecutando
El parámetro de salida BUSY no se activa al establecer o al desha‐
cer la conexión.

ERROR

Out

BOOL

● 0: Ningún error
● 1: Con errores. La causa del error se indica mediante el
parámetro STATUS.

STATUS (Pági‐
na 4628)

Out

WORD

Información de estado detallada de la instrucción.

Encontrará más información sobre los tipos de datos válidos en "Vista general de los tipos de
datos válidos (Página 241)".
Nota
Datos de entrada coherentes durante una llamada de "MB_CLIENT"
En cuanto se ejecuta una instrucción de cliente Modbus, los valores de los parámetros de
entrada se almacenan internamente y luego se comparan en la siguiente llamada. La
comparación se utiliza para determinar si es esa llamada concreta la que ha iniciado la orden
en curso. Pueden realizarse varias llamadas de "MB_CLIENT" utilizando un DB de instancia
común. Los valores de los parámetros de entrada no deben modificarse mientras esté
ejecutándose una instancia "MB_CLIENT". Si se modifican los parámetros de entrada durante
la ejecución, no se puede comprobar mediante "MB_CLIENT" si la instancia se está
ejecutando en el momento actual.

Programación del PLC
Manual de programación y manejo, 11/2019

4619

Instrucciones
4.1 Instrucciones

Variables estáticas de la instrucción
En la siguiente tabla se describen las variables estáticas editables del bloque de datos de
instancia de la instrucción "MB_CLIENT".
Variable

Tipo de da‐ Valor de
tos
arranque

Descripción

Blocked_Proc_Timeout

REAL

3.0

Tiempo en segundos que hay que esperar para que se inicialice la
variable estática ACTIVE en una instancia Modbus bloqueada. Esto
puede suceder, por ejemplo, cuando, habiéndose emitido una orden
de cliente, se cancela la ejecución de la función de cliente antes de
que se haya ejecutado por completo la orden. El tiempo de espera
debe estar entre 0,5 s y 55 s.

MB_Transaction_ID

WORD

1

ID de transacción del protocolo Modbus TCP. El valor de arranque
"1" solo debe modificarse en caso de que el servidor Modbus TCP
necesite un valor diferente.

MB_Unit_ID

BYTE

255

Unit Identifier
ID de dispositivo Modbus:
Para acceder a un servidor TCP Modbus se utiliza su dirección IP.
Por ello no se utiliza el parámetro MB_UNIT_ID para el direcciona‐
miento Modbus TCP .
El parámetro MB_UNIT_ID equivale al campo de la dirección de
esclavo en el protocolo Modbus RTU. Si se utiliza un servidor Mod‐
bus TCP como pasarela a un protocolo Modbus RTU, el dispositivo
esclavo en la red serie puede identificarse con MB_UNIT_ID. En tal
caso, el parámetro MB_UNIT_ID reenviaría la orden a la dirección
de esclavo Modbus RTU correcta.
Tenga en cuenta que algunos dispositivos Modbus TCP pueden
necesitar el parámetro MB_UNIT_ID para la inicialización dentro de
un rango de valores limitado.
Mediante los enlaces siguientes obtendrá más información sobre el
parámetro MB_Unit_ID:
https://support.industry.siemens.com/cs/ww/es/view/102420337
(https://support.industry.siemens.com/cs/document/
102420337/%C2%BFqu%C3%A9-funci%C3%B3n-tiene-el-par
%C3%A1metro-mb_unit_id-en-el-bloque-de-datos-de-instanciadel-bloque-modbus-mb_client?dti=0&dl=es&lc=de-WW)
http://support.automation.siemens.com/WW/view/es/109736516
(https://support.industry.siemens.com/cs/document/109736516/
how-do-you-clear-the-status-168382-in-the-case-of-a-modbus-tcpconnection-between-simatic-s7-1500-s7-1200-and-sentron-pacdevices?dti=0&dl=en&lc=de-WW)

RCV_TIMEOUT

REAL

2.0

Intervalo en segundos durante el que la instrucción "MB_CLIENT"
permanece a la espera de una respuesta del servidor. Debe estar
entre 0,5 s y 55 s.

Connected

BOOL

0

Indica si la conexión con el servidor asignado está establecida o no:
1 = conectado, 0 = no conectado.

RETRIES

WORD

0

Número de intentos de transmisión que realiza la instrucción
"MB_CLIENT" antes de devolver el error W#16#80C8.

4620

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Nota
Variable MB_Transaction_ID
Si el ID de transacción en la respuesta del servidor Modbus TCP no coincide con el ID de
transacción de la orden de "MB_CLIENT", la instrucción "MB_CLIENT" espera durante el
tiempo RCV_TIMEOUT * RETRIES la respuesta del servidor Modbus TCP con el ID de
transacción correcto; después devuelve el error W#16#80C8.

Ejemplo
Encontrará un proyecto de ejemplo para la comunicación Modbus TCP entre dos CPU
S7-1500 en el portal de Siemens Industry Online Support, con el ID de artículo 94766380
(http://support.automation.siemens.com/WW/view/es/94766380).
En este ejemplo se utilizan dos funciones de Modbus. Para cada función Modbus se establece
una conexión Modbus TCP a través de una pareja de bloques Modbus (MB_CLIENT y
MB_SERVER).

)%

)& :5B
+ROGLQJ
5HJLVWHU
>)&@

2%

)& :5B
+ROGLQJ
5HJLVWHU
>)&@

0%B
&/,(17
'% '$7$B
&21
>'%@

0DLQ
>2%@
)%

)& 5'B
+ROGLQJ
5HJLVWHU
>)&@

0%B
&/,(17

2%

&RQH[LµQ7&3 ,' 
)XQFLµQ0RGEXV
(VFULELUYDULRVUHJLVWURVGH
SDUDGD

)%

0%B
6(59(5
'% '$7$B
&21
>'%@

0DLQ
>2%@

)& 5'B
+ROGLQJ
5HJLVWHU
>)&@

)%

0%B
6(59(5

'% '$7$B
&21
>'%@

3URJUDPDGHXVXDULR
&386
&OLHQWH0RGEXV

%ORTXHV
GHVLVWHPD

%ORTXHV
GHGDWRV

'% '$7$B
&21
>'%@

&RQH[LµQ7&3 ,' 
)XQFLµQ0RGEXV
/HHUUHJLVWURVGHSDUDGD

3URJUDPDGHXVXDULR
&386
VHUYLGRU0RGEXV

%ORTXHV
GHVLVWHPD

%ORTXHVGH
GDWRV

Consulte también
Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente (Página 618)

Programación del PLC
Manual de programación y manejo, 11/2019

4621

Instrucciones
4.1 Instrucciones

Parámetros REQ y DISCONNECT
Descripción
Si no hay activa ninguna petición y si el parámetro DISCONNECT tiene el valor "0", con REQ=1
se ejecuta otra petición. Si todavía no se ha establecido ninguna conexión, esta se establecerá
al ejecutarse la instrucción.
Si se vuelve a ejecutar la misma instancia de la instrucción "MB_CLIENT" (DISCONNECT=0
y REQ=1) antes de que se ejecute la petición activa, esta no se ejecutará a continuación de la
petición activa. Solo podrá iniciarse una nueva petición una vez que haya finalizado la petición
activa (REQ=1).
El estado de la ejecución se emite a través de los parámetros de salida. Estos se pueden
utilizar para vigilar el estado de ejecución durante la ejecución secuencial de la instrucción
"MB_CLIENT".

Parámetros MB_MODE, MB_DATA_ADDR y MB_DATA_LEN
Descripción
Para los valores 0, 1 y 2 de MB_MODE, la combinación de los parámetros MB_MODE,
MB_DATA_ADDR y MB_DATA_LEN define el código de función Modbus que se utiliza en el
mensaje Modbus actual:
● MB_MODE contiene la información de si debe leerse o escribirse.
MB_MODE=0: lectura, MB_MODE=1 y 2: escritura (nota: con MB_MODE=2 no se distingue
entre las funciones Modbus 15 y 05 ni entre las funciones Modbus 16 y 06.)
● MB_DATA_ADDR contiene la información de lo que debe leerse o escribirse, así como
información de la dirección con la que la instrucción "MB_CLIENT" calcula la dirección
remota.
● MB_DATA_LEN contiene el número de valores que se van a leer o escribir.
Ejemplos:
● La combinación MB_MODE=1, MB_DATA_ADDR=1, MB_DATA_LEN=1 define el código
de función 05. A partir de la dirección remota 0 se escribe 1 bit de salida.
● La combinación MB_MODE=1, MB_DATA_ADDR=1, MB_DATA_LEN=2 define el código
de función 15. A partir de la dirección remota 0 se escriben 2 bits de salida.
Para los valores 101 a 106 y 115 a 116 de MB_MODE se aplica:
● MB_MODE define el código de función Modbus.
● MB_DATA_ADDR contiene la dirección remota.
● MB_DATA_LEN contiene el número de valores que se van a leer o escribir.

4622

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Ejemplo:
● MB_MODE=104, MB_DATA_ADDR=17.834, MB_DATA_LEN=125
– MB_MODE=104 define el código de función 04 (leer palabras de entrada).
– MB_DATA_ADDR=17.834 define la dirección remota 17.834.
– MB_DATA_LEN=125 define que se leerán 125 valores.
La tabla siguiente muestra la relación entre los parámetros de entrada MB_MODE,
MB_DATA_ADDR, MB_DATA_LEN de la instrucción "MB_CLIENT" y la función Modbus
correspondiente.
MB_MODE

MB_DA‐
TA_ADDR

MB_DA‐
TA_LEN

Función
Modbus

Función y tipo de datos

0

de 1 a 9.999

de 1 a
2.000

01

Leer de 1 a 2.000 bits de salida en la dirección remota de 0
a 9.998

0

de 10.001 a
19.999

de 1 a
2.000

02

Leer de 1 a 2.000 bits de entrada en la dirección remota de 0
a 9.998

0

● de 40.001 a
49.999

de 1 a 125

03

● Leer de 1 a 125 registros de parada en la dirección remota
de 0 a 9.998

● de 400.001 a
465.535

● Leer de 1 a 125 registros de parada en la dirección remota
de 0 a 65.534

0

de 30.001 a
39.999

de 1 a 125

04

Leer de 1 a 125 palabras de entrada en la dirección remota de
0 a 9.998

1

de 1 a 9.999

1

05

Escribir 1 bit de salida en la dirección remota de 0 a 9.998

1

● de 40.001 a
49.999

1

06

● Escribir 1 registro de retención en la dirección remota de
0 a 9.998
● Escribir 1 registro de retención en la dirección remota de
0 a 65.534

● de 400.001 a
465.535
1

de 1 a 9.999

de 2 a
1.968

15

Escribir de 2 a 1.968 bits de salida en la dirección remota de
0 a 9.998

1

● de 40.001 a
49.999

de 2 a 123

16

● Escribir de 2 a 123 registros de parada en la dirección
remota de 0 a 9.998

● de 400.001 a
465.535

● Escribir de 2 a 123 registros de parada en la dirección
remota de 0 a 65.534

2

de 1 a 9.999

de 1 a
1.968

15

Escribir de 1 a 1.968 bits de salida en la dirección remota de
0 a 9.998

2

● de 40.001 a
49.999

de 1 a 123

16

● Escribir de 1 a 123 registros de parada en la dirección
remota de 0 a 9.998

● de 400.001 a
465.535
11

Los parámetros MB_DA‐
TA_ADDR y MB_DATA_LEN
no se evalúan al ejecutar esta
función.

● Escribir de 1 a 123 registros de parada en la dirección
remota de 0 a 65.534
11

Leer la palabra de estado y el contador de eventos del servi‐
dor:
● La palabra de estado forma el estado de ejecución (0: no
en ejecución, 0xFFFF: en ejecución).
● El contador de eventos se incrementa si la orden Modbus
se ha ejecutado correctamente. Si se produce un error al
ejecutar una función Modbus, el servidor envía un
mensaje, pero el contador de eventos no se incrementa.

Programación del PLC
Manual de programación y manejo, 11/2019

4623

Instrucciones
4.1 Instrucciones
MB_MODE

MB_DA‐
TA_ADDR

MB_DA‐
TA_LEN

Función
Modbus

Función y tipo de datos

80

-

1

08

Comprobación del estado del servidor por el código de diag‐
nóstico 0x0000 (test de bucle de retorno: el servidor devuelve
la orden):
● 1 WORD por llamada

81

-

1

08

Reiniciar el contador de eventos del servidor mediante el có‐
digo de diagnóstico 0x000A:
● 1 WORD por llamada

101

de 0 a 65.535

de 1 a
2.000

01

Leer de 1 a 2.000 bits de salida en la dirección remota de 0 a
65.535

102

de 0 a 65.535

de 1 a
2.000

02

Leer de 1 a 2.000 bits de entrada en la dirección remota de 0
a 65.535

103

de 0 a 65.535

de 1 a 125

03

Leer de 1 a 125 registros de parada en la dirección remota de
0 a 65.535

104

de 0 a 65.535

de 1 a 125

04

Leer de 1 a 125 palabras de entrada en la dirección remota de
0 a 65.535

105

de 0 a 65.535

1

05

Escribir 1 bit de salida en la dirección remota de 0 a 65.535

106

de 0 a 65.535

1

06

Escribir 1 registro de retención en la dirección remota de 0 a
65.535

115

de 0 a 65.535

de 1 a
1.968

15

Escribir de 1 a 1.968 bits de salida en la dirección remota de
0 a 65.535

116

de 0 a 65.535

de 1 a 123

16

Escribir de 1 a 123 registros de parada en la dirección remota
de 0 a 65.535
Reservado

de 3 a 10, de
12 a 79, de
82 a 100, de
107 a 114,
de 117 a 255

Nota
Unit Identifier para dispositivos RTU mediante MB-TCP
La identificación del dispositivo (Unit Identifier) para dispositivos RTU mediante Modbus TCP
se encuentra como variable "MB_Unit_ID" en las variables editables del bloque de datos de
instancia de la instrucción "MB_CLIENT". El Unit Identifier sirve para asignar de forma unívoca
los miembros del acoplamiento.

Consulte también
Descripción MB_CLIENT (Página 4617)

4624

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetro MB_DATA_PTR
Descripción
El parámetro MB_DATA_PTR es un puntero hacia un búfer de datos para los datos que se van
a recibir desde el servidor Modbus o que se van a enviar al servidor Modbus. Puede usarse
como búfer de datos un bloque de datos global o un área de memoria (M).
Para un búfer en el área de memoria (M), utilice un puntero con el formato ANY según el patrón
"P#dirección_de_bit" "Tipo de datos" "Longitud" (ejemplo: P#M1000.0 WORD 500).
Dependiendo del área de memoria en la que esté guardado el búfer de datos, MB_DATA_PTR
puede remitir a distintas estructuras de datos:
● Si se utiliza un DB global con acceso optimizado, MB_DATA_PTR puede remitir a una
variable con un tipo de datos simple o a un array con tipos de datos simples. Se soportan
los siguientes tipos de datos:
Tipo de datos

Longitud en bits

Bool

1

Byte, SInt, USInt, Char

8

Word, Int, WChar, UInt

16

DWord, DInt, UDInt, Real

32

En todas las funciones Modbus pueden utilizarse todos los tipos de datos soportados.
MB_CLIENT también puede, por ejemplo, escribir un bit recibido en una dirección
especificada de una variable del tipo de datos Byte sin modificar otros bits de dicho byte.
Por tanto, no es obligatorio disponer de un array de bits para poder ejecutar las funciones
orientadas a bits.
● Si se utiliza un área de marcas o un DB global con acceso estándar como área de memoria,
para MB_DATA_PTR ya no existe ninguna restricción relacionada con los tipos de datos
elementales; en ese caso, MB_DATA_PTR también puede remitir a estructuras de datos
complejas como tipos de datos PLC (UDT) y tipos de datos de sistema (SDT).
Nota
Utilización de un área de marcas como búfer de datos
Si para MB_DATA_PTR se utiliza un área de marcas como búfer de datos, es necesario tener
en cuenta su tamaño. En las CPU S7-1500 es 16 KB, en las CPU S7-1200, 8 KB.

Programación del PLC
Manual de programación y manejo, 11/2019

4625

Instrucciones
4.1 Instrucciones

Parámetro CONNECT
Descripciones de conexión en el parámetro CONNECT hasta la versión V4.1 de la instrucción
MB_CLIENT, inclusive.
Para la instrucción "MB_CLIENT" se pueden utilizar dos descripciones de conexión distintas:
● Conexiones programadas con la estructura TCON_IP_v4
Los parámetros de conexión se guardan en la estructura TCON_IP_v4 y la conexión no se
establece hasta que no se produce la llamada de la instrucción "MB_CLIENT".
● Conexiones configuradas con la estructura TCON_Configured
La conexión configurada ya ha sido establecida por la CPU. Con la estructura
TCON_Configured se indica qué conexión existente debe usarse para la instrucción.
Cada instancia de la instrucción "MB_CLIENT" necesita una conexión unívoca. Por tanto,
establezca para cada instancia de la instrucción una estructura propia TCON_IP_v4 o
TCON_Configured para la descripción de la conexión.

Descripción de conexiones programadas
Para conexiones programadas, utilice en el parámetro CONNECT la siguiente estructura para
la descripción de la conexión según TCON_IP_v4:
● Recuerde indicar en la estructura TCON_IP_v4 solamente conexiones del tipo TCP.
● La conexión no debe utilizar los siguientes números de puerto TCP: 20, 21, 25, 80, 102,
123, 5001, 34962, 34963 y 34964.
Byte

Parámetro

Tipo de datos Valor de arran‐ Descripción
que

0 … 1 InterfaceID

HW_ANY

-

Identificador de hardware de la interfaz local (rango de valo‐
res: de 0 a 65535).

2 … 3 ID

CONN_OUC

-

Referencia a esta conexión (rango de valores: de 1 a 4095).
Mediante este parámetro se identifica una conexión en la
CPU de modo unívoco. Cada instancia de la instrucción
"MB_CLIENT" debe utilizar una ID unívoca.

4

ConnectionType

BYTE

11

Tipo de conexión
Seleccione 11 (decimal) para TCP. No se permite ningún otro
tipo de conexión. Si se utiliza otro tipo de conexión (p. ej.
UDP), el parámetro STATUS de la instrucción emitirá el men‐
saje de error correspondiente.

5

ActiveEstablished

BOOL

TRUE

Identificador del tipo de establecimiento de conexión
Seleccione TRUE para el establecimiento activo de la cone‐
xión.

6 … 9 RemoteAddress

ARRAY [1..4] of BYTE

Dirección IP del interlocutor (servidor Modbus), p. ej. para
192.168.0.1:
● addr[1] = 192
● addr[2] = 168
● addr[3] = 0
● addr[4] = 1

4626

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Byte

Parámetro

Tipo de datos Valor de arran‐ Descripción
que

10 …
11

RemotePort

UINT

502

Número de puerto del interlocutor remoto (rango de valores:
de 1 a 49151).
Utilice el número de IP y de puerto del servidor con el que el
cliente establece la conexión y con el que se comunica me‐
diante el protocolo TCP/IP (valor estándar: 502).

12 …
13

LocalPort

UINT

0

Número de puerto del interlocutor local:
● Números de puerto: de 1 a 49151
● Cualquier puerto: "0"

Nota
Migración de la instrucción "MB_CLIENT" versión 2.1
Los parámetros CONNECT_ID, IP_PORT y IP_OCTET_x se mapean en la versión 3.0 de la
instrucción "MB_CLIENT" en la estructura TCON_IP_v4:
● El parámetro CONNECT_ID de la instrucción "MB_CLIENT" V2.1 equivale al parámetro ID
de TCON_IP_v4.
● El parámetro IP_PORT de la instrucción "MB_CLIENT" V2.1 equivale al parámetro
RemotePort de TCON_IP_v4.
● Los cuatro parámetros IP_OCTET_x de la instrucción "MB_CLIENT" V2.1 equivalen a la
matriz del parámetro RemoteAddress de TCON_IP_v4.

Descripción de conexiones configuradas
Para conexiones programadas, utilice en el parámetro CONNECT la siguiente estructura para
la descripción de la conexión según TCON_Configured..
● Recuerde indicar en la estructura TCON_Configured solamente conexiones del tipo TCP.
● La conexión no debe utilizar los siguientes números de puerto TCP: 20, 21, 25, 80, 102,
123, 5001, 34962, 34963 y 34964.
Byte

Parámetro

Tipo de datos Valor de arran‐ Descripción
que

0 … 1 InterfaceId

HW_ANY

-

Identificador de hardware de la interfaz local (rango de valo‐
res: de 0 a 65535).

2 … 3 ID

CONN_OUC

-

Referencia a esta conexión (rango de valores: de 1 a 4095).
Indique la ID de la conexión existente.

4

ConnectionType

BYTE

0

Tipo de conexión
Seleccione 254 (decimal) para una conexión configurada.

Programación del PLC
Manual de programación y manejo, 11/2019

4627

Instrucciones
4.1 Instrucciones

Descripciones de conexión en el parámetro CONNECT para versiones de instrucción a partir de V4.1
y para versiones de firmware iguales o superiores a V2.5 de las CPU S7-1500
Además de las conexiones con estructuras TCON_IP_v4 y TCON_Configured, para las
versiones a partir de V4.1 de la instrucción MB_CLIENT y a partir de la versión de firmware
V2.5 de las CPU S7-1500 son posibles las siguientes descripciones de conexión para TCP:
● TCON_IP_V4_SEC
Consulte la descripción en AUTOHOTSPOT
● TCON_QDN
Consulte la descripción en AUTOHOTSPOT
● TCON_QDN_SEC
Consulte la descripción en AUTOHOTSPOT
Para más información sobre conexiones seguras consulte AUTOHOTSPOT

Parámetro STATUS
Parámetro STATUS (información de estado general)
STATUS*
(W#16#)

Descripción

0000

Instrucción ejecutada sin errores.

0001

Conexión establecida.

0003

Desconexión realizada.

7000

Ninguna petición activa y ninguna conexión establecida (REQ=0, DISCONNECT=1).

7001

Establecimiento de conexión iniciado.

7002

Llamada intermedia. La conexión se está estableciendo.

7003

Deshaciendo la conexión.

7004

Conexión establecida y vigilada. No se está procesando ninguna petición.

7005

Enviando datos.

7006

Recibiendo datos.

* Los códigos de estado en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

4628

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetro STATUS (error de protocolo)
STA‐
TUS*
(W#16#)

Error local o
remoto

Código de error en la
respuesta de
MB_SERVER
(B#16#)

Descripción

80C8

local

-

No ha habido respuesta del servidor en el periodo definido. Compruebe la
conexión con el servidor Modbus. Este error no se notifica hasta que no ha
finalizado el número configurado de reintentos.
Si la instrucción "MB_CLIENT" no obtiene respuesta alguna con la ID de
transacción transmitida originalmente (ver variable estática MB_TRAN‐
SACTION_ID) dentro del periodo definido, se emitirá este código de error.

8380

local

-

El frame Modbus recibido no tiene el formato correcto o el número de bytes
recibidos no es suficiente.

8381

remoto

01

Código de función no soportado.

8382

local

-

● La longitud del frame Modbus indicada en el encabezado del frame no
coincide con el número de bytes recibidos.
● El número de bytes no coincide con los bytes realmente transferidos
(solo funciones 1-4). Esto sucede, por ejemplo, cuando "MB_CLIENT"
solicita un número impar de palabras pero "MB_SERVER" envía
siempre un número par de palabras.
● La dirección de inicio que figura en el frame recibido no coincide con la
dirección de inicio guardada (funciones 5, 6, 15, 16).
● El número de palabras no coincide con las palabras realmente
transferidas (funciones 15 y 16).

8383

8384

remoto

03

Indicación de longitud no admisible en el frame Modbus recibido. Com‐
pruebe el lado del servidor.

local

-

Error al leer o escribir los datos o acceso fuera del área de direcciones
de MB_DATA_PTR (Página 4625).

remoto

02

Error al leer o escribir los datos o acceso fuera del área de direcciones del
servidor

local

-

● El Exception Code recibido no es válido.
● Se ha recibido otro valor de datos distinto del enviado originalmente por
el cliente (funciones 5, 6 y 8).
● El valor de estado recibido no es válido (función 11)

8385

remoto

03

Error en el valor de datos para la función 5

local

-

● Código de diagnóstico no soportado.
● Se ha recibido otro código de subfunción distinto del enviado
originalmente por el cliente (función 8).

remoto

03

Código de diagnóstico no soportado

8386

local

-

El código de función recibido no coincide con el enviado originalmente.

8387

local

-

El ID de protocolo del frame Modbus TCP recibido por el servidor es distinto
de "0".

8388

local

-

Se ha enviado a través del servidor Modbus una longitud de datos distinta
de la solicitada. Este error solo se produce si se utilizan las funciones Mod‐
bus 5, 6, 15 o 16.

* Los códigos de estado en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

4629

Instrucciones
4.1 Instrucciones

Parámetro STATUS (error de parámetro)
STATUS*
(W#16#)

Descripción

80B6

Tipo de conexión no válido, solo se soportan conexiones TCP.

80BB

Valor no válido en el parámetro ActiveEstablished (identificador del modo de establecimiento de conexión,
véase Parámetro CONNECT (Página 4626)):
● El lado del servidor solo permite el establecimiento pasivo de la conexión (ActiveEstablished = FALSE).
● El lado del cliente solo permite el establecimiento activo de la conexión (ActiveEstablished = TRUE).

8188

Valor no válido en el parámetro MB_MODE.

8189

Direccionamiento no válido de los datos en el parámetro MB_DATA_ADDR.

818A

Longitud de datos no válida en el parámetro MB_DATA_LEN.

818B

Puntero no válido en el parámetro MB_DATA_PTR. Compruebe además los valores de los
parámetros MB_DATA_ADDR (Página 4625) y MB_DATA_LEN.

818C

Error de tiempo en el parámetro BLOCKED_PROC_TIMEOUT o RCV_TIMEOUT (ver variables estáticas de la
instrucción). BLOCKED_PROC_TIMEOUT y RCV_TIMEOUT deben estar entre 0,5 s y 55 s.

8200

● En este momento se está procesando otra petición Modbus a través del puerto.
● Otra instancia de MB_CLIENT con los mismos parámetros de conexión está procesando una petición
Modbus ya existente.

* Los códigos de estado en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Nota
Códigos de error de las instrucciones de comunicación utilizadas internamente
Además de los errores listados en la tabla, con la instrucción "MB_CLIENT" pueden producirse
además errores en las instrucciones de comunicación ("TCON", "TDISCON", "TSEND",
"TRCV", "T_DIAG" y "TRESET") utilizadas por la instrucción.
La asignación del código de error se puede realizar a través del bloque de datos de instancia
de la instrucción "MB_CLIENT". En la sección "Static" se indican los códigos de error en la
instrucción correspondiente bajo STATUS.
El significado de los códigos de error se puede consultar en la documentación de la instrucción
de comunicación correspondiente.
Nota
Error de comunicación al enviar o recibir datos
Si al transmitir o recibir datos se produce un error de comunicación (80C4 (Temporary
communications error. The specified connection is temporarily down.), 80C5 (Remote partner
closed connection actively.), 80A1 (The specified connection is disconnected or is not yet
established.)), entonces se deshace la conexión existente.
Lo que significa que se ven todos los valores de STATUS que se devuelven al deshacerse la
conexión, y que solo cuando se ha deshecho la conexión se devuelve el código de STATUS
que ha causado la desconexión.
Ejemplo: Si al recibir los datos se produce un error de comunicación temporal, primero se
devuelve STATUS 7003 (ERROR=false) y después 80C4 (ERROR=true).

4630

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Consulte también
Cambiar formatos de visualización en el estado del programa (Página 8529)
GET_ERR_ID: Consultar ID de error localmente (Página 933)

MB_SERVER: comunicarse como servidor Modbus TCP vía PROFINET
Descripción MB_SERVER
Descripción
La instrucción "MB_SERVER" permite la comunicación como servidor Modbus TCP a través
de una conexión PROFINET. La instrucción "MB_SERVER" permite procesar solicitudes de
conexión de un cliente Modbus TCP, recibir y procesar solicitudes de Modbus y enviar
mensajes de respuesta.
Para el S7-1200 con versión de firmware V4.0 puede utilizarse la instrucción "MB_SERVER"
hasta la versión de librería V3.1 inclusive. Con el S7-1200 (a partir de la versión V4.1 del
firmware) y el S7-1500 puede utilizarse la instrucción "MB_SERVER" de todas las versiones
de librería.
La conexión puede realizarse a través de la interfaz local de la CPU o CM/CP.
Para utilizar esta instrucción no se requiere ningún módulo de hardware adicional.
ATENCIÓN
Nota de seguridad
Tenga en cuenta que todos los clientes de la red tienen acceso de lectura y escritura a la
memoria imagen de proceso de las entradas y salidas y al bloque de datos o al área de
marcas definido por el registro de retención de Modbus.
Para evitar que personas no autorizadas lleven a cabo procesos de lectura y escritura, es
posible restringir el acceso a una dirección IP. No obstante, tenga en cuenta que la dirección
habilitada también ofrece acceso a personas no autorizadas.

Conexiones múltiples a servidor
Pueden establecerse conexiones múltiples a servidor. Gracias a ello, una sola CPU puede
aceptar conexiones de varios clientes Modbus TCP al mismo tiempo.
Un servidor Modbus TCP puede admitir varias conexiones TCP (el número máximo de
conexiones depende de la CPU utilizada).
El total de conexiones de una CPU, incluidos los clientes Modbus TCP y los servidores, no
debe exceder el número máximo de conexiones admitido.
Las conexiones Modbus TCP también pueden ser utilizadas conjuntamente por instancias de
"MB_CLIENT" y/o "MB_SERVER".

Programación del PLC
Manual de programación y manejo, 11/2019

4631

Instrucciones
4.1 Instrucciones
Para las conexiones de servidor deben respetarse las siguientes reglas:
● Cada conexión "MB_SERVER" debe utilizar un DB de instancia unívoco.
● Cada conexión "MB_SERVER" debe utilizar una ID de conexión unívoca.
Para cada DB de instancia de la instrucción debe utilizarse la correspondiente ID de
conexión. Las ID de conexión y los DB de instancia se agrupan por pares y deben ser
unívocos para cada conexión.
● Para cada conexión debe llamarse separadamente la instrucción "MB_SERVER".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "MB_SERVER":
Parámetro

Declaración

Tipo de da‐
tos

Descripción

DISCONNECT

Input

BOOL

La instrucción "MB_SERVER" establece una conexión pasiva con un
módulo interlocutor. El servidor reacciona a una solicitud de conexión de
la dirección IP indicada en el SDT "TCON_IP_v4" en el parámetro CON‐
NECT.
Este parámetro permite controlar cuándo se aceptará una solicitud de
conexión:
● 0: Si no hay ninguna conexión establecida, se establece una conexión
pasiva.
● 1: Inicialización del establecimiento de la conexión. Si la entrada esta
activada, no se ejecutan otras operaciones. Tras deshacer la
conexión correctamente, el parámetro STATUS devuelve el valor
0003.

MB_HOLD_REG
(Página 4636)

InOut

VARIANT

Puntero al registro de retención Modbus de la instrucción "MB_SERVER"
MB_HOLD_REG debe remitir siempre a un área de memoria mayor de
dos bytes.
El registro de retención contiene los valores a los que está autorizado a
acceder un cliente Modbus mediante las funciones Modbus 3 (lectura), 6
(escritura), 16 (escritura múltiple) y 23 (escritura y lectura en una orden).
Utilice como registro de retención un bloque de datos global de acceso
optimizado o el área de memoria de marcas.

CONNECT (Pági‐
na 4637)

InOut

VARIANT

Puntero hacia la estructura de la descripción de la conexión
Se pueden utilizar las siguientes estructuras (SDT):
● TCON_IP_v4: contiene todos los parámetros de direccionamiento
necesarios para establecer una conexión programada. De forma
estándar es 0.0.0.0 (cualquier dirección IP), pero también se puede
indicar una dirección IP determinada de modo que el servidor solo
reaccione a las peticiones de dicha dirección. Si se utiliza
TCON_IP_v4, la conexión se establece al llamar la instrucción
"MB_SERVER".
● TCON_Configured (solo con S7-1500): contiene los parámetros de
direccionamiento de una conexión configurada. En caso de utilizar
TCON_Configured, la conexión se establece una vez que la CPU
haya cargado la configuración hardware.

4632

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de da‐
tos

Descripción

NDR

Output

BOOL

"New Data Ready":
● 0: No hay datos nuevos
● 1: El cliente Modbus ha escrito datos nuevos

DR

Output

BOOL

"Data Read":
● 0: No se han leído datos
● 1: El cliente Modbus ha leído datos

ERROR

Output

BOOL

Si se produce un error durante una llamada de la instrucción "MB_SER‐
VER", la salida del parámetro ERROR se pone a "1". La causa detallada
del error se muestra en el parámetro STATUS.

STATUS (Pági‐
na 4639)

Output

WORD

Información de estado detallada de la instrucción.

Nota
Uso de la función Modbus 23 en la instrucción "MB_SERVER"
La instrucción "MB_SERVER" soporta el uso de la función Modbus 23, con la que, en una
petición, pueden escribirse datos en un registro de parada y leerse datos de dicho registro; en
cambio, la instrucción "MB_CLIENT" NO soporta esta función y devuelve un código de error.
Asimismo, tenga en cuenta que, en una petición que contenga tanto un acceso de lectura como
un acceso de escritura, el acceso de escritura se ejecutará antes que el acceso de lectura.
Encontrará más información sobre los tipos de datos válidos en "Vista general de los tipos de
datos válidos (Página 241)".

Variables estáticas de MB_SERVER en la versión de la instrucción V4.2
En la tabla siguiente se describen las variables estáticas del bloque de datos de instancia de
la instrucción "MB_SERVER" que se pueden utilizar en el programa. A la variable
HR_Start_Offset se puede acceder en escritura. A las demás variables se puede acceder en
lectura para vigilar el estado del Modbus.
Variable

Tipo de da‐
tos

Valor de
arranque

Descripción

HR_Start_Offset

WORD

0

Asignar la dirección inicial del registro de retención de Modbus.

QB_Start

WORD

0

Dirección inicial del área de direccionamiento permitida para las salidas
que pueden escribirse (bytes de 0 a 65535)

QB_Count

WORD

0xFFFF

Número de bytes de salida que puede escribir el maestro Modbus.
Ejemplo:
QB_Start=0 y QB_Count=10: Pueden escribirse los bytes de salida de 0
a 9.
QB_Count=0: No puede escribirse ningún byte de salida.

Request_Count

WORD

0

Número total de peticiones recibidas por el servidor.

Server_Messa‐
ge_Count

WORD

0

Número total de mensajes recibidos para el servidor en cuestión.

Programación del PLC
Manual de programación y manejo, 11/2019

4633

Instrucciones
4.1 Instrucciones
Variable

Tipo de da‐
tos

Valor de
arranque

Descripción

Xmt_Rcv_Count

WORD

0

Contador para contar el número de transferencias en las que se ha pro‐
ducido un error. El contador solo se incrementa cuando se recibe una
solicitud Modbus no válida.

Exception_Count

WORD

0

Contador para contar el número de errores específicos de Modbus que
dan lugar a un mensaje de error en "MB_CLIENT".

Success_Count

WORD

0

Contador de eventos para registrar el número de peticiones que el ser‐
vidor ha podido ejecutar correctamente.

Connected

BOOL

FALSE

Indica si la conexión con el cliente asignado está establecida o no: TRUE
= conectado, FALSE = no conectado.

Reproducir las direcciones Modbus en la memoria imagen de proceso
La instrucción "MB_SERVER" permite a las funciones Modbus entrantes (1, 2, 4, 5 y 15)
acceder directamente en lectura y escritura a la memoria imagen de proceso de las entradas
y salidas de la CPU (usando los tipos de datos BOOL y WORD).
En las CPU S7-1200, el espacio de direcciones es 1 Kbyte tanto para la memoria imagen de
proceso de las entradas como para la memoria imagen de proceso de las salidas, y 32 Kbyte
para las CPU S7-1500.
La tabla siguiente muestra el área de direcciones de las funciones Modbus indicadas
anteriormente.
Función Modbus
Código de
función

Función

Área de datos

Espacio de direcciones

01

Leer: bits

Output

0

a

65.535

02

Leer: bits

Input

0

a

65.535

04

Leer: WORD

Input

0

a

65.535

05

Escribir: Bit

Output

0

a

65.535

15

Escribir: bits

Output

0

a

65.535

Las solicitudes Modbus entrantes con los códigos de función 3, 6, 16 y 23 escriben o leen los
registros de retención de Modbus (el registro de retención debe especificarse en el parámetro
MB_HOLD_REG).

Ejemplo: Direccionamiento a través de variable estática HR_Start_Offset
Las direcciones del registro de retención de Modbus empiezan en 0 (visto desde el
MB_CLIENT en 40.001). Estas direcciones corresponden al espacio de direcciones del área
de memoria de la CPU para el registro de retención. También es posible definir la variable
HR_Start_Offset de modo que el registro de retención de Modbus reciba una dirección de inicio
distinta de 0.
Ejemplo: El registro de retención empieza en la MW100 y tiene una longitud de 100 WORD.
Con un valor de offset en el parámetro HR_Start_Offset, la dirección de inicio del registro de

4634

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
retención se desplaza de 0 a 20. Todo direccionamiento del registro de retención por debajo
de la dirección 20 y por encima de la dirección 119 da lugar a un error.
HR_Start_Offset

Dirección

Mínimo

Máximo

0

Dirección Modbus (WORD)

0

99

Dirección de la CPU

MW100

MW298

Dirección Modbus (WORD)

20

119

Dirección de la CPU

MW100

MW298

20

Funciones Modbus
La tabla siguiente contiene todas las funciones Modbus que soporta la instrucción
"MB_SERVER".
Código de fun‐ Descripción
ción
01

Leer bits de salida

02

Leer bits de entrada

03

Leer registros de parada

04

Leer palabras de entrada

05

Escribir un bit de salida

06

Escribir un registro de retención

08

Función de diagnóstico:
● Prueba de eco (subfunción 0x0000): La instrucción "MB_SERVER" recibe una palabra de datos y la
devuelve inalterada al cliente Modbus.
● Inicializar el contador de eventos (subfunción 0x000A): La instrucción "MB_SERVER" inicializa los
siguientes contadores de eventos: "Success_Count", "Xmt_Rcv_Count", "Exception_Count",
"Server_Message_Count" y "Request_Count".

11

Función de diagnóstico: Tomar contador de eventos de la comunicación
Durante la comunicación, la instrucción "MB_SERVER" utiliza un contador de eventos interno para registrar
el número de peticiones de lectura y escritura correctas que se envían al servidor Modbus.
El contador de eventos no se incrementa en las funciones 8 u 11. Lo mismo se aplica a las solicitudes que
tengan como consecuencia un error de comunicación, por ejemplo en el caso de un error de protocolo (p.
ej. el código de función en la orden Modbus recibida no es compatible).

15

Escribir bits de salida

16

Escribir registro de retención

23

Escribir registros de parada y leer registros de parada con un Request

Ejemplo
Encontrará un proyecto de ejemplo para la comunicación Modbus TCP entre dos CPU
S7-1500 en el portal de Siemens Industry Online Support, con la ID de artículo 94766380
(http://support.automation.siemens.com/WW/view/es/94766380).
En este ejemplo se utilizan dos funciones de Modbus. Para cada función Modbus se establece
una conexión Modbus TCP a través de una pareja de bloques Modbus (MB_CLIENT y
MB_SERVER).

Programación del PLC
Manual de programación y manejo, 11/2019

4635

Instrucciones
4.1 Instrucciones

)%

)& :5B
+ROGLQJ
5HJLVWHU
>)&@

2%

'% '$7$B
&21
>'%@

0DLQ
>2%@
)%

)& 5'B
+ROGLQJ
5HJLVWHU
>)&@

0%B
&/,(17

)%

)& :5B
+ROGLQJ
5HJLVWHU
>)&@

0%B
&/,(17
2%

&RQH[LµQ7&3 ,' 
)XQFLµQ0RGEXV
(VFULELUYDULRVUHJLVWURVGH
SDUDGD

0%B
6(59(5
'% '$7$B
&21
>'%@

0DLQ
>2%@

)& 5'B
+ROGLQJ
5HJLVWHU
>)&@

)%

0%B
6(59(5

'% '$7$B
&21
>'%@

%ORTXHV
GHVLVWHPD

3URJUDPDGHXVXDULR
&386
&OLHQWH0RGEXV

%ORTXHV
GHGDWRV

'% '$7$B
&21
>'%@

&RQH[LµQ7&3 ,' 
)XQFLµQ0RGEXV
/HHUUHJLVWURVGHSDUDGD

3URJUDPDGHXVXDULR
&386
VHUYLGRU0RGEXV

%ORTXHV
GHVLVWHPD

%ORTXHVGH
GDWRV

Consulte también
Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente (Página 618)

Parámetro MB_HOLD_REG
Descripción
El parámetro MB_HOLD_REG es un puntero hacia un búfer de datos para almacenar los datos
que se han leído o escrito en el servidor Modbus. Como área de memoria puede utilizarse un
bloque de datos global o una marca (M).
● El límite superior para el número de direcciones en el bloque de datos (D) está determinado
por el tamaño máximo de un DB de la CPU.
● El límite superior para el número de marcas (M) viene determinado por el área de marcas
máxima de la CPU.
En la siguiente tabla se muestran ejemplos del mapeo de direcciones Modbus en el registro de
retención para las funciones Modbus 3 (leer varias WORD), 6 (escribir una WORD), 16
(escribir varias WORD) y 23 (escribir y leer varias palabras).
Direcciones
Modbus

4636

Parámetro MB_HOLD_REG: ejemplos

0

MW100

DB10.DBW0

"Recipe".ingredient[1]

1

MW102

DB10.DBW2

"Recipe".ingredient[2]

2

MW104

DB10.DBW4

"Recipe".ingredient[3]

3

MW106

DB10.DBW6

"Recipe".ingredient[4]

4

MW108

DB10.DBW8

"Recipe".ingredient[5]

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetro CONNECT
Descripciones de conexión en el parámetro CONNECT hasta la versión V4.2 de la instrucción
MB_SERVER, inclusive.
Para la instrucción "MB_SERVER" se pueden utilizar dos descripciones de conexión distintas:
● Conexiones programadas con la estructura TCON_IP_v4
Los parámetros de conexión se guardan en la estructura TCON_IP_v4 y la conexión no se
establece hasta que no se produce la llamada de la instrucción "MB_SERVER".
● Conexiones configuradas con la estructura TCON_Configured (solo con S7-1500)
La conexión configurada ya ha sido establecida por la CPU. Con la estructura
TCON_Configured se indica qué conexión existente debe usarse para la instrucción.
Cada instancia de la instrucción "MB_SERVER" necesita una conexión unívoca. Por tanto,
establezca para cada instancia de la instrucción una estructura propia TCON_IP_v4 o
TCON_Configured para la descripción de la conexión.

Descripción de conexiones programadas
Para conexiones programadas, utilice en el parámetro CONNECT la siguiente estructura para
la descripción de la conexión según TCON_IP_v4..
Recuerde indicar en la estructura TCON_IP_v4 solamente conexiones del tipo TCP.
Byte

Parámetro

Tipo de datos Valor de arran‐ Descripción
que

0 … 1 InterfaceID

HW_ANY

-

Identificador de hardware de la interfaz local

2 … 3 ID

CONN_OUC

-

Referencia a esta conexión (rango de valores: de 1 a 4095).
Mediante este parámetro se identifica una conexión en la
CPU de modo unívoco. Cada instancia de la instrucción
"MB_SERVER" debe utilizar una ID unívoca. La ID no puede
ser utilizada simultáneamente por otra instrucción de otro tipo
de comunicación.

4

ConnectionType

BYTE

11

Tipo de conexión
Seleccione 11 (decimal) para TCP. No se permite ningún otro
tipo de conexión. Si se utiliza otro tipo de conexión (p. ej.
UDP), el parámetro STATUS de la instrucción emitirá el men‐
saje de error correspondiente.

5

ActiveEstablished

BOOL

FALSE

Identificador del tipo de establecimiento de conexión
Seleccione FALSE para el establecimiento pasivo de la co‐
nexión.

6 … 9 RemoteAddress

ARRAY [1..4] 0.0.0.0
of BYTE

Dirección IP del interlocutor, p. ej. para 192.168.0.1:
● addr[1] = 192
● addr[2] = 168
● addr[3] = 0
● addr[4] = 1
Si la instrucción "MB_SERVER" debe aceptar peticiones de
conexión de cualquier interlocutor, utilice "0.0.0.0" como di‐
rección IP.

Programación del PLC
Manual de programación y manejo, 11/2019

4637

Instrucciones
4.1 Instrucciones
Byte

Parámetro

Tipo de datos Valor de arran‐ Descripción
que

10 …
11

RemotePort

UINT

0

Número de puerto del interlocutor remoto (rango de valores:
de 1 a 49151).
Si la instrucción "MB_SERVER" debe aceptar solicitudes de
conexión de cada puerto del interlocutor remoto, utilice "0"
como número de puerto.

12 …
13

LocalPort

UINT

502

Número de puerto del interlocutor local (rango de valores: de
1 a 49151).
El número del puerto IP determina qué puerto IP se vigila para
peticiones de conexión del cliente Modbus.
El valor estándar es 502.

Nota
Migración de la instrucción "MB_SERVER" versión 2.1
Los parámetros CONNECT_ID y IP_PORT se mapean en la versión 3.0 de la instrucción
"MB_SERVER" en la estructura TCON_IP_v4:
● El parámetro CONNECT_ID de la instrucción "MB_SERVER" V2.1 equivale al parámetro ID
de TCON_IP_v4.
● El parámetro IP_PORT de la instrucción "MB_SERVER" V2.1 equivale al parámetro
LocalPort de TCON_IP_v4.

Descripción de conexiones configuradas
Para conexiones configuradas, utilice en el parámetro CONNECT la siguiente estructura para
la descripción de la conexión según TCON_Configured.
Recuerde indicar en la estructura TCON_Configured solamente conexiones del tipo TCP.
Byte

Parámetro

Tipo de datos Valor de arran‐ Descripción
que

0 … 1 InterfaceID

HW_ANY

-

Identificador de hardware de la interfaz local (rango de valo‐
res: de 0 a 65535).

2 … 3 ID

CONN_OUC

-

Referencia a esta conexión (rango de valores: de 1 a 4095).
ID debe ser unívoca en toda la CPU. ID no puede ser utilizada
simultáneamente por otra instrucción en otro tipo de comuni‐
cación.
Indique la ID de la conexión existente.

4

ConnectionType

BYTE

-

Tipo de conexión
Seleccione 254 (decimal) para una conexión configurada.

4638

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Descripciones de conexión en el parámetro CONNECT para las instrucciones de la versión V4.2 o
superior y para firmware de la versión V2.5 o superior de las CPU S7-1500
Además de las conexiones con estructuras TCON_IP_v4 y TCON_Configured, para las
versiones superiores a V4.2 de la instrucción MB_SERVER y a partir de la versión V2.5 del
firmware de las CPU S7-1500 son posibles las siguientes descripciones de conexión para TCP:
● TCON_IP_V4_SEC
Consulte la descripción en AUTOHOTSPOT
● TCON_QDN
Consulte la descripción en AUTOHOTSPOT
● TCON_QDN_SEC
Consulte la descripción en AUTOHOTSPOT
Para más información sobre conexiones seguras consulte AUTOHOTSPOT

Parámetro STATUS
Parámetro STATUS (información de estado general)
STATUS*
(W#16#)

Descripción

0000

Instrucción ejecutada sin errores.

0001

Conexión establecida.

0003

Desconexión realizada.

7000

Ninguna llamada activa y ninguna conexión establecida (REQ=0, DISCONNECT=1).

7001

Primera llamada. Establecimiento de conexión iniciado.

7002

Llamada intermedia. La conexión se está estableciendo.

7003

Deshaciendo la conexión.

7005

Enviando datos.

7006

Recibiendo datos.

* Los códigos de estado en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Parámetro STATUS (error de protocolo)
STATUS*
(W#16#)

Código de error en el
mensaje de error de
"MB_SERVER"
(B#16#)

Descripción

8380

-

El frame Modbus recibido no tiene el formato correcto o el número de bytes reci‐
bidos no es suficiente.

8381

01

Código de función no soportado.

Programación del PLC
Manual de programación y manejo, 11/2019

4639

Instrucciones
4.1 Instrucciones
STATUS*
(W#16#)

Código de error en el
mensaje de error de
"MB_SERVER"
(B#16#)

Descripción

8382

03

Error en la longitud de datos:
● Indicación de longitud no admisible en el frame Modbus recibido.
● La longitud del frame indicada en el encabezado del frame Modbus no coincide
con la cantidad de bytes realmente recibidos.
● La cantidad de bytes indicada en el encabezado del frame Modbus no coincide
con la cantidad de bytes realmente recibidos (funciones 15 y 16).

8383

02

Error en la dirección de los datos o acceso fuera del área de direcciones del registro
de retención (parámetro MB_HOLD_REG (Página 4636)).

8384

03

Error en el valor de datos (función 05)

8385

03

Código de diagnóstico no soportado (solo con función 08).

* Los códigos de estado en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Parámetro STATUS (error de parámetro)
STATUS* (W#16#) Descripción
80BB

Valor no válido en el parámetro ActiveEstablished (identificador del modo de establecimiento de cone‐
xión, véase Parámetro CONNECT (Página 4637)):
El lado del servidor solo permite el establecimiento pasivo de la conexión (active_established = FALSE).

8187

Puntero no válido en el parámetro MB_HOLD_REG. El área de datos es demasiado pequeña.

8389

Definición inválida de área de datos:
● Valor inadmisible de data_type
● El número de DB es inadmisible o no existe:
–

Valor inadmisible de db

–

El número de DB no existe

–

El número de DB está siendo utilizado por otra área de datos.

–

DB con acceso optimizado

–

El DB no se encuentra en la memoria de trabajo

● Valor inadmisible de length
● Solapamiento de áreas de direcciones MODBUS que pertenecen al mismo tipo de datos MODBUS
* Los códigos de estado en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

4640

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Nota
Códigos de error de las instrucciones de comunicación utilizadas internamente
Además de los errores listados en la tabla, con la instrucción "MB_SERVER" pueden
producirse además errores en las instrucciones de comunicación ("TCON", "TDISCON",
"TSEND", "TRCV", "T_DIAG" y "T_RESET") utilizadas por la instrucción.
La asignación del código de error se puede realizar a través del bloque de datos de instancia
de la instrucción "MB_SERVER". En la sección "Static" se indican los códigos de error en la
instrucción correspondiente bajo STATUS.
El significado de los códigos de error se puede consultar en la documentación de la instrucción
de comunicación correspondiente.
Nota
Error de comunicación al enviar o recibir datos
Si al transmitir o recibir datos se produce un error de comunicación (80C4 (error de
comunicación temporal. La conexión indicada está establecida provisionalmente.), 80C5 (El
interlocutor remoto ha finalizado la conexión activamente.), 80A1 (La conexión indicada se ha
interrumpido o aún no se ha establecido.)), la conexión existente se deshace.
Lo que significa que se ven todos los valores de STATUS que se devuelven al deshacerse la
conexión, y que solo cuando se ha deshecho la conexión se devuelve el código de STATUS
que ha causado la desconexión.
Ejemplo: Si al recibir los datos se produce un error de comunicación temporal, primero se
devuelve STATUS 7003 (ERROR=false) y después 80C4 (ERROR=true).

Consulte también
Cambiar formatos de visualización en el estado del programa (Página 8529)
GET_ERR_ID: Consultar ID de error localmente (Página 933)

Acceso a áreas de datos en DB en vez de acceso directo a direcciones MODBUS a partir de la versión
V5.0
Acceso a áreas de datos en DB en vez de acceso directo a direcciones MODBUS a partir de la versión
V5.0
A partir de la versión V5.0 de la instrucción MB_SERVER y a partir de las versiones V2.5 (CPU
S7-1500) o V4.2 (CPU S7-1200) del firmware, en vez de acceder directamente a memorias
imagen de proceso y registros Holding es posible acceder a áreas de datos en los DB. Para
ello, el DB debe tener el atributo "Acceso optimizado al bloque" desactivado y no debe estar
exclusivamente en la memoria de carga.
Si se recibe una solicitud MODBUS y no se ha definido ninguna área de datos para el tipo de
datos MODBUS del código de función correspondiente, la solicitud será tratada igual que en
las anteriores versiones de la instrucción, es decir, se producirá un acceso directo a memorias
imagen de proceso y fichas Holding.

Programación del PLC
Manual de programación y manejo, 11/2019

4641

Instrucciones
4.1 Instrucciones
Si, por el contrario, se ha definido un área de datos para el tipo de datos MODBUS del código
de función, la instrucción MB_SERVER lee de dicha área de datos o escribe en ella. Del tipo
de orden dependerá que se lea o se escriba.
Una única solicitud MODBUS solo puede leerse en un área de datos o escribirse en un área
de datos. Por tanto, si se desea leer registros Holding que se extiendan por varias áreas de
datos, se necesitarán varias solicitudes MODBUS.

Reglas para definir las áreas de datos
Pueden definirse como máximo ocho áreas de datos en diferentes DB; cada DB solo puede
contener un área de direcciones. Una única solicitud MODBUS solo puede leerse en
exactamente un área de datos o escribirse en exactamente un área de datos. Cada área de
datos se corresponde con un área de direcciones MODBUS. La definición se realiza en la
variable estática Data_Area_Array del DB de instancia; Data_Area_Array es un campo que
consta de ocho elementos.
Si desea utilizar menos de ocho áreas de datos, las áreas de datos deseadas deben
encontrarse una tras otra y sin huecos. La primera entrada vacía de las áreas de datos finaliza
la búsqueda del área de datos durante la ejecución. Por tanto, si p. ej. se han definido los
elementos de campo 1, 2, 4 y 5, solo se detectan los elementos de campo 1 y 2, puesto que
el elemento de campo 3 está vacío.
El campo Data_Area_Array consta de 8 elementos: Data_Area_Array[1] ... Data_Area_Array[8]
Cada elemento de campo Data_Area_Array[x], 1 <= x <= 8, es un UDT del tipo MB_DataArea
y tiene la estructura siguiente:

Paráme‐
tros

Tipo
de da‐
tos

da‐
ta_type

UInt

Significado

Identificador del tipo de datos MODBUS que se mapea en esta área de datos:
● 0: identificador de un elemento de campo vacío o de un área de datos no utilizada. En este caso son
irrelevantes los valores de db, start y length.
● 1: Memoria Imagen de proceso de las salidas (utilizada con los códigos de función 1, 5 y 15)
● 2: Memoria imagen de proceso de las entradas (utilizada con el código de función 2)
● 3: Registro Holding (se utiliza con los códigos de función 3, 6 y 16)
● 4: Registro de entrada (se utiliza con el código de función 4)
Nota: Si se ha definido un área de datos para un tipo de datos MODBUS, la instrucción MB_SERVER ya
no podrá acceder directamente a dicho tipo de datos MODBUS. Si la dirección de una solicitud MODBUS
para dicho tipo de datos no se corresponde con ningún área de datos definida, en STATUS se devuelve
el valor W#16#8383.

db

UInt

Número del bloque de datos en el que se representan los registros MODBUS o los bits definidos a
continuación.
El número de DB debe ser unívoco en las áreas de datos. El mismo número de DB no puede estar
definido en varias áreas de datos.
El DB debe ser un DB con acceso estándar y no debe estar exclusivamente en la memoria de carga.
Las áreas de datos empiezan siempre en la dirección de byte 0 del DB.
Valores permitidos: 1 a 60999

4642

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Paráme‐
tros

Tipo
de da‐
tos

start

UInt

Significado

Primera dirección MODBUS que se mapea en el bloque de datos a partir de la dirección 0.0.
Valores permitidos: de 0 a 65535

length

UInt

Número de bits (para los valores 1 y 2 de data_type) o número de registros (para los valores 3 y 4 de
data_type).
Las áreas de direcciones MODBUS de un mismo tipo de datos MODBUS no pueden solaparse.
Valores permitidos: de 1 a 65535

Ejemplos de definición de áreas de datos
● Primer ejemplo: data_type = 3, db = 1, start = 10, length = 6
Los registros Holding (data_type = 3) se mapean en el bloque de datos 1 (db = 1). La
dirección Modbus 10 (start = 10) se encuentra en la palabra de datos 0. La última dirección
Modbus válida 15 (length = 6) se encuentra en la palabra de datos 5.
● Segundo ejemplo: data_type = 2, db = 15, start = 1700, length = 112
Las entradas (data_type = 2) se mapean en el bloque de datos 15 (db = 15). La dirección
Modbus 1700 (start = 1700) se encuentra en la palabra de datos 0. La última dirección
Modbus válida 1811 (length = 112) se encuentra en la palabra de datos 111.

Limitación del acceso de lectura a memorias imagen de proceso a partir de la versión V5.0
Limitación del acceso de lectura a memorias imagen de proceso
A partir de la versión V5.0 de la instrucción MB_SERVER, en la memoria imagen de proceso
de entradas y en la memoria imagen de proceso de salidas es posible definir un área a la que
tengan acceso de lectura dispositivos MODBUS remotos. Entonces ya no será posible un
acceso de lectura de dispositivos MODBUS remotos a direcciones fuera de dichas áreas de la
memoria imagen de proceso.
Nota
Limitación del acceso de escritura a memorias imagen de proceso
La posibilidad de limitar a un área determinada el acceso de escritura a la memoria imagen de
proceso de salidas existe desde la versión V4.2 de la instrucción.

Definición de áreas de lectura en las memorias imagen de proceso
La definición de áreas de lectura en las memorias imagen de proceso se realiza en las
siguientes variables estáticas del DB de instancia:
● QB_Read_Start: dirección del primer byte de la memoria imagen de proceso de salidas que
puede leerse desde un dispositivo MODBUS remoto (se aplica para el código de función 1)
● QB_Read_Count: número de bytes de la memoria imagen de proceso de salidas que
pueden leerse desde un dispositivo MODBUS remoto (se aplica para el código de función
1)

Programación del PLC
Manual de programación y manejo, 11/2019

4643

Instrucciones
4.1 Instrucciones
● IB_Read_Start: dirección del primer byte de la memoria imagen de proceso de entradas que
puede leerse desde un dispositivo MODBUS remoto (se aplica para los códigos de función
2 y 4)
● IB_Read_Count: Número de bytes de la memoria imagen de proceso de entradas que
pueden leerse desde un dispositivo MODBUS remoto (se aplica para los códigos de función
2 y 4)

Variables estáticas en el DB de instancia para definir áreas de escritura y de lectura en las memorias
imagen de proceso
La tabla siguiente describe las variables estáticas que se relacionan más arriba del DB de
instancia de la instrucción MB_SERVER, con las que se definen las áreas de lectura en las
memorias imagen de proceso.
Por razones de exhaustividad se indican también aquellas variables estáticas con las que, a
partir de la versión V4.2, se definen las áreas de escritura en las memorias imagen de proceso
(QB_Start y QB_Count).
Variable

Tipo de datos

Valor de arranque

QB_Start

UInt

0

QB_Count

UInt

65535

QB_Read_Start

UInt

0

QB_Read_Count

UInt

65535

IB_Read_Start

UInt

0

IB_Read_Count

UInt

65535

Las variables estáticas NDR_immediate y DR_immediate
NDR_immediate y DR_immediate
A partir de la versión de instrucción V5.0, las variables estáticas NDR_immediate y
DR_immediate están incluidas en el bloque de datos de instancia de la instrucción
MB_SERVER.
Variable

Tipo de datos

Valor de
arranque

Significado

NDR_immediate

BOOL

FALSE

Mismo significado que el parámetro NDR (New Data Ready).
NDR_immediate se actualiza en la misma llamada de MB_SERVER en la
que se procesa una petición de escritura MODBUS TCP.

DR_immediate

BOOL

FALSE

Mismo significado que el parámetro DR (Data Read).
DR_immediate se actualiza en la misma llamada de MB_SERVER en la
que se procesa una petición de lectura MODBUS TCP.

4644

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Diferencias entre las versiones <= V3.x y >= V4.0 de la librería Modbus TCP
Diferencias entre las versiones <= V3.x y >= V4.0 de las instrucciones Modbus
Las instrucciones MODBUS MB_SERVER / MB_CLIENT presentan las diferencias siguientes
entre las versiones:
● Parámetros de dirección
– En las versiones <= V3.x, los datos de dirección del servidor Modbus TCP se indicaban
mediante los parámetros de entrada "IP_x".
– Para ello, las versiones >= V4.0 utilizan los tipos de datos de sistema TCON_IP_V4 y
TCON_Configured en el parámetro de entrada CONNECT.
● Si durante el procesamiento se produce un error, a partir de la versión 4.0 de las
instrucciones Modbus hay más avisos STATUS disponibles, que deben evaluarse en
correspondencia.
Encontrará información detallada en las descripciones de las instrucciones MB_CLIENT
(Página 4617) y MB_SERVER (Página 4631).
Nota
Cambio de la librería Modbus TCP de una versión <= V3.x a una versión >= V4.0
Al cambiar la librería Modbus TCP de una versión <= V3.x a una versión >= V4.0 es necesario
cambiar también la librería Open User Communication. A continuación, compruebe todas las
instrucciones relevantes para el programa.

Comunicación MODBUS (TCP) redundante para versiones de librería a partir de V5.0
MB_RED_CLIENT: Comunicación redundante como cliente MODBUS-TCP a través de PROFINET
Descripción MB_RED_CLIENT
Descripción
Esta instrucción permite establecer un acoplamiento entre una CPU 1200/1500 y un
dispositivo que soporte el protocolo Modbus/TCP.
La instrucción "MB_RED_CLIENT" permite la comunicación como cliente Modbus/TCP a
través de la conexión PROFINET. La instrucción "MB_RED_CLIENT" permite establecer una
conexión redundante entre el cliente y el servidor, enviar solicitudes Modbus, recibir
respuestas, y controlar la desconexión del cliente Modbus/TCP.

Programación del PLC
Manual de programación y manejo, 11/2019

4645

Instrucciones
4.1 Instrucciones
La instrucción "MB_RED_CLIENT" puede utilizarse en las CPU siguientes:
"MB_RED_CLIENT" V1.0

"MB_RED_CLIENT" V1.1

S7-1200

FW V4.2 y superior

FW V4.2 y superior

S7-1500

FW V2.5 y superior

FW V2.5 y superior

S7-1500R

--

FW V2.6 y superior

S7-1500H

--

FW V2.6 y superior

Para utilizar esta instrucción no se requiere ningún módulo de hardware adicional.

Conexiones múltiples a cliente
Las CPU son capaces de procesar varias conexiones de cliente Modbus/TCP. El número
máximo de conexiones depende de la CPU utilizada y puede consultarse en los datos técnicos
de la CPU. El total de conexiones de una CPU, incluidos los clientes y los servidores Modbus/
TCP, no debe exceder el número máximo de conexiones admitido.
En algunas conexiones de cliente deben respetarse las siguientes reglas:
● Cada conexión "MB_RED_CLIENT" debe utilizar un DB de instancia unívoco.
● Para cada conexión "MB_RED_CLIENT" debe especificarse una dirección IP unívoca del
servidor.
● Cada conexión "MB_RED_CLIENT" requiere una ID de conexión unívoca. El ID de
conexión deben ser unívoco en toda la CPU.
Encontrará información sobre la configuración redundante aquí: Modo de funcionamiento y
comportamiento redundante (Página 4648).

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "MB_RED_CLIENT":
Parámetro

Decla‐
ración

Tipo de da‐
tos

Descripción

REG_KEY (Pági‐
na 4656)

Input

STRING[17]

Código de validación para la concesión de licencia

USE_ALL_CONN

Input

Se debe obtener una licencia individual de la instrucción "MB_RED_CLIENT"
en cada CPU.
BOOL

Determinación del número de conexiones configuradas a través de las cuales
debe enviarse el telegrama.
● 0: Enviar el telegrama a través de 1 conexión, conmutar a la siguiente
conexión solo en caso de fallo
● 1: Enviar el telegrama a través de todas las conexiones configuradas

4646

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Decla‐
ración

Tipo de da‐
tos

Descripción

REQ

Input

BOOL

Orden Modbus al servidor Modbus/TCP
El parámetro REQ está controlado por nivel. Esto significa que, mientras la
entrada esté activada (REQ = TRUE), la instrucción enviará órdenes de comu‐
nicación. Si la conexión aún no se ha establecido, se establece y, acto seguido,
se envía el telegrama Modbus.
Las modificaciones de los parámetros de entrada no se hacen efectivas hasta
que no hay respuesta del servidor o hasta que no se devuelve un mensaje de
error.
Si durante una orden Modbus en curso se vuelve a activar el parámetro REQ,
a continuación no se ejecuta ninguna otra transferencia.

DISCONNECT

Input

BOOL

A través de este parámetro se controla el establecimiento de la conexión y la
desconexión con el servidor Modbus:
● 0: Establecer conexión de comunicación con el interlocutor configurado en
el parámetro CONNECT (ver parámetro CONNECT).
● 1: Deshacer la conexión. Durante la desconexión no se ejecuta ninguna otra
función. Tras deshacer la conexión correctamente, el parámetro
STATUS_x devuelve el valor 0003.

MB_MODE (Pági‐ Input
na 4658)

USINT

Selección del modo de orden Modbus (lectura, escritura o diagnóstico) o se‐
lección directa de una función Modbus.

MB_DA‐
TA_ADDR (Pági‐
na 4658)

Input

UDINT

Dirección Modbus en función de MB_MODE

MB_DATA_LEN

Input

UINT

Longitud de datos: Número de bits o registros para el acceso a datos.

MB_DATA_PTR
(Página 4658)

InOut

VARIANT

Puntero hacia un búfer de datos para los datos que se van a recibir desde el
servidor Modbus o que se van a enviar al servidor Modbus.

LICENSED (Pági‐ Output
na 4656)

BOOL

● 0: La instrucción no tiene licencia

IDENT_CODE
(Página 4656)

Output

STRING[18]

Identificación para la concesión de licencia. Solicite el código de validación
REG_KEY con este string.

DONE

Output

BOOL

El bit del parámetro de salida DONE se pone a "1" en cuanto se ejecuta sin
errores la orden Modbus activada en al menos 1 conexión.

BUSY

Output

BOOL

● 0: Ninguna orden Modbus en proceso

● 1: La instrucción tiene licencia

● 1: La orden Modbus se está ejecutando
El parámetro de salida BUSY no se activa al establecer o al deshacer la cone‐
xión.
ERROR

Output

BOOL

● 0: Ningún error
● 1: La orden Modbus activada no se ha podido transferir correctamente a
ninguna de las conexiones configuradas. La causa del error se indica
mediante el parámetro STATUS_x.

STATUS_0A (Pá‐
gina 4661)

Output

WORD

Información de estado detallada de la instrucción en la conexión 0A.

STATUS_1A (Pá‐
gina 4661)

Output

WORD

Información de estado detallada de la instrucción en la conexión 1A.

STATUS_0B (Pá‐
gina 4661)

Output

WORD

Información de estado detallada de la instrucción en la conexión 0B.

Programación del PLC
Manual de programación y manejo, 11/2019

4647

Instrucciones
4.1 Instrucciones
Parámetro

Decla‐
ración

Tipo de da‐
tos

Descripción

STATUS_1B (Pá‐
gina 4661)

Output

WORD

Información de estado detallada de la instrucción en la conexión 1B.

RED_ERR_S7
(Página 4661)

Output

BOOL

● 0: Ningún error de redundancia en el lado SIMATIC

RED_ERR_DEV
(Página 4661)

Output

TOT_COM_ERR
(Página 4661)

Output

● 1: Error de redundancia en el lado SIMATIC
BOOL

● 0: Ningún error de redundancia en el lado del interlocutor de acoplamiento
● 1: Error de redundancia en el lado del interlocutor de acoplamiento

BOOL

● 0: Se ha establecido al menos 1 conexión configurada
● 1: Pérdida de comunicación completa, se han deshecho todas las
conexiones configuradas

Nota
Datos de entrada coherentes durante una llamada de "MB_RED_CLIENT"
En cuanto se ejecuta una instrucción de cliente Modbus, los valores de los parámetros de
entrada se almacenan internamente. No deben modificarse mientras se procesa el telegrama.

Modo de funcionamiento y comportamiento redundante
Descripción
Los dispositivos de comunicación pueden estar configurados de modo independiente o
redundante. Si uno de los dos dispositivos está configurado de modo independiente, se habla
de redundancia unilateral. Si los dos interlocutores están configurados de modo redundante,
esto se denomina redundancia bilateral.
Números de puerto para cliente y servidor
El cliente Modbus utiliza un número de puerto a partir del 2000. Al servidor Modbus suele
accederse a través del número de puerto 502.

Redundancia unilateral
Descripción
Se debe configurar una conexión para cada conexión entre interlocutores. Los puntos de
conexión de SIMATIC S7 se llaman 0 y 1, mientras que los puntos de conexión del interlocutor
se llaman A y B.
La CPU R/H 1 designa el punto de conexión 0 y la CPU R/H 2, el punto de conexión 1.

4648

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Configuración
Si el S7 está configurado de modo redundante, se crean dos conexiones: una del punto de
conexión 0 del S7 al punto nodal A del interlocutor y una del punto de conexión 1 del S7 al punto
nodal A del interlocutor.
● Conexión del punto de conexión 0 de S7 al nodo A del interlocutor => conexión 0A
● Conexión del punto de conexión 1 de S7 al nodo A del interlocutor => conexión 1A
La figura ilustra gráficamente los nombres de las conexiones.

Figura 4-9

Modbus/TCP: Redundancia unilateral S7

Si S7 está configurado de modo independiente y el interlocutor de modo redundante, se crean
dos conexiones: una del punto de conexión 0 de S7 al punto nodal A del interlocutor, y una del
punto de conexión 0 de S7 al punto nodal B del interlocutor.
● Conexión del punto de conexión 0 de S7 al nodo A del interlocutor => conexión 0A
● Conexión del punto de conexión 0 de S7 al nodo B del interlocutor => conexión 0B
La figura ilustra gráficamente los nombres de las conexiones.

Programación del PLC
Manual de programación y manejo, 11/2019

4649

Instrucciones
4.1 Instrucciones

Figura 4-10

Modbus/TCP: Interlocutor con redundancia unilateral

Redundancia bilateral
Descripción
Para cada conexión entre interlocutores debe configurarse 1 conexión. Los puntos de
conexión de SIMATIC S7 se llaman 0 y 1, mientras que los puntos de conexión del interlocutor
se llaman A y B.
La CPU R/H 1 designa el punto de conexión 0 y la CPU R/H 2, el punto de conexión 1.
Configuración
Si existe redundancia bilateral, se crean cuatro conexiones: dos desde el punto de conexión 0
y otras dos desde el punto de conexión 1 de S7, cada una de ellas a los puntos nodales A y B
del interlocutor, respectivamente.
● Conexión del punto de conexión 0 de S7 al nodo A del interlocutor => conexión 0A
● Conexión del punto de conexión 1 de S7 al nodo A del interlocutor => conexión 1A
● Conexión del punto de conexión 0 de S7 al nodo B del interlocutor => conexión 0B
● Conexión del punto de conexión 1 de S7 al nodo B del interlocutor => conexión 1B
La figura ilustra gráficamente los nombres de las conexiones.

4650

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Figura 4-11

Modbus/TCP: Redundancia bilateral

Procesamiento de telegramas
General
Los telegramas se pueden enviar a través de una o bien de todas las conexiones configuradas.
Envío de telegramas a través de una conexión
Con el ajuste USE_ALL_CONN = FALSE, el telegrama MODBUS se envía a través de una
conexión (la que esté activa en ese momento). En caso de tiempo excedido (ninguna
respuesta del servidor) o de un fallo de conexión, se intenta enviar el telegrama de forma
sucesiva a través del resto de las conexiones configuradas (4 como máximo). El orden es 0A,
1A, 0B y 1B. Cuando un telegrama se envía correctamente a través de una conexión, esta
conexión se marca como "activa", y el intercambio de telegramas posterior tiene lugar a través
de esa conexión. En caso de fallo de la conexión activa, se vuelve a intentar enviar el telegrama
a través de cada una de las conexiones configuradas. Si todos los intentos de envío fallan, se
activan ERROR y STATUS_x.
Si se recibe un telegrama de respuesta, se realiza una comprobación de coherencia. Si el
resultado de dicha comprobación es positivo, se llevan a cabo las acciones necesarias, y la
orden termina sin error; se activa la salida DONE. Si se detectan errores durante la
comprobación, la orden termina con error, se activa el bit ERROR y se muestra un número de
error en STATUS_x. En este caso no se vuelve a intentar enviar el telegrama a través de la
siguiente conexión configurada. Solo se cambia a las otras conexiones configuradas cuando
se detecta un fallo de conexión o no se recibe respuesta.
Envío de telegramas a través de todas las conexiones
Con el ajuste USE_ALL_CONN = TRUE, el telegrama MODBUS se envía a través de todas las
conexiones configuradas establecidas. Tras recibirse un telegrama de respuesta en una de las
conexiones, se realiza una comprobación de coherencia. Si el resultado de dicha
comprobación es positivo, se llevan a cabo las acciones necesarias. Si se ha recibido un
telegrama de respuesta válido en al menos una conexión, se activa la salida DONE.

Programación del PLC
Manual de programación y manejo, 11/2019

4651

Instrucciones
4.1 Instrucciones

Salidas de redundancia RED_ERR_S7, RED_ERR_DEV y TOT_COM_ERR
Descripción
Los bits de redundancia RED_ERR_S7, RED_ERR_DEV y TOT_COM_ERR se activan en
función de los estados de las salidas de estado.
Visualización de los bits de alarma para la configuración de redundancia bilateral

Visualización de los bits de alarma para la configuración de redundancia unilateral

4652

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parametrización
Descripción
La instrucción "MB_RED_CLIENT" V1.0 y V1.1 puede emplearse con S7-1200 y con S7-1500.
S7-1200
Las conexiones se realizan a través de la interfaz local de la CPU o de un CM/CP. En este caso,
las conexiones se parametrizan y establecen mediante la estructura TCON_IP_V4.
S7-1500
Las conexiones se realizan a través de la interfaz local de la CPU o de un CM/CP. En este caso,
son posibles tanto conexiones parametrizadas mediante la estructura TCON_IP_V4 como
conexiones configuradas a través de la estructura TCON_Configured.
La instrucción "MB_RED_CLIENT" V1.1 puede emplearse con S7-1200R y con S7-1500H.
S7-1500R y S7-1500H
Las conexiones se realizan a través de la interfaz local de la CPU o de un CM/CP. En este caso,
las conexiones se parametrizan y establecen mediante la estructura TCON_IP_V4.

Configuración de "MB_RED_CLIENT"
En el cuadro de diálogo de configuración de la instrucción "MB_RED_CLIENT" se realizan los
siguientes ajustes:
● Parámetros de conexión para las conexiones 0A, 1A, 0B y 1B (para la configuración
redundante, ver Modo de funcionamiento y comportamiento redundante (Página 4648))
● Parámetros internos (opcional)
El diálogo de configuración se puede abrir con la instrucción o con los objetos tecnológicos.

Programación del PLC
Manual de programación y manejo, 11/2019

4653

Instrucciones
4.1 Instrucciones
Parámetros de conexión

Variable

Figura 4-12

Modbus/TCP: conexión de cliente parametrizada

Figura 4-13

Modbus/TCP: conexión de cliente configurada

Valor de
arranque

Descripción

Conexiones parametrizadas
Interface ID

64

Identificador de HW de la interfaz PN utilizada

Connection ID

16#0000

ID de conexión para las conexiones utilizadas

Local port

0

Número de puerto local del cliente. Por defecto no se escribe ningún número de puerto para
el cliente.

Remote IP

0.0.0.0

Dirección IP remota del servidor

Estas ID de conexión deben ser unívocas en toda la CPU.

4654

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Valor de
arranque

Descripción

Remote port

502

Número de puerto remoto del servidor
El puerto estándar para el servidor Modbus/TCP es el 502.

Conexiones configuradas
Interface ID

64

Identificador de HW de la interfaz PN utilizada

Connection ID

16#0000

ID de conexión para las conexiones utilizadas
Estas conexiones se configuran en la vista de redes.

Parámetros internos (opcional)

Variable

Tipo de
datos

Valor Descripción
de
arran‐
que

Blocked Proc
Time

REAL

3.0

Tiempo en segundos que hay que esperar para que se inicialice la variable estática
ACTIVE en una instancia Modbus bloqueada. Esto puede suceder, por ejemplo, cuan‐
do, habiéndose emitido una orden de cliente, se cancela la ejecución de la función de
cliente antes de que se haya ejecutado por completo la orden. El tiempo de espera debe
estar entre 0,5 s y 55 s.

Receive ti‐
meout

REAL

2.0

Intervalo en segundos durante el que la instrucción "MB_RED_CLIENT" permanece a la
espera de una respuesta del servidor. Debe estar entre 0,5 s y 55 s.

MB_Unit_ID

BYTE

255

ID de dispositivo Modbus:
Para acceder a un servidor TCP Modbus se utiliza su dirección IP. Por ello no se utiliza
el parámetro MB_UNIT_ID para el direccionamiento Modbus TCP .
El parámetro MB_UNIT_ID equivale al campo de la dirección de esclavo en el protocolo
Modbus RTU. Si se utiliza un servidor Modbus/TCP como pasarela a un protocolo Mod‐
bus RTU, el dispositivo esclavo en la red serie puede identificarse con MB_UNIT_ID. En
tal caso, el parámetro MB_UNIT_ID reenviaría la orden a la dirección de esclavo Modbus
RTU correcta.
Tenga en cuenta que algunos dispositivos Modbus/TCP pueden necesitar el parámetro
MB_UNIT_ID para la inicialización dentro de un rango de valores limitado.

Retries

WORD

3

Número de intentos de transmisión que realiza la instrucción "MB_RED_CLIENT" antes
de devolver el error W#16#80C8.

Programación del PLC
Manual de programación y manejo, 11/2019

4655

Instrucciones
4.1 Instrucciones

Nota
Variable MB_Transaction_ID
Si el ID de transacción en la respuesta del servidor Modbus TCP no coincide con el ID de
transacción de la orden de "MB_RED_CLIENT", la instrucción "MB_RED_CLIENT" espera la
respuesta del servidor Modbus TCP con el ID de transacción correcto durante el tiempo
RCV_TIMEOUT * RETRIES; después devuelve el error W#16#80C8.

Licencias
La instrucción "MB_RED_CLIENT" es de pago y se debe utilizar con una licencia individual en
cada CPU. La licencia se concede en 2 pasos:
● Lectura del IDENT_CODE e
● Introducción del código de validación REG_KEY (clave del Registro).
Nota
S7-1500R y S7-1500H
En una estación S7 R/H solo se concede licencia a la CPU1. Por este motivo, una vez
concedida la licencia ya no es posible cambiar la CPU1.

Procedimiento
Lectura de IDENT_CODE
Para la lectura del IDENT_CODE proceda de la manera siguiente:
1. Parametrice la instrucción "MB_RED_CLIENT" de acuerdo con sus requisitos en un OB
cíclico. Cargue el programa en la CPU y póngala en RUN.
2. Abra el DB de instancia de la instrucción Modbus y haga clic en el botón "Observar todos".

4656

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
3. En la salida IDENT_CODE se visualiza una cadena de caracteres de 18 dígitos.

4. Copie este string mediante Copiar/Pegar desde el bloque de datos al formulario que ha
recibido por correo electrónico después de pedir el producto o que está incluido en el CD.
5. Envíe el formulario mediante una Service Request (solicitud de servicio) al Customer
Support (https://support.industry.siemens.com/my/ww/en/requests/#createRequest).
Luego recibirá el código de validación para la CPU.
Introducción del código de validación REG_KEY
El código de validación REG_KEY debe indicarse en cada instrucción "MB_RED_CLIENT". La
clave REG_KEY debe guardarse en un bloque de datos global a través del cual todas las
instrucciones "MB_RED_CLIENT" recibirán el código de validación necesario.
Para la introducción del código de validación REG_KEY proceda del modo siguiente:
● Mediante "Agregar nuevo bloque…" inserte un bloque de datos global nuevo con un
nombre simbólico unívoco, p. ej., "DB_Licencia".
● Defina un parámetro REG_KEY con el tipo de datos STRING[17] en este bloque.

Figura 4-14

REG_KEY en DB

● Copie el código de validación de 17 dígitos determinado mediante Copiar/Pegar en la
columna "Valor de arranque".
● Introduzca el nombre del DB de licencia y el nombre del string, p. ej.,
DB_Licencia.REG_KEY, en el OB cíclico, en el parámetro REG_KEY de la instrucción
"MB_RED_CLIENT".
● Cargue los bloques modificados en la CPU. La introducción del código de validación se
puede realizar durante el tiempo de ejecución, no es necesario pasar de STOP -> RUN.
La comunicación Modbus/TCP a través de la instrucción "MB_RED_CLIENT" ahora tiene
licencia para esta CPU; el bit de salida LICENSED es TRUE.

Programación del PLC
Manual de programación y manejo, 11/2019

4657

Instrucciones
4.1 Instrucciones
Falta la concesión de licencia o esta es errónea
Si el código de validación falta o es incorrecto, el ERROR-LED de la CPU parpadea.
Adicionalmente, en S7-1200 y S7-1500 se escribe cíclicamente una entrada en el búfer de
diagnóstico referente a la falta de licencia. En estaciones R y H solo se muestra el error de
longitud de área.

Si el código de validación falta o es incorrecto, se procesa la comunicación Modbus/TCP; sin
embargo, en la salida STATUS_x se muestra siempre W#16#0A90 "No existe ninguna licencia
válida". El bit de salida LICENSED es FALSE.
ADVERTENCIA
Si en el S7-1500 (R/H) falta el OB121 en el controlador, la CPU pasa al estado STOP.

Parámetros de entrada MB_MODE, MB_DATA_ADDR, MB_DATA_LEN y MB_DATA_PTR
Descripción
La combinación de los parámetros MB_MODE, MB_DATA_ADDR y MB_DATA_LEN
determina el código de función Modbus que se utiliza en el mensaje Modbus actual:
● MB_MODE contiene la información de si debe leerse o escribirse.
Leer: MB_MODE = 0, 101, 102, 103 y 104
Escribir: MB_MODE = 1, 2, 105, 106, 115 y 116 (nota: con MB_MODE = 2 no se distingue
entre las funciones Modbus 15 y 05 ni entre las funciones Modbus 16 y 06).
● MB_DATA_ADDR contiene la información de lo que debe leerse o escribirse, así como
información de la dirección con la que la instrucción "MB_RED_CLIENT" calcula la
dirección remota.
● MB_DATA_LEN contiene el número de valores que se van a leer o escribir.

4658

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

La tabla siguiente muestra la relación entre los parámetros de entrada MB_MODE,
MB_DATA_ADDR y MB_DATA_LEN de la instrucción "MB_RED_CLIENT" y la función
Modbus correspondiente.
MB_
MO‐
DE

MB_DA‐
TA_ADDR

MB_DA Fun‐
TA_LE ción
N
Mod‐
bus

Función y tipo de datos

0

de 1 a 9.999

de 1 a
2.000

01

Leer de 1 a 2.000 bits de salida en la dirección remota de 0 a 9.998

0

de 10.001 a
19.999

de 1 a
2.000

02

Leer de 1 a 2.000 bits de entrada en la dirección remota de 0 a 9.998

0

● de 40.001
a 49.999

de 1 a
125

03

de 1 a
125

04

● de
400.001 a
465.535
0

de 30.001 a
39.999

● Leer de 1 a 125 registros de parada en la dirección remota de 0 a 9.998
● Leer de 1 a 125 registros de parada en la dirección remota de 0 a 65.534

Leer de 1 a 125 palabras de entrada en la dirección remota de 0 a 9.998

1

de 1 a 9.999

1

05

Escribir 1 bit de salida en la dirección remota de 0 a 9.998

1

● de 40.001
a 49.999

1

06

● Escribir 1 registro de retención en la dirección remota de 0 a 9.998
● Escribir 1 registro de retención en la dirección remota de 0 a 65.534

● de
400.001 a
465.535
1

de 1 a 9.999

de 2 a
1.968

15

Escribir de 2 a 1.968 bits de salida en la dirección remota de 0 a 9.998

1

● de 40.001
a 49.999

de 2 a
123

16

● Escribir de 2 a 123 registros de parada en la dirección remota de 0 a 9.998
● Escribir de 2 a 123 registros de parada en la dirección remota de 0 a 65.534

● de
400.001 a
465.535
2

de 1 a 9.999

de 1 a
1.968

15

Escribir de 1 a 1.968 bits de salida en la dirección remota de 0 a 9.998

2

● de 40.001
a 49.999

de 1 a
123

16

● Escribir de 1 a 123 registros de parada en la dirección remota de 0 a 9.998

● de
400.001 a
465.535
11

Los parámetros MB_DA‐ 11
TA_ADDR y MB_DA‐
TA_LEN no se evalúan
al ejecutar esta función.

Programación del PLC
Manual de programación y manejo, 11/2019

● Escribir de 1 a 123 registros de parada en la dirección remota de 0 a 65.534

Leer la palabra de estado y el contador de eventos del servidor:
● La palabra de estado forma el estado de ejecución (0: no en ejecución,
0xFFFF: en ejecución).
● El contador de eventos se incrementa si la orden Modbus se ha ejecutado
correctamente. Si se produce un error al ejecutar una función Modbus, el
servidor envía un mensaje, pero el contador de eventos no se incrementa.

4659

Instrucciones
4.1 Instrucciones
MB_
MO‐
DE

MB_DA‐
TA_ADDR

MB_DA Fun‐
TA_LE ción
N
Mod‐
bus

Función y tipo de datos

80

-

1

Comprobación del estado del servidor por el código de diagnóstico 0x0000 (test
de bucle de retorno: el servidor devuelve la orden):

08

● 1 WORD por llamada
81

-

1

08

Reiniciar el contador de eventos del servidor mediante el código de diagnóstico
0x000A:
● 1 WORD por llamada

101

de 0 a 65.535

de 1 a
2.000

01

Leer de 1 a 2.000 bits de salida en la dirección remota de 0 a 65.535

102

de 0 a 65.535

de 1 a
2.000

02

Leer de 1 a 2.000 bits de entrada en la dirección remota de 0 a 65.535

103

de 0 a 65.535

de 1 a
125

03

Leer de 1 a 125 registros de parada en la dirección remota de 0 a 65.535

104

de 0 a 65.535

de 1 a
125

04

Leer de 1 a 125 palabras de entrada en la dirección remota de 0 a 65.535

105

de 0 a 65.535

1

05

Escribir 1 bit de salida en la dirección remota de 0 a 65.535

106

de 0 a 65.535

1

06

Escribir 1 registro de retención en la dirección remota de 0 a 65.535

115

de 0 a 65.535

de 1 a
1.968

15

Escribir de 1 a 1.968 bits de salida en la dirección remota de 0 a 65.535

116

de 0 a 65.535

de 1 a
123

16

Escribir de 1 a 123 registros de parada en la dirección remota de 0 a 65.535

de 3 a
10,
de 12
a 79,
de 82
a 100,
de
107 a
114,
de
117 a
255

Reservado

Ejemplo
Variable

Significado

MB_MODE = 1
MB_DATA_ADDR = 1
MB_DATA_LEN = 1

A partir de la dirección remota 0 se escribe 1 bit de salida con el código de función 5.

MB_MODE = 1
MB_DATA_ADDR = 1
MB_DATA_LEN = 2

A partir de la dirección remota 0 se escriben 2 bits de salida con el código de función 15.

MB_MODE = 104
MB_DATA_ADDR = 17834
MB_DATA_LEN = 125

A partir de la dirección remota 17.834 se leen 125 palabras de entrada con el código de
función 4.

4660

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

MB_DATA_PTR
El parámetro MB_DATA_PTR es un puntero hacia un búfer de datos para los datos que se van
a recibir desde el servidor Modbus o que se van a enviar al servidor Modbus. Puede usarse
como búfer de datos un bloque de datos global o un área de memoria (M).
Para un búfer en el área de memoria (M), utilice un puntero con el formato ANY según el patrón
"P#dirección_de_bit" "Tipo de datos" "Longitud" (ejemplo: P#M1000.0 WORD 500).
Dependiendo del área de memoria en la que esté guardado el búfer de datos, MB_DATA_PTR
puede hacer referencia a distintas estructuras de datos:
● Si se utiliza un DB global con acceso optimizado, MB_DATA_PTR puede hacer referencia
a una variable con un tipo de datos simple o a un array de tipos de datos simples. Se
soportan los siguientes tipos de datos:
Tipo de datos

Longitud en bits

Bool

1

Byte, SInt, USInt, Char

8

Word, Int, WChar, UInt

16

DWord, DInt, UDInt, Real

32

Se pueden utilizar todos los tipos de datos soportados en todas las funciones Modbus.
MB_RED_CLIENT también puede, por ejemplo, escribir un bit recibido en una dirección
especificada de una variable del tipo Byte sin modificar otros bits de dicho byte. Por tanto,
no es obligatorio disponer de un array de bits para poder ejecutar las funciones orientadas
a bits.
● Si se utiliza un área de marcas o un DB global con acceso estándar como área de memoria,
para MB_DATA_PTR ya no existe ninguna restricción relacionada con los tipos de datos
simples; en ese caso, MB_DATA_PTR también puede hacer referencia a estructuras de
datos complejas, como tipos de datos PLC (UDT) y tipos de datos de sistema (SDT).
Nota
Utilización de un área de marcas como búfer de datos
Si para MB_DATA_PTR se utiliza un área de marcas como búfer de datos, es necesario tener
en cuenta su tamaño. En las CPU S7-1500(R/H) es de 16 KB, en las CPU S7-1200, de 8 KB.

Parámetros de salida STATUS_x, RED_ERR_S7, RED_ERR_DEV y TOT_COM_ERR
Parámetro STATUS_x (información de estado general)
En las salidas de estado de la instrucción "MB_RED_CLIENT" se muestran los mensajes de
error.
STATUS*
(W#16#)

Descripción

0000

Instrucción ejecutada sin errores.

0001

Conexión establecida.

0003

Desconexión realizada.

Programación del PLC
Manual de programación y manejo, 11/2019

4661

Instrucciones
4.1 Instrucciones
STATUS*
(W#16#)

Descripción

0A90

La instrucción "MB_RED_CLIENT" no tiene licencia. Encontrará más información aquí: Licencias (Pági‐
na 4656).

0AFF

La conexión no está parametrizada y no se utiliza. La conexión 0A debe estar parametrizada.

7000

Ninguna petición activa y ninguna conexión establecida (REQ=0, DISCONNECT=1).

7001

Establecimiento de conexión iniciado.

7002

Llamada intermedia. La conexión se está estableciendo.

7003

Deshaciendo la conexión.

7004

Conexión establecida y vigilada. No se está procesando ninguna petición.

7005

Enviando datos.

7006

Recibiendo datos.

* Los códigos de estado en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Parámetro STATUS_x (error de protocolo)
STATUS*
(W#16#)

Descripción

80C8

No ha habido respuesta del servidor en el periodo definido. Compruebe la conexión con el servidor Modbus.
Este error no se notifica hasta que no ha finalizado el número configurado de reintentos.
Si la instrucción "MB_RED_CLIENT" no obtiene respuesta alguna con la ID de transacción transmitida
originalmente (véase la variable estática MB_TRANSACTION_ID) dentro del periodo definido, se emitirá
este código de error.

8380

El telegrama Modbus recibido no tiene el formato correcto o el número de bytes recibidos no es suficiente.

8382

● La longitud del telegrama Modbus indicada en el encabezado del telegrama no coincide con el número
de bytes recibidos.
● El número de bytes no coincide con los bytes realmente transferidos (solo funciones 1-4).
● La dirección de inicio que figura en el telegrama recibido no coincide con la dirección de inicio guardada
(funciones 5, 6, 15, 16).
● El número de palabras no coincide con las palabras realmente transferidas (funciones 15 y 16).

8383

Error al leer o escribir los datos o acceso fuera del área de direcciones de MB_DATA_PTR (Página 4658).

8384

● El Exception Code recibido no es válido.
● Se ha recibido otro valor de datos distinto del enviado originalmente por el cliente (funciones 5, 6 y 8).
● El valor de estado recibido no es válido (función 11)

8385

● Código de diagnóstico no soportado.
● Se ha recibido otro código de subfunción distinto del enviado originalmente por el cliente (función 8).

8386

El código de función recibido no coincide con el enviado originalmente.

8387

El ID de protocolo del telegrama Modbus/TCP recibido por el servidor es distinto de "0".

8388

Se ha enviado a través del servidor Modbus una longitud de datos distinta de la procesada. Este error solo
se produce si se utilizan las funciones Modbus 5, 6, 15 o 16.

* Los códigos de estado en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

4662

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetro STATUS_x (error de parámetro)
STA‐
Descripción
TUS*
(W#16#)
80B6

Tipo de conexión no válido, solo se soportan conexiones TCP.

80BB

Valor no válido en el parámetro ActiveEstablished: El lado del cliente solo permite
el establecimiento activo de la conexión (ActiveEstablished = TRUE).

8188

Valor no válido en el parámetro MB_MODE.

8189

Direccionamiento no válido de los datos en el parámetro MB_DATA_ADDR.

818A

Longitud de datos no válida en el parámetro MB_DATA_LEN.

818B

Puntero no válido en el parámetro MB_DATA_PTR. Compruebe además los va‐
lores de los parámetros MB_DATA_ADDR (Página 4658) y MB_DATA_LEN.

818C

Error de tiempo en el parámetro BLOCKED_PROC_TIMEOUT o RCV_TIMEOUT
(ver variables estáticas de la instrucción). BLOCKED_PROC_TIMEOUT y
RCV_TIMEOUT deben estar entre 0,5 s y 55 s.

8200

● En este momento se está procesando otra petición Modbus a través del puerto.
● Otra instancia de MB_RED_CLIENT con los mismos parámetros de conexión
está procesando una petición Modbus ya existente.

* Los códigos de estado en el editor de programas se pueden representar como valores
enteros o hexadecimales. Encontrará más información sobre el cambio de los formatos de
visualización en "Consulte también".

Nota
Códigos de error de las instrucciones de comunicación utilizadas internamente
Además de los errores que aparecen en la tabla, con la instrucción "MB_RED_CLIENT"
pueden producirse además errores en las instrucciones de comunicación ("TCON",
"TDISCON", "TSEND", "TRCV", "T_DIAG" y "TRESET") utilizadas por la instrucción.
La asignación del código de error puede realizarse a través del bloque de datos de instancia
de la instrucción "MB_RED_CLIENT". En la sección "Static" se indican los códigos de error en
la instrucción correspondiente bajo STATUS.
El significado de los códigos de error se puede consultar en la documentación de la instrucción
de comunicación correspondiente.
Nota
Error de comunicación al enviar o recibir datos
Si al transmitir o recibir datos se produce un error de comunicación (80C4 (Temporary
communications error. The specified connection is temporarily down.), 80C5 (Remote partner
closed connection actively.), 80A1 (The specified connection is disconnected or is not yet
established.)), entonces se deshace la conexión existente.
Lo que significa que se ven todos los valores de STATUS que se devuelven al deshacerse la
conexión, y que solo cuando se ha deshecho la conexión se devuelve el código de STATUS
que ha causado la desconexión.
Ejemplo: Si al recibir los datos se produce un error de comunicación temporal, primero se
devuelve STATUS 7003 (ERROR=false) y después 80C4 (ERROR=true).

Programación del PLC
Manual de programación y manejo, 11/2019

4663

Instrucciones
4.1 Instrucciones

MB_RED_SERVER: Comunicación redundante como servidor MODBUS-TCP a través de PROFINET
Descripción MB_RED_SERVER
Descripción
Esta instrucción permite establecer un acoplamiento entre una CPU 1200/1500 y un
dispositivo que soporte el protocolo Modbus/TCP.
La instrucción "MB_RED_SERVER" permite la comunicación como servidor Modbus/TCP a
través de la conexión PROFINET. La instrucción "MB_RED_SERVER" permite procesar
solicitudes de conexión de un cliente Modbus/TCP, recibir y procesar órdenes Modbus y enviar
mensajes de respuesta.
La instrucción "MB_RED_SERVER" puede utilizarse en las CPU siguientes:
"MB_RED_SERVER" V1.0

"MB_RED_SERVER" V1.1

S7-1200

FW V4.2 y superior

FW V4.2 y superior

S7-1500

FW V2.5 y superior

FW V2.5 y superior

S7-1500R

--

FW V2.6 y superior

S7-1500H

--

FW V2.6 y superior

Para utilizar esta instrucción no se requiere ningún módulo de hardware adicional.
ATENCIÓN
Nota de seguridad
Tenga en cuenta que todos los clientes de la red tienen acceso de lectura y escritura a la
memoria imagen de proceso de las entradas y salidas y al bloque de datos o al área de
marcas definido por el registro de retención de Modbus. Para evitar que personas no
autorizadas lleven a cabo procesos de lectura y escritura, es posible restringir el acceso a una
dirección IP. No obstante, tenga en cuenta que la dirección habilitada también ofrece acceso
a personas no autorizadas.

Conexiones múltiples a servidor
Las CPU son capaces de:
● Procesar varias conexiones de servidor.
● Aceptar simultáneamente varias conexiones de distintos clientes en un puerto de servidor.
El número máximo de conexiones depende de la CPU utilizada y puede consultarse en los
datos técnicos de la CPU. El total de conexiones de una CPU, incluidos los clientes y los
servidores Modbus/TCP, no debe exceder el número máximo de conexiones admitido.

4664

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Para las conexiones de servidor deben respetarse las siguientes reglas:
● Cada conexión "MB_RED_SERVER" debe utilizar un DB de instancia unívoco.
● Para cada cliente que desee conectarse con el puerto de servidor se requiere una conexión
y un ID de conexión unívocos.
● El ID de conexión deben ser unívoco en toda la CPU.
Encontrará información sobre la configuración redundante aquí: Modo de funcionamiento y
comportamiento redundante (Página 4668).

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "MB_RED_SERVER":
Parámetro

Decla‐
ración

Tipo de datos Descripción

REG_KEY (Pá‐
gina 4680)

Input

STRING[17]

DISCONNECT

Input

Código de validación para la concesión de licencia
Se debe obtener una licencia individual de la instrucción "MB_RED_SERVER"
en cada CPU.

BOOL

La instrucción "MB_RED_SERVER" establece una conexión pasiva con un mó‐
dulo interlocutor. El servidor reacciona a una orden de conexión de las direc‐
ciones IP indicadas, de forma específica o no, en las descripciones de cone‐
xión.
Este parámetro permite controlar cuándo se aceptará una solicitud de conexión:
● 0: Si no hay ninguna conexión establecida, se establece una conexión
pasiva.
● 1: Inicialización del establecimiento de la conexión. Si la entrada está
activada, no se procesan otras órdenes del cliente y se procede a deshacer
la conexión. Tras deshacer la conexión correctamente, el parámetro
STATUS_x devuelve el valor 0003.

MB_HOLD_REG InOut
(Página 4682)

VARIANT

Puntero al registro de retención Modbus de la instrucción "MB_RED_SERVER"
MB_HOLD_REG debe remitir siempre a un área de memoria mayor de dos
bytes.
El registro de retención contiene los valores a los que está autorizado a acceder
un cliente Modbus mediante las funciones Modbus 3 (lectura), 6 (escritura), 16
(escritura múltiple) y 23 (escritura y lectura en una orden).

BOOL

LICENSED (Pá‐
gina 4680)

Output

IDENT_CODE
(Página 4680)

Output

STRING[18]

Identificación para la concesión de licencia. Solicite el código de validación
REG_KEY con este string.

DR_NDR_0A

Output

BOOL

"Data Read" o "New Data Ready" en la conexión 0A:

● 0: La instrucción no tiene licencia
● 1: La instrucción tiene licencia

● 0: No hay datos nuevos
● 1: El cliente Modbus ha leído o escrito datos nuevos
ERROR_0A

Output

BOOL

Programación del PLC
Manual de programación y manejo, 11/2019

Si se produce un error durante una llamada de la instrucción "MB_RED_SER‐
VER" en la conexión 0A, la salida del parámetro ERROR_0A se pone a "1". La
causa detallada del error se muestra en el parámetro STATUS_0A.

4665

Instrucciones
4.1 Instrucciones
Parámetro

Decla‐
ración

Tipo de datos Descripción

STATUS_0A
(Página 4683)

Output

WORD

Información de estado detallada de la instrucción en la conexión 0A.

DR_NDR_1A

Output

BOOL

"Data Read" o "New Data Ready" en la conexión 1A:
● 0: No hay datos nuevos
● 1: El cliente Modbus ha leído o escrito datos nuevos

ERROR_1A

Output

BOOL

Si se produce un error durante una llamada de la instrucción "MB_RED_SER‐
VER" en la conexión 1A, la salida del parámetro ERROR_1A se pone a "1". La
causa detallada del error se muestra en el parámetro STATUS_1A.

STATUS_1A
(Página 4683)

Output

WORD

Información de estado detallada de la instrucción en la conexión 1A.

DR_NDR_0B

Output

BOOL

"Data Read" o "New Data Ready" en la conexión 0B:
● 0: No hay datos nuevos
● 1: El cliente Modbus ha leído o escrito datos nuevos

ERROR_0B

Output

BOOL

Si se produce un error durante una llamada de la instrucción "MB_RED_SER‐
VER" en la conexión 0B, la salida del parámetro ERROR_0B se pone a "1". La
causa detallada del error se muestra en el parámetro STATUS_0B.

STATUS_0B
(Página 4683)

Output

WORD

Información de estado detallada de la instrucción en la conexión 0B.

DR_NDR_1B

Output

BOOL

"Data Read" o "New Data Ready" en la conexión 1B:
● 0: No hay datos nuevos
● 1: El cliente Modbus ha leído o escrito datos nuevos

ERROR_1B

Output

BOOL

Si se produce un error durante una llamada de la instrucción "MB_RED_SER‐
VER" en la conexión 1B, la salida del parámetro ERROR_1B se pone a "1". La
causa detallada del error se muestra en el parámetro STATUS_1B.

STATUS_1B
(Página 4683)

Output

WORD

Información de estado detallada de la instrucción en la conexión 1B.

RED_ERR_S7
(Página 4668)

Output

BOOL

● 0: Ningún error de redundancia en el lado SIMATIC
● 1: Error de redundancia en el lado SIMATIC

RED_ERR_DEV Output
(Página 4668)

BOOL

TOT_COM_ERR Output
(Página 4668)

BOOL

● 0: Ningún error de redundancia en el lado del interlocutor de acoplamiento
● 1: Error de redundancia en el lado del interlocutor de acoplamiento
● 0: Se ha establecido al menos una conexión configurada
● 1: Pérdida de comunicación completa, se han deshecho todas las
conexiones configuradas

Reproducir las direcciones Modbus en la memoria imagen de proceso
La instrucción "MB_RED_SERVER" permite a las funciones Modbus entrantes (1, 2, 4, 5 y 15)
acceder directamente en lectura y escritura a la memoria imagen de proceso de las entradas
y salidas de la CPU (usando los tipos de datos BOOL y WORD).
En las CPU S7-1200, el espacio de direcciones es 1 Kbyte tanto para la memoria imagen de
proceso de las entradas como para la memoria imagen de proceso de las salidas, y 32 Kbyte
para las CPU S7-1500.

4666

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra el área de direcciones de las funciones Modbus indicadas
anteriormente.
Función Modbus
Código de fun‐
ción

Función

Área de datos

Espacio de direcciones

01

Leer: bits

Output

0

a

65.535

02

Leer: bits

Input

0

a

65.535

04

Leer: WORD

Input

0

a

65.535

05

Escribir: Bit

Output

0

a

65.535

15

Escribir: bits

Output

0

a

65.535

Las solicitudes Modbus entrantes con los códigos de función 3, 6, 16 y 23 escriben o leen los
registros de retención de Modbus (el registro de retención debe especificarse en el parámetro
MB_HOLD_REG o mediante Data_Area_Array).

Funciones Modbus
La tabla siguiente contiene todas las funciones Modbus que soporta la instrucción
"MB_RED_SERVER".
Código de fun‐ Descripción
ción
01

Leer bits de salida

02

Leer bits de entrada

03

Leer registros de parada

04

Leer palabras de entrada

05

Escribir un bit de salida

06

Escribir un registro de retención

08

Función de diagnóstico:
● Prueba de eco (subfunción 0x0000): La instrucción "MB_RED_SERVER" recibe una palabra de datos
y la devuelve inalterada al cliente Modbus.
● Inicializar el contador de eventos (subfunción 0x000A): La instrucción ""MB_RED_SERVER"" inicializa
los siguientes contadores de eventos: "Success_Count", "Xmt_Rcv_Count", "Exception_Count",
"Server_Message_Count" y "Request_Count".

11

Función de diagnóstico: Tomar contador de eventos de la comunicación
Durante la comunicación, la instrucción "MB_RED_SERVER" utiliza un contador de eventos interno para
registrar el número de órdenes de lectura y escritura ejecutadas correctamente que se envían al servidor
Modbus.
El contador de eventos no se incrementa en las funciones 8 u 11. Lo mismo se aplica a las solicitudes que
tengan como consecuencia un error de comunicación, por ejemplo en el caso de un error de protocolo (p.
ej. el código de función en la orden Modbus recibida no es compatible).

15

Escribir bits de salida

16

Escribir registro de retención

23

Escribir registros de parada y leer registros de parada con un Request

Programación del PLC
Manual de programación y manejo, 11/2019

4667

Instrucciones
4.1 Instrucciones

Modo de funcionamiento y comportamiento redundante
Descripción
Los dispositivos de comunicación pueden estar configurados de modo independiente o
redundante. Si uno de los dos dispositivos está configurado de modo independiente, se habla
de redundancia unilateral. Si los dos interlocutores están configurados de modo redundante,
esto se denomina redundancia bilateral.
Números de puerto para cliente y servidor
El cliente Modbus utiliza un número de puerto a partir del 2000. Al servidor Modbus suele
accederse a través del número de puerto 502. Dependiendo de la CPU, es posible configurar
el puerto 502 para varias conexiones (multipuerto). Si se ha configurado el puerto local 502
para dos o más conexiones, en el caso de conexiones no especificadas, los clientes
solicitantes se distribuyen aleatoriamente entre las conexiones de servidor existentes. El 1.er
cliente que desee conectarse a la instrucción "MB_RED_SERVER" no recibirá
automáticamente la conexión 0A. Si ya se han asignado las órdenes de cliente a las
conexiones de servidor, la asignación se mantendrá durante el intercambio de telegramas
hasta que se deshaga la conexión.

Redundancia unilateral
Descripción
Se debe configurar una conexión para cada conexión entre interlocutores. Los puntos de
conexión de SIMATIC S7 se llaman 0 y 1, mientras que los puntos de conexión del interlocutor
se llaman A y B.
La CPU R/H 1 designa el punto de conexión 0 y la CPU R/H 2, el punto de conexión 1.
Configuración
Si el S7 está configurado de modo redundante, se crean dos conexiones: una del punto de
conexión 0 del S7 al punto nodal A del interlocutor y una del punto de conexión 1 del S7 al punto
nodal A del interlocutor.
● Conexión del punto de conexión 0 de S7 al nodo A del interlocutor => conexión 0A
● Conexión del punto de conexión 1 de S7 al nodo A del interlocutor => conexión 1A
La figura ilustra gráficamente los nombres de las conexiones.

4668

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Figura 4-15

Modbus/TCP: Redundancia unilateral S7

Si S7 está configurado de modo independiente y el interlocutor de modo redundante, se crean
dos conexiones: una del punto de conexión 0 de S7 al punto nodal A del interlocutor, y una del
punto de conexión 0 de S7 al punto nodal B del interlocutor.
● Conexión del punto de conexión 0 de S7 al nodo A del interlocutor => conexión 0A
● Conexión del punto de conexión 0 de S7 al nodo B del interlocutor => conexión 0B
La figura ilustra gráficamente los nombres de las conexiones.

Figura 4-16

Modbus/TCP: Interlocutor con redundancia unilateral

Programación del PLC
Manual de programación y manejo, 11/2019

4669

Instrucciones
4.1 Instrucciones

Redundancia bilateral
Descripción
Se debe configurar una conexión para cada conexión entre interlocutores. Los puntos de
conexión de SIMATIC S7 se llaman 0 y 1, mientras que los puntos de conexión del interlocutor
se llaman A y B.
La CPU R/H 1 designa el punto de conexión 0 y la CPU R/H 2, el punto de conexión 1.
Configuración
Si existe redundancia bilateral, se crean cuatro conexiones: dos desde el punto de conexión 0
y otras dos desde el punto de conexión 1 de S7, cada una de ellas a los puntos nodales A y B
del interlocutor, respectivamente.
● Conexión del punto de conexión 0 de S7 al nodo A del interlocutor => conexión 0A
● Conexión del punto de conexión 1 de S7 al nodo A del interlocutor => conexión 1A
● Conexión del punto de conexión 0 de S7 al nodo B del interlocutor => conexión 0B
● Conexión del punto de conexión 1 de S7 al nodo B del interlocutor => conexión 1B
La figura ilustra gráficamente los nombres de las conexiones.

Figura 4-17

Modbus/TCP: Redundancia bilateral

Procesamiento de telegramas
Los telegramas se pueden recibir a través de todas las conexiones configuradas. El cliente
puede enviar telegramas a través de una conexión o bien de todas las conexiones. Si se ha
recibido un telegrama en una conexión, se muestra el estado en la salida correspondiente
DR_NDR_x o ERROR_x. Cada una de las conexiones funciona de forma autónoma y no
influye en la visualización de las otras conexiones.

4670

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Salidas de redundancia RED_ERR_S7, RED_ERR_DEV y TOT_COM_ERR
Descripción
Los bits de redundancia RED_ERR_S7, RED_ERR_DEV y TOT_COM_ERR se activan en
función de los estados de las salidas de estado.
Visualización de los bits de alarma para la configuración de redundancia bilateral

Visualización de los bits de alarma para la configuración de redundancia unilateral

Programación del PLC
Manual de programación y manejo, 11/2019

4671

Instrucciones
4.1 Instrucciones

Parametrización
Descripción
La instrucción "MB_RED_SERVER" V1.0 y V1.1 puede emplearse con S7-1200 y con S7-1500.
S7-1200
Las conexiones se realizan a través de la interfaz local de la CPU o de un CM/CP. En este caso,
las conexiones se parametrizan y establecen mediante la estructura TCON_IP_V4.
S7-1500
Las conexiones se realizan a través de la interfaz local de la CPU o de un CM/CP. En este caso,
son posibles tanto conexiones parametrizadas mediante la estructura TCON_IP_V4 como
conexiones configuradas a través de la estructura TCON_Configured.
La instrucción "MB_RED_SERVER" V1.1 puede emplearse con S7-1200R y con S7-1500H.
S7-1500R y S7-1500H
Las conexiones se realizan a través de la interfaz local de la CPU o de un CM/CP. En este caso,
las conexiones se parametrizan y establecen mediante la estructura TCON_IP_V4.

Configuración de "MB_RED_SERVER"
En el cuadro de diálogo de configuración de la instrucción "MB_RED_SERVER" se realizan los
siguientes ajustes:
● Parámetros de conexión para las conexiones 0A, 1A, 0B y 1B (para la configuración
redundante, ver Modo de funcionamiento y comportamiento redundante (Página 4668))
● Parámetros internos (opcional)
El diálogo de configuración se puede abrir con la instrucción o con los objetos tecnológicos.
Parámetros de conexión

4672

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Figura 4-18

Modbus/TCP: conexión de servidor parametrizada

Figura 4-19

Modbus/TCP: conexión de servidor configurada

Variable

Valor de
arranque

Descripción

Conexiones parametrizadas
Interface ID

64

Identificador de HW de la interfaz PN utilizada

Connection ID

16#0000

ID de conexión de las conexiones utilizadas. Estas ID de conexión
deben ser unívocas en toda la CPU.

Local port

502

Número de puerto local del bloque de servidor. El puerto estándar
para el servidor Modbus/TCP es el 502.

Remote IP

0.0.0.0

Dirección IP remota del cliente. Por defecto no se escribe ninguna
dirección IP para el cliente.

Remote port

0

Número de puerto remoto del cliente. Por defecto no se escribe nin‐
gún número de puerto para el cliente.

Conexiones configuradas
Interface ID

64

Identificador de HW de la interfaz PN utilizada

Connection ID

16#0000

ID de conexión de las conexiones utilizadas. Estas conexiones se
configuran en la vista de redes.

Programación del PLC
Manual de programación y manejo, 11/2019

4673

Instrucciones
4.1 Instrucciones
Parámetros internos (opcional)

Variable

Tipo de
datos

Valor de
arran‐
que

Descripción

HR_Start_Offset

WORD

0

Asignar la dirección inicial del registro de retención de Mod‐
bus.

QB_Start

UINT

0

Dirección inicial del área de direccionamiento permitida pa‐
ra las salidas que pueden escribirse (bytes de 0 a 65535)

QB_Count

UINT

0

Número de bytes de salida que puede escribir el maestro
Modbus.

Ejemplo:
QB_Start=0 y QB_Count=10: Pueden escribirse los bytes
de salida de 0 a 9.
QB_Count=0: No puede escribirse ningún byte de salida.
QB_Read_Start

UINT

0

Dirección inicial del área de direccionamiento permitida pa‐
ra las salidas que pueden leerse (bytes de 0 a 65535).

QB_Read_Count

UINT

0

Número de bytes de salida que puede leer el maestro Mod‐
bus.

Ejemplo:
QB_Read_Start = 0 y QB_Read_Count = 10: Pueden leerse
los bytes de salida de 0 a 9.
QB_Read_Count = 0: No puede leerse ningún byte de sali‐
da.
IB_Read_Start

4674

UINT

0

Dirección inicial del área de direccionamiento permitida pa‐
ra las entradas que pueden leerse (bytes de 0 a 65535).

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Valor de
arran‐
que

Descripción

IB_Read_Count

UINT

0

Número de bytes de entrada que puede leer el maestro
Modbus.

Ejemplo:
IB_Read_Start = 0 e IB_Read_Count = 10: Pueden leerse
los bytes de entrada de 0 a 9.
IB_Read_Count = 0: No puede leerse ningún byte de entra‐
da.
Data_Area_Array

ARRAY [1..8]

data_type

UINT

0

Data Type: de 0 a 4

db

UINT

0

Número del bloque de datos

start

UINT

0

1.ª dirección Modbus en el bloque de datos

length

UINT

0

Número de valores Modbus en el bloque de datos

Direccionamiento a través de variable estática HR_Start_Offset
Las direcciones del registro de retención Modbus empiezan por 0.

Ejemplo: El registro de retención empieza en la MW100 y tiene una longitud de 100 WORD.

Figura 4-20

Modbus/TCP: HR_Start_Offset = 0

Es posible definir la variable HR_Start_Offset de modo que el registro de retención Modbus
reciba una dirección inicial distinta de 0.

Ejemplo: Con un valor de offset 20 en el parámetro HR_Start_Offset, la dirección inicial del
registro de retención se desplaza de 0 a 20. Todo direccionamiento del registro de retención
por debajo de la dirección 20 y por encima de la dirección 119 da lugar a un error.

Programación del PLC
Manual de programación y manejo, 11/2019

4675

Instrucciones
4.1 Instrucciones

Figura 4-21

Modbus/TCP: HR_Start_Offset = 20

Data_Area_Array [1..8]
Descripción

Se ofrecen 8 áreas de datos para mapear las direcciones MODBUS en la memoria S7. Si la
primera área de datos está definida, el parámetro de MB_HOLD_REG no se evalúa. En su
lugar, dependiendo del tipo de orden, los registros y bits de Modbus se escriben en bloques de
datos o se leen de ellos. Estos valores se pueden procesar en los siguientes pasos de
ejecución del programa.
Con una orden siempre se puede leer un solo DB / escribir en un solo DB. Los accesos a
registros o valores de bit que se encuentren en varios DB, aunque los números sean
consecutivos, deben repartirse entre dos órdenes. Esto se debe tener presente durante la
configuración. Es posible mapear más áreas Modbus (registros o valores de bit) en un bloque
de datos que las que pueden procesarse con un telegrama.

4676

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
data_type
Con el parámetro data_type se indica qué tipos de datos MODBUS se mapean en el bloque de
datos. Si se introduce el valor 0 en data_type, no se utilizará el área de datos correspondiente.
Si deben emplearse varios elementos Data_Area, deben definirse de forma consecutiva.
Todas las entradas posteriores a un data_type = 0 ya no se procesan.
Identifi‐
cador

Tipo de datos

Descripción

0

Área no utilizada

1

Bits de salida (Coils)

Bit

2

Bits de entrada (Input)

Bit

3

Registro de retención (Holding Register) Word

4

Palabras de entrada (Input Register)

Word

db
El parámetro db especifica el bloque de datos en que se mapean los registros MODBUS o
valores de bit definidos seguidamente. El número de DB 0 no está permitido, ya que se reserva
para el sistema.
start, length
Con start se indica la primera dirección Modbus que se mapea en la palabra de datos 0 del DB.
El parámetro length define la longitud de cuantas direcciones MODBUS se mapeen en el
bloque de datos. Las áreas de datos definidas no deben solaparse. El parámetro length no
debe ser 0.

Ejemplo: Mapeado de dirección con Data_Area_Array
Área de datos 1

Área de datos 2

Área de datos 3

Área de datos 4

Programación del PLC
Manual de programación y manejo, 11/2019

data_type

3: Registros de parada

db

11

start

0

length

500

data_type

3: Registros de parada

db

12

start

720

length

181

data_type

4: Palabras de entrada

db

13

start

720

length

281

data_type

1: Bits de salida

db

14

start

640

length

611

4677

Instrucciones
4.1 Instrucciones
Área de datos 5

Área de datos 6

Área de datos 7

Área de datos 8

4678

data_type

2: Bits de entrada

db

15

start

1700

length

601

data_type

1: Bits de salida

db

16

start

1700

length

601

data_type

Sin utilizar

db

0

start

0

length

0

data_type

Sin utilizar

db

0

start

0

length

0

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Programación del PLC
Manual de programación y manejo, 11/2019

4679

Instrucciones
4.1 Instrucciones

Licencias
La instrucción "MB_RED_SERVER" es de pago y se debe utilizar con una licencia individual en
cada CPU. La licencia se concede en 2 pasos:
● Lectura del IDENT_CODE e
● Introducción del código de validación REG_KEY (clave del Registro).
Nota
S7-1500R y S7-1500H
En una estación S7 R/H solo se concede licencia a la CPU1. Por este motivo, una vez
concedida la licencia ya no es posible cambiar la CPU1.

Procedimiento
Lectura de IDENT_CODE
Para la lectura del IDENT_CODE proceda de la manera siguiente:
1. Parametrice la instrucción "MB_RED_SERVER" de acuerdo con sus requisitos en un OB
cíclico. Cargue el programa en la CPU y póngala en RUN.
2. Abra el DB de instancia de la instrucción Modbus y haga clic en el botón "Observar todos".
3. En la salida IDENT_CODE se visualiza una cadena de caracteres de 18 dígitos.

4. Copie este string mediante Copiar/Pegar desde el bloque de datos al formulario que ha
recibido por correo electrónico después de pedir el producto o que está incluido en el CD.
5. Envíe el formulario mediante una Service Request (solicitud de servicio) al Customer
Support (https://support.industry.siemens.com/my/ww/en/requests/#createRequest).
Luego recibirá el código de validación para la CPU.

4680

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Introducción del código de validación REG_KEY
El código de validación REG_KEY debe indicarse en cada instrucción "MB_RED_SERVER".
La clave REG_KEY debe guardarse en un bloque de datos global a través del cual todas las
instrucciones "MB_RED_SERVER" recibirán el código de validación necesario.
Para la introducción del código de validación REG_KEY proceda del modo siguiente:
● Mediante "Agregar nuevo bloque…" inserte un bloque de datos global nuevo con un
nombre simbólico unívoco, p. ej., "DB_Licencia".
● Defina un parámetro REG_KEY con el tipo de datos STRING[17] en este bloque.

Figura 4-22

REG_KEY en DB

● Copie el código de validación de 17 dígitos determinado mediante Copiar/Pegar en la
columna "Valor de arranque".
● Introduzca el nombre del DB de licencia y el nombre del string, p. ej.,
DB_Licencia.REG_KEY, en el OB cíclico, en el parámetro REG_KEY de la instrucción
"MB_RED_SERVER".
● Cargue los bloques modificados en la CPU. La introducción del código de validación se
puede realizar durante el tiempo de ejecución, no es necesario pasar de STOP -> RUN.
La comunicación Modbus/TCP a través de la instrucción "MB_RED_SERVER" ahora tiene
licencia para esta CPU; el bit de salida LICENSED es TRUE.
Falta la concesión de licencia o esta es errónea
Si el código de validación falta o es incorrecto, el ERROR-LED de la CPU parpadea.
Adicionalmente, en S7-1200 y S7-1500 se escribe cíclicamente una entrada en el búfer de
diagnóstico referente a la falta de licencia. En estaciones R y H solo se muestra el error de
longitud de área.

Programación del PLC
Manual de programación y manejo, 11/2019

4681

Instrucciones
4.1 Instrucciones
Si el código de validación falta o es incorrecto, se procesa la comunicación Modbus/TCP; sin
embargo, en la salida STATUS_x se muestra siempre W#16#0A90 "No existe ninguna licencia
válida". El bit de salida LICENSED es FALSE.
ADVERTENCIA
Si en el S7-1500 (R/H) falta el OB121 en el controlador, la CPU pasa al estado STOP.

Parámetro de entrada MB_HOLD_REG
Descripción
El parámetro MB_HOLD_REG es un puntero a un búfer de datos para almacenar los datos a
los que puede acceder un cliente Modbus en modo de lectura o escritura. Como área de
memoria puede utilizarse un bloque de datos global (D) o una marca (M).
● El límite superior para el número de direcciones en el bloque de datos (D) está determinado
por el tamaño máximo de un DB de la CPU.
● El límite superior para el número de marcas (M) viene determinado por el área de marcas
máxima de la CPU.
En las imágenes siguientes se muestran algunos ejemplos del mapeo de direcciones Modbus
en el registro de parada para las funciones Modbus 3 (leer varias WORD), 6 (escribir una
WORD), 16 (escribir varias WORD) y 23 (escribir y leer varias WORD).
MB_HOLD_REG: Bloque de datos con offset 0

4682

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
MB_HOLD_REG: Bloque de datos con offset 60

Data_Area_Array [1..8]
Para utilizar los parámetros opcionales Data_Area_Array [1..8], consulte Parametrización
(Página 4672).

Parámetros de salida ERROR_x, STATUS_x, RED_ERR_S7, RED_ERR_DEV y TOT_COM_ERR
Parámetro STATUS_x (información de estado general)
En las salidas de estado de la instrucción "MB_RED_SERVER" se muestran los mensajes de
error.
STATUS*
(W#16#)

Descripción

0000

Instrucción ejecutada sin errores.

0001

Conexión establecida.

0003

Desconexión realizada.

0A90

La instrucción "MB_RED_SERVER" no tiene licencia. Encontrará más información aquí: Licencias (Pági‐
na 4680).

0AFF

La conexión no está parametrizada y no se utiliza. La conexión 0A debe estar parametrizada.

7000

Ninguna llamada activa y ninguna conexión establecida (REQ=0, DISCONNECT=1).

7001

Primera llamada. Establecimiento de conexión iniciado.

7002

Llamada intermedia. La conexión se está estableciendo.

7003

Deshaciendo la conexión.

7005

Enviando datos.

7006

Recibiendo datos.

* Los códigos de estado en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

4683

Instrucciones
4.1 Instrucciones

Parámetro STATUS_x (error de protocolo)
STATUS*
(W#16#)

Código de error en el
mensaje de error de
"MB_RED_SERVER"
(B#16#)

Descripción

8380

-

El telegrama Modbus recibido no tiene el formato correcto o el número de bytes
recibidos no es suficiente.

8381

01

Código de función no soportado.

8382

03

Error en la longitud de datos:
● Indicación de longitud no admisible en el telegrama Modbus recibido
● La longitud del telegrama indicada en el encabezado del telegrama Modbus no
coincide con el número de bytes realmente recibidos.
● El número de bytes indicado en el encabezado del telegrama Modbus no
coincide con el número de bytes realmente recibidos (funciones 15 y 16).

8383

02

Error en la dirección de los datos o acceso fuera del área de direcciones del registro
de retención (parámetro MB_HOLD_REG (Página 4682)).

8384

03

Error en el valor de datos (función 05)

8385

03

Código de diagnóstico no soportado (solo con función 08).

* Los códigos de estado en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Parámetro STATUS_x (error de parámetro)
STATUS*
(W#16#)

Descripción

80BB

Valor no válido en el parámetro ActiveEstablished
El lado del servidor solo permite el establecimiento pasivo de la conexión (active_established = FALSE).

8187

Puntero no válido en el parámetro MB_HOLD_REG. El área de datos es demasiado pequeña.

8389

Definición inválida de área de datos:
● Valor inadmisible de data_type
● El número de DB es inadmisible o no existe:
–

Valor inadmisible de db

–

El número de DB no existe

–

El número de DB está siendo utilizado por otra área de datos.

–

DB con acceso optimizado

–

El DB no se encuentra en la memoria de trabajo

● Valor inadmisible de length
● Solapamiento de áreas de direcciones MODBUS que pertenecen al mismo tipo de datos MODBUS
* Los códigos de estado en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

4684

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Nota
Códigos de error de las instrucciones de comunicación utilizadas internamente
Además de los errores que aparecen en la tabla, con la instrucción "MB_RED_SERVER"
pueden producirse además errores en las instrucciones de comunicación ("TCON",
"TDISCON", "TSEND", "TRCV", "T_DIAG" y "T_RESET") utilizadas por la instrucción.
La asignación del código de error puede realizarse a través del bloque de datos de instancia
de la instrucción "MB_RED_SERVER". En la sección "Static" de cada instancia se indican los
códigos de error en la instrucción correspondiente bajo STATUS.
El significado de los códigos de error se puede consultar en la documentación de la instrucción
de comunicación correspondiente.
Nota
Error de comunicación al enviar o recibir datos
Si al transmitir o recibir datos se produce un error de comunicación (80C4 (error de
comunicación temporal. La conexión indicada está establecida provisionalmente.), 80C5 (El
interlocutor remoto ha finalizado la conexión activamente.), 80A1 (La conexión indicada se ha
interrumpido o aún no se ha establecido.)), la conexión existente se deshace.
Lo que significa que se ven todos los valores de STATUS que se devuelven al deshacerse la
conexión, y que solo cuando se ha deshecho la conexión se devuelve el código de STATUS
que ha causado la desconexión.
Ejemplo: Si al recibir los datos se produce un error de comunicación temporal, primero se
devuelve STATUS 7003 (ERROR=false) y después 80C4 (ERROR=true).

4.1.6.6

TeleService

TM_MAIL: Transmitir e-mail
Descripción de TM_MAIL
Descripción
La instrucción "TM_MAIL" es una instrucción asíncrona, de modo que la ejecución se prolonga
a lo largo de varias llamadas. Al llamar la instrucción "TM_MAIL" es imprescindible indicar una
instancia. En el DB de instancia no se debe activar el atributo "Remanente". Con este atributo
se garantiza que la instancia se inicialice cuando la CPU pase de STOP a RUN y que después
se pueda lanzar una nueva petición para enviar un e-mail.
El envío de un e-mail se inicia con un cambio de flanco de "0" a "1" en el parámetro REQ. A
través de los parámetros de salida "BUSY", "DONE", "ERROR", así como "STATUS" y
"SFC_STATUS" se indica el estado de la petición. "SFC_STATUS" corresponde al parámetro
de salida "STATUS" de los bloques de comunicación llamados.

Programación del PLC
Manual de programación y manejo, 11/2019

4685

Instrucciones
4.1 Instrucciones
Los parámetros de salida DONE, ERROR, STATUS y SFC_STATUS sólo se indican durante
un ciclo si el estado del parámetro de salida BUSY cambia de "1" a "0". En la tabla siguiente
se muestra la correspondencia entre BUSY, DONE y ERROR. Permite determinar en qué
estado se encuentra la instrucción "TM_MAIL" actualmente o cuándo se completó la
transmisión del e-mail.
DONE

BUSY

ERROR

Descripción

0

1

0

La petición está en proceso.

1

0

0

La petición ha finalizado correctamente.

0

0

1

La petición se ha finalizado con un error. La causa del error se puede consultar en los
parámetros STATUS y SFC_STATUS.

0

0

0

No se ha asignado ninguna (nueva) petición a la instrucción "TM_MAIL".

Si la CPU pasa al estado operativo STOP mientras "TM_MAIL" está activa, la conexión con el
servidor de correo se deshace. La conexión con el servidor de correo también se pierde si
aparecen problemas de comunicación en el bus Industrial Ethernet. En esos casos, el envío
del e-mail se cancela y este no llega a su destinatario.
ATENCIÓN
Cambiar programas de usuario
Las partes del programa de usuario con efecto directo sobre llamadas de "TM_MAIL" solo
pueden modificarse en los siguientes casos:
● Si la CPU está en estado operativo "STOP"
● Si no se envía ningún mensaje (REQ = 0 y BUSY = 0).
Esto se refiere en especial al borrado e intercambio de bloques de programa que contienen
llamadas de "TM_MAIL" o llamadas de la instancia de "TM_MAIL"
En caso de incumplimiento, es posible que los recursos de conexión permanezcan ocupados.
El sistema de automatización puede pasar a un estado no definido con las funciones de
comunicación TCP/IP a través de Industrial Ethernet.
Una vez transmitidas las modificaciones es necesario ejecutar un rearranque completo (en
caliente) o un arranque en frío de la CPU.

Coherencia de datos
Cada vez que se lanza el envío de un e-mail, la instrucción "TM_MAIL" aplica de nuevo el
parámetro de entrada ADDR_MAIL_SERVER de la instrucción. Si se produce un cambio
durante el funcionamiento, el valor "nuevo" no tendrá efecto hasta que no se vuelva a lanzar
un e-mail.
Por el contrario, los parámetros WATCH_DOG_TIME, TO_S, CC, FROM, SUBJECT, TEXT,
ATTACHMENT, y, dado el caso, USERNAME y PASSWORD son aplicados por éste durante
el funcionamiento de la instrucción "TM_MAIL", por lo que no pueden modificarse hasta que la
petición no haya finalizado (BUSY = 0)

4686

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parametrización del TS Adapter IE
En el TS Adapter IE hay que introducir los parámetros de las llamadas salientes de forma que
el TS Adapter IE establezca una conexión con el servidor de marcado del proveedor de
servicios de Internet.
Si para establecer la conexión se ajusta "Bajo demanda", la conexión se establecerá cuando
deba enviarse un mensaje de correo electrónico.
Con una conexión analógica vía módem, el establecimiento de la llamada puede requerir cierto
tiempo (aprox. un minuto). El tiempo necesario para el establecimiento de la conexión debe
tenerse en cuenta al especificar el parámetro WATCH_DOG_TIME.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "TM_MAIL":
Parámetro

Declaración

Tipo de da‐
tos

Área de memoria

Descripción

REQ

Input

BOOL

I, Q, M, D, L o cons‐ Parámetro de control REQUEST: activa el envío de
tante
un e-mail con un flanco ascendente.

ID

Input

CONN_OU
C (Word)

D, L o constante

Referencia a la conexión que debe establecerse.
Véase la ID de parámetro de las instrucciones TCON
(Página 4045), TDISCON (Página 4056), TSEND
(Página 4061) y TRCV (Página 4065). Aquí se debe
introducir un número que no se vaya a utilizar en nin‐
guna otra instancia de estas instrucciones en el pro‐
grama de usuario.

TO_S (Pági‐
na 4690)

Input

STRING

D

Parámetro de entrada Direcciones de destinatario:

CC (Pági‐
na 4690)

Input

STRING con una longitud máxima de 240 caracteres
(véase el ejemplo de llamada).
STRING

D

Parámetro de entrada Direcciones de destinatario CC
(opcional): STRING con una longitud máxima de 240
caracteres (véase el ejemplo de llamada).
Si se asigna un string vacío, el e-mail no se enviará a
un destinatario CC.

SUBJECT

Input

STRING

D

Parámetro de entrada Asunto del e-mail:
STRING con una longitud máxima de 240 caracteres.

TEXT

Input

STRING

D

Parámetro de entrada Texto del e-mail (opcional):
Referencia a un string de datos con una longitud má‐
xima de 240 caracteres.
Si a este parámetro se le asigna un string vacío, el email se envía sin texto.

ATTACHMENT

Input

VARIANT

I, Q, M, D, L

Parámetro de entrada Archivos adjuntos del e-mail
(opcional): referencia a un campo de byte/palabra/
palabra doble con una longitud máxima de 65534
bytes. El archivo adjunto indicado debe tener el for‐
mato BIN.
Si no se asigna ningún valor, el e-mail se envía sin
archivos adjuntos.

Programación del PLC
Manual de programación y manejo, 11/2019

4687

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de da‐
tos

Área de memoria

Descripción

DONE

Output

BOOL

I, Q, M, D, L

● DONE = 0: la petición aún no se ha iniciado o
todavía se está ejecutando.
● DONE = 1: petición finalizada sin errores.

BUSY

Output

BOOL

I, Q, M, D, L

● BUSY = 1: el envío del e-mail todavía no ha
finalizado.
● BUSY = 0: la ejecución de "TM_MAIL" ha
finalizado.

ERROR

Output

BOOL

I, Q, M, D, L

ERROR = 1: durante la ejecución se ha producido un
error. STATUS y SFC_STATUS devuelven informa‐
ción detallada sobre el tipo de error.

STATUS (Pági‐
na 4690)

Output

WORD

I, Q, M, D, L

Parámetro de salida/estado STATUS:

ADDR_MAIL_S
ERVER

Static*

Valor de retorno o información de error de la instruc‐
ción "TM_MAIL".
DWORD

I, Q, M, D, L

Parámetro de entrada Dirección IP del servidor de
correo: Debe indicarse en forma de palabra de datos
en formato HEX, p. ej.: Dirección IP = 192.168.0.200.
ADDR_MAIL_SERVER = DW#16#C0A800C8, te‐
niendo en cuenta lo siguiente:
● 192 = 16#C0,
● 168 =16#A8
● 0 = 16#00 y
● 200 = 16#C8.

WATCH_DOG_
TIME

Static*

USERNAME

Static*

TIME

I, Q, M, D, L

Parámetro de entrada Intervalo máx.:
En el tiempo predeterminado (WATCH_DOG_TIME),
la instrucción "TM_MAIL" debería establecer una co‐
nexión. Si se supera este tiempo, el bloque se finaliza
con un error. El tiempo hasta que el bloque finaliza y
el error se notifica puede superar el
WATCH_DOG_TIME, ya que el establecimiento de la
conexión también requiere tiempo. Para comenzar
debe ajustarse un tiempo de 2 minutos. En la cone‐
xión telefónica vía ISDN, puede seleccionarse un
tiempo notablemente inferior.

STRING

D

Parámetro de entrada Nombre de usuario:
STRING con una longitud máxima de 180 caracteres.
Para los procesos de autenticación es imprescindible
un nombre de usuario.

PASSWORD

Static*

STRING

D

Parámetro de entrada Contraseña:
STRING con una longitud máxima de 180 caracteres.
Para los procesos de autenticación es imprescindible
una contraseña.

FROM (Pági‐
na 4690)

4688

Static*

STRING

D

Parámetro de entrada Dirección de remitente:
STRING con una longitud máxima de 240 caracteres
(véase el ejemplo de llamada).

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de da‐
tos

Área de memoria

Descripción

SFC_STATUS
(Página 4690)

Static*

WORD

I, Q, M, D, L

Parámetro de salida/estado "SFC_STATUS":
Información de error de los bloques de comunicación
llamados.

* Los valores de los parámetros no se modifican cada vez que se llama la instrucción "TM_MAIL". Los valores se encuentran
en los parámetros estáticos de la instancia y sólo se escriben una vez antes de la primera llamada de la instrucción.

Encontrará más información sobre los tipos de datos válidos en "Vista general de los tipos de
datos válidos (Página 241)".
Nota
Parámetros opcionales
Los parámetros opcionales CC, TEXT y ATTACHMENT solo se envían con el e-mail si los
parámetros correspondientes contienen un string de longitud > 0.
Nota
Parámetro ATTACHMENT
El archivo adjunto indicado debe tener el formato BIN. Para transmitir texto se dispone de las
siguientes posibilidades:
● Vincular el formato de archivo BIN a un editor de textos en Windows.
● Utilizar las funciones de Windows "Enviar a" o "Abrir con".

Autenticación SMTP
Bajo el término "autenticación" se entiende un proceso con el que se garantiza una identidad,
como puede ser una consulta de contraseña.
La instrucción "TM_MAIL" soporta el método de autenticación SMTP AUTH-LOGIN, requerido
por la mayoría de servidores de correo. Para más información sobre el método de
autenticación de su servidor de correo, consulte el manual del servidor o la página web del
proveedor de servicios de Internet.
Para utilizar el método de autenticación AUTH-LOGIN, la instrucción "TM_MAIL" requiere el
nombre de usuario con el que poder iniciar sesión en el servidor de correo. Este nombre de
usuario equivale al nombre de usuario con el que se ha configurado la cuenta de correo en el
servidor de correo. Se da a conocer a través del parámetro USERNAME de la instrucción
"TM_MAIL".
Asimismo, para iniciar sesión la instrucción "TM_MAIL" requiere la contraseña
correspondiente. Esta contraseña equivale a la contraseña indicada al configurar la cuenta de
correo. Se da a conocer a través del parámetro PASSWORD de la instrucción "TM_MAIL".
El nombre de usuario y la contraseña se transfieren sin cifrar (codificación BASE64) al servidor
de correo.
Si en el DB no se indica ningún nombre de usuario, no se utiliza el método de autenticación
AUTH-LOGIN. El correo electrónico se envía entonces sin autenticación.

Programación del PLC
Manual de programación y manejo, 11/2019

4689

Instrucciones
4.1 Instrucciones

Ejemplo
Encontrará un ejemplo de aplicación detallado en el Siemens Industry Online Support, en la
FAQ con la ID: 67262019 (https://support.industry.siemens.com/cs/ww/es/view/67262019).

Parámetros TO_S, CC y FROM
Descripción
Los parámetros TO_S, CC y FROM son strings con, por ejemplo, el siguiente contenido:
● TO: <wenna@mydomain.com>, <ruby@mydomain.com>,
● CC: <admin@mydomain.com>, <judy@mydomain.com>,
● FROM: <admin@mydomain.com>
Las siguientes reglas deben observarse a la hora de introducir los parámetros:
● Deben introducirse los caracteres "TO:", "CC:" y "FROM:".
● Antes de cada dirección debe introducirse un espacio y un corchete en "<".
● Después de cada dirección debe introducirse un corchete en ">".
● Después de cada dirección que se indique en TO y CC debe introducirse una coma.
● En FROM sólo puede introducirse una dirección de correo electrónico, que no puede tener
una coma al final
Por motivos relacionados con el tiempo de ejecución y el espacio en memoria, la instrucción
"TM_MAIL" no realiza ninguna prueba de sintaxis de los parámetros TO_S, CC y FROM.

Parámetros STATUS y SFB_STATUS
Descripción
Los valores de retorno de la instrucción "TM_MAIL" pueden clasificarse del siguiente modo:
● W#16#0000: "TM_MAIL" ha finalizado correctamente
● W#16#7xxx: estado de "TM_MAIL"
● W#16#8xxx: se ha notificado un error en la llamada interna de un bloque de comunicación
o bien el servidor de correo electrónico ha notificado un error.

4690

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra los valores de retorno de "TM_MAIL" a excepción del código de
error de los bloques de comunicación llamados.
Valor de retorno

Valor de retorno

Explicación

Indicaciones

STATUS*

SFB_STATUS

(W#16#...):

(W#16#...):

0000

-

La ejecución de "TM_MAIL" ha finalizado sin
errores.

La finalización sin errores de
"TM_MAIL" no significa que el mensaje
de correo electrónico enviado sea reci‐
bido (véase más abajo - Punto 1 de la
nota)

"TM_MAIL" está activa (BUSY = 1).

Primera llamada; petición lanzada

7002

7002

"TM_MAIL" está activa (BUSY = 1).

Llamada intermedia; petición ya activa

8xxx

xxxx

La ejecución de "TM_MAIL" ha finalizado con
un código de error de las instrucciones de
comunicación llamadas internamente.

Encontrará información detallada so‐
bre la evaluación del parámetro
SFB_STATUS en las descripciones del
parámetro STATUS de las instruccio‐
nes de comunicación.

8010

xxxx

Error al establecer la conexión.

Encontrará más información sobre la
evaluación del parámetro SFB_STA‐
TUS en las descripciones del paráme‐
tro STATUS de la instrucción "TCON
(Página 4045)".

8011

xxxx

Error al enviar los datos.

Encontrará más información sobre la
evaluación de SFB_STATUS en las
descripciones del parámetro STATUS
de la instrucción "TSEND (Pági‐
na 4061)".

8012

xxxx

Error al recibir los datos.

Encontrará más información sobre la
evaluación de SFB_STATUS en las
descripciones del parámetro STATUS
de la instrucción "TRCV (Pági‐
na 4065)".

8013

xxxx

Error al establecer la conexión.

Encontrará más información sobre la
evaluación de SFB_STATUS en las
descripciones del parámetro STATUS
de la instrucción "TCON (Pági‐
na 4045)" y "TDISCON (Página 4056)".

8014

-

No es posible establecer una conexión.

Posiblemente ha introducido una direc‐
ción IP del servidor de correo incorrec‐
ta (ADDR_MAIL_SERVER) o un inter‐
valo demasiado reducido
(WATCH_DOG_TIME) para establecer
la conexión. También existe la posibili‐
dad de que la CPU no tenga conexión
con la red o que la configuración de la
CPU sea incorrecta.

8016

-

Error al copiar el anexo

-

7001

Programación del PLC
Manual de programación y manejo, 11/2019

4691

Instrucciones
4.1 Instrucciones
Valor de retorno

Valor de retorno

STATUS*

SFB_STATUS

(W#16#...):

(W#16#...):

82xx, 84xx, o
85xx

-

Explicación

Indicaciones

El mensaje de error procede del servidor de
correo y, exceptuando el "8", corresponde al
número de error del protocolo SMTP.

Véase el punto 2 de la nota.

En las siguientes columnas se indican algu‐
nos códigos de error posibles:
8450

-

Acción no ejecutada: Buzón de correo no dis‐ Vuelva a intentarlo más tarde.
ponible/no accesible.

8451

-

Acción cancelada: Error local en el procesa‐
miento

Vuelva a intentarlo más tarde.

8500

-

Error de sintaxis: Error no detectado. Ello in‐
cluye también el error debido a una cadena
de comandos demasiado larga. Otra posible
causa es que el servidor de correo electróni‐
co no soporte el método de autenticación LO‐
GIN.

Compruebe los parámetros de
"TM_MAIL". Intente enviar un mensaje
de correo electrónico sin autenticación.
Sustituya para ello el parámetro USER‐
NAME por un string vacío.

8501

-

Error de sintaxis: Parámetro o argumento in‐ Posiblemente ha introducido una direc‐
correcto
ción incorrecta en TO_S o CC.

8502

-

Comando desconocido o no implementado.

Compruebe las entradas realizadas,
especialmente el parámetro FROM. Es
posible que esté incompleto y que haya
olvidado "@" o ".".

8535

-

Autenticación SMTP incompleta.

Puede que haya introducido un nombre
de usuario o una contraseña incorrec‐
tas.

8550

-

No es posible acceder al servidor de correo,
no tiene derechos de acceso.

Posiblemente ha introducido un nom‐
bre de usuario o una contraseña inco‐
rrectos o el servidor de correo no so‐
porta el LOGIN. Otra posible causa del
error puede ser la entrada incorrecta
del nombre del dominio después de
"@" en TO_S o CC.

8552

-

Acción cancelada: Rebase del espacio de
memoria asignado

Vuelva a intentarlo más tarde.

8554

-

Transmisión fallida.

Vuelva a intentarlo más tarde.

* Los códigos de error en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

4692

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Nota
Error de estado
1. La entrada incorrecta de las direcciones de los destinatarios no genera un error de estado
de la instrucción "TM_MAIL". En tal caso no es posible garantizar el envío del mensaje de
correo electrónico a otros destinatarios, aunque se hayan introducido correctamente.
2. Encontrará más información sobre el código de error SMTP y otros códigos de error en el
protocolo SMTP en Internet, o bien en la documentación sobre errores del servidor de
correo. También es posible ver el último mensaje de error enviado por el servidor de correo
en forma de texto en el DB de instancia en el parámetro BUFFER1. En él encontrará en
"Datos" los últimos datos enviados por la instrucción "TM_MAIL".

Consulte también
Cambiar formatos de visualización en el estado del programa (Página 8529)

4.1.7

Paquetes opcionales

4.1.7.1

SIMATIC Ident

SIMATIC Ident
Manual Ident
Encontrará información detallada sobre el perfil Ident y los bloques Ident en el manual "Perfil
Ident y bloques Ident, Función estándar para sistemas Ident" en las páginas del "Siemens
Industry Online Support (https://support.industry.siemens.com/cs/ww/es/ps/14971/man)".

Programar bloques Ident
Parametrizar el tipo de datos "IID_HW_CONNECT"
Los bloques Ident y el perfil Ident pueden parametrizarse con o sin ayuda del objeto
tecnológico "TO_Ident". Si los bloques se parametrizan sin el objeto tecnológico, se necesita
el tipo de datos "IID_HW_CONNECT".
Antes de poder empezar a parametrizar los bloques hay que crear una variable del tipo de
datos PLC "IID_HW_CONNECT". Con el tipo de datos PLC "IID_HW_CONNECT" se
direcciona el sistema de identificación o bien un canal del sistema de identificación.

Programación del PLC
Manual de programación y manejo, 11/2019

4693

Instrucciones
4.1 Instrucciones

Direccionamiento de los dispositivos de identificación
Al trabajar con las instrucciones y los bloques se necesita el tipo de datos
"IID_HW_CONNECT" para direccionar los lectores. La parametrización de comandos en el
perfil Ident corre a cargo de los bloques de identificación. El perfil Ident y el bloque
"AdvancedCMD" requieren además el tipo de datos "IID_CMD_STRUCT" para parametrizar
los diferentes comandos. En función de si se trabaja con el perfil Ident o con los bloques de
identificación, estos tipos de datos deben integrarse y parametrizarse del modo descrito en los
capítulos siguientes.

Parametrización del tipo de datos "IID_HW_CONNECT"
Proceda del siguiente modo para parametrizar el tipo de datos "IID_HW_CONNECT" para un
canal:
1. Haga doble clic en la entrada "Agregar nuevo bloque" de la carpeta "Bloques de programa"
en el árbol del proyecto.
2. Haga clic en el botón "Bloque de datos" y asigne un nombre al bloque.
3. Confirme la entrada con "Aceptar".
Reacción: el bloque de datos se abre.
4. Cree una variable nueva introduciendo un nombre de variable en la columna "Nombre".
5. En la columna "Tipo de datos", seleccione el tipo de datos "IID_HW_CONNECT".

Figura 4-23

Crear un bloque de datos

6. Indique los datos de dirección del dispositivo de identificación o del canal.
– HW_ID: identificador de hardware del módulo (solo en S7-1200 y S7-1500)
– CM_CHANNEL: canal dentro de un módulo
– LADDR: dirección de entrada/salida del módulo
Los valores de los parámetros "HW_ID" y "LADDR" pueden leerse en las propiedades del
módulo de comunicación/lector, en la configuración de dispositivos. Introduzca los valores
de parámetros leídos en la columna "Valor inicial" de los parámetros correspondientes. La
lectura de los valores de parámetros se describe a continuación.

Proceda del siguiente modo para leer los valores de parámetros "HW_ID" y "LADDR" para un
canal:
1. Abra la vista de redes y haga doble clic en el módulo de comunicación.
Reacción: TIA cambia a la vista de dispositivos y se abre la ventana de propiedades del CM.
2. Marque el módulo correspondiente en la ficha "Vista general de dispositivos".
La dirección E/S que se muestra en la ficha equivale a "LADDR".
Tenga en cuenta que la dirección de entrada y la dirección de salida deben tener el mismo
valor.

4694

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
3. En la ficha "Propiedades > Constantes de sistema" encontrará el identificador de hardware
que equivale a "HW_ID".

Figura 4-24

El parámetro "ID de hardware"

4. Transfiera los valores de "LADDR" y "HW_ID" al tipo de datos PLC "IID_HW_CONNECT"
del lector que debe parametrizarse.
Nota
Ajustar el modo de usuario
Recuerde asignar el valor "Perfil normalizado RFID" al parámetro "Modo de usuario" en las
propiedades del módulo de comunicación y seleccionar el modo MOBY adecuado.
En todos los demás módulos de comunicación/lectores encontrará los dos parámetros
directamente en las propiedades del módulo.
El tipo de datos "IID_HW_CONNECT" está creado ahora para un canal. Repita este
procedimiento para cada lector/canal adicional. Si desea utilizar otro canal del lector/CM,
ajústelo mediante el parámetro "CM_CHANNEL". Los parámetros "HW_ID" y "LADDR" son
iguales en todos los canales/lectores/antenas. En un módulo de comunicación RF18xC, cada
lector está asignado a un módulo propio y tiene unos "HW_ID" y "LADDR" propios. Recuerde
que el valor del canal siempre debe ser "1".

Programación del PLC
Manual de programación y manejo, 11/2019

4695

Instrucciones
4.1 Instrucciones
Ahora, la librería está integrada y los bloques y tipos de datos necesarios están creados en el
proyecto. El tipo de datos "IID_HW_CONNECT" también está creado y direccionado. Ya puede
empezar a programar los bloques.
Nota
Configurar "IID_CMD_STRUCT"
Si se trabaja con el perfil Ident o con el bloque "AdvancedCmd", en el bloque de datos ya
creado debe crearse adicionalmente un elemento con el tipo de datos "IID_CMD_STRUCT"
(array [1...n]).

Bloques básicos
Read
Descripción
El bloque "Read" lee los datos de usuario del transpondedor y los pone a disposición en el
búfer "IDENT_DATA". La dirección física y la longitud de los datos se transfieren por medio de
los parámetros "ADDR_TAG" y "LEN_DATA". En los lectores RF61xR/RF68xR, el bloque lee
los datos del Memory Bank 3 (área USER). El acceso unívoco a un transpondedor
determinado se realiza mediante los parámetros opcionales "EPCID_UID" y "LEN_ID".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Read":
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

ADDR_TAG

Input

DWORD

DW#16#0

Dirección física en el transpon‐
dedor a partir de la que se em‐
pezará a leer. Encontrará más
información sobre el direcciona‐
miento en el capítulo "Direccio‐
namiento del transpondedor del
manual Perfil Ident y bloques
Ident, función estándar para sis‐
temas Ident (https://
support.industry.siemens.com/c
s/ww/en/ps/14971/man)".
Para MV: A partir de la dirección
"0" está la longitud del código
leído (2 bytes). A partir de la di‐
rección "2" está el código leído. 1)

LEN_DATA

4696

Input

WORD

W#16#0

Longitud de los datos que de‐
ben leerse

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

LEN_ID

Input

BYTE

B#16#0

Longitud de la EPC-ID/UID
Valor predeterminado: 0x00 ≙
acceso no especificado a Sin‐
gletag (RF200, RF300,
RF61xR, RF68xR)

EPCID_UID

Input

ARRAY[1...62]
OF BYTE

0x00

Búfer para EPC-ID de 62 bytes,
UID de 8 bytes o Handle-ID de 4
bytes como máximo.
● La EPC-ID de 2-62 bytes se
introduce al principio del
búfer (la longitud se
describe mediante
"LEN_ID")
● La UID de 8 bytes se
introduce al principio del
búfer ("LEN_ID = 8")
● La Handle-ID de 4 bytes
debe introducirse en el
elemento de Array [5]-[8]
("LEN_ID = 8")
Valor predeterminado: 0x00 ≙
acceso no especificado a Sin‐
gletag (RF620R, RF630R)

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

PRESENCE

Output

BOOL

FALSE

Este bit señala la presencia de
un transpondedor. El valor vi‐
sualizado se actualiza cada vez
que se llama el bloque. Este pa‐
rámetro no existe en bloques
específicos de sistemas de lec‐
tura ópticos.

Programación del PLC
Manual de programación y manejo, 11/2019

4697

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

HW_CON‐
NECT

In/Out

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

IDENT_DATA

In/Out

ANY / VARIANT 0x00

Búfer de datos, en el que se de‐
positan los datos leídos.
Nota:
Con Variant solo puede crearse
por el momento un
"Array_of_Byte" de longitud va‐
riable. Con Any pueden crearse
además otros tipos de datos o
UDTs.

1)

Encontrará más información sobre cómo trabajar con sistemas de lectura ópticos en las instrucciones
de servicio "SIMATIC MV420 / SIMATIC MV440" y "SIMATIC MV500".

Read_MV
Descripción
El bloque "Read_MV" lee el resultado de lectura de un lector óptico. Para leer la
parametrización hay que utilizar el bloque "Leer". El bloque determina automáticamente la
longitud de los datos que deben leerse a partir de la longitud del búfer de recepción creado. La
longitud real del resultado de lectura se muestra en el parámetro de salida "LEN_DATA". Los
datos se depositan en el búfer de datos "IDENT_DATA". Si el búfer es demasiado pequeño
aparece el mensaje de error "0xE7FE0400" y la longitud prevista se muestra en "LEN_DATA".
Para conseguir una velocidad óptima es recomendable adaptar la longitud del tipo de datos
"IDENT_DATA" de modo que sea lo más parecida posible a la longitud máxima prevista del
resultado de lectura (2 bytes para longitud de código + código leído).

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Read_MV":

4698

Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

LEN_DATA

Output

WORD

W#16#0

Longitud del resultado de lectu‐
ra ≙ 2 bytes para longitud de có‐
digo + código leído

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

HW_CON‐
NECT

In/Out

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

IDENT_DATA

In/Out

ANY / VARIANT 0x00

Resultado de lectura
En los bytes 0 y 1 está la longi‐
tud del código leído.
Nota:
Con Variant puede crearse un
"Array_of_Byte" de longitud va‐
riable. Con Any pueden crearse
además otros tipos de datos o
UDTs.

Reset_Reader
Descripción
El bloque "Reset_Reader" permite resetear todos los tipos de lectores de los sistemas RFID de
Siemens, además de los lectores ópticos. Cuando se utiliza el objeto tecnológico "SIMATIC
Ident" es posible emplear el bloque para todos los dispositivos de identificación conectados a
un S7-1200/1500. Si no se utiliza el objeto tecnológico, es posible emplear el bloque para los
dispositivos SIMATIC RF120C y SIMATIC RF61xR/RF68xR. El bloque "Reset_Reader" no
tiene parámetros específicos del dispositivo y se ejecuta por medio del parámetro "EXECUTE".
Encontrará descripciones de otros bloques reset para el funcionamiento con los módulos de
comunicación RF18xC, RF180C y ASM 456 o sistemas de lectura ópticos en el capítulo
"AUTOHOTSPOT".
El bloque "Reset_Reader" y los demás bloques reset permiten interrumpir en cualquier
momento cualquier bloque Ident que se esté ejecutando. Seguidamente, dichos bloques se
finalizan con "DONE = true" y "ERROR = false".

Programación del PLC
Manual de programación y manejo, 11/2019

4699

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Reset_Reader":
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

HW_CON‐
NECT

In/Out

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

Set_MV_Program
Descripción
El bloque "Set_MV_Program" permite cambiar el programa de una cámara. El número de
programa deseado se transfiere por medio del parámetro "PROGRAM".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Set_MV_Program":
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

PROGRAMM

Input

BYTE

B#16#1

Número de programa
Rango de valores: 0x01 ... 0x0F

4700

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

HW_CON‐
NECT

In/Out

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

Write
Descripción
El bloque "Write" escribe los datos de usuario del búfer "IDENT_DATA" en el transpondedor.
La dirección física y la longitud de los datos se transfieren por medio de los parámetros
"ADDR_TAG" y "LEN_DATA". En los lectores RF61xR/RF68xR, el bloque escribe los datos en
el Memory Bank 3 (área USER). El acceso unívoco a un transpondedor determinado se realiza
mediante los parámetros opcionales "EPCID_UID" y "LEN_ID".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Write":
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

ADDR_TAG

Input

DWORD

DW#16#0

Dirección física en el transpon‐
dedor a partir de la que se em‐
pezará a escribir. Encontrará
más información sobre el direc‐
cionamiento en el capítulo "Di‐
reccionamiento del transponde‐
dor del manual Perfil Ident y blo‐
ques Ident, función estándar pa‐
ra sistemas Ident (https://
support.industry.siemens.com/c
s/ww/en/ps/14971/man)".
Para MV: la dirección es siem‐
pre 0. 1)

LEN_DATA

Programación del PLC
Manual de programación y manejo, 11/2019

Input

WORD

W#16#0

Longitud de los datos que de‐
ben escribirse

4701

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

LEN_ID

Input

BYTE

B#16#0

Longitud de la EPC-ID/UID
Valor predeterminado: 0x00 ≙
acceso no especificado a Sin‐
gletag (RF200, RF300,
RF61xR, RF68xR)

EPCID_UID

Input

ARRAY[1...62]
OF BYTE

0x00

Búfer para EPC-ID de 62 bytes,
UID de 8 bytes o Handle-ID de 4
bytes como máximo.
● La EPC-ID de 2-62 bytes se
introduce al principio del
búfer (la longitud se
describe mediante
"LEN_ID")
● La UID de 8 bytes se
introduce al principio del
búfer ("LEN_ID = 8")
● La Handle-ID de 4 bytes
debe introducirse en el
elemento de Array [5]-[8]
("LEN_ID = 8")
Valor predeterminado: 0x00 ≙
acceso no especificado a Sin‐
gletag (RF620R, RF630R)

4702

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

PRESENCE

Output

BOOL

FALSE

Este bit señala la presencia de
un transpondedor. El valor vi‐
sualizado se actualiza cada vez
que se llama el bloque. Este pa‐
rámetro no existe en bloques
específicos de sistemas de lec‐
tura ópticos.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

HW_CON‐
NECT

In/Out

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

IDENT_DATA

In/Out

ANY / VARIANT 0x00

Búfer con los datos que se es‐
cribirán.
Para MV: el primer byte codifica
el comando MV correspondien‐
te.1)
Nota:
Con Variant solo puede crearse
por el momento un
"Array_of_Byte" de longitud va‐
riable. Con Any pueden crearse
además otros tipos de datos o
UDTs.

1)

Encontrará más información sobre cómo trabajar con sistemas de lectura ópticos en las instrucciones
de servicio "SIMATIC MV420 / SIMATIC MV440" y "SIMATIC MV500".

Bloques de estado
Reader_Status
Descripción
El bloque "Reader_Status" lee la información de estado del lector o módulo de comunicación
(RF18xC, módulo "Configuración del CM_1"). Para las diferentes familias de lectores hay
distintos modos de estado que se seleccionan mediante el parámetro "ATTRIBUTE".

Programación del PLC
Manual de programación y manejo, 11/2019

4703

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Reader_Status":
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

ATTRIBUTE

Input

BYTE

B#16#81

Identificador de los modos de
estado / entradas posibles:
● RF200: 0x81
● RF300: 0x81, 0x86
● RF620R, RF630R: 0x87,
0x88, 0xA0, 0xA1
● RF61xR, RF68xR: 0x89
● RF185C, RF186C,
RF188C: 0xA2
● MOBY U: 0x81, 0x84, 0x85
● MOBY D: 0x81

4704

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

PRESENCE

Output

BOOL

FALSE

Este bit señala la presencia de
un transpondedor. El valor vi‐
sualizado se actualiza cada vez
que se llama el bloque. Este pa‐
rámetro no existe en bloques
específicos de sistemas de lec‐
tura ópticos.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

HW_CON‐
NECT

In/Out

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

IDENT_DATA

In/Out

ANY / VARIANT 0x00

Valores de resultado en función
de los atributos
Nota:
Se puede crear un
"Array_of_Byte" o una variable
con uno de los siguientes tipos
de datos.
Con Any se pueden crear tam‐
bién otros tipos de datos/UDTs

Resultados
El tipo de datos adecuado en cada caso, que está asignado al valor ATTRIBUTE, debe crearse
en la entrada "IDENT_DATA" del bloque para que los datos puedan interpretarse
correctamente.
Tenga en cuenta que los UDT no pueden utilizarse hasta que se utilizan los bloques
"Reader_Status" o "Tag_Status".
Tabla 4-187 ATTRIBUTE "0x81" (tipo de datos "IID_READSTAT_81_RF2_3_U")
Nombre

Tipo

Comentario

status_info

BYTE

SLG status mode

hardware

CHAR

Type of hardware

hardware_version

WORD

Version of hardware

loader_version

WORD

Version of loader

firmware

CHAR

Type of firmware

firmware_version_HB

BYTE

Version of firmware

firmware_version_LB

BYTE

driver

CHAR

Type of driver

driver_version

WORD

Version of driver

interface

BYTE

Type of interface (RS 232/RS 422)

baud

BYTE

Baudrate

reserved1

BYTE

Reserved

reserved2

BYTE

Reserved

reserved3

BYTE

Reserved

distance_limiting_SLG

BYTE

Distance limiting of SLG

multitag_SLG

BYTE

Multitag SLG

field_ON_control_SLG

BYTE

Field ON control

field_ON_time_SLG

BYTE

Field On time

Programación del PLC
Manual de programación y manejo, 11/2019

4705

Instrucciones
4.1 Instrucciones
Nombre

Tipo

Comentario

sync_SLG

BYTE

Synchronization with SLG

status_ant

BYTE

Status of antenne

stand_by

BYTE

Time of standby after command

MDS_control

BYTE

Presence mode

Tabla 4-188 ATTRIBUTE "0x86" (tipo de datos "IID_READSTAT_86_RF300")
Nombre

Tipo

Comentario

status_info

BYTE

SLG status mode

FZP

BYTE

Error counter passive: distortion without
communication

ABZ

BYTE

Dropout counter

CFZ

BYTE

Code error counter

SFZ

BYTE

Signature error counter

CRCFZ

BYTE

CRC-error counter

BSTAT

BYTE

Status of last command

ASMFZ

BYTE

Error counter for host interface (ASM)

reserved0

ARRAY
[1..17]

Tabla 4-189 ATTRIBUTE "0xA2" (tipo de datos "IID_CM_STATUS_A2") compatible con RF18xC
Nombre

Tipo

Comentario

Status_info

BYTE

CM device status

hardware_version

BYTE

Version of hardware

firmware_version

ARRAY[1..4]
of CHAR

Version of firmware

config ID

DWORD

Config_ID as unix timestamp

serial_number

ARRAY[1..16]
of CHAR

Serial number

device_type

BYTE

Type of device

upload_request

BYTE

Upload request for fonfiguration data

active_connections

BYTE

Active connections

io_mode

BYTE

Mode of in-/outputs

low_voltage

BYTE

Low voltage warning

reserved0

BYTE

Reserved

reserved1

BYTE

Reserved

number_serial_interfaces

BYTE

Number of serial interfaces by CM

serial_interface_data

ARRAY[1..4]
of
IID_IN_SERIA
L_INTERFACE

serial_interface_data[1]

4706

IID_IN_SERIA
L_INTERFACE

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Nombre

Tipo

Comentario

connection_status

BYTE

Status of communication between reader and CM

reader_type

CHAR

Type of connected reader

hardware_error

BYTE

Hardware error

reserved

BYTE

Reserved

serial_interface_data[2]

IID_IN_SERIA
L_INTERFACE

serial_interface_data[3]

IID_IN_SERIA
L_INTERFACE

serial_interface_data[4]

IID_IN_SERIA
L_INTERFACE

Tabla 4-190 ATTRIBUTE "0x89" (tipo de datos "IID_READSTAT_89_RF68xR") compatible con RF61xR/RF68xR
Nombre

Tipo

Comentario

status_info

BYTE

SLG status mode(Subcommand)

hardware_version

BYTE

Version of hardware

firmware_version

ARRAY[1..4]
of CHAR

Version of firmware

config ID

DWORD

Unix timestamp

inventory_status

WORD

0=inventory not active; 1=inventory active;
2=presence mode active

sum_of_filtered_tags

WORD

All filtered Tags

filtered_smoothing

WORD

Filtered Tags trough Smoothing

filtered_blacklist

WORD

Filtered Tags trough Blacklist

filtered_data-filter

WORD

Filtered Tags trough Data-Filter

filtered_RSSI_threshold

WORD

Filtered Tags trough RSSI Threshold

filtered_RSSI_delta

WORD

Filtered Tags trough RSSI Delta

Tabla 4-191 ATTRIBUTE "0x87" (tipo de datos "IID_READSTAT_87_RF600")
Nombre

Tipo

Comentario

status_info

BYTE

SLG status mode

hardware

CHAR

Type of hardware

hardware_version

WORD

Version of hardware

reserved0

WORD

firmware

CHAR

Type of firmware

firmware_version_HB

BYTE

Version of firmware highbyte

firmware_version_LB

BYTE

Version of firmware lowbyte

driver

CHAR

Type of driver

current_time_hour

BYTE

Hours

current_time_min

BYTE

Minutes

current_time_sec

BYTE

Seconds

reserved1

BYTE

Programación del PLC
Manual de programación y manejo, 11/2019

1)

4707

Instrucciones
4.1 Instrucciones
Nombre

Tipo

Comentario

SLG_version

BYTE

SLG version

baud

BYTE

Baudrate

reserved2

BYTE

distance_limiting_SLG

BYTE

Selected transmit power

multitag_SLG

BYTE

Multitag SLG

field_ON_control_SLG

BYTE

Selected comunication typ

field_ON_time_SLG

BYTE

Selected channel

expert_mode

BYTE

Expert mode

status_ant

BYTE

Status of antenna

scanning_time_SLG

BYTE

Radio communication profile (country specific
radio standart)

MDS_control

BYTE

Presence mode

2)

1)

Se emite el sello de tiempo interno del lector que hace referencia a este evento. El sello de tiempo interno del lector no se
sincroniza con UTC.

2)

El estado de antena se refiere al "ATTRIBUTE" (bit 0 y 1) del último "SET-ANT" ejecutado o al valor ajustado por defecto
con "INIT"/"WRITE-CONFIG". Con "INIT"/"WRITE-CONFIG" del RF620R el valor ajustado por defecto es "1" (antena int.
activada), en el RF630R "3" (antenas 1 y 2 activadas).

Tabla 4-192 ATTRIBUTE "0x88" (tipo de datos "IID_READSTAT_88_RF600")
Nombre

Tipo

Comentario

status_info

BYTE

SLG status mode(Subcommand)

hardware

CHAR

Type of hardware

hardware_version

WORD

Version of hardware

reserved_word1

WORD

Reserved

firmware

CHAR

Type of firmware

firmware_version_HB

BYTE

Version of firmware (High-Byte)

firmware_version_LB

BYTE

Version of firmware (Low-Byte)

driver

CHAR

Type of driver

current_time_hour

BYTE

Hours

current_time_minute

BYTE

Minutes

1)

Seconds

1)

1)

current_time_sec

BYTE

current_time_reservByte

BYTE

SLG_version

BYTE

SLG-Version

baud

BYTE

Baudrate

reserved_byte1

BYTE

Reserved

distance_limiting_SLG

BYTE

Selected transmit power

multitag_SLG

BYTE

Multitag SLG

field_ON_control_SLG

BYTE

Selected communication type

field_ON_time_SLG

BYTE

Selected channel

expert_mode

BYTE

Expert mode

status_ant

BYTE

Status of antenna

4708

2)

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Nombre

Tipo

Comentario

scanning_time_SLG

BYTE

Radio communication profile (country specific
radio standart)

MDS_control

BYTE

Presence mode

blink_pattern

BYTE

Blink Pattern

act_algor_Single_Tag

Bool

Single_Tag

[1]

act_algor_ITF_Phase2

Bool

ITF_Phase2

[2]

act_algor_ITF_Phase1

Bool

ITF_Phase1

[3]

act_algor_Smoothing

Bool

Smoothing

[4]

act_algor_Blacklist

Bool

Blacklist

[5]

act_algor_RSSI_Threshold

Bool

RSSI_Threshold

act_algor_Power_Ramp

Bool

Power_Ramp

act_algor_Power_Gap

Bool

Power_Gap

[8]

Reserved1

Bool

Reserved1

[1]

Reserved2

Bool

Reserved2

[2]

Reserved3

Bool

Reserved3

[3]

Reserved4

Bool

Reserved4

[4]

[6]

[7]

act_algor_EPC_MemBankFilte Bool
r

EPC_MemBankFilteres [5]

act_algor_Tag_Holg

Bool

Tag_Hold

[6]

act_algor_Multi_Tag

Bool

Multi_Tag

[7]

act_algor_ISTM

Bool

ISTM

[8]

reserved_word2

WORD

Reserved

reserved_word3

WORD

Reserved

reserved_word4

WORD

Reserved

filtered_max_rssi

BYTE

Maximum RSSI value of a tag, of all filtered tags

reserved_byte2

BYTE

Reserved

filtered_tags_rssi

BYTE

Number of tags, filtered out by the RSSI threshold

reserved_byte3

BYTE

Reserved

filtered_tags_black_list

WORD

Number of tags, filtered out via Black-List

filtered_tags_epc_data

WORD

Number of tags, filtered out via EPC Data Filter

filtered_tags_smoothing

WORD

Number of tags in Tag List of status Not-Observed

itf_ph1_max_detect

WORD

Number of reads of a Tag, filtered out via ITFphase 1

itf_ph1_tags_detect

WORD

Number of tags, filtered out via ITF-phase 1

itf_ph2_max_detect

WORD

Number of reads of a Tag, filtered out via ITFphase 2

itf_ph2_tags_detect

WORD

Number of tags, filtered out via ITF-phase 2

filtered_istm_min_dist

WORD

Minimum distance of tags according to sorting
criterion of ISTM

filtered_istm_tags

WORD

Number of tags, filtered out via ISTM algorithm

last_error

BYTE

error code of the last occuring error
(last_command)

reserved_byte4

BYTE

Reserved

error_command1

WORD

Last command (has lead to error code) "last_error"

Programación del PLC
Manual de programación y manejo, 11/2019

4709

Instrucciones
4.1 Instrucciones
Nombre

Tipo

Comentario

error_command2

WORD

Last command (has lead to error code) "last_error"

error_command3

WORD

Last command (has lead to error code) "last_error"

reserved_word5

WORD

Reserved

reserved_array_byte

ARRAY[1..30]
of Byte

Tabla 4-193 ATTRIBUTE "0xA0" y "0xA1" (tipo de datos "IID_READSTAT_A0_A1_RF600")
Nombre

Tipo

reserved

BYTE

Status_info

BYTE

Status-Info, SLG-Status SubCommand 20/21

number_tags_frame

BYTE

Number of Tags in this frame

number_tags_next_frames

BYTE

Number of Tags in the next frames

reserved_byte1

BYTE

Reserved

reserved_byte2

BYTE

Reserved

reserved_byte3

BYTE

Reserved

reserved_byte4

BYTE

Reserved

reserved_byte5

BYTE

Reserved

reserved_byte6

BYTE

Reserved

Black_List_ID

ARRAY[1..13]
of
"IID_IN_Blac
klist"

EPC-ID Length

Black_List_ID[1]

"IID_IN_Blac
klist"

EPC_Length

BYTE

EPC-ID Length

Antenna

BYTE

Antenna = Default 3

Filtered_Tag

WORD

Number of times - EPC-ID filtered out via
BlackList

EPC

ARRAY[1..12]
of Byte

EPC-ID

Black_List_ID[2]

"IID_IN_Blac
klist"

Black_List_ID[3]

"IID_IN_Blac
klist"

Black_List_ID[4]

"IID_IN_Blac
klist"

Black_List_ID[5]

"IID_IN_Blac
klist"

Black_List_ID[6]

"IID_IN_Blac
klist"

Black_List_ID[7]

"IID_IN_Blac
klist"

Black_List_ID[8]

"IID_IN_Blac
klist"

4710

Comentario

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Nombre

Tipo

Black_List_ID[9]

"IID_IN_Blac
klist"

Black_List_ID[10]

"IID_IN_Blac
klist"

Black_List_ID[11]

"IID_IN_Blac
klist"

Black_List_ID[12]

"IID_IN_Blac
klist"

Black_List_ID[13]

"IID_IN_Blac
klist"

Comentario

Tabla 4-194 ATTRIBUTE "0x84" (tipo de datos "IID_READSTAT_84_MOBY_U")
Nombre

Tipo

Comentario

status_info

BYTE

SLG status mode

number_MDS

BYTE

Range 1..24

UID

ARRAY
[1..24] of
DWord

Encontrará información detallada sobre los diferentes modos de estado en los manuales
correspondientes a los modos "FB 45", "FB55" y "SIMATIC RF620R/RF630R".
Los identificadores indicados aquí para los modos de estado equivalen a los identificadores
siguientes en los demás manuales:
0x81
0x82
0x83
0x85
0x87
0x88
0x90
0x91
0x92
0xA0
0xA1

≙
≙
≙
≙
≙
≙
≙
≙
≙
≙
≙

0x01
0x02
0x03
0x05
0x07
0x08
0x10
0x11
0x12
0x20
0x21

Tag_Status
Descripción
El bloque "Tag_Status" lee la información de estado del transpondedor. Para los diferentes
tipos de transpondedores y familias de lectores hay distintos modos de estado que se
seleccionan mediante el parámetro "ATTRIBUTE".

Programación del PLC
Manual de programación y manejo, 11/2019

4711

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Tag_Status":
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

ATTRIBUTE

Input

BYTE

B#16#0

Identificador de los modos de
estado / entradas posibles:
● RF200: 0x83
● RF300: 0x04, 0x82, 0x83 1)
● RF620R, RF630R: 0x84,
0x85
● MOBY D: 0x83 2)
● MOBY U: 0x80

LEN_ID

Input

BYTE

B#16#0

Longitud de la EPC-ID/UID
Valor predeterminado: 0x00 ≙
acceso no especificado a Sin‐
gletag (RF61xR, RF68xR)

EPCID_UID

Input

ARRAY[1...62]
OF BYTE

0x00

Búfer para EPC-ID de 62 bytes,
UID de 8 bytes o Handle-ID de 4
bytes como máximo.
● La EPC-ID de 2-62 bytes se
introduce al principio del
búfer (la longitud se
describe mediante
"LEN_ID")
● La UID de 8 bytes se
introduce al principio del
búfer ("LEN_ID = 8")
● La Handle-ID de 4 bytes
debe introducirse en el
elemento de Array [5]-[8]
("LEN_ID = 8")
Valor predeterminado: 0x00 ≙
acceso no especificado a Sin‐
gletag (RF620R, RF630R)

4712

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

PRESENCE

Output

BOOL

FALSE

Este bit señala la presencia de
un transpondedor. El valor vi‐
sualizado se actualiza cada vez
que se llama el bloque. Este pa‐
rámetro no existe en bloques
específicos de sistemas de lec‐
tura ópticos.

HW_CON‐
NECT

In/Out

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

IDENT_DATA

In/Out

ANY / VARIANT 0x00

Valores de resultado en función
de los atributos
Nota:
Se puede crear un
"Array_of_Byte" o una variable
con uno de los siguientes tipos
de datos.
Con Any se pueden crear tam‐
bién otros tipos de datos/UDTs

1)

Con RF300 de primera generación con el atributo "0x83" se pueden consultar los valores únicamente
con transpondedores ISO. Con RF300 de segunda generación con este atributo se pueden consultar
los valores con todos los tipos de atributo. En "Modo general" solo funciona este atributo.

2)

solo SLG D10S

Resultados
Tenga en cuenta que los UDT no se visualizarán hasta que se utilicen los bloques
"Reader_Status" o "Tag_Status".
Tabla 4-195 ATTRIBUTE "0x04" (tipo de datos "IID_TAG_STATUS_04_RF300")
Nombre

Tipo

reserved

BYTE

status_info

BYTE

UID

ARRAY
[1..8] of
BYTE

MDS_type

BYTE

Type of MDS

Lock_state

BYTE

Write Protection Status EEPROM

Reserved1

ARRAY[1..6]
of BYTE

Programación del PLC
Manual de programación y manejo, 11/2019

Comentario
MDS status mode

4713

Instrucciones
4.1 Instrucciones
Tabla 4-196 ATTRIBUTE "0x82" (tipo de datos "IID_TAG_STATUS_82_RF300")
Nombre

Tipo

Comentario

reserved

BYTE

status_info

BYTE

UID

ARRAY
[1..8] of
BYTE

LFD

BYTE

Magnetic flux density: correlation between limitvalue

FZP

BYTE

Error counter passive: distortion without
communication

FZA

BYTE

Error counter active: distortion during
communication

ANWZ

BYTE

Presence counter: measure value for presence time

reserved1

ARRAY
[1..3] of
BYTE

MDS status mode

Tabla 4-197 ATTRIBUTE "0x83" (tipo de datos "IID_TAG_STATUS_83_ISO")
Nombre

Tipo

Comentario

reserved

BYTE

status_info

BYTE

UID

ARRAY
[1..8] of
BYTE

MDS_Type

BYTE

Type of MDS

IC_version

BYTE

Chip version

size_HB

BYTE

Size of Memory (high Byte)

size_LB

BYTE

Size of memory (low Byte)

lock_state

BYTE

Write protection status EEPROM

block_size

BYTE

Size of a block in addressable memory

number_of_block

BYTE

Number of blocks in addressable memory

MDS status mode

Tabla 4-198 ATTRIBUTE "0x84" (tipo de datos "IID_TAG_STATUS_84_RF600")
Nombre

Tipo

reserved

BYTE

status_info

BYTE

UID

ARRAY
[1..8] of
BYTE

antenna

BYTE

Antenna which has observed the MDS

RSSI

BYTE

RSSI value

last_observed_hour

BYTE

Last observed time hour

4714

Comentario
MDS status mode

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Nombre

Tipo

Comentario

last_observed_min

BYTE

Last observed time minute

last_observed_sec

BYTE

Last observed time seconds

last_observed_channel

BYTE

Last observed time channel

EPC_length

BYTE

EPC-Length

reserved1

BYTE

1)

Se emite el sello de tiempo interno del reloj interno del lector que hace referencia a este evento. El reloj interno del lector
no se sincroniza con UTC.

Tabla 4-199 ATTRIBUTE "0x85" (tipo de datos "IID_TAG_STATUS_85_RF600")
Nombre

Tipo

Comentario

status_info

BYTE

MDS status mode

antenna

BYTE

Antenna which has observed the MDS

channel

BYTE

Channel

UID

ARRAY
[1..8] of
BYTE

DT_glimpsed_1

BYTE

Time elasped between acknowledgement and first
read in [ms]1 Highbyte

DT_glimpsed_2

BYTE

Time elasped between acknowledgement and first
read in [ms]2

DT_glimpsed_3

BYTE

Time elasped between acknowledgement and first
read in [ms]3

DT_glimpsed_4

BYTE

Time elasped between acknowledgement and first
read in [ms]4 Low-Byte

reserved1

BYTE

reserved2

BYTE

reserved3

BYTE

reserved4

BYTE

last_observed_hour

BYTE

Last observed time hour

last_observed_min

BYTE

Last observed time minutes

1)

last_observed_sec

BYTE

Last observed time seconds

1)

last_observed_EPC_length

BYTE

Last observed time EPC length

EPC_ID_Byte

ARRAY
[1..62] of
BYTE

EPC-ID

reads_HB

BYTE

Number of Reads of MDS in Inventory (1 - 65535)

reads_LB

BYTE

Number of Reads of MDS in Inventory (1 - 65535)

RSSI

BYTE

Current RSSI value of MDS

mean_RSSI

BYTE

Mean RSSI value of MDS

max_RSSI

BYTE

Max RSSI value of MDS

min_RSSI

BYTE

Min RSSI value of MDS

min_POWER

BYTE

Min Power value of MDS

Programación del PLC
Manual de programación y manejo, 11/2019

2)

4715

Instrucciones
4.1 Instrucciones
Nombre

Tipo

Comentario

current_POWER

BYTE

Current Power value of MDS

reserved5

ARRAY[1..137
] of BYTE

3)

1)

Se emite el sello de tiempo interno del lector que hace referencia a este evento. El sello de tiempo interno del lector no se
sincroniza con UTC.

2)

El valor "Reads" indica la suma de detecciones de transpondedores (Inventories), independientemente de los parámetros
Smoothing ajustados. En casos límite, esto permite al contador "Reads" aceptar valores realmente elevados sin que el
transpondedor haya llegado nunca al estado "Observed".

3)

El valor "current_Power" se indica como potencia de emisión en incrementos de 0,25 dBm (ERP/EIRP). Por consiguiente,
un valor "current_Power" de "72" (0x48) equivale a 18 dBm (ERP/EIRP).

Tabla 4-200 ATTRIBUTE "0x80" (tipo de datos "IID_TAG_STATUS_80_MOBY_U")
Nombre

Tipo

Comentario

UID

ARRAY
[1..4] of
BYTE

Unique indentifier (MDS-Number)

MDS_type

BYTE

Type of MDS

sum_subframe_access_1

BYTE

Sum of subframe access Byte 1

sum_subframe_access_2

BYTE

Sum of subframe access Byte 2

sum_subframe_access_3

BYTE

Sum of subframe access Byte 3

sum_subframe_access_4

BYTE

Sum of subframe access Byte 4

sum_searchmode_access_1

BYTE

Sum of search mode access Byte 1

sum_searchmode_access_2

BYTE

Sum of search mode access Byte 2

ST_date_Week

BYTE

Date of last sleep-time change (week of year)

ST_date_Year

BYTE

Date of last sleep-time change (year)

battery_left_1

BYTE

Battery power left (percent) Byte 1

battery_left_2

BYTE

Battery power left (percent) Byte 2

ST

BYTE

Actual sleep-time on MDS

Encontrará información detallada sobre los diferentes modos de estado en los manuales
correspondientes a los modos "FB 45", "FB55" y "SIMATIC RF620R/RF630R".
Los identificadores indicados aquí para los modos de estado equivalen a los identificadores
siguientes en los demás manuales:
0x04
0x82
0x83
0x84
0x85

4716

≙
≙
≙
≙
≙

0x01
0x02
0x03
0x04
0x05

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Bloques de campos de variables
Read_Tagfield
Descripción
El bloque "Read_Tagfield" lee los datos de un campo de variables del transpondedor y los
prepara formateados para el parámetro "IDENT_DATA". En el parámetro "TAGLAYOUT" se
transfiere un objeto tecnológico "TO_TagLayout" y se selecciona el campo de variables
correspondiente mediante el parámetro "TAGFIELD".
El objeto tecnológico "TO_TagLayout" genera un bloque de datos "<nombre del TO>_Indexes"
que permite seleccionar simbólicamente un campo de variables en el parámetro "TAGFIELD".
Adicionalmente se prepara un tipo de datos "<nombre del TO>_Datatypes" con el que se crea
una variable que contiene todos los campos de variables con los respectivos tipos de datos.
Esto permite direccionar simbólicamente un área de memoria para el campo de variables en
el parámetro "IDENT_DATA".
La variable en el parámetro "IDENT_DATA" debe corresponderse con el tipo de datos del
campo de variables. Una variable del tipo "Array of Byte" se permite siempre. El acceso
unívoco a un transpondedor determinado se realiza mediante los parámetros opcionales
"EPCID_UID" y "LEN_ID".
Encontrará Información adicional sobre el objeto tecnológico "TO_TagLayout" en el capítulo
"Objeto tecnológico "TO_TagLayout"".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Read_Tagfield":
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

TAGFIELD

Input

INT

1

Selección de un campo de va‐
riables
El valor equivale al número del
campo de variables del objeto
tecnológico "TO_TagLayout".
Para el direccionamiento simbó‐
lico puede emplearse un ele‐
mento del bloque de datos crea‐
do "<nombre del TO>_Indexes".

LEN_ID

Input

BYTE

B#16#0

Longitud de la EPC-ID/UID
Valor predeterminado: 0x00 ≙
acceso no especificado a Sin‐
gletag (RF200, RF300,
RF61xR, RF68xR)

Programación del PLC
Manual de programación y manejo, 11/2019

4717

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EPCID_UID

Input

ARRAY[1...62]
OF BYTE

0x00

Búfer para EPC-ID de 62 bytes,
UID de 8 bytes o Handle-ID de 4
bytes como máximo.
● La EPC-ID de 2-62 bytes se
introduce al principio del
búfer (la longitud se
describe mediante
"LEN_ID")
● La UID de 8 bytes se
introduce al principio del
búfer ("LEN_ID = 8")
● La Handle-ID de 4 bytes
debe introducirse en el
elemento de Array [5]-[8]
("LEN_ID = 8")

4718

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

PRESENCE

Output

BOOL

FALSE

Este bit señala la presencia de
un transpondedor. El valor vi‐
sualizado se actualiza cada vez
que se llama el bloque. Este pa‐
rámetro no existe en bloques
específicos de sistemas de lec‐
tura ópticos.

TAGLAYOUT

In/Out

TO_TAGLA‐
YOUT

--

Objeto tecnológico "TO_TagLa‐
yout"

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

HW_CON‐
NECT

In/Out

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4764)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

IDENT_DATA

In/Out

ANY / VARIANT 0x00

Búfer de datos, en el que se de‐
positan los datos leídos.
Nota:
Con Variant solo puede crearse
por el momento un
"Array_of_Byte" de longitud va‐
riable. Con Any pueden crearse
además otros tipos de datos o
UDTs.

Write_Tagfield
Descripción
El bloque "Write_Tagfield" escribe datos del parámetro "IDENT_DATA" en un campo de
variables del transpondedor. En el parámetro "TAGLAYOUT" se transfiere un objeto
tecnológico "TO_TagLayout" y se selecciona el campo de variables correspondiente mediante
el parámetro "TAGFIELD".
El objeto tecnológico "TO_TagLayout" genera un bloque de datos "<nombre del TO>_Indexes"
que permite seleccionar simbólicamente un campo de variables en el parámetro "TAGFIELD".
Adicionalmente se prepara un tipo de datos "<nombre del TO>_Datatypes" con el que se crea
una variable que contiene todos los campos de variables con los respectivos tipos de datos.
Esto permite direccionar simbólicamente un área de memoria para el campo de variables en
el parámetro "IDENT_DATA".
La variable en el parámetro "IDENT_DATA" debe corresponderse con el tipo de datos del
campo de variables. Una variable del tipo "Array of Byte" se permite siempre. El acceso
unívoco a un transpondedor determinado se realiza mediante los parámetros opcionales
"EPCID_UID" y "LEN_ID".
Encontrará Información adicional sobre el objeto tecnológico "TO_TagLayout" en el capítulo
"Objeto tecnológico "TO_TagLayout"".

Programación del PLC
Manual de programación y manejo, 11/2019

4719

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Write_Tagfield":
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

TAGFIELD

Input

INT

1

Selección de un campo de va‐
riables
El valor equivale al número del
campo de variables del objeto
tecnológico "TO_TagLayout".
Para el direccionamiento simbó‐
lico puede emplearse un ele‐
mento del bloque de datos crea‐
do "<nombre del TO>_Indexes".

LEN_DATA

Input

WORD

W#16#0

LEN_ID

Input

BYTE

B#16#0

Longitud de los datos que de‐
ben escribirse
Longitud de la EPC-ID/UID
Valor predeterminado: 0x00 ≙
acceso no especificado a Sin‐
gletag (RF200, RF300,
RF61xR, RF68xR)

EPCID_UID

Input

ARRAY[1...62]
OF BYTE

0x00

Búfer para EPC-ID de 62 bytes,
UID de 8 bytes o Handle-ID de 4
bytes como máximo.
● La EPC-ID de 2-62 bytes se
introduce al principio del
búfer (la longitud se
describe mediante
"LEN_ID")
● La UID de 8 bytes se
introduce al principio del
búfer ("LEN_ID = 8")
● La Handle-ID de 4 bytes
debe introducirse en el
elemento de Array [5]-[8]
("LEN_ID = 8")

4720

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

PRESENCE

Output

BOOL

FALSE

Este bit señala la presencia de
un transpondedor. El valor vi‐
sualizado se actualiza cada vez
que se llama el bloque. Este pa‐
rámetro no existe en bloques
específicos de sistemas de lec‐
tura ópticos.

TAGLAYOUT

In/Out

TO_TAGLA‐
YOUT

--

Objeto tecnológico "TO_TagLa‐
yout"

HW_CON‐
NECT

In/Out

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4764)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

IDENT_DATA

In/Out

ANY / VARIANT 0x00

Búfer con los datos que se es‐
cribirán.
Para MV: el primer byte codifica
el comando MV correspondien‐
te.1)
Nota:
Con Variant solo puede crearse
por el momento un
"Array_of_Byte" de longitud va‐
riable. Con Any pueden crearse
además otros tipos de datos o
UDTs.

Bloques avanzados
AdvancedCmd
Descripción
Con el bloque "AdvancedCmd" pueden ejecutarse todos los comandos, incluso aquellos que
no son representados por los demás bloques. Esta configuración general puede utilizarse para
todos los comandos y está pensada únicamente para usuarios experimentados.
Este bloque permite enviar opcionalmente el comando encadenado. Para ello, el bloque
dispone de un búfer CMD para 100 comandos. Todos los comandos encadenados deben
introducirse en el búfer a partir del primer puesto. Además, para cada comando encadenado
debe activarse el "Chained-Bit" en la estructura CMD. El único comando en el que no se activa
el "Chained-Bit" es el último. Encontrará más información sobre el "Chained-Bit" en el capítulo
"Encadenamiento (Página 4795)".
En el parámetro de entrada "CMD" debe indicarse la estructura completa del comando. La
estructura del parámetro "CMD" debe crearse en un bloque de datos.

Programación del PLC
Manual de programación y manejo, 11/2019

4721

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "AdvancedCmd":
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

CMDSEL

Input

INT

0x01

Selección del comando
"CMDREF" que debe ejecutar‐
se;
0x01 ⇒ 1.er comando, ...
El valor del parámetro
"CMDSEL" no puede ser nunca
> 100.

CMDREF

Input

ANY / VARIANT --

Encontrará una descripción
completa del parámetro en los
capítulos:
● "Comandos del perfil Ident
(Página 4767)"
● "Estructura de comandos
(Página 4768)"

4722

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

PRESENCE

Output

BOOL

FALSE

Este bit señala la presencia de
un transpondedor. El valor vi‐
sualizado se actualiza cada vez
que se llama el bloque. Este pa‐
rámetro no existe en bloques
específicos de sistemas de lec‐
tura ópticos.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

HW_CON‐
NECT

In/Out

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

IDENT_DATA

In/Out

ANY / VARIANT 0x00

Búfer para los datos que deben
escribirse y leerse.
Nota:
Con Variant solo puede crearse
por el momento un
"Array_of_Byte" de longitud va‐
riable. Con Any pueden crearse
además otros tipos de datos o
UDTs.

Config_Upload/Config_Download
Descripción
Los bloques "Config_Upload" y "Config_Download" permiten leer ("Config_Upload") o escribir
("Config_Download") la configuración de los módulos de comunicación RF18xC conectados al
controlador y de los lectores RF61xR/RF68xR utilizando el programa del controlador.
Los datos de configuración no pueden interpretarse. Guarde los datos en el controlador para
volver a escribirlos en el lector en caso de cambiar el dispositivo. Si varios lectores tienen la
misma configuración, solo tendrá que guardar los datos de configuración una vez por cada tipo
de lector. Una única copia se puede copiar en todos los lectores con la misma configuración en
una sola descarga.
Los bytes 6-9 (consulte la tabla siguiente) contienen una ID de configuración (CONFIG_ID) con
un identificador de versión unívoco. Esta ID de configuración permite comprobar en el RF18xC
si, en caso de "Config_Upload", los datos de configuración leídos coinciden con los datos de
configuración guardados en el controlador. Además, con ayuda del estado de dispositivo se
puede comprobar el número de serie para determinar si el dispositivo se ha sustituido.
Los datos de configuración tienen la estructura siguiente:
Tabla 4-201 Estructura de los datos de configuración
Byte

Nombre

0

Identificador de estructura (2 bytes)

2

Indicador de longitud (4 bytes)
Longitud del identificador de versión y el bloque de parámetros

Programación del PLC
Manual de programación y manejo, 11/2019

4723

Instrucciones
4.1 Instrucciones
Byte

Nombre

6

Identificación de la versión (≙ CONFIG_ID; 4 bytes)
Este identificador permite identificar la configuración de forma unívoca.
Se trata de un sello de tiempo en formato Linux.
El sello de tiempo indica cuántos segundos han transcurrido desde el 1
de enero de 1979 a las 00:00 horas. El identificador se asigna al generar
una configuración.

10 ... fin de "DATA"

Bloque de parámetros

El "Config_Upload/Config_Download" puede ejecutarse en cada canal de RF61xR/RF68xR.
Siempre se transfieren los mismos datos de configuración. Los datos de configuración del
módulo de comunicación RF18xC pueden transferirse únicamente a través del módulo
"Configuración del CM_1".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Config_Upload":
Parámetro

Declaración

Tipo de datos

Valor predeter‐ Descripción
minado

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

CONFIG_ID

Output

DWORD

0x00

Identificador de versión (4 bytes)
Este identificador permite iden‐
tificar la configuración de forma
unívoca. Se trata de un sello de
tiempo en formato Linux.
El sello de tiempo indica cuán‐
tos segundos han transcurrido
desde el 1 de enero de 1979 a
las 00:00 horas. El identificador
se asigna al generar una confi‐
guración.

4724

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valor predeter‐ Descripción
minado

HW_CON‐
NECT

Input/Output

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

DATA

Input/Output

ANY / VARIANT --

Búfer de datos para datos de
configuración.
La longitud real de los datos de‐
pende de la complejidad de la
configuración y de la versión de
firmware del lector. Con una
configuración estándar de los
dispositivos RF18xC y RF61xR/
RF68xR se recomienda un ta‐
maño de memoria de 4 KB. Si
utiliza configuraciones de lecto‐
res avanzadas (filtrados) o si de‐
sea cambiar la configuración en
el futuro sin tener que adaptar el
tamaño de memoria "DATA" es
recomendable utilizar un tama‐
ño de memoria de 8-16 KB.
Nota:
Con Variant solo puede crearse
por el momento un
"Array_of_Byte" de longitud va‐
riable. Con Any pueden crearse
además otros tipos de datos o
UDTs.

La tabla siguiente muestra los parámetros de la instrucción "Config_Download":
Parámetro

Declaración

Tipo de datos

Valor predeter‐ Descripción
minado

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

Programación del PLC
Manual de programación y manejo, 11/2019

4725

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valor predeter‐ Descripción
minado

HW_CON‐
NECT

In/Out

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

DATA

In/Out

ANY / VARIANT --

Búfer de datos para datos de
configuración.
La longitud real de los datos de‐
pende de la complejidad de la
configuración y de la versión de
firmware del lector. Con una
configuración estándar de los
dispositivos RF18xC y RF61xR/
RF68xR se recomienda un ta‐
maño de memoria de 4 KB. Si
utiliza configuraciones de lecto‐
res avanzadas (filtrados) o si de‐
sea cambiar la configuración en
el futuro sin tener que adaptar el
tamaño de memoria "DATA" es
recomendable utilizar un tama‐
ño de memoria de 8-16 KB.
Nota:
Con Variant solo puede crearse
por el momento un
"Array_of_Byte" de longitud va‐
riable. Con Any pueden crearse
además otros tipos de datos o
UDTs.

Inventory
Descripción
El bloque "Inventory" activa la ejecución de Inventories. Con un único Inventory se consultan
ciclos de registro para todas las antenas con todas las polarizaciones para cada antena. Si en
un lector hay conectadas p. ej. 2 antenas con 3 polarizaciones cada una, un Inventory
contendrá 6 ciclos de registro.
En los lectores RF620R y RF630R, los Inventories se ejecutan en cuanto se activa la antena.
Particularidad de los lectores RF61xR/RF68xR
Tenga en cuenta que la longitud del búfer de datos ("IDENT_DATA") debe equivaler por lo
menos a la longitud de los datos máximos previstos. Si se detectan más transpondedores y se
leen más datos de los que caben en la longitud de búfer asignada en "IDENT_DATA", los datos
de estos transpondedores se perderán. Este comportamiento se señaliza mediante el error
"0xE7FE0400" (desbordamiento del búfer).

4726

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Para los lectores RF61xR/RF68xR están disponibles además los parámetros "DURATION" y
"DUR_UNIT". Con estos parámetros se define la duración de los Inventories.
En los lectores hay cuatro modos distintos que pueden seleccionarse mediante el parámetro
"ATTRIBUTE".
● Al iniciarlo se indica una duración y un número determinados (tiempo, número de
Inventories, número de eventos "Observed" o transpondedores detectados). Básicamente
se distinguen las tres opciones siguientes:
– Duración
Ejecutar Inventories durante un tiempo determinado
– Número de Inventories
Ejecutar un número concreto de Inventories
– Cantidad de eventos "Observed"
Ejecutar Inventories hasta que se haya detectado un número determinado de
transpondedores al mismo tiempo.
Seguidamente, se ejecutarán Inventories del lector durante este tiempo o para este
número. Una vez alcanzado el tiempo o el número, el bloque finaliza y devuelve todos los
transpondedores detectados en "IDENT_DATA". Esto significa que no es posible ejecutar
más comandos hasta que se hayan ejecutado por completo todos los Inventories. La
unidad (tiempo o número) se indica mediante "DUR_UNIT" y el valor (valor de tiempo o
número), mediante "DURATION". Este modo puede ejecutarse utilizando los atributos
"0x80" y "0x81". Con el atributo correspondiente se suministran más o menos datos a través
de los transpondedores detectados.
● Los atributos "0x86" (iniciar "Presence_Mode") y "0x87" (finalizar "Presence_Mode")
permiten ejecutar Inventories permanentemente. En este caso, siempre es posible
consultar la presencia de un transpondedor mediante "PRESENCE" sin tener que iniciar el
bloque con "EXECUTE". Cuando se ejecuta el comando no se transfiere información
alguna sobre los transpondedores detectados.
Para obtener información acerca de los transpondedores detectados debe ejecutarse una
de las dos llamadas indicadas anteriormente (con tiempo / número de Inventories = 0).
Cuando este modo está activo, los comandos relacionados con los transpondedores no se
ejecutan inmediatamente, sino solo cuando se detecta un transpondedor. Esto permite
reducir los tiempos de reacción, pues el comando ya está pendiente cuando el
transpondedor entra en el campo de antena.
El "Presence_Mode" es útil en el marco de la función "Repeat Command".
En el parámetro de salida "NUMBER_TAGS" se muestra el número de transpondedores
detectados. Con los atributos "0x80" y "0x81" se visualiza la suma de todos los
transpondedores detectados al finalizar la operación de lectura. Con el atributo "0x86" se
muestra siempre en el parámetro de salida "NUMBER_TAGS" el transpondedor detectado
actualmente (máx. 15), sin que el bloque tenga que iniciarse con "EXECUTE".

Programación del PLC
Manual de programación y manejo, 11/2019

4727

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Inventory":
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

ATTRIBUTE

Input

BYTE

B#16#0

Selección del modo de estado:
● MOBY U: 0x00
● RF620R, RF630R: 0x82
(leer registro siguiente),
0x83, 0x85, 0x90, 0x91,
0x92
● RF61xR, RF68xR: 0x80,
0x81, 0x86, 0x87

DURATION

Input

WORD

W#16#0

RF61xR, RF68xR:
Duración en función de
"DUR_UNIT"
Duración o número de Invento‐
ries o número de eventos "Ob‐
served"
Ejemplo:
● 0x00 ≙ ningún Inventory
● 0x01 ≙ un Inventory

DUR_UNIT

Input

WORD

W#16#0

RF61xR, RF68xR:
Unidad para "DURATION"
● 0x00 ≙ tiempo [ms]
● 0x01 ≙ Inventories
● 0x02 ≙ número de
transpondedores que
alcanzan el estado
"Observed"

NUM‐
BER_TAGS

Output

INT

0x00

Número de transpondedores en
el campo de antena

LEN_DATA

Output

WORD

W#16#0

Longitud de los datos válidos
Durante la ejecución del coman‐
do = 0

4728

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

PRESENCE

Output

BOOL

FALSE

Este bit señala la presencia de
un transpondedor. El valor vi‐
sualizado se actualiza cada vez
que se llama el bloque. Este pa‐
rámetro no existe en bloques
específicos de sistemas de lec‐
tura ópticos.

HW_CON‐
NECT

In/Out

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT" para di‐
reccionar el canal/lector y sin‐
cronizar los bloques.

IDENT_DATA

In/Out

ANY / VARIANT 0x00

Búfer de datos para datos de In‐
ventory
Nota:
Con Variant puede crearse un
"Array_of_Byte" de longitud va‐
riable. Con Any pueden crearse
además otros tipos de datos o
UDTs.

Visualización de resultados
En el TIA Portal los tipos de datos indicados a continuación no se muestran en la lista de
selección de los tipos de datos en un proyecto recién creado. Para poder utilizar estos tipos de
datos hay que introducir el nombre del tipo de datos (p. ej. "IID_IN_I_81") manualmente.
Después del primer uso el tipo de datos se indica automáticamente en el proyecto y en la lista
de selección.

Resultados para RF61xR, RF68xR
El número de elementos "TAG_DATA[x]" de los tipos de datos de los ATTRIBUTE "0x80" y
"0x81" depende del número de transpondedores previstos. Por este motivo, cada usuario debe
elaborar el búfer de recepción por sí mismo. Tenga en cuenta la estructura siguiente a la hora
de crear el búfer de recepción "IDENT_DATA"/tipo de datos:
● El primer elemento "NUM_MDS" es siempre del tipo "WORD".
● El elemento siguiente "TAG_DATA" es siempre del tipo "ARRAY". En el "ARRAY" hay que
introducir el número de transpondedores previstos ("n").

Programación del PLC
Manual de programación y manejo, 11/2019

4729

Instrucciones
4.1 Instrucciones
Las tablas siguientes muestran a modo de ejemplo la estructura del búfer de recepción
"IDENT_DATA"/tipo de datos para los ATTRIBUTE "0x80" y "0x81".
Tabla 4-202 ATTRIBUTE "0x80"
Nombre

Tipo

Comentario

NUM_MDS

WORD

Number of MDS

TAG_DATA

ARRAY[1..n]o
f
IID_IN_I_80

Length of EPC ID

TAG_DATA[1]

IID_IN_I_80

Reserved

BYTE

ID_Len

BYTE

Length of EPC ID

EPC_ID

ARRAY[1..62]
of BYTE

EPC-ID

tagPC

WORD

TAG_DATA[2]

IID_IN_I_80

...

...

TAG_DATA[n]

IID_IN_I_80

Tabla 4-203 ATTRIBUTE "0x81"
Nombre

Tipo

Comentario

NUM_MDS

WORD

Number of MDS

TAG_DATA

ARRAY[1..n]
of
IID_IN_I_81

TAG_DATA[1]

4730

IID_IN_1_81

reserved

BYTE

ID_LEN

BYTE

EPC length

EPC_ID

ARRAY[1..62
]of BYTE

EPC-ID

tagPC

WORD

RSSI

BYTE

RSSI value

MaxRSSI

BYTE

highest RSSI value

MinRSSI

BYTE

lowest RSSI value

channel

BYTE

channel; 1..15_ESTI; 1..53:FCC

antenna

BYTE

antenna; bit coded;
Bit 0 = antenna 1; Bit 1 = antenna 2;
Bit 2 = antenna 3; Bit 3 = antenna 4

polarization

BYTE

polarizatuin of antenna;
0=undefined; 1=circular; 2=vertical linear;
3=horizontal

time

Time_OF_Day

S7 timestamp

power

BYTE

power in dBm

filterDataAvailable

BYTE

0=false; 1=true

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Nombre
Inventoried

1)

Tipo

Comentario

WORD

1)

TAG_DATA[2]

IID_IN_1_81

...

...

TAG_DATA[n]

IID_IN_1_81

Indica las veces que se ha detectado el transpondedor mediante la interfaz aérea hasta que ha cambiado al estado
"Observed".

Resultados para RF620R, RF630R
Tabla 4-204 ATTRIBUTE "0x83" (tipo de datos "IID_INVENT_82_83_RF600") para RF620R, RF630R con EPC-ID/UID
Nombre

Tipo

reserved0

BYTE

number_MDS

BYTE

EPC

ARRAY[1..19] of
"IID_IN_I_12BYTE"

EPC[1]
ID

Comentario
Number of MDS

"IID_IN_I_12BYTE"
ARRAY[1..12] of
BYTE

ID[1]

BYTE

ID[2]

BYTE

ID[3]

BYTE

ID[4]

BYTE

ID[5]

BYTE

ID[6]

BYTE

ID[7]

BYTE

ID[8]

BYTE

ID[9]

BYTE

ID[10]

BYTE

ID[11]

BYTE

ID[12]

BYTE

EPC[2]

"IID_IN_I_12BYTE"

EPC[3]

"IID_IN_I_12BYTE"

EPC[4]

"IID_IN_I_12BYTE"

EPC[5]

"IID_IN_I_12BYTE"

EPC[6]

"IID_IN_I_12BYTE"

EPC[7]

"IID_IN_I_12BYTE"

EPC[8]

"IID_IN_I_12BYTE"

EPC[9]

"IID_IN_I_12BYTE"

EPC[10]

"IID_IN_I_12BYTE"

EPC[11]

"IID_IN_I_12BYTE"

EPC[12]

"IID_IN_I_12BYTE"

EPC[13]

"IID_IN_I_12BYTE"

Programación del PLC
Manual de programación y manejo, 11/2019

4731

Instrucciones
4.1 Instrucciones
Nombre

Tipo

EPC[14]

"IID_IN_I_12BYTE"

EPC[15]

"IID_IN_I_12BYTE"

EPC[16]

"IID_IN_I_12BYTE"

EPC[17]

"IID_IN_I_12BYTE"

EPC[18]

"IID_IN_I_12BYTE"

EPC[19]

"IID_IN_I_12BYTE"

Comentario

Nota
Número de EPC-IDs
"number_MDS" indica el número de EPC-ID (1 a 19) transferidos con el bloque "INVENTORY".
Para obtener las Handle-IDs de todos los transpondedores que hay en el campo de antena
quizás será necesario aplicar repetidamente el bloque "INVENTORY" con ATTRIBUTE "0x82".

Tabla 4-205 ATTRIBUTE "0x83", "0x90", "0x91" y "0x92" (tipo de datos "IID_INVENT_8x_9x_RF6_D") para RF620R,
RF630R con Handle-ID
Nombre

Tipo

reserved

BYTE

number_MDS

BYTE

UID

ARRAY[1..29] of
"IID_IN_I_8BYTE"

UID[1]
UID

Number of MDS

"IID_IN_I_8BYTE"
ARRAY[1..8] of
BYTE

UID[1]

BYTE

UID[2]

BYTE

UID[3]

BYTE

UID[4]

BYTE

UID[5]

BYTE

UID[6]

BYTE

UID[7]

BYTE

UID[8]

BYTE

UID[2]

"IID_IN_I_8BYTE"

UID[3]

"IID_IN_I_8BYTE"

UID[4]

"IID_IN_I_8BYTE"

UID[5]

"IID_IN_I_8BYTE"

UID[6]

"IID_IN_I_8BYTE"

UID[7]

"IID_IN_I_8BYTE"

UID[8]

"IID_IN_I_8BYTE"

UID[9]

"IID_IN_I_8BYTE"

UID[10]

"IID_IN_I_8BYTE"

UID[11]

"IID_IN_I_8BYTE"

4732

Comentario

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Nombre

Tipo

UID[12]

"IID_IN_I_8BYTE"

UID[13]

"IID_IN_I_8BYTE"

UID[14]

"IID_IN_I_8BYTE"

UID[15]

"IID_IN_I_8BYTE"

UID[16]

"IID_IN_I_8BYTE"

UID[17]

"IID_IN_I_8BYTE"

UID[18]

"IID_IN_I_8BYTE"

UID[19]

"IID_IN_I_8BYTE"

UID[20]

"IID_IN_I_8BYTE"

UID[21]

"IID_IN_I_8BYTE"

UID[22]

"IID_IN_I_8BYTE"

UID[23]

"IID_IN_I_8BYTE"

UID[24]

"IID_IN_I_8BYTE"

UID[25]

"IID_IN_I_8BYTE"

UID[26]

"IID_IN_I_8BYTE"

UID[27]

"IID_IN_I_8BYTE"

UID[28]

"IID_IN_I_8BYTE"

UID[29]

"IID_IN_I_8BYTE"

reserved1

DWORD

Data

ARRAY[1..222] of
BYTE

Comentario

Nota
Número de Handle-IDs
"number_MDS" indica el número de Handle-ID (1 a 29) transferidos con el bloque
"INVENTORY". Para obtener las Handle-IDs de todos los transpondedores que hay en el
campo de antena quizás será necesario aplicar repetidamente el bloque "INVENTORY" con
ATTRIBUTE "0x82".

Tabla 4-206 ATTRIBUTE "0x85" (tipo de datos "IID_INVENT_85_RF600")
Nombre

Tipo

reserved

BYTE

number_MDS

STRUCT

ID

Comentario
Number of MDS

BYTE

ID[1]
Handle

BYTE
ARRAY[1..8] of
BYTE

Handle[1]

BYTE

Handle[2]

BYTE

Handle[3]

BYTE

Handle[4]

BYTE

Programación del PLC
Manual de programación y manejo, 11/2019

4733

Instrucciones
4.1 Instrucciones
Nombre

Tipo

Handle[5]

BYTE

Handle[6]

BYTE

Handle[7]

BYTE

Handle[8]

BYTE

EPC

Comentario

ARRAY[1..12] of
BYTE

EPC[1]

BYTE

EPC[2]

BYTE

EPC[3]

BYTE

EPC[4]

BYTE

EPC[5]

BYTE

EPC[6]

BYTE

EPC[7]

BYTE

EPC[8]

BYTE

EPC[9]

BYTE

EPC[10]

BYTE

EPC[11]

BYTE

EPC[12]

BYTE

ID[2]

"IID_IN_I_20Byte"

ID[3]

"IID_IN_I_20Byte"

ID[4]

"IID_IN_I_20Byte"

ID[5]

"IID_IN_I_20Byte"

ID[6]

"IID_IN_I_20Byte"

ID[7]

"IID_IN_I_20Byte"

ID[8]

"IID_IN_I_20Byte"

ID[9]

"IID_IN_I_20Byte"

ID[10]

"IID_IN_I_20Byte"

ID[11]

"IID_IN_I_20Byte"

Nota
Número de IDs transferidas
"number_MDS" indica el número de IDs transferidas con el bloque "INVENTORY" (de 1 a 11;
Handle-IDs y EPC-IDs). Para obtener las ID de todos los transpondedores que hay en el
campo de antena quizás será necesario aplicar repetidamente el bloque "INVENTORY" con
ATTRIBUTE "0x82".
Encontrará información detallada sobre los diferentes modos de estado en los manuales
correspondientes a los modos "FB 45", "FB55" y "SIMATIC RF620R/RF630R".
Los identificadores indicados aquí para los modos de estado equivalen a los identificadores
siguientes en los demás manuales:
0x82
0x83

4734

≙
≙

0x02
0x03

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
0x85
0x90
0x91
0x92

≙
≙
≙
≙

0x05
0x10
0x11
0x12

Programación del ATTRIBUTE "0x82"
Si no se conoce el número de transpondedores que hay en el campo de antena, repita el
bloque "INVENTORY" utilizando el ATTRIBUTE = "0x82".
,QLFLDU,19(1725<FRQ
$775,%87( 
[[
[[[

QXPEHUB0'6
HQ$775,%87(  
;

QR

WRGDVODV,'V
HVW£Q
OH¯GDV

V¯
,19(1725<
UHSHWLUFRQ
$775,%87( [

* El número de ID "X" devueltas depende del "ATTRIBUTE" utilizado.
Figura 4-25
Ejecución de programa del ATTRIBUTE "0x82" con un número desconocido de
transpondedores

Resultados para MOBY U
Tabla 4-207 ATTRIBUTE "0x00" (tipo de datos "IID_INVENT_00_MOBY_U")
Nombre

Tipo

Comentario

number_MDS

WORD

Number of MDS

UID_length

WORD

length of UID

UID

ARRAY[1..12] of
IID_IN_I_8BYTE

UID[1]

IID_IN_I_8BYTE

UID

ARRAY[1..8] of
BYTE

UID[1]

BYTE

UID[2]

BYTE

UID[3]

BYTE

UID[4]

BYTE

UID[5]

BYTE

UID[6]

BYTE

UID[7]

BYTE

UID[8]

BYTE

Programación del PLC
Manual de programación y manejo, 11/2019

4735

Instrucciones
4.1 Instrucciones
Nombre

Tipo

Comentario

UID[2]

"IID_IN_I_8BYTE"

UID[3]

"IID_IN_I_8BYTE"

UID[4]

"IID_IN_I_8BYTE"

UID[5]

"IID_IN_I_8BYTE"

UID[6]

"IID_IN_I_8BYTE"

UID[7]

"IID_IN_I_8BYTE"

UID[8]

"IID_IN_I_8BYTE"

UID[9]

"IID_IN_I_8BYTE"

UID[10]

"IID_IN_I_8BYTE"

UID[11]

"IID_IN_I_8BYTE"

UID[12]

"IID_IN_I_8BYTE"

Consulte también
Parametrizar el tipo de datos "IID_HW_CONNECT" (Página 4693)

Read_EPC_Mem
Descripción
El bloque "Read_EPC_Mem" lee datos a partir de la dirección 4 de la memoria EPC del
transpondedor RF600. El acceso se lleva a cabo en el banco 1 a partir de la dirección inicial 4.
Mediante el parámetro "LEN_DATA" se indica la longitud por leer de la memoria EPC.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Read_EPC_Mem":
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

LEN_DATA

Input

WORD

W#16#0

Longitud de la memoria EPC
que se leerá (1 ... 62 bytes)

LEN_ID

Input

BYTE

B#16#0

Longitud de la EPC-ID/UID
Valor predeterminado: 0x00 ≙
acceso no especificado a Sin‐
gletag (RF61xR, RF68xR)

4736

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EPCID_UID

Input

ARRAY[1...62]
OF BYTE

0x00

Búfer para EPC-ID de 62 bytes,
UID de 8 bytes o Handle-ID de 4
bytes como máximo.
● La EPC-ID de 2-62 bytes se
introduce al principio del
búfer (la longitud se
describe mediante
"LEN_ID")
● La UID de 8 bytes se
introduce al principio del
búfer ("LEN_ID = 8")
● La Handle-ID de 4 bytes
debe introducirse en el
elemento de Array [5]-[8]
("LEN_ID = 8")
Valor predeterminado: 0x00 ≙
acceso no especificado a Sin‐
gletag (RF620R, RF630R)

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

PRESENCE

Output

BOOL

FALSE

Este bit señala la presencia de
un transpondedor. El valor vi‐
sualizado se actualiza cada vez
que se llama el bloque. Este pa‐
rámetro no existe en bloques
específicos de sistemas de lec‐
tura ópticos.

Programación del PLC
Manual de programación y manejo, 11/2019

4737

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

HW_CON‐
NECT

In/Out

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

IDENT_DATA

In/Out

ANY / VARIANT 0x00

Búfer de datos en el que se al‐
macenarán los datos de memo‐
ria EPC leídos.
Nota:
Con Variant solo puede crearse
por el momento un
"Array_of_Byte" de longitud va‐
riable. Con Any pueden crearse
además otros tipos de datos o
UDTs.

Read_TID
Descripción
El bloque "Read_TID" lee datos del área de memoria TID (Tag Identification Memory Bank) del
transpondedor RF600. Mediante el parámetro "LEN_DATA" se indica la longitud por leer de la
TID. La longitud de la TID varía en función del transpondedor y debe consultarse en la hoja de
datos correspondiente.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Read_TID":
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

LEN_ID

Input

BYTE

B#16#0

Longitud de la EPC-ID/UID
Valor predeterminado: 0x00 ≙
acceso no especificado a Sin‐
gletag (RF61xR, RF68xR)

4738

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EPCID_UID

Input

ARRAY[1...62]
OF BYTE

0x00

Búfer para EPC-ID de 62 bytes,
UID de 8 bytes o Handle-ID de 4
bytes como máximo.
● La EPC-ID de 2-62 bytes se
introduce al principio del
búfer (la longitud se
describe mediante
"LEN_ID")
● La UID de 8 bytes se
introduce al principio del
búfer ("LEN_ID = 8")
● La Handle-ID de 4 bytes
debe introducirse en el
elemento de Array [5]-[8]
("LEN_ID = 8")
Valor predeterminado: 0x00 ≙
acceso no especificado a Sin‐
gletag (RF620R, RF630R)

LEN_DATA

Input

WORD

W#16#4

Longitud de la memoria EPC
que se leerá (1 ... 62 bytes)

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

PRESENCE

Output

BOOL

FALSE

Este bit señala la presencia de
un transpondedor. El valor vi‐
sualizado se actualiza cada vez
que se llama el bloque. Este pa‐
rámetro no existe en bloques
específicos de sistemas de lec‐
tura ópticos.

Programación del PLC
Manual de programación y manejo, 11/2019

4739

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

HW_CON‐
NECT

In/Out

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

IDENT_DATA

In/Out

ANY / VARIANT 0x00

TID leída
Nota:
Con Variant solo puede crearse
por el momento un
"Array_of_Byte" de longitud va‐
riable. Con Any pueden crearse
además otros tipos de datos o
UDTs.

Read_UID
Descripción
El bloque "Read_UID" lee la UID de un transpondedor HF. La UID tiene siempre una longitud
fija de 8 bytes.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Read_UID":

4740

Parámetro

Declaración

Tipo de datos

Valor predeter‐ Descripción
minado

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valor predeter‐ Descripción
minado

PRESENCE

Output

BOOL

FALSE

Este bit señala la presencia de
un transpondedor. El valor vi‐
sualizado se actualiza cada vez
que se llama el bloque. Este pa‐
rámetro no existe en bloques
específicos de sistemas de lec‐
tura ópticos.

HW_CON‐
NECT

In/Out

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

IDENT_DATA

In/Out

ANY / VARIANT 0x00

UID
Nota:
Con Variant solo puede crearse
por el momento un
"Array_of_Byte" de longitud va‐
riable. Con Any pueden crearse
además otros tipos de datos o
UDTs.

Set_Ant
Descripción
El bloque "Set_Ant" permite desconectar o conectar antenas. Hay diferentes bloques para
RF300 y RF600. El bloque "Set_Ant_RF300" también puede utilizarse para RF200, MOBY D
y MOBY U. El bloque "Set_Ant_RF600" hace referencia exclusivamente a los lectores RF620R
y RF630R.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Set_Ant_RF300":
Parámetro

Declaración

Tipo de datos

Valor predeter‐ Descripción
minado

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

ANTENNA

Input

BOOL

FALSE

FALSE = desconectar antena
TRUE = conectar antena

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

Programación del PLC
Manual de programación y manejo, 11/2019

4741

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valor predeter‐ Descripción
minado

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

PRESENCE

Output

BOOL

FALSE

Este bit señala la presencia de
un transpondedor. El valor vi‐
sualizado se actualiza cada vez
que se llama el bloque. Este pa‐
rámetro no existe en bloques
específicos de sistemas de lec‐
tura ópticos.

HW_CON‐
NECT

In/Out

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

La tabla siguiente muestra los parámetros de la instrucción "Set_Ant_RF600" (RF620R/
RF630R):

4742

Parámetro

Declaración

Tipo de datos

Valor predeter‐ Descripción
minado

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

ANTENNA_1

Input

BOOL

FALSE

FALSE = desconectar antena 1
TRUE = conectar antena 1

ANTENNA_2

Input

BOOL

FALSE

FALSE = desconectar antena 2
TRUE = conectar antena 2

TAGLIST_INIT

Input

BOOL

FALSE

FALSE = TagList se reseteará
TRUE = se sigue trabajando
con la TagList existente

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valor predeter‐ Descripción
minado

PRESENCE

Output

BOOL

FALSE

Este bit señala la presencia de
un transpondedor. El valor vi‐
sualizado se actualiza cada vez
que se llama el bloque. Este pa‐
rámetro no existe en bloques
específicos de sistemas de lec‐
tura ópticos.

HW_CON‐
NECT

In/Out

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

Set_Param
Descripción
El bloque "Set_Param" permite cambiar los parámetros UHF en un RF18xC/RF61xR/RF68xR
durante el tiempo de ejecución (p. ej. la potencia de la antena).
Nota
Ajustes almacenados solo en la memoria volátil
Tenga en cuenta que los parámetros almacenados en el bloque "Set_Param" únicamente se
guardan en la memoria volátil. Si se interrumpe la tensión del lector se pierden los valores
almacenados y deben volver a establecerse.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Write":
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

PARMID

Input

DWORD

0x00

Identificador de parámetro

VALUE

Input

DWORD

0x00

Valor de parámetro

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

Programación del PLC
Manual de programación y manejo, 11/2019

4743

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

PRESENCE

Output

BOOL

FALSE

Este bit señala la presencia de
un transpondedor. El valor vi‐
sualizado se actualiza cada vez
que se llama el bloque. Este pa‐
rámetro no existe en bloques
específicos de sistemas de lec‐
tura ópticos.

HW_CON‐
NECT

In/Out

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

Valores de "PARAMID" y "VALUE"
Todos los parámetros indicados en la tabla siguiente son válidos para RF61xR/RF68xR. En el
RF18xC solo es posible ajustar parámetros de fecha y hora.
Tabla 4-208 Valores de parámetro
PARMID
(hex)

PARMID
(ASCII)

Parámetro

VALUE

0x41315057

A1PW

Antena 01: Potencia radiante

Rango de valores: 0,5 ... 33

0x41325057

A2PW

Antena 02: Potencia radiante

Incremento: 0,25

0x41335057

A3PW

Antena 03: Potencia radiante

0x41345057

A4PW

Antena 04: Potencia radiante

Potencia radiante de la antena en
[dBm].
Los bytes 1 y 2 no están ocupados,
el byte 3 representa el entero y el
byte 4 el decimal.
Ejemplo: Una potencia radiante de
10,25 dBm equivale a un "VALUE"
de "0x0A19".

4744

0x41315452

A1TR

Antena 01: Valor umbral RSSI

Rango de valores: 0 ... 255

0x41325452

A2TR

Antena 02: Valor umbral RSSI

Valor umbral para RSSI.

0x41335452

A3TR

Antena 03: Valor umbral RSSI

0x41345452

A4TR

Antena 04: Valor umbral RSSI

Los transpondedores con valores in‐
feriores se rechazarán. Valor sin
unidad, sin relación directa con la
potencia radiante.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
PARMID
(hex)

PARMID
(ASCII)

Parámetro

VALUE

0x5331444C

S1DL

Punto de lectura 01: RSSI Delta

Rango de valores: 0 ... 255

0x5332444C

S2DL

Punto de lectura 02: RSSI Delta

Diferencia para valores RSSI.

0x5333444C

S3DL

Punto de lectura 03: RSSI Delta

0x5334444C

S4DL

Punto de lectura 04: RSSI Delta

Los transpondedores con valores in‐
feriores al del transpondedor con el
valor RSSI más alto se rechazarán.
Valor sin unidad, sin relación directa
con la potencia radiante.

0x4131504F

A1PO

Antena 01: Polarización

Rango de valores: 0, 1, 2, 4

0x4132504F

A2PO

Antena 02: Polarización

0x4133504F

A3PO

Antena 03: Polarización

0x4134504F

A4PO

Antena 04: Polarización

Polarización de la antena (para an‐
tenas inteligentes, p. ej. antena in‐
terna RF685R)
● 0: predeterminado, indefinido
● 1: circular
● 2: vertical lineal
● 4: horizontal lineal
La entrada está codificada por bits.
No es posible realizar combinacio‐
nes (sumar valores).

0x52364353

R6CS

Esquema de modulación

Rangos de valores: 32, 33, 34, 35,
37, 65
Esquema de modulación del punto
de lectura
Especificación de los tipos de trans‐
pondedor que se detectarán (ISO
18000-63/-62).
● 32: Tx: 40 kbps / Rx: 40 kbps /
FM0
● 33: Tx: 40 kbps / Rx: 62,5 kbps /
Miller4
● 34: Tx: 40 kbps / Rx: 75 kbps /
Miller4
● 35: Tx: 80 kbps / Rx: 62,5 kbps /
Miller4
● 37: Tx: 80 kbps / Rx: 400 kbps /
FM0
● 65: Tx: 40 kbps / Rx: 40 kbps /
ISO 18000-62

0x57544348

WTCH

Fecha y hora

Rango de valores: 01/01/2000,
00:00 horas ... 19/01/2038, 3:14 ho‐
ras
01/01/2000, 01:00 horas ≙
946684800
Fecha y hora (UTC)
Tiempo en segundos desde el
01/01/1970;
activación del reloj interno del lector/
CM; se establecen fecha y hora.

Programación del PLC
Manual de programación y manejo, 11/2019

4745

Instrucciones
4.1 Instrucciones
PARMID
(hex)

PARMID
(ASCII)

Parámetro

VALUE

0x57544F44

WTOD

Hora

Rango de valores: 0:00 ... 23:59 ho‐
ras
Hora S7 (TOD, UTC)
Milisegundos desde la medianoche;
activación del reloj interno del lector/
CM; se modifica la hora pero no la
fecha.

0x57444154

WDAT

Fecha

Rango de valores:
01/01/2000 ... 18/01/2038
Fecha S7
Días desde el 01/01/1990;
activación del reloj interno del lector/
CM; se modifica la fecha pero no la
hora.

Write_EPC_ID
Descripción
El bloque "Write_EPC_ID" sobrescribe la EPC-ID del transpondedor RF600 y adapta la
longitud de la EPC-ID en la memoria del transpondedor. Mediante el parámetro
"LEN_ID_NEW" se indica la nueva longitud de EPC-ID que debe escribirse y mediante los
parámetros "LEN_ID" y "EPCID_UID", la EPC-ID que había hasta el momento.
Asegúrese de que al ejecutar el bloque solo haya un transpondedor en el campo de la antena.
De este modo se garantiza que la identificación sea unívoca al escribir la ID. Si hay varios
transpondedores en el campo de la antena se devuelve una respuesta negativa.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Write_EPC_ID":

4746

Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

LEN_ID_NEW

Input

BYTE

W#16#0C

Longitud de la EPC-ID actual

LEN_ID

Input

BYTE

B#16#0

Longitud de la EPC-ID que ha‐
bía hasta ahora

EPCID_UID

Input

ARRAY[1...62]
OF BYTE

0x00

EPC-ID anterior

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

PRESENCE

Output

BOOL

FALSE

Este bit señala la presencia de
un transpondedor. El valor vi‐
sualizado se actualiza cada vez
que se llama el bloque. Este pa‐
rámetro no existe en bloques
específicos de sistemas de lec‐
tura ópticos.

HW_CON‐
NECT

In/Out

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

Any / Variant

0x00

EPC-ID actual

IDENT_DATA

In/Out

Nota:
Con Variant solo puede crearse
por el momento un
"Array_of_Byte" de longitud va‐
riable. Con Any pueden crearse
además otros tipos de datos o
UDTs.

Write_EPC_Mem
Descripción
El bloque "Write_EPC_Mem" sobrescribe la memoria EPC a partir de la dirección 4 del
transpondedor RF600. Mediante el parámetro "LEN_DATA" se indica la longitud por
sobrescribir de la memoria EPC.

Programación del PLC
Manual de programación y manejo, 11/2019

4747

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Write_EPC_Mem":
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

LEN_DATA

Input

WORD

W#16#0

Longitud de la memoria EPC
que se sobrescribirá (1 ... 62
bytes)

LEN_ID

Input

BYTE

B#16#0

Longitud de la EPC-ID/UID
Valor predeterminado: 0x00 ≙
acceso no especificado a Sin‐
gletag (RF61xR, RF68xR)

EPCID_UID

Input

ARRAY[1...62]
OF BYTE

0x00

Búfer para EPC-ID de 62 bytes,
UID de 8 bytes o Handle-ID de 4
bytes como máximo.
● La EPC-ID de 2-62 bytes se
introduce al principio del
búfer (la longitud se
describe mediante
"LEN_ID")
● La UID de 8 bytes se
introduce al principio del
búfer ("LEN_ID = 8")
● La Handle-ID de 4 bytes
debe introducirse en el
elemento de Array [5]-[8]
("LEN_ID = 8")
Valor predeterminado: 0x00 ≙
acceso no especificado a Sin‐
gletag (RF620R, RF630R)

4748

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

PRESENCE

Output

BOOL

FALSE

Este bit señala la presencia de
un transpondedor. El valor vi‐
sualizado se actualiza cada vez
que se llama el bloque. Este pa‐
rámetro no existe en bloques
específicos de sistemas de lec‐
tura ópticos.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

HW_CON‐
NECT

In/Out

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

IDENT_DATA

In/Out

ANY / VARIANT 0x00

Búfer de datos con los datos de
memoria EPC que se sobrescri‐
birán.
Nota:
Con Variant solo puede crearse
por el momento un
"Array_of_Byte" de longitud va‐
riable. Con Any pueden crearse
además otros tipos de datos o
UDTs.

Bloques de reset
Bloques reset
Los bloques reset descritos en el presente capítulo son necesarios cuando los sistemas de
lectura ópticos MV400/MV500 o los módulos de comunicación RF18xC, RF180C, RF170C y
ASM 456 deben funcionar sin el objeto tecnológico "SIMATIC Ident". También existe la
posibilidad alternativa de utilizar estos bloques para el RF120C cuando se ha parametrizado
el ajuste "Parámetros vía FB / lectores ópticos" en la configuración de dispositivos.
Cuando se utiliza el objeto tecnológico, los bloques reset específicos pueden utilizarse para
modificar en tiempo de ejecución unas parametrizaciones del lector distintas a las ajustadas en
el objeto tecnológico.
Tenga en cuenta que en los parámetros se utiliza automáticamente el valor predeterminado
cuando no se transfiere ningún valor.

Reset_MOBY_D
Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Reset_MOBY_D":
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

TAG_CON‐
TROL

Input

BOOL

TRUE

Control de presencia

Programación del PLC
Manual de programación y manejo, 11/2019

4749

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

TAG_TYPE

Input

BYTE

0x01

Tipo de transpondedor:
● 0x01 = cada transpondedor
ISO

RF_POWER

Input

BYTE

0x00

Potencia de salida
Potencia HF de 0,5 W a 10 W en
incrementos de 0,25 W
(rango de valores: 0x02 ... 0x28)

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

HW_CON‐
NECT

Input/Output

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

Reset_MOBY_U
Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Reset_MOBY_U":

4750

Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

TAG_CON‐
TROL

Input

BOOL

TRUE

Control de presencia

DISTANCE

Input

BYTE

0x23

Limitación del campo de trabajo
(rango de valores: 0x02 ... 0x23
o 0x82 ... 0xA3 para potencia de
emisión reducida)

MULTITAG

Input

BYTE

0x01

Número máximo de transponde‐
dores que pueden procesarse
en el campo de antena parale‐
lamente.
(Rango de valores: 0x01 ...
0x12)

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

SCAN_TIME

Input

BYTE

0x00

Scanning_Time: tiempo en
standby del transpondedor
(rango de valores: 0x00 ... 0xC8)

FCON

Input

BYTE

0x00

field_ON_control: modo de ope‐
ración BERO
(rango de valores: 0x00 ... 0x03)

FTIM

Input

BYTE

0x00

field_ON_time: tiempo del modo
de operación BERO
(rango de valores: 0x00 ... 0xFF)

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

HW_CON‐
NECT

Input/Output

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

Reset_MV
Descripción
Para resetear cámaras de los sistemas de lectura ópticos basta con llamar el bloque y ejecutar
el parámetro "EXECUTE".

Programación del PLC
Manual de programación y manejo, 11/2019

4751

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Reset_MV":
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

PROGRAM

Input

BYTE

0x00

Selección del programa
● B#16#0: Reset sin selección
de programa, o bien en caso
de un diagnóstico se
muestra el código de error
para "IN_OP = 0" en el
parámetro de salida
"STATUS".
● B#16#1 ... B#16#0F:
número del programa que
debe iniciarse
⇒ reset con selección de
programa (a partir de FW
V5.1 del MV4x0)

4752

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

HW_CON‐
NECT

Input/Output

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Reset_RF200
Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Reset_RF200":
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

TAG_CON‐
TROL

Input

BYTE

0x01

Control de presencia

TAG_TYPE

Input

BYTE

0x01

Tipo de transpondedor:
● 0x01 = cada transpondedor
ISO
● 0x03 = MDS D3xx optimización

RF_POWER

Input

BYTE

0x04

Potencia de salida; solo relevan‐
te para RF290R
Potencia HF de 0,5 W a 5 W en
incrementos de 0,25 W (rango
de valores: 0x02 ... 0x14).
Valor predeterminado 0x04 ≙ 1
W.

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

HW_CON‐
NECT

Input/Output

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

Programación del PLC
Manual de programación y manejo, 11/2019

4753

Instrucciones
4.1 Instrucciones

Reset_RF300
Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Reset_RF300":
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

TAG_CON‐
TROL

Input

BYTE

0x01

Control de presencia
● 0x00 = desconectado
● 0x01 = conectado
● 0x04 = presencia (antena
desconectada. La antena
solo se conecta cuando se
envía un comando Read o
Write.)

TAG_TYPE

Input

BYTE

0x00

Tipo de transpondedor:
● 0x00 = transpondedores
RF300
● 0x01 = cada transpondedor
ISO

RF_POWER

Input

BYTE

0x00

Potencia de salida; solo relevan‐
te para RF380R
Potencia HF de 0,5 W a 2 W en
incrementos de 0,25 W (rango
de valores: 0x02 ... 0x08).
Valor predeterminado: 0x00 ≙
1,25 W.
Este ajuste no es necesario pa‐
ra un lector RF380R de 2.ª ge‐
neración (6GT2801-3BAx0), ya
que los límites de potencia se
optimizan automáticamente en
función de la distancia entre el
lector y el transpondedor.

4754

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

HW_CON‐
NECT

Input/Output

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

Reset_RF600
Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Reset_RF600" (RF620R/
RF630R):
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

TAG_CON‐
TROL

Input

BOOL

TRUE

Control de presencia

RADIO_PRO‐
FILE

Input

BYTE

0x01

Scanning_Time: Perfil de radio‐
frecuencia según EPC-Global
(rango de valores: 0x01 ... 0x09,
en función del modelo de lector)

PO‐
WER_ANT1

Input

BYTE

0x00

Potencia de emisión para ante‐
na 1 o antena interna
(rango de valores: 0x00 ... 0x0F)

PO‐
WER_ANT2

Input

BYTE

0x00

Potencia de emisión para ante‐
na 2 o antena externa
(rango de valores: 0x00 ... 0x0F)

UID_HANDLE

Input

BOOL

FALSE

Significado de la UID en el co‐
mando:
True = Handle-ID, solo se eva‐
lúan los 4 bytes menos signifi‐
cativos de la UID;
False = UID-/EPC-ID con 8
bytes de longitud

BLACK_LIST

Input

BOOL

FALSE

TAG_HOLD

Input

BOOL

FALSE

TRUE = activar Tag Hold

PARAM_SET

Input

BYTE

0x00

Field_ON_Control
(0 = fast; rango de valores:
0x00, 0x02)

CHAN‐
NEL_PLAN

Input

BYTE

0x0F

Field_ON_Time
(rango de valores: 0x00 ... 0x0F;
solo para ETSI)

Programación del PLC
Manual de programación y manejo, 11/2019

TRUE = activar Lista negra

4755

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

MULTITAG

Input

BYTE

0x01

Número máximo de transponde‐
dores que pueden procesarse
en el campo de antena parale‐
lamente.
(Rango de valores: 0x01 ...
0x50)

ISTM

Input

BOOL

FALSE

TRUE = activar modo Singletag
inteligente

SCAN‐
NING_MODE

Input

BOOL

FALSE

TRUE = activar Modo de esca‐
neado 1)

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

HW_CON‐
NECT

Input/Output

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

1)

Actualmente no es posible con los bloques Ident.

Reset_Univ
Descripción
El bloque "Reset_Univ" es un bloque reset universal que permite resetear sistemas de
identificación. Este bloque solo debe utilizarse tras haber consultado con el soporte técnico.

4756

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Reset_Univ":
Parámetro

Declaración

Tipo de datos

Valores prede‐
terminados

Descripción

EXECUTE

Input

BOOL

FALSE

En esta entrada debe crearse
un flanco ascendente para que
el bloque ejecute el comando.

PARAM

Input

ARRAY[1...16]
OF BYTE

0x00

Datos para el telegrama de reset
Los datos que deben ajustarse
aquí pueden consultarse al so‐
porte técnico en caso de reque‐
rir ajustes especiales.

DONE

Output

BOOL

FALSE

La petición se ha procesado. Si
el resultado es positivo se activa
este parámetro.

BUSY

Output

BOOL

FALSE

La petición se está ejecutando.

ERROR

Output

BOOL

FALSE

La petición ha finalizado con un
error. El código de error se
muestra en "STATUS".

STATUS

Output

DWORD

FALSE

Visualización del mensaje de
error cuando se ha activado el
bit "ERROR".

HW_CON‐
NECT

Input/Output

TO_IDENT

--

Objeto tecnológico "TO_Ident"
del dispositivo Ident

IID_HW_CON‐
NECT

--

Parámetro global del tipo
"IID_HW_CONNECT (Pági‐
na 4693)" para direccionar el ca‐
nal/lector y sincronizar los blo‐
ques.

Tabla 4-209 Estructura del parámetro "PARAM"
Byte

1

2...5

6

7...8

9

10

11

12

13...14

15

16

Valor

0x04

0x00

0x0A

0x00

scan‐
ning_
time

param

op‐
tion_
1

distan‐
ce_
limiting

Núme‐
ro de
trans‐
ponde‐
dores

field_
on_
control

field_
on_
time

Programación del PLC
Manual de programación y manejo, 11/2019

4757

Instrucciones
4.1 Instrucciones

Programar el perfil Ident
Estructura del perfil Ident
Nota
No es posible el funcionamiento paralelo de bloques Ident y perfil Ident
Tenga en cuenta que el CM y el lector no pueden funcionar simultáneamente utilizando los
bloques Ident y el perfil Ident.
Los bloques descritos en el capítulo "AUTOHOTSPOT" representan una interfaz simplificada
del perfil Ident. Si las funcionalidades de los bloques no fueran suficientes para su aplicación,
tiene la posibilidad de utilizar alternativamente el perfil Ident. El perfil Ident permite programar
estructuras de comandos complejas y trabajar con repetición de comandos. El gráfico
siguiente muestra el perfil Ident junto con los comandos que pueden aplicarse con él.
Nota
Perfil Ident para usuarios experimentados
El perfil Ident es un bloque complejo y contiene todas las funcionalidad de los bloques Ident.
El perfil Ident se ha concebido especialmente para usuarios de bloques experimentados que
desean configurar funciones complejas utilizando un solo bloque. Para usuarios sin
experiencia se recomienda utilizar los bloques Ident.

4758

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

$MXVWHGHOD
GLUHFFLµQI¯VLFD
GHOOHFWRU

,,'B+:B&211(&7

+:B&211(&7

'21(

%22/

(5525

%22/

67$786

':25'

:$51,1*

&RPDQGRV
SDUDHO
OHFWRU

&RQWUROGH
FRPDQGRV\
GDWRV

'DWRVGH
HVFULWXUD\
SDU£PHWURV
SDUDWDJ\
OHFWRU
'DWRVGH
OHFWXUDGH
WDJROHFWRU

Figura 4-26

%22/

(;(&87(

%86<

%22/

%22/

537&0'

537$&7

%22/

%22/

65(6(7

(55B,5(4

%22/

%22/

,1,7
73&

%22/

73

%22/

8,1

%22/

8,1

%22/

,17

&0'',0

,17

&0'6(/

$1<9$5,$17
RI&0'B6758&7

&0'5()

$55$<>1@
RI%<7(

7;5()

$55$<>1@
RI%<7(

5;5()

3HUILO,GHQW

,QLFLDU\
UHVWDEOHFHU
FRPDQGRV

%22/

8,1

%22/

8,1

%22/

75/(1

,17

,QGLFDGRUHVGH
HVWDGR\HUURU

9LVXDOL]DFLµQ
GHWDJVHQHO
FDPSRGHOD
DQWHQD

/RQJLWXGGHORV
GDWRVWUDQVIHULGRV
FRQHO¼OWLPR
FRPDQGR

Parámetros Input del perfil Ident

Nota
Trabajar con varios canales
Si se trabaja con varios canales hay que asegurarse de que el bloque se llama con un solo DB
de instancia para cada canal.

Programación del PLC
Manual de programación y manejo, 11/2019

4759

Instrucciones
4.1 Instrucciones

Descripción de la interfaz
Tabla 4-210 Parámetros de entrada
Parámetro de entrada

Tipo de datos

Valor predeter‐
minado

Significado

HW_CONNECT

IID_HW_CON‐
NECT

--

Parámetro global del tipo "IID_HW_CONNECT" para direc‐
cionar el canal/lector y sincronizar los bloques.
El direccionamiento se lleva a cabo tal como se describe en
el capítulo "Parametrizar el tipo de datos "IID_HW_CON‐
NECT" (Página 4764)".

EXECUTE

TO_IDENT

--

Objeto tecnológico "TO_Ident" del dispositivo Ident

BOOL

FALSE

TRUE = lanzamiento de un comando nuevo
Antes de iniciar hay que activar el comando y los parámetros
correspondientes en la memoria vinculada con "CMDREF".

RPTCMD

BOOL

FALSE

TRUE = repetición del comando ejecutado actualmente o
que se ejecutará a continuación por parte del módulo de co‐
municación

SRESET

BOOL

FALSE

TRUE = cancelación del comando que se procesa actual‐
mente en el módulo de comunicación

INIT

BOOL

FALSE

TRUE = el módulo de comunicación ejecuta un rearranque
completo y se parametriza de nuevo

CMDDIM

INT

10

Número de comandos en el parámetro "CMDREF"

CMDSEL

INT

0

Selección del comando "CMDREF" que debe ejecutarse;
1 ⇒ 1.er comando, ...
El valor del parámetro "CMDSEL" no puede ser nunca mayor
que el valor del parámetro "CMDDIM".

CMDREF

TXREF

RXREF

4760

ARRAY[1...n] of
IID_CMD_STRU
CT

--

ARRAY[1...n] of
BYTE

--

ARRAY[1...n] of
BYTE

--

Campo de comandos
El campo puede incluir un máximo de 100 comandos. Los
comandos son variables complejas del tipo
"IID_CMD_STRUCT". Encontrará más información sobre
"CMDREF" en el capítulo "Comandos del perfil Ident (Pági‐
na 4767)".
Referencia al área de memoria global para datos emitidos.
El área de memoria puede dividirse con otras instancias del
bloque. El valor "n" de los diferentes bloques es variable y
puede tener un tamaño de 32 KB como máximo.
Referencia al área de memoria global para datos recibidos.
El área de memoria puede dividirse con otras instancias del
bloque. El valor "n" de los diferentes bloques es variable y
puede tener un tamaño de 32 KB como máximo.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Tabla 4-211 Parámetros de salida
Parámetro de salida

Tipo de datos

Valor predeter‐
minado

Significado

DONE

BOOL

FALSE

TRUE = el comando se ha ejecutado correctamente.

ERROR

BOOL

FALSE

TRUE = se ha detectado un error.
El error se muestra en el parámetro "STATUS". El bit se de‐
sactiva automáticamente cuando se inicia un comando nue‐
vo.

STATUS

DWORD

FALSE

Advertencias y errores
Si "ERROR = TRUE" o "WARNING = TRUE" el parámetro
"STATUS" contendrá la información de advertencia. Encon‐
trará más información en el capítulo "AUTOHOTSPOT".

WARNING

BOOL

FALSE

TRUE = se ha detectado una advertencia.
La advertencia se muestra en el parámetro "STATUS". Si el
parámetro "ERROR" no está activado al mismo tiempo sig‐
nifica que los datos se han procesado correctamente. El bit
se desactiva automáticamente cuando se inicia un comando
nuevo.

BUSY

BOOL

FALSE

TRUE = el bloque procesa un comando.
No es posible iniciar otros comandos, a excepción de "INIT"
y "SRESET".

RPTACT

BOOL

FALSE

TRUE = "RPTCMD" está activo
El bit de acuse indica que el "Repeat-Mode" del CM/lector
está activo.

ERR_IREQ

BOOL

FALSE

TRUE = se ha producido un error en el módulo de comuni‐
cación o lector (p. ej. durante el arranque o al deshacer la
conexión o con RF61xR, RF68xR con errores de antena o
cambios en la configuración)

TPC

BOOL

FALSE

Transponder Presence Changed (solo si Presence_Mode
está activo)
TRUE = un nuevo transpondedor entra en el campo de la
antena del lector o bien un transpondedor sale del campo de
la antena.
El parámetro se pone a "FALSE" una vez se ha ejecutado
correctamente el siguiente comando "INVENTORY" (0x80,
0x81, 0x87) o "INIT".

TP

BOOL

FALSE

Transponder Presence
TRUE = hay un transpondedor en el campo de antena del
lector.

Programación del PLC
Manual de programación y manejo, 11/2019

4761

Instrucciones
4.1 Instrucciones
Parámetro de salida

Tipo de datos

Valor predeter‐
minado

Significado

UIN0

BOOL

FALSE

UIN1

BOOL

FALSE

UIN2

BOOL

FALSE

En lectores RFID se muestra el número de transpondedores
que hay en el campo de antena. UIN0 ... UIN3 deben inter‐
pretarse como valores binarios.

UIN3

BOOL

FALSE

Ejemplo:
UIN3 = 0; UIN2 = 0; UIN1 = 1; UIN0 = 1
⇒ 3 transpondedores
En lectores ópticos se muestran los diferentes estados del
lector.
● UIN0: equivale al bit "IN_OP" del lector
● UIN1: equivale al bit "RDY" del lector
● UIN2 + UIN3: estos dos bits se interpretan como valor sin
signo (el bit 2 es el bit menos significativo) que representa
el número de códigos descifrados disponibles. Si el valor
= 3 significa que hay tres o más códigos descifrados
disponibles.

TRLEN

INT

0

Número de datos que se han recibido tras la ejecución co‐
rrecta del comando.

Estructura de datos del perfil Ident
Cada vez que se llama el perfil Ident hay que suministrar valores a los parámetros
("HW_CONNECT", "CMDREF", "TXREF" y "RXREF"), de la forma descrita en el capítulo
"AUTOHOTSPOT".
La llamada del perfil Ident siempre se produce a través del parámetro de entrada
"HW_CONNECT" y los parámetros "IN/OUT" "CMDREF", "TXREF" y "RXREF". Los tres
parámetros deben crearse en un bloque de datos. La relación entre los tres parámetros "IN/
OUT" se describe con detalle a continuación:
● CMDREF (búfer de comandos):
– Array[1...n] of IID_CMD_STRUCT
● TXREF (búfer de emisión):
– Array[1...n] of Byte
– Con Any pueden crearse además otros tipos de datos o UDTs.
● RXREF (búfer de recepción):
– Array[1...n] of Byte
– Con Any pueden crearse además otros tipos de datos o UDTs.

4762

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
lLQVWDQFLD

lLQVWDQFLD

&DOOಱ,GHQWB3URILOHಯ
+:B&211(&7




&0'5()
7;5()
5;5()
&0'5()
:5,7(&21),*
2))6(7%8))(5

>@

]%:5,7(
2))6(7%8))(5

>@

]%5($'
2))6(7%8))(5

>@
>@
>@

%¼IHUSDUD
FRPDQGRV

>@
>@
>@
>@
>@
7;5()









%¼IHUSDUD
GDWRVGLULJLGRVDO
&0RWUDQVSRQGH
GRU

Q
5;5()




%¼IHUSDUD
GDWRVGHO&0R
WUDQVSRQGHGRU




Q

Figura 4-27

Ejemplo de estructura de datos del perfil Ident

Programación del PLC
Manual de programación y manejo, 11/2019

4763

Instrucciones
4.1 Instrucciones
Explicación del ejemplo de estructura de datos
● CMDREF[1]:
Comando "WRITE-CONFIG", OFFSETBUFFER = 0
En la posición "CMDREF[1]" debe parametrizarse el comando "WRITE-CONFIG" para que
"INIT/Reset" se ejecute correctamente.
● CMDREF[2]:
Comando "WRITE", OFFSETBUFFER = 15
● CMDREF[3]:
Comando "READ", OFFSETBUFFER = 0
Si se selecciona el comando "CMDREF[2]" se inicia un comando de escritura y los datos que
deben escribirse se recuperan a partir del byte 15 del parámetro "TXREF". Si se selecciona el
comando "CMDREF[3]", los datos leídos se depositan en el parámetro "RXREF" a partir del
byte 0.

Parametrizar el tipo de datos "IID_HW_CONNECT"
Los bloques Ident y el perfil Ident pueden parametrizarse con o sin ayuda del objeto
tecnológico "TO_Ident". Si los bloques se parametrizan sin el objeto tecnológico, se necesita
el tipo de datos "IID_HW_CONNECT".
Antes de poder empezar a parametrizar los bloques hay que crear una variable del tipo de
datos PLC "IID_HW_CONNECT". Con el tipo de datos PLC "IID_HW_CONNECT" se
direcciona el sistema de identificación o bien un canal del sistema de identificación.

Direccionamiento de los dispositivos de identificación
Al trabajar con las instrucciones y los bloques se necesita el tipo de datos
"IID_HW_CONNECT" para direccionar los lectores. La parametrización de comandos en el
perfil Ident corre a cargo de los bloques de identificación. El perfil Ident y el bloque
"AdvancedCMD" requieren además el tipo de datos "IID_CMD_STRUCT" para parametrizar
los diferentes comandos. En función de si se trabaja con el perfil Ident o con los bloques de
identificación, estos tipos de datos deben integrarse y parametrizarse del modo descrito en los
capítulos siguientes.

Parametrización del tipo de datos "IID_HW_CONNECT"
Proceda del siguiente modo para parametrizar el tipo de datos "IID_HW_CONNECT" para un
canal:
1. Haga doble clic en la entrada "Agregar nuevo bloque" de la carpeta "Bloques de programa"
en el árbol del proyecto.
2. Haga clic en el botón "Bloque de datos" y asigne un nombre al bloque.
3. Confirme la entrada con "Aceptar".
Reacción: el bloque de datos se abre.
4. Cree una variable nueva introduciendo un nombre de variable en la columna "Nombre".

4764

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
5. En la columna "Tipo de datos", seleccione el tipo de datos "IID_HW_CONNECT".

Figura 4-28

Crear un bloque de datos

6. Indique los datos de dirección del dispositivo de identificación o del canal.
– HW_ID: identificador de hardware del módulo (solo en S7-1200 y S7-1500)
– CM_CHANNEL: canal dentro de un módulo
– LADDR: dirección de entrada/salida del módulo
Los valores de los parámetros "HW_ID" y "LADDR" pueden leerse en las propiedades del
módulo de comunicación/lector, en la configuración de dispositivos. Introduzca los valores
de parámetros leídos en la columna "Valor inicial" de los parámetros correspondientes. La
lectura de los valores de parámetros se describe a continuación.

Proceda del siguiente modo para leer los valores de parámetros "HW_ID" y "LADDR" para un
canal:
1. Abra la vista de redes y haga doble clic en el módulo de comunicación.
Reacción: TIA cambia a la vista de dispositivos y se abre la ventana de propiedades del CM.
2. Marque el módulo correspondiente en la ficha "Vista general de dispositivos".
La dirección E/S que se muestra en la ficha equivale a "LADDR".
Tenga en cuenta que la dirección de entrada y la dirección de salida deben tener el mismo
valor.

Programación del PLC
Manual de programación y manejo, 11/2019

4765

Instrucciones
4.1 Instrucciones
3. En la ficha "Propiedades > Constantes de sistema" encontrará el identificador de hardware
que equivale a "HW_ID".

Figura 4-29

El parámetro "ID de hardware"

4. Transfiera los valores de "LADDR" y "HW_ID" al tipo de datos PLC "IID_HW_CONNECT"
del lector que debe parametrizarse.
Nota
Ajustar el modo de usuario
Recuerde asignar el valor "Perfil normalizado RFID" al parámetro "Modo de usuario" en las
propiedades del módulo de comunicación y seleccionar el modo MOBY adecuado.
En todos los demás módulos de comunicación/lectores encontrará los dos parámetros
directamente en las propiedades del módulo.
El tipo de datos "IID_HW_CONNECT" está creado ahora para un canal. Repita este
procedimiento para cada lector/canal adicional. Si desea utilizar otro canal del lector/CM,
ajústelo mediante el parámetro "CM_CHANNEL". Los parámetros "HW_ID" y "LADDR" son
iguales en todos los canales/lectores/antenas. En un módulo de comunicación RF18xC, cada
lector está asignado a un módulo propio y tiene unos "HW_ID" y "LADDR" propios. Recuerde
que el valor del canal siempre debe ser "1".

4766

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Ahora, la librería está integrada y los bloques y tipos de datos necesarios están creados en el
proyecto. El tipo de datos "IID_HW_CONNECT" también está creado y direccionado. Ya puede
empezar a programar los bloques.
Nota
Configurar "IID_CMD_STRUCT"
Si se trabaja con el perfil Ident o con el bloque "AdvancedCmd", en el bloque de datos ya
creado debe crearse adicionalmente un elemento con el tipo de datos "IID_CMD_STRUCT"
(array [1...n]).

Comandos del perfil Ident
La tabla siguiente contiene todos los comandos que soportan el perfil Ident y el bloque
"AdvancedCMD".
Tabla 4-212 Comandos del perfil Ident
Comando

Código de coman‐ Parámetros utilizados
do

Descripción

HEX

ASCII

0x70

'p'

OFFSETBUFFER, EP‐
CID_UID, LEN_ID,
LEN_DATA, ADDR_TAG,
MEM_BANK, PSWD

Lee datos de un transpondedor / sistema de lectura
óptico indicando la dirección inicial física, la longi‐
tud y la contraseña.

PHYSICAL-WRITE 0x71

'q'

OFFSETBUFFER, EP‐
CID_UID, LEN_ID,
LEN_DATA, ADDR_TAG,
MEM_BANK, PSWD

Escribe datos en un transpondedor / sistema de
lectura óptico indicando la dirección inicial física, la
longitud y la contraseña.

READER-STATUS 0x74

't'

OFFSETBUFFER, ATTRI‐
BUTES

Lee el estado del lector.

TAG-STATUS

0x73

's'

OFFSETBUFFER, EP‐
CID_UID, LEN_ID, ATTRI‐
BUTES

Lee el estado de un transpondedor.

INVENTORY

0x69

'i'

OFFSETBUFFER, ATTRI‐
BUTES, DURATION,
DUR_UNIT

Solicita una lista de todos los transpondedores ac‐
cesibles en ese momento dentro del alcance de la
antena.

FORMAT

0x66

'f'

OFFSETBUFFER, EP‐
CID_UID, LEN_ID,
LEN_DATA

Inicializa el transpondedor.

PUT

0x65

'e'

OFFSETBUFFER, EP‐
CID_UID, LEN_ID,
LEN_DATA

Transfiere otros comandos no definidos en el es‐
tándar del perfil normalizado. Para ello hay definida
una estructura de datos adecuada a cada comando
en el búfer de datos de transmisión.

WRITE-ID

0x67

‘g‘

OFFSETBUFFER, EP‐
CID_UID, LEN_ID, NEWLEN_ID, PSWD

RF61xR/RF68xR:

EPCID_UID, LEN_ID,
PSWD

RF61xR/RF68xR:

PHYSICAL-READ

KILL-TAG

0x6A

‘j‘

Programación del PLC
Manual de programación y manejo, 11/2019

escribe una nueva EPC-ID en el transpondedor.

el transpondedor se desactiva de forma permanen‐
te.

4767

Instrucciones
4.1 Instrucciones
Comando

LOCK-TAG-BANK

EDIT-BLACKLIST

GET-BLACKLIST

Código de coman‐ Parámetros utilizados
do
HEX

ASCII

0x79

‘y‘

0x7A

0x6C

‘z‘

‘l‘

Descripción

EPCID_UID, LEN_ID,
PSWD, ACTION, MASK

RF61xR/RF68xR:

EPCID_UID, LEN_ID, MO‐
DE

RF61xR/RF68xR:

OFFSETBUFFER

RF61xR/RF68xR:

el área de memoria correspondiente del transpon‐
dedor se bloquea de acuerdo con la especificación.
se edita la lista negra. Es posible agregar el trans‐
pondedor actual, agregar todos los transpondedo‐
res detectados, borrar transpondedores individua‐
les o borrar todos los transpondedores.
se leen todas las ID de variable de la lista negra.

READ-CONFIG

0x61

'a'

--

Lee los parámetros del módulo de comunicación/
lector.

WRITE-CONFIG

0x78

'x'

LEN_DATA, CONFIG

Envía parámetros nuevos al módulo de comunica‐
ción/lector.

Estructura de comandos
Antes de poder iniciar un comando con "EXECUTE" o "INIT" hay que definirlo. Para definir un
comando de forma sencilla se ha creado el búfer de comandos "CMDREF" utilizando el tipo de
datos "IID_CMD_STRUCT". En el búfer de comandos están disponibles 100 áreas en las que
pueden parametrizarse comandos. Mediante el parámetro "CMDSEL" se especifica el
comando (1...n) con el que se inicia "EXECUTE".
Tenga en cuenta que el primer elemento del búfer siempre está reservado para "INIT". Es
decir, cuando se activa "INIT", "CMDSEL" debe estar puesto a "1" y el elemento "1" del búfer
CMD debe contener los ajustes correspondientes. La tabla siguiente contiene la estructura de
comandos de los parámetros. No todos los comandos utilizan todos los parámetros.
Tabla 4-213 Estructura de comandos de los parámetros
Parámetro

Tipo de da‐
tos

Valor prede‐
terminado

Descripción

CMD

BYTE

B#16#0

Código de comando (véase la tabla del capítulo "AUTO‐
HOTSPOT")

OFFSETBUFFER

INT

0

Offset relativo dentro del búfer de datos de recepción. El
parámetro indica la dirección dentro del área de memoria
en la que debe guardarse el primer byte de los datos re‐
cibidos o en la que se espera el primer byte de los datos
que deben enviarse.
Todos los bytes posteriores deben guardarse en direc‐
ciones ascendentes.

4768

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Tipo de da‐
tos

Valor prede‐
terminado

EPCID_UID

ARRAY[1...6 B#16#0
2] OF BYTE

Descripción
Búfer para EPC-ID de 62 bytes, UID de 8 bytes o HandleID de 4 bytes como máximo.
● La EPC-ID de 2-62 bytes se introduce al principio del
búfer (la longitud se describe mediante "LEN_ID")
● La UID de 8 bytes se introduce al principio del búfer
("LEN_ID = 8")
● La Handle-ID de 4 bytes debe introducirse en el
elemento de Array [5]-[8] ("LEN_ID = 8")
Valor predeterminado: 0x00 ≙ acceso no especificado a
Singletag

LEN_DATA

WORD

W#16#0

Número de bytes que deben leerse o escribirse

ADDR_TAG

DWORD

DW#16#0

Dirección inicial física en el transpondedor

ATTRIBUTES

BYTE

B#16#0

Descriptor de subcomando para algunos comandos (p.
ej. "READER-STATUS", "INVENTORY", etc.)

CHAINED

BOOL

FALSE

● 0x00 = no encadenado
● 0x01 = encadenado
Todos los comandos encadenados excepto el último de‐
ben tener activado este bit. Los comandos se procesan
en el orden en el que están situados en la estructura CMD.

CONFIG

BYTE

B#16#0

● 0x01 = reset, sin datos de configuración
● 0x02 = sin reset, datos de configuración que enviar
● 0x03 = reset, datos de configuración que enviar
● 0x80 = sin reset, solo parámetro individual

EXT_UHF

STRUCT

Programación del PLC
Manual de programación y manejo, 11/2019

--

Estructura para parámetros adicionales (solo en RF61xR/
RF68xR)

4769

Instrucciones
4.1 Instrucciones
Parámetro

Tipo de da‐
tos

Valor prede‐
terminado

Descripción

LEN_ID

BYTE

B#16#0

Longitud de los datos válidos en el campo "EPCID_UID".

MEM_BANK

BYTE

B#16#3

Banco de memoria en el transpondedor
● 0x00 = RESERVED
● 0x01 = EPC
● 0x02 = TID
● 0x03 = USER

PSWD

DWORD

DW#16#0

EDIT_BLACKLIST_MODE

BYTE

B#16#0

Contraseña para el acceso al transpondedor
0x00 ≙ sin contraseña
Modo
● 0x00 = agregar ID de variable
● 0x01 = agregar todos los transpondedores "Observed"
● 0x02 = borrar ID de variable
● 0x03 = borrar todo

INVENTORY_DURATION

WORD

W#16#0

Duración
Duración o número de Inventories o número de eventos
"Observed"
Ejemplo:
● 0x00 ≙ ningún Inventory
● 0x01 ≙ un Inventory

INVENTORY_DUR_UNIT

WORD

W#16#0

Unidad de "DURATION"
● 0x00 = tiempo [ms]
● 0x01 = Inventories
● 0x02 = número de transpondedores que alcanzan el
estado "Observed"

LOCK-TAG-BANK_AC‐
TION

WORD

W#16#0

Lock-Action (ver "Especificación EPC")

LOCK-TAG-BANK_MASK

WORD

W#16#0

Lock-Mask (ver "Especificación EPC")

Comandos
A continuación se citan todos los parámetros y valores de parámetros relevantes para los
diferentes comandos. Los parámetros que no se citan obtienen el valor predeterminado
indicado en el capítulo anterior.
Tabla 4-214 PHYSICAL-READ
Parámetro

Valor / descripción

CMD

0x70

OFFSETBUFFER

Offset en el búfer de recepción "RXREF"

LEN_DATA

Longitud de los datos recibidos
RF300 Gen1: máx. 57.085 bytes por operación de lectura

ADDR_TAG

4770

Dirección en el transpondedor

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Valor / descripción

CHAINED

● True = encadenado
● False = no encadenado

EPCID_UID

Búfer para EPC-ID de 62 bytes, UID de 8 bytes o Handle-ID de 4 bytes
como máximo.
● La EPC-ID de 2-62 bytes se introduce al principio del búfer (la
longitud se describe mediante "LEN_ID")
● La UID de 8 bytes se introduce al principio del búfer ("LEN_ID = 8")
● La Handle-ID de 4 bytes debe introducirse en el elemento de Array
[5]-[8] ("LEN_ID = 8")
Valor predeterminado: 0x00 ≙ acceso no especificado a Singletag

LEN_ID

Longitud de EPC-ID (2-62 bytes)
0x00 ≙ acceso no especificado a Singletag

MEM_BANK

Banco de memoria
● 0x00 ≙ Reserved
● 0x01 ≙ EPC
● 0x02 ≙ TID
● 0x03 ≙ USER

PSWD

Contraseña
0x00 ≙ sin contraseña

RXREF

Datos leídos

Tabla 4-215 PHYSICAL-WRITE
Parámetro

Valor / descripción

CMD

0x71

OFFSETBUFFER

Offset en el búfer de transmisión "TXREF"

LEN_DATA

Longitud de los datos que deben escribirse
RF300 Gen1: máx. 57.085 bytes por operación de escritura

ADDR_TAG

Dirección en el transpondedor

CHAINED

● True = encadenado
● False = no encadenado

EPCID_UID

Búfer para EPC-ID de 62 bytes, UID de 8 bytes o Handle-ID de 4 bytes
como máximo.
● La EPC-ID de 2-62 bytes se introduce al principio del búfer (la
longitud se describe mediante "LEN_ID")
● La UID de 8 bytes se introduce al principio del búfer ("LEN_ID = 8")
● La Handle-ID de 4 bytes debe introducirse en el elemento de Array
[5]-[8] ("LEN_ID = 8")
Valor predeterminado: 0x00 ≙ acceso no especificado a Singletag

LEN_ID

Longitud de EPC-ID (2-62 bytes)
0x00 ≙ acceso no especificado a Singletag

Programación del PLC
Manual de programación y manejo, 11/2019

4771

Instrucciones
4.1 Instrucciones
Parámetro

Valor / descripción

MEM_BANK

Banco de memoria
● 0x00 ≙ Reserved
● 0x01 ≙ EPC
● 0x02 ≙ TID
● 0x03 ≙ USER

PSWD

Contraseña
0x00 ≙ sin contraseña

TXREF

Datos que deben escribirse

Tabla 4-216 READER-STATUS
Parámetro

Valor / descripción

CMD

0x74

OFFSETBUFFER

Offset en el búfer de recepción "RXREF"

ATTRIBUTES

Identificador de los modos de estado / entradas posibles:
● RF200: 0x81
● RF300: 0x81, 0x86
● RF620R, RF630R: 0x87, 0x88, 0xA0, 0xA1
● RF61xR, RF68xR: 0x89
● RF185C, RF186C, RF188C: 0xA2
● MOBY U: 0x81, 0x84, 0x85
● MOBY D: 0x81

RXREF

Datos de estado recibidos
Encontrará la estructura de datos de los modos de estado en el capítulo
"Reader_Status (Página 4703)".

Tabla 4-217 TAG-STATUS
Parámetro

Valor / descripción

CMD

0x73

OFFSETBUFFER

Offset en el búfer de recepción "RXREF"

ATTRIBUTES

Identificador de los modos de estado / entradas posibles:
● RF200: 0x83
● RF300 (RF300T): 0x04, 0x82
● RF300 (ISO): 0x83
● RF300 Gen2: 0x83
● RF600 (R620R, RF630R): 0x84, 0x85
● MOBY D: 0x83 1)
● MOBY U: 80

4772

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Valor / descripción

EPCID_UID

Búfer para EPC-ID de 62 bytes, UID de 8 bytes o Handle-ID de 4 bytes
como máximo.
● La EPC-ID de 2-62 bytes se introduce al principio del búfer (la
longitud se describe mediante "LEN_ID")
● La UID de 8 bytes se introduce al principio del búfer ("LEN_ID = 8")
● La Handle-ID de 4 bytes debe introducirse en el elemento de Array
[5]-[8] ("LEN_ID = 8")
Valor predeterminado: 0x00 ≙ acceso no especificado a Singletag

LEN_ID

Longitud de EPC-ID / UID

RXREF

Datos de estado recibidos
Encontrará la estructura de datos de los modos de estado en el capítulo
"Tag_Status (Página 4711)".

1)

Solo SLG D10S

Tabla 4-218 INVENTORY
Parámetro

Valor / descripción

CMD

0x69

OFFSETBUFFER

Offset en el búfer de recepción "RXREF"

ATTRIBUTES

Identificador de los modos de estado / entradas posibles:
RF61xR/RF68xR:
● 0x80 ≙ Inventory con informaciones breves de transpondedores
● 0x81 ≙ Inventory con muchas informaciones de transpondedores
● 0x86 ≙ modo de presencia activo
● 0x87 ≙ modo de presencia inactivo
RF620R/RF630R:
● 0x82 ≙ leer un registro de datos consecutivo
● 0x83 ≙ leer Handle-ID en MOBY_mode ≙ 6 y EPC-ID en
MOBY_mode ≙ 7
● 0x85 ≙ leer Handle-ID y EPC-ID por valor RSSI medio clasificados
en orden descendente
● 0x91 ≙ leer Handle-ID por valor RSSI máximo clasificados en orden
descendente
● 0x92 ≙ leer Handle-ID por frecuencia de lectura clasificados en
orden descendente
● 0xA0 ≙ leer primeras entradas de la lista negra
● 0xA1 ≙ leer más entradas de la lista negra
RF300/MOBY U:
● 0x00 ≙ lista de todas las variables con UID

Programación del PLC
Manual de programación y manejo, 11/2019

4773

Instrucciones
4.1 Instrucciones
Parámetro

Valor / descripción

INVENTORY_DURATION

Solo con 0x80 y 0x81:
Duración
Duración o número de Inventories o número de eventos "Observed"
Ejemplo:
● 0x00 ≙ ningún Inventory
● 0x01 ≙ un Inventory

INVENTORY_DUR_UNIT

Solo con 0x80 y 0x81:
Unidad de "DURATION"
● 0x00 ≙ tiempo [ms]
● 0x01 ≙ Inventories
● 0x02 ≙ número de transpondedores que alcanzan el estado
"Observed"

RXREF

En RF61xR/RF68xR solo con 0x80 y 0x81:
Datos recibidos
En RF620R/RF630R/RF300/MOBY U:
Datos recibidos
Encontrará la estructura de datos de los modos de estado en el capítulo
"Estructura de datos del perfil Ident (Página 4762)".

Tabla 4-219 FORMAT (no en RF200 y RF61xR/RF68xR)
Parámetro

Valor / descripción

CMD

0x66

OFFSETBUFFER

Offset en el búfer de transmisión "TXREF"

LEN_DATA

Longitud de los datos de parámetros que se transferirán (15 bytes)

EPCID_UID

Búfer para EPC-ID de 62 bytes, UID de 8 bytes o Handle-ID de 4 bytes
como máximo.
● La EPC-ID de 2-62 bytes se introduce al principio del búfer (la
longitud se describe mediante "LEN_ID")
● La UID de 8 bytes se introduce al principio del búfer ("LEN_ID = 8")
● La Handle-ID de 4 bytes debe introducirse en el elemento de Array
[5]-[8] ("LEN_ID = 8")
Valor predeterminado: 0x00 ≙ acceso no especificado a Singletag

LEN_ID

Longitud de EPC-ID / UID

TXREF

Datos de parámetros que deben escribirse

Tabla 4-220 Estructura del anexo de datos para el comando "FORMAT" en el direccionamiento normal

4774

Byte

1...8

9

10

11

12

13

Valor

0x00

0x06

0x03

0x00

INIT-Wert 0x00

14

15

MSB

LSB

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Tabla 4-221 Explicación sobre la estructura del anexo de datos para el comando "FORMAT"
Byte

Descripción

Byte 1...8

Reservado para el código de seguridad (debe tener un "0", pues SIMATIC RFID no
tiene código por el momento)

Byte 9

Longitud de los datos subsiguientes, en este caso 6

Byte 10

"0x03" fijo

Byte 11

"0x00" fijo

Byte 12

Valor de "INIT": con este valor se describe el área de datos del transpondedor (for‐
mato Hex).

Byte 13

"0x00" fijo

Byte 14

Tamaño de memoria del transpondedor (dirección final + 1; byte High, formato Hex)

Byte 15

Tamaño de memoria del transpondedor (dirección final + 1; byte Low, formato Hex)

Tabla 4-222 Tamaños de memoria de los transpondedores
Tipo de transpondedor

Tamaño de me‐
moria

Duración de INIT

08 00

aprox. 1 s

2 KB

MOBY U

RAM *)

32 KB

MOBY U

RAM *

80 00

aprox. 1,5 s

44 bytes

MOBY D

I-Code 1

00 2C

aprox. 0,4 s

112 bytes

MOBY D

ISO I-Code SLI

00 70

aprox. 0,5 s

256 bytes

MOBY D

ISO Tag-it HF-I

01 00

aprox. 1 s

992 bytes

MOBY D

ISO my-d

03 E0

aprox. 3 s

2000 bytes

MOBY D

FRAM

07 D0

aprox. 3 s

20 bytes

RF300

EEPROM

00 14

aprox. 0,2 s

8 KB

RF300

FRAM *)

20 00

0,9 s

32 KB

RF300

FRAM *)

80 00

3,6 s

64 KB

RF300

FRAM *)

FF 00

7,2 s

)

*) La memoria OTP no se inicializa con este comando.

Tabla 4-223 PUT (no en RF61xR/RF68xR)
Parámetro

Valor / descripción

CMD

0x65

OFFSETBUFFER

Offset en el búfer de transmisión "TXREF"

LEN_DATA

Longitud de los datos de parámetros que se transferirán

TXREF

Datos de parámetros que deben escribirse

Programación del PLC
Manual de programación y manejo, 11/2019

4775

Instrucciones
4.1 Instrucciones
Tabla 4-224 Estructura de datos del comando PUT
Put_SET_ANT

Mode

Activa y desactiva la antena del lector.

RF200/RF300, MOBY U/D:
● 0x01 ≙ antena conectada
● 0x02 ≙ antena desconectada
RF600:
● Bit 0 ≙ ANT 1 / antena interna (1 = conectada)
● Bit 1 ≙ ANT 2 / antena externa (1 = conectada)
● Bit 4 ≙ TagList (0 = inicializar, 1 = continuar con lista existente)

Length
Put_END

3
Finaliza la comunicación con un transpondedor (solo para MOBY U).

UID

UID del transpondedor

Mode

● 0x00 ≙ finalizar procesamiento del transpondedor
● 0x01 ≙ pausa en el procesamiento del transpondedor

Length

11

Tabla 4-225 WRITE-ID (solo en RF61xR/RF68xR)
Parámetro

Valor / descripción

CMD

0x67

OFFSETBUFFER

Offset en el búfer de transmisión "TXREF"

EPCID_UID

EPC-ID hasta el momento
0x00 ≙ acceso no especificado a Singletag

LEN_ID

Longitud de la EPC-ID que había hasta ahora (2-62 bytes)
0x00 ≙ acceso no especificado a Singletag

LEN_DATA

Longitud de la nueva EPC-ID

PSWD

Contraseña
0x00 ≙ sin contraseña

TXREF

EPC-ID nueva

Tabla 4-226 KILL-TAG (solo en RF61xR/RF68xR)
Parámetro

Valor / descripción

CMD

0x6A

EPCID_UID

EPC-ID
0x00 ≙ acceso no especificado a Singletag

4776

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Valor / descripción

LEN_ID

Longitud de la EPC-ID que había hasta ahora (2-62 bytes)
0x00 ≙ acceso no especificado a Singletag

PSWD

Contraseña
debe ser ≠ 0x00

Tabla 4-227 LOCK-TAG-BANK (solo en RF61xR/RF68xR)
Parámetro

Valor / descripción

CMD

0x79

EPCID_UID

EPC-ID
0x00 ≙ acceso no especificado a Singletag

LEN_ID

Longitud de EPC-ID (2-62 bytes)
0x00 ≙ acceso no especificado a Singletag

PSWD

Contraseña
0x00 ≙ sin contraseña

LOCK_TAG_
BANK_ACTION

Véase la norma EPC

LOCK_TAG_
BANK_MASK

Véase la norma EPC

Tabla 4-228 EDIT-BLACKLIST (solo en RF61xR/RF68xR)
Parámetro

Valor / descripción

CMD

0x7A

EDIT_BLACKLIST_MODE

● 0x00 ≙ agregar EPC-ID
● 0x01 ≙ agregar todos los transpondedores "Observed"
● 0x02 ≙ borrar EPC-ID
● 0x03 ≙ borrar todo

EPCID_UID

EPC-ID
0x00 ≙ acceso no especificado a Singletag 1)

LEN_ID

Longitud de EPC-ID (2-62 bytes)
0x00 ≙ acceso no especificado a Singletag

1)

Si en "EDIT_BLACKLIST_MODE" se ha seleccionado = 0x00 o 0x02, debe indicarse la EPC-ID junto
con la longitud de la ID.

Tabla 4-229 GET-BLACKLIST (solo en RF61xR/RF68xR)
Parámetro

Valor / descripción

CMD

0x6C

OFFSETBUFFER

Offset en el búfer de recepción "RXREF"

RXREF

ID de lista negra leídas

Programación del PLC
Manual de programación y manejo, 11/2019

4777

Instrucciones
4.1 Instrucciones
Tabla 4-230 Resultado de GET-BLACKLIST
Nombre

Tipo

Comentario

NUM_IDS

INT

Number of MDS

TAG_DATA

IID_IN_I_80[
n]

TAG_DATA[1]

IID_IN_I_80

Reserved

SINT

ID_Len

SINT

Length of EPC ID

EPC_ID

SINT[1..62]

EPC-ID

TAG_DATA[2]

IID_IN_I_80

...

...

TAG_DATA[n]

IID_IN_I_80

Tabla 4-231 READ-CONFIG
Parámetro

Valor / descripción

CMD

0x61

OFFSETBUFFER

Offset en el búfer de recepción "RXREF"

RXREF

Parámetros Reset leídos

Tabla 4-232 WRITE-CONFIG
Parámetro

Valor / descripción

CMD

0x78

OFFSETBUFFER

Offset en el búfer de transmisión "TXREF"

LEN_DATA

Longitud de los datos de parámetros

CONFIG

● 0x01 ≙ reset de comunicación, sin datos de configuración
● 0x02 ≙ sin reset de comunicación, datos de configuración que enviar
● 0x03 ≙ reset de comunicación, datos de configuración que enviar
● 0x80 ≙ sin reset de comunicación, parámetros individuales

TXREF

4778

Datos de configuración que enviar

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Estructura del anexo de datos de configuración de "WRITE-CONFIG"
Para RF61xR/RF68xR y RF18xC:
● Si CONFIG = 0x01:
Reset_Reader; LEN_DATA = 0x00
● Si CONFIG = 0x03:
Para la sustitución del módulo es posible leer todos los datos de configuración del CM/lector
y guardarlos en el controlador. Cuando se sustituye el módulo, estos datos pueden
cargarse del controlador al lector. Para ello se utilizan los comandos "WRITE-CONFIG"
(0x03) para la descarga al CM/lector y "READ-CONFIG" para la carga del lector.
Byte

Nombre

0

Identificador de estructura (2 bytes)

2

Indicador de longitud (4 bytes)
Longitud del identificador de versión y el bloque de parámetros

6

Identificador de versión (4 bytes)
Este identificador permite identificar la configuración de forma unívoca.
Se trata de un sello de tiempo en formato Linux.
El sello de tiempo indica cuántos segundos han transcurrido desde el
1 de enero de 1979 a las 00:00 horas. El identificador se asigna al
generar una configuración.

10 ... fin de "DATA"

Bloque de parámetros

LEN_DATA = tamaño de los datos de configuración + 6 bytes
● Si CONFIG = 0x80:
La estructura del búfer de transmisión equivale a la del bloque "Set_Param (Página 4743)".
LEN_DATA = 0x08

Para RF200, RF300, RF620R, RF630R, MOBY D/U
Tabla 4-233 Para RF200, RF300, RF620R, RF630R, MOBY D/U si "CONFIG = 0x03"
Byte

1

2...5 1)

6 2)

7...8

9

10

11

12

13...14

15

16

Valor

0x04

0x00

0x0A
0x05

0x00

scan‐
ning_
time

param

op‐
tion_1

distance_
limiting

Número
de trans‐
pondedo‐
res

field_on_
control

field_on_
time

1)

En el módulo de comunicación RF180C V2.2 y superior en combinación con MOBY U, el byte 4 está preasignado a la
semana natural y el byte 5, al año.

2)

En los lectores indicados en el título de la tabla se utiliza el valor "0x0A" (LEN_DATA = 0x10) en el byte 6. Para la migración
MOBY I a lectores RF300 de segunda generación se utiliza el valor "0x05" (LEN_DATA = 0x0B).

Programación del PLC
Manual de programación y manejo, 11/2019

4779

Instrucciones
4.1 Instrucciones

4780

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Tabla 4-234 Bytes del parámetro "PARAM"
Byte

Valor

Sistema
RFID

Significado

Byte 9

scanning_
time

RF200,
RF300,
MOBY D

0x00 (reservado)

RF600

"scanning_time" describe el perfil radioeléctrico conforme a EPC Global. En función
del país en el que desee utilizar el lector deberá ajustarse la norma correcta. Antes
de seleccionar un perfil radioeléctrico infórmese de la norma y variante de lector
aplicables a su país.
Valor

Descripción

ETSI

FCC

CMIIT

0x00

No se ha seleccionado ningu‐
na norma, se emite el error
"0x15"

--

--

--

0x01

El lector trabaja con el perfil
radioeléctrico predetermina‐
do. Valor del perfil radioeléc‐
trico predeterminado:

ETSI nuevo

FCC

China

0x02

ETSI nuevo: UE, EFTA, Tur‐
quía;
esquema de 4 canales

X

--

--

0x03

ETSI viejo: UE, EFTA, Tur‐
quía;
los lectores que han entrado
en funcionamiento después
del 31/12/2009 no pueden uti‐
lizarse con este ajuste.

X

--

--

0x04

FCC: p. ej. EE.UU., Canadá,
México

--

X

--

0x05

reservado

--

--

--

0x06

China

--

--

0x07

Tailandia

--

X

--

0x08

Brasil

--

X

--

0x09

Corea del Sur

--

X

--

0xC0

India

X

--

--

Nota: si se seleccionan perfiles de países distintos a los definidos para la corres‐
pondiente variante de lector, se acusa el mensaje de error "09".
MOBY U

"scanning_time" describe el tiempo de espera del transpondedor. Si el transponde‐
dor recibe otro comando antes de que finalice el "scanning_time", este puede pro‐
cesarse inmediatamente. Si el transpondedor recibe un comando una vez finalizado
el "scanning_time", su procesamiento se retarda según el "sleep_time" del trans‐
pondedor.
Solo debe ajustarse un "scanning_time" si
● el transpondedor se procesa con varios comandos y
● la operación de procesamiento debe finalizarse en un tiempo mínimo.
Tenga en cuenta que el "scanning_time" influye en la duración de la batería. Cuanto
mayor sea el "scanning_time" ajustado, menos durará la batería. Encontrará cálcu‐
los más exactos en el manual de configuración, montaje y servicio técnico de MOBY
U.
Valor

Programación del PLC
Manual de programación y manejo, 11/2019

Descripción

4781

Instrucciones
4.1 Instrucciones
Byte

4782

Valor

Sistema
RFID

Significado
0x00

sin tiempo de espera (predeterminado)

0x01

7 ms de tiempo de espera

0x02

14 ms de tiempo de espera

...

...

0xC8

1400 ms de tiempo de espera

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Byte

Valor

Sistema
RFID

Significado

Byte 10

param

RF200,
RF300,
MOBY D,
MOBY U

Ajuste del modo de operación RFID y control de presencia
Bit

Descripción

7 ... 5

Control de presencia y control del transpondedor:
● 0x00 = funcionamiento sin control de presencia
● 0x01 = funcionamiento con control de presencia
La antena está conectada permanentemente.
● 0x04 = funcionamiento sin control de presencia
La antena está desconectada. La antena solo se conecta si se envía
uno de los siguientes comandos: Read, Write, Init, Estado de la
variable

4

Debe ajustarse con el valor "0x00".

3 ... 0

Modo de operación RFID:
● 0x05 = sin modo Multitag con módulo de comunicación ASM 475, ASM
456, RF170C, RF180C
● 0x06 = con modo Multitag con módulo de comunicación ASM 475,
ASM 456, RF170C, RF180C
Solo en MOBY U

Valor del bit 3 ... 0
Valor
del bit
3 ... 0

Modo de opera‐ Descripción
ción

0x00

reservado

reservado para el ajuste con interruptor o parametriza‐
ción GSD

0x01

MOBY I

Si un lector RF300 de 2.ª generación debe utilizarse en
modo MOBY I hay que ajustar el valor = 0x01.
"INIT" corto (solo se transfieren al lector los parámetros
"param" y "option_1").

0x05

MOBY U/D,
ASM 475, ASM 456, RF170C, RF180C
RF200, RF300
- sin modo Mul‐
titag

0x06

MOBY U - con
modo Multitag
(FB 55)

● Parametrización con Multitag > 1 y más de un
transpondedor en el campo de la antena: debe
proporcionarse la ID de transpondedor al parámetro
UID.
● Parametrización con Multitag = 1 y un solo
transpondedor en el campo de la antena: puede
proporcionarse al parámetro UID la ID de
transpondedor correcta o bien cero.
ASM 475, ASM 456, RF170C, RF180C

0x07

MOBY D,
RF300 - con
modo Multitag
(FB 55)

ASM 475, ASM 456, RF170C, RF180C

Nota: recuerde que tras cambiar los parámetros es necesario reiniciar el CM.
RF600

Programación del PLC
Manual de programación y manejo, 11/2019

Ajuste del modo de operación RFID

4783

Instrucciones
4.1 Instrucciones
Byte

Valor

Sistema
RFID

Significado
Bit

Descripción

7 ... 5

Control de presencia y control del transpondedor:
● 0x00 = funcionamiento sin control de presencia
● 0x01 = funcionamiento con control de presencia
La antena está conectada permanentemente.

4

Debe ajustarse con el valor "0x00".

3 ... 0

Modo de operación RFID:
● 0x04 = modo ISTM
● 0x05 = modo Singletag
● 0x06 = con modo Singletag (UID = 0x00), UID de 4 bytes de la HandleID de 8 bytes o
con modo Multitag, UID de 4 bytes como Handle-ID para accesos a
transpondedores con una EPC-ID de cualquier longitud
● 0x07 = con modo Singletag (UID = 0x00), UID de 8 bytes o
con modo Multitag, UID de 8 bytes de los bytes 5-12 de la EPC-ID de
12 bytes de longitud

Nota: recuerde que tras cambiar los parámetros es necesario reiniciar el CM.
Byte 11

option_1

RF200,
RF300,
MOBY D,
MOBY U

Este byte está codificado bit a bit. Su valor predeterminado es "B#16#0". Este byte
permite realizar controles especiales en el CM/lector.

RF600

Este byte está codificado bit a bit. Su valor predeterminado es "B#16#0".

Bit

Descripción

1

0x01 = el parpadeo del LED "ERR" se resetea con un "WRITE-CONFIG".
En RF200/RF300 se resetea de este modo el parpadeo del LED "ERR" en
el módulo de comunicación y en el lector.

Bit

Descripción

1

0x01 = el parpadeo del LED "ERR" del módulo de comunicación se rese‐
tea con un "WRITE-CONFIG".

2

● 0x00 = OFF
● 0x01 = ON

4784

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Byte

Valor

Sistema
RFID

Significado

Byte 12

distance_
limiting

RF200

0x00 (reservado)

RF300
(solo
RF380R)

Nota: este parámetro está dirigido a usuarios profesionales. Siemens recomienda a
los usuarios no profesionales utilizar el valor predeterminado.
Lectores de 1.ª generación: con este parámetro se puede modificar la potencia de
emisión (potencia de salida) del lector RF380R de 1.ª generación
(6GT2801-3AB10). Recuerde que la modificación de la potencia de emisión afecta
al registro dentro del rango límite (distancia de trabajo inferior/superior), y a la dis‐
tancia mínima necesaria entre RF380R colindantes.
Un ajuste fuera del rango de valores indicado provoca que se ajuste el valor prede‐
terminado (1,25 W). En este caso no se emite ningún mensaje de error debido a
razones de compatibilidad.
Lectores de 2.ª generación: este ajuste no es necesario para un lector RF380R de
2.ª generación (6GT2801-3BAx0), ya que los límites de potencia se optimizan au‐
tomáticamente en función de la distancia entre el lector y el transpondedor. Aún así,
por motivos de compatibilidad este ajuste puede activarse. Recuerde que los valores
"0x02", "0x03" y "0x04" provocan una pérdida de potencia aproximada del 50 %.
Son posibles los siguientes ajustes:

RF600

Valor

Potencia de emisión

0x02

0,5 W

0x03

0,75 W

0x04

1,0 W

0x05

1,25 W (predeterminado)

0x06

1,5 W

0x07

1,75 W

0x08

2,0 W

Con "distance_limiting" se ajusta la potencia de emisión del lector.
%LW







 







$17
LQWDQWHQD
)

$17
DQWHQDH[W
)

En el ajuste predeterminado, la ANT 1 se utiliza con la potencia de emisión prede‐
terminada.
Valor

RF630R
Potencia de
emisión

RF620R
Potencia radiante (antena interna)
ETSI

dBm / (mW)

CMIIT
dBm / (mW)
ERP

dBm / (mW)

0x00

18 / (65)

18 / (65)

20 / (105)

18 / (65)

18 / (65)

0x01

19 / (80)

19 / (80)

21 / (130)

19 / (80)

19 / (80)

...

Programación del PLC
Manual de programación y manejo, 11/2019

FCC

dBm / (mW) dBm / (mW)
ERP
EIRP

RF620R
Potencia de
emisión

...

...

...

...

...

0x09

27 / (500)

27 / (500)

29 / (795)

27 / (500)

27 / (500)

0x0A

27 / (500)

28 / (630)

30 / (1000)

28 / (630)

27 / (500)

0x0B
(...F)

27 / (500)

29 / (800)

31 / (1260)

29 / (800)

27 / (500)

4785

Instrucciones
4.1 Instrucciones
Byte

Valor

Sistema
RFID

Significado

MOBY U

Limitación del alcance
Potencia de emisión nor‐
mal 1)

1)

MOBY D

Potencia de emisión reducida

0x05 = 0,5 m

0x85

0x0A = 1,0 m

0x8A

0x0F = 1,5 m

0x8F

0x14 = 2,0 m

0x91

0x19 = 2,5 m

0x99

0x1E = 3,0 m

0x9E

0x23 = 3,5 m

0xA3

Ajuste la potencia de emisión reducida
cuando haya varios lectores próximos en‐
tre sí o cuando los transpondedores que
hay cerca de un lector no deban detectar‐
se o deban detectarse más tarde.
Inconveniente: el lóbulo del campo se re‐
duce, por lo que se dispone de menos
tiempo para la comunicación o bien debe
posicionarse con más precisión.

Son posibles valores intermedios en incrementos de 0,1 m (0x02, 0x03, ..., 0x23)

Potencia de emisión de 0,5 W a 10 W en incrementos de 0,25 W
Solo efectivo en SLG D10S; en SLG D11S / D12S la potencia está ajustada a 1 W
(04 hex) y no puede modificarse.

Bytes
13...14

Número de
transpon‐
dedores

RF300

Valor

Potencia de emisión

0x02

0,5 W

...

...

0x10

4,0 W (predeterminado)

...

...

0x28

10,0 W

El lector está concebido fundamentalmente para el modo Multitag, que sin embargo
todavía no está aprobado.
Número máximo de transpondedores que pueden procesarse en el campo de an‐
tena paralelamente. Valores permitidos en la actualidad "1".

RF600

Número de transpondedores esperados en el campo de la antena.
Valores admitidos:
● 0x01 ... 0x28 para RF620R
● 0x01 ... 0x50 para RF630R con 2 antenas (SET-ANT = 0x03)
● 0x01 ... 0x28 para RF630R con 1 antena (SET-ANT = 0x01 o SET-ANT = 0x02)
El valor indicado aquí define el número previsto de transpondedores que deben
leerse (EPC-ID) en el Inventory.
Este valor no limita el número de transpondedores que deben editarse en el campo
de antena. Para permitir un Inventory productivo de transpondedores en el campo
de antena, los valores indicados aquí no deben diferir en más del 10 % aproxima‐
damente del número máximo de transpondedores previstos en el campo de antena.

4786

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Byte

Valor

Sistema
RFID

Significado

Byte 15

field_on_
control

RF200,
RF300,
MOBY D

0x00 (reservado)

RF600

Con "field_ON_control" se ajusta la velocidad de comunicación (rápida/lenta) y Tag
Hold (ON/OFF).
Bit

Descripción

0 ... 1

Velocidad
Por medio de la velocidad se preparan parametrizaciones del lector opti‐
mizadas en función de la aplicación:
● 0x00 = detección rápida
● 0x02 = detección más lenta y segura

2 ... 4

reservado

5

Tag Hold
● 0x00 = OFF
● 0x01 = ON

6

ScanningMode (relevante en modo Multitag):
● 0x00 = modo Multitag normal sin ScanningMode (incluido
"repeat_command")
● 0x01 = ScanningMode
El CM/lector también acepta comandos de lectura sin especificar (UID
= 0x00) cuando hay varios transpondedores en el campo de la antena.
Si se pone el bit 6 a 0x01, el lector se prepara para el uso de
"ScanningMode" en modo Multitag.

7
MOBY U

reservado

Modo de operación BERO; activación y desactivación automáticas del campo de la
antena. El modo de operación BERO interfiere en el comando "Activar/desactivar
antena".
Valor

Descripción del modo de operación

0x00

sin BERO; no hay sincronización del lector

0x01

uno o dos BERO
Los BERO tienen una combinación lógica O entre sí. Mientras dure la
activación de un BERO el campo de antena estará activado.

0x02

uno o dos BERO
El primer BERO activa el campo de antena y el segundo BERO lo desac‐
tiva. Si hay dos BERO y está parametrizado "field_ON_time", el campo de
antena se desactivará automáticamente si el segundo BERO no conmuta
dentro de este tiempo de BERO.
Si no está parametrizado "field_ON_time", el campo de antena permanece
activado hasta que se activa el segundo BERO.

0x03

Activar la sincronización de lectores mediante conexión por cable
Encontrará más información en el manual de configuración, montaje y
servicio técnico de MOBY U.

Programación del PLC
Manual de programación y manejo, 11/2019

4787

Instrucciones
4.1 Instrucciones
Byte

Valor

Sistema
RFID

Significado

Byte 16

field_on_
time

RF200

Tipo de transpondedor

RF300

Selección de los tipos de transpondedor utilizados

0x01

Cualquier transpondedor ISO

Los lectores de 2.ª generación utilizan siempre con el valor "0x01"/"0x31" (ISO
15693 general) los comandos ISO que permiten conseguir el máximo rendimiento
en cada transpondedor. En los lectores de 1.ª generación, el valor "0x01" activa el
modo ISO general con comandos ISO rudimentarios. Por lo general, este ajuste
limita el rendimiento, aunque en principio el servicio está garantizado con cualquier
transpondedor compatible con ISO.
Los tipos de chip de transpondedor indicados en el capítulo "Transpondedores
RF300" del manual de sistema "SIMATIC RF300" admiten estos comandos.
Se pueden ajustar los siguientes valores:

4788

Valor

Tipo de trans‐
pondedor

Descripción

0x00

RF300
(RF3xxT)

Para todos los transpondedores del tipo "RF3xxT"

0x01

ISO 15693 ge‐
neral

Cualquier transpondedor ISO

0x03

ISO 15693
(Infineon, MDS
D3xx)

p. ej. MDS D324, D339

0x04

ISO 15693
(Fujitsu - 2 kB,
MDS D4xx)

p. ej. MDS D421, D422, D423, D424, D425, D426,
D428, D460

0x05

ISO 15693
(NXP, MDS
D1xx)

p. ej. MDS D100, D124, D126, D139, D150, D165

0x06

ISO 15693
p. ej. MDS D200
(TI, MDS D2xx)

0x07

ISO 15693
(STM, MDS
D261)

p. ej. MDS D261

0x081)

ISO 15693
(Fujitsu - 8 kB,
MDS D5xx)

p. ej. MDS D521, D522, D524, D525, D528

0x101)

RF300
(RF3xxT)

Para todos los transpondedores del tipo "RF3xxT"

0x201)

ISO 14443
(MOBY E,
E6xx)

p. ej. MDS E600, E611, E623, E624

0x311)

General Mode
(ISO, RF300,
MOBY E)

Activación del "General Mode" para el procesamiento de
los tipos de transpondedor RF300, ISO 15693 e ISO
14443. Por lo general, con este ajuste en principio el
servicio está garantizado con cualquiera de los trans‐
pondedores compatibles. Si están activados el modo
ISO y el modo RF300, es posible procesar un transpon‐

Activación del modo ISO general con comandos ISO
rudimentarios. Por lo general, con este ajuste en princi‐
pio el servicio está garantizado con cualquier transpon‐
dedor compatible con ISO.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Byte

Valor

Sistema
RFID

Significado
dedor como máximo hasta la dirección "8192", aunque
el transpondedor RF300 tenga una memoria de 64 KB.
Recuerde que es posible combinar diferentes ajustes y familias de transpondedores
(p. ej. ISO 15693 general + RF300). En este caso hay que combinar los correspon‐
dientes valores hex (ISO 15693 general [0x01] + RF300 [0x10] = 0x11).
Nota:
● ISO 15693: no se soportan las siguientes funciones especiales ISO:
–

AFI (Application Family Identifier)

–

DSFID (Data Storage Format Identifier)

–

Funciones adicionales específicas de chip como EAS, comandos Kill, etc.

● ISO 15693: los lectores de 1.ª generación soportan con "TAG_TYPE(ftim)=
0x01" los comandos ISO "Inventory", "ReadSingleBlock", "WriteSingleBlock",
"LockBlock," "GetSystemInformation" y para Multitag también "Select" y
"ResetToReady".
● Si un transpondedor desconocido hasta ese momento no puede identificarse a
partir los parámetros anteriores, se emite un mensaje de error ("error_MOBY=
0x0D").
● Los parámetros no permitidos se rechazan con el mensaje de error
("error_MOBY= 0x15").
1)

RF600

Solo afecta a los lectores de 2.ª generación.

Variante ETSI/para India: 0x00 ... 0x0F
Modificar la asignación de canales en el Modificar la asignación de canales en el
perfil radioeléctrico ETSI ("scanning_ti‐ perfil radioeléctrico para India ("scan‐
ning_time = 0xC0"):
me = 0x02"):
%LW

       
UHV

0+]

%LW

       
UHV

0+]
0+]
0+]

0+]
0+]
0+]
0+]

0x00: ajuste predeterminado; los canales del lector se utilizan en modo de cuatro
canales.
Observación: el ajuste "0x0F" es idéntico a "0x00".
Mediante los bits 0...3 del byte "field_ON_time" es posible crear un esquema (de
frecuencia) de canales por si deben utilizarse varios lectores colindantes. Los lec‐
tores que utilizan canales distintos se interferirán menos.
En caso de que solo se utilice 1 canal por lector, este debe mantener una pausa de
100 ms (a partir de ETSI EN 302 208 V1.2.1) cada 4 segundos. Con ello se consigue
una menor pérdida de rendimiento en aplicaciones críticas en el tiempo en compa‐
ración con el modo de 2 a 4 canales de un lector.
En caso de que se utilicen de 2 a 4 canales por lector, este cambia a otro canal al
cabo de 0,1 segundos en modo de dos antenas y al cabo de 4 segundos en modo
de una antena. Si solo se ha seleccionado uno de los 4 canales, la norma obliga a
mantener una pausa de 100 ms cada 4 segundos.
Variante FCC y CMIIT: Normal: 0x00
MOBY U

Tiempo del modo de operación BERO (field_ON_control = 02)
Valor

Programación del PLC
Manual de programación y manejo, 11/2019

Descripción

4789

Instrucciones
4.1 Instrucciones
Byte

Valor

Sistema
RFID

MOBY D

Significado
0x00

La vigilancia de tiempo está desactivada. Para la desconexión de campo
se requiere el 2.º BERO.

0x01 ...
0xFF

1 ... 255 s de tiempo de conexión para el campo de antena del lector

Tipo de transpondedor
0 ... 255 Tipo de transpondedor
0x00

I-Code 1 (p. ej. MDS D139)

0x01

Transpondedor ISO

0x02

I-Code 1 y transpondedor ISO

0x03

ISO-my-D
(solo en SLG D10S; en SLG D11S / D12S se parametriza el valor "0x01"
para ISO-my-D)

0x04

ISO-FRAM
(solo en SLG D11S / D12S; en SLG D10S se parametriza el valor "0x01"
para ISOFRAM)

Comandos avanzados para sistemas de lectura ópticos (MV400/MV500)
El comando "WRITE-CONFIG"
Durante la inicialización ("INIT"), el perfil Ident ejecuta automáticamente el comando "WRITECONFIG". Los valores de parámetros del comando "WRITE-CONFIG" dependen de si el perfil
Ident se utiliza con o sin módulo de comunicación.
Tabla 4-235 WRITE-CONFIG
CMD

OFFSET
BUFFER

LEN_DATA

CONFIG

TXREF

0x78

Offset en el búfer
de transmisión
"TXREF"

Longitud de los da‐ ● 0x01 ≙ reset de
tos de parámetros
comunicación sin datos
de configuración
(LEN_DATA = 0)

Datos de configura‐
ción que enviar

● 0x03 ≙ reset de
comunicación con datos
de configuración que
enviar

Tenga en cuenta que el reset de comunicación sin datos de configuración (CONFIG = 0x01)
solo puede utilizarse si el lector se utiliza sin módulo de comunicación vía PROFINET IO. El
reset sin datos de configuración equivale al comando "INIT" sin selección del programa.

4790

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Estructura del anexo de datos de configuración de "WRITE-CONFIG"
Tabla 4-236 MV400 si "CONFIG = 0x03"; "LEN_DATA = 0x10"
Byte

1

2...5

6

7...8

9

10

11

12 ... 13 14

15

16

Valor

0x04

0x00

0x0A

0x00

0x00

0x25

0x02

0x00

0x00

0x00 ... 0x0F 1)

1)

0x01

0x00: "INIT" sin selección de programa
0x01 ... 0x0F: número del programa que debe iniciarse ("INIT" con selección de programa)

El comando "PHYSICAL-WRITE"
Los sistemas de lectura ópticos MV400/MV500 disponen de otros comandos que pueden
transferirse con el comando "PHYSICAL-WRITE".
Tabla 4-237 PHYSICAL-WRITE
CMD

OFFSET
BUFFER

ADDR_TA LEN_DATA
G

0x71

Offset en
el búfer
de trans‐
misión
"TXREF"

0x0000

TXREF

Longitud de los datos que deben trans‐ Subcomando con datos que debe transferirse al
ferirse al lector:
lector. El primer "SINT" contiene el identificador
del comando:
● 0x02

● 0x01 = cambio de programa

● 0x01

● 0x02 = activar lectura del número de
programa

● Longitud de Matchstring + 3

● 0x03 = escribir Matchstring

● 0x01

● 0x04 = activar lectura de Matchstring

● 0x01

● 0x05 = activar bit DISA

● 0x01

● 0x06 = desactivar bit DISA

● Longitud total en datos de usuario
XMATCH + 4

● 0x07 = escribir Matchstring síncrono al
disparo (XMATCH)

● 0x07

● 0x08 = activar Digital Out

Tabla 4-238 Área de datos del comando "TXREF" identificador del comando 0x01 (cambio de
programa)
Dirección

Valor

Significado

0x0000

0x01

Identificador del comando "Cambio de programa"

0x0001

0x00 ... 0x0F

Número del programa

Tabla 4-239 Área de datos del comando "TXREF" identificador del comando 0x02 (activar lectura del
número de programa)
Dirección

Valor

Significado

0x0000

0x02

Identificador del comando "Leer número de pro‐
grama"

Programación del PLC
Manual de programación y manejo, 11/2019

4791

Instrucciones
4.1 Instrucciones
Tabla 4-240 Área de datos del comando "TXREF" identificador del comando 0x03 (escribir Matchstring)
Dirección

Valor

Significado

0x0000

0x03

Identificador del comando "Escribir Matchstring"

0x0001

0x00...0xFF

Longitud del byte High de Matchstring

0x0002

0x00...0xFF

Longitud del byte Low de Matchstring

0x0003

--

Primer carácter del Matchstring

...

...

...

n+2

--

Carácter (n-1) del Matchstring

n+3

--

Carácter n del Matchstring

Tabla 4-241 Área de datos del comando "TXREF" identificador del comando 0x04 (activar lectura de
Matchstring)
Dirección

Valor

Significado

0x0000

0x04

Identificador del comando "Leer Matchstring"

Tabla 4-242 Área de datos del comando "TXREF" identificador del comando 0x05 (activar bit DISA)
Dirección

Valor

Significado

0x0000

0x05

Identificador del comando "Activar bit DISA"

Tabla 4-243 Área de datos del comando "TXREF" identificador del comando 0x06 (desactivar bit DISA)
Dirección

Valor

Significado

0x0000

0x06

Identificador del comando "Desactivar bit DISA"

Tabla 4-244 Área de datos del comando "TXREF" identificador del comando 0x07 (XMATCH)
Dirección

Valor

Significado

0x0000

0x07

Identificador del comando
"XMATCH"

0x0001

0x00

Reservado

0x0002

Encontrará información más detalla‐
da en el manual "SIMATIC MV420 /
SIMATIC MV440" o "SIMATIC
MV500".

Datos de usuario XMATCH

…
0xN

Tabla 4-245 Área de datos del comando "TXREF" identificador del comando 0x08 (activar Digital Out)

4792

Dirección

Valor

Significado

0x0000

0x08

Identificador del comando "Activar Digital Out"

0x0001

0x01...0x04

Número de la señal externa lógica. Equivale a
"EXT_1", "EXT_2", "EXT_3" y "EXT_4".

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Dirección

Valor

Significado

0x0002

0x00...0x02

Nivel de la señal
● 0x00: poner nivel a "low" estáticamente.
● 0x01: poner nivel a "high" estáticamente.
● 0x02: poner nivel a "high" para el tiempo de
impulso configurado.

0x0003

0x01...0x07

Tipo de operación lógica
● 0x01: "O" lógica
● 0x02: "Y" lógica
● 0x03: "O exclusiva" lógica
● 0x04: sin operación lógica
● 0x05: "O no" lógica
● 0x06: "Y no" lógica
● 0x07: "O no exclusiva" lógica

0x0004

0x00...0x05

Señal lógica con la que se realiza la operación.
Si el tipo de operación lógica es 0x4, el parámetro
es irrelevante.
● 0x00: señal lógica "IN_OP"
● 0x01: señal lógica "TRD"
● 0x02: señal lógica "RDY"
● 0x03: señal lógica "READ"
● 0x04: señal lógica "MATCH"
● 0x05: señal lógica "NOK"

0x0005

0x00

Reservado, debe ser 0x00 para preservar la com‐
patibilidad con versiones posteriores.

0x0006

0x00

Reservado, debe ser 0x00 para preservar la com‐
patibilidad con versiones posteriores.

El comando "PHYSICAL-READ"
El comando "PHYSICAL-READ" se utiliza para las funciones siguientes:
● Leer códigos
● Comando posterior a "Activar lectura del número de programa" para leer el número de
programa
● Comando posterior a "Activar lectura de Matchstring" para leer el Matchstring

Programación del PLC
Manual de programación y manejo, 11/2019

4793

Instrucciones
4.1 Instrucciones
Tabla 4-246 PHYSICAL-READ
CMD

OFFSET
BUFFER

ADDR_TA LEN_DATA
G

RXREF

0x70

Offset en
el búfer
de trans‐
misión
"RXREF"

0x0000

Longitud de los datos que debe reco‐
ger el lector:

Datos recogidos por el lector:

● ≥ longitud de código +2

● Datos de código

● = 0x01

● Número de programa

● ≥ longitud de Matchstring +2

● Matchstring

Efecto de los comandos
Los comandos utilizados tienen el efecto siguiente:
● Los parámetros de entrada "INIT" y "SRESET" interrumpen la ejecución de comandos
dentro del módulo de comunicación/lector.
● El aviso de finalización que sigue a "INIT" o "SRESET" ("DONE" o "ERROR") hace
referencia siempre al parámetro de entrada "INIT" o "SRESET" y no al comando
interrumpido.
● El parámetro de entrada "INIT" restablece la comunicación entre el perfil Ident y el módulo
de comunicación. Después del restablecimiento "duro" del módulo de comunicación, el
perfil Ident transfiere automáticamente el comando "WRITE-CONFIG" al módulo de
comunicación. Por este motivo es imprescindible que en el primer elemento del búfer de
comandos "CMDREF" esté incluido el comando "WRITE-CONFIG".
● El comando "WRITE-CONFIG" restablece todas las funciones dentro del módulo de
comunicación, a excepción de la comunicación.
● El parámetro "SRESET" interrumpe el comando en curso.

Procesamiento de comandos
Proceda del siguiente modo para procesar los comandos:
1. Escriba el parámetro "CMDREF" (Array [1…n]) con los comandos deseados.
El contenido de "CMDREF" = [1] está reservado para la inicialización. Se ejecuta cuando la
entrada "INIT" del perfil Ident se activa y "CMDSEL" = [1].
2. Transfiera los datos que deben escribirse al búfer de datos de transmisión "TXBUF".
3. Seleccione el comando que se ha escrito anteriormente (Array [1…n]) con el parámetro
"CMDSEL".
4. Ejecute el comando ("EXECUTE" = 1") por medio del parámetro "EXECUTE".
Espere hasta que el bit "BUSY = FALSE" y el bit "DONE = TRUE".
Ahora, el comando se ha ejecutado sin errores.
Cuando "ERROR = TRUE", prosiga con el punto 5. En caso contrario, prosiga con el punto
6.
5. Evalúe los errores ocurridos.
6. Desactive el bit "EXECUTE".
El siguiente diagrama muestra la secuencia temporal del perfil Ident. El inicio de un comando
se produce siempre con el flanco ascendente de "EXECUTE", "INIT" o "SRESET".

4794

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones






EXECUTE

DONE

BUSY

ERROR

Caso

La función o instrucción se inicia activando EXECUTE (EXECUTE = 1). Si la petición finaliza
correctamente (DONE = 1) hay que desactivar EXECUTE. Al mismo tiempo se desactiva
DONE.

Caso

EXECUTE se activa solo durante un ciclo. En cuanto BUSY está activado (y DONE desacti‐
vado) es posible volver a desactivar EXECUTE. Si la petición ha finalizado correctamente,
DONE se activa durante un ciclo.

①
②

Caso

El manejo es igual que el caso 1 pero con salida de error. En cuanto ERROR está activado,
en la salida STATUS se muestra el código de error concreto. ERROR y STATUS conservan
su valor mientras EXECUTE está activado.
Figura 4-30
Secuencia general del perfil Ident

③

Parametrizar un rearranque completo y un rearranque normal
Para rearrancar el módulo de comunicación y el lector debe activarse el parámetro "INIT". Con
el parámetro se parametrizan y sincronizan de nuevo el CM o el lector y el perfil Ident.
Se requiere un "INIT" después de:
● conectar o rearrancar el controlador SIMATIC (OB 100 / Arranque)
● conectar la tensión de alimentación en el CM/lector
● enchufar el lector en el CM
● interrumpir la comunicación PROFIBUS/PROFINET
● un mensaje de error emitido por el parámetro "STATUS"

Encadenamiento
Con el perfil Ident y el bloque "Advanced" existe la posibilidad de enviar comandos
encadenados. Los comandos encadenados se envían enteros al lector sin esperar el resultado
del primer comando. Esta función permite ejecutar diferentes comandos del transpondedor
con un solo inicio de comando.
Para ambos bloques está disponible un búfer de 100 comandos ("Array [1...n]" de
"IID_CMD_STRUCT"). En cada estructura de comandos hay un bit "Chained". Dicho bit debe

Programación del PLC
Manual de programación y manejo, 11/2019

4795

Instrucciones
4.1 Instrucciones
activarse para cada comando encadenado. En el último comando encadenado no debe
activarse este bit para que el bloque detecte que la cadena ha terminado.
Nota
La función de encadenamiento es específica del dispositivo
Compruebe si el dispositivo de identificación que utiliza soporta el encadenamiento.
En la fecha de publicación del presente manual, el encadenamiento solo se soporta en los
lectores RF61xR/RF68xR y en los módulos de comunicación ASM 456 y RF18xC.

Vista general de comandos
Tabla 4-247 Vista general de los comandos que pueden encadenarse
Comando

Código de comando

Descripción

HEX

ASCII

PHYSICAL-READ

0x70

'p'

Lee datos de un transpondedor / sistema de lectura
óptico indicando la dirección inicial física, la longitud y
la contraseña.

PHYSICAL-WRITE

0x71

'q'

Escribe datos en un transpondedor / sistema de lectu‐
ra óptico indicando la dirección inicial física, la longitud
y la contraseña.

READER-STATUS

0x74

't'

Lee el estado de un módulo de comunicación. Este
comando no puede ser el último de un encadenamien‐
to.

TAG-STATUS

0x73

's'

Lee el estado de un transpondedor.

INVENTORY

0x69

'i'

Solicita una lista de todos los transpondedores acce‐
sibles en ese momento dentro del alcance de la ante‐
na.

FORMAT

0x66

'f'

Inicializa el transpondedor.

PUT

0x65

'e'

Transfiere otros comandos no definidos en el estándar
del perfil normalizado. Para ello hay definida una es‐
tructura de datos adecuada a cada comando en el bú‐
fer de datos de transmisión.

WRITE-ID

0x67

‘g‘

RF61xR/RF68xR:
escribe una nueva EPC-ID en el transpondedor.

KILL-TAG

0x6A

‘j‘

RF61xR/RF68xR:
el transpondedor se desactiva de forma permanente.

LOCK-TAG-BANK

0x79

‘y‘

RF61xR/RF68xR:
Define una contraseña para el acceso al transponde‐
dor.

4796

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplo de una estructura de comandos
Tabla 4-248 Ejemplo de una estructura de 3 comandos (sin EPC-ID)
Comando

Parámetro

Valor

Descripción

Comando
1

IID_CMD_STRUCT[2].CMD

0x69

IID_CMD_STRUCT[2].ATTRIBUTES

0x80

Ejecución de un Inventory con la
duración de 2 Inventories.

IID_CMD_STRUCT[2].EXT_UHF.
INVENTORY.DURATION

2

IID_CMD_STRUCT[2].EXT_UHF.
INVENTORY.DUR_UNIT

1

IID_CMD_STRUCT[2].OPTIONS.CHAINED true
Comando
2

IID_CMD_STRUCT[3].CMD

0x70

IID_CMD_STRUCT[3].EXT_UHF.
MEM_BANK

3

IID_CMD_STRUCT[3].LEN_DATA

10

IID_CMD_STRUCT[3].ADDR_TAG

0

Lectura de 10 bytes del banco de
usuarios a partir de la dirección 0.

IID_CMD_STRUCT[3].OPTIONS.CHAINED true
Comando
3

IID_CMD_STRUCT[4].CMD

0x71

IID_CMD_STRUCT[4].EXT_UHF.
MEM_BANK

3

IID_CMD_STRUCT[4].LEN_DATA

10

IID_CMD_STRUCT[4].ADDR_TAG

20

Escritura de 10 bytes en el banco
de usuarios a partir de la direc‐
ción 20.

IID_CMD_STRUCT[4].OPTIONS.CHAINED false

Para el encadenamiento puede utilizarse todo el búfer "IID_CMD_STRUCT"
("IID_CMD_STRUCT[1...n]"). El principio de la cadena se ajusta mediante el parámetro
"CMDSEL".
Si en la cadena se ejecutan varios comandos con los que se devuelven datos, es posible
ajustar la posición de los datos en el búfer de recepción "RXREF" para cada comando
individual mediante el parámetro "IID_CMD_STRUCT[x].OFFSETBUFFER".
Nota
"IID_CMD_STRUCT[1]" reservado para "INIT"
En el perfil Ident, el parámetro "IID_CMD_STRUCT[1]" suele estar reservado para "INIT". Si
debe utilizarse "IID_CMD_STRUCT[1]" para un comando distinto, hay que asegurarse de que
con un "INIT" se escriban los parámetros Reset en este parámetro.

Programación del PLC
Manual de programación y manejo, 11/2019

4797

Instrucciones
4.1 Instrucciones

Repetición de comando
El perfil Ident soporta la repetición de comando (comando Repeat).
Nota
La repetición de comando es específica del dispositivo
Compruebe si el dispositivo de identificación que utiliza soporta la repetición de comando.
En la fecha de publicación del presente manual, la repetición de comando solo se soporta en
los lectores RF61xR/RF68xR (V3.0 y superior) y en los módulos de comunicación ASM 456
(V5.0 y superior) y RF18xC.

Funcionamiento
Tras un rearranque completo (o "INIT") del lector, el perfil Ident transfiere una sola vez el
comando o la cadena de comandos al lector. La transferencia de comandos se produce
automáticamente con el primer "EXECUTE" que se ejecuta. Este comando (o el último
comando o la cadena de comandos) se guarda siempre en la memoria intermedia del lector.
Cuando se inicia la repetición de comando, el comando almacenado en la memoria intermedia
del lector se ejecuta de nuevo y el o los resultados se transfieren al perfil Ident.
Asegúrese de que los comandos que deben repetirse tengan el valor 0 en "EPC-ID/UID". Si
EPC-ID tiene un valor distinto se genera un mensaje de error.

Repercusiones de la repetición de comando
● La transferencia de datos PROFIBUS/PROFINET se minimiza. Esta minimización
repercute positivamente sobre todo en configuraciones de bus grandes y velocidades de
transferencia lentas.
● El lector procesa cada transpondedor independientemente del perfil Ident. Esto es
ventajoso especialmente para aplicaciones de puerta, pues todos los transpondedores se
registran siempre con toda la velocidad de escaneo del lector.
● En los controladores que tienen pocos recursos del sistema para telegramas acíclicos, el
caudal de datos total aumenta considerablemente.

Vista general de comandos
Tabla 4-249 Vista general de los comandos que soportan una repetición de comando
Comando

4798

Código de comando

Descripción

HEX

ASCII

PHYSICAL-READ

0x70

'p'

Lee datos de un transpondedor / sistema de lectura
óptico indicando la dirección inicial física, la longitud y
la contraseña.

PHYSICAL-WRITE

0x71

'q'

Escribe datos en un transpondedor / sistema de lectu‐
ra óptico indicando la dirección inicial física, la longitud
y la contraseña.

READER-STATUS

0x74

't'

Lee el estado del lector.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Comando

Código de comando

Descripción

HEX

ASCII

TAG-STATUS

0x73

's'

Lee el estado de un transpondedor.

INVENTORY

0x69

'i'

Solicita una lista de todos los transpondedores acce‐
sibles en ese momento dentro del alcance de la ante‐
na.

FORMAT

0x66

'f'

Inicializa el transpondedor.

KILL-TAG

0x6A

‘j‘

RF61xR/RF68xR:

LOCK-TAG-BANK

0x79

‘y‘

RF61xR/RF68xR:

el transpondedor se desactiva de forma permanente.
Define una contraseña para el acceso al transponde‐
dor.

Iniciar repetición de comando
Existe la posibilidad de ejecutar la repetición de comando con o sin transferencia de
comandos. A continuación se describen los diferentes procedimientos.

Secuencia del comando Repeat con transferencia simultánea de comandos:
1. En su caso, active el modo de presencia (en RF61xR/RF68xR).
2. Inicie el comando con el parámetro de entrada "EXECUTE" y, simultáneamente,
"RPTCMD" activado. ①
El comando se procesa y el resultado se transfiere al perfil Ident.
El comando Repeat se activa en el lector.
3. El lector confirma la activación mediante el parámetro de salida "RPTACT" en el perfil Ident.
La confirmación se produce una vez se ha procesado el primer comando. ②
El lector ejecuta el comando automáticamente en cuanto se detecta un transpondedores en
el campo de la antena.
Si el lector no soporta el comando Repeat, "RPTACT" se mantiene inactivo. Si "EXECUTE"
se ejecuta de todos modos, tras un timeout de 10 segundos se emite el error "0xE7FE0900".
4. Los diferentes resultados pueden leerse activando repetidamente el parámetro de entrada
"EXECUTE". ③








EXECUTE

DONE

BUSY

RPTCMD

RPTACT

Programación del PLC
Manual de programación y manejo, 11/2019

4799

Instrucciones
4.1 Instrucciones
Figura 4-31

Secuencia del comando Repeat con transferencia simultánea de comandos

Secuencia del comando Repeat sin transferencia de comandos:
Esta secuencia solo es posible si ya se ha transferido el comando en cuestión.
1. En su caso, active el modo de presencia (en RF61xR/RF68xR).
2. Active el parámetro de entrada "RPTCMD". ①
El comando Repeat se activa en el lector.
3. El lector confirma la activación mediante el parámetro de salida "RPTACT" en el perfil Ident.
La confirmación se produce una vez se ha procesado el primer comando. ②
Si el lector no soporta el comando Repeat, "RPTACT" se mantiene inactivo. Si "EXECUTE"
se ejecuta de todos modos, tras un timeout de 10 segundos se emite el error "0xE7FE0900".
4. Los diferentes resultados pueden leerse activando repetidamente el parámetro de entrada
"EXECUTE". ③








EXECUTE

DONE

BUSY

RPTCMD

RPTACT

Figura 4-32

Secuencia del comando Repeat sin transferencia de comandos

Finalizar la repetición de comando
Existe la posibilidad de finalizar la repetición de comando revocando "RPTCMD" o bien
utilizando los comandos "INIT" o "SRESET". A continuación se describen los diferentes
procedimientos.

Finalizar el comando Repeat revocando "RPTCMD":
1. Desactive el parámetro de entrada "RPTCMD". ①
2. Recoja los acuses que pueda haber mediante el parámetro de entrada "EXECUTE". ②
El parámetro de salida "RPTACT" permanece activado por el lector mientras haya acuses.
3. Si ya no quedan acuses, el lector desactiva "RPTACT". ③

4800

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones








EXECUTE

DONE

BUSY

RPTCMD

RPTACT

Figura 4-33

Finalizar el comando Repeat revocando "RPTCMD" (finalización regular)

El lector desactiva el parámetro de salida "RPTACT". En determinadas circunstancias puede
suceder que "RPTACT" se desactive con retardo. Es decir, que no se desactive al mismo
tiempo que el "DONE" del último acuse. Si el bloque se inicia de nuevo ahora con "EXECUTE"
y "RPTACT" sigue activado aunque no queden resultados en el búfer, el bloque no se finaliza
(BUSY = 1). En este caso puede esperar hasta que se lean los siguientes transpondedores.
Como alternativa, el bloque puede finalizarse con "INIT" o "SRESET".








EXECUTE

DONE

BUSY

RPTCMD

RPTACT

Figura 4-34

Finalizar el comando Repeat revocando "RPTCMD" (el último comando queda pendiente)

Nota
Finalizar el comando Repeat con "INIT" o "SRESET"
Finalice el comando Repeat utilizando el parámetro de entrada "INIT" o "SRESET" si no se
sabe cuántos transpondedores se han procesado después de desactivar el parámetro de
entrada "RPTCMD".
Por lo general, un "SRESET" se ejecuta con mucha más rapidez, ya que no se lleva a cabo
ningún procedimiento de reset.

Programación del PLC
Manual de programación y manejo, 11/2019

4801

Instrucciones
4.1 Instrucciones
Finalizar el comando Repeat mediante "INIT":
1. Desactive el parámetro de entrada "RPTCMD" y active el parámetro de entrada "INIT". ①
Si no se desactiva "RPTCMD", el comando Repeat se activa de nuevo en el lector. Este
comportamiento provoca un mensaje de error, pues no hay ningún comando.
2. A causa del parámetro de entrada "INIT", el lector desactiva el parámetro de salida
"RPTACT". ②

Finalizar el comando Repeat mediante "SRESET":
1. Desactive el parámetro de entrada "RPTCMD" y active el parámetro de entrada
"SRESET". ①
2. El parámetro de salida "DONE" se activa y el lector revoca el parámetro de salida
"RPTACT". ②






INIT/SRESET

DONE

RPTCMD

RPTACT

Figura 4-35

Finalizar el comando Repeat mediante "INIT"/"SRESET"

Búfer de datos
Una repetición de comando permanente puede provocar que los datos se transfieran al perfil
Ident con más lentitud de la que se procesan los transpondedores nuevos. En este caso, el
lector guarda los resultados en la memoria intermedia. Para este almacenamiento intermedio
el lector dispone de varios búferes. Cuando los búferes están llenos, el perfil Ident no recoge
datos nuevos, es decir, los transpondedores que van llegando no se procesan.
Tabla 4-250 Lectores y módulos de comunicación que soportan la repetición de comando

4802

Tipo de dispositivo

Número de búferes
(número de comandos)

Datos de usuario que pueden procesar‐
se como máx. con repetición de coman‐
do

Lector RF300

246

233 bytes × 246 = 57 318 bytes

RF620R/RF630R

150

233 bytes × 150 = 34 950 bytes

RF61xR/RF68xR

250

1034 bytes × 250 = 258 500 bytes

RF180C

150

233 bytes × 150 = 34 950 bytes

RF185C/RF186C/RF188C

270

1034 bytes × 270 = 279 180 bytes

ASM 456

150

233 bytes × 150 = 34 950 bytes

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Nota
Restricción de la repetición de comando
En los sistemas RFID con ID de variables unívocas (UID o EPC-ID) (p. ej. RF300, RF600,
MOBY U), el comando guardado solo se repite cuando se acercan transpondedores distintos
al campo de la antena. En cambio, si siempre se acerca el mismo transpondedor (misma UID /
EPC-ID) al campo de la antena, el transpondedor no se sigue procesando.

Mensajes de error
Estructura del parámetro de salida "STATUS"
En la función Perfil Ident se da un estado de error siempre que aparece "ERROR = TRUE" en
el parámetro de salida. El análisis (descifrado) del error se realiza a continuación mediante el
parámetro de salida "STATUS".
El parámetro de salida "STATUS" abarca los 4 bytes siguientes:
Tabla 4-251 Bytes del parámetro de salida "STATUS"
Byte

Significado

Byte 0

Números de función
● 80/C0/DE/DF - error en la comunicación con el bus (bus de fondo, PROFINET,
PROFIBUS)
● E1 - errores relacionados con el transpondedor
● E2 - error de la interfaz aérea
● E4 - error en el hardware del lector
● E5 - error en la comunicación entre lector y FB
● E6 - error en el comando del usuario
● E7 - mensaje de error generado por el FB

Byte 1

Números de error
Este byte define el significado de los códigos de error y las advertencias. Los nú‐
meros de error tienen el significado siguiente:
● 0x00 - no hay errores ni advertencias
● 0x80 - mensaje de error del bus de fondo o de PROFIBUS DP-V1 o PROFINET
(conforme a IEC 61158-6)
● 0x81...0x8F - el controlador notifica un error conforme al parámetro "x" (0x8x).
● 0xFE - error del perfil Ident o del módulo de comunicación / lector

Byte 2

Código de error

Byte 3

Advertencias
En este byte, cada bit tiene su propio significado.

Programación del PLC
Manual de programación y manejo, 11/2019

4803

Instrucciones
4.1 Instrucciones

Errores del módulo de comunicación/lector
Las causas de estos errores pueden ser, por ejemplo:
● La comunicación entre CM y lector o entre lector y transpondedor es defectuosa.
● El módulo de comunicación no puede procesar el comando.
Para los mensajes de error, el byte 3 de "STATUS" es irrelevante.
Tabla 4-252 Mensajes de error del módulo de comunicación/lector o del perfil Ident por medio del parámetro de salida
"STATUS"
Mensaje de
error

Descripción

(hex)
0xE1FE0100

No es posible escribir en la memoria del transpondedor
● La memoria del transpondedor está defectuosa
● Se ha escrito demasiadas veces en el transpondedor EEPROM y este ha llegado al final de su vida
● El transpondedor está protegido contra escritura (Memory Lock)

0xE1FE0200

Error de presencia: el transpondedor ha salido de la ventana de transferencia del lector. El comando solo se
ha procesado en parte.
Comando de lectura: no hay datos válidos en "IDENT_DATA".
Comando de escritura: el transpondedor que ha salido del campo de antena contiene un juego de datos
incompleto.
● No se mantiene la distancia de trabajo entre el lector y el transpondedor
● Error de configuración: el registro que debe procesarse es demasiado grande (en funcionamiento
dinámico)
● Con timeout: no hay ningún transpondedor en el campo de antena

0xE1FE0300

Error de dirección
Se ha rebasado por exceso el área de direcciones del transpondedor.
● La dirección inicial al principio del comando está mal puesta
● El transpondedor no es del tipo correcto
● Intento de acceso de escritura a áreas protegidas contra escritura

0xE1FE0400

Solo en la inicialización: el transpondedor no puede ejecutar el comando de inicialización
● El transpondedor está defectuoso

0xE1FE0600

Error en la memoria del transpondedor
Todavía no se ha escrito nunca en el transpondedor o este ha perdido el contenido de su memoria debido
a un fallo de la batería.
● Cambiar el transpondedor (si está activado el bit de batería)
● Reinicializar el transpondedor

0xE1FE0700

Error de contraseña

0xE1FE0800

El transpondedor que está en el campo de antena no tiene la UID prevista o no tiene ninguna UID.

0xE1FE0A00

El transpondedor está protegido contra lectura/escritura.

0xE1FE8100

El transpondedor no responde.

0xE1FE8200

La contraseña del transpondedor es incorrecta. Se deniega el acceso.

0xE1FE8300

Error al verificar los datos del transpondedor escritos.

RF620R/RF630R: contraseña incorrecta

4804

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Mensaje de
error

Descripción

(hex)
0xE1FE8400

Error general del transpondedor

0xE1FE8500

El transpondedor no tiene potencia suficiente para ejecutar el comando.

0xE2FE0100

● Fallo de campo en el lector
El lector recibe impulsos perturbadores del entorno.
–

Campo de interferencias externas; el campo de interferencias puede demostrarse con el "indicador
de campo inductivo" del STG.

–

La distancia entre dos lectores es insuficiente y no se corresponde con las directivas de configuración.

–

El cable de conexión con el lector tiene interferencias, es demasiado largo o no se corresponde con
la especificación.

–

MOBY U: el transpondedor ha salido del campo de antena durante la comunicación.

–

MOBY U: la comunicación entre el lector y el transpondedor ha sido cancelada por influencias
perturbadoras (p. ej. una persona o un cuerpo extraño se mueve entre lector y transpondedor).

● Demasiados errores de transmisión
Tras varios intentos, el transpondedor no ha podido recibir correctamente el comando o los datos de
escritura del módulo de comunicación.
–

El transpondedor está justo al límite de la ventana de transferencia.

–

La transferencia de datos hacia el transpondedor se ve afectada por perturbaciones externas.

● Error de transmisión CRC
–

El transpondedor notifica errores CRC con mucha frecuencia (el transpondedor está en el área límite
del lector; el transpondedor y/o el lector tienen un defecto de hardware).

● Solo en la inicialización: error CRC al recibir el acuse del transpondedor (la misma causa que en caso de
perturbación de campo en el lector).
● Durante el formateado, el transpondedor debe estar en la ventana de transferencia del lector; de lo
contrario se produce un error de timeout, es decir:
–

El transpondedor está justo al límite de la ventana de transferencia.

–

El transpondedor consume demasiada corriente (fallo).

–

Transpondedor EEPROM mal parametrizado en "FORMAT"

● RF600:

0xE2FE0200

–

No hay ningún canal ETSI libre.

–

Se ha seleccionado un estándar de comunicación incorrecto en el comando "INIT".

–

Parámetro de experto erróneo.

–

Evaluación del rendimiento del perfil radioeléctrico ETSI errónea.

● En la ventana de transferencia hay más transpondedores de los que puede procesar el lector
simultáneamente.
● Hay más de un transpondedor en la ventana de transferencia.
● RF620R/RF630R: la alimentación de potencia del transpondedor está al límite.
Aumente la potencia de la antena o reduzca la distancia hasta el transpondedor.

0xE2FE8100

No hay ningún transpondedor con la EPC-ID deseada en el campo de la antena o bien no hay ningún
transpondedor en absoluto en el campo de la antena.

0xE2FE8200

Los datos solicitados no están disponibles.

0xE2FE8300

El transpondedor notifica un error CRC.

0xE2FE8400

La antena seleccionada no está activada.

Programación del PLC
Manual de programación y manejo, 11/2019

4805

Instrucciones
4.1 Instrucciones
Mensaje de
error

Descripción

(hex)
0xE2FE8500

La frecuencia seleccionada no está activada.

0xE2FE8600

La señal portadora no está activada.

0xE2FE8700

Hay más de un transpondedor en la ventana de transferencia.

0xE2FE8800

Error general de protocolo radioeléctrico

0xE4FE0100

Cortocircuito o sobrecarga de las salidas de 24 V
● El lector consume demasiada corriente.
● El cable del lector provoca un cortocircuito.
Posibles consecuencias:
● Se desactiva la salida afectada.
● En caso de sobrecarga global se desactivan todas las salidas.
● La reactivación solo es posible mediante desconexión y reconexión de la tensión de alimentación de 24
V.
● A continuación, iniciar "Reset_Reader".

0xE4FE0300

● Error en la conexión con el lector; el lector no responde.
–

El cable entre el módulo de comunicación y el lector está mal cableado o se ha roto.

–

La tensión de alimentación de 24 V no está conectada, está desactivada o ha fallado brevemente.

–

El fusible automático del módulo de comunicación ha saltado.

–

Defecto de hardware.

–

Hay otro lector cerca y está activo.

–

Ejecutar "INIT"/"WRITE-CONFIG" una vez solucionado el error.

● La antena del lector está desactivada. En este estado se ha iniciado un comando de variable para el
módulo de comunicación.
–

Activar la antena con el comando "Activar/desactivar antena".

–

La antena está activada (desactivada) y ha recibido otro comando de activación (desactivación).

● El modo en el comando "SET_ANT" es desconocido.
● La antena está desactivada en el lector o el cable de la antena está defectuoso.
0xE4FE0400

El búfer del módulo de comunicación o lector para el almacenamiento intermedio del comando no es sufi‐
ciente.

0xE4FE0500

El búfer del módulo de comunicación o lector para el almacenamiento intermedio de los datos no es sufi‐
ciente.

0xE4FE0600

El comando no está permitido en este estado o no se soporta.

0xE4FE0700

Aviso de arranque del lector/módulo de comunicación. El lector o el módulo de comunicación estaba de‐
sactivado y todavía no ha recibido ningún comando "Reset_Reader" ("WRITE-CONFIG").

RF61xR/RF68xR: la repetición de comando solo es posible en modo de presencia.

● Ejecutar "INIT".
● La misma dirección física del parámetro "IID_HW_CONNECT" se utiliza varias veces. Compruebe las
parametrizaciones de "IID_HW_CONNECT".
● Comprobar la conexión con el lector.
● Se ha cambiado la velocidad de transferencia pero todavía no se ha desconectado y conectado la
tensión.
0xE4FE8100

4806

Reservado

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Mensaje de
error

Descripción

(hex)
0xE4FE8A00

Error general

0xE4FE8B00

No se han transferido datos de configuración o bien son erróneos.

0xE4FE8C00

● Error de comunicación entre el perfil Ident y el módulo de comunicación. Error Handshake.
–

El UDT de este módulo de comunicación se sobrescribirá con otras partes del programa.

–

Comprobar la parametrización del módulo de comunicación en el UDT.

–

Comprobar el comando del perfil Ident que provoca este error.

–

Iniciar "INIT" tras solucionar el error.

● Se ha producido un error del bus de fondo / PROFIBUS DP1) / PROFINET.
–

La conexión de bus con el bus de fondo / PROFIBUS DP / PROFINET estaba interrumpida (rotura de
hilo en el bus; conector de bus extraído por un tiempo breve en el módulo de comunicación).

–

El bus de fondo / PROFIBUS DP / maestro PROFINET ya no actúa en el módulo de comunicación.

–

Ejecutar "INIT".

–

El módulo de comunicación ha detectado una interrupción de telegrama en el bus. Es posible que se
haya reconfigurado el bus de fondo, PROFIBUS o PROFINET (p. ej. con HW Config o TIA Portal).

1)
Este error solo se visualiza si se ha activado la "supervisión de respuesta" en la configuración de
PROFIBUS.

0xE4FE8D00

● Error de comunicación interno del módulo de comunicación/lector.
–

Problemas de contacto de conector en el módulo de comunicación/lector.

–

El hardware del módulo de comunicación/lector tiene un defecto; → enviar el módulo de comunicación/
lector para que lo reparen.

–

Iniciar "INIT" tras solucionar el error.

● Error de vigilancia interno del módulo de comunicación/lector.

0xE4FE8E00

–

Error de ejecución del programa en el módulo de comunicación/lector.

–

Desconectar y volver a conectar la tensión de alimentación del módulo de comunicación.

–

Iniciar "INIT" tras solucionar el error.

–

MOBY U: error de Watchdog en el lector.

El comando en curso ha sido cancelado por el comando "WRITE-CONFIG" ("INIT" o "SRESET") o bien se
ha extraído el conector de bus.
● La comunicación con el transpondedor se ha cancelado con "INIT".
● Este error solo puede volver a notificarse con un "INIT" o "SRESET".

0xE5FE0100

Sucesión errónea de números en la secuencia (SN) del lector/módulo de comunicación

0xE5FE0200

Sucesión errónea de números en la secuencia (SN) del perfil Ident
Causa posible: en la configuración de dispositivos no se ha ajustado el modo de usuario "Perfil Ident / perfil
normalizado RFID".

0xE5FE0400

Número de bloque de datos no válido (DBN) en el lector/módulo de comunicación

0xE5FE0500

Número de bloque de datos no válido (DBN) en el perfil Ident

0xE5FE0600

Longitud de bloque de datos no válida (DBL) en el lector/módulo de comunicación

0xE5FE0700

Longitud de bloque de datos no válida (DBL) en el perfil Ident

Programación del PLC
Manual de programación y manejo, 11/2019

4807

Instrucciones
4.1 Instrucciones
Mensaje de
error

Descripción

(hex)
0xE5FE0800

Comando anterior activo o desbordamiento de búfer
Se ha enviado un comando nuevo al lector o al módulo de comunicación a pesar de que el último comando
seguía activo.
● El comando activo solo puede cancelarse con "INIT".
● Antes de iniciar un comando nuevo, el bit "DONE" debe ser 1; excepción "INIT".
● Se han parametrizado dos llamadas de perfil Ident con los mismos parámetros "HW_ID",
"CM_CHANNEL" y "LADDR".
● Dos llamadas de perfil Ident trabajan con el mismo puntero.
● Iniciar "INIT" tras solucionar el error.
● Al trabajar con repetición de comando (p. ej. transpondedor de código fijo) no se recopilan datos del
transpondedor. El búfer de datos del lector/módulo de comunicación se ha desbordado. Se han perdido
datos del transpondedor.

0xE5FE0900

El lector o el módulo de comunicación ejecuta un reset de hardware ("INIT_ACTIVE" puesto a "1"), se espera
"INIT" del perfil Ident (bit 15 en la palabra de control cíclica).

0xE5FE0A00

El código de comando "CMD" y la correspondiente confirmación no concuerdan. Puede tratarse de un error
de software o sincronización que no se produce en el funcionamiento normal.

0xE5FE0B00

Orden erróneo de los telegramas de acuse (TDB / DBN)

0xE5FE0C00

Error de sincronización (incremento erróneo de AC_H / AC_L y CC_H / CC_L en la palabra de control cíclica),
ha sido necesario ejecutar "INIT".

0xE5FE8100

Error de comunicación entre lector y módulo de comunicación
Acceso denegado

0xE5FE8200

Error de comunicación entre lector y módulo de comunicación
Recurso ocupado

0xE5FE8300

Error de comunicación entre lector y módulo de comunicación
Error de función de la interfaz serie

0xE5FE8400

Error de comunicación entre lector y módulo de comunicación
Otros errores

0xE6FE0100

Comando desconocido
El perfil Ident envía un comando no interpretable al módulo de comunicación.
● El bloque "AdvancedCmd" ha recibido un "CMD" incorrecto.
● La entrada "CMD" del bloque "AdvancedCmd" ha sido sobrescrita por el usuario.
● El transpondedor ha notificado un error de dirección.

0xE6FE0200

4808

Índice de comando no válido (CI)

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Mensaje de
error

Descripción

(hex)
0xE6FE0300

● Parametrización errónea del módulo de comunicación o lector
–

Comprobar los parámetros "INPUT" del perfil Ident.

–

Comprobar la parametrización en HW Config / TIA Portal.

–

El comando "WRITE-CONFIG" está mal parametrizado.

–

Tras un arranque el lector o el módulo de comunicación no ha recibido aún un "INIT".

● El lector o el módulo de comunicación en PROFIBUS/PROFINET está mal parametrizado y no es posible
procesar el comando.
–

Longitud de las áreas de entrada/salida insuficiente para la palabra cíclica E/S.
¿Se ha utilizado el archivo GSD correcto?

–

Comando (p. ej. "READ") puesto con una longitud excesiva de los datos de usuario.

● Error al procesar el comando
–

Los datos de "AdvancedCmd" o "IID_CMD_STRUCT" son erróneos (p. ej. comando "WRITE" con
longitud = 0); comprobar "AdvancedCmd" o "IID_CMD_STRUCT" y ejecutar un "INIT".

–

Hardware del lector/módulo de comunicación defectuoso: con "INIT" el lector o el módulo de
comunicación recibe datos erróneos.

–

El byte AB no concuerda con la longitud de datos de usuario.

● Se ha seleccionado el bloque reset erróneo.

0xE6FE0400

–

Utilice el bloque reset adecuado a su dispositivo de identificación.

–

Objeto tecnológico con RF68xR y RF120C: independientemente del dispositivo o sistema de
identificación seleccionado, utilice el bloque de función "Reset_Reader".

Error de presencia:
un transpondedor ha pasado de largo del lector y no se ha procesado con ningún comando.
● Este mensaje de error no se notifica inmediatamente, sino que el lector o el módulo de comunicación
espera el próximo comando (lectura o escritura). Dicho comando es respondido inmediatamente con
este error. Esto significa que no se procesa un comando de lectura o escritura. No es hasta el próximo
comando que el lector/módulo de comunicación lo procesa normalmente.
● Un "INIT" del perfil Ident también resetea este estado de error.
● En el parámetro OPT1 está activado el bit 2 y no hay ningún transpondedor en la ventana de
transferencia.

0xE6FE0500

Se ha producido un error que requiere un Reset_Reader ("WRITE-CONFIG" con "Config = 3").
● El comando "WRITE-CONFIG" es erróneo.
● Iniciar "INIT" tras solucionar el error.
● Compruebe el parámetro "IID_HW_CONNECT".

0xE6FE8100

Falta un parámetro.

0xE6FE8200

El parámetro tiene un formato no válido.

0xE6FE8300

El tipo de parámetro no es válido.

0xE6FE8400

Parámetro desconocido

0xE6FE8500

El comando o el telegrama tiene un formato no válido.

0xE6FE8600

Error en el comando Inventory.

0xE6FE8700

Error en el acceso de lectura al transpondedor.

0xE6FE8800

Error en el acceso de escritura al transpondedor.

Programación del PLC
Manual de programación y manejo, 11/2019

4809

Instrucciones
4.1 Instrucciones
Mensaje de
error

Descripción

(hex)
0xE6FE8900

Error al escribir la EPC-ID en el transpondedor.

0xE6FE8A00

Error al activar la protección contra escritura en el transpondedor.

0xE6FE8B00

Error en el comando "Kill".

0xE7FE0100

En este estado solo se admite el comando "Reset_Reader" ("WRITE-CONFIG" con "CMDSEL =1" y "CMD
= 0x78").

0xE7FE0200

El código de comando "CMD" o el valor de "CMDSEL" no es admisible.
Causa posible / procedimiento ulterior:
● Los parámetros "CMDSEL" o "CMDDIM" están mal parametrizados. Compruebe los parámetros.
El valor del parámetro "CMDSEL" debe estar comprendido en el rango 1 ... 100 y nunca puede ser mayor
que el valor del parámetro "CMDDIM" (máx. 100).

0xE7FE0300

El valor del parámetro "LEN_DATA" del comando es demasiado largo.
No concuerda con los datos globales que se reservaron dentro del búfer de datos de transmisión (TXBUF).

0xE7FE0400

El búfer de datos de recepción (RXBUF) o el búfer de datos de transmisión (TXBUF) es demasiado pequeño,
el búfer creado en TXBUF/RXBUF no tiene el tipo de datos correcto o el parámetro "LEN_DATA" tiene un
valor negativo.
Causa posible / procedimiento ulterior:
● Compruebe si los búferes TXBUF/RXBUF tienen por lo menos el mismo tamaño que el indicado en
"LEN_DATA".
● En S7-1200/1500:
–

En el perfil Ident solo puede crearse un "Array of Byte" en TXBUF y RXBUF.

–

En los bloques "Tag_Status" y "Reader_Status" solo puede crearse un "Array of Byte" o los tipos de
datos correspondientes ("IID_TAG_STATUS_XX_XXX" o "IID_READER_STATUS_XX_XXX"). En
todos los demás bloques solo puede crearse un "Array of Byte".

0xE7FE0500

Este error informa de que el próximo comando solo puede ser "INIT". Todos los demás comandos se re‐
chazarán.

0xE7FE0600

Índice erróneo (fuera del rango de "101 ... 108" y "-20401 ... -20418")

0xE7FE0700

El lector o el módulo de comunicación no responde a "INIT" (en un aviso de estado cíclico se espera
"INIT_ACTIVE").
Procedimiento ulterior:
● Compruebe el parámetro de dirección "LADDR".

0xE7FE0800

Tiempo excedido durante "INIT"
(60 segundos conforme a "TC3WG9")

0xE7FE0900

No se soporta la repetición de comando.

0xE7FE0A00

Error al transferir la PDU (Protocol Data Unit).

0xE7FE0B00

El parámetro "CMDREF" está mal parametrizado. Compruebe el parámetro.
El parámetro "CMDREF" debe estar creado como "ARRAY of IID_CMD_STRUCT" y puede contener como
máximo 100 elementos.

0xFxFExx00

4810

Un error "FxFExxxx" es idéntico al error "ExFExxxx" correspondiente (consulte el error "ExFExxxx").
Además hay advertencias en el byte 3.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Errores del lector óptico
En los mensajes de error se desactiva la señal "IN_OP" (In Operation) y se enciende el LED
"STATE/SF" con luz roja permanente. En caso de conexión mediante el perfil Ident se
desactiva también el bit "Ready" o "Done".
Si el lector óptico está conectado a PROFINET IO, estos mensajes de error provocan una
alarma de diagnóstico en el controlador IO correspondiente. En el diagnóstico IO encontrará
la forma de leer y evaluar la información de diagnóstico que ofrece el lector óptico.
Tabla 4-253 Mensajes de error por medio del parámetro de salida "STATUS" ("IN_OP" se desactiva)
Mensaje de
error

Descripción

(hex)
0xE1FE0200

La conexión de la interfaz interna al sensor de imagen está averiada.
Si el error persiste tras una reconexión, póngase en contacto con el soporte técnico.

0xE1FE0400

Error de transferencia
El búfer de transmisión está lleno porque los datos no se consultan en un tiempo lo suficientemente corto.
Reduzca la frecuencia de disparo o procese los resultados con más rapidez.
Cambie el tiempo de actualización en la configuración de PROFINET.
Si fuera necesario, es posible aumentar la velocidad de transferencia de la conexión del CM. Para cubrir
picos de carga breves, existe la posibilidad de aumentar el tamaño del búfer de imágenes del programa en
"Captura de imagen", ficha "Controlador".

0xE1FE0600

No es posible iniciar el programa porque no hay memoria suficiente o el programa está dañado.
Reduzca la memoria necesaria y vuelva a ejecutar la operación "Guardar programa".

0xE1FE0700

Error de comparación
No se ha podido crear el programa debido a ajustes de coincidencia erróneos.
Adapte los ajustes de coincidencia o utilice una pieza de ensayo adecuada.

0xE4FE0400

Error de archivo interno
Se ha producido un error al guardar en la memoria no volátil.
Si el error persiste, póngase en contacto con el soporte técnico.

0xE4FE0600

Lámpara sobrecargada
La lámpara conectada está sobrecargada. El "Grado de muestreo máximo" parametrizado o especificado en
"Opciones", ficha "Iluminación" se ha rebasado.
Reduzca la frecuencia de disparo, disminuya el tiempo de exposición o utilice una lámpara más potente.

0xE4FE8400

La secuencia de comandos es errónea.
Puede darse por ejemplo debido a un disparo demasiado rápido. El perfil Ident solo puede procesar un
comando antes de ejecutar un nuevo comando.

0xE6FE0400

No se ha podido crear o guardar el programa.
● Al guardar el programa se modifica la señal DISA en un lugar no válido o bien no se mantiene la
secuencia temporal de las señales creadas.
Compruebe la secuencia temporal de las señales creadas. Vuelva a iniciar la operación para guardar el
programa.
● No se ha podido crear el programa.
Adapte la parametrización, la colocación de las piezas de ensayo en la imagen o la calidad de la imagen.
● Mediante la interfaz ajustada en "Controlador" se intenta guardar un programa con un número no válido.
Elija un número de programa comprendido entre 1 y 15. En SIMATIC MV420 SR-B, los números de
programa válidos son del 1 al 5 y el 15.

Programación del PLC
Manual de programación y manejo, 11/2019

4811

Instrucciones
4.1 Instrucciones
En los avisos siguientes no se desactiva la señal "IN_OP" (In Operation) y el LED "STATE/SF"
no se enciende con luz roja.
Tabla 4-254 Avisos por medio del parámetro de salida "STATUS" ("IN_OP" no se desactiva)
Aviso

Descripción

(hex)
0xE1FE0300

Parámetro erróneo en el comando MV
El comando está mal estructurado. Causas posibles:
● La dirección especificada en un comando "WRITE" es ≠ "0x0000".
● Cambio de programa en el comando MV
–

La longitud de los datos que se escribirán es > "0x1".

–

El número de programa transferido es > "0xF".

El número de programa transferido no está guardado.
0xE6FE0100

El comando no es admisible o se ha cancelado.
El mensaje de error exacto puede determinarse con "INIT" sin seleccionar programa. Causas posibles:
● El búfer de transmisión está lleno.
● El programa está dañado.
● La interfaz Ethernet está funcionando y tiene un problema.
● La lámpara conectada está sobrecargada.
● Error al acceder a Matchstring debido a la ausencia de parametrización.

0xE6FE0300

La inicialización con selección de programa ("INIT"/"WRITE-CONFIG") no es posible. Causas posibles:
● El número de programa transferido no está guardado.
● El lector está todavía en autotest.

Errores del bus/bus de fondo
La capa de transporte del sistema de bus utilizado (bus de fondo, PROFIBUS, PROFINET)
notifica un error. Para buscar y analizar con precisión el error es muy útil un tracer PROFIBUS.
Para PROFINET puede utilizarse el software de código abierto "Wireshark". El diagnóstico de
sistema en PROFIBUS o PROFINET puede aclarar la causa del error.
Los mensajes de error que empiezan por "80/C0/DE/DF" hacen referencia a errores del bus/
bus de fondo. Encontrará detalles sobre el mensaje de error en la Ayuda de STEP 7 para los
bloques "WRREC" y "RDREC" (SFB52/SFB53).

4812

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Advertencias
El byte 3 del parámetro de salida "STATUS" muestra advertencias cuando el byte 0 de
"STATUS" (números de función) tiene el valor "Fx" o "Dx".
Tabla 4-255 Advertencias posibles al trabajar con el perfil Ident
Bytes 0...2

Byte 3

Significado

FxFExx

Bit 0

El bit está puesto fijo a "0".

Bit 1

Dependiente del fabricante

Bit 2

Batería baja

Bit 3

Dependiente del fabricante

Bit 4

Dependiente del fabricante

Bit 5

Dependiente del fabricante

Bit 6

Dependiente del fabricante

Bit 7

Dependiente del fabricante

4.2

Instrucciones

4.2.1

Instrucciones que funcionan asíncronamente

4.2.1.1

Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente

Instrucciones que funcionan asíncronamente
En la ejecución del programa se distingue entre las instrucciones que funcionan
síncronamente y las que funcionan asíncronamente.
Las propiedades "síncrona" y "asíncrona" hacen referencia a la relación temporal entre la
llamada y la ejecución de la instrucción:
● Para instrucciones síncronas se aplica lo siguiente: Cuando finaliza la llamada de una
instrucción que funciona síncronamente finaliza también su ejecución.
● En cambio, en las instrucciones asíncronas no es así: La ejecución de una instrucción
asíncrona puede prolongarse a lo largo de varias llamadas. La CPU procesa las
instrucciones asíncronas en paralelo al programa de usuario cíclico. Durante su
procesamiento, las instrucciones que funcionan asíncronamente ocupan recursos de la
CPU.
Por lo general, las instrucciones que funcionan asíncronamente sirven para transferir datos
(juegos de datos para módulos, datos de comunicación, datos de diagnóstico, ...).
Encontrará más información sobre las instrucciones que funcionan asíncronamente en:
SIMATIC S7-1500 / ET 200MP Manual Collection (https://
support.industry.siemens.com/cs/ww/es/view/86140384) en el manual de sistema, bajo

Programación del PLC
Manual de programación y manejo, 11/2019

4813

Instrucciones
4.2 Instrucciones
Principios básicos de la ejecución del programa > Instrucciones que funcionan
asíncronamente.

Identificación de la petición
Para ejecutar una instrucción a lo largo de varias llamadas, la CPU debe poder asignar
claramente una llamada subsiguiente a una petición en curso de la instrucción. Para asignar
la llamada a la petición, la CPU utiliza uno de los dos mecanismos siguientes, en función del
tipo de instrucción:
● Por medio de la instancia de la instrucción (si es del tipo "SFB" bloque de función de
sistema)
● Por medio de los parámetros de entrada de la instrucción que identifican la petición
Si mediante una instrucción que funciona asíncronamente se dispara una alarma de proceso
o se lanza la salida de comandos de control a los esclavos DP o bien una transferencia de
datos o la cancelación de una conexión no configurada y se vuelve a llamar dicha instrucción
antes de que finalice la petición en curso, el comportamiento posterior de la instrucción
dependerá en gran medida de si en la siguiente llamada se trata de la misma petición o no.

Transferencia de parámetros a bloques de programa de ejecución asíncrona
Los bloques lógicos (FB/FC) y bloques de datos (DB) se pueden crear con diferentes tipos de
acceso ("estándar" y "optimizado"). En los bloques lógicos se puede llamar cualquier tipo de
instrucción. Algunas instrucciones (p. ej. "WRIT_DBL" y "READ_DBL") se ejecutan de modo
asíncrono. Estos bloques de programa no pueden recibir variables de TEMP, ya que los datos
no se pueden modificar durante la ejecución.
Asegúrese de no utilizar estas instrucciones en programas en los que los bloques lógicos se
llamen unos a otros con diferente tipo de acceso, de modo que pudieran darse los siguientes
casos:
● Una estructura de un bloque de datos estándar se transfiere directa o indirectamente a un
bloque lógico optimizado que retransfiere esta estructura directa o indirectamente a uno de
los bloques arriba mencionados.
● El caso inverso en el que una estructura de un bloque lógico optimizado se transfiera directa
o indirectamente a un bloque de datos estándar que retransfiere esta estructura directa o
indirectamente a uno de los bloques de programa arriba mencionados.
En otro caso se crea una copia oculta de los datos transferidos en TEMP, que hace que los
bloques de programa que funcionan asíncronamente den una respuesta negativa.

4814

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetro REQ
El parámetro de entrada REQ (request) sirve exclusivamente para lanzar la petición:
● La petición se lanza poniendo a "1" el parámetro de entrada REQ (caso 1).
● Si hay una petición determinada en curso y se vuelve a llamar la instrucción para la misma
petición antes de que finalice (p. ej. en un OB de alarma cíclica), REQ no es evaluado por
la instrucción (caso 2).
● Si la petición ha finalizado pero en la próxima llamada el parámetro de entrada REQ sigue
estando en "1", la petición vuelve a iniciarse de inmediato.
Nota
Bit REQ = "1"
Tenga en cuenta que si el bit REQ está activado, la instrucción asíncrona volverá a
iniciarse, posiblemente de forma involuntaria, una vez finalice la llamada anterior. Para
poder mantener mejor el programa y tener una visión más clara del mismo, es aconsejable
volver a poner a "0" el bit REQ lo antes posible.

Parámetro RET_VAL y BUSY
A través de los parámetros de salida RET_VAL y BUSY se indica el estado de ejecución de la
petición.
Tenga en cuenta la indicación contenida en el apartado: Evaluación de errores con el
parámetro de salida RET_VAL (Página 174)
● En el caso 1 (primera llamada con REQ = 1), siempre que haya recursos de sistema libres
y los parámetros de entrada reciban valores correctos, se registrará el código W#16#7001
en RET_VAL y BUSY se pondrá a "1".
Si los recursos de sistema necesarios están ocupados temporalmente o si hay un error en
los parámetros de entrada, se registrará el código de error correspondiente en RET_VAL y
BUSY se pondrá a "0".
● En el caso 2 (llamada intermedia) se registra el código W#16#7002 en RET_VAL (significa
que la petición todavía se está procesando) y BUSY se pone a "1".
● En la última llamada de una petición vale lo siguiente:
– En el caso de las instrucciones "DPNRM_DG (Página 5956)", "X_GET (Página 7622)"
y "I_GET (Página 7606)" si la transferencia de datos es correcta se registra en RET_VAL
el número de datos transferidos en bytes como número positivo. En BUSY se escribe un
"0" en este caso.
En caso de error se registra información de error en RET_VAL. BUSY no se debe
evaluar en este caso.
– En el caso de "RD_REC (Página 5922)" si la transferencia de datos es correcta, en
RET_VAL se registra el tamaño del juego de datos en bytes o bien un "0". En BUSY se
escribe un "0" en este caso. En caso de error se registra el código de error en RET_VAL
y BUSY se pone a "0".
– En las demás instrucciones y si la petición se ejecuta sin errores, se registra un "0" en
RET_VAL y BUSY se pone a "0". En caso de error se registra el código de error en
RET_VAL y BUSY se pone a "0".

Programación del PLC
Manual de programación y manejo, 11/2019

4815

Instrucciones
4.2 Instrucciones

Nota
Si la primera y la última llamada coinciden en el tiempo, para RET_VAL y BUSY se aplica lo
descrito para la última llamada.

Recursos ocupados por la petición
Toda petición ocupa recursos de la CPU. En la instrucción "RDREC", p. ej., es el espacio de
memoria para el área de destino. Estos recursos están asignados exclusivamente a esta
petición y se permanecerán ocupados mientras la instrucción esté activa, es decir, mientras
BUSY tenga el valor "1".
Los recursos ocupados no pueden modificarse ni emplearse para otros usos. Así, por ejemplo,
en la instrucción "RDREC" no se permite modificar ni la longitud ni el contenido del área de
destino.

Resumen
La tabla siguiente muestra una visión esquemática de lo arriba descrito. En particular, indica
los valores posibles de los parámetros de salida, si la petición no ha finalizado todavía después
de una llamada de la instrucción.
Nota
En el programa es necesario evaluar los parámetros de salida relevantes después de cada
llamada.
Relación entre llamada, REQ, RET_VAL y BUSY cuando hay una petición en curso:
N.º de la
llamada

Tipo de lla‐
mada

REQ

1

Primera lla‐
mada

1

2 a (n - 1)

Llamada in‐
termedia

Irrelevan‐
te

n

Última llama‐ Irrelevan‐
da
te

4816

RET_VAL

BUSY

DONE

ERROR

W#16#7001

1

0

0

Código de error

0

0

1

W#16#7002

1

0

0

W#16#0000 (excepciones: "RD_REC
(Página 5922)", si el área de destino es
mayor que el juego de datos transferido;
"DPNRM_DG (Página 5956)", "X_GET
(Página 7622)" y "I_GET (Página 7606)",
si no se han producido errores.)

0

1

0

Código de error, si se han producido erro‐ 0
res.

0

1

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

4.2.2

Instrucciones básicas

4.2.2.1

KOP

Operaciones lógicas con bits
---| |---: Contacto normalmente abierto
Descripción
La activación de un contacto normalmente abierto depende del estado lógico del operando
correspondiente. Si el estado lógico del operando es "1", se cierra el contacto normalmente
abierto y el estado lógico de la entrada se transfiere a la salida.
Si el estado lógico del operando es "0", el contacto normalmente abierto no se activa y el
estado lógico de la salida de la instrucción se pone a "0".
En una conexión en serie, dos o más contactos normalmente abiertos se combinan de bit en
bit mediante una operación lógica Y. La corriente fluye por una conexión en serie cuando todos
los contactos están cerrados.
En una conexión en paralelo, los contactos normalmente abiertos se combinan mediante una
operación lógica O. La corriente fluye por una conexión en paralelo si uno de los contactos está
cerrado.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, D, L, T, C

Operando cuyo estado lógico
se consulta.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción.
Cree para ello un bloque de datos global con el siguiente contenido:
Nombre del bloque: SLI_gDB_NOContact
Nombre

Tipo de datos

start1

BOOL

start2

BOOL

start3

BOOL

startOut

BOOL

Escriba el siguiente código de programa:

Programación del PLC
Manual de programación y manejo, 11/2019

4817

Instrucciones
4.2 Instrucciones
ಯ6/,BJ'%B ಯ6/,BJ'%B
12&RQWDFWಯ 12&RQWDFWಯ
VWDUW
VWDUW

ಯ6/,BJ'%B
12&RQWDFWಯ
VWDUW2XW

ಯ6/,BJ'%B
12&RQWDFWಯ
VWDUW

El operando "SLI_gDB_NOContact".startOut se activa cuando se cumple una de las
condiciones siguientes:
● Los operandos "SLI_gDB_NOContact".start1 y "SLI_gDB_NOContact".start2 tienen el
estado lógico "1".
● El operando "SLI_gDB_NOContact".start3 tiene el estado lógico "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

---| / |---: Contacto normalmente cerrado
Descripción
La activación de un contacto normalmente cerrado depende del estado lógico del operando
correspondiente. Si el estado lógico del operando es "1", se abre el contacto normalmente
cerrado y el estado lógico de la salida de la instrucción se pone a "0".
Si el estado lógico del operando es "0", no se activa el contacto normalmente cerrado y el
estado lógico de la entrada se transfiere a la salida.
En una conexión en serie, dos o más contactos normalmente cerrados se combinan de bit en
bit mediante una operación lógica Y. La corriente fluye por una conexión en serie cuando todos
los contactos están cerrados.
En una conexión en paralelo, los contactos normalmente cerrados se combinan mediante una
operación lógica O. La corriente fluye por una conexión en paralelo si uno de los contactos está
cerrado.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:

4818

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, D, L, T, C

Operando cuyo estado lógico
se consulta.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

El operando "TagOut" se activa cuando se cumple una de las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" tienen el estado lógico "1".
● El operando "TagIn_3" tiene el estado lógico "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

--|NOT|--: Invertir RLO
Descripción
La instrucción "Invertir RLO" invierte el estado lógico del resultado lógico (RLO). Si el estado
lógico de la entrada de la instrucción es "1", la salida de la instrucción devuelve el estado lógico
"0". Si el estado lógico de la entrada de la instrucción es "0", la salida devuelve el estado lógico
"1".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

127

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ ಯ7DJ,QBಯ

El operando "TagOut" se desactiva cuando se cumple una de las condiciones siguientes:
● El operando "TagIn_1" devuelve el estado lógico "1".
● El estado lógico de los operandos "TagIn_2" y "TagIn_3" es "1".

Programación del PLC
Manual de programación y manejo, 11/2019

4819

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

---( )---: Asignación
Descripción
La instrucción "Asignación" permite activar el bit de un operando indicado. Si el resultado
lógico (RLO) en la entrada de la bobina es "1", el operando indicado adopta el estado lógico "1".
Si el estado lógico de la entrada de la bobina es "0", el bit del operando indicado se pone a "0".
La instrucción no afecta al RLO. El RLO de la entrada de la bobina se transfiere directamente
a la salida.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Asignación":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Output

BOOL

I, Q, M, D, L

Operando al que se asigna el
RLO.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJ2XWBಯ
ಯ7DJ,QBಯ

ಯ7DJ2XWBಯ

El operando "TagOut_1" se activa cuando se cumple una de las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● El estado lógico del operando "TagIn_3" es "0".
El operando "TagOut_2" se activa cuando se cumple una de las condiciones siguientes:
● Los operandos "TagIn_1", "TagIn_2" y "TagIn_4" devuelven el estado lógico "1".
● El estado lógico del operando "TagIn_3" es "0" y el del operando "TagIn_4" es "1".

4820

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

---( R )---: Desactivar salida
Descripción
La instrucción "Desactivar salida" permite poner a "0" el estado lógico de un operando indicado.
La instrucción se ejecuta solo si el resultado lógico (RLO) de la entrada de la bobina es "1". Si
fluye corriente hacia la bobina (RLO = "1"), el operando indicado se pone a "0". Si el RLO de
la entrada de la bobina es "0" (no hay flujo de señales en la bobina), el estado lógico del
operando indicado no cambia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desactivar salida":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Output

BOOL

I, Q, M, D, L, T, C

Operando que se desactiva
si el RLO = "1".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJ2XWಯ
5

ಯ7DJ,QBಯ

El operando "TagOut" se desactiva cuando se cumple una de las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● El estado lógico del operando "TagIn_3" es "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

4821

Instrucciones
4.2 Instrucciones

---( S )---: Activar salida
Descripción
Mediante la instrucción "Activar salida" se pone a "1" el estado lógico de un operando indicado.
La instrucción se ejecuta solo si el resultado lógico (RLO) de la entrada de la bobina es "1". Si
fluye corriente hacia la bobina (RLO = "1"), el operando indicado se pone a "1". Si el RLO de
la entrada de la bobina es "0" (no hay flujo de señales en la bobina), el estado lógico del
operando indicado no cambia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Activar salida":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Output

BOOL

I, Q, M, D, L

Operando que se activa si
RLO = "1".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJ2XWಯ
6

ಯ7DJ,QBಯ

El operando "TagOut" se activa cuando se cumple una de las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● El estado lógico del operando "TagIn_3" es "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

4822

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

SR: Flipflop de activación/desactivación
Descripción
La instrucción "Flipflop de activación/desactivación" sirve para activar o desactivar el bit de un
operando indicado en función del estado lógico de las entradas S y R1. Si el estado lógico de
la entrada S es "1" y el de la entrada R1 es "0", el operando indicado se pone a "1". Si el estado
lógico de la entrada S es "0" y el de la entrada R1 es "1", el operando indicado se pone a "0".
La entrada R1 prevalece sobre la entrada S. Si el estado lógico de las entradas S y R1 es "1",
el estado lógico del operando indicado se pone a "0".
Si el estado lógico de ambas entradas S y R1 es "0", no se ejecuta la instrucción. En este caso,
no cambia el estado lógico del operando.
El estado lógico actual del operando se transfiere a la salida Q y se puede consultar allí.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Flipflop de activación/
desactivación":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

S

Input

BOOL

I, Q, M, D, L

Activación habilitada

R1

Input

BOOL

I, Q, M, D, L, T, C

Desactivación habilitada

<Operando>

InOut

BOOL

I, Q, M, D, L

Operando que se activa o de‐
sactiva.

Q

Output

BOOL

I, Q, M, D, L

Estado lógico del operando

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ65ಯ
ಯ7DJ,QBಯ

6

65

4

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ
5

Los operandos "TagSR" y "TagOut" se activan cuando se cumplen las condiciones siguientes:
● El operando "TagIn_1" devuelve el estado lógico "1".
● El operando "TagIn_2" devuelve el estado lógico "0".
Los operandos "TagSR" y "TagOut" se desactivan cuando se cumple una de las condiciones
siguientes:
● El operando "TagIn_1" devuelve el estado lógico "0" y el operando "TagIn_2" devuelve el
estado lógico "1".
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".

Programación del PLC
Manual de programación y manejo, 11/2019

4823

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
El MCR (Master Control Relay) (Página 203)
---(MCR<): Abrir áreas MCR (Página 4971)
Principios básicos de KOP (Página 7943)

RS: Flipflop de desactivación/activación
Descripción
La instrucción "Flipflop de desactivación/activación" sirve para desactivar o activar el bit de un
operando indicado en función del estado lógico de las entradas R y S1. Si el estado lógico de
la entrada R es "1" y el de la entrada S1 es "0", el operando indicado se pone a "0". Si el estado
lógico de la entrada R es "0" y el de la entrada S1 es "1", el operando indicado se pone a "1".
La entrada S1 prevalece sobre la entrada R. Si el estado lógico de las entradas R y S1 es "1",
el estado lógico del operando indicado se pone a "1".
Si el estado lógico de ambas entradas R y S1 es "0", no se ejecuta la instrucción. En este caso,
no cambia el estado lógico del operando.
El estado lógico actual del operando se transfiere a la salida Q y se puede consultar allí.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Flipflop de desactivación/
activación":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

R

Input

BOOL

I, Q, M, D, L

Desactivación habilitada

S1

Input

BOOL

I, Q, M, D, L, T, C

Activación habilitada

<Operando>

InOut

BOOL

I, Q, M, D, L

Operando que se desactiva o
activa.

Q

Output

BOOL

I, Q, M, D, L

Estado lógico del operando

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ56ಯ
ಯ7DJ,QBಯ

5

56

4

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ
6

4824

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Los operandos "TagRS" y "TagOut" se desactivan cuando se cumplen las condiciones
siguientes:
● El operando "TagIn_1" devuelve el estado lógico "1".
● El operando "TagIn_2" devuelve el estado lógico "0".
Los operandos "TagRS" y "TagOut" se activan cuando se cumple una de las condiciones
siguientes:
● El operando "TagIn_1" devuelve el estado lógico "0" y el operando "TagIn_2" devuelve el
estado lógico "1".
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
El MCR (Master Control Relay) (Página 203)
---(MCR<): Abrir áreas MCR (Página 4971)
Principios básicos de KOP (Página 7943)

--|P|--: Consultar flanco de señal ascendente de un operando
Descripción
La instrucción "Consultar flanco de señal ascendente de un operando" permite detectar si el
estado lógico de un operando indicado (<Operando1>) ha cambiado de "0" a "1". La
instrucción compara el estado lógico actual del <Operando1> con el estado lógico de la
consulta anterior, que está almacenado en una marca de flancos (<Operando2>). Si la
instrucción detecta un cambio del resultado lógico (RLO) de "0" a "1", significa que hay un
flanco de señal ascendente.
La figura siguiente muestra el cambio del estado lógico en caso de flanco de señal
descendente y ascendente:
(VWDGR
OµJLFR

)ODQFRGHVH³DODVFHQGHQWH

)ODQFRGHVH³DOGHVFHQGHQWH




7HPSRUL]DGRU

El flanco de señal ascendente se consulta cada vez que se ejecuta la instrucción. Si se detecta
un flanco de señal ascendente, el <Operando1> adopta el estado lógico "1" durante un ciclo
del programa. En los demás casos, el estado lógico del operando es "0".

Programación del PLC
Manual de programación y manejo, 11/2019

4825

Instrucciones
4.2 Instrucciones
Indique el operando que debe consultarse (<Operando1>) en el comodín correspondiente
ubicado encima de la instrucción. La marca de flancos (<Operando2>) se indica en el comodín
correspondiente situado debajo de la instrucción.
Nota
Uso de la dirección de la marca de flancos
La dirección de la marca de flancos no se puede utilizar más de una vez en el programa, puesto
que, de lo contrario, se sobrescribe el bit de marcas. Esto influye negativamente en la
evaluación de flancos, de manera que el resultado deja de ser unívoco. El área de memoria de
la marca de flancos debe estar en un bloque de datos (área 'Static' de FB) o en el área de
marcas.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar flanco de señal
ascendente de un operando":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

BOOL

I, Q, M, D, L, T, C

Señal que se debe consultar

<Operan‐
do2>

InOut

BOOL

I, Q, M, D, L

Marca de flancos en la que
se almacena el estado lógico
de la consulta anterior.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ ಯ7DJ,QBಯ ಯ7DJ,QBಯ ಯ7DJ,QBಯ ಯ7DJ,QBಯ ಯ7DJ2XWಯ
3
ಯ7DJB0ಯ

El operando "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1", "TagIn_2" y "TagIn_3" devuelven el estado lógico "1".
● En el operando "TagIn_4" hay un flanco ascendente. El estado lógico de la consulta anterior
se guarda en la marca de flancos "Tag_M".
● El estado lógico del operando "TagIn_5" es "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

4826

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

--|N|--: Consultar flanco de señal descendente de un operando
Descripción
La instrucción "Consultar flanco de señal descendente de un operando" permite detectar si el
estado lógico de un operando indicado (<Operando1>) ha cambiado de "1" a "0". La
instrucción compara el estado lógico actual del <Operando1> con el estado lógico de la
consulta anterior, que está almacenado en una marca de flancos <Operando2>. Si la
instrucción detecta un cambio del resultado lógico (RLO) de "1" a "0", significa que hay un
flanco de señal descendente.
La figura siguiente muestra el cambio del estado lógico en caso de flanco de señal
descendente y ascendente:
(VWDGR
OµJLFR

)ODQFRGHVH³DODVFHQGHQWH

)ODQFRGHVH³DOGHVFHQGHQWH




7HPSRUL]DGRU

El flanco de señal descendente se consulta cada vez que se ejecuta la instrucción. Si se
detecta un flanco de señal descendente, el <Operando1> adopta el estado lógico "1" durante
un ciclo del programa. En los demás casos, el estado lógico del operando es "0".
Indique el operando que debe consultarse (<Operando1>) en el comodín correspondiente
situado encima de la instrucción. La marca de flancos (<Operando2>) se indica en el comodín
de operandos situado debajo de la instrucción.
Nota
Uso de la dirección de la marca de flancos
La dirección de la marca de flancos no se puede utilizar más de una vez en el programa, puesto
que, de lo contrario, se sobrescribe el bit de marcas. Esto influye negativamente en la
evaluación de flancos, de manera que el resultado deja de ser unívoco. El área de memoria de
la marca de flancos debe estar en un bloque de datos (área 'Static' de FB) o en el área de
marcas.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar flanco de señal
descendente de un operando":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

BOOL

I, Q, M, D, L, T, C

Señal que se debe consultar

<Operan‐
do2>

InOut

BOOL

I, Q, M, D, L

Marca de flancos en la que
se almacena el estado lógico
de la consulta anterior.

Programación del PLC
Manual de programación y manejo, 11/2019

4827

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ ಯ7DJ,QBಯ ಯ7DJ,QBಯ ಯ7DJ,QBಯ ಯ7DJ,QBಯ ಯ7DJ2XWಯ
1
ಯ7DJB0ಯ

El operando "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1", "TagIn_2" y "TagIn_3" devuelven el estado lógico "1".
● En el operando "TagIn_4" hay un flanco de señal descendente. El estado lógico de la
consulta anterior se guarda en la marca de flancos "Tag_M".
● El estado lógico del operando "TagIn_5" es "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

P_TRIG: Consultar flanco de señal ascendente del RLO
Descripción
La instrucción "Consultar flanco de señal ascendente del RLO" permite consultar un cambio
del estado lógico del resultado lógico (RLO) de "0" a "1". La instrucción compara el estado
lógico actual del RLO con el estado lógico de la consulta anterior, que está guardado en una
marca de flancos (<Operando>). Si la instrucción detecta un cambio del RLO de "0" a "1",
significa que hay un flanco de señal ascendente.
El flanco de señal ascendente se consulta cada vez que se ejecuta la instrucción. En cuanto
se detecta un flanco de señal ascendente, la salida Q de la instrucción devuelve el estado
lógico "1" durante un ciclo del programa. En todos los demás casos, la salida devuelve el
estado lógico "0".
Nota
Uso de la dirección de la marca de flancos
La dirección de la marca de flancos no se puede utilizar más de una vez en el programa, puesto
que, de lo contrario, se sobrescribe el bit de marcas. Esto influye negativamente en la
evaluación de flancos, de manera que el resultado deja de ser unívoco. El área de memoria de
la marca de flancos debe estar en un bloque de datos (área 'Static' de FB) o en el área de
marcas.

4828

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar flanco de señal
ascendente del RLO":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CLK

Input

BOOL

I, Q, M, D, L

RLO actual

<Operando>

InOut

BOOL

M, D

Marca de flancos en la que
se almacena el RLO de la
consulta anterior.

Q

Output

BOOL

I, Q, M, D, L

Resultado de la evaluación
de flancos

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

3B75,*
&/.

4

&$6
-03

ಯ7DJB0ಯ
ಯ7DJ,QBಯ

En la marca de flancos "Tag_M" se almacena el RLO de la consulta anterior. Cuando se
detecta un cambio del estado lógico del RLO de "0" a "1", se ejecuta el salto a la etiqueta CAS1.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

N_TRIG: Consultar flanco de señal descendente del RLO
Descripción
La instrucción "Consultar flanco de señal descendente del RLO" permite consultar un cambio
del estado lógico del resultado lógico (RLO) de "1" a "0". La instrucción compara el estado
lógico actual del RLO con el estado lógico de la consulta anterior, que está guardado en una
marca de flancos (<Operando>). Si la instrucción detecta un cambio del RLO de "1" a "0",
significa que hay un flanco de señal descendente.
El flanco de señal descendente se consulta cada vez que se ejecuta la instrucción. En cuanto
se detecta un flanco de señal descendente, la salida Q de la instrucción devuelve el estado

Programación del PLC
Manual de programación y manejo, 11/2019

4829

Instrucciones
4.2 Instrucciones
lógico "1" durante un ciclo del programa. En todos los demás casos, el estado lógico de la
salida de la instrucción es "0".
Nota
Uso de la dirección de la marca de flancos
La dirección de la marca de flancos no se puede utilizar más de una vez en el programa, puesto
que, de lo contrario, se sobrescribe el bit de marcas. Esto influye negativamente en la
evaluación de flancos, de manera que el resultado deja de ser unívoco. El área de memoria de
la marca de flancos debe estar en un bloque de datos (área 'Static' de FB) o en el área de
marcas.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar flanco de señal
descendente del RLO":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CLK

Input

BOOL

I, Q, M, D, L

RLO actual

<Operando>

InOut

BOOL

M, D

Marca de flancos en la que
se almacena el RLO de la
consulta anterior.

Q

Output

BOOL

I, Q, M, D, L

Resultado de la evaluación
de flancos

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

1B75,*
&/.

4

&$6
-03

ಯ7DJB0ಯ
ಯ7DJ,QBಯ

En la marca de flancos "Tag_M" se almacena el RLO de la consulta anterior. Cuando se
detecta un cambio del estado lógico del RLO de "1" a "0", se ejecuta el salto a la etiqueta CAS1.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

4830

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Temporizadores
Temporizadores CEI
TP: Impulso
Descripción
La instrucción "Impulso" activa la salida Q por un tiempo programado. La instrucción se inicia
cuando el resultado lógico (RLO) de la entrada IN cambia de "0" a "1" (flanco de señal
ascendente). Para poder ejecutar la instrucción se requiere una operación lógica precedente.
Se puede colocar dentro o al final del segmento. Cuando se inicia la instrucción, se empieza
a contar el tiempo programado PT. La salida Q se activa por el tiempo PT, independientemente
de cómo evolucione la señal de entrada. La detección de un nuevo flanco de señal ascendente
tampoco influye en el estado lógico de la salida Q mientras transcurra el tiempo PT.
El valor de tiempo actual se puede consultar en la salida ET. Este valor de tiempo empieza a
partir de T#0s y termina al alcanzarse el valor del tiempo PT. Una vez alcanzado este tiempo
PT y si el estado lógico de la entrada IN es "0", se desactiva la salida ET.
A cada llamada de la instrucción "Impulso" debe asignársele un temporizador CEI, en el que
se guardan los datos de la instrucción. Un temporizador CEI se puede declarar como se indica
a continuación:
● Declaración de un bloque de datos del tipo TP (p. ej., "TP_DB")
● Declaración como variable local del tipo TP en la sección "Static" de un bloque (p. ej.,
#MyTP_TIMER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el temporizador CEI se deposita en un bloque
de datos propio (instancia individual) o bien como variable local (multiinstancia) en la interfaz
del bloque. Si crea un bloque de datos propio, lo encontrará en el árbol del proyecto, en la
carpeta "Recursos de programa", en "Bloques de programa > Bloques de sistema". Encontrará
más información al respecto en "Consulte también".
El sistema operativo desactiva las instancias de la instrucción "Impulso" cuando se realiza un
arranque en frío. Si alguna instancia de la instrucción debe estar inicializada tras un rearranque
completo (en caliente), las instancias que se deben inicializar se deben llamar en un OB de
arranque con el valor "0" en el parámetro PT. Si un bloque diferente contiene instancias de la
instrucción "Impulso", estas pueden inicializarse p. ej. inicializando el bloque de nivel superior.
Nota
Ignorar instrucción
Si en el programa no se llama la instrucción porque, p. ej., esta es ignorada, la salida ET
devuelve un valor de constante en cuanto ha transcurrido este tiempo.

Programación del PLC
Manual de programación y manejo, 11/2019

4831

Instrucciones
4.2 Instrucciones
Nota
Actualización de los datos de la instrucción
Los datos de la instrucción se actualizan únicamente al llamar la instrucción. En caso de
acceder a las salidas Q o ET, no se actualizan los datos.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Impulso":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

BOOL

I, Q, M, D, L

Entrada de arranque

PT

Input

TIME

I, Q, M, D, L, P o
constante

Duración del impulso
El valor del parámetro PT de‐
be ser positivo.

Q

Output

BOOL

I, Q, M, D, L

Salida de impulso

ET

Output

TIME

I, Q, M, D, L

Valor de tiempo actual

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Impulso":
,1

4

37

37

37

(7
37

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

4832

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

TON: Retardo al conectar
Descripción
La instrucción "Retardo al conectar" retarda la activación de la salida Q por el tiempo
programado PT. La instrucción se inicia cuando el resultado lógico (RLO) de la entrada IN
cambia de "0" a "1" (flanco de señal ascendente). Para poder ejecutar la instrucción se requiere
una operación lógica precedente. Se puede colocar dentro o al final del segmento. Cuando se
inicia la instrucción, se empieza a contar el tiempo programado PT. Una vez transcurrido el
tiempo PT, la salida Q devuelve el estado lógico "1". La salida Q permanecerá activada
mientras la entrada de arranque esté puesta a "1". Cuando el estado lógico de la entrada de
arranque cambia de "1" a "0", se desactiva la salida Q. La función de temporización se reinicia
al detectarse otro flanco de señal ascendente en la entrada de arranque.
El valor de tiempo actual se puede consultar en la salida ET. Este valor de tiempo empieza a
partir de T#0s y termina al alcanzarse el valor del tiempo PT. La salida ET se desactiva en
cuanto el estado lógico de la entrada IN cambia a "0".
A cada llamada de la instrucción "Retardo al conectar" debe asignársele un temporizador CEI,
en el que se guardan los datos de la instrucción. Un temporizador CEI se puede declarar como
se indica a continuación:
● Declaración de un bloque de datos del tipo TON (p. ej., "TON_DB")
● Declaración como variable local del tipo TON en la sección "Static" de un bloque (p. ej.,
#MyTON_TIMER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el temporizador CEI se deposita en un bloque
de datos propio (instancia individual) o bien como variable local (multiinstancia) en la interfaz
del bloque. Si crea un bloque de datos propio, lo encontrará en el árbol del proyecto, en la
carpeta "Recursos de programa", en "Bloques de programa > Bloques de sistema". Encontrará
más información al respecto en "Consulte también".
El sistema operativo desactiva las instancias de la instrucción "Retardo al conectar" cuando se
realiza un arranque en frío. Si alguna instancia de la instrucción debe estar inicializada tras un
rearranque completo (en caliente), las instancias que se deben inicializar se deben llamar en
un OB de arranque con el valor "0" en el parámetro PT. Si un bloque diferente contiene
instancias de la instrucción "Retardo al conectar", estas pueden inicializarse p. ej. inicializando
el bloque de nivel superior.
Nota
Ignorar instrucción
Si en el programa no se llama la instrucción porque, p. ej., esta es ignorada, la salida ET
devuelve un valor de constante en cuanto ha transcurrido este tiempo.
Nota
Actualización de los datos de la instrucción
Los datos de la instrucción se actualizan únicamente al llamar la instrucción. En caso de
acceder a las salidas Q o ET, no se actualizan los datos.

Programación del PLC
Manual de programación y manejo, 11/2019

4833

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Retardo al conectar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

BOOL

I, Q, M, D, L

Entrada de arranque

PT

Input

TIME

I, Q, M, D, L, P o
constante

Tiempo del retardo al conec‐
tar
El valor del parámetro PT de‐
be ser positivo.

Q

Output

BOOL

I, Q, M, D, L

Salida que se activa una vez
transcurrido el tiempo PT.

ET

Output

TIME

I, Q, M, D, L

Valor de tiempo actual

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Retardo al conectar":
,1

4

37

37

(7
37

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

4834

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

TOF: Retardo al desconectar
Descripción
La instrucción "Retardo al desconectar" retarda la desactivación de la salida Q por el tiempo
programado PT. La salida Q se activa cuando el resultado lógico (RLO) de la entrada IN
cambia de "0" a "1" (flanco de señal ascendente). Para poder ejecutar la instrucción se requiere
una operación lógica precedente. Se puede colocar dentro o al final del segmento. Cuando el
estado lógico de la entrada IN cambia nuevamente a "0", el tiempo programado PT deja de
contar. La salida Q permanece activada mientras transcurre el tiempo PT. Una vez
transcurrido el tiempo PT se desactiva la salida Q. Si el estado lógico de la entrada IN cambia
a "1" antes de que transcurra el tiempo PT, se inicializa el temporizador. El estado lógico de la
salida Q permanece en "1".
El valor de tiempo actual se puede consultar en la salida ET. El valor de tiempo actual empieza
a partir de T#0s y termina al alcanzarse el valor del tiempo PT. Una vez transcurrido el tiempo
PT, el valor actual de la salida ET se conserva hasta que la entrada IN cambie nuevamente a
"1". Si el estado lógico de la entrada IN cambia a "1" antes de transcurrir el tiempo PT, la salida
ET adopta el valor T#0s.
A cada llamada de la instrucción "Retardo al desconectar" debe asignársele un temporizador
CEI, en el que se guardan los datos de la instrucción. Un temporizador CEI se puede declarar
como se indica a continuación:
● Declaración de un bloque de datos del tipo TOF (p. ej., "TOF_DB")
● Declaración como variable local del tipo TOF en la sección "Static" de un bloque (p. ej.,
#MyTOF_TIMER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el temporizador CEI se deposita en un bloque
de datos propio (instancia individual) o bien como variable local (multiinstancia) en la interfaz
del bloque. Si crea un bloque de datos propio, lo encontrará en el árbol del proyecto, en la
carpeta "Recursos de programa", en "Bloques de programa > Bloques de sistema". Encontrará
más información al respecto en "Consulte también".
El sistema operativo desactiva las instancias de la instrucción "Retardo al desconectar"
cuando se realiza un arranque en frío. Si alguna instancia de la instrucción debe estar
inicializada tras un rearranque completo (en caliente), las instancias que se deben inicializar se
deben llamar en un OB de arranque con el valor "0" en el parámetro PT. Si un bloque diferente
contiene instancias de la instrucción "Retardo al desconectar", estas pueden inicializarse p. ej.
inicializando el bloque de nivel superior.
Nota
Ignorar instrucción
Si en el programa no se llama la instrucción porque, p. ej., esta es ignorada, la salida ET
devuelve un valor de constante en cuanto ha transcurrido este tiempo.
Nota
Actualización de los datos de la instrucción
Los datos de la instrucción se actualizan únicamente al llamar la instrucción. En caso de
acceder a las salidas Q o ET, no se actualizan los datos.

Programación del PLC
Manual de programación y manejo, 11/2019

4835

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Retardo al desconectar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

BOOL

I, Q, M, D, L

Entrada de arranque

PT

Input

TIME

I, Q, M, D, L, P o
constante

Tiempo del retardo al desco‐
nectar
El valor del parámetro PT de‐
be ser positivo.

Q

Output

BOOL

I, Q, M, D, L

Salida que se desactiva una
vez transcurrido el tiempo PT.

ET

Output

TIME

I, Q, M, D, L

Valor de tiempo actual

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Retardo al
desconectar":
,1

4
37

37

(7
37

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

4836

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Temporizadores SIMATIC
S_PULSE: Parametrizar y arrancar temporizador como impulso
Descripción
Con la instrucción "Parametrizar y arrancar temporizador como impulso" se arranca un
temporizador programado al detectarse un cambio en el resultado lógico (RLO) de "0" a "1"
(flanco de señal ascendente) en la entrada S. El temporizador cuenta el tiempo programado
(TV) mientras el estado lógico de la entrada S sea "1". Si el estado lógico en la entrada S
cambia a "0" antes de que transcurra el tiempo programado, se detiene el temporizador. En tal
caso, el estado lógico de la salida Q es "0".
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo. El valor de tiempo actual se emite codificado en binario por la salida
BI y codificado en BCD por la salida BCD.
Si el temporizador está contando y el estado lógico de la entrada R cambia a "1", el valor actual
de tiempo y la base de tiempo también se ponen a cero. Si el temporizador no está en marcha,
el estado lógico "1" de la entrada R no provoca ningún efecto.
La instrucción "Parametrizar y arrancar temporizador como impulso" requiere una operación
lógica precedente para la evaluación de flancos y se puede colocar dentro o en el extremo del
segmento.
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

Programación del PLC
Manual de programación y manejo, 11/2019

4837

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y arrancar
temporizador como impulso":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador de la instruc‐
ción
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, D, L

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Valor de tiempo predetermi‐
nado

R

Input

BOOL

I, Q, M, D, L, T, C,
P

Entrada de reset

BI

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en binario)

BCD

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L

Estado del temporizador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

4838

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como impulso":
W

W

W

5/2HQODHQWUDGD6

5/2HQODHQWUDGD5

7HPSRUL]DGRUHQPDUFKD

&RQVXOWD

&RQVXOWD

W WLHPSRSURJUDPDGR

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7LPHUBಯ
ಯ7DJ,QBಯ
ಯ7DJ,QB1XPEHUಯ
ಯ7DJ,QBಯ

6B38/6(

ಯ7DJ2XWಯ

6

4

79

%,

ಯ7DJ9DOXHBಯ

%&'

ಯ7DJ9DOXHBಯ

5

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador empieza a contar con el valor de tiempo del operando
"TagIn_Number" y sigue contando mientras el operando "TagIn_1" devuelva el estado lógico
"1". Si el estado lógico del operando "TagIn_1" cambia de "1" a "0" antes de que transcurra el
tiempo, el temporizador "Timer_1" se detiene. En ese caso, el operando "TagOut" se pone a
"0".
Programación del PLC
Manual de programación y manejo, 11/2019

4839

Instrucciones
4.2 Instrucciones
El operando "TagOut" devuelve el estado lógico "1" mientras el temporizador esté en marcha
y el operando "TagIn_1" tenga el estado lógico "1". Una vez transcurrido el tiempo o si se
inicializa el temporizador, el operando "TagOut" se pone a "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 5383)
Principios básicos de KOP (Página 7943)

S_PEXT: Parametrizar y arrancar temporizador como impulso prolongado
Descripción
Con la instrucción "Parametrizar y arrancar temporizador como impulso prolongado" se
arranca un temporizador programado al detectarse un cambio en el resultado lógico (RLO) de
"0" a "1" (flanco de señal ascendente) en la entrada S. El temporizador cuenta el tiempo
programado (TV), aunque el estado lógico de la entrada S cambie a "0". Mientras se ejecuta
el temporizador, la salida Q devuelve el estado lógico "1". Una vez transcurrido el tiempo, la
salida Q se pone a "0". Si el estado lógico en la entrada S cambia de "0" a "1" mientras se
cuenta el tiempo, este se reinicia con el tiempo programado en la entrada TV.
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo. El valor de tiempo actual se emite codificado en binario por la salida
BI y codificado en BCD por la salida BCD.
Si el temporizador está contando y el estado lógico de la entrada R cambia a "1", el valor actual
de tiempo y la base de tiempo también se ponen a cero. Si el temporizador no está en marcha,
el estado lógico "1" de la entrada R no provoca ningún efecto.
La instrucción "Parametrizar y arrancar temporizador como impulso prolongado" requiere una
operación lógica precedente para la evaluación de flancos y se puede colocar dentro o en el
extremo del segmento.
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

4840

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y arrancar
temporizador como impulso prolongado":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador de la instruc‐
ción
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, D, L

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Valor de tiempo predetermi‐
nado

R

Input

BOOL

I, Q, M, D, L, T, C,
P

Entrada de reset

BI

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en binario)

BCD

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L

Estado del temporizador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

4841

Instrucciones
4.2 Instrucciones

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como impulso prolongado":
W

W

W

5/2HQHQWUDGD6

5/2HQHQWUDGD5

(OWLHPSRFRUUH

&RQVXOWD

&RQVXOWD
W WLHPSRSURJUDPDGR

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7LPHUBಯ
ಯ7DJ,QBಯ
ಯ7DJ,QB1XPEHUಯ
ಯ7DJ,QBಯ

6B3(;7

ಯ7DJ2XWಯ

6

4

79

%,

ಯ7DJ9DOXHBಯ

%&'

ಯ7DJ9DOXHBಯ

5



Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador empieza a contar con el valor de tiempo del operando
"TagIn_Number" sin verse afectado por un flanco descendente en la entrada S. Si el estado
lógico del operando "TagIn_1" cambia de "0" a "1" antes de que transcurra el tiempo, el
temporizador se reinicia.

4842

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
El operando "TagOut" devuelve el estado lógico "1" mientras el temporizador esté en marcha.
Una vez transcurrido el tiempo o si se inicializa el temporizador, el operando "TagOut" se pone
a "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 5383)
Principios básicos de KOP (Página 7943)

S_ODT: Parametrizar y arrancar temporizador como retardo a la conexión
Descripción
Con la instrucción "Parametrizar y arrancar temporizador como retardo a la conexión" se
arranca un temporizador programado como retardo a la conexión al detectarse un cambio en
el resultado lógico (RLO) de "0" a "1" (flanco de señal ascendente) en la entrada S. El
temporizador cuenta el tiempo programado (TV) mientras el estado lógico de la entrada S sea
"1". Una vez transcurrido el tiempo debidamente y si la entrada S aún tiene el valor lógico "1",
la salida Q devuelve el valor lógico "1". Si el estado de la entrada S cambia de "1" a "0" mientras
se cuenta el tiempo, el temporizador se detiene. En este caso, la salida Q adopta el estado
lógico "0".
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo. El valor de tiempo actual se emite codificado en binario por la salida
BI y codificado en BCD por la salida BCD.
Si el temporizador está contando y el estado lógico de la entrada R cambia de "0" a "1", el valor
actual de tiempo y la base de tiempo también se ponen a cero. En ese caso, el estado lógico
de la salida Q es "0". El temporizador se reinicia cuando el estado lógico de la entrada R es "1",
incluso si el temporizador no se ejecuta y el RLO en la entrada S es "1".
El temporizador de la instrucción se indica en el comodín situado sobre el cuadro. El
temporizador debe estar declarado con el tipo de datos TIMER.
La instrucción "Parametrizar y arrancar temporizador como retardo a la conexión" requiere una
operación lógica precedente para la evaluación de flancos y se puede colocar dentro o en el
extremo del segmento.

Programación del PLC
Manual de programación y manejo, 11/2019

4843

Instrucciones
4.2 Instrucciones
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y arrancar
temporizador como retardo a la conexión":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador de la instruc‐
ción
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, D, L

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Valor de tiempo predetermi‐
nado

R

Input

BOOL

I, Q, M, D, L, T, C,
P

Entrada de reset

BI

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en binario)

BCD

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L

Estado del temporizador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

4844

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como retardo a la conexión":
W

W

W

5/2HQHQWUDGD6

5/2HQHQWUDGD5

(OWLHPSRFRUUH

&RQVXOWD

&RQVXOWD
W WLHPSRSURJUDPDGR

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7LPHUBಯ
ಯ7DJ,QBಯ
ಯ7DJ,QB1XPEHUಯ
ಯ7DJ,QBಯ

6B(9(5=

ಯ7DJ2XWಯ

6

4

79

%,

ಯ7DJ9DOXHBಯ

%&'

ಯ7DJ9DOXHBಯ

5



Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador cuenta el valor de tiempo del operando "TagIn_Number".
Una vez transcurrido el tiempo y si el operando tiene el estado lógico "1", el operando "TagOut"
se pone a "1". Si el estado lógico del operando "TagIn_1" cambia de "1" a "0" antes de que
transcurra el tiempo, el temporizador se detiene. El operando "TagOut" devuelve en ese caso
el estado lógico "0".

Programación del PLC
Manual de programación y manejo, 11/2019

4845

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 5383)
Principios básicos de KOP (Página 7943)

S_ODTS: Parametrizar y arrancar temporizador como retardo a la conexión con memoria
Descripción
Con la instrucción "Parametrizar y arrancar temporizador como retardo a la conexión con
memoria" se arranca un temporizador programado al detectarse un cambio en el resultado
lógico (RLO) de "0" a "1" (flanco de señal ascendente) en la entrada S. El temporizador cuenta
el tiempo programado (TV), aunque el estado lógico de la entrada S cambie a "0". Una vez
transcurrido el tiempo, la salida Q devuelve el estado lógico "1" independientemente del estado
lógico de la entrada S. Si el estado lógico de la entrada S cambia de "0" a "1" mientras se
cuenta el tiempo, el temporizador vuelve a arrancar con el tiempo programado (TV).
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo. El valor de tiempo actual se emite codificado en binario por la salida
BI y codificado en BCD por la salida BCD.
El estado lógico "1" de la entrada R pone a "0" el valor actual de tiempo y la base de tiempo,
independientemente del estado lógico de la entrada de arranque S. En ese caso, el estado
lógico de la salida Q es "0".
La instrucción "Parametrizar y arrancar temporizador como retardo a la conexión con
memoria" requiere una operación lógica precedente para la evaluación de flancos y se puede
colocar dentro o en el extremo del segmento.
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

4846

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y arrancar
temporizador como retardo a la conexión con memoria":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador de la instruc‐
ción
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, D, L

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Valor de tiempo predetermi‐
nado

R

Input

BOOL

I, Q, M, D, L, T, C,
P

Entrada de reset

BI

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en binario)

BCD

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L

Estado del temporizador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como retardo a la conexión con memoria":
W

W

W

5/2HQHQWUDGD6

5/2HQHQWUDGD5

(OWLHPSRFRUUH

&RQVXOWD
&RQVXOWD
W WLHPSRSURJUDPDGR

Programación del PLC
Manual de programación y manejo, 11/2019

4847

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7LPHUBಯ
ಯ7DJ,QBಯ
ಯ7DJ,QB1XPEHUಯ
ಯ7DJ,QBಯ

6B2'76

ಯ7DJ2XWಯ

6

4

79

%,

ಯ7DJ9DOXHBಯ

%&'

ಯ7DJ9DOXHBಯ

5

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador cuenta el valor de tiempo del operando "TagIn_Number"
aunque el estado lógico del operando "TagIn_1" cambie a "0". Una vez transcurrido el tiempo,
el operando "TagOut" se pone a "1". Si el estado lógico del operando "TagIn_1" cambia de "0"
a "1" mientras el temporizador está en marcha, se reinicia el temporizador.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 5383)
Principios básicos de KOP (Página 7943)

S_OFFDT: Parametrizar y arrancar temporizador como retardo a la desconexión
Descripción
Con la instrucción "Parametrizar y arrancar temporizador como retardo a la desconexión" se
arranca un temporizador programado al detectarse un cambio en el resultado lógico (RLO) de
"1" a "0" (flanco de señal descendente) en la entrada S. El temporizador empieza a contar con
el tiempo programado (TV). Mientras el temporizador está en marcha o la entrada S devuelve
el estado lógico "1", la salida Q tiene el estado lógico "1". Una vez transcurrido el tiempo y si
el estado lógico en la entrada S es "0", el estado lógico de la salida Q se pone a "0". Si el estado
lógico en la entrada S cambia de "0" a "1" mientras el temporizador está funcionando, este se
detiene. El temporizador no vuelve a arrancar hasta que no se detecta un flanco de señal
descendente en la entrada S.
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo. El valor de tiempo actual se emite codificado en binario por la salida
BI y codificado en BCD por la salida BCD.
El estado lógico "1" en la entrada R pone a "0" el valor de tiempo y la base de tiempo actuales.
En ese caso, el estado lógico de la salida Q es "0".
La instrucción "Parametrizar y arrancar temporizador como retardo a la desconexión" requiere
una operación lógica precedente para la evaluación de flancos y se puede colocar dentro o en
el extremo del segmento.

4848

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y arrancar
temporizador como retardo a la desconexión":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador de la instruc‐
ción
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, D, L

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Valor de tiempo predetermi‐
nado

R

Input

BOOL

I, Q, M, D, L, T, C,
P

Entrada de reset

BI

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en binario)

BCD

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L

Estado del temporizador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

4849

Instrucciones
4.2 Instrucciones

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como retardo a la desconexión":
W

W

W

W

5/2HQHQWUDGD6

5/2HQHQWUDGD5

(OWLHPSRFRUUH

&RQVXOWD

&RQVXOWD
W WLHPSRSURJUDPDGR

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7LPHUBಯ
ಯ7DJ,QBಯ
ಯ7DJ,QB1XPEHUಯ
ಯ7DJ,QBಯ

6B2))'7

ಯ7DJ2XWಯ

6

4

79

%,

ಯ7DJ9DOXHBಯ

%&'

ಯ7DJ9DOXHBಯ

5



Cuando el estado lógico del operando "TagIn_1" cambia de "1" a "0", el temporizador "Timer_1"
se pone en marcha. El temporizador cuenta el valor de tiempo del operando "TagIn_Number".
El operando "TagOut" devuelve el estado lógico "1" mientras el temporizador está en marcha
o el operando "TagIn_1" tiene el estado lógico "0". Si el estado lógico del operando "TagIn_1"
cambia de "0" a "1" mientras el temporizador está en marcha, el temporizador se reinicia.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 5383)
Principios básicos de KOP (Página 7943)

4850

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

---( SP ): Arrancar temporizador como impulso
Descripción
Con la instrucción "Arrancar temporizador como impulso" se arranca un temporizador
programado al detectarse un cambio en el resultado lógico (RLO) de "0" a "1" (flanco de señal
ascendente). El temporizador cuenta el tiempo indicado mientras el RLO devuelva el estado
lógico "1". Mientras el temporizador está en marcha, una consulta de si el estado del
temporizador es "1" da como resultado "1". Si el RLO cambia de "1" a "0" antes de que haya
transcurrido el valor de tiempo, el temporizador se detiene. En ese caso, una consulta de si el
estado del temporizador es "1" da como resultado "0".
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo. Cuando
se inicia la instrucción, el valor de tiempo programado se cuenta hacia atrás hasta cero. La
base de tiempo indica con qué periodo de tiempo se modifica el valor de tiempo.
La instrucción "Arrancar temporizador como impulso" requiere una operación lógica
precedente para la evaluación de flancos y solo se puede colocar en el margen derecho del
segmento.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
impulso":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Tiempo>

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo que cuenta el tempo‐
rizador.

<Temporiza‐
dor>

Output

TIMER

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

4851

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR

6HJPHQWR

ಯ7DJ,QBಯ

ಯ7LPHUBಯ
63
ಯ7DJ,QB1XPEHUಯ

ಯ7LPHUBಯ

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

ಯ7LPHUBಯ
5

6HJPHQWR

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador empieza a contar con el valor de tiempo del operando
"TagIn_Number" y sigue contando mientras el operando "TagIn_1" devuelva el estado lógico
"1". Si el estado lógico del operando "TagIn_1" cambia de "1" a "0" antes de que transcurra el
tiempo, el temporizador se detiene. Mientras el temporizador está en marcha, el operando
"TagOut" devuelve el estado lógico "1". Si el estado lógico del operando "TagIn_2" cambia de
"0" a "1", el temporizador se inicializa, es decir, se detiene y el valor de tiempo actual se pone
a "0".
La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJ,QBಯ

'HVDFWLYDU

ಯ7DJ,QBಯ

7HPSRUL]DGRU

ಯ7LPHUBಯ

6DOLGD

ಯ7DJ2XWಯ

W

W WLHPSRSURJUDPDGR

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 5383)
Principios básicos de KOP (Página 7943)

4852

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

---( SE ): Arrancar temporizador como impulso prolongado
Descripción
Con la instrucción "Arrancar temporizador como impulso prolongado" se arranca un
temporizador programado al detectarse un cambio en el resultado lógico (RLO) de "0" a "1"
(flanco de señal ascendente). El temporizador cuenta el tiempo indicado, aunque el RLO
cambie al estado lógico "0". Mientras el temporizador está en marcha, una consulta de si el
estado del temporizador es "1" da como resultado "1". Si el RLO cambia de "0" a "1" mientras
el temporizador está funcionando, este se arranca de nuevo con el tiempo programado. La
consulta sobre si el estado es "1" da como resultado "0" si el tiempo ha transcurrido.
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo. Cuando
se inicia la instrucción, el valor de tiempo programado se cuenta hacia atrás hasta cero. La
base de tiempo indica con qué periodo de tiempo se modifica el valor de tiempo.
La instrucción "Arrancar temporizador como impulso prolongado" requiere una operación
lógica precedente para la evaluación de flancos y solo se puede colocar en el margen derecho
del segmento.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización aquí: L: Cargar valor del
temporizador (Página 5383)

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
impulso prolongado":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Tiempo>

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo que cuenta el tempo‐
rizador.

<Temporiza‐
dor>

Output

TIMER

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

4853

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR

6HJPHQWR

ಯ7DJ,QBಯ

ಯ7LPHUBಯ
6(
ಯ7DJ,QB1XPEHUಯ

ಯ7LPHUBಯ

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

ಯ7LPHUBಯ
5

6HJPHQWR

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador empieza a contar con el valor de tiempo del operando
"TagIn_Number" sin verse afectado por un flanco de señal descendente en el RLO. Mientras
el temporizador está en marcha, el operando "TagOut" devuelve el estado lógico "1". Si el
estado lógico del operando "TagIn_1" vuelve a cambiar de "0" a "1" antes de que transcurra el
tiempo, el temporizador se inicializa.
La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJ,QBಯ

'HVDFWLYDU

ಯ7DJ,QBಯ

7HPSRUL]DGRU

ಯ7LPHUBಯ

6DOLGD

ಯ7DJ2XWಯ

W

W WLHPSRSURJUDPDGR

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

4854

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

---( SD ): Arrancar temporizador como retardo a la conexión
Descripción
La instrucción "Arrancar temporizador como retardo a la conexión" arranca un temporizador
programado al detectarse el estado lógico "1" en la entrada de arranque. Mientras se
mantenga el estado lógico "1", el temporizador contará el tiempo indicado. Una vez
transcurrido el tiempo y si el estado lógico en la entrada de arranque sigue siendo "1", la
consulta del estado del temporizador también dará como resultado "1". Si la señal de la entrada
de arranque es "0", el temporizador se inicializa. En ese caso, la consulta del estado del
temporizador devuelve el estado lógico "0". En cuanto la señal en la entrada de arranque
vuelve a cambiar a "1", el temporizador vuelve a contar el tiempo.
El estado lógico de la salida del temporizador es idéntico al de la entrada de arranque. La
entrada de arranque está interconectada directamente con la salida y no tiene relación con el
temporizador.
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización aquí: L: Cargar valor del
temporizador (Página 5383)

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
retardo a la conexión":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Tiempo>

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo que cuenta el tempo‐
rizador.

<Temporiza‐
dor>

Output

TIMER

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

4855

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR

6HJPHQWR

ಯ7DJ,QBಯ

ಯ7LPHUBಯ
6'
ಯ7DJ,QB1XPEHUಯ

ಯ7LPHUBಯ

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

ಯ7LPHUBಯ
5

6HJPHQWR

Segmento 1:
Cuando el estado lógico del operando #TagIn_1 cambia de "0" a "1", el temporizador #Timer_1
arranca. El temporizador cuenta el valor de tiempo del operando #TagIn_Number. Si el estado
lógico del operando #TagIn_1 cambia de "1" a "0" antes de que transcurra el tiempo, el
temporizador se inicializa.
Segmento 2:
Si ha transcurrido el tiempo y el estado lógico del operando #TagIn_1 en la entrada de
arranque es "1" y el temporizador no se ha inicializado, el operando #TagOut es "1".
Segmento 3:
Si el estado lógico del operando #TagIn_2 es "1", se inicializan el temporizador #Timer_1 y la
salida #TagOut.
Si desea volver a arrancar el #Timer_1, el estado lógico en el operando #TagIn_2 debe ser "0"
y el estado lógico en la entrada de arranque #TagIn_1 debe cambiar de "0" a "1".
La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJ,QBಯ

'HVDFWLYDU

ಯ7DJ,QBಯ

7HPSRUL]DGRU

ಯ7LPHUBಯ

6DOLGD

ಯ7DJ2XWಯ

W

W

W WLHPSRSURJUDPDGR

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

4856

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

---( SS ): Arrancar temporizador como retardo a la conexión con memoria
Descripción
Con la instrucción "Arrancar temporizador como retardo a la conexión con memoria" se
arranca un temporizador programado al detectarse un cambio en el resultado lógico (RLO) de
"0" a "1" (flanco de señal ascendente). El temporizador cuenta el tiempo indicado, aunque el
RLO cambie al estado lógico "0". Si ha transcurrido el tiempo, una consulta de si el estado del
temporizador es "1" da como resultado "1". Una vez transcurrido el tiempo, el temporizador no
puede volver a ponerse en marcha hasta que no se haya reiniciado explícitamente.
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo. Cuando
se inicia la instrucción, el valor de tiempo programado se cuenta hacia atrás hasta cero. La
base de tiempo indica con qué periodo de tiempo se modifica el valor de tiempo.
La instrucción "Arrancar temporizador como retardo a la conexión con memoria" requiere una
operación lógica precedente para la evaluación de flancos y solo se puede colocar en el
margen derecho del segmento.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización aquí: L: Cargar valor del
temporizador (Página 5383)

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
retardo a la conexión con memoria":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Tiempo>

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo que cuen‐
ta el temporizador.

<Temporizador>

Output

TIMER

T

Temporizador que
arranca.
El número de tem‐
porizadores de‐
pende de la CPU.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

4857

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR

6HJPHQWR

ಯ7DJ,QBಯ

ಯ7LPHUBಯ
66
ಯ7DJ,QB1XPEHUಯ

ಯ7LPHUBಯ

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

ಯ7LPHUBಯ
5

6HJPHQWR

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador cuenta el valor de tiempo del operando "TagIn_Number".
Una vez transcurrido el tiempo, el operando "TagOut" se pone a "1". Si el estado lógico del
operando "TagIn_1" cambia de "0" a "1" mientras el temporizador está en marcha, se reinicia
el temporizador. Si el estado lógico del operando "TagIn_2" es "1", el temporizador "Timer_1"
se reinicia, es decir, que se detiene y el valor de tiempo actual se pone a "0".
La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJ,QBಯ

'HVDFWLYDU

ಯ7DJ,QBಯ

7HPSRUL]DGRU

ಯ7LPHUBಯ

6DOLGD

ಯ7DJ2XWಯ

W

W WLHPSRSURJUDPDGR

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

4858

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

---( SF ): Arrancar temporizador como retardo a la desconexión
Descripción
Con la instrucción "Arrancar temporizador como retardo a la desconexión" se arranca un
temporizador programado al detectarse un cambio en el resultado lógico (RLO) de "1" a "0"
(flanco de señal descendente). El temporizador empieza a contar con el tiempo indicado.
Mientras el temporizador está en marcha, una consulta de si el estado del temporizador es "1"
da como resultado "1". Si el RLO cambia de "0" a "1" mientras se ejecuta el temporizador, este
se inicializa. El temporizador siempre arranca de nuevo cuando el RLO cambia de "1" a "0".
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo. Cuando
se inicia la instrucción, el valor de tiempo programado se cuenta hacia atrás hasta cero. La
base de tiempo indica con qué periodo de tiempo se modifica el valor de tiempo.
Las consultas de si el estado del temporizador es "1" dan como resultado "1" si el estado del
resultado lógico al ejecutar la instrucción es "1". Si el RLO está a "0", las consultas de si el
estado del temporizador es "1" dan como resultado "0".
La instrucción "Arrancar temporizador como retardo a la desconexión" requiere una operación
lógica precedente para la evaluación de flancos y solo se puede colocar en el margen derecho
del segmento.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización aquí: L: Cargar valor del
temporizador (Página 5383)

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
retardo a la desconexión":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Tiempo>

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo que cuenta el tempo‐
rizador.

<Temporiza‐
dor>

Output

TIMER

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

4859

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR

6HJPHQWR

ಯ7DJ,QBಯ

ಯ7LPHUBಯ
6)
ಯ7DJ,QB1XPEHUಯ

ಯ7LPHUBಯ

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

ಯ7LPHUBಯ
5

6HJPHQWR

Cuando el estado lógico del operando "TagIn_1" cambia de "1" a "0", el temporizador "Timer_1"
arranca. El temporizador cuenta el valor de tiempo del operando "TagIn_Number". Mientras el
temporizador está en marcha, el operando "TagOut" se pone a "1". Si el estado lógico del
operando "TagIn_1" cambia de "1" a "0" mientras el temporizador está en marcha, se reinicia
el temporizador. Si el estado lógico del operando "TagIn_2" es "1", el temporizador "Timer_1"
se reinicia, es decir, que se detiene y el valor de tiempo actual se pone a "0".
La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJ,QBಯ

'HVDFWLYDU

ಯ7DJ,QBಯ

7HPSRUL]DGRU

ಯ7LPHUBಯ
W

6DOLGD

W

ಯ7DJ2XWಯ
W WLHPSRSURJUDPDGR

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

4860

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Contadores
Contadores CEI
CTU: Contador ascendente
Descripción
La instrucción "Contador ascendente" incrementa el valor en la salida CV. Cuando el estado
lógico de la entrada CU cambia de "0" a "1" (flanco de señal ascendente), se ejecuta la
instrucción y el valor actual de contaje de la salida CV se incrementa en uno. El valor de contaje
se incrementa cada vez que se detecta un flanco de señal ascendente, hasta alcanzar el valor
límite superior del tipo de datos (INT) indicado en la salida CV. Cuando se alcanza el valor
límite superior, el estado lógico de la entrada CU deja de tener efecto en la instrucción.
El estado del contador se puede consultar en la salida Q. El estado lógico de la salida Q es
determinado por el parámetro PV. Si el valor de contaje actual es mayor o igual al valor del
parámetro PV, la salida Q adopta el estado lógico "1". En todos los demás casos, el estado
lógico de la salida Q es "0". En el parámetro PV también se puede indicar una constante.
El valor de la salida CV se pone a cero cuando el estado lógico de la entrada R cambia a "1".
Mientras la entrada R tenga el estado lógico "1", el estado lógico de la entrada CU no tendrá
efecto alguno en la instrucción.
A cada llamada de la instrucción "Contador ascendente" debe asignársele un contador CEI, en
el que se guarden los datos de la instrucción. Un contador CEI se declara del siguiente modo:
● Declaración de un bloque de datos del tipo CTU (p. ej., "CTU_DB")
● Declaración como variable local del tipo CTU en la sección "Static" de un bloque (p. ej.,
#MyCTU_COUNTER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el contador CEI se deposita en un bloque de
datos propio (instancia individual), o bien como variable local (multiinstancia) en la interfaz del
bloque. Si crea un bloque de datos propio, lo encontrará bajo "Bloques de programa > Bloques
de sistema" en la carpeta "Recursos de programa", en el árbol del proyecto. Encontrará más
información al respecto en "Consulte también".
El sistema operativo inicializa las instancias de la instrucción "Contador ascendente" cuando
se realiza un arranque en frío. Si deben inicializarse instancias de la instrucción tras un
rearranque completo (en caliente), las instancias por inicializar deben llamarse en un OB de
arranque con el valor "1" en el parámetro R de la instrucción. Si un bloque diferente contiene
instancias de la instrucción "Contador ascendente", estas pueden resetearse p. ej.
inicializando el bloque de nivel superior.
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
Para poder ejecutar la instrucción "Contador ascendente" se requiere una operación lógica
precedente. Se puede colocar dentro o al final del segmento.

Programación del PLC
Manual de programación y manejo, 11/2019

4861

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contador ascendente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CU

Input

BOOL

I, Q, M, D, L

Entrada de contaje

R

Input

BOOL

I, Q, M, D, L, T, C,
P

Entrada de reset

PV

Input

INT

I, Q, M, D, L, P o
constante

Valor con el que se activa la
salida Q.

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

CV

Output

INT

I, Q, M, D, L, P

Valor de contaje actual

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&78B'%ಯ
&78
ಯ7DJ,QBಯ
ಯ7DJ,QBಯ
ಯ7DJB39ಯ

,17
&8

4

5

&9

ಯ7DJ2XWಯ

ಯ7DJB&9ಯ

39

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", se ejecuta la instrucción
"Contador ascendente" y el valor actual de contaje del operando "Tag_CV" se incrementa en
uno. Con cada flanco de señal ascendente posterior, el valor de contaje irá incrementando
hasta alcanzar el valor límite superior del tipo de datos (INT = 32767).
El valor del parámetro PV se utiliza como límite para determinar la salida "TagOut". La salida
"TagOut" devuelve el estado lógico "1" mientras el valor actual de contaje sea mayor o igual al
valor del operando "Tag_PV". En todos los demás casos, la salida "TagOut" devuelve el estado
lógico "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de KOP (Página 7943)

4862

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

CTD: Contador descendente
Descripción
La instrucción "Contador descendente" decrementa el valor de la salida CV. Cuando el estado
lógico de la entrada CD cambia de "0" a "1" (flanco de señal ascendente), se ejecuta la
instrucción y el valor actual de contaje de la salida CV se decrementa en uno. Cada vez que
se detecta un flanco de señal ascendente, el valor de contaje se decrementa hasta alcanzar el
valor límite inferior del tipo de datos (INT) indicado. Cuando se alcanza el valor límite inferior,
el estado lógico de la entrada CD deja de tener efecto en la instrucción.
El estado del contador se puede consultar en la salida Q. Si el valor de contaje actual es menor
o igual a cero, la salida Q adopta el estado lógico "1". En todos los demás casos, el estado
lógico de la salida Q es "0". En el parámetro PV también se puede indicar una constante.
El valor de la salida CV se pone al valor del parámetro PV cuando el estado lógico de la entrada
LD cambia a "1". Mientras la entrada LD tenga el estado lógico "1", el estado lógico de la
entrada CD no tendrá efecto alguno en la instrucción.
A cada llamada de la instrucción "Contador descendente" debe asignársele un contador CEI,
en el que se guarden los datos de la instrucción. Un contador CEI se declara del siguiente
modo:
● Declaración de un bloque de datos del tipo CTD (p. ej., "CTD_DB")
● Declaración como variable local del tipo CTD en la sección "Static" de un bloque (p. ej.,
#MyCTD_COUNTER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el contador CEI se deposita en un bloque de
datos propio (instancia individual), o bien como variable local (multiinstancia) en la interfaz del
bloque. Si crea un bloque de datos propio, lo encontrará bajo "Bloques de programa > Bloques
de sistema" en la carpeta "Recursos de programa", en el árbol del proyecto. Encontrará más
información al respecto en "Consulte también".
El sistema operativo inicializa las instancias de la instrucción "Contador descendente" cuando
se realiza un arranque en frío. Si deben inicializarse instancias de la instrucción tras un
rearranque completo (en caliente), las instancias por inicializar deben llamarse en un OB de
arranque con el valor "1" en el parámetro LD de la instrucción. En el parámetro PV se indica en
este caso el valor inicial deseado para el parámetro CV.
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
Para poder ejecutar la instrucción "Contador descendente" se requiere una operación lógica
precedente. Se puede colocar dentro o al final del segmento.

Programación del PLC
Manual de programación y manejo, 11/2019

4863

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contador descendente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CD

Input

BOOL

I, Q, M, D, L

Entrada de contaje

LD

Input

BOOL

I, Q, M, D, L, P

Entrada de carga

PV

Input

INT

I, Q, M, D, L, P o
constante

Valor al que se pone la salida
CV cuando LD = 1.

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

CV

Output

INT

I, Q, M, D, L, P

Valor de contaje actual

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&7'B'%ಯ
&7'
ಯ7DJ,QBಯ
ಯ7DJ,QBಯ
ಯ7DJB39ಯ

,17
&'

4

/'

&9

ಯ7DJ2XWಯ

ಯ7DJB&9ಯ

39

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", se ejecuta la instrucción
y el valor de la salida "Tag_CV" se decrementa en uno. Con cada flanco de señal ascendente
posterior, el valor de contaje irá decrementando hasta alcanzar el valor límite inferior del tipo
de datos (INT = -32768).
La salida "TagOut" devuelve el estado lógico "1" mientras el valor de contaje actual sea menor
o igual a cero. En todos los demás casos, la salida "TagOut" devuelve el estado lógico "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de KOP (Página 7943)

4864

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

CTUD: Contador ascendente - descendente
Descripción
La instrucción "Contador ascendente - descendente" incrementa y decrementa el valor de
contaje en la salida CV. Cuando el estado lógico de la entrada CU cambia de "0" a "1" (flanco
de señal ascendente), el valor de contaje actual se incrementa en uno y se deposita en la salida
CV. Cuando el estado lógico de la entrada CD cambia de "0" a "1" (flanco de señal
ascendente), el valor de contaje de la salida CV se decrementa en uno. Si en un ciclo del
programa se detecta un flanco de señal ascendente en las entradas CU y CD, el valor actual
de contaje no se modifica en la salida CV.
El valor de contaje se puede seguir incrementando hasta alcanzar el valor límite superior del
tipo de datos (INT) indicado en la salida CV. Una vez alcanzado el valor límite superior, el valor
de contaje ya no se incrementa al detectarse un flanco de señal ascendente. Cuando se
alcanza el valor límite inferior del tipo de datos indicado (INT), ya no se decrementa el valor de
contaje.
Si el estado lógico de la entrada LD cambia a "1", el valor de contaje de la salida CV adopta el
valor del parámetro PV. Mientras la entrada LD tenga el estado lógico "1", el estado lógico de
las entradas CU y CD no tendrá efecto alguno en la instrucción.
El valor de contaje se pone a cero si el estado lógico de la entrada R cambia a "1". Mientras la
entrada R tenga el estado lógico "1", un cambio del estado lógico de las entradas CU, CD y LD
no tendrá efecto alguno en la instrucción "Contador ascendente - descendente".
El estado del contador ascendente se puede consultar en la salida QU. Si el valor actual de
contaje es mayor o igual al valor del parámetro PV, la salida QU adopta el estado lógico "1". En
todos los demás casos, el estado lógico de la salida QU es "0".
El estado del contador descendente se puede consultar en la salida QD. Si el valor actual de
contaje es menor o igual a cero, la salida QD adopta el estado lógico "1". En todos los demás
casos, el estado lógico de la salida QD es "0".
A cada llamada de la instrucción "Contador ascendente - descendente" debe asignársele un
contador CEI en el que se guarden los datos de la instrucción. Un contador CEI se declara del
siguiente modo:
● Declaración de un bloque de datos del tipo CTUD (p. ej., "CTUD_DB")
● Declaración como variable local del tipo CTUD en la sección "Static" de un bloque (p. ej.,
#MyCTUD_COUNTER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el contador CEI se deposita en un bloque de
datos propio (instancia individual), o bien como variable local (multiinstancia) en la interfaz del
bloque. Si crea un bloque de datos propio, lo encontrará en el árbol del proyecto, en la carpeta
"Recursos de programa", en "Bloques de programa > Bloques de sistema". Encontrará más
información al respecto en "Consulte también".
El sistema operativo inicializa las instancias de la instrucción "Contador ascendente descendente" cuando se realiza un arranque en frío. Si deben inicializarse instancias tras un

Programación del PLC
Manual de programación y manejo, 11/2019

4865

Instrucciones
4.2 Instrucciones
rearranque completo (en caliente), las instancias por inicializar deben llamarse en un OB de
arranque con los siguientes valores de parámetros:
● Si se utiliza como contador ascendente, el valor del parámetro R debe ponerse a "1".
● Si se utiliza como contador descendente, el valor del parámetro LD debe ponerse a "1". En
el parámetro PV debe indicarse en este caso el valor inicial deseado del parámetro CV.
Si un bloque diferente contiene instancias de la instrucción "Contador ascendente descendente", estas pueden resetearse p. ej. inicializando el bloque de nivel superior.
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
Para poder ejecutar la instrucción "Contador ascendente - descendente" se requiere una
operación lógica precedente. Se puede colocar dentro o al final del segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contador ascendente descendente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CU

Input

BOOL

I, Q, M, D, L

Entrada de contaje ascen‐
dente

CD

Input

BOOL

I, Q, M, D, L

Entrada de contaje descen‐
dente

R

Input

BOOL

I, Q, M, D, L, T, C,
P

Entrada de reset

LD

Input

BOOL

I, Q, M, D, L, P

Entrada de carga

PV

Input

INT

I, Q, M, D, L, P o
constante

Valor con el que se activa la
salida QU. / Valor al que se
ajusta la salida CV cuando
LD = 1.

QU

Output

BOOL

I, Q, M, D, L

Estado de los contadores as‐
cendentes

QD

Output

BOOL

I, Q, M, D, L

Estado de los contadores
descendentes

CV

Output

INT

I, Q, M, D, L, P

Valor de contaje actual

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

4866

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&78'B'%ಯ
&78'
,17

ಯ7DJ,QBಯ

ಯ7DJ2XWಯ

&8

48

&'

4'

ಯ7DJ2XWB4'ಯ

5

&9

ಯ7DJB&9ಯ

ಯ7DJ,QBಯ
ಯ7DJ,QBಯ
ಯ7DJ,QBಯ
/'
ಯ7DJB39ಯ

39

Si el estado lógico de la entrada "TagIn_1" o "TagIn_2" cambia de "0" a "1" (flanco de señal
ascendente), se ejecuta la instrucción "Contador ascendente - descendente". Cuando se
detecta un flanco de señal ascendente en la entrada "TagIn_1", el valor de contaje actual se
incrementa en uno y se deposita en la salida "Tag_CV". Si se detecta un flanco de señal
ascendente en la entrada "TagIn_2", el valor de contaje se decrementa en uno y se deposita
en la salida "Tag_CV". Si se detecta un flanco de señal ascendente en la entrada CU, el valor
de contaje se sigue incrementando hasta alcanzar el valor límite superior (32767). Cuando se
detecta un flanco de señal ascendente en la entrada CD, el valor de contaje se decrementa
hasta alcanzar el valor límite inferior INT = -32768.
La salida "TagOut" devuelve el estado lógico "1" mientras el valor actual de contaje sea mayor
o igual al valor de la entrada "Tag_PV". En todos los demás casos, la salida "TagOut" devuelve
el estado lógico "0".
La salida "TagOut_QD" devuelve el estado lógico "1" mientras el valor de contaje actual sea
menor o igual a cero. En todos los demás casos, la salida "TagOut_QD" devuelve el estado
lógico "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)
Instancias (Página 61)

Programación del PLC
Manual de programación y manejo, 11/2019

4867

Instrucciones
4.2 Instrucciones

Contadores SIMATIC
S_CU: Parametrizar e incrementar contador
Descripción
La instrucción "Parametrizar e incrementar contador" permite incrementar el valor de un
contador. Cuando el estado lógico de la entrada CU cambia de "0" a "1" (flanco de señal
ascendente), el valor de contaje actual se incrementa en uno. El valor de contaje actual se
emite en formato hexadecimal en la salida CV y codificado en BCD en la salida CV_BCD. El
valor de contaje sigue incrementando hasta alcanzar el límite de "999". Una vez alcanzado el
valor límite, el valor de contaje no se incrementa al detectarse un flanco de señal ascendente.
Cuando el estado lógico de la entrada S cambia de "0" a "1", el valor de contaje adopta el valor
del parámetro PV. Si el contador se activa y el RLO de la entrada CU es "1", el contador cuenta
una única vez en el ciclo siguiente aunque no se detecte ningún cambio de flanco.
El valor de contaje se pone a cero si el estado lógico de la entrada R cambia a "1". Mientras la
entrada R tenga el estado lógico "1", el estado lógico de las entradas CU y S no tendrá ningún
efecto sobre el valor de contaje.
El estado lógico en la salida Q es "1" si el valor de contaje es superior a cero. Si el valor de
contaje es igual a cero, la salida Q devuelve el estado lógico "0".
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
La instrucción "Parametrizar e incrementar contador" requiere una operación lógica
precedente para la evaluación de flancos y se puede colocar dentro o en el extremo del
segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar e incrementar
contador":

4868

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Contado‐
res>

InOut

COUNTER

C

Contador de la instrucción

CU

Input

BOOL

I, Q, M, D, L

Entrada de contaje ascen‐
dente

S

Input

BOOL

I, Q, M, D, L, T, C

Entrada para preajustar el
contador

PV

Input

WORD

I, Q, M, D, L, P

Valor de contaje predetermi‐
nado (C#0 a C#999)

R

Input

BOOL

I, Q, M, D, L, T, C

Entrada de reset

CV

Output

WORD, S5TIME,
DATE

I, Q, M, D, L, P

Valor de contaje actual (he‐
xadecimal)

El número de contadores de‐
pende de la CPU.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CV_BCD

Output

WORD, S5TIME,
DATE

I, Q, M, D, L, P

Valor de contaje actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&RXQWHUBಯ
6B&8

ಯ7DJ,QBಯ
&8

ಯ7DJ2XWಯ
4

ಯ7DJ,QBಯ
6
ಯ7DJ3UHVHW9DOXHಯ
ಯ7DJ,QBಯ

39
5

&9

ಯ7DJ9DOXHBಯ

&9B%&'

ಯ7DJ9DOXHBಯ

Cuando el estado lógico de la entrada "TagIn_1" cambia de "0" a "1" (flanco de señal
ascendente) y el valor de contaje actual es menor que "999", este valor se incrementará en
uno. Si el estado lógico de la entrada "TagIn_2" cambia de "0" a "1", el valor de contaje adopta
el valor del operando "TagPresetValue". El valor de contaje se pone a "0" si el operando
"TagIn_3" tiene el estado lógico "1".
El valor de contaje actual se memoriza en formato hexadecimal en el operando "TagValue_1"
y codificado en BCD en el operando "TagValue_2".
La salida "TagOut" devuelve el estado lógico "1" mientras el valor de contaje actual sea
diferente a "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

4869

Instrucciones
4.2 Instrucciones

S_CD: Parametrizar y decrementar contador
Descripción
La instrucción "Parametrizar y decrementar contador" permite decrementar el valor de un
contador. Cuando el estado lógico de la entrada CD cambia de "0" a "1" (flanco de señal
ascendente), el valor de contaje actual se decrementa en uno. El valor de contaje actual se
emite en formato hexadecimal en la salida CV y codificado en BCD en la salida CV_BCD. El
valor de contaje sigue decrementando hasta alcanzar el límite inferior "0". Una vez alcanzado
el valor límite inferior, el valor de contaje no se decrementa más al detectarse un flanco de
señal ascendente.
Cuando el estado lógico de la entrada S cambia de "0" a "1", el valor de contaje adopta el valor
del parámetro PV. Si el contador se activa y el RLO de la entrada CD es "1", el contador cuenta
una única vez en el ciclo siguiente aunque no se detecte ningún cambio de flanco.
El valor de contaje se pone a cero si el estado lógico de la entrada R cambia a "1". Mientras la
entrada R tenga el estado lógico "1", el estado lógico de las entradas CD y S no tiene ningún
efecto sobre el valor de contaje.
El estado lógico en la salida Q es "1" si el valor de contaje es superior a cero. Si el valor de
contaje es igual a cero, la salida Q devuelve el estado lógico "0".
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
La instrucción "Parametrizar y decrementar contador" requiere una operación lógica
precedente para la evaluación de flancos y se puede colocar dentro o en el extremo del
segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y decrementar
contador":

4870

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Contado‐
res>

InOut

COUNTER

C

Contador de la instrucción

CD

Input

BOOL

I, Q, M, D, L

Entrada de contaje descen‐
dente

S

Input

BOOL

I, Q, M, D, L, T, C

Entrada para preajustar el
contador

PV

Input

WORD

I, Q, M, D, L, P

Valor de contaje predetermi‐
nado (C#0 a C#999)

R

Input

BOOL

I, Q, M, D, L, T, C

Entrada de reset

CV

Output

WORD, S5TIME,
DATE

I, Q, M, D, L, P

Valor de contaje actual (he‐
xadecimal)

El número de contadores de‐
pende de la CPU.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CV_BCD

Output

WORD, S5TIME,
DATE

I, Q, M, D, L, P

Valor de contaje actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&RXQWHUBಯ
6B&'

ಯ7DJ,QBಯ
&'

ಯ7DJ2XWಯ
4

ಯ7DJ,QBಯ
6
ಯ7DJ3UHVHW9DOXHಯ
ಯ7DJ,QBಯ

39
5

&9

ಯ7DJ9DOXHBಯ

&9B%&'

ಯ7DJ9DOXHBಯ

Cuando el estado lógico de la entrada "TagIn_1" cambia de "0" a "1" (flanco de señal
ascendente) y el valor de contaje actual es mayor que "0", este valor se decrementará en uno.
Si el estado lógico de la entrada "TagIn_2" cambia de "0" a "1", el valor de contaje adopta el
valor del operando "TagPresetValue". El valor de contaje se pone a "0" si el operando
"TagIn_3" tiene el estado lógico "1".
El valor de contaje actual se memoriza en formato hexadecimal en el operando "TagValue_1"
y codificado en BCD en el operando "TagValue_2".
La salida "TagOut" devuelve el estado lógico "1" mientras el valor de contaje actual sea
diferente a "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

4871

Instrucciones
4.2 Instrucciones

S_CUD: Parametrizar e incrementar/decrementar contador
Descripción
La instrucción "Parametrizar e incrementar/decrementar contador" permite incrementar y
decrementar el valor de un contador. Cuando el estado lógico de la entrada CU cambia de "0"
a "1" (flanco de señal ascendente), el valor de contaje actual se incrementa en uno. Cuando el
estado lógico de la entrada CD cambia de "0" a "1" (flanco de señal ascendente), el valor de
contaje se decrementa en uno. El valor de contaje actual se emite en formato hexadecimal en
la salida CV y codificado en BCD en la salida CV_BCD. Si en un ciclo del programa se detecta
un flanco de señal ascendente en las entradas CU y CD, el valor de contaje no se modifica.
El valor de contaje sigue incrementando hasta alcanzar el límite superior "999". Una vez
alcanzado el valor límite superior, el valor de contaje no se incrementa al detectarse un flanco
de señal ascendente. Cuando se alcanza el valor límite inferior "0", no se decrementa más el
valor de contaje.
Cuando el estado lógico de la entrada S cambia de "0" a "1", el valor de contaje adopta el valor
del parámetro PV. Si se inicializa el contador y el RLO en las entradas CU y CD es "1", el
contador solo cuenta una vez en el próximo ciclo aunque no se detecte ningún cambio de
flanco.
El valor de contaje se pone a cero si el estado lógico de la entrada R cambia a "1". Mientras la
entrada R tenga el estado lógico "1", el estado lógico de las entradas CU, CD y S no tendrá
ningún efecto sobre el valor de contaje.
El estado lógico en la salida Q es "1" si el valor de contaje es superior a cero. Si el valor de
contaje es igual a cero, la salida Q devuelve el estado lógico "0".
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
La instrucción "Parametrizar e incrementar/decrementar contador" requiere una operación
lógica precedente para la evaluación de flancos y se puede colocar dentro o en el extremo del
segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar e incrementar/
decrementar contador":

4872

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Contado‐
res>

InOut

COUNTER

C

Contador de la instrucción

CU

Input

BOOL

I, Q, M, D, L

Entrada de contaje ascen‐
dente

CD

Input

BOOL

I, Q, M, D, L, T, C

Entrada de contaje descen‐
dente

S

Input

BOOL

I, Q, M, D, L, T, C

Entrada para preajustar el
contador

El número de contadores de‐
pende de la CPU.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

PV

Input

WORD

I, Q, M, D, L, P

Valor de contaje predetermi‐
nado (C#0 a C#999)

R

Input

BOOL

I, Q, M, D, L, T, C

Entrada de reset

CV

Output

WORD, S5TIME,
DATE

I, Q, M, D, L, P

Valor de contaje actual (he‐
xadecimal)

CV_BCD

Output

WORD, S5TIME,
DATE

I, Q, M, D, L, P

Valor de contaje actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&RXQWHUBಯ
6B&8'

ಯ7DJ,QBಯ
&8
ಯ7DJ,QBಯ
ಯ7DJ,QBಯ
ಯ7DJ3UHVHW9DOXHಯ

ಯ7DJ2XWಯ
4

&'
6
39

&9

ಯ7DJ9DOXHBಯ

&9B%&'

ಯ7DJ9DOXHBಯ

ಯ7DJ,QBಯ
5

Si el estado lógico de la entrada "TagIn_1" o "TagIn_2" cambia de "0" a "1" (flanco de señal
ascendente), se ejecuta la instrucción "Parametrizar e incrementar/decrementar contador".
Cuando se detecta un flanco de señal ascendente en la entrada "TagIn_1" y el valor de contaje
actual es menor que "999", este valor se incrementará en uno. Cuando se detecta un flanco de
señal ascendente en la entrada "TagIn_2" y el valor de contaje actual es mayor que "0", este
valor se decrementará en uno.
Si el estado lógico de la entrada "TagIn_3" cambia de "0" a "1", el valor de contaje adopta el
valor del operando "TagPresetValue". El valor de contaje se pone a "0" si el operando
"TagIn_4" tiene el estado lógico "1".
El valor de contaje actual se memoriza en formato hexadecimal en el operando "TagValue_1"
y codificado en BCD en el operando "TagValue_2".
La salida "TagOut" devuelve el estado lógico "1" mientras el valor de contaje actual sea
diferente a "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

4873

Instrucciones
4.2 Instrucciones

---( SC ): Poner contador al valor inicial
Descripción
Con la instrucción "Poner contador al valor inicial" se ajusta el valor de un contador. La
instrucción se ejecuta cuando el resultado lógico (RLO) de la entrada de la instrucción cambia
de "0" a "1". Si se ejecuta la instrucción, el contador se pone al valor de contaje indicado.
La instrucción "Poner contador al valor inicial" requiere una operación lógica precedente para
la evaluación de flancos y se puede colocar solo en el extremo derecho del segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Poner contador al valor inicial":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Valor de
contaje>

Input

WORD

I, Q, M, D, L o
constante

Valor con el que se preajusta
el contador codificado en
BCD.

<Contado‐
res>

InOut/Input

COUNTER

C

(C#0 a C#999)
Contador que se preajusta.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,Qಯ

ಯ&RXQWHUBಯ
6&
&

Cuando el estado lógico del operando "TagIn" cambia de "0" a "1", el contador "Counter_1" se
pone a "100".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de KOP (Página 7943)

4874

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

---( CU ): Contador ascendente
Descripción
Con la instrucción "Contador ascendente" se puede aumentar en uno el valor del contador
cuando hay un flanco ascendente en el resultado lógico (RLO). El valor de contaje puede
seguir incrementándose hasta alcanzar el límite de "999". Una vez alcanzado el valor límite, el
valor de contaje no se incrementa al detectarse un flanco de señal ascendente.
La instrucción "Contador ascendente" requiere una operación lógica precedente para la
evaluación de flancos y se puede colocar solo en el extremo derecho del segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contador ascendente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Contado‐
res>

InOut/Input

COUNTER

C

Contador cuyo valor se au‐
menta.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR

ಯ7DJ,QBಯ

ಯ&RXQWHUBಯ
6&
&

6HJPHQWR

ಯ7DJ,QBಯ

ಯ&RXQWHUBಯ
&8

6HJPHQWR

ಯ7DJ,QBಯ

ಯ&RXQWHUBಯ
5

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1" (señal de flanco
ascendente), el contador "Counter_1" se ajusta en el valor "100".
El valor del contador "Counter_1" se incrementa en uno si el estado lógico del operando
"TagIn_2" cambia de "0" a "1".
Si el estado lógico del operando "TagIn_3" es "1", se pone a "0" el valor del contador
"Counter_1".

Programación del PLC
Manual de programación y manejo, 11/2019

4875

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de KOP (Página 7943)

---( CD ): Contador descendente
Descripción
Con la instrucción "Contador descendente" se puede reducir en uno el valor del contador
cuando hay un flanco ascendente en el resultado lógico (RLO). El valor de contaje puede
seguir decrementándose hasta alcanzar el límite "0". Una vez alcanzado el valor límite, el valor
de contaje no se modifica al detectarse un flanco de señal ascendente.
La instrucción "Contador descendente" requiere una operación lógica precedente para la
evaluación de flancos y se puede colocar solo en el extremo derecho del segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contador descendente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Contado‐
res>

InOut/Input

COUNTER

C

Contador cuyo valor se de‐
crementa.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR

ಯ7DJ,QBಯ

ಯ&RXQWHUBಯ
6&
&

6HJPHQWR

ಯ7DJ,QBಯ

ಯ&RXQWHUBಯ
&'

6HJPHQWR

ಯ7DJ,QBಯ

ಯ&RXQWHUBಯ
5

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1" (señal de flanco
ascendente), el contador "Counter_1" se ajusta en el valor "100".
El valor del contador "Counter_1" se decrementa en uno si el estado lógico del operando
"TagIn_2" cambia de "0" a "1".

4876

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Si el estado lógico del operando "TagIn_3" es "1", se pone a "0" el valor del contador
"Counter_1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de KOP (Página 7943)

Comparación
CMP ==: Igual
Descripción
La instrucción "Igual" permite consultar si son iguales el primer (<Operando1>) y segundo
(<Operando2>) valor de comparación. Ambos valores de comparación deben ser del mismo
tipo de datos.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0". El RLO
de la instrucción se combina lógicamente con el RLO del circuito entero como se indica a
continuación:
● Con una Y lógica si la instrucción de comparación está conectada en serie.
● Con una O lógica si la instrucción de comparación está conectada en paralelo.
El primer valor de comparación (<Operando1>) se indica en el comodín de operandos situado
encima de la instrucción. El segundo valor de comparación (<Operando2>) se indica en el
comodín de operandos situado debajo de la instrucción.
Nota
Comparación de números en coma flotante
Si desea comparar tipos de datos REAL o LREAL, utilice en lugar de la instrucción "CMP ==:
Igual" la instrucción "IN_RANGE: Valor dentro del rango".

Programación del PLC
Manual de programación y manejo, 11/2019

4877

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Igual":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

I, Q, M, D, L, P o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante

Primer valor de comparación

<Operan‐
do2>

Input

I, Q, M, D, L, P o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante

Segundo valor de compara‐
ción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJB9DOXHಯ
,17

ಯ7DJ2XWಯ
6

ಯ7DJB9DOXHಯ

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● Se cumple la condición de la instrucción de comparación cuando "Tag_Value1" =
"Tag_Value2".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones de comparación (Página 192)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

CMP <>: Diferente
Descripción
La instrucción "Diferente" permite consultar si son diferentes el primer (<Operando1>) y
segundo (<Operando2>) valor de comparación. Ambos valores de comparación deben ser del
mismo tipo de datos.

4878

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0". El RLO
de la instrucción se combina lógicamente con el RLO del circuito entero como se indica a
continuación:
● Con una Y lógica si la instrucción de comparación está conectada en serie.
● Con una O lógica si la instrucción de comparación está conectada en paralelo.
El primer valor de comparación (<Operando1>) se indica en el comodín de operandos situado
encima de la instrucción. El segundo valor de comparación (<Operando2>) se indica en el
comodín de operandos situado debajo de la instrucción.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Diferente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

Secuencias de
I, Q, M, D, L, P o
bits, enteros, nú‐
constante
meros en coma flo‐
tante

Primer valor de comparación

<Operan‐
do2>

Input

I, Q, M, D, L, P o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante

Segundo valor de compara‐
ción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJB9DOXHಯ
!
,17

ಯ7DJ2XWಯ
6

ಯ7DJB9DOXHಯ

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● Se cumple la condición de la instrucción de comparación cuando "Tag_Value1" <>
"Tag_Value2".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones de comparación (Página 192)

Programación del PLC
Manual de programación y manejo, 11/2019

4879

Instrucciones
4.2 Instrucciones
Principios básicos de la palabra de estado (Página 184)
Principios básicos de KOP (Página 7943)

CMP >=: Mayor o igual
Descripción
La instrucción "Mayor o igual" permite consultar si el primer valor de comparación
(<Operando1>) es mayor o igual que el segundo (<Operando2>). Ambos valores de
comparación deben ser del mismo tipo de datos.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0". El RLO
de la instrucción se combina lógicamente con el RLO del circuito entero como se indica a
continuación:
● Con una Y lógica si la instrucción de comparación está conectada en serie.
● Con una O lógica si la instrucción de comparación está conectada en paralelo.
El primer valor de comparación (<Operando1>) se indica en el comodín de operandos situado
encima de la instrucción. El segundo valor de comparación (<Operando2>) se indica en el
comodín de operandos situado debajo de la instrucción.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Mayor o igual":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Primer valor de comparación

<Operan‐
do2>

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Segundo valor de compara‐
ción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJB9DOXHಯ
!
,17

ಯ7DJ2XWಯ
6

ಯ7DJB9DOXHಯ

4880

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● Se cumple la condición de la instrucción de comparación cuando "Tag_Value1" >=
"Tag_Value2".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones de comparación (Página 192)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

CMP <=: Menor o igual
Descripción
La instrucción "Menor o igual" permite consultar si el primer valor de comparación
(<Operando1>) es menor o igual que el segundo (<Operando2>). Ambos valores de
comparación deben ser del mismo tipo de datos.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0". El RLO
de la instrucción se combina lógicamente con el RLO del circuito entero como se indica a
continuación:
● Con una Y lógica si la instrucción de comparación está conectada en serie.
● Con una O lógica si la instrucción de comparación está conectada en paralelo.
El primer valor de comparación (<Operando1>) se indica en el comodín de operandos situado
encima de la instrucción. El segundo valor de comparación (<Operando2>) se indica en el
comodín de operandos situado debajo de la instrucción.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Menor o igual":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Primer valor de comparación

<Operan‐
do2>

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Segundo valor de compara‐
ción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

4881

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJB9DOXHಯ

,17

ಯ7DJ2XWಯ
6

ಯ7DJB9DOXHಯ

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● Se cumple la condición de la instrucción de comparación cuando "Tag_Value1" <=
"Tag_Value2".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones de comparación (Página 192)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

CMP >: Mayor
Descripción
La instrucción "Mayor" permite consultar si el primer valor de comparación (<Operando1>) es
mayor que el segundo (<Operando2>). Ambos valores de comparación deben ser del mismo
tipo de datos.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0". El RLO
de la instrucción se combina lógicamente con el RLO del circuito entero como se indica a
continuación:
● Con una Y lógica si la instrucción de comparación está conectada en serie.
● Con una O lógica si la instrucción de comparación está conectada en paralelo.
El primer valor de comparación (<Operando1>) se indica en el comodín de operandos situado
encima de la instrucción. El segundo valor de comparación (<Operando2>) se indica en el
comodín de operandos situado debajo de la instrucción.

4882

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Mayor":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Primer valor de comparación

<Operan‐
do2>

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Segundo valor de compara‐
ción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJB9DOXHಯ
!
,17

ಯ7DJ2XWಯ
6

ಯ7DJB9DOXHಯ

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● Se cumple la condición de la instrucción de comparación cuando "Tag_Value1" >
"Tag_Value2".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones de comparación (Página 192)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

CMP <: Menor
Descripción
La instrucción "Menor" permite consultar si el primer valor de comparación (<Operando1>) es
menor que el segundo (<Operando2>). Ambos valores de comparación deben ser del mismo
tipo de datos.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0". El RLO

Programación del PLC
Manual de programación y manejo, 11/2019

4883

Instrucciones
4.2 Instrucciones
de la instrucción se combina lógicamente con el RLO del circuito entero como se indica a
continuación:
● Con una Y lógica si la instrucción de comparación está conectada en serie.
● Con una O lógica si la instrucción de comparación está conectada en paralelo.
El primer valor de comparación (<Operando1>) se indica en el comodín de operandos situado
encima de la instrucción. El segundo valor de comparación (<Operando2>) se indica en el
comodín de operandos situado debajo de la instrucción.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Menor":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Primer valor de comparación

<Operan‐
do2>

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Segundo valor de compara‐
ción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJB9DOXHಯ

,17

ಯ7DJ2XWಯ
6

ಯ7DJB9DOXHಯ

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● Se cumple la condición de la instrucción de comparación cuando "Tag_Value1" <
"Tag_Value2".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones de comparación (Página 192)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

4884

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Funciones matemáticas
ADD: Sumar
Descripción
La instrucción "Sumar" permite sumar el valor de la entrada IN1 al valor de la entrada IN2 y
consultar la suma en la salida OUT (OUT:= IN1+IN2). Pueden indicarse como máximo 2
entradas.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El resultado de la instrucción está fuera del rango permitido para el tipo de datos indicado
en la salida OUT.
● Un número en coma flotante tiene un valor no válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Sumar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Primer sumando

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Segundo sumando

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Suma

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

$''
,17
(1

ಯ7DJB9DOXHಯ

,1

ಯ7DJB9DOXHಯ

,1

Programación del PLC
Manual de programación y manejo, 11/2019

(12

287

ಯ7DJ2XWಯ
6

ಯ7DJB5HVXOWಯ

4885

Instrucciones
4.2 Instrucciones
Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Sumar".
El valor del operando "Tag_Value1" se suma al valor del operando "Tag_Value2". El resultado
de la suma se almacena en el operando "Tag_Result". Si no se producen errores al ejecutar la
instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y se activa la salida
"TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

SUB: Restar
Descripción
La instrucción "Restar" permite restar el valor de la entrada IN2 del valor de la entrada IN1 y
consultar la diferencia en la salida OUT (OUT:= IN1-IN2).
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El resultado de la instrucción está fuera del rango permitido para el tipo de datos indicado
en la salida OUT.
● Un número en coma flotante tiene un valor no válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Restar":
Parámetro

4886

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Minuendo

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Sustraendo

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Diferencia

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

68%
,17
(1

ಯ7DJB9DOXHಯ

,1

ಯ7DJB9DOXHಯ

,1

ಯ7DJ2XWಯ
6

(12

287

ಯ7DJB5HVXOWಯ

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Restar".
El valor del operando "Tag_Value2" se resta del valor del operando "Tag_Value1". El resultado
de la resta se almacena en el operando "Tag_Result". Si no se producen errores al ejecutar la
instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y se activa la salida
"TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

MUL: Multiplicar
Descripción
La instrucción "Multiplicar" permite multiplicar el valor de la entrada IN1 por el valor de la
entrada IN2 y consultar el producto en la salida OUT (OUT:= IN1*IN2). Pueden indicarse como
máximo 2 entradas.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El resultado está fuera del rango permitido para el tipo de datos indicado en la salida OUT.
● Un número en coma flotante tiene un valor no válido.

Programación del PLC
Manual de programación y manejo, 11/2019

4887

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Multiplicar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Multiplicador

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Multiplicando

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Producto

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

08/
5($/
(1

ಯ7DJB9DOXHಯ

,1

ಯ7DJB9DOXHಯ

,1

ಯ7DJ2XWಯ
6

(12

287

ಯ7DJB5HVXOWಯ

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción
"Multiplicar". El valor del operando "Tag_Value1" se multiplica por el valor del operando
"Tag_Value2". El resultado de la multiplicación se almacena en el operando "Tag_Result". Si
no se producen errores al ejecutar la instrucción, la salida de habilitación ENO devuelve el
estado lógico "1" y se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

4888

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

DIV: Dividir
Descripción
La instrucción "Dividir" permite dividir el valor de la entrada IN1 entre el valor de la entrada IN2
y consultar el cociente en la salida OUT (OUT:= IN1/IN2).
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El resultado de la instrucción está fuera del rango permitido para el tipo de datos indicado
en la salida OUT.
● Un número en coma flotante tiene un valor no válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Dividir":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Dividendo

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Divisor

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Valor del cociente

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

',9
5($/
(1

ಯ7DJB9DOXHಯ

,1

ಯ7DJB9DOXHಯ

,1

(12

287

ಯ7DJ2XWಯ
6

ಯ7DJB5HVXOWಯ

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Dividir".
El valor del operando "Tag_Value1" se divide por el valor del operando "Tag_Value2". El
resultado de la división se almacena en el operando "Tag_Result". Si no se producen errores
al ejecutar la instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y se activa
la salida "TagOut".

Programación del PLC
Manual de programación y manejo, 11/2019

4889

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

MOD: Obtener resto de división
Descripción
La instrucción "Obtener resto de división" divide el valor de la entrada IN1 por el valor de la
entrada IN2 y consulta el resto de la división en la salida OUT.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Obtener resto de división":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

DINT

I, Q, M, D, L, P o
constante

Dividendo

IN2

Input

DINT

I, Q, M, D, L, P o
constante

Divisor

OUT

Output

DINT

I, Q, M, D, L, P

Resto de división

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
02'
ಯ7DJ,Qಯ

4890

',17
(1

ಯ7DJB9DOXHಯ

,1

ಯ7DJB9DOXHಯ

,1

(12

287

ಯ7DJ2XWಯ
6

ಯ7DJB5HVXOWಯ

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Obtener
resto de división". El valor del operando "Tag_Value1" se divide por el valor del operando
"Tag_Value2". El resto de la división se almacena en el operando "Tag_Result". Si no se
producen errores al ejecutar la instrucción, la salida de habilitación ENO devuelve el estado
lógico "1" y se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de KOP (Página 7943)

NEG: Generar complemento a dos
Descripción
La instrucción "Generar complemento a dos" permite cambiar el signo del valor de la entrada
IN y consultar el resultado en la salida OUT. Por ejemplo, si la entrada IN tiene un valor positivo,
se deposita el equivalente negativo de este valor en la salida OUT.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El resultado de la instrucción está fuera del rango permitido para el tipo de datos indicado
en la salida OUT (sólo válido para números enteros).

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Generar complemento a dos":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Complemento a dos del valor
de entrada

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

4891

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJ,QB9DOXHಯ

1(*
5($/
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJ2XWB9DOXHಯ

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Generar
complemento a dos". Se invierte el signo del valor de la entrada "TagIn_Value" y el resultado
se deposita en la salida "TagOut_Value". Si no se producen errores al ejecutar la instrucción,
la salida de habilitación ENO devuelve el estado lógico "1" y se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de KOP (Página 7943)

ABS: Calcular valor absoluto
Descripción
La instrucción "Calcular valor absoluto" permite calcular el valor absoluto del valor indicado en
la entrada IN. El resultado de la instrucción se deposita en la salida OUT y se puede consultar
allí.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor absoluto":
Parámetro

4892

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Valor absoluto del valor de
entrada

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJ,QB9DOXHಯ

$%6
5($/
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

-6,234

OUT

TagOut_Value

6,234

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Calcular
valor absoluto". La instrucción calcula el valor absoluto del valor de la entrada "TagIn_Value"
y deposita el resultado en la salida "TagOut_Value". Si no se producen errores al ejecutar la
instrucción, se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de KOP (Página 7943)

MIN: Determinar mínimo
Descripción
La instrucción "Determinar mínimo" compara los valores de las entradas IN1, IN2 e IN3 y
escribe el valor menor en la salida OUT. Para poder ejecutar la instrucción, es imprescindible
que las variables de todas las entradas sean del mismo tipo de datos.

Programación del PLC
Manual de programación y manejo, 11/2019

4893

Instrucciones
4.2 Instrucciones
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Las variables indicadas no son del mismo tipo de datos.
● Un número en coma flotante tiene un valor no válido.
Nota
Aun estando desactivada la verificación CEI, en los parámetros de entrada únicamente están
permitidos los tipos de datos INT, DINT y REAL. Si utiliza los tipos de datos WORD o DWORD
en los parámetros de entrada, la instrucción devolverá un resultado no definido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Determinar mínimo":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Primer valor de entrada

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Segundo valor de entrada

IN3

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Tercer valor de entrada

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Resultado

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,QBಯ

4894

ಯ7DJ,QBಯ

0,1
,17
(1

(12

ಯ7DJ,QB9DOXHಯ

,1

287

ಯ7DJ,QB9DOXHಯ

,1

ಯ7DJ,QB9DOXHಯ

,1

ಯ7DJ2XWಯ

ಯ7DJ2XWB9DOXHಯ

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN1

TagIn_Value1

12222

IN2

TagIn_Value2

14444

IN3

TagIn_Value3

13333

OUT

TagOut_Value

12222

Si el estado lógico de los operandos "TagIn_1" y "TagIn_2" es "1", se ejecuta la instrucción
"Determinar mínimo". La instrucción compara los valores de los operandos indicados y copia
el valor menor ("TagIn_Value1") en la salida "TagOut_Value". Si no ocurren errores al ejecutar
la instrucción, se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de KOP (Página 7943)

MAX: Determinar máximo
Descripción
La instrucción "Determinar máximo" compara los valores de las entradas IN1, IN2 e IN3 y
escribe el valor mayor en la salida OUT. Para poder ejecutar la instrucción, es imprescindible
que las variables de todas las entradas sean del mismo tipo de datos.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Las variables indicadas no son del mismo tipo de datos.
● Un número en coma flotante tiene un valor no válido.
Nota
Aun estando desactivada la verificación CEI, en los parámetros de entrada únicamente están
permitidos los tipos de datos INT, DINT y REAL. Si utiliza los tipos de datos WORD o DWORD
en los parámetros de entrada, la instrucción devolverá un resultado no definido.

Programación del PLC
Manual de programación y manejo, 11/2019

4895

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Determinar máximo":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Primer valor de entrada

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Segundo valor de entrada

IN3

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Tercer valor de entrada

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Resultado

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

0$;
,17

ಯ7DJ2XWಯ

(1

(12

ಯ7DJ,QB9DOXHಯ

,1

287

ಯ7DJ,QB9DOXHಯ

,1

ಯ7DJ,QB9DOXHಯ

,1

ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN1

TagIn_Value1

12666

IN2

TagIn_Value2

14444

IN3

TagIn_Value3

13333

OUT

TagOut_Value

14444

Si el estado lógico de los operandos "TagIn_1" y "TagIn_2" es "1", se ejecuta la instrucción
"Determinar máximo". La instrucción compara los valores de los operandos indicados y copia
el valor mayor ("TagIn_Value2") en la salida "TagOut_Value". Si no ocurren errores al ejecutar
la instrucción, se activa la salida "TagOut".

4896

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de KOP (Página 7943)

LIMIT: Ajustar valor límite
Descripción
La instrucción "Ajustar valor límite" limita el valor en la entrada IN a los valores de las entradas
MN y MX. Si el valor de la entrada IN cumple la condición MN <= IN <= MX, se copia en la salida
OUT. Si no se cumple la condición y el valor de entrada IN es menor que el límite inferior MN,
la salida OUT adopta el valor de la entrada MN. Si el límite superior MX se rebasa por exceso,
la salida OUT adopta el valor de la entrada MX.
Si el valor de la entrada MN es mayor que el de la entrada MX, el resultado no se define y la
salida de habilitación ENO es "0".
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Las variables indicadas no son del mismo tipo de datos.
● Un operando tiene un valor no válido.
● El valor de la entrada MN es mayor que el valor de la entrada MX.
Nota
Aun estando desactivada la verificación CEI, en los parámetros de entrada únicamente están
permitidos los tipos de datos INT, DINT y REAL. Si utiliza los tipos de datos WORD o DWORD
en los parámetros de entrada, la instrucción devolverá un resultado no definido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Ajustar valor límite":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

MN

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Límite inferior

Programación del PLC
Manual de programación y manejo, 11/2019

4897

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Valor de entrada

MX

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Límite superior

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Resultado

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJB01ಯ
ಯ7DJB9DOXHಯ
ಯ7DJB0;ಯ

/,0,7
,17
(1

(12

01

287

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

,1
0;

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

MN

Tag_MN

12000

IN

Tag_Value

8000

MX

Tag_MX

16000

OUT

Tag_Result

12000

Si los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1", se ejecuta la instrucción
"Ajustar valor límite". El valor del operando "Tag_Value" se compara con los valores de los
operandos "Tag_MN" y "Tag_MX". Puesto que el valor del operando "Tag_Value" es menor
que el valor límite inferior, el valor del operando "Tag_MN" se copia en la salida "Tag_Result".
Si no ocurren errores al ejecutar la instrucción, se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)

4898

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de KOP (Página 7943)

SQR: Calcular cuadrado
Descripción
La instrucción "Calcular cuadrado" permite elevar al cuadrado el valor de la entrada IN
correspondiente a un número en coma flotante y escribir el resultado en la salida OUT.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular cuadrado":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Cuadrado del valor de entra‐
da

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJB9DOXHಯ

645
5($/
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_Value

5.0

OUT

Tag_Result

25.0

Programación del PLC
Manual de programación y manejo, 11/2019

4899

Instrucciones
4.2 Instrucciones
Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Calcular
cuadrado". La instrucción eleva al cuadrado el valor del operando "Tag_Value" y deposita el
resultado en la salida "Tag_Result". Si no ocurren errores al ejecutar la instrucción, se activa
la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de KOP (Página 7943)

SQRT: Calcular raíz cuadrada
Descripción
La instrucción "Calcular raíz cuadrada" permite extraer la raíz cuadrada de un número en coma
flotante a partir del valor de la entrada IN y escribir el resultado en la salida OUT. La instrucción
da un resultado positivo si el valor de entrada es mayor que cero. En los valores de entrada
menores que cero, la salida OUT devuelve un número en coma flotante no válido. Si el valor
de la entrada IN es "0", el resultado también es "0".
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.
● El valor de la entrada IN es negativo.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular raíz cuadrada":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Números en coma
flotante

I, Q, M, D, L

Raíz cuadrada del valor de
entrada

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

4900

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJB9DOXHಯ

6457
5($/
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_Value

25.0

OUT

Tag_Result

5.0

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Calcular
raíz cuadrada". La instrucción extrae la raíz cuadrada del valor del operando "Tag_Value" y
deposita el resultado en la salida "Tag_Result". Si no ocurren errores al ejecutar la instrucción,
se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de KOP (Página 7943)

LN: Calcular logaritmo natural
Descripción
La instrucción "Calcular logaritmo natural" permite calcular el logaritmo natural en base e (e =
2,718282) del valor de la entrada IN. El resultado se deposita en la salida OUT y se puede
consultar allí. La instrucción da un resultado positivo si el valor de entrada es mayor que cero.
En los valores de entrada menores que cero, la salida OUT devuelve un número en coma
flotante no válido.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.
● El valor de la entrada IN es negativo.

Programación del PLC
Manual de programación y manejo, 11/2019

4901

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular logaritmo natural":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Logaritmo natural del valor
de entrada

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJB9DOXHಯ

/1
5($/
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Calcular
logaritmo natural". La instrucción calcula el logaritmo natural del valor de la entrada
"Tag_Value" y deposita el resultado en la salida "Tag_Result". Si no ocurren errores al ejecutar
la instrucción, se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de KOP (Página 7943)

EXP: Calcular valor exponencial
Descripción
La instrucción "Calcular valor exponencial" permite calcular la potencia en base e (e =
2,718282) del valor indicado en la entrada IN. El resultado se emite en la salida OUT y se
puede consultar allí (OUT = eIN).

4902

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor exponencial":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Valor exponencial del valor
de entrada IN

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJB9DOXHಯ

(;3
5($/
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Calcular
valor exponencial". La instrucción calcula la potencia en base e del valor del operando
"Tag_Value" y deposita el resultado en la salida "Tag_Result". Si no ocurren errores al ejecutar
la instrucción, se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

4903

Instrucciones
4.2 Instrucciones

SIN: Calcular valor de seno
Descripción
La instrucción "Calcular valor de seno" permite calcular el seno del ángulo. El tamaño del
ángulo se indica en radianes en la entrada IN. El resultado de la instrucción se deposita en la
salida OUT y se puede consultar allí.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor de seno":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Tamaño del ángulo en radia‐
nes

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Seno del ángulo indicado

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJB9DOXHಯ

6,1
5($/
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_Value

+1,570796 (π/2)

OUT

Tag_Result

1.0

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Calcular
valor de seno". La instrucción calcula el seno del ángulo indicado en la entrada "Tag_Value" y
deposita el resultado en la salida "Tag_Result". Si no ocurren errores al ejecutar la instrucción,
se activa la salida "TagOut".

4904

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de KOP (Página 7943)

COS: Calcular valor de coseno
Descripción
La instrucción "Calcular valor de coseno" permite calcular el coseno del ángulo. El tamaño del
ángulo se indica en radianes en la entrada IN. El resultado de la instrucción se deposita en la
salida OUT y se puede consultar allí.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor de coseno":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Tamaño del ángulo en radia‐
nes

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Coseno del ángulo indicado

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJB9DOXHಯ

Programación del PLC
Manual de programación y manejo, 11/2019

&26
5($/
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

4905

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_Value

+1,570796 (π/2)

OUT

Tag_Result

0

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Calcular
valor de coseno". La instrucción calcula el coseno del ángulo indicado en la entrada
"Tag_Value" y deposita el resultado en la salida "Tag_Result". Si no ocurren errores al ejecutar
la instrucción, se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de KOP (Página 7943)

TAN: Calcular valor de tangente
Descripción
La instrucción "Calcular valor de tangente" permite calcular la tangente del ángulo. El tamaño
del ángulo se indica en radianes en la entrada IN. El resultado de la instrucción se deposita en
la salida OUT y se puede consultar allí.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor de tangente":

4906

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Tamaño del ángulo en radia‐
nes

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Tangente del ángulo indicado

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

(

ಯ7DJB9DOXHಯ

7$1
5($/
(1

287

,1

(12

ಯ7DJB5HVXOWಯ
$

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_Value

+3,141593 (π)

OUT

Tag_Result

0

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
calcula la tangente del ángulo indicado en la entrada "Tag_Value" y deposita el resultado en la
salida "Tag_Result". Si no se producen errores al ejecutar la instrucción, se activa la salida
"TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de KOP (Página 7943)

ASIN: Calcular valor de arcoseno
Descripción
La instrucción "Calcular valor de arcoseno" permite calcular a partir del valor de seno indicado
en la entrada IN el tamaño del ángulo que equivale a este valor. En la entrada IN sólo se
pueden indicar números en coma flotante válidos, comprendidos en un rango de valores entre
-1 y +1. El tamaño del ángulo calculado se deposita en radianes en la salida OUT y puede estar
comprendido entre -π/2 y +π/2.

Programación del PLC
Manual de programación y manejo, 11/2019

4907

Instrucciones
4.2 Instrucciones
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.
● El valor de la entrada IN está fuera del rango de valores permitido (-1 hasta +1).

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor de arcoseno":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de seno

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Tamaño del ángulo en radia‐
nes

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJB9DOXHಯ

$6,1
5($/
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_Value

1.0

OUT

Tag_Result

+1,570796 (π/2)

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Calcular
valor de arcoseno". La instrucción calcula el tamaño del ángulo que equivale al valor de seno
de la entrada "Tag_Value". El resultado de la instrucción se deposita en la salida "Tag_Result".
Si no ocurren errores al ejecutar la instrucción, se activa la salida "TagOut".

4908

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de KOP (Página 7943)

ACOS: Calcular valor de arcocoseno
Descripción
La instrucción "Calcular valor de arcocoseno" permite calcular a partir del valor de coseno
indicado en la entrada IN el tamaño del ángulo que equivale a este valor. En la entrada IN sólo
se pueden indicar números en coma flotante válidos, comprendidos en un rango de valores
entre -1 y +1. El tamaño del ángulo calculado se deposita en radianes en la salida OUT y puede
estar comprendido entre 0 y +π.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.
● El valor de la entrada IN está fuera del rango de valores permitido (-1 hasta +1).

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor de arcocoseno":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de coseno

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Tamaño del ángulo en radia‐
nes

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

4909

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJB9DOXHಯ

$&26
5($/
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_Value

0

OUT

Tag_Result

+1,570796 (π/2)

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Calcular
valor de arcocoseno". La instrucción calcula el tamaño del ángulo que equivale al valor de
coseno de la entrada "Tag_Value". El resultado de la instrucción se deposita en la salida
"Tag_Result". Si no ocurren errores al ejecutar la instrucción, se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de KOP (Página 7943)

ATAN: Calcular valor de arcotangente
Descripción
La instrucción "Calcular valor de arcotangente" permite calcular a partir del valor de tangente
indicado en la entrada IN el tamaño del ángulo que corresponde a este valor. En la entrada IN
solo se pueden indicar números en coma flotante válidos (o -NaN/+NaN). El tamaño del ángulo
calculado se deposita en radianes en la salida OUT y puede estar comprendido entre -π/2 y
+π/2.

4910

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor de arcotangente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de tangente

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Tamaño del ángulo en radia‐
nes

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJB9DOXHಯ

$7$1
5($/
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_Value

1,0

OUT

Tag_Result

+0,785398 (π/4)

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Calcular
valor de arcotangente". La instrucción calcula el tamaño del ángulo que corresponde al valor
de tangente de la entrada "Tag_Value". El resultado de la instrucción se deposita en la salida
"Tag_Result". Si no se producen errores al ejecutar la instrucción, se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)

Programación del PLC
Manual de programación y manejo, 11/2019

4911

Instrucciones
4.2 Instrucciones
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Números en coma flotante no válidos (Página 263)
Principios básicos de KOP (Página 7943)

Transferencia
MOVE: Copiar valor
Descripción
La instrucción "Copiar valor" transfiere el contenido del operando de la entrada IN al operando
de la salida OUT1. La transferencia se efectúa siempre por orden ascendente de direcciones.
La tabla siguiente muestra las posibles transferencias:
Origen (IN)

Destino (OUT1)
Con verificación CEI

Sin verificación CEI

BYTE

BYTE, WORD, DWORD

BYTE, WORD, DWORD, INT, DINT, TIME, DATE,
TOD, CHAR

WORD

WORD; DWORD

BYTE, WORD, DWORD, INT, DINT, TIME, S5TIME,
DATE, TOD, CHAR

DWORD

DWORD

BYTE, WORD, DWORD, INT, DINT, REAL, TIME, DA‐
TE, TOD, CHAR

INT

INT

BYTE, WORD, DWORD, INT, DINT, TIME, DATE,
TOD

DINT

DINT

BYTE, WORD, DWORD, INT, DINT, TIME, DATE,
TOD

REAL

REAL

DWORD, REAL

TIME

TIME

BYTE, WORD, DWORD, INT, DINT, TIME

S5TIME

S5TIME

WORD, S5TIME

DATE

DATE

BYTE, WORD, DWORD, INT, DINT, DATE

TOD

TOD

BYTE, WORD, DWORD, INT, DINT, TOD

CHAR

CHAR

BYTE, WORD, DWORD, CHAR

COUNTER

INT, WORD, COUNTER

WORD, DWORD, INT, UINT, DINT, UDINT

TIMER

INT, WORD, TIMER

WORD, DWORD, INT, UINT, DINT, UDINT

Si la longitud de bits del tipo de datos de la entrada IN supera la longitud de bits del tipo de datos
de la salida OUT1, se pierden los bits más significativos del valor de origen. Si la longitud de
bits del tipo de datos en la entrada IN es inferior a la longitud de bits del tipo de datos en la salida
OUT1, los bits más significativos del valor de destino se sobrescriben con ceros.
Para copiar campos y estructuras, pueden utilizarse las instrucciones "Copiar área" (BLKMOV)
y "Copiar área sin interrupciones" (UBLKMOV).

4912

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Copiar valor":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habili‐
tación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilita‐
ción

IN

Input

I, Q, M, D, L o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante, temporiza‐
dores, DATE,
TOD, CHAR, TI‐
MER, COUNTER

Valor de origen

OUT1

Output

I, Q, M, D, L
Secuencias de
bits, enteros, nú‐
meros en coma flo‐
tante, temporiza‐
dores, DATE,
TOD, CHAR, TI‐
MER, COUNTER

Dirección de desti‐
no

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,Qಯ

ಯ7DJ,QB9DOXHಯ

029(
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

0011 1111 1010 1111

OUT1

TagOut_Value

0011 1111 1010 1111

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Copiar valor".
La instrucción copia los contenidos del operando "TagIn_Value" en el operando
"TagOut_Value" y pone la salida "TagOut" al estado lógico "1".

Programación del PLC
Manual de programación y manejo, 11/2019

4913

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

BLKMOV: Copiar área
Descripción
La instrucción "Copiar área" permite copiar los contenidos de un área de memoria (área de
origen) en un área de memoria diferente (área de destino). La operación de copia se realiza por
orden ascendente de direcciones. Las áreas de origen y destino se definen mediante punteros
ANY.
Nota
En esta instrucción solo se pueden utilizar tipos de datos que sean válidos en una CPU de la
serie S7-300/400.
La figura siguiente muestra el principio de la operación de copia:

'%'%:

$

%

'%'%:

&

'

'%'%:

(

)

'%'%:

*

+

&RSLDU
/DFRSLDVHHIHFW¼DHQ
VHQWLGRDVFHQGHQWHGH
ODVGLUHFFLRQHV

0:

$

%

0:

&

'

0:

(

)

0:

*

+

UHDGHPHPRULD

Coherencia de los datos de origen y destino
Tenga en cuenta que al ejecutar la instrucción "Copiar área" no se modifican los datos de
origen. De lo contrario no está garantizada la coherencia de los datos de destino.

4914

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Posibilidad de interrupción
Mientras el área de origen no forme parte de un bloque de datos que solo figura en la memoria
de carga, no hay limitaciones en cuanto a la profundidad de anidamiento.
Por el contrario, en caso de interrumpirse la ejecución de BLKMOV, en la que se copia desde
un DB no relevante para la ejecución, no puede anidarse más la ejecución de la BLKMOV.

Áreas de memoria
La instrucción "Copiar área" permite copiar las siguientes áreas de memoria:
● Áreas de un bloque de datos
● Marcas
● Memoria imagen de proceso de las entradas
● Memoria imagen de proceso de las salidas
● Bloques de datos no relevantes para la ejecución

Reglas generales para copiar
Las áreas de origen y destino no deben solaparse. Si las áreas de origen y destino son de
diferente longitud, se copia solo hasta la longitud del área más pequeña.
Si el área de origen es más pequeña que el área de destino, el área de origen se copiará por
completo en el área de destino. Los restantes bytes del área de destino permanecen
inalterados.
Si el área de destino es más pequeña que el área de origen, se escribirá en toda el área de
destino. Los restantes bytes del área de origen se ignoran.
Al copiar un área del tipo de datos BOOL, la longitud indicada del área debe ser un múltiplo de
8, pues de lo contrario no se ejecutará la instrucción.
Nota
Si el área de origen o destino realmente existente es menor que el área de origen o destino
indicada en el parámetro SRCBLK o DSTBLK, el comportamiento dependerá del tipo de CPU:
● Para las CPU S7-300 rige lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#837F. Este código de error debe evaluarse en el programa de usuario.
● Para las CPU V4 del S7-400 (V4, CPU H V4 y CPU H V4.5) se aplica lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#8122 o W#16#8323. Este código de error debe evaluarse en el programa de usuario.
● Para las restantes CPU del S7-400 rige:
Se transfieren datos. En el parámetro RET_VAL se devuelve el código de error W#16#8122
o W#16#8323. Este código de error debe evaluarse en el programa de usuario.

Programación del PLC
Manual de programación y manejo, 11/2019

4915

Instrucciones
4.2 Instrucciones

Reglas para copiar cadenas de caracteres
La instrucción "Copiar área" permite copiar asimismo áreas de origen y destino del tipo de
datos STRING. Si sólo el área de origen es del tipo de datos STRING, se copiarán los
caracteres realmente contenidos en la cadena de caracteres. La información sobre la longitud
real y máxima también se escribe en el área de destino. Si tanto el área de origen como el área
de destino son del tipo de datos STRING, la longitud actual de la cadena de caracteres en el
área de destino se pone al número de caracteres realmente copiados.
Si se desea copiar información sobre la longitud máxima y real de una cadena de caracteres,
las áreas de los parámetros SRCBLK y DSTBLK deben indicarse en bytes.

Reglas para copiar bloques de datos no relevantes para la ejecución
El área de origen también puede encontrarse en un bloque de datos no relevante para la
ejecución en la memoria de carga. Los bloques de datos no relevantes para la ejecución se
identifican con la palabra clave UNLINKED.
Si en la memoria de trabajo se copia un bloque de datos no relevante para la ejecución con la
instrucción "Copiar área" y, al mismo tiempo, este se vuelve a cargar p. ej. desde la
programadora, la ejecución de la instrucción puede retardarse varios milisegundos. Esto
prolonga el ciclo del OB y puede activar la vigilancia del tiempo de ciclo.
Si un bloque de datos no relevante para la ejecución se copia con la instrucción "Copiar área"
y la operación de copia se interrumpe, la instrucción no se podrá seguir ejecutando.
Si en la CPU existe la instrucción "Leer de un bloque de datos de la memoria de carga", debe
utilizarse dicha instrucción para leer los bloques de datos no relevantes para la ejecución en
la memoria de carga. Si se utiliza la instrucción "Copiar área" se emite el error W#16#8092.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Copiar área":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

SRCBLK

Input

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria que se copia (área de ori‐
gen).

RET_VAL

Output

INT

I, Q, M, D, L, P

Información de error:
El parámetro RET_VAL de‐
vuelve un código de error
cuando ocurre un error du‐
rante la ejecución de la ins‐
trucción.

DSTBLK

Output 1)

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria en la que se copia (área
de destino).

1) El parámetro DSTBLK está declarado como Output, pero en la interfaz del bloque debe declararse
como InOut.

4916

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8092

El área de origen o destino está solo en la memoria de carga.

8xyy

Encontrará más información de error en "Consulte también".

*Los códigos de error en el editor de programas se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
%/.029
ಯ7DJ,Qಯ
30%<7(

$Q\
(1
65&%/.

(12
5(7B9$/
'67%/.

ಯ7DJ2XWಯ
ಯ7DJB5HW9DOಯ
3'%'%;%<7(

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
copia 10 bytes a partir de MB100 y los escribe en el DB1. Si ocurre un error durante la
operación de copia, el respectivo código de error se indica en la variable "Tag_RetVal".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de KOP (Página 7943)

UBLKMOV: Copiar área sin interrupciones
Descripción
La instrucción "Copiar área sin interrupciones" permite copiar los contenidos de un área de
memoria (área de origen) en un área de memoria diferente (área de destino). La operación de
copia se realiza por orden ascendente de direcciones. Las áreas de origen y destino se definen
mediante punteros ANY.
Programación del PLC
Manual de programación y manejo, 11/2019

4917

Instrucciones
4.2 Instrucciones
La operación de copia no debe ser interrumpida por otras actividades del sistema operativo.
Ello puede aumentar el tiempo de reacción a alarmas de la CPU durante la ejecución de la
instrucción "Copiar área sin interrupciones".
Nota
En esta instrucción solo se pueden utilizar tipos de datos que sean válidos en una CPU de la
serie S7-300/400.

Áreas de memoria
La instrucción "Copiar área sin interrupciones" permite copiar las siguientes áreas de memoria:
● Áreas de un bloque de datos
● Marcas
● Memoria imagen de proceso de las entradas
● Memoria imagen de proceso de las salidas

Reglas generales para copiar
Al ejecutar la instrucción "Copiar área sin interrupciones" no pueden solaparse las áreas de
origen y destino. Si el área de origen es más pequeña que el área de destino, el área de origen
se copiará por completo en el área de destino. Los restantes bytes del área de destino
permanecen inalterados.
Si el área de destino es más pequeña que el área de origen, se escribirá en toda el área de
destino. Los restantes bytes del área de origen se ignoran.
Si un área de origen o destino definida como parámetro formal es menor que un área de origen
o destino indicada en los parámetros SRCBLK o DSTBLK, no se transferirán datos.
Al copiar un área del tipo de datos BOOL, la longitud indicada del área debe ser un múltiplo de
8, pues de lo contrario no se ejecutará la instrucción.
La instrucción "Copiar área sin interrupciones" permite copiar 512 bytes como máximo. A este
respecto deben tenerse en cuenta las limitaciones específicas de la CPU.
Nota
Si el área de origen o destino realmente existente es menor que el área de origen o destino
indicada en el parámetro SRCBLK o DSTBLK, el comportamiento dependerá del tipo de CPU:
● Para las CPU S7-300 rige lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#837F. Este código de error debe evaluarse en el programa de usuario.
● Para las CPU V4 del S7-400 (V4, CPU H V4 y CPU H V4.5.) rige lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#8122 o W#16#8323. Este código de error debe evaluarse en el programa de usuario.
● Para las restantes CPU del S7-400 rige:
Se transfieren datos. En el parámetro RET_VAL se devuelve el código de error W#16#8122
o W#16#8323. Este código de error debe evaluarse en el programa de usuario.

4918

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Reglas para copiar cadenas de caracteres
La instrucción "Copiar área sin interrupciones" permite copiar asimismo áreas de origen y
destino del tipo de datos STRING. Si sólo el área de origen es del tipo de datos STRING, se
copiarán los caracteres realmente contenidos en la cadena de caracteres. La información
sobre la longitud real y máxima no se escribe en el área de destino. Si tanto el área de origen
como el área de destino son del tipo de datos STRING, la longitud actual de la cadena de
caracteres en el área de destino se pone al número de caracteres realmente copiados. Si se
copian áreas del tipo de datos STRING, debe indicarse "1" como longitud del área.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Copiar área sin interrupciones":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

SRCBLK

Input

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria que se copia (área de ori‐
gen).

RET_VAL

Output

INT

I, Q, M, D, L, P

Información de error:
El parámetro RET_VAL de‐
vuelve un código de error
cuando ocurre un error du‐
rante la ejecución de la ins‐
trucción.

DSTBLK

Output 1)

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria en la que se copia (área
de destino).

1) El parámetro DSTBLK está declarado como Output, pero en la interfaz del bloque debe declararse
como InOut.

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8091

El área de origen o destino está solo en la memoria de carga.

8xyy

Encontrará más información de error en "Consulte también".

*Los códigos de error en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

4919

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
8%/.029
ಯ7DJ,Qಯ
30%<7(

$Q\
(1
65&%/.

(12
5(7B9$/
'67%/.

ಯ7DJ2XWಯ
ಯ7DJB5HW9DOಯ

3'%'%;%<7(

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
copia 10 bytes a partir de MB100 y los escribe en el DB1. Si ocurre un error durante la
operación de copia, el respectivo código de error se indica en la variable "Tag_RetVal".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de KOP (Página 7943)

FILL: Rellenar área
Descripción
La instrucción "Rellenar área" rellena un área de memoria (área de destino) con el contenido
de un área de memoria diferente (área de origen). La instrucción "Rellenar área" copia el
contenido del área de origen en el área de destino las veces necesarias hasta que el área de
destino quede escrita por completo. La operación de copia se realiza por orden ascendente de
direcciones. Las áreas de origen y destino se definen mediante punteros ANY.
Nota
En esta instrucción solo se pueden utilizar tipos de datos que sean válidos en una CPU de la
serie S7-300/400.
La figura siguiente muestra el principio de la operación de copia:

4920

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
),//

%9$/

$

%

0:

$

%

0:

&

'

0:

&

'

0:

(

)

0:

(

)

0:

*

+

0:

*

+

0:

$

%

0:

&

'

0:

(

)

0:

*

+

0:

$

%

0:

&

'

0:

%/.

Ejemplo: El contenido del área MW100 a MW118 debe inicializarse con el contenido de las
palabras de marcas MW14 a MW20.

Coherencia de los datos de origen y destino
Tenga en cuenta que al ejecutar la instrucción "Rellenar área" no se modifican los datos de
origen, pues de lo contrario no se podría garantizar la coherencia de los datos de destino.

Áreas de memoria
La instrucción "Rellenar área" permite copiar las siguientes áreas de memoria:
● Áreas de un bloque de datos
● Marcas
● Memoria imagen de proceso de las entradas
● Memoria imagen de proceso de las salidas

Reglas generales para copiar
Las áreas de origen y destino no deben solaparse. Aunque el área de destino que se debe
inicializar no sea múltiplo entero de la longitud del parámetro de entrada BVAL, el área de
destino se rellenará igualmente hasta el último byte.
Si el área de destino que se debe preasignar es menor que el área de origen, sólo se copiarán
los datos que quepan en el área de destino.
Si el área de destino o de origen realmente existente es menor que el tamaño del área de
memoria parametrizado para el área de origen o destino (parámetros BVAL, BLK), los datos no
se transfieren.

Programación del PLC
Manual de programación y manejo, 11/2019

4921

Instrucciones
4.2 Instrucciones
Si el puntero ANY (origen o destino) es del tipo de datos BOOL, la longitud indicada del área
debe ser divisible entre 8 ya que, de lo contrario, la instrucción no se ejecuta.
Si el área de destino es del tipo de datos STRING, la instrucción escribe la cadena de
caracteres completa, incluida la información de administración.
Nota
Si el área de origen o destino realmente existente es menor que el área de origen o destino
indicada en el parámetro BVAL o BLK, el comportamiento dependerá del tipo de CPU:
● Para las CPU S7-300 rige lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#837F. Este código de error debe evaluarse en el programa de usuario.
● Para las CPU V4 del S7-400 (V4, CPU H V4 y CPU H V4.5) se aplica lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#8122 o W#16#8323. Este código de error debe evaluarse en el programa de usuario.
● Para las restantes CPU del S7-400 rige:
Se transfieren datos. En el parámetro RET_VAL se devuelve el código de error W#16#8122
o W#16#8323. Este código de error debe evaluarse en el programa de usuario.

Reglas para copiar estructuras
Al indicar una estructura a modo de parámetro de entrada, tenga en cuenta que la longitud de
una estructura se adapta siempre a un número par de bytes. Si se declara una estructura con
un número impar de bytes, la estructura necesitará un byte adicional de espacio en memoria.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Rellenar área":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

BVAL

Input

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria (área de origen) con cuyo
contenido se rellena el área
de destino en el parámetro
BLK.

RET_VAL

Output

INT

I, Q, M, D, L, P

Información de error:
El parámetro RET_VAL de‐
vuelve un código de error
cuando ocurre un error du‐
rante la ejecución de la ins‐
trucción.

BLK

Output 1)

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria que se rellena con el con‐
tenido del área de origen.

1) El parámetro BLK está declarado como Output, pero en la interfaz del bloque debe declararse como
InOut.

4922

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8092

El área de origen o destino está solo en la memoria de carga.

8xyy

Encontrará más información de error en "Consulte también".

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
),//
ಯ7DJ,Qಯ
30:25'

$Q\
(1
%9$/

(12
5(7B9$/
%/.

ಯ7DJ2XWಯ
ಯ7DJB5HW9DOಯ

30:25'

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
copia el área de origen de MW14 a MW20 y rellena el área de destino de MW100 a MW118 con
el contenido de las 4 palabras contenidas en el área de memoria del parámetro BVAL.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

4923

Instrucciones
4.2 Instrucciones

Conversión
CONVERT: Convertir valor
Descripción
La instrucción "Convertir valor" lee el contenido del parámetro IN y lo convierte según los tipos
de datos seleccionados en el cuadro de la instrucción. El valor convertido se deposita en la
salida OUT.
Encontrará más información relacionada con las conversiones posibles en el apartado
"Conversión explícita" de "Consulte también".
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Durante la ejecución se producen errores, p. ej. se produce un rebase por exceso.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Convertir valor":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Enteros, números
en coma flotante,
BCD16, BCD32

I, Q, M, D, L, P o
constante

Valor que se convierte.

OUT

Output

Enteros, números
en coma flotante,
BCD16, BCD32

I, Q, M, D, L, P

Resultado de la conversión

En las listas desplegables "???" del cuadro de la instrucción se pueden seleccionar los tipos
de datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
&219
ಯ7DJ,Qಯ

ಯ,QSXWB,17ಯ

,17

WR

',17

(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ2XWSXWB',17ಯ

Si el operando "TagIn" devuelve el estado lógico "1", el contenido del operando "TagIn_Value"
se lee y se convierte en un número entero (32 bits). El resultado se deposita en el operando

4924

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
"TagOut_Value". Si la instrucción se ha ejecutado correctamente, la salida "TagOut" se pone
a "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Conversiones explícitas (Página 590)
Principios básicos de KOP (Página 7943)

ROUND: Redondear número
Descripción
La instrucción "Redondear número" permite redondear el valor de la entrada IN al siguiente
número entero. La instrucción interpreta el valor de la entrada IN como número en coma
flotante y lo convierte a un número entero del tipo de datos DINT. Si el valor de entrada se
encuentra entre un número par y uno impar, se selecciona el número par. El resultado de la
instrucción se deposita en la salida OUT y se puede consultar allí.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Durante la ejecución se producen errores, p. ej. se produce un rebase por exceso.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Redondear número":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

REAL

I, Q, M, D, L, P o
constante

Valor de entrada que se debe
redondear.

OUT

Output

DINT

I, Q, M, D, L, P

Resultado del redondeo

En la lista desplegable "???" del cuadro de la instrucción se pueden seleccionar los tipos de
datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

4925

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
5281'
ಯ7DJ,Qಯ

ಯ7DJ,QB9DOXHಯ

5($/

WR

',17

(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

1.50000000

-1.50000000

OUT

TagOut_Value

2

-2

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El número en
coma flotante de la entrada "TagIn_Value" se redondea al número entero par más próximo y
se deposita en la salida "TagOut_Value". Si no se producen errores al ejecutar la instrucción,
se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de KOP (Página 7943)

CEIL: Redondear un número en coma flotante al siguiente entero superior
Descripción
La instrucción "Redondear un número en coma flotante al siguiente entero superior" permite
redondear el valor de la entrada IN al siguiente número entero superior. La instrucción
interpreta el valor de la entrada IN como número en coma flotante y lo convierte en el siguiente
número entero superior. El resultado de la instrucción se deposita en la salida OUT y se puede
consultar allí. El valor de salida puede ser mayor o igual al valor de entrada.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Durante la ejecución se producen errores, p. ej. se produce un rebase por exceso.

4926

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Redondear un número en coma
flotante al siguiente entero superior":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Resultado con el siguiente
entero superior

En la lista desplegable "???" del cuadro de la instrucción se pueden seleccionar los tipos de
datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
&(,/
ಯ7DJ,Qಯ

ಯ7DJ,QB9DOXHಯ

5($/

WR

',17

(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

0.50000000

-0.50000000

OUT

TagOut_Value

1

0

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El número en
coma flotante de la entrada "TagIn_Value" se redondea al siguiente número entero superior y
se devuelve en la salida "TagOut_Value". Si no se producen errores al ejecutar la instrucción,
se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

4927

Instrucciones
4.2 Instrucciones

FLOOR: Redondear un número en coma flotante al siguiente entero inferior
Descripción
La instrucción "Redondear un número en coma flotante al siguiente entero inferior" permite
redondear el valor de la entrada IN al siguiente número entero inferior. La instrucción interpreta
el valor de la entrada IN como número en coma flotante y lo convierte en el siguiente número
entero inferior. El resultado de la instrucción se deposita en la salida OUT y se puede consultar
allí. El valor de salida puede ser menor o igual al valor de entrada.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Durante la ejecución se producen errores, p. ej. se produce un rebase por exceso.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Redondear un número en coma
flotante al siguiente entero inferior":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Resultado con el siguiente
entero inferior

En la lista desplegable "???" del cuadro de la instrucción se pueden seleccionar los tipos de
datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
)/225
ಯ7DJ,Qಯ

ಯ7DJ,QB9DOXHಯ

4928

5($/

WR

',17

(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJ2XWB9DOXHಯ

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

0.50000000

-0.50000000

OUT

TagOut_Value

0

-1

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El número en
coma flotante de la entrada "TagIn_Value" se redondea al número entero inferior más próximo
y se deposita en la salida "TagOut_Value". Si no se producen errores al ejecutar la instrucción,
se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de KOP (Página 7943)

TRUNC: Truncar a entero
Descripción
La instrucción "Truncar a entero" permite generar un valor entero a partir del valor de la entrada
IN. El valor de la entrada IN se interpreta como número en coma flotante. La instrucción
selecciona solo la parte entera del número en coma flotante y la deposita sin decimales en la
salida OUT.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada EN devuelve el estado lógico "0".
● Durante la ejecución se producen errores, p. ej. se produce un rebase por exceso.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Truncar a entero":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

REAL

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Enteros

I, Q, M, D, L

Parte entera del valor de en‐
trada

En la lista desplegable "???" del cuadro de la instrucción se pueden seleccionar los tipos de
datos de la instrucción.

Programación del PLC
Manual de programación y manejo, 11/2019

4929

Instrucciones
4.2 Instrucciones
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
7581&
ಯ7DJ,Qಯ

ಯ7DJ,QB9DOXHಯ

5($/

WR

',17

(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

1.50000000

-1.50000000

OUT

TagOut_Value

1

-1

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La parte entera
del número en coma flotante de la entrada "TagIn_Value" se convierte en un número entero y
se deposita en la salida "TagOut_Value". Si no se producen errores al ejecutar la instrucción,
se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de KOP (Página 7943)

SCALE: Escalar
Descripción
La instrucción "Escalar" convierte el entero del parámetro IN en un número en coma flotante
que se escala en unidades físicas entre un límite inferior y uno superior. Los límites inferior y
superior del rango de valores en el que se escala el valor de entrada se definen mediante los
parámetros LO_LIM y HI_LIM. El resultado de la instrucción se devuelve en el parámetro OUT.
La instrucción "Escalar" utiliza la siguiente ecuación:
OUT = [((FLOAT (IN) – K1)/(K2–K1)) ∗ (HI_LIM–LO_LIM)] + LO_LIM

4930

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
El estado lógico del parámetro BIPOLAR determina los valores de las constantes "K1" y "K2".
El parámetro BIPOLAR puede tener los siguientes estados lógicos:
● Estado lógico "1": se presupone que el valor del parámetro IN es bipolar y está comprendido
en un rango de valores entre -27648 y 27648. En este caso, la constante "K1" tiene el valor
"-27648,0" y la constante "K2", el valor "+27648,0".
● Estado lógico "0": se presupone que el valor del parámetro IN es unipolar y está
comprendido en un rango de valores entre 0 y 27648. En este caso, la constante "K1" tiene
el valor "0,0" y la constante "K2", el valor "+27648,0".
Si el valor del parámetro IN es mayor que el de la constante "K2", el resultado de la instrucción
se pone al valor del límite superior (HI_LIM) y se emite un error.
Si el valor del parámetro IN es menor que el de la constante "K1", el resultado de la instrucción
se pone al valor del límite inferior (LO_LIM) y se emite un error.
Si el límite inferior indicado es mayor que el límite superior (LO_LIM > HI_LIM), el resultado se
escala de forma inversamente proporcional al valor de entrada.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Escalar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

INT

I, Q, M, D, L, P o
constante

Valor de entrada que se es‐
cala

HI_LIM

Input

REAL

I, Q, M, D, L, P o
constante

Valor límite superior

LO_LIM

Input

REAL

I, Q, M, D, L, P o
constante

Valor límite inferior

BIPOLAR

Input

BOOL

I, Q, M, D, L o
constante

Indica si el valor del paráme‐
tro IN se interpreta como bi‐
polar o unipolar. El paráme‐
tro puede adoptar los valores
siguientes:
1: Bipolar
0: Unipolar

OUT

Output

REAL

I, Q, M, D, L, P

Resultado de la instrucción

RET_VAL

Output

WORD

I, Q, M, D, L, P

Información de error

Programación del PLC
Manual de programación y manejo, 11/2019

4931

Instrucciones
4.2 Instrucciones

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

0008

El valor del parámetro IN es mayor que el de la constante "K2" o menor que el de la
constante "K1".

8xyy

Encontrará más información de error en "Consulte también".

*Los códigos de error en el editor de programas se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6&$/(
ಯ7DJ,Qಯ
ಯ7DJB,QSXW9DOXHಯ

(1
,1

ಯ7DJB+LJK/LPLWಯ

+,B/,0

ಯ7DJB/RZ/LPLWಯ

/2B/,0

ಯ7DJB%LSRODUಯ

ಯ7DJ2XWಯ

(12
5(7B9$/
287

ಯ7DJB2XWSXW9DOXHಯ
ಯ7DJB(UURU&RGHಯ

%,32/$5

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_InputValue

22

HI_LIM

Tag_HighLimit

100.0

LO_LIM

Tag_LowLimit

0.0

BIPOLAR

Tag_Bipolar

1

OUT

Tag_OutputValue

50.03978588

RET_VAL

Tag_ErrorCode

W#16#0000

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de KOP (Página 7943)

4932

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

UNSCALE: Desescalar
Descripción
La instrucción "Desescalar" permite desescalar el número en coma flotante del parámetro IN
en unidades físicas comprendidas entre un límite inferior y uno superior y convertirlo en un
número entero. Los límites inferior y superior del rango de valores en el que se desescala el
valor de entrada se definen mediante los parámetros LO_LIM y HI_LIM. El resultado de la
instrucción se devuelve en el parámetro OUT.
La instrucción "Desescalar" utiliza la siguiente ecuación:
OUT = [ ((IN–LO_LIM)/(HI_LIM–LO_LIM)) ∗ (K2–K1) ] + K1
El estado lógico del parámetro BIPOLAR determina los valores de las constantes "K1" y "K2".
El parámetro BIPOLAR puede tener los siguientes estados lógicos:
● Estado lógico "1": se presupone que el valor del parámetro IN es bipolar y está comprendido
en un rango de valores entre -27648 y 27648. En este caso, la constante "K1" tiene el valor
"-27648,0" y la constante "K2", el valor "+27648,0".
● Estado lógico "0": se presupone que el valor del parámetro IN es unipolar y está
comprendido en un rango de valores entre 0 y 27648. En este caso, la constante "K1" tiene
el valor "0,0" y la constante "K2", el valor "+27648,0".
Si el valor del parámetro IN no se encuentra dentro de los límites definidos por HI_LIM y
LO_LIM, se emite un error. El resultado se ajusta al límite más próximo.
Si el límite inferior indicado es mayor que el límite superior (LO_LIM > HI_LIM), el resultado se
escala de forma inversamente proporcional al valor de entrada.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desescalar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Input

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

REAL

I, Q, M, D, L, P o
constante

Valor de entrada que se de‐
sescala en un valor entero

HI_LIM

Input

REAL

I, Q, M, D, L, P o
constante

Valor límite superior

LO_LIM

Input

REAL

I, Q, M, D, L, P o
constante

Valor límite inferior

BIPOLAR

Input

BOOL

I, Q, M, D, L o
constante

Indica si el valor del paráme‐
tro IN se interpreta como bi‐
polar o unipolar. El paráme‐
tro puede adoptar los valores
siguientes:
1: Bipolar
0: Unipolar

OUT

Output

INT

I, Q, M, D, L, P

Resultado de la instrucción

RET_VAL

Output

WORD

I, Q, M, D, L, P

Información de error

Programación del PLC
Manual de programación y manejo, 11/2019

4933

Instrucciones
4.2 Instrucciones

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

0008

El valor del parámetro IN es mayor que el del límite superior (HI_LIM) o menor que el del
límite inferior (LO_LIM).

8xyy

Encontrará más información de error en "Consulte también".

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización aquí: Cambiar
formatos de visualización en el estado del programa (Página 8529)

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
816&$/(
ಯ7DJ,Qಯ
ಯ7DJB,QSXW9DOXHಯ

(1
,1

ಯ7DJB+LJK/LPLWಯ

+,B/,0

ಯ7DJB/RZ/LPLWಯ

/2B/,0

ಯ7DJB%LSRODUಯ

ಯ7DJ2XWಯ

(12
5(7B9$/
287

ಯ7DJB(UURU&RGHಯ
ಯ7DJB2XWSXW9DOXHಯ

%,32/$5

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_InputValue

50.03978588

HI_LIM

Tag_HighLimit

100.0

LO_LIM

Tag_LowLimit

0.0

BIPOLAR

Tag_Bipolar

1

OUT

Tag_OutputValue

22

RET_VAL

Tag_ErrorCode

W#16#0000

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de KOP (Página 7943)

4934

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Control del programa
---( JMP ): Saltar si RLO = 1
Descripción
La instrucción "Saltar si RLO = 1" permite interrumpir la ejecución lineal del programa y
continuarla en un segmento diferente. El segmento de destino tiene que marcarse con una
etiqueta (LABEL). El nombre de la etiqueta se indica en el comodín situado encima de la
instrucción.
La etiqueta indicada debe encontrarse en el mismo bloque en el que se ejecuta la instrucción.
Su nombre debe ser unívoco en el bloque. En cada segmento no debe existir más de una
bobina de salto.
Si el resultado lógico (RLO) de la entrada de la instrucción es "1", se ejecuta el salto al
segmento identificado por la etiqueta indicada. El salto puede realizarse hacia números de
segmento superiores o inferiores.
Si no se cumple la condición en la entrada de la instrucción (RLO = 0), la ejecución del
programa continúa en el segmento siguiente.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
ಯ7DJ,QBಯ

&$6
-03

ಯ7DJ,QBಯ

ಯ7DJ2XWBಯ
5

6HJPHQWR

6HJPHQWR
&$6
ಯ7DJ,QBಯ

ಯ7DJ2XWBಯ
5

Si el operando "TagIn_1" devuelve el estado lógico "1", se ejecuta la instrucción "Saltar si RLO
= 1". Por este motivo, se interrumpe la ejecución lineal del programa y se prosigue en el
segmento 3, marcado por la etiqueta CAS1. Si la entrada "TagIn_3" devuelve el estado lógico
"1", se desactiva la salida "TagOut_3".

Consulte también
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

4935

Instrucciones
4.2 Instrucciones

---( JMPN ): Saltar si RLO = 0
Descripción
La instrucción "Saltar si RLO = 0" permite interrumpir la ejecución lineal del programa y
continuarla en un segmento diferente si el resultado lógico de la entrada de la instrucción es
"0". El segmento de destino tiene que marcarse con una etiqueta (LABEL). El nombre de la
etiqueta se indica en el comodín situado encima de la instrucción.
La etiqueta indicada debe encontrarse en el mismo bloque en el que se ejecuta la instrucción.
Su nombre debe ser unívoco en el bloque. En cada segmento no debe existir más de una
bobina de salto.
Si el resultado lógico (RLO) de la entrada de la instrucción es "0", se ejecuta el salto al
segmento identificado por la etiqueta indicada. El salto puede realizarse hacia números de
segmento superiores o inferiores.
Si el resultado lógico de la entrada de la instrucción es "1", la ejecución del programa continúa
en el segmento siguiente.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
ಯ7DJ,QBಯ

&$6
-031

ಯ7DJ,QBಯ

ಯ7DJ2XWBಯ
5

6HJPHQWR

6HJPHQWR
&$6
ಯ7DJ,QBಯ

ಯ7DJ2XWBಯ
5

Si el operando "TagIn_1" devuelve el estado lógico "0", se ejecuta la instrucción "Saltar si RLO
= 0". Por este motivo, se interrumpe la ejecución lineal del programa y se prosigue en el
segmento 3, marcado por la etiqueta CAS1. Si la entrada "TagIn_3" devuelve el estado lógico
"1", se desactiva la salida "TagOut_3".

Consulte también
Principios básicos de KOP (Página 7943)

4936

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

LABEL: Etiqueta
Descripción
Una etiqueta sirve para marcar el segmento de destino en el que debe continuar la ejecución
del programa tras un salto.
La etiqueta y la instrucción en la que se indica la etiqueta como destino del salto deben
encontrarse en el mismo bloque. El nombre de una etiqueta debe ser único en el bloque.
En un segmento solo se puede colocar una etiqueta. A toda etiqueta se puede acceder desde
distintas posiciones.
Para la etiqueta deben observarse las siguientes reglas gramaticales:
● Letras (a - z, A - Z)
● Una combinación de letras y números. Es importante observar el orden, es decir, primero
las letras y después los números (a - z, A - Z, 0 - 9).
● No pueden utilizarse caracteres especiales o una combinación de letras y números en
orden inverso, es decir, primero los números y después las letras (0 - 9, a - z, A - Z).

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
ಯ7DJ,QBಯ

&$6
-03

ಯ7DJ,QBಯ

ಯ7DJ2XWBಯ
5

6HJPHQWR

6HJPHQWR
&$6
ಯ7DJ,QBಯ

ಯ7DJ2XWBಯ
5

Si el operando "TagIn_1" devuelve el estado lógico "1", se ejecuta la instrucción "Saltar si RLO
= 1". Por este motivo, se interrumpe la ejecución lineal del programa y se prosigue en el
segmento 3, marcado por la etiqueta CAS1. Si la entrada "TagIn_3" devuelve el estado lógico
"1", se desactiva la salida "TagOut_3".

Consulte también
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

4937

Instrucciones
4.2 Instrucciones

--(RET): Retroceder
Descripción
La instrucción "Retroceder" permite finalizar la ejecución de un bloque de programa.
● Si el resultado lógico (RLO) de la entrada de la instrucción es "1", se finaliza la ejecución del
programa en el bloque de programa llamado actualmente y se continúa en el bloque de
programa que efectúa la llamada (p. ej., en el bloque de organización que llama) después
de la función de llamada. El RLO determina el estado lógico de la salida de habilitación ENO
de la función de llamada. El RLO aparece sobre la instrucción como valor de parámetro fijo.
● Si el resultado lógico (RLO) de la entrada de la instrucción es "0", la instrucción no se
ejecuta. La ejecución del programa continúa en el siguiente segmento del bloque de
programa llamado.
Si la instrucción está programada en el último segmento del bloque de programa llamado, la
salida de habilitación ENO pondrá la función de llamada al estado lógico actual del RLO.
Si se finaliza un bloque de organización con la instrucción, la CPU continuará con el programa
de sistema.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,Qಯ

5/2
5(7

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La ejecución del
programa se finaliza en el bloque de programa llamado y continúa en el bloque de programa
que efectúa la llamada. La salida de habilitación ENO de la función de llamada adopta el
estado lógico "1".

Consulte también
Principios básicos de KOP (Página 7943)

---(OPN): Abrir bloque de datos global
Descripción
La instrucción "Abrir bloque de datos global" permite abrir un bloque de datos (DB). El número
del bloque de datos se transmite al registro del DB. Los siguientes comandos de DB acceden
a los bloques correspondientes en función de los contenidos del registro.

4938

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Abrir bloque de datos global":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Bloque de
datos>

Input

DB_ANY

DB

Bloque de datos que se abre.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR

'%B0RWRU
231

6HJPHQWR
'%;

7DJB2XWSXW

En el segmento 1 se llama al bloque de datos "Motor_DB". El número del bloque de datos se
transmite al registro del DB. En el segmento 2 se consulta el operando "DBX0.0". El estado
lógico del operando "DBX0.0" se asigna al operando "Tag_Output".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

---(OPNI): Abrir bloque de datos de instancia
Descripción
La instrucción "Abrir bloque de datos de instancia" permite abrir un bloque de datos (DB). El
número del bloque de datos se transmite al registro del DI. Los siguientes comandos del DI
acceden a los bloques correspondientes en función de los contenidos del registro.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Abrir bloque de datos de
instancia":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Bloque de
datos>

Input

DB_ANY

DB

Bloque de datos que se abre.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

4939

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR

'%B0RWRU
231,

6HJPHQWR
'%;

7DJB2XWSXW

En el segmento 1 se llama al bloque de datos "Motor_DB". El número del bloque de datos se
transmite al registro del DI. En el segmento 2 se consulta el operando "DBX0.0". El estado
lógico del operando "DBX0.0" se asigna al operando "Tag_Output".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

Control del tiempo de ejecución
COMPRESS: Comprimir la memoria de la CPU
Descripción
La instrucción "Comprimir la memoria de la CPU" permite comprimir la memoria de trabajo de
la CPU o la memoria de carga RAM. Los huecos creados por haber borrado o cargado bloques,
se rellenan juntando los bloques existentes.
Con la llamada de la instrucción "Comprimir la memoria de la CPU" se lanza el proceso de
compresión. El proceso de compresión se reparte entre varios ciclos del programa. La
vigilancia del proceso de compresión se realiza mediante los valores de los distintos
parámetros. Si el parámetro BUSY de la instrucción tiene el valor "1", significa que el proceso
de compresión se está ejecutando todavía. El valor "1" del parámetro DONE indica que ha
finalizado el proceso de compresión. La información de error puede consultarse en el
parámetro RET_VAL.
Si se está ejecutando un proceso de compresión lanzado externamente, la llamada de la
instrucción "Comprimir la memoria de la CPU" origina un error.

4940

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Comprimir la memoria de la CPU":
Paráme‐
tro

Declara‐
ción

Tipo de
datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

RET_VA
L

Output

INT

I, Q, M, D, L

Información de error:

BUSY

Output

BOOL

I, Q, M, D, L

Información de si está activo el
proceso de compresión.

DONE

Output

BOOL

I, Q, M, D, L

Información de si ha finalizado el
proceso de compresión.

El parámetro RET_VAL devuelve
un código de error cuando se pro‐
duce un error durante la ejecu‐
ción de la instrucción.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de error* Explicación
(W#16#...)
0000

Ningún error
El estado del proceso de compresión puede consultarse en los parámetros BUSY y DONE.

8091

Ya se está ejecutando un proceso de compresión lanzado externamente.

8092

La instrucción no se puede ejecutar porque se cumple una de las condiciones siguientes:
● La función "Borrar bloque" está activa.
● Una función de test y de puesta en servicio repercute sobre un bloque (p. ej. estado).
● La función "Copiar bloques" se ha activado por un impulso externo.
● La CPU H se encuentra en un proceso de acoplamiento o actualización.

8xyy

Encontrará más información de error en "Consulte también".

*Los códigos de error en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

4941

Instrucciones
4.2 Instrucciones

RE_TRIGR: Reiniciar tiempo de vigilancia del ciclo
Descripción
La instrucción "Reiniciar tiempo de vigilancia del ciclo" reinicia el tiempo de vigilancia del ciclo
de la CPU. El tiempo de vigilancia del ciclo se reinicia entonces con la duración ajustada en la
configuración de la CPU.
La instrucción "Reiniciar tiempo de vigilancia del ciclo" se puede llamar en todos los bloques
independientemente de la prioridad.
Si la instrucción se llama desde un bloque de prioridad superior, p. ej. en una alarma de
proceso o una alarma de diagnóstico, no se ejecuta la instrucción y la salida de habilitación
ENO se pone al estado lógico "0".
La instrucción "Reiniciar tiempo de vigilancia del ciclo" se ejecuta correctamente en un espacio
de tiempo (10 veces el ciclo máximo del programa), independiente del número de llamadas.
Transcurrido ese tiempo, el ciclo del programa ya no puede prolongarse.

Parámetros
La instrucción "Reiniciar tiempo de vigilancia del ciclo" no tiene parámetros.

Consulte también
Principios básicos de KOP (Página 7943)

STP: Finalizar programa
Descripción
La instrucción "Finalizar programa" conmuta la CPU al estado operativo STOP, con lo que se
finaliza la ejecución del programa. Los efectos al conmutar de RUN a STOP dependen de la
configuración de la CPU.
Si el resultado lógico (RLO) de la entrada de la instrucción es "1", la CPU pasa al estado
operativo STOP y se finaliza el procesamiento del programa. El estado lógico de la salida de
la instrucción no se evalúa.
Si el RLO a la entrada de la instrucción es "0", la instrucción no se ejecuta.

Parámetros
La instrucción "Finalizar programa" no tiene parámetros.

Consulte también
Principios básicos de KOP (Página 7943)

4942

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

WAIT: Programar retardo
Descripción
La instrucción "Programar retardo" permite detener la ejecución del programa durante un
periodo predeterminado. El periodo se indica en microsegundos en el parámetro WT de la
instrucción.
Es posible programar tiempos de retardo de -32768 a 32767 microsegundos (μs). El tiempo de
retardo mínimo depende de la CPU utilizada y equivale al tiempo de ejecución de la instrucción.
La ejecución de la instrucción puede verse interrumpida por eventos de prioridad superior y no
arrojará información de error.
Válido para CPU S7-300:
En las CPU S7-300 (a excepción de S7-318), el tiempo de retardo programado con la
instrucción es un tiempo mínimo. Se prolonga con el tiempo de ejecución de las clases de
prioridad que intervienen y con las cargas del sistema.
Nota
Tiempo de retardo negativo
Si indica un tiempo de retardo negativo en el parámetro WT, la salida de habilitación ENO, o
el RLO y el bit BR arrojan el estado lógico FALSE. Un tiempo de retardo negativo no afecta a
la CPU. En KOP y FUP no se ejecutan las siguientes instrucciones vinculadas a la salida de
habilitación ENO.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Programar retardo":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

WT

Input

INT

I, Q, M, D, L, P o
constante

Tiempo de retardo en micro‐
segundos (μs)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

4943

Instrucciones
4.2 Instrucciones

PROTECT: Cambiar nivel de protección
Descripción
La instrucción "Cambiar nivel de protección" permite modificar el nivel de protección "1"
configurado para la CPU.
El nivel de protección "1" parametrizado con la opción activada "Eliminable por contraseña"
hace que sea necesario parametrizar una contraseña. Esta contraseña permite acceder en
escritura a la CPU protegida contra escritura mediante la instrucción "Cambiar nivel de
protección" durante el funcionamiento (p. ej. cargar).
El nivel de protección se especifica en el parámetro MODE de la instrucción. El nivel de
protección actual de la CPU se visualiza en la ventana de inspección en "Propiedades >
Protección".
La tabla siguiente muestra una explicación de los niveles de protección:
Nivel
de pro‐
tección

Explicación

1

Se permiten todas las funciones de PG. En el caso que exista un bloqueo de la legitimación de la contraseña, este
se elimina llamando la instrucción "Cambiar nivel de protección".

2

● El programa y la configuración de la CPU no se pueden modificar. El programa contenido en la CPU se puede
leer.
● Se permiten las funciones de control, observación y comunicación del proceso.
● Se permiten todas las funciones de información.
● Si conoce la contraseña válida, podrá desactivar la protección contra escritura ajustada.
● En el caso que exista un bloqueo de la legitimación de la contraseña, este se elimina llamando la instrucción
"Cambiar nivel de protección".

3

● Aun conociendo la contraseña válida, no podrá desactivar la protección contra lectura y escritura ajustada.
● Si al llamar la instrucción "Cambiar nivel de protección" existe una conexión legitimada, la llamada de la
instrucción no tendrá ningún efecto en esta conexión.

Si se ha configurado el nivel de protección "2" o "3" para la CPU, la llamada de la instrucción
"Cambiar nivel de protección" no tiene efecto alguno.
El efecto del nivel de protección "2" o "3" una vez ejecutada la instrucción "Cambiar nivel de
protección" puede consultarse en la lista parcial SZL con la ID de SZL W#16#0232 y el índice
W#16#0004.
Nota
La instrucción "Cambiar nivel de protección" permite ajustar un nivel de protección más bajo
que aquel ajustado con "Configurar hardware" de STEP 7. Supongamos que se ha configurado
el nivel de protección 3 y a continuación se llama la instrucción "Cambiar nivel de protección"
con el parámetro MODE = 12. Esto bloqueará la legitimación de la contraseña. Si la instrucción
se llama nuevamente con el parámetro MODE = 0 o 1, el nivel de protección 3 se mantiene y
será posible desactivar la protección de lectura y escritura introduciendo la contraseña válida.

4944

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Efectos de las transiciones de estado operativo en el nivel de protección
La tabla siguiente muestra qué efectos tienen las transiciones de estado operativo en el nivel
de protección ajustado con la instrucción "Cambiar nivel de protección".
Acción

Efectos en el nivel de protección

● Selector de modo en "STOP"

El nivel de protección se pone a "1". Se permiten todas las
funciones de PG.

● Conexión (POWER ON) sin respaldo
● Borrado total mediante el selector de modo
● Cambios de configuración y/o del programa en el estado
operativo "STOP" de la CPU S7-400

El sistema operativo pone el nivel de protección a "1". Se
permiten todas las funciones de PG.

● Arranque en frío
● Rearranque (en caliente)

En caso necesario, llamando la instrucción "Cambiar nivel de
protección" en el programa es posible ajustar el nivel de pro‐
tección en "2" o "3".

Conexión (POWER ON) respaldada

No cambia

Transición de estado operativo RUN/ARRANQUE/PARADA - No cambia
> STOP (debida a la llamada de la instrucción "Finalizar pro‐
grama" (STP), a errores del programa sin el correspondiente
OB de error o a una acción del usuario).
S7-400: Rearranque por acción del usuario o automática‐
mente tras conexión (POWER ON)

No cambia

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Cambiar nivel de protección":
Paráme‐
tro

Declara‐
ción

Tipo de
datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

MODE

Input

WORD

I, Q, M, D, L o constante

Nivel de protección
Valores posibles:
● W#16#0000: Ajuste del nivel
de protección "1"
● W#16#0001: Ajuste del nivel
de protección "2" con
legitimación de la contraseña
● W#16#000C: Ajuste del nivel
de protección "3" sin
legitimación de la contraseña
En el parámetro MODE también
se pueden indicar constantes.

RET_VA
L

Output

Programación del PLC
Manual de programación y manejo, 11/2019

INT

I, Q, M, D, L

Si ocurre un error durante la eje‐
cución, se emite una información
de error.

4945

Instrucciones
4.2 Instrucciones

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de error* Explicación
(W#16#...)
0000

La petición se ha ejecutado sin errores.

8090

Valor no admisible en el parámetro MODE.

80C3

En este momento los recursos necesarios están ocupados.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de KOP (Página 7943)

CiR: Controlar proceso CiR
Descripción
La instrucción "Controlar proceso CiR" permite influir en el proceso CiR en el programa de
usuario como se indica a continuación:
● Bloquear el proceso CiR. En este caso, se rechazará siempre la carga de una configuración
modificada desde la programadora en la CPU. El bloqueo se aplica hasta que se
desbloquee con la instrucción "Controlar proceso CiR".
● Bloqueo condicional del proceso CiR estableciendo un límite superior en el parámetro
FRZ_TIME para el tiempo de sincronización CiR. En este caso, sólo se permitirá cargar una
configuración modificada desde la programadora en la CPU si el tiempo de sincronización
CiR calculado en la CPU no excede el límite superior definido.
● Desbloquear el proceso CiR. El límite superior del tiempo de sincronización CiR se
establece en el valor predeterminado de 1000 ms.
● Determinar si el proceso CiR está o no habilitado. Si el proceso CiR está habilitado o lo está
condicionadamente, el límite superior actual del tiempo de sincronización CiR se indica en
el parámetro A_FT de la instrucción.
Nota
Durante el tiempo de sincronización CiR, las salidas están congeladas y las entradas no se
evalúan.

4946

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Controlar proceso CiR":
Paráme‐
tros

Declara‐
ción

Tipo de
datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

MODE

Input

BYTE

I, Q, M, D, L o constante

ID de la petición
Los valores admisibles del pará‐
metro MODE son:
● 0: Función de información
● 1: Habilitar proceso CiR
● 2: Bloquear proceso CiR
● 3: Bloquear proceso CiR de
forma condicionada. El límite
superior del tiempo de
sincronización CiR se define
en FRZ_TIME.

FRZ_TI‐
ME

Input

TIME

I, Q, M, D, L o constante

Límite superior del tiempo de sin‐
cronización CiR en milisegundos.
Rango de valores admisible:
60 ... 2500 ms (valor predetermi‐
nado: 1000 ms)
El parámetro FRZ_TIME sólo es
relevante cuando el parámetro
MODE se establece en el valor
"3".

RET_VA
L

Output

A_FT

Output

INT

I, Q, M, D, L

Información de error
Si el parámetro MODE está a "0",
el parámetro RET_VAL indica si
el proceso CiR está habilitado o
no.

TIME

I, Q, M, D, L

Límite superior válido actualmen‐
te del tiempo de sincronización
CiR

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de error* Explicación
(W#16#...)
0000

La petición se ha ejecutado sin errores.
Este código de error sólo se puede emitir si el parámetro MODE está puesto al valor 1, 2 ó 3.

0001

El proceso CiR está habilitado.
Este código de error sólo se puede emitir si el parámetro MODE está puesto al valor "0".

0002

El proceso CiR está bloqueado.
Este código de error sólo se puede emitir si el parámetro MODE está puesto al valor "0".

Programación del PLC
Manual de programación y manejo, 11/2019

4947

Instrucciones
4.2 Instrucciones
Código de error* Explicación
(W#16#...)
0003

El proceso CiR está bloqueado de forma condicionada.
Este código de error sólo se puede emitir si el parámetro MODE está puesto al valor "0".

8001

La CPU no está lista para un proceso CiR. Se está utilizando una CPU H en el sistema H (modo "Indivi‐
dual") o una CPU estándar en modo multiprocesador.

8002

El valor del parámetro MODE no es admisible.

8003

El valor del parámetro FRZ_TIME no es admisible.

8xyy

Encontrará más información de error en "Consulte también".

*Los códigos de error en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Ejemplo
La instrucción "Controlar proceso CiR" permite programar p. ej. que no se lance ningún
proceso CiR en periodos en los que se requiera la capacidad máxima de la CPU para el
procesamiento.
Para ello, debe llamarse la instrucción "Controlar proceso CiR" en el programa antes de
comenzar el periodo con una mayor actividad de procesos y ejecutarla con el valor "2"
(Bloquear proceso CiR) en el parámetro MODE. Con ello se bloquea el proceso CiR.
Para volver a habilitar el proceso CiR tras finalizar el periodo de actividad aumentada del
proceso, la instrucción "Controlar proceso CiR" debe llamarse de nuevo y ejecutarse con el
valor "1" en el parámetro MODE. De manera alternativa también puede establecer el
parámetro MODE en el valor "3" y bloquear así el proceso CiR.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de KOP (Página 7943)

Operaciones lógicas con palabras
AND: Operación lógica Y
Descripción
La instrucción "Operación lógica Y" permite combinar el valor de la entrada IN1 con el valor de
la entrada IN2 de bit en bit mediante una Y lógica y consultar el resultado en la salida OUT.
Al ejecutar la instrucción, el bit 0 del valor de la entrada IN1 se combina con el bit 0 del valor
de la entrada IN2 mediante una Y lógica. El resultado se deposita en el bit 0 de la salida OUT.
La misma combinación lógica se realiza para todos los demás bits de los valores indicados.

4948

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
El estado lógico del bit de resultado es "1" sólo si el estado lógico de los dos bits que deben
combinarse lógicamente también es "1". Si el estado lógico de uno de los bits que deben
combinarse lógicamente es "0", se desactivará el bit de resultado correspondiente.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica Y":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

WORD, DWORD

I, Q, M, D, L, P o
constante

Primer valor de la operación
lógica

IN2

Input

WORD, DWORD

I, Q, M, D, L, P o
constante

Segundo valor de la opera‐
ción lógica

OUT

Output

WORD, DWORD

I, Q, M, D, L, P

Resultado de la instrucción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

$1'
:25'
(1

ಯ7DJB9DOXHಯ

,1

ಯ7DJB9DOXHಯ

,1

ಯ7DJ2XWಯ

(12
287

ಯ7DJB5HVXOWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN1

Tag_Value1

0101 0101 0101 0101

IN2

Tag_Value2

0000 0000 0000 1111

OUT

Tag_Result

0000 0000 0000 0101

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El valor del
operando "Tag_Value1" se combina con el valor del operando "Tag_Value2" mediante una Y
lógica. El resultado se obtiene de bit en bit y se deposita en el operando "Tag_Result". La salida
de habilitación ENO y la salida "TagOut" adoptan el estado lógico "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)

Programación del PLC
Manual de programación y manejo, 11/2019

4949

Instrucciones
4.2 Instrucciones
Activar el bit de estado en operaciones lógicas con palabras (Página 194)
Principios básicos de KOP (Página 7943)

OR: Operación lógica O
Descripción
La instrucción "Operación lógica O" permite combinar el valor de la entrada IN1 con el valor de
la entrada IN2 de bit en bit mediante una O lógica y consultar el resultado en la salida OUT.
Al ejecutar la instrucción, el bit 0 del valor de la entrada IN1 se combina con el bit 0 del valor
de la entrada IN2 mediante una O lógica. El resultado se deposita en el bit 0 de la salida OUT.
La misma combinación lógica se realiza para todos los bits de la variable indicada.
El estado lógico del bit de resultado es "1" si el estado lógico de como mínimo uno de los dos
bits que deben combinarse lógicamente también es "1". Si el estado lógico de ambos bits que
deben combinarse lógicamente es "0", se desactivará el bit de resultado correspondiente.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica O":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

WORD, DWORD

I, Q, M, D, L, P o
constante

Primer valor de la operación
lógica

IN2

Input

WORD, DWORD

I, Q, M, D, L, P o
constante

Segundo valor de la opera‐
ción lógica

OUT

Output

WORD, DWORD

I, Q, M, D, L, P

Resultado de la instrucción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

4950

25
:25'
(1

ಯ7DJB9DOXHಯ

,1

ಯ7DJB9DOXHಯ

,1

(12
287

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN1

Tag_Value1

0101 0101 0101 0101

IN2

Tag_Value2

0000 0000 0000 1111

OUT

Tag_Result

0101 0101 0101 1111

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El valor del
operando "Tag_Value1" se combina con el valor del operando "Tag_Value2" mediante una O
lógica. El resultado se obtiene de bit en bit y se deposita en el operando "Tag_Result". La salida
de habilitación ENO y la salida "TagOut" adoptan el estado lógico "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar el bit de estado en operaciones lógicas con palabras (Página 194)
Principios básicos de KOP (Página 7943)

XOR: Operación lógica O-exclusiva
Descripción
La instrucción "Operación lógica O-exclusiva" permite combinar el valor de la entrada IN1 con
el valor de la entrada IN2 de bit en bit mediante una O exclusiva y consultar el resultado en la
salida OUT.
Al ejecutar la instrucción, el bit 0 del valor de la entrada IN1 se combina con el bit 0 del valor
de la entrada IN2 mediante una O exclusiva. El resultado se deposita en el bit 0 de la salida
OUT. La misma combinación lógica se realiza para todos los demás bits del valor indicado.
El estado lógico del bit de resultado es "1" si el estado lógico de uno de los dos bits que deben
combinarse lógicamente también es "1". Si el estado lógico de ambos bits que deben
combinarse lógicamente es "1" o "0", se desactivará el bit de resultado correspondiente.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica O-exclusiva":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

WORD, DWORD

I, Q, M, D, L, P o
constante

Primer valor de la operación
lógica

IN2

Input

WORD, DWORD

I, Q, M, D, L, P o
constante

Segundo valor de la opera‐
ción lógica

OUT

Output

WORD, DWORD

I, Q, M, D, L, P

Resultado de la instrucción

Programación del PLC
Manual de programación y manejo, 11/2019

4951

Instrucciones
4.2 Instrucciones
En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

;25
:25'
(1

ಯ7DJB9DOXHಯ

,1

ಯ7DJB9DOXHಯ

,1

ಯ7DJ2XWಯ

(12
287

ಯ7DJB5HVXOWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN1

Tag_Value1

0101 0101 0101 0101

IN2

Tag_Value2

0000 0000 0000 1111

OUT

Tag_Result

0101 0101 0101 1010

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El valor del
operando "Tag_Value1" se combina con el valor del operando "Tag_Value2" mediante una Oexclusiva. El resultado se obtiene de bit en bit y se deposita en el operando "Tag_Result". La
salida de habilitación ENO y la salida "TagOut" adoptan el estado lógico "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar el bit de estado en operaciones lógicas con palabras (Página 194)
Principios básicos de la palabra de estado (Página 184)
Insertar elementos KOP (Página 7955)
Seleccionar el tipo de datos de un elemento KOP (Página 7960)
Editar elementos KOP (Página 7974)
Cablear operandos en instrucciones KOP (Página 7981)
Principios básicos de KOP (Página 7943)

4952

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

INVERT: Complemento a 1
Descripción
La instrucción "Complemento a 1" permite invertir el estado lógico de los bits de la entrada IN.
Al ejecutar la instrucción, el valor de la entrada IN se combina con una plantilla hexadecimal
(W#16#FFFF para números de 16 bits o DW#16#FFFFFFFF para números de 32 bits)
mediante una operación lógica O-exclusiva. Esto invierte el estado lógico de los distintos bits
y deposita el resultado en la salida OUT.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Complemento a 1":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Enteros

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Enteros

I, Q, M, D, L, P

Complemento a 1 del valor
de la entrada IN

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
,19
,17

ಯ7DJ,Qಯ

ಯ7DJ,QB9DOXHಯ

ಯ7DJ2XWಯ

(1

(12

,1

287

ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

W#16#000F

OUT

TagOut_Value

W#16#FFF0

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
invierte el estado lógico de los distintos bits de la entrada "TagIn_Value" y escribe el resultado
en la salida "TagOut_Value". La salida de habilitación ENO y la salida "TagOut" adoptan el
estado lógico "1".

Programación del PLC
Manual de programación y manejo, 11/2019

4953

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar el bit de estado en operaciones lógicas con palabras (Página 194)
Principios básicos de KOP (Página 7943)

DECO: Descodificar
Descripción
La instrucción "Descodificar" activa un bit predeterminado por el valor de entrada en el valor de
salida.
La instrucción "Descodificar" lee el valor de la entrada IN y activa el bit del valor de salida, cuya
posición de bit equivale al valor leído. Los demás bits del valor de salida se rellenan con ceros.
Si el valor de la entrada IN es mayor que 31, se ejecuta una instrucción modulo 32.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Descodificar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

WORD

I, Q, M, D, L, P o
constante

Posición del bit que se activa
en el valor de salida.

OUT

Output

DWORD

I, Q, M, D, L, P

Valor de salida

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
'(&2
ಯ7DJ,Qಯ

ಯ7DJ,QB9DOXHಯ

:25' WR ':25'
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJ2XWB9DOXHಯ

La figura siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
ಱ7DJB,QSXWಯ




ಱ7DJB2XWSXWಯ

4954

 



 

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
lee el número de bit "3" del valor del operando "TagIn_Value" de la entrada y activa el tercer bit
del valor del operando "TagOut_Value" de la salida.
Si no se producen errores al ejecutar la instrucción, la salida de habilitación ENO devuelve el
estado lógico "1" y se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar el bit de estado en operaciones lógicas con palabras (Página 194)
Principios básicos de KOP (Página 7943)

ENCO: Codificar
Descripción
La instrucción "Codificar" permite leer el número del bit menos significativo que está activado
en el valor de entrada y depositarlo en la salida OUT.
La instrucción "Codificar" selecciona el bit menos significativo del valor de la entrada IN y
escribe su número de bit en la variable de la salida OUT.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Codificar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

DWORD

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

INT

I, Q, M, D, L, P

Valor de salida

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJ,QB9DOXHಯ

(1&2
':25'
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJ2XWB9DOXHಯ

La figura siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:

Programación del PLC
Manual de programación y manejo, 11/2019

4955

Instrucciones
4.2 Instrucciones


 



ಯ7DJB,QSXWಯ  
ಯ7DJB2XWSXWಯ 

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
selecciona el bit menos significativo que está activado en la entrada "TagIn_Value" y escribe
el bit "3" en la variable de la salida "TagOut_Value".
Si no se producen errores al ejecutar la instrucción, la salida de habilitación ENO devuelve el
estado lógico "1" y se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar el bit de estado en operaciones lógicas con palabras (Página 194)
Principios básicos de KOP (Página 7943)

SEL: Seleccionar
Descripción
La instrucción "Seleccionar" permite seleccionar, en función de un interruptor (entrada G), una
de las entradas IN0 o IN1 y copiar su contenido en la salida OUT. Si la entrada G tiene el estado
lógico "0", se copia el valor de la entrada IN0. Si la entrada G tiene el estado lógico "1", se copia
el valor de la entrada IN1 en la salida OUT.
Para poder procesar la instrucción, las variables de todos los parámetros deben ser del mismo
tipo de datos.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Seleccionar":

4956

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

G

Input

BOOL

I, Q, M, D, L, T, C

IN0

Input

I, Q, M, D, L, P
Secuencias de
bits, enteros, nú‐
meros en coma flo‐
tante, temporiza‐
dores, CHAR,
TOD, DATE

Interruptor
Primer valor de entrada

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

IN1

Input

I, Q, M, D, L, P
Secuencias de
bits, enteros, nú‐
meros en coma flo‐
tante, temporiza‐
dores, CHAR,
TOD, DATE

Área de memoria

Descripción
Segundo valor de entrada

OUT

Output

I, Q, M, D, L, P
Secuencias de
bits, enteros, nú‐
meros en coma flo‐
tante, temporiza‐
dores, CHAR,
TOD, DATE

Resultado

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJ,QB*ಯ

6(/
:25'
(1

(12

*

287

ಯ7DJ,QB9DOXHಯ

,1

ಯ7DJ,QB9DOXHಯ

,1

ಯ7DJ2XWಯ
ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

G

TagIn_G

0

1

IN0

TagIn_Value0

W#16#0000

W#16#4C

IN1

TagIn_Value1

W#16#FFFF

W#16#5E

OUT

TagOut_Value

W#16#0000

W#16#5E

Si el operando "TagIn" tiene el estado lógico "1", se ejecuta la instrucción. Dependiendo del
estado lógico de la entrada "TagIn_G", se selecciona el valor de la entrada "TagIn_Value0" o
"TagIn_Value1" y se copia en la salida "TagOut_Value". Si no se producen errores al ejecutar
la instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y se activa la salida
"TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)

Programación del PLC
Manual de programación y manejo, 11/2019

4957

Instrucciones
4.2 Instrucciones
Activar el bit de estado en operaciones lógicas con palabras (Página 194)
Principios básicos de KOP (Página 7943)

Desplazamiento y rotación
SHR: Desplazar a la derecha
Descripción
La instrucción "Desplazar a la derecha" permite desplazar el contenido del operando de la
entrada IN de bit en bit hacia la derecha y consultar el resultado en la salida OUT. El parámetro
N determina el número de bits que debe desplazarse el valor indicado.
Si el valor del parámetro N es "0", el valor de la entrada IN se copia en el operando de la salida
OUT.
Si el valor del parámetro N es mayor que el número de bits disponibles, el valor del operando
de la entrada IN se desplaza hacia la derecha las posiciones de bit disponibles.
En los valores sin signo, se rellenan con ceros los bits que quedan libres en el área izquierda
del operando al realizar el desplazamiento. Si el valor indicado lleva signo, las posiciones libres
se ocupan con el estado lógico del bit de signo.
La figura siguiente muestra cómo el contenido de un operando del tipo de datos INT se
desplaza cuatro posiciones de bit hacia la derecha:


,1



1

%LW
GHVLJQR

287



 










































SRVLFLRQHV











/RVELWVTXHTXHGDQOLEUHV
VHUHOOHQDQFRQHOHVWDGROµJLFR
GHOELWGHVLJQR

4958



















(VWRVFXDWURELWV
VHSLHUGHQ

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desplazar a la derecha":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

BYTE, WORD,
DWORD, INT,
DINT

I, Q, M, D, L, P o
constante

Valor que se desplaza.

N

Input

BYTE, WORD, INT I, Q, M, D, L, P o
constante

Número de bits que se des‐
plaza el valor.

OUT

Output

BYTE, WORD,
DWORD, INT,
DINT

Resultado de la instrucción

I, Q, M, D, L

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6+5
:25'

ಯ7DJ,Qಯ
ಯ7DJ,QB9DOXHಯ
ಯ7DJB1XPEHUಯ

(1

,1

1

(12

287


ಯ7DJ2XWಯ
6
ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

0011 1111 1010 1111

N

Tag_Number

3

OUT

TagOut_Value

0000 0111 1111 0101

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Desplazar a la
derecha". El contenido del operando "TagIn_Value" se desplaza tres posiciones de bit hacia la
derecha. El resultado se emite en la salida "TagOut_Value". Si no se producen errores al
ejecutar la instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y se activa
la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)

Programación del PLC
Manual de programación y manejo, 11/2019

4959

Instrucciones
4.2 Instrucciones
Activar el bit de estado en instrucciones de desplazamiento y rotación (Página 194)
Principios básicos de KOP (Página 7943)

SHL: Desplazar a la izquierda
Descripción
La instrucción "Desplazar a la izquierda" permite desplazar el contenido del operando de la
entrada IN de bit en bit hacia la izquierda y consultar el resultado en la salida OUT. El
parámetro N determina el número de bits que debe desplazarse el valor indicado.
Si el valor del parámetro N es "0", el valor de la entrada IN se copia en el operando de la salida
OUT.
Si el valor del parámetro N es mayor que el número de bits disponibles, el valor del operando
de la entrada IN se desplaza hacia la izquierda las posiciones de bit disponibles.
Los bits que quedan libres en el área derecha del operando al realizar el desplazamiento se
rellenan con ceros.
La figura siguiente muestra cómo el contenido de un operando del tipo de datos WORD se
desplaza seis posiciones de bit hacia la izquierda:


,1



 




1

287




























SRVLFLRQHV

     

































/RVELWVTXHTXHGDQ
OLEUHVVHUHOOHQDQ
FRQFHURV

(VWRVVHLVELWV
VHSLHUGHQ

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desplazar a la izquierda":
Parámetro

4960

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

BYTE, WORD,
DWORD, INT,
DINT

I, Q, M, D, L, P o
constante

Valor que se desplaza

N

Input

BYTE, WORD, INT I, Q, M, D, L, P o
constante

Número de posiciones de bit
que se desplaza el valor

OUT

Output

BYTE, WORD,
DWORD, INT,
DINT

Resultado de la instrucción

I, Q, M, D, L

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6+/
:25'

ಯ7DJ,Qಯ
ಯ7DJ,QB9DOXHಯ
ಯ7DJB1XPEHUಯ

(1

,1

1

(12

287


ಯ7DJ2XWಯ
6
ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

0011 1111 1010 1111

N

Tag_Number

4

OUT

TagOut_Value

1111 1010 1111 0000

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Desplazar a la
izquierda". El contenido del operando "TagIn_Value" se desplaza cuatro posiciones de bit
hacia la izquierda. El resultado se emite en la salida "TagOut_Value". Si no se producen
errores al ejecutar la instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y
se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar el bit de estado en instrucciones de desplazamiento y rotación (Página 194)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

4961

Instrucciones
4.2 Instrucciones

ROR: Rotar a la derecha
Descripción
La instrucción "Rotar a la derecha" permite rotar el contenido del operando de la entrada IN de
bit en bit hacia la derecha y consultar el resultado en la salida OUT. El parámetro N determina
el número de bits que debe rotarse el valor indicado. Los bits que quedan libres al realizar la
rotación se rellenan con los bits desplazados hacia fuera.
Si el valor del parámetro N es "0", el valor de la entrada IN se copia en el operando de la salida
OUT.
Si el valor del parámetro N es mayor que el número de bits disponibles, el valor del operando
en la entrada IN rota de todos modos el número indicado de posiciones de bit.
La figura siguiente muestra cómo el contenido de un operando del tipo de datos DWORD rota
tres posiciones hacia la derecha:


,1

 



       

1

SRVLFLRQHV

287

        
(OHVWDGROµJLFRGHORVWUHV
ELWVGHVSOD]DGRVVHLQVHUWD
HQODVSRVLFLRQHVTXHTXHGDQOLEUHV

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Rotar a la derecha":
Parámetro

4962

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

BYTE, WORD,
DWORD, DINT

I, Q, M, D, L, P o
constante

Valor que se rota

N

Input

BYTE, WORD, INT I, Q, M, D, L, P o
constante

Número de posiciones de bit
que rota el valor

OUT

Output

BYTE, WORD,
DWORD, DINT

Resultado de la instrucción

I, Q, M, D, L

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
525
':25'

ಯ7DJ,Qಯ
ಯ7DJ,QB9DOXHಯ
ಯ7DJB1XPEHUಯ

(1

,1

1

(12

287


ಯ7DJ2XWಯ
6
ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

1010 1010 0000 1111 0000
1111 0101 0101

N

Tag_Number

5

OUT

TagOut_Value

1010 1101 0101 0000 0111
1000 0111 1010

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Rotar a la
derecha". El contenido del operando "TagIn_Value" se rota cinco posiciones de bit hacia la
derecha. El resultado se emite en la salida "TagOut_Value". Si no se producen errores al
ejecutar la instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y se activa
la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar el bit de estado en instrucciones de desplazamiento y rotación (Página 194)
Principios básicos de KOP (Página 7943)

ROL: Rotar a la izquierda
Descripción
La instrucción "Rotar a la izquierda" permite rotar el contenido del operando de la entrada IN
de bit en bit hacia la izquierda y consultar el resultado en la salida OUT. El parámetro N
determina el número de bits que debe rotarse el valor indicado. Los bits que quedan libres al
realizar la rotación se rellenan con los bits desplazados hacia fuera.
Si el valor del parámetro N es "0", el valor de la entrada IN se copia en el operando de la salida
OUT.

Programación del PLC
Manual de programación y manejo, 11/2019

4963

Instrucciones
4.2 Instrucciones
Si el valor del parámetro N es mayor que el número de bits disponibles, el valor del operando
en la entrada IN rota de todos modos el número indicado de posiciones de bit.
La figura siguiente muestra cómo el contenido de un operando del tipo de datos DWORD rota
tres posiciones hacia la izquierda:


,1

 

       

1

287



SRVLFLRQHV

        
(OHVWDGROµJLFRGHORVWUHV
ELWVGHVSOD]DGRVVHLQVHUWD
HQODVSRVLFLRQHVTXHTXHGDQOLEUHV

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Rotar a la izquierda":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

BYTE, WORD,
DWORD, DINT

I, Q, M, D, L, P o
constante

Valor que se rota

N

Input

BYTE, WORD, INT I, Q, M, D, L, P o
constante

Número de posiciones de bit
que rota el valor

OUT

Output

BYTE, WORD,
DWORD, DINT

Resultado de la instrucción

I, Q, M, D, L

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

4964

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
52/
':25'

ಯ7DJ,Qಯ
ಯ7DJ,QB9DOXHಯ
ಯ7DJB1XPEHUಯ

(1

,1

1

(12
287

ಯ7DJ2XWಯ
6
ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

1111 0000 1010 1010 0000
1111 0000 1111

N

Tag_Number

5

OUT

TagOut_Value

0001 0101 0100 0001 1110
0001 1111 1110

Si la entrada "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Rotar a la
izquierda". El contenido del operando "TagIn_Value" se rota cinco posiciones de bit hacia la
izquierda. El resultado se emite en la salida "TagOut_Value". Si no se producen errores al
ejecutar la instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y se activa
la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar el bit de estado en instrucciones de desplazamiento y rotación (Página 194)
Principios básicos de KOP (Página 7943)

Otras instrucciones
---| |---: Consultar si el bit de estado es 1
Descripción
La instrucción "Consultar si el bit de estado es 1" permite consultar el estado lógico de los
siguientes bits de estado:
● BR: Resultado binario
● OV: Rebase por exceso

Programación del PLC
Manual de programación y manejo, 11/2019

4965

Instrucciones
4.2 Instrucciones
● OS: Desbordamiento con memoria
● CC 0 y CC 1: Bits de visualización
Qué bits de estado se consultan se determina mediante la selección del símbolo
correspondiente en la lista desplegable de la instrucción. La siguiente tabla muestra las
posibilidades de consulta de los bits de estado:
Símbolo

Consulta

Explicación

==0

CC 0 = 0 y CC 1 = 0

La instrucción consulta si el re‐
sultado de una función matemá‐
tica es igual a 0.

<>0

CC 0 = 1 y CC 1 = 0

La instrucción consulta si el re‐
sultado de una función matemá‐
tica es diferente a 0.

o
CC 0 = 0 y CC 1 = 0
>=0

CC 0 = 0

La instrucción consulta si el re‐
sultado de una función matemá‐
tica es mayor o igual que 0.

<=0

CC 1 = 0

La instrucción consulta si el re‐
sultado de una función matemá‐
tica es menor o igual que 0.

>0

CC 0 = 1 y CC 1 = 0

La instrucción consulta si el re‐
sultado de una función matemá‐
tica es mayor que 0.

<0

CC 1 = 0 y CC 1 = 0

La instrucción consulta si el re‐
sultado de una función matemá‐
tica es menor que 0.

UO

CC 1 = 1 y CC 1 = 0

La instrucción consulta si el re‐
sultado de una función matemá‐
tica no es válido. La causa de un
resultado inválido puede ser un
número en coma flotante no vá‐
lido o una división entre cero.

OV

OV = 1

La instrucción consulta si se ha
producido un desbordamiento
del rango numérico en una ins‐
trucción.

OS

OS = 1

La instrucción consulta si se ha
producido un desbordamiento
del rango numérico con memoria
en una instrucción.

BR

BR = 1

La instrucción consulta el estado
lógico del bit de estado BR.

La instrucción "Consultar si el bit de estado es 1" funciona como un contacto normalmente
abierto. Si la respuesta es afirmativa, la instrucción devuelve el estado lógico "1". Si no se
cumple la condición, la instrucción devuelve el estado lógico "0".

4966

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
ಯ7DJ,Qಯ

08/
5($/
(1

ಯ7DJB9DOXHಯ

,1

ಯ7DJB9DOXHಯ

,1

(12

287

ಯ7DJ2XWಯ
6

ಯ7DJB5HVXOWಯ

6HJPHQWR
29

ಯ7DJ29ಯ
6

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Multiplicar"
(MUL). Si se produce un rebase por exceso durante la ejecución de la instrucción "Multiplicar"
se activa el bit de estado OV. Tras la consulta del bit de estado OV, se ejecuta la instrucción
"Activar salida" (S) en el segmento 2 y se activa el operando "TagOV".

Consulte también
Principios básicos de la palabra de estado (Página 184)
Insertar elementos KOP (Página 7955)
Editar elementos KOP (Página 7974)
Activar el bit de estado (Página 186)

---| / |---: Consultar si el bit de estado es 0
Descripción
Con la instrucción "Consultar si el bit de estado es 0" es posible consultar el estado lógico de
los siguientes bits de estado y negar el resultado de la consulta:
● BR: Resultado binario
● OV: Rebase por exceso
● OS: Desbordamiento con memoria
● CC 0 y CC 1: Bits de visualización

Programación del PLC
Manual de programación y manejo, 11/2019

4967

Instrucciones
4.2 Instrucciones
Qué bits de estado se consultan se determina mediante la selección del símbolo
correspondiente en la lista desplegable de la instrucción. La siguiente tabla muestra las
posibilidades de consulta de los bits de estado:
Símbolo

Consulta

Explicación

==0

CC 0 = 0 y CC 1 = 0

La instrucción consulta si el re‐
sultado de una función matemá‐
tica es igual a 0.

<>0

CC 0 = 1 y CC 1 = 0

La instrucción consulta si el re‐
sultado de una función matemá‐
tica es diferente a 0.

o
CC 0 = 0 y CC 1 = 0
>=0

CC 0 = 0

La instrucción consulta si el re‐
sultado de una función matemá‐
tica es mayor o igual que 0.

<=0

CC 1 = 0

La instrucción consulta si el re‐
sultado de una función matemá‐
tica es menor o igual que 0.

>0

CC 0 = 1 y CC 1 = 0

La instrucción consulta si el re‐
sultado de una función matemá‐
tica es mayor que 0.

<0

CC 1 = 0 y CC 1 = 0

La instrucción consulta si el re‐
sultado de una función matemá‐
tica es menor que 0.

UO

CC 1 = 1 y CC 1 = 0

La instrucción consulta si el re‐
sultado de una función matemá‐
tica no es válido. La causa de un
resultado inválido puede ser un
número en coma flotante no vá‐
lido o una división entre cero.

OV

OV = 1

La instrucción consulta si en una
instrucción se ha rebasado el
rango numérico.

OS

OS = 1

La instrucción consulta si en una
instrucción se ha producido un
desbordamiento del rango nu‐
mérico con memoria.

BR

BR = 1

La instrucción consulta el estado
lógico del bit de estado BR.

La instrucción "Consultar si el bit de estado es 0" funciona como un contacto normalmente
cerrado. Si la respuesta es afirmativa, la instrucción devuelve el estado lógico "0". Si no se
cumple la condición, la instrucción devuelve el estado lógico "1".

4968

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
ಯ7DJ,Qಯ

08/
,17
(1

ಯ7DJB9DOXHಯ

,1

ಯ7DJB9DOXHಯ

,1

(12

287

ಯ7DJ2XWBಯ
6

ಯ7DJB5HVXOWಯ

6HJPHQWR
29

ಯ7DJ2XWBಯ
6

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Multiplicar"
(MUL). Si durante la ejecución de la instrucción no se produce un rebase por exceso, se pone
a "0" el bit de estado OV. Tras la consulta del bit de estado OV, se ejecuta la instrucción "Activar
salida" (S) en el segmento 2 y se activa el operando "TagOut_2".

Consulte también
Principios básicos de la palabra de estado (Página 184)
Insertar elementos KOP (Página 7955)
Editar elementos KOP (Página 7974)
Activar el bit de estado (Página 186)

---(CALL): Llamar bloque
Descripción
La instrucción "Llamar bloque" llama una función (FC) sin parámetros. En función de la
operación lógica precedente, se puede tratar de una llamada absoluta o condicionada.
En la sección de instrucciones de una función (FC) no puede indicar como operando ningún
parámetro del tipo de datos BLOCK_FC en una llamada condicional. En un bloque de función
(FB) tampoco puede indiciar como operando un parámetro del tipo BLOCK_FC.
Solo se ejecutará una llamada condicional cuando el resultado lógico (RLO) sea "1". Si no se
ejecuta una llamada condicionada, después de la operación de llamada el RLO es "0". Si se
ejecuta la operación, ésta trabaja del modo siguiente:
● Guarda la dirección de retorno del bloque que efectúa la llamada.
● Guarda los dos registros de bloque de datos (bloque de datos y bloque de datos de
instancia).
Programación del PLC
Manual de programación y manejo, 11/2019

4969

Instrucciones
4.2 Instrucciones
● Actualiza el área de datos locales para la FC o SFC llamada.
● Desplaza el bit MA (bit MCR activo) a la pila de bloques (pila BSTACK).

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Llamar bloque":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Bloque>

Output

BLOCK_FC

-

Función llamada

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

)&
&$//

Se llama a la función "FC3" cuando el operando "TagIn_1" tiene el estado lógico "1".

Consulte también
El MCR (Master Control Relay) (Página 203)
Indicaciones importantes sobre el uso de la función MCR (Página 204)
Insertar elementos KOP (Página 7955)
Editar elementos KOP (Página 7974)

---(SAVE): Guardar RLO en bit BR
Descripción
La instrucción "Guardar RLO en bit BR" permite guardar el resultado lógico (RLO) en el
resultado binario (BR). Durante la ejecución, la instrucción transfiere el estado lógico del
resultado lógico actual al bit de estado BR. La instrucción trabaja independientemente de las
condiciones y no influye en ningún otro bit de estado.
Nota
Tras aplicar la instrucción "Guardar RLO en bit BR", el bit BR puede ser modificado
nuevamente por instrucciones posteriores del mismo bloque o de bloques de nivel inferior.
La instrucción "Guardar RLO en bit BR" también se utiliza para controlar el estado de ejecución
de un bloque. Si, p. ej., la instrucción "Guardar RLO en bit BR" se programa al final de un
bloque, el bit BR se pone al estado lógico del resultado lógico actual del bloque. Si el bloque
se ejecuta sin fallos, tanto el bit BR como la salida de habilitación ENO se ponen al estado
lógico "1" en el bloque llamado. El estado lógico "0" se asigna al bit BR si se han producido

4970

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
errores durante el procesamiento del bloque. Mediante consulta del bit BR es posible
programar un tratamiento de errores.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ ಯ7DJ,QBಯ
6$9(
ಯ7DJ,QBಯ

El bit BR se pone al estado lógico "1" si se da una de las siguientes condiciones:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● El operando "TagIn_3" devuelve el estado lógico "1".

Consulte también
Principios básicos de la palabra de estado (Página 184)
Ejemplo del mecanismo EN/ENO en KOP (Página 157)
Insertar elementos KOP (Página 7955)
Editar elementos KOP (Página 7974)
Activar el bit de estado (Página 186)

---(MCR<): Abrir áreas MCR
Descripción
La instrucción "Abrir áreas MCR" guarda el resultado lógico (RLO) en la pila MCR y cambia la
dependencia MCR dentro de un área MCR (MCR = Master Control Relay).
La pila MCR puede contener como máximo 8 entradas y funciona como una memoria
intermedia LIFO (Last In, First Out). Cuando la pila está llena, la instrucción genera un mensaje
de error (MCRF).
Nota
Observe la información contenida en el apartado "Indicaciones importantes sobre el uso de la
funcionalidad MCR", en "Consulte también".
El principio y el fin de un área MCR se definen mediante las instrucciones "Activar área MCR"
(MCRA) y "Desactivar área MCR" (MCRD). Dentro del área MCR definida es posible activar y
desactivar la dependencia MCR para una o varias partes del programa.

Programación del PLC
Manual de programación y manejo, 11/2019

4971

Instrucciones
4.2 Instrucciones
La dependencia MCR se activa si el RLO es "1" antes de procesar la instrucción. Si el RLO es
"0" antes de la instrucción, la dependencia MCR se desactiva. El final de la sección del
programa dependiente de MCR se programa mediante la instrucción "Cerrar áreas MCR". La
sección del programa que se encuentra entre las dos instrucciones se ve influenciada por el
MCR. Solo están afectadas las siguientes instrucciones dependientes de MCR:
● Asignación
● Activar salida (S)
● Desactivar salida (R)
● Flipflop de desactivación/activación (RS)
● Flipflop de activación/desactivación (SR)
● Copiar valor (MOVE)
También es posible anidar la activación y desactivación de la dependencia MCR programando
la instrucción "Abrir áreas MCR" en una sección del programa dependiente de MCR. Esta
instrucción se puede anidar hasta 8 niveles de profundidad. La dependencia MCR de la parte
del programa de nivel superior controla las dependencias MCR en todas las partes del
programa subordinadas. Si la dependencia MCR en la parte del programa de nivel superior
está desactivada, no es posible activarla en una parte subordinada del programa dependiente
de MCR.
Si dentro de un área MCR se llama un bloque, la dependencia MCR está desactivada en el
bloque llamado. Cuando se sale de un bloque, la dependencia MCR se ajusta igual que estaba
antes de llamarlo.
Las instrucciones "Abrir áreas MCR" y "Cerrar áreas MCR" deben programarse siempre de dos
en dos. Si una de las dos instrucciones no está programada, se dispara un error de pila MCR.

4972

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
0&5$
6HJPHQWR
7DJ,QB

0&5

6HJPHQWR
7DJ,QB
0&5
6HJPHQWR
7DJ,QB

7DJ2XWB

|QLYHOGHO
£UHD0&5
HUQLYHOGHO
£UHD0&5

6HJPHQWR
0&5!
6HJPHQWR
7DJ,QB

7DJ2XWB

6HJPHQWR
0&5!
6HJPHQWR
0&5'

En el segmento 1 se programa el inicio del área MCR. Si el operando "TagIn_1" devuelve el
estado lógico "1", se conecta la dependencia MCR en el primer nivel del área MCR. En ese
caso, el estado lógico del operando "TagIn_4" está asignado al operando "TagOut_2"
(segmento 6). Si el operando "TagIn_1" tiene el estado lógico "0", se desactiva la dependencia
MCR y se pone a "0" el operando "TagOut_2". En el segmento 7 se desconecta la dependencia
MCR del área MCR.
En el segmento 3 se activa la dependencia MCR en el segundo nivel del área MCR si el
operando "TagIn_2" devuelve el estado lógico "1" y el primer nivel del área MCR está activado.
En ese caso, el estado lógico del operando "TagIn_3" se asigna al operando "TagOut_1". Si el
operando "TagIn_2" tiene el estado lógico "0", se desactiva la dependencia MCR y se pone a
"0" el operando "TagOut_1". En el segmento 5 se desactiva la dependencia MCR en el
segundo nivel del área MCR. En el segmento 8 se programa el final del área MCR.

Programación del PLC
Manual de programación y manejo, 11/2019

4973

Instrucciones
4.2 Instrucciones

Consulte también
Indicaciones importantes sobre el uso de la función MCR (Página 204)
El MCR (Master Control Relay) (Página 203)
---(MCR>): Cerrar áreas MCR (Página 4974)
---(MCRA): Activar área MCR (Página 4976)
---(MCRD): Desactivar área MCR (Página 4977)

---(MCR>): Cerrar áreas MCR
Descripción
La instrucción "Cerrar áreas MCR" cierra una sección de programa dependiente de MCR
(MCR = Master Control Relay). También borra el resultado lógico (RLO) de la última entrada
de la pila MCR.
La pila MCR puede contener como máximo 8 entradas y funciona como una memoria
intermedia LIFO (Last In, First Out). Cuando la pila ya está vacía, la instrucción genera un
mensaje de error (MCRF).
Nota
Observe la información contenida en el apartado "Indicaciones importantes sobre el uso de la
funcionalidad MCR", en "Consulte también".
La dependencia MCR se programa con la instrucción "Abrir áreas MCR". Las instrucciones
"Abrir áreas MCR" y "Cerrar áreas MCR" deben programarse siempre de dos en dos. Si una
de las dos instrucciones no está programada, se dispara un error de pila MCR.

4974

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
0&5$
6HJPHQWR
7DJ,QB

0&5

6HJPHQWR
7DJ,QB
0&5
6HJPHQWR
7DJ,QB

7DJ2XWB

|QLYHOGHO
£UHD0&5
HUQLYHOGHO
£UHD0&5

6HJPHQWR
0&5!
6HJPHQWR
7DJ,QB

7DJ2XWB

6HJPHQWR
0&5!
6HJPHQWR
0&5'

En el segmento 1 se programa el inicio del área MCR. Si el operando "TagIn_1" devuelve el
estado lógico "1", se conecta la dependencia MCR en el primer nivel del área MCR. En ese
caso, el estado lógico del operando "TagIn_4" está asignado al operando "TagOut_2"
(segmento 6). Si el operando "TagIn_1" tiene el estado lógico "0", se desactiva la dependencia
MCR y se pone a "0" el operando "TagOut_2". En el segmento 7 se desconecta la dependencia
MCR del área MCR.
En el segmento 3 se activa la dependencia MCR en el segundo nivel del área MCR si el
operando "TagIn_2" devuelve el estado lógico "1". En ese caso, el estado lógico del operando
"TagIn_3" se asigna al operando "TagOut_1". Si el operando "TagIn_2" tiene el estado lógico
"0", se desactiva la dependencia MCR y se pone a "0" el operando "TagOut_1"
independientemente del estado lógico del operando "TagIn_3". En el segmento 5 se desactiva
la dependencia MCR en el segundo nivel del área MCR. En el segmento 8 se programa el final
del área MCR.

Programación del PLC
Manual de programación y manejo, 11/2019

4975

Instrucciones
4.2 Instrucciones

Consulte también
El MCR (Master Control Relay) (Página 203)
Indicaciones importantes sobre el uso de la función MCR (Página 204)
---(MCR<): Abrir áreas MCR (Página 4971)
---(MCRA): Activar área MCR (Página 4976)
---(MCRD): Desactivar área MCR (Página 4977)

---(MCRA): Activar área MCR
Descripción
La instrucción "Activar área MCR" define el principio de un área MCR. Dentro de dicha área es
posible activar y desactivar la dependencia MCR con la ayuda de las instrucciones siguientes:
● ---(MCR<): Abrir áreas MCR
● ---(MCR>): Cerrar áreas MCR
El fin del área MCR se define con la instrucción "Desactivar área MCR" (MCRD). Las
instrucciones para definir el principio y fin de un área MCR siempre deben utilizarse por parejas.
Nota
Observe la información contenida en el apartado "Indicaciones importantes sobre el uso de la
funcionalidad MCR", en "Consulte también".
Si dentro de un área MCR se llama un bloque, la dependencia MCR está desactivada en el
bloque llamado. Cuando se sale de un bloque, la dependencia MCR se ajusta igual que estaba
antes de llamarlo.
La instrucción se ejecuta sin considerar ni influir en los bits de estado.

4976

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
0&5$
6HJPHQWR
7DJ,QB

0&5

6HJPHQWR
7DJ,QB

7DJ2XW

6HJPHQWR
0&5!
6HJPHQWR
0&5'

En el segmento 1 se programa el inicio del área MCR. Si el operando "TagIn_1" devuelve el
estado lógico "1", se activa la dependencia MCR. En ese caso, el estado lógico del operando
"TagIn_2" está asignado al operando "TagOut" (segmento 3). Si el operando "TagIn_1" tiene
el estado lógico "0", se desactiva la dependencia MCR y se pone a "0" el operando "TagOut"
independientemente del estado lógico del operando "TagIn_2". En el segmento 4 se
desconecta la dependencia MCR del área MCR. En el segmento 8 se programa el final del área
MCR.

Consulte también
El MCR (Master Control Relay) (Página 203)
Indicaciones importantes sobre el uso de la función MCR (Página 204)
---(MCR<): Abrir áreas MCR (Página 4971)
---(MCR>): Cerrar áreas MCR (Página 4974)
---(MCRD): Desactivar área MCR (Página 4977)

---(MCRD): Desactivar área MCR
Descripción
La instrucción "Desactivar área MCR" define el final de un área MCR.

Programación del PLC
Manual de programación y manejo, 11/2019

4977

Instrucciones
4.2 Instrucciones
El principio de un área MCR se define con la instrucción "Activar área MCR" (MCRA). Las
instrucciones para definir el principio y fin de un área MCR siempre deben utilizarse por parejas.
Nota
Observe la información contenida en el apartado "Indicaciones importantes sobre el uso de la
funcionalidad MCR", en "Consulte también".
Dentro de un área MCR es posible programar la dependencia MCR con la ayuda de las
instrucciones siguientes:
● ---(MCR<): Abrir áreas MCR
● ---(MCR>): Cerrar áreas MCR
Si dentro de un área MCR se llama un bloque, la dependencia MCR está desactivada en el
bloque llamado. Cuando se sale de un bloque, la dependencia MCR se ajusta igual que estaba
antes de llamarlo.
La instrucción se ejecuta sin considerar ni influir en los bits de estado.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
0&5$
6HJPHQWR
7DJ,QB

0&5

6HJPHQWR
7DJ,QB

7DJ2XW

6HJPHQWR
0&5!
6HJPHQWR
0&5'

En el segmento 1 se programa el inicio del área MCR. Si el operando "TagIn_1" devuelve el
estado lógico "1", se activa la dependencia MCR. En ese caso, el estado lógico del operando
"TagIn_2" está asignado al operando "TagOut" (segmento 3). Si el operando "TagIn_1" tiene
el estado lógico "0", se desactiva la dependencia MCR y se pone a "0" el operando "TagOut"
independientemente del estado lógico del operando "TagIn_2". En el segmento 4 se
desconecta la dependencia MCR del área MCR. En el segmento 8 se programa el final del área
MCR.

4978

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
El MCR (Master Control Relay) (Página 203)
Indicaciones importantes sobre el uso de la función MCR (Página 204)
---(MCR<): Abrir áreas MCR (Página 4971)
---(MCR>): Cerrar áreas MCR (Página 4974)
---(MCRA): Activar área MCR (Página 4976)

SET: Activar área por bits
Descripción
La instrucción "Activar área por bits" establece el estado lógico de los bits en "1" en un área
indicada. El punto inicial del área se define mediante el puntero del parámetro S_BIT. Si el
puntero señala al área de memoria de la periferia externa (P), no se ejecuta la instrucción. El
número de bits que deben activarse en el área indicada se determina en el parámetro N de la
instrucción. Si el parámetro N tiene el valor "0", la llamada de la instrucción no tendrá efecto
alguno.
La instrucción se ejecuta sólo si el bit MCR está a "1". Si el bit MCR tiene el estado lógico "0",
no se modifican los bits en el área indicada.
Nota
Parámetro N
En el parámetro N también es posible interconectar un elemento de un bloque de datos.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Activar área por bits":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

S_BIT

Input

POINTER

I, Q, M, D

Apunta al primer bit del área
cuyos bits se activan
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

N

Input

INT

I, Q, M, D, L, P o
constante

Número de bits que deben
activarse

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

4979

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6(7
ಯ7DJ2XWಯ

ಯ7DJ,Qಯ

(1

30


(12

6B%,7
1

Si el operando "TagIn" devuelve el estado lógico "1", la instrucción establece 10 bits en el área
de M0.0 a M1.2.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
El MCR (Master Control Relay) (Página 203)
Indicaciones importantes sobre el uso de la función MCR (Página 204)
Insertar elementos KOP (Página 7955)
Editar elementos KOP (Página 7974)
Cablear operandos en instrucciones KOP (Página 7981)

SETP: Activar mapa de bits en el área de periferia
Descripción
La instrucción "Activar mapa de bits en el área de periferia" permite poner los bits de un área
de periferia al estado lógico "1". Paralelamente a los bits de periferia, también se activan los
bits correspondientes en la memoria imagen de proceso de las salidas.
Los parámetros N y SA de la instrucción sirven para definir el mapa de bits que debe activarse.
Los bits del mapa deben encontrarse en aquella parte del área de periferia que tiene asignada
una memoria imagen de proceso.
Si no se ha conectado periferia para una parte del mapa de bits seleccionado, la instrucción
intentará activar el mapa de bits completo. En este caso se devuelve una información de error
en el parámetro RET_VAL.

4980

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
El área de periferia se activa por bytes. Si el mapa de bits definido a través de los parámetros
N y SA no empieza ni termina en un límite de byte, la llamada de la instrucción tendrá el efecto
siguiente:
● Los bits contenidos en el primer o último byte que debe transferirse y que no pertenecen al
mapa de bits definido obtienen el valor del bit correspondiente en la memoria imagen de
proceso de las salidas.
ADVERTENCIA
Comportamiento involuntario
El ajuste de los bits al valor del bit correspondiente en la memoria imagen de proceso de
las salidas puede ocasionar, p. ej., el arranque accidental de motores o la desconexión de
sistemas de refrigeración.
● Los bits que pertenecen al mapa de bits definido se ponen al estado lógico "1".
La instrucción "Activar mapa de bits en el área de periferia" debe llamarse en un área MCR.
La llamada de la instrucción "Activar mapa de bits en el área de periferia" no tiene efecto alguno
y la salida de habilitación ENO se pone a "0" si se cumple una de las condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El parámetro N devuelve el valor "0"
● El bit MCR tiene el estado lógico "1".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Activar mapa de bits en el área de
periferia":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

N

Input

INT

I, Q, M, D, L o
constante

Número de bits que deben
activarse.

RET_VAL

Output

INT

I, Q, M, D, L

Información de error

SA

Output

POINTER

P

Puntero hacia el primer bit
que debe activarse

Programación del PLC
Manual de programación y manejo, 11/2019

4981

Instrucciones
4.2 Instrucciones

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8xyy

Encontrará más información de error en "Consulte también".

*Los códigos de error en el editor de programas se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6(73
ಯ7DJ2XWಯ

ಯ7DJ,Qಯ

(1

(12
5(7B9$/



1

6$

ಯ7DJB(UURUಯ
3

Si el operando "TagIn" devuelve el estado lógico "1", la instrucción activa 8 bits en el área de
periferia de acuerdo con las salidas Q10.0 a Q10.7.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de KOP (Página 7943)

4982

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

SETI: Activar área por bytes
Descripción
La instrucción "Activar área por bytes" establece en "1" el estado lógico de los bits en un área
indicada de bytes. El punto inicial del área se define en el parámetro S_BYTE. El tamaño del
área se define indicando el número de bits que deben activarse en el parámetro N de la
instrucción.
Nota
El valor del parámetro N debe ser un múltiplo de 8 (p. ej. 8, 16, 24, etc.).
El puntero indicado en el parámetro S_BYTE debe señalar al área de memoria de la periferia
externa (P). Puesto que al área de memoria "Periferia" se accede en formato de byte, palabra
y palabra doble, el puntero del parámetro S_BYTE debe señalar a un operando equivalente a
un valor límite de byte. Por tanto, el número de bit del puntero debe ser "0".
Nota
El estado lógico de los bits correspondientes en la memoria imagen de proceso de las salidas
se pone a "0".
La llamada de la instrucción "Activar área por bytes" no tiene efecto alguno y la salida de
habilitación ENO se pone a "0" si se cumple una de las condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El puntero del parámetro S_BYTE no señala al área de memoria de la periferia externa.
● El puntero del parámetro S_BYTE señala a un operando que no equivale a ningún valor
límite de byte.
● El valor del parámetro N no es un múltiplo de 8.
● El bit MCR tiene el estado lógico "0".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Activar área por bytes":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habili‐
tación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilita‐
ción

Programación del PLC
Manual de programación y manejo, 11/2019

4983

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

S_BYTE

Input

POINTER

P o constante

Señala al primer
byte del área cu‐
yos bits se activan.
En el direcciona‐
miento indirecto
por registro interá‐
rea, el puntero de‐
be indicarse en for‐
mato de palabra
doble.

N

Input

INT

I, Q, M, D, L, P o
constante

Tamaño del área
que debe activarse
El área se indica
mediante el núme‐
ro de bits como
múltiplo de 8 (p. ej.
8, 16, 24, etc.).

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6(7,
ಯ7DJ2XWಯ

ಯ7DJ,Qಯ

(1
3


(12

6B%<7(
1

Si el operando "TagIn" devuelve el estado lógico "1", la instrucción activa 2 bytes (16 bits) en
el área de P2.0 a P3.7.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
El MCR (Master Control Relay) (Página 203)
Indicaciones importantes sobre el uso de la función MCR (Página 204)
Insertar elementos KOP (Página 7955)
Editar elementos KOP (Página 7974)
Cablear operandos en instrucciones KOP (Página 7981)

4984

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

RESET: Desactivar área por bits
Descripción
La instrucción "Desactivar área por bits" establece el estado lógico de los bits en "0" en un área
indicada. El punto inicial del área se define mediante el puntero del parámetro S_BIT. Si el
puntero señala al área de memoria de la periferia externa, no se ejecuta la instrucción. El
número de bits que deben desactivarse en el área indicada se determina en el parámetro N de
la instrucción. Si el parámetro N tiene el valor "0", la llamada de la instrucción no tendrá efecto
alguno.
La instrucción se ejecuta sólo si el bit MCR está a "1". Si el bit MCR tiene el estado lógico "0",
no se modifican los bits en el área indicada.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desactivar área por bits":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habili‐
tación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilita‐
ción

S_BIT

Input

POINTER

I, Q, M, D

Señala al primer
bit del área cuyos
bits se desactivan.
En el direcciona‐
miento indirecto
por registro interá‐
rea, el puntero de‐
be indicarse en for‐
mato de palabra
doble.

N

Input

INT

I, Q, M, D, L, P o
constante

Número de bits
que deben desac‐
tivarse.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
5(6(7
ಯ7DJ2XWಯ

ಯ7DJ,Qಯ

(1

30


Programación del PLC
Manual de programación y manejo, 11/2019

(12

6B%,7
1

4985

Instrucciones
4.2 Instrucciones
Si el operando "TagIn" devuelve el estado lógico "1", la instrucción restablece 10 bits en el área
de M0.0 a M1.2.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
El MCR (Master Control Relay) (Página 203)
Indicaciones importantes sobre el uso de la función MCR (Página 204)
Insertar elementos KOP (Página 7955)
Editar elementos KOP (Página 7974)
Cablear operandos en instrucciones KOP (Página 7981)

RESETP: Desactivar mapa de bits en el área de periferia
Descripción
La instrucción "Desactivar mapa de bits en el área de periferia" permite poner los bits de un
área de periferia al estado lógico "0". Simultáneamente con los bits de periferia se desactivan
también los bits correspondientes en la memoria imagen de proceso de las salidas.
Los parámetros N y SA de la instrucción sirven para definir el mapa de bits que debe
desactivarse. Los bits del mapa deben encontrarse en aquella parte del área de periferia que
tiene asignada una memoria imagen de proceso.
Si no hay periferia enchufada para una parte del mapa de bits seleccionado, la instrucción
intentará desactivar el mapa de bits completo. En este caso se devuelve una información de
error en el parámetro RET_VAL.
El área de periferia se inicializa por bytes. Si el mapa de bits definido a través de los parámetros
N y SA no empieza ni termina en un límite de byte, la llamada de la instrucción tendrá el efecto
siguiente:
● Los bits contenidos en el primer o último byte que debe transferirse y que no pertenecen al
mapa de bits definido, obtienen el valor de los bits correspondientes en la memoria imagen
de proceso de las salidas.
ADVERTENCIA
Comportamiento involuntario
El ajuste de los bits al valor de los bits correspondientes en la memoria imagen de proceso
de las salidas puede ocasionar p. ej. el arranque accidental de motores o la desconexión
de sistemas de refrigeración.
● Los bits que pertenecen al mapa de bits definido se ponen al estado lógico "0".
La instrucción "Desactivar mapa de bits en el área de periferia" debe llamarse en un área MCR.

4986

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La llamada de la instrucción "Desactivar mapa de bits en el área de periferia" no tiene efecto
alguno y la salida de habilitación ENO se pone a "0" si se cumple una de las condiciones
siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El parámetro N devuelve el valor "0"
● El bit MCR tiene el estado lógico "1".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desactivar mapa de bits en el área
de periferia":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

N

Input

INT

I, Q, M, D, L o
constante

Número de bits que deben
desactivarse.

RET_VAL

Output

INT

I, Q, M, D, L

Información de error

SA

Output

POINTER

P

Puntero al primer bit que de‐
be desactivarse.

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8xyy

Encontrará más información de error en "Consulte también".

*Los códigos de error en el editor de programas se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
5(6(73
ಯ7DJ2XWಯ

ಯ7DJ,Qಯ

(1

(12
6$



Programación del PLC
Manual de programación y manejo, 11/2019

1

5(7B9$/

3
ಯ7DJB(UURUಯ

4987

Instrucciones
4.2 Instrucciones
Si el operando "TagIn" devuelve el estado lógico "1", la instrucción inicializa 8 bits en el área
de periferia de acuerdo con las salidas Q10.0 a Q10.7.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de KOP (Página 7943)

RESETI: Desactivar área por bytes
Descripción
La instrucción "Desactivar área por bytes" restablece el estado lógico de los bytes en "0" en un
área indicada. El punto inicial del área se define mediante el puntero del parámetro S_BYTE.
El tamaño del área se define indicando el número de bits que deben desactivarse en el
parámetro N de la instrucción.
Nota
El valor del parámetro N debe ser un múltiplo de 8 (p. ej. 8, 16, 24, etc.).
El puntero indicado en el parámetro S_BYTE debe señalar al área de memoria de la periferia
externa. Puesto que al área de memoria "Periferia" se accede en formato de byte, palabra y
palabra doble, el puntero del parámetro S_BYTE debe señalar a un operando equivalente a un
valor límite de byte. Por tanto, el número de bit del puntero debe ser "0".
Nota
El estado lógico de los bits correspondientes en la memoria imagen de proceso de las salidas
se pone a "0".
La llamada de la instrucción "Desactivar área por bytes" no tiene efecto alguno y la salida de
habilitación ENO se pone a "0" si se cumple una de las condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El puntero del parámetro S_BYTE no señala al área de memoria de la periferia externa.
● El puntero del parámetro S_BYTE señala a un operando que no equivale a ningún valor
límite de byte.
● El valor del parámetro N no es un múltiplo de 8.
● El bit MCR tiene el estado lógico "0".

4988

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desactivar área por bytes":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habili‐
tación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilita‐
ción

S_BYTE

Input

POINTER

P o constante

Señala al primer
byte del área cu‐
yos bits se desac‐
tivan.
En el direcciona‐
miento indirecto
por registro interá‐
rea, el puntero de‐
be indicarse en for‐
mato de palabra
doble.

N

Input

INT

I, Q, M, D, L, P o
constante

Tamaño del área
cuyos bits se de‐
sactivan.
El área se indica
mediante el núme‐
ro de bits como
múltiplo de 8 (p. ej.
8, 16, 24, etc.).

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
5(6(7,
ಯ7DJ,Qಯ

ಯ7DJ2XWಯ
(1
3


(12

6B%<7(
1

Si el operando "TagIn" devuelve el estado lógico "1", la instrucción desactiva 2 bytes (16 bits)
en el área de P2.0 a P3.7.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
El MCR (Master Control Relay) (Página 203)
Indicaciones importantes sobre el uso de la función MCR (Página 204)

Programación del PLC
Manual de programación y manejo, 11/2019

4989

Instrucciones
4.2 Instrucciones
Insertar elementos KOP (Página 7955)
Editar elementos KOP (Página 7974)
Cablear operandos en instrucciones KOP (Página 7981)

REPL_VAL: Introducir valor sustitutivo
Descripción
La instrucción "Introducir valor sustitutivo" permite introducir un valor sustitutivo en el
acumulador 1 (ACU 1) desde un bloque de organización de error síncrono.
Nota
La instrucción "Introducir valor sustitutivo" sólo se puede llamar desde bloques de organización
de error síncrono (OB 121, OB 122).
La instrucción "Introducir valor sustitutivo" se utiliza si ya no es posible leer ningún valor de un
módulo. Tras cada acceso a dicho módulo se inicia el OB 122. Llamando la instrucción
"Introducir valor sustitutivo" es posible cargar un valor sustitutivo en el acumulador 1. La
ejecución del programa se prosigue entonces con este valor sustitutivo. La información
necesaria para seleccionar el valor sustitutivo puede consultarse en las variables locales del
OB 122.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Introducir valor sustitutivo":
Paráme‐
tro

Declara‐
ción

Tipo de
datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

VAL

Input

DWOR
D

I, Q, M, D, L o constante

Valor sustitutivo

RET_VA
L

Output

INT

I, Q, M, D, L

Información de error

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de error* Descripción
(W#16#....)
0000

Ningún error

8080

La instrucción no se ha llamado desde un OB de error síncrono.

8xyy

Encontrará más información de error en "Consulte también".

*Los códigos de error en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

4990

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de KOP (Página 7943)

DRUM: Materializar circuito secuencial sucesivo
Descripción
La instrucción "Materializar circuito secuencial sucesivo" permite ocupar los bits de salida
programados (OUT1 a OUT16) y la palabra de salida (OUT_WORD) con los valores
programados del parámetro OUT_VAL del paso respectivo. El paso en cuestión debe cumplir
las condiciones de la máscara de habilitación programada en el parámetro S_MASK mientras
la instrucción permanece en dicho paso. La instrucción pasa al paso siguiente cuando el
evento de éste es verdadero y una vez transcurrido el tiempo programado para el paso actual,
o bien cuando el valor del parámetro JOG cambia de "0" a "1". La instrucción se desactiva
cuando el estado lógico del parámetro RESET cambia a "1". Con ello, el paso actual se iguala
al paso predeterminado (DSP).
El tiempo de permanencia en un paso se calcula multiplicando la base de tiempo
predeterminada (DTBP) por el valor de contaje predeterminado (S_PRESET) para cada paso.
Al comienzo de un nuevo paso, este valor calculado se carga en el parámetro DCC, que
contiene el tiempo restante para el paso actual. Por ejemplo, si el valor del parámetro DTBP es
"2" y el valor predeterminado para el primer paso es "100" (100 ms), el parámetro DCC
devolverá el valor "200" (200 ms).
Un paso puede programarse con un valor de tiempo, con un evento o con ambos. Los pasos
programados con un bit de evento y el valor de tiempo "0" pasan al siguiente paso en cuanto
el estado lógico del bit de evento es "1". Los pasos programados sólo con un valor de tiempo
empiezan a contar el tiempo inmediatamente. Los pasos programados con un bit de evento y
un valor de tiempo mayor que "0" empiezan a contar el tiempo en cuanto el estado lógico del
bit de evento es "1". Los bits de evento se inicializan con el estado lógico "1".
Si el circuito secuencial sucesivo se encuentra en el último paso programado (LST_STEP) y ha
transcurrido el tiempo para dicho paso, el estado lógico del parámetro Q se pone a "1". De lo
contrario, se pone a "0". Si está activado el parámetro Q, la instrucción permanece en el paso
hasta la desactivación.
En la máscara configurable (S_MASK) es posible seleccionar los distintos bits de la palabra de
salida (OUT_WORD) y activar o desactivar los bits de salida (OUT1 a OUT16) mediante los
valores de salida (OUT_VAL). Si un bit de la máscara configurable tiene el estado lógico "1",
el valor OUT_VAL activa o desactiva el bit respectivo. Si el estado lógico de un bit de la
máscara configurable es "0", no cambia el bit respectivo. Todos los bits de la máscara
configurable de todos los 16 pasos se inicializan con el estado lógico "1".
El bit de salida del parámetro OUT1 equivale al bit menos significativo de la palabra de salida
(OUT_WORD). El bit de salida del parámetro OUT16 equivale al bit más significativo de la
palabra de salida (OUT_WORD).

Programación del PLC
Manual de programación y manejo, 11/2019

4991

Instrucciones
4.2 Instrucciones
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Materializar circuito secuencial
sucesivo":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

RESET

Input

BOOL

I, Q, M, D, L

El estado lógico "1" indica
una condición de desactiva‐
ción.

JOG

Input

BOOL

I, Q, M, D, L

Si el estado lógico cambia de
"0" a "1", la instrucción pasa
al siguiente paso.

DRUM_EN

Input

BOOL

I, Q, M, D, L

El estado lógico "1" permite
que el circuito secuencial su‐
cesivo siga contando según
el evento y los criterios de
tiempo.

LST_STEP

Input

BYTE

I, Q, M, D, L o
constante

Número del último paso pro‐
gramado.

EVENT(i),

Input

BOOL

I, Q, M, D, L

1 ≤ i ≤ 16
OUT(j),

Bit de evento (i);
el estado lógico inicial es "1".

Output

BOOL

I, Q, M, D, L

Bit de salida (j)

Q

Output

BOOL

I, Q, M, D, L

El estado lógico "1" indica
que ha transcurrido el tiempo
del último paso.

OUT_WORD

Output

WORD

I, Q, M, D, L, P

Dirección de palabra en la
que el circuito secuencial su‐
cesivo escribe los valores de
salida.

ERR_CODE

Output

WORD

I, Q, M, D, L, P

Información de error

JOG_HIS

Static

BOOL

I, Q, M, D, L

Bit de evolución del paráme‐
tro JOG

EOD

Static

BOOL

I, Q, M, D, L

El estado lógico "1" indica
que ha transcurrido el tiempo
del último paso.

DSP

Static

BYTE

I, Q, M, D, L, P

Paso predeterminado del cir‐
cuito secuencial sucesivo

DSC

Static

BYTE

I, Q, M, D, L, P

Paso actual del circuito se‐
cuencial sucesivo

1 ≤ j ≤ 16

4992

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

DCC

Static

DWORD

I, Q, M, D, L, P

Valor de contaje actual del
circuito secuencial sucesivo

DTBP

Static

WORD

I, Q, M, D, L, P

Base de tiempo predetermi‐
nada del circuito secuencial
sucesivo

PrevTime

Static

TIME

I, Q, M, D, L o
constante

Hora de sistema anterior

S_PRESET

Static

ARRAY[1..16] of
WORD

I, Q, M, D, L

Valor de contaje predetermi‐
nado para cada paso [1 a 16];
1 ciclo de reloj = 1 ms.

OUT_VAL

Static

ARRAY[1..16,
0..15] of BOOL

I, Q, M, D, L

Valores de salida para cada
paso [1 a 16, 0 a 15].

S_MASK

Static

ARRAY[1..16,
0..15] of BOOL

I, Q, M, D, L

Máscara configurable para
cada paso [1 a 16, 0 a 15].
Los estados lógicos iniciales
son "1".

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
ERR_CODE*

Explicación

W#16#0000

Ningún error

W#16#000B

El valor del parámetro LST_STEP es menor que 1 o mayor que 16.

W#16#000C

El valor del parámetro DSC es menor que 1 o mayor que el valor del parámetro LST_STEP.

W#16#000D

El valor del parámetro DSP es menor que 1 o mayor que el valor de LST_STEP.

*Los códigos de error en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Ejemplo
En el ejemplo siguiente, la instrucción pasa del paso 1 al paso 2. Los bits de salida (OUT1 a
OUT16) y la palabra de salida (OUT_WORD) se activan según la máscara configurada para el
paso 2 y los valores del parámetro OUT_VAL.
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.

Programación del PLC
Manual de programación y manejo, 11/2019

4993

Instrucciones
4.2 Instrucciones
ಯ'580B'%ಯ
'580

ಯ7DJ,Qಯ

ಯ7DJ2XWಯ
(12

(1
ಯ7DJB5HVHWಯ
ಯ7DJB,QSXWB-2*ಯ
ಯ7DJB'580B(1ಯ
ಯ/DVW6WHSಯ
ಯ0\(YHQWಯ

5(6(7
-2*
'580B(1
/67B67(3
(9(17

287
4
287B:25'
(55B&2'(

ಯ0\2XWSXWಯ
ಯ7DJB2XWSXWB4ಯ
ಯ7DJB2XWSXWB:25'ಯ
ಯ7DJB(UURU&RGHಯ

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.

Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para asignar valores a los parámetros de
entrada:
Parámetro

Operando

Dirección

Valor

RESET

Tag_Reset

M0.0

FALSE

JOG

Tag_Input_JOG

M0.1

FALSE

DRUM_EN

Tag_Input_Drum_EN

M0.2

TRUE

LST_STEP

Tag_Number_LastStep

MB1

B#16#08

EVENT2

MyTag_Event_2

M20.0

FALSE

EVENT4

MyTag_Event_4

M20.1

FALSE

EVENT6

MyTag_Event_6

M20.2

FALSE

EVENT8

MyTag_Event_8

M20.3

FALSE

EVENT10

MyTag_Event_10

M20.4

FALSE

EVENT12

MyTag_Event_12

M20.5

FALSE

EVENT14

MyTag_Event_14

M20.6

FALSE

EVENT16

MyTag_Event_16

M20.7

FALSE

En el bloque de datos de instancia "DRUM_DB" de la instrucción están almacenados los
siguientes valores:
Parámetro

4994

Dirección

Valor

JOG_HIS

DBX12.0

FALSE

EOD

DBX12.1

FALSE

DSP

DBB13

W#16#0001

DSC

DBB14

W#16#0001

DCC

DBD16

DW#16#0000000A

DTBP

DBW20

W#16#0001

S_PRESET[1]

DBW26

W#16#0064

S_PRESET[2]

DBW28

W#16#00C8

OUT_VAL[1,0]

DBX58.0

TRUE

OUT_VAL[1,1]

DBX58.1

TRUE

OUT_VAL[1,2]

DBX58.2

TRUE

OUT_VAL[1,3]

DBX58.3

TRUE

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Dirección

Valor

OUT_VAL[1,4]

DBX58.4

TRUE

OUT_VAL[1,5]

DBX58.5

TRUE

OUT_VAL[1,6]

DBX58.6

TRUE

OUT_VAL[1,7]

DBX58.7

TRUE

OUT_VAL[1,8]

DBX59.0

TRUE

OUT_VAL[1,9]

DBX59.1

TRUE

OUT_VAL[1,10]

DBX59.2

TRUE

OUT_VAL[1,11]

DBX59.3

TRUE

OUT_VAL[1,12]

DBX59.4

TRUE

OUT_VAL[1,13]

DBX59.5

TRUE

OUT_VAL[1,14]

DBX59.6

TRUE

OUT_VAL[1,15]

DBX59.7

TRUE

OUT_VAL[2,0]

DBX60.0

FALSE

OUT_VAL[2,1]

DBX60.1

FALSE

OUT_VAL[2,2]

DBX60.2

FALSE

OUT_VAL[2,3]

DBX60.3

FALSE

OUT_VAL[2,4]

DBX60.4

FALSE

OUT_VAL[2,5]

DBX60.5

FALSE

OUT_VAL[2,6]

DBX60.6

FALSE

OUT_VAL[2,7]

DBX60.7

FALSE

OUT_VAL[2,8]

DBX61.0

FALSE

OUT_VAL[2,9]

DBX61.1

FALSE

OUT_VAL[2,10]

DBX61.2

FALSE

OUT_VAL[2,11]

DBX61.3

FALSE

OUT_VAL[2,12]

DBX61.4

FALSE

OUT_VAL[2,13]

DBX61.5

FALSE

OUT_VAL[2,14]

DBX61.6

FALSE

OUT_VAL[2,15]

DBX61.7

FALSE

S_MASK[2,0]

DBX92.0

FALSE

S_MASK[2,1]

DBX92.1

TRUE

S_MASK[2,2]

DBX92.2

TRUE

S_MASK[2,3]

DBX92.3

TRUE

S_MASK[2,4]

DBX92.4

TRUE

S_MASK[2,5]

DBX92.5

FALSE

S_MASK[2,6]

DBX92.6

TRUE

S_MASK[2,7]

DBX92.7

TRUE

S_MASK[2,8]

DBX93.0

FALSE

S_MASK[2,9]

DBX93.1

FALSE

S_MASK[2,10]

DBX93.2

TRUE

S_MASK[2,11]

DBX93.3

TRUE

S_MASK[2,12]

DBX93.4

TRUE

S_MASK[2,13]

DBX93.5

TRUE

Programación del PLC
Manual de programación y manejo, 11/2019

4995

Instrucciones
4.2 Instrucciones
Parámetro

Dirección

Valor

S_MASK[2,14]

DBX93.6

FALSE

S_MASK[2,15]

DBX93.7

TRUE

Los parámetros de salida tienen los valores siguientes antes de ejecutarse la instrucción:
Parámetro

Operando

Dirección

Valor

Q

Tag_Output_Q

M6.0

FALSE

OUTWORD

Tag_OutputWord

MW8

W#16#FFFF

OUT1

MyTag_Output_1

M4.0

TRUE

OUT2

MyTag_Output_2

M4.1

TRUE

OUT3

MyTag_Output_3

M4.2

TRUE

OUT4

MyTag_Output_4

M4.3

TRUE

OUT5

MyTag_Output_5

M4.4

TRUE

OUT6

MyTag_Output_6

M4.5

TRUE

OUT7

MyTag_Output_7

M4.6

TRUE

OUT8

MyTag_Output_8

M4.7

TRUE

OUT9

MyTag_Output_9

M5.0

TRUE

OUT10

MyTag_Output_10

M5.1

TRUE

OUT11

MyTag_Output_11

M5.2

TRUE

OUT12

MyTag_Output_12

M5.3

TRUE

OUT13

MyTag_Output_13

M5.4

TRUE

OUT14

MyTag_Output_14

M5.5

TRUE

OUT15

MyTag_Output_15

M5.6

TRUE

OUT16

MyTag_Output_16

M5.7

TRUE

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:

4996

Parámetro

Operando

Dirección

Valor

OUT1

MyTag_Output_1

M4.0

TRUE

OUT2

MyTag_Output_2

M4.1

FALSE

OUT3

MyTag_Output_3

M4.2

FALSE

OUT4

MyTag_Output_4

M4.3

FALSE

OUT5

MyTag_Output_5

M4.4

FALSE

OUT6

MyTag_Output_6

M4.5

TRUE

OUT7

MyTag_Output_7

M4.6

FALSE

OUT8

MyTag_Output_8

M4.7

FALSE

OUT9

MyTag_Output_9

M5.0

TRUE

OUT10

MyTag_Output_10

M5.1

TRUE

OUT11

MyTag_Output_11

M5.2

FALSE

OUT12

MyTag_Output_12

M5.3

FALSE

OUT13

MyTag_Output_13

M5.4

FALSE

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Operando

Dirección

Valor

OUT14

MyTag_Output_14

M5.5

FALSE

OUT15

MyTag_Output_15

M5.6

TRUE

OUT16

MyTag_Output_16

M5.7

FALSE

Q

Tag_Output_Q

M6.0

FALSE

OUTWORD

Tag_OutputWord

MW8

W#16#4321

ERR_CODE

Tag_ErrorCode

MW10

W#16#0000

En el bloque de datos de instancia "DRUM_DB" de la instrucción están almacenados los
siguientes valores:
Parámetro

Dirección

Valor

JOG_HIS

DBX12.0

FALSE

EOD

DBX12.1

FALSE

DSC

DBB14

W#16#0002

DCC

DBD16

DW#16#000000C8

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Insertar elementos KOP (Página 7955)
Editar elementos KOP (Página 7974)
Cablear operandos en instrucciones KOP (Página 7981)

DRUM_X: Materializar circuito secuencial sucesivo
Descripción
La instrucción "Materializar circuito secuencial sucesivo" permite materializar un circuito
secuencial sucesivo con 16 pasos como máximo. El número del primer paso se define con el
parámetro DSP. El número del último paso se predetermina con el parámetro LST_STEP.
En cada paso se escriben todos los 16 bits de salida OUT0 a OUT15 y el parámetro de salida
OUT_WORD (que contiene los bits de salida). A un bit de salida se asigna bien sea el bit
correspondiente del campo predefinido OUT_VAL, o bien el bit de salida del paso anterior. El
valor que se asigne dependerá de la ocupación de los bits de máscara en el parámetro
S_MASK.
Nota
El ajuste predeterminado de los bits de máscara es 0. Para modificar el ajuste actual de uno
o varios bits de máscara, realice el cambio en el bloque de datos de instancia.

Programación del PLC
Manual de programación y manejo, 11/2019

4997

Instrucciones
4.2 Instrucciones
La instrucción "Materializar circuito secuencial sucesivo" pasa al siguiente paso cuando se
produce un flanco ascendente en el parámetro JOG. Si la instrucción ya se encuentra en el
último paso y se produce un flanco ascendente en el parámetro JOG, se activan las variables
Q y EOD. En este caso, el parámetro DCC se pone al valor 0. La instrucción permanece en el
último paso hasta que el parámetro RESET se pone al valor "1".
Además, también se puede permitir la transición al paso siguiente en función del tiempo. Para
ello se debe poner al valor "1" el parámetro DRUM_EN. La transición al paso siguiente tiene
lugar si está activado el bit de evento (EVENTi) correspondiente al paso actual y si ha
transcurrido el tiempo predeterminado para el paso actual. El tiempo necesario para un paso
resulta de la multiplicación de la base de tiempo (DTBP por el factor de tiempo válido para el
paso actual (S_PRESET).
Nota
El tiempo de ejecución restante en el paso actual (DCC) se reduce únicamente si está activado
el bit de evento correspondiente (EVENTi).
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".
Si, al llamar la instrucción, el parámetro RESET tiene el valor "1", el circuito secuencial
sucesivo pasará al paso cuyo número se haya asignado al parámetro DSP.
Un paso puede programarse con un valor de tiempo, con un evento o con ambos. Los pasos
programados con un bit de evento y el valor de tiempo "0" pasan al siguiente paso en cuanto
el estado lógico del bit de evento es "1". Los pasos programados sólo con un valor de tiempo
empiezan a contar el tiempo inmediatamente. Los pasos programados con un bit de evento y
un valor de tiempo mayor que "0" empiezan a contar el tiempo en cuanto el estado lógico del
bit de evento es "1".
El circuito secuencial sucesivo también se puede conmutar en progresión en todo momento a
través del valor del parámetro JOG.
En la primera llamada de la instrucción, el parámetro RESET se debe poner a 1.
Si el circuito secuencial se encuentra en el último paso y ha transcurrido el tiempo de ejecución
predefinido para este paso, se activan los parámetros Q y EOD. La instrucción permanece en
el último paso hasta que el parámetro RESET adopte el valor "1".
Esta instrucción se ejecuta sólo en los estados operativos ARRANQUE y RUN.
El sistema operativo inicializa la instrucción "Materializar circuito secuencial sucesivo" cuando
se efectúa un arranque en frío. La instrucción no se inicializa en caso de un rearranque
completo (en caliente). Si la instrucción "Materializar circuito secuencial sucesivo" debe
inicializarse tras un rearranque completo (en caliente), es preciso llamarla en el OB 100 con el
valor "1" en el parámetro RESET.

4998

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Materializar circuito secuencial
sucesivo":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

RESET

Input

BOOL

I, Q, M, D, L

El estado lógico "1" desactiva
el circuito secuencial. En la
primera llamada de la instruc‐
ción, el parámetro RESET se
debe poner a "1".

JOG

Input

BOOL

I, Q, M, D, L

Un flanco de señal ascenden‐
te (con respecto a la última
llamada) provoca la transi‐
ción al paso siguiente, siem‐
pre que el circuito secuencial
no se encuentre aún en el úl‐
timo paso. La transición tiene
lugar independientemente
del valor asignado al paráme‐
tro DRUM_EN.

DRUM_EN

Input

BOOL

I, Q, M, D, L

Parámetro de control que de‐
termina si se puede realizar
una transición al paso si‐
guiente en función del tiem‐
po. Si el valor es "1", es posi‐
ble una transición en función
del tiempo.

LST_STEP

Input

BYTE

I, Q, M, D, L o
constante

Número del último paso

EVENTi,

Los valores admisibles son 1
a 16.

Input

BOOL

I, Q, M, D, L

Bit de evento n.º i (pertenece
al paso i)

Output

BOOL

I, Q, M, D, L

Bit de salida n.º j (idéntico al
bit n.º j de OUT_WORD)

Q

Output

BOOL

I, Q, M, D, L

Parámetro de estado que in‐
dica si ha transcurrido el tiem‐
po predefinido por el usuario
para la ejecución del último
paso.

OUT_WORD

Output

WORD

I, Q, M, D, L, P

Bits de salida resumidos en
una variable

ERR_CODE

Output

WORD

I, Q, M, D, L, P

Información de error

JOG_HIS

Static

BOOL

I, Q, M, D, L

Irrelevante para el usuario
(parámetro de entrada JOG
de la llamada anterior)

EOD

Static

BOOL

I, Q, M, D, L

Idéntico al parámetro de sali‐
da Q

1 ≤ i ≤ 16
OUTj,
0 ≤ j ≤ 15

Programación del PLC
Manual de programación y manejo, 11/2019

4999

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

DSP

Static

BYTE

I, Q, M, D, L, P o
constante

Número del primer paso
Los valores admisibles son 1
a 16.

DSC

Static

BYTE

I, Q, M, D, L, P o
constante

Número del paso actual

DCC

Static

DWORD

I, Q, M, D, L, P

Tiempo de ejecución restan‐
te del paso actual, indicado
en milisegundos (ms) (rele‐
vante sólo si DRUM_EN = 1 y
el bit de evento correspon‐
diente = 1)

DTBP

Static

WORD

I, Q, M, D, L, P o
constante

Base de tiempo en milisegun‐
dos (ms) válida para todos
los pasos

PREV_TIME

Static

DWORD

I, Q, M, D, L o
constante

(Irrelevante para el usuario:
hora de sistema de la llama‐
da anterior)

S_PRESET

Static

ARRAY of WORD

I, Q, M, D, L o
constante

Campo unidimensional con
los factores de tiempo para
cada paso.
Selección recomendada de
índices: [1 a 16].
En este caso, S_PRESET [x]
contiene el factor de tiempo
del paso x.

5000

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

OUT_VAL

Static

ARRAY of BOOL

I, Q, M, D, L

Campo bidimensional con
los valores que deben emitir‐
se en cada paso, a no ser
que se hayan inhibido vía
S_MASK.
Selección recomendada de
índices: [1 a 16, 0 a 15]. En
este caso, OUT_VAL [x, y]
contiene el valor asignado al
bit de salida OUTy en el paso
x.

S_MASK

Static

ARRAY of BOOL

I, Q, M, D, L

Campo bidimensional con
los bits de máscara para ca‐
da paso.
Selección recomendada de
índices: [1 a 16, 0 a 15]. En
este caso, S_MASK [x, y]
contiene el bit de máscara
para el valor "y"-ésimo que
debe emitirse en el paso x.
Significado de los bits de
máscara:
● 0: el valor
correspondiente del paso
anterior se asigna al
respectivo bit de salida.
● 1: el valor
correspondiente de
OUT_VAL se asigna al
respectivo bit de salida.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
ERR_CO‐
DE*
(W#16#...)

Explicación

0000

Ningún error

8081

Valor no admisible en el parámetro LST_STEP

8082

Valor no admisible en DSC

8083

Valor no admisible en DSP

8084

El producto DCC = DTBP * S_PRESET[DSC] excede el valor 2**31-1 (aprox. 24,86 días).

*Los códigos de error en el editor de programas se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Programación del PLC
Manual de programación y manejo, 11/2019

5001

Instrucciones
4.2 Instrucciones

Ejemplo
En el ejemplo siguiente, la instrucción pasa del paso 1 al paso 2. Los bits de salida (OUT0 a
OUT15) y la palabra de salida (OUT_WORD) se activan según la máscara configurada para el
paso 2 y los valores del parámetro OUT_VAL.
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.
ಯ'580B;B'%ಯ
'580B;

ಯ7DJ,Qಯ
ಯ7DJB5HVHWಯ
ಯ7DJB,QSXWB-2*ಯ
ಯ7DJB'580B(1ಯ
ಯ/DVW6WHSಯ
ಯ0\(YHQWಯ

ಯ7DJ2XWಯ
(12

(1
5(6(7
-2*
'580B(1
/67B67(3
(9(17

287
4
287B:25'
(55B&2'(

ಯ0\2XWSXWಯ
ಯ7DJB2XWSXWB4ಯ
ಯ7DJB2XWSXWB:25'ಯ
ಯ7DJB(UURU&RGHಯ

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.

Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para asignar valores a los parámetros de
entrada:
Parámetro

Operando

Dirección

Valor

RESET

Tag_Reset

M0.0

FALSE

JOG

Tag_Input_JOG

M0.1

FALSE

DRUM_EN

Tag_Input_Drum_EN

M0.2

TRUE

LST_STEP

Tag_Number_LastStep

MB1

B#16#08

EVENT2

MyTag_Event_2

M20.0

FALSE

EVENT4

MyTag_Event_4

M20.1

FALSE

EVENT6

MyTag_Event_6

M20.2

FALSE

EVENT8

MyTag_Event_8

M20.3

FALSE

EVENT10

MyTag_Event_10

M20.4

FALSE

EVENT12

MyTag_Event_12

M20.5

FALSE

EVENT14

MyTag_Event_14

M20.6

FALSE

EVENT16

MyTag_Event_16

M20.7

FALSE

En el bloque de datos de instancia "DRUM_X_DB" de la instrucción están almacenados los
siguientes valores:
Parámetro

5002

Dirección

Valor

JOG_HIS

DBX12.0

FALSE

EOD

DBX12.1

FALSE

DSP

DBB13

W#16#0001

DSC

DBB14

W#16#0001

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Dirección

Valor

DCC

DBD16

DW#16#0000000A

DTBP

DBW20

W#16#0001

S_PRESET[1]

DBW26

W#16#0064

S_PRESET[2]

DBW28

W#16#00C8

OUT_VAL[1,0]

DBX58.0

TRUE

OUT_VAL[1,1]

DBX58.1

TRUE

OUT_VAL[1,2]

DBX58.2

TRUE

OUT_VAL[1,3]

DBX58.3

TRUE

OUT_VAL[1,4]

DBX58.4

TRUE

OUT_VAL[1,5]

DBX58.5

TRUE

OUT_VAL[1,6]

DBX58.6

TRUE

OUT_VAL[1,7]

DBX58.7

TRUE

OUT_VAL[1,8]

DBX59.0

TRUE

OUT_VAL[1,9]

DBX59.1

TRUE

OUT_VAL[1,10]

DBX59.2

TRUE

OUT_VAL[1,11]

DBX59.3

TRUE

OUT_VAL[1,12]

DBX59.4

TRUE

OUT_VAL[1,13]

DBX59.5

TRUE

OUT_VAL[1,14]

DBX59.6

TRUE

OUT_VAL[1,15]

DBX59.7

TRUE

OUT_VAL[2,0]

DBX60.0

FALSE

OUT_VAL[2,1]

DBX60.1

FALSE

OUT_VAL[2,2]

DBX60.2

FALSE

OUT_VAL[2,3]

DBX60.3

FALSE

OUT_VAL[2,4]

DBX60.4

FALSE

OUT_VAL[2,5]

DBX60.5

FALSE

OUT_VAL[2,6]

DBX60.6

FALSE

OUT_VAL[2,7]

DBX60.7

FALSE

OUT_VAL[2,8]

DBX61.0

FALSE

OUT_VAL[2,9]

DBX61.1

FALSE

OUT_VAL[2,10]

DBX61.2

FALSE

OUT_VAL[2,11]

DBX61.3

FALSE

OUT_VAL[2,12]

DBX61.4

FALSE

OUT_VAL[2,13]

DBX61.5

FALSE

OUT_VAL[2,14]

DBX61.6

FALSE

OUT_VAL[2,15]

DBX61.7

FALSE

S_MASK[2,0]

DBX92.0

FALSE

S_MASK[2,1]

DBX92.1

TRUE

S_MASK[2,2]

DBX92.2

TRUE

S_MASK[2,3]

DBX92.3

TRUE

S_MASK[2,4]

DBX92.4

TRUE

S_MASK[2,5]

DBX92.5

FALSE

S_MASK[2,6]

DBX92.6

TRUE

Programación del PLC
Manual de programación y manejo, 11/2019

5003

Instrucciones
4.2 Instrucciones
Parámetro

Dirección

Valor

S_MASK[2,7]

DBX92.7

TRUE

S_MASK[2,8]

DBX93.0

FALSE

S_MASK[2,9]

DBX93.1

FALSE

S_MASK[2,10]

DBX93.2

TRUE

S_MASK[2,11]

DBX93.3

TRUE

S_MASK[2,12]

DBX93.4

TRUE

S_MASK[2,13]

DBX93.5

TRUE

S_MASK[2,14]

DBX93.6

FALSE

S_MASK[2,15]

DBX93.7

TRUE

Los parámetros de salida tienen los valores siguientes antes de ejecutarse la instrucción:
Parámetro

Operando

Dirección

Valor

Q

Tag_Output_Q

M6.0

FALSE

OUTWORD

Tag_OutputWord

MW8

W#16#FFFF

OUT0

MyTag_Output_0

M4.0

TRUE

OUT1

MyTag_Output_1

M4.1

TRUE

OUT2

MyTag_Output_2

M4.2

TRUE

OUT3

MyTag_Output_3

M4.3

TRUE

OUT4

MyTag_Output_4

M4.4

TRUE

OUT5

MyTag_Output_5

M4.5

TRUE

OUT6

MyTag_Output_6

M4.6

TRUE

OUT7

MyTag_Output_7

M4.7

TRUE

OUT8

MyTag_Output_8

M5.0

TRUE

OUT9

MyTag_Output_9

M5.1

TRUE

OUT10

MyTag_Output_10

M5.2

TRUE

OUT11

MyTag_Output_11

M5.3

TRUE

OUT12

MyTag_Output_12

M5.4

TRUE

OUT13

MyTag_Output_13

M5.5

TRUE

OUT14

MyTag_Output_14

M5.6

TRUE

OUT15

MyTag_Output_15

M5.7

TRUE

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:

5004

Parámetro

Operando

Dirección

Valor

OUT0

MyTag_Output_0

M4.0

TRUE

OUT1

MyTag_Output_1

M4.1

FALSE

OUT2

MyTag_Output_2

M4.2

FALSE

OUT3

MyTag_Output_3

M4.3

FALSE

OUT4

MyTag_Output_4

M4.4

FALSE

OUT5

MyTag_Output_5

M4.5

TRUE

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Operando

Dirección

Valor

OUT6

MyTag_Output_6

M4.6

FALSE

OUT7

MyTag_Output_7

M4.7

FALSE

OUT8

MyTag_Output_8

M5.0

TRUE

OUT9

MyTag_Output_9

M5.1

TRUE

OUT10

MyTag_Output_10

M5.2

FALSE

OUT11

MyTag_Output_11

M5.3

FALSE

OUT12

MyTag_Output_12

M5.4

FALSE

OUT13

MyTag_Output_13

M5.5

FALSE

OUT14

MyTag_Output_14

M5.6

TRUE

OUT15

MyTag_Output_15

M5.7

FALSE

Q

Tag_Output_Q

M6.0

FALSE

OUTWORD

Tag_OutputWord

MW8

W#16#4321

ERR_CODE

Tag_ErrorCode

MW10

W#16#0000

En el bloque de datos de instancia "DRUM_X_DB" de la instrucción están almacenados los
siguientes valores:
Parámetro

Dirección

Valor

JOG_HIS

DBX12.0

FALSE

EOD

DBX12.1

FALSE

DSC

DBB14

W#16#0002

DCC

DBD16

DW#16#000000C8

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Insertar elementos KOP (Página 7955)
Editar elementos KOP (Página 7974)
Cablear operandos en instrucciones KOP (Página 7981)

DCAT: Alarma de tiempo para control discreto
Descripción
La instrucción "Alarma de tiempo para control discreto" acumula el tiempo desde el instante en
el que el parámetro CMD da la orden de abrir o cerrar. El tiempo se acumula hasta excederse
el tiempo predeterminado (PT) o hasta recibir la notificación de que el dispositivo se ha cerrado
o abierto dentro del tiempo prescrito (O_FB o C_FB). Si se excede el tiempo predeterminado
antes de recibirse la notificación de que se ha abierto o cerrado el dispositivo, se activa la
alarma correspondiente. Si el estado lógico de la entrada de la orden cambia antes del tiempo
predeterminado, se reinicia el tiempo.

Programación del PLC
Manual de programación y manejo, 11/2019

5005

Instrucciones
4.2 Instrucciones
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".
La instrucción "Alarma de tiempo para control discreto" tiene las reacciones siguientes en las
condiciones de entrada:
● Si el estado lógico del parámetro CMD cambia de "0" a "1", esto tiene los efectos siguientes
en los estados lógicos de los parámetros Q, CMD_HIS, ET, OA y CA:
– Los parámetros Q y CMD_HIS se ponen a "1".
– Los parámetros ET, OA y CA se ponen a "0".
● Si el estado lógico del parámetro CMD cambia de "1" a "0", los parámetros Q, ET, OA, CA
y CMD_HIS se ponen a "0".
● Si los parámetros CMD y CMD_HIS tienen el estado lógico "1" y el parámetro O_FB se pone
a "0", la diferencia de tiempo (ms) desde la última ejecución de la instrucción se suma al
valor del parámetro ET. Si el valor del parámetro ET excede el del parámetro PT, el estado
lógico del parámetro OA se pone a "1". Si el valor del parámetro ET no excede el del
parámetro PT, el estado lógico del parámetro OA se pone a "0". El valor del parámetro
CMD_HIS se pone al del parámetro CMD.
● Si los estados lógicos de los parámetros CMD, CMD_HIS y O_FB están a "1" y el parámetro
C_FB devuelve el valor "0", el estado lógico del parámetro OA se pone a "0". El valor del
parámetro ET se pone al del parámetro PT. Si el estado lógico del parámetro O_FB cambia
a "0", se activa la alarma en la siguiente ejecución de la instrucción. El valor del parámetro
CMD_HIS se pone al del parámetro CMD.
● Si los parámetros CMD, CMD_HIS y C_FB devuelven "0", la diferencia de tiempo (ms)
desde la última ejecución de la instrucción se suma al valor del parámetro ET. Si el valor del
parámetro ET excede el del parámetro PT, el estado lógico del parámetro CA se pone a "1".
Si no se excede el valor del parámetro PT, el parámetro CA devuelve el estado lógico "0".
El valor del parámetro CMD_HIS se pone al del parámetro CMD.
● Si los parámetros CMD, CMD_HIS y O_FB devuelven el estado lógico "0" y el parámetro
C_FB está a "1", el parámetro CA se pone a "0". El valor del parámetro ET se pone al del
parámetro PT. Si el estado lógico del parámetro C_FB cambia a "0", se activa la alarma en
la siguiente ejecución de la instrucción. El valor del parámetro CMD_HIS se pone al del
parámetro CMD.
● Si los parámetros O_FB y C_FB devuelven simultáneamente el estado lógico "1", los
estados lógicos de ambas salidas de alarma se ponen a "1".
La instrucción "Alarma de tiempo para control discreto" no devuelve información de error.

5006

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Alarma de tiempo para control
discreto":
Parámetro

Declaración Tipo de da‐ Área de memoria
tos

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

CMD

Input

BOOL

I, Q, M, D, L

El estado lógico "0" da la or‐
den de "Cerrar".
El estado lógico "1" da la or‐
den de "Abrir".

O_FB

Input

BOOL

I, Q, M, D, L

Entrada de realimentación
al abrir

C_FB

Input

BOOL

I, Q, M, D, L

Entrada de realimentación
al cerrar

Q

Output

BOOL

I, Q, M, D, L

Indica el estado del paráme‐
tro CMD

OA

Output

BOOL

I, Q, M, D, L

Salida de alarma al abrir

CA

Output

BOOL

I, Q, M, D, L

Salida de alarma al cerrar

ET

Static

DINT

I, Q, M, D, L

Tiempo actual transcurrido;
un ciclo de reloj = 1 ms

PT

Static

DINT

I, Q, M, D, L

Valor de tiempo predetermi‐
nado; un ciclo de reloj = 1 ms

PREV_TIME

Static

DWORD

I, Q, M, D, L

Hora de sistema anterior

CMD_HIS

Static

BOOL

I, Q, M, D, L

Bit de evolución de CMD

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
En el ejemplo siguiente, el parámetro CMD cambia de "0" a "1". Una vez ejecutada la
instrucción, el parámetro Q se pone a "1" y las dos salidas de alarma OA y CA se ponen a "0".
El parámetro CMD_HIS del bloque de datos de instancia se pone a "1" y el parámetro ET se
pone a "0".
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.

Programación del PLC
Manual de programación y manejo, 11/2019

5007

Instrucciones
4.2 Instrucciones
ಯ'&$7B'%ಯ
'&$7

ಯ7DJ,Qಯ
(1

ಯ7DJ2XWಯ
(12

ಯ7DJB,QSXWB&0'ಯ
&0'

4

ಯ7DJB2XWSXWB4ಯ

ಯ7DJB,QSXWB2B)%ಯ
2B)%

2$

ಯ7DJB2XWSXWB2$ಯ

&B)%

&$

ಯ7DJB2XWSXWB&$ಯ

ಯ7DJB,QSXWB&B)%ಯ

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.
Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada y salida:
Parámetro

Operando

Valor

CMD

Tag_Input_CMD

TRUE

O_FB

Tag_Input_O_FB

FALSE

C_FB

Tag_Input_C_FB

FALSE

Q

Tag_Output_Q

FALSE

OA

Tag_Output_OA

FALSE

CA

Tag_Output_CA

FALSE

En el bloque de datos de instancia "DCAT_DB" de la instrucción están almacenados los
siguientes valores:
Parámetro

Dirección

Valor

ET

DBD4

L#12

PT

DBD8

L#222

CMD_HIS

DBX16.0

FALSE

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Valor

Q

Tag_Output_Q

TRUE

OA

Tag_Output_OA

FALSE

CA

Tag_Output_CA

FALSE

En el bloque de datos de instancia "DCAT_DB" de la instrucción están almacenados los
siguientes valores:
Parámetro

5008

Dirección

Valor

ET

DBD4

L#0

CMD_HIS

DBX16.0

TRUE

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Insertar elementos KOP (Página 7955)
Editar elementos KOP (Página 7974)
Cablear operandos en instrucciones KOP (Página 7981)

MCAT: Alarma de tiempo para control del motor
Descripción
La instrucción "Alarma de tiempo para control del motor" acumula el tiempo desde el instante
en el que se activa una de las entradas de comando (abrir o cerrar). El tiempo se acumula hasta
que se excede el tiempo predeterminado o hasta que la entrada de realimentación
correspondiente indica que el dispositivo ha ejecutado la operación solicitada dentro del
tiempo prescrito. Si se excede el tiempo predeterminado antes de recibir la realimentación, se
dispara la alarma correspondiente.

Ejecución de la instrucción "Alarma de tiempo para control del motor"
La tabla siguiente muestra las reacciones de la instrucción "Alarma de tiempo para control del
motor" a las distintas condiciones de entrada:
Parámetros de entrada

Parámetros de salida

ET

O_H
IS

C_H
IS

O_C
MD

C_C
MD

S_C
MD

O_F
B

C_F
B

OO

CO

OA

CA

ET

O_H
IS

C_HI Q
S

Estado

X

1

1

X

X

X

X

X

0

0

1

1

PT

0

0

Alarma

X

X

X

X

X

X

1

1

0

0

1

1

PT

0

0

0

Alarma

X

X

X

X

X

1

X

X

0

0

0

0

X

0

0

1

Stop

X

X

X

1

1

X

X

X

0

0

0

0

X

0

0

1

Stop

X

0

X

1

0

0

X

X

1

0

0

0

0

1

0

1

Empezar a
abrir

<PT

1

0

X

0

0

0

X

1

0

0

0

INC

1

0

1

Abrir

X

1

0

X

0

0

1

0

0

0

0

0

PT

1

0

1

Abierto

>=
PT

1

0

X

0

0

0

X

0

0

1

0

PT

1

0

0

Abrir alarma

X

X

0

0

1

0

X

X

0

1

0

0

0

0

1

1

Empezar a
cerrar

< PT 0

1

0

X

0

X

0

0

1

0

0

INC

0

1

1

Cerrar

X

0

1

0

X

0

0

1

0

0

0

0

PT

0

1

1

Cerrado

>=
PT

0

1

0

X

0

X

0

0

0

0

1

PT

0

1

0

Cerrar alar‐
ma

X

0

0

0

0

0

X

X

0

0

0

0

X

0

0

1

Parado

0

Leyenda:
INC

Sumar a ET la diferencia de tiempo (en ms) desde la última ejecución del FB

Programación del PLC
Manual de programación y manejo, 11/2019

5009

Instrucciones
4.2 Instrucciones
Parámetros de entrada

Parámetros de salida

PT

PT se pone al mismo valor que ET

X

No aplicable

< PT

ET < PT

>= PT

ET >= PT

Si los parámetros de entrada O_HIS y C_HIS tienen el estado lógico "1", se ponen inmediatamente al estado lógico "0". En
este caso se aplica la última fila de la tabla mencionada más arriba (X). Puesto que por este motivo no es posible comprobar
si los parámetros de entrada O_HIS y C_HIS tienen el estado lógico "1", en este caso se asigna el siguiente valor a los
parámetros de salida:
OO = FALSE
CO = FALSE
OA = FALSE
CA = FALSE
ET = PT
Q = TRUE

La instrucción "Alarma de tiempo para control del motor" no devuelve información de error.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Alarma de tiempo para control del
motor":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

O_CMD

Input

BOOL

I, Q, M, D, L

Entrada de la orden "Abrir"

C_CMD

Input

BOOL

I, Q, M, D, L

Entrada de la orden "Cerrar"

S_CMD

Input

BOOL

I, Q, M, D, L

Entrada de la orden "Parar"

O_FB

Input

BOOL

I, Q, M, D, L

Entrada de realimentación al
abrir

C_FB

Input

BOOL

I, Q, M, D, L

Entrada de realimentación al
cerrar

OO

Output

BOOL

I, Q, M, D, L

Salida "Abrir"

CO

Output

BOOL

I, Q, M, D, L

Salida "Cerrar"

OA

Output

BOOL

I, Q, M, D, L

Salida de alarma al abrir

CA

Output

BOOL

I, Q, M, D, L

Salida de alarma al cerrar

Q

Output

BOOL

I, Q, M, D, L

El estado lógico "0" indica
una condición de error.

ET

Static

DINT

I, Q, M, D, L

Tiempo actual transcurrido;
un ciclo de reloj = 1 ms

PT

Static

DINT

I, Q, M, D, L

Valor de tiempo predetermi‐
nado; un ciclo de reloj = 1 ms

PREV_TIME

Static

DWORD

I, Q, M, D, L

Hora de sistema anterior

O_HIS

Static

BOOL

I, Q, M, D, L

Bit de evolución "Abrir"

C_HIS

Static

BOOL

I, Q, M, D, L

Bit de evolución "Cerrar"

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5010

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.
ಯ0&$7B'%ಯ
ಯ7DJ,Qಯ

0&$7
(1

ಯ7DJ2XWಯ

(12

ಯ7DJB,QSXWB2B&0'ಯ
2B&0'

22

ಯ7DJB2XWSXW2SHQಯ

&B&0'

&2

ಯ7DJB2XWSXW&ORVHGಯ

6B&0'

2$

ಯ7DJB2XWSXWB2$ಯ

2B)%

&$

ಯ7DJB2XWSXWB&$ಯ

&B)%

4

ಯ7DJB2XWSXWB4ಯ

ಯ7DJB,QSXWB&B&0'ಯ
ಯ7DJB,QSXWB6B&0'ಯ
ಯ7DJB,QSXWB2B)%ಯ
ಯ7DJB,QSXWB&B)%ಯ

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.
Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada y salida:
Parámetro

Operando

Valor

O_CMD

Tag_Input_O_CMD

TRUE

C_CMD

Tag_Input_C_CMD

FALSE

S_CMD

Tag_Input_S_CMD

FALSE

O_FB

Tag_Input_O_FB

FALSE

C_FB

Tag_Input_C_FB

FALSE

OO

Tag_OutputOpen

FALSE

CO

Tag_OutputClosed

FALSE

OA

Tag_Output_OA

FALSE

CA

Tag_Output_CA

FALSE

Q

Tag_Output_Q

FALSE

En el bloque de datos de instancia "MCAT_DB" de la instrucción están almacenados los
siguientes valores:
Parámetro

Dirección

Valor

ET

DBD4

L#2

PT

DBD8

L#22

Programación del PLC
Manual de programación y manejo, 11/2019

5011

Instrucciones
4.2 Instrucciones
Parámetro

Dirección

Valor

O_HIS

DBX16.0

TRUE

C_HIS

DBX16.1

FALSE

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Valor

OO

Tag_OutputOpen

TRUE

CO

Tag_OutputClosed

FALSE

OA

Tag_Output_OA

FALSE

CA

Tag_Output_CA

FALSE

Q

Tag_Output_Q

TRUE

En el bloque de datos de instancia "MCAT_DB" de la instrucción están almacenados los
siguientes valores:
Parámetro

Dirección

Valor

ET

DBD4

L#0

O_HIS

DBX16.0

TRUE

CMD_HIS

DBX16.1

FALSE

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Insertar elementos KOP (Página 7955)
Editar elementos KOP (Página 7974)
Cablear operandos en instrucciones KOP (Página 7981)

IMC: Comparar bits de entrada con bits de una máscara
Descripción
La instrucción "Comparar bits de entrada con bits de una máscara" compara el estado lógico
de hasta 16 bits de entrada programados (IN_BIT0 a IN_BIT15) con el bit correspondiente de
una máscara. Es posible programar como máximo 16 pasos con máscaras. El valor del
parámetro IN_BIT0 se compara con el valor de la máscara CMP_VAL[x,0], siendo "x" el
número del paso. El número del paso de la máscara utilizada para la comparación se define en
el parámetro CMP_STEP. De esta misma manera se comparan todos los valores
programados. Los bits de entrada no programados o los bits no programados de la máscara
tienen el estado lógico predeterminado FALSE.
Si se encuentra una coincidencia al realizar la comparación, el estado lógico del parámetro
OUT se pone a "1". De lo contrario, el parámetro OUT se pone a "0".

5012

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Si el valor del parámetro CMP_STEP es mayor que 15, no se ejecuta la instrucción. En el
parámetro ERR_CODE se emite un mensaje de error.
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Comparar bits de entrada con bits
de una máscara":
Paráme‐
tro

Declara‐
ción

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN_BIT0

Input

BOOL

I, Q, M, D, L

El bit de entrada 0 se compara
con el bit 0 de la máscara.

IN_BIT1

Input

BOOL

I, Q, M, D, L

El bit de entrada 1 se compara
con el bit 1 de la máscara.

IN_BIT2

Input

BOOL

I, Q, M, D, L

El bit de entrada 2 se compara
con el bit 2 de la máscara.

IN_BIT3

Input

BOOL

I, Q, M, D, L

El bit de entrada 3 se compara
con el bit 3 de la máscara.

IN_BIT4

Input

BOOL

I, Q, M, D, L

El bit de entrada 4 se compara
con el bit 4 de la máscara.

IN_BIT5

Input

BOOL

I, Q, M, D, L

El bit de entrada 5 se compara
con el bit 5 de la máscara.

IN_BIT6

Input

BOOL

I, Q, M, D, L

El bit de entrada 6 se compara
con el bit 6 de la máscara.

IN_BIT7

Input

BOOL

I, Q, M, D, L

El bit de entrada 7 se compara
con el bit 7 de la máscara.

IN_BIT8

Input

BOOL

I, Q, M, D, L

El bit de entrada 8 se compara
con el bit 8 de la máscara.

IN_BIT9

Input

BOOL

I, Q, M, D, L

El bit de entrada 9 se compara
con el bit 9 de la máscara.

IN_BIT10

Input

BOOL

I, Q, M, D, L

El bit de entrada 10 se compa‐
ra con el bit 10 de la máscara.

IN_BIT11

Input

BOOL

I, Q, M, D, L

El bit de entrada 11 se compa‐
ra con el bit 11 de la máscara.

IN_BIT12

Input

BOOL

I, Q, M, D, L

El bit de entrada 12 se compa‐
ra con el bit 12 de la máscara.

IN_BIT13

Input

BOOL

I, Q, M, D, L

El bit de entrada 13 se compa‐
ra con el bit 13 de la máscara.

IN_BIT14

Input

BOOL

I, Q, M, D, L

El bit de entrada 14 se compa‐
ra con el bit 14 de la máscara.

Programación del PLC
Manual de programación y manejo, 11/2019

5013

Instrucciones
4.2 Instrucciones
Paráme‐
tro

Declara‐
ción

Tipo de datos

Área de memoria

Descripción

IN_BIT15

Input

BOOL

I, Q, M, D, L

El bit de entrada 15 se compa‐
ra con el bit 15 de la máscara.

CMP_ST
EP

Input

BYTE

I, Q, M, D, L, P o constante

Número de paso de la másca‐
ra con la que se compara.

OUT

Output

BOOL

I, Q, M, D, L

El estado lógico "1" indica que
se ha encontrado una coinci‐
dencia.
El estado lógico "0" indica que
no se ha encontrado ninguna
coincidencia.

ERR_CO
DE

Output

WORD

I, Q, M, D, L, P

Información de error

CMP_VA
L

Static

ARRAY of
BOOL

I, Q, M, D, L

Máscaras de comparación [0
a 15, 0 a 15]: El primer número
del índice es el número del pa‐
so y, el segundo, el número de
bit de la máscara.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
Código de error* Explicación
(W#16#...)
0000

Ningún error

000A

El valor del parámetro CMP_STEP es mayor que 15.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Insertar elementos KOP (Página 7955)
Editar elementos KOP (Página 7974)
Cablear operandos en instrucciones KOP (Página 7981)

5014

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

SMC: Barrido de matriz
Descripción
La instrucción "Barrido de matriz" compara el estado lógico de hasta 16 bits de entrada
programados (IN_BIT0 a IN_BIT15) con los bits correspondientes de las máscaras de
comparación de cada paso. La ejecución empieza por el paso 1 y continúa hasta el último paso
programado (LAST) o hasta que se encuentre una correspondencia. El bit de entrada del
parámetro IN_BIT0 se compara con el valor de la máscara CMP_VAL[x,0], siendo "x" el
número de paso. De esta misma manera se comparan todos los valores programados. Si se
encuentra una correspondencia, el estado lógico del parámetro OUT se pone a "1" y el número
de paso se escribe con la máscara correspondiente en el parámetro OUT_STEP. Los bits de
entrada no programados o los bits no programados de la máscara tienen el estado lógico
predeterminado FALSE. Si varios pasos tienen una máscara equivalente, se indica solo la
primera correspondencia encontrada en el parámetro OUT_STEP. Si no se encuentra ninguna
correspondencia, el estado lógico del parámetro OUT se pone a "0". En este caso, el valor del
parámetro OUT_STEP excede en "1" el valor del parámetro LAST.
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Barrido de matriz":
Paráme‐
tro

Declara‐
ción

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN_BIT0

Input

BOOL

I, Q, M, D, L

El bit de entrada 0 se compara
con el bit 0 de la máscara.

IN_BIT1

Input

BOOL

I, Q, M, D, L

El bit de entrada 1 se compara
con el bit 1 de la máscara.

IN_BIT2

Input

BOOL

I, Q, M, D, L

El bit de entrada 2 se compara
con el bit 2 de la máscara.

IN_BIT3

Input

BOOL

I, Q, M, D, L

El bit de entrada 3 se compara
con el bit 3 de la máscara.

IN_BIT4

Input

BOOL

I, Q, M, D, L

El bit de entrada 4 se compara
con el bit 4 de la máscara.

IN_BIT5

Input

BOOL

I, Q, M, D, L

El bit de entrada 5 se compara
con el bit 5 de la máscara.

IN_BIT6

Input

BOOL

I, Q, M, D, L

El bit de entrada 6 se compara
con el bit 6 de la máscara.

IN_BIT7

Input

BOOL

I, Q, M, D, L

El bit de entrada 7 se compara
con el bit 7 de la máscara.

Programación del PLC
Manual de programación y manejo, 11/2019

5015

Instrucciones
4.2 Instrucciones
Paráme‐
tro

Declara‐
ción

Tipo de datos

Área de memoria

Descripción

IN_BIT8

Input

BOOL

I, Q, M, D, L

El bit de entrada 8 se compara
con el bit 8 de la máscara.

IN_BIT9

Input

BOOL

I, Q, M, D, L

El bit de entrada 9 se compara
con el bit 9 de la máscara.

IN_BIT10

Input

BOOL

I, Q, M, D, L

El bit de entrada 10 se compa‐
ra con el bit 10 de la máscara.

IN_BIT11

Input

BOOL

I, Q, M, D, L

El bit de entrada 11 se compa‐
ra con el bit 11 de la máscara.

IN_BIT12

Input

BOOL

I, Q, M, D, L

El bit de entrada 12 se compa‐
ra con el bit 12 de la máscara.

IN_BIT13

Input

BOOL

I, Q, M, D, L

El bit de entrada 13 se compa‐
ra con el bit 13 de la máscara.

IN_BIT14

Input

BOOL

I, Q, M, D, L

El bit de entrada 14 se compa‐
ra con el bit 14 de la máscara.

IN_BIT15

Input

BOOL

I, Q, M, D, L

El bit de entrada 15 se compa‐
ra con el bit 15 de la máscara.

OUT

Output

BOOL

I, Q, M, D, L

El estado lógico "1" indica que
se ha encontrado una corres‐
pondencia.
El estado lógico "0" indica que
no se ha encontrado ninguna
correspondencia.

ERR_CO
DE

Output

WORD

I, Q, M, D, L, P

Información de error

OUT_ST
EP

Output

BYTE

I, Q, M, D, L, P

Contiene el número de paso
con la máscara correspon‐
diente o el número de paso
que excede en "1" el valor del
parámetro LAST, si no se ha
encontrado ninguna corres‐
pondencia.

LAST

Static

BYTE

I, Q, M, D, L, P

Indica el número del último pa‐
so en que se tiene que buscar
una máscara correspondiente.

CMP_VA
L

Static

ARRAY of
WORD

I, Q, M, D, L

Máscaras de comparación [0
a 15, 0 a 15]: El primer número
del índice es el número del pa‐
so y, el segundo, el número de
bit de la máscara.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5016

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
Código de error* Explicación
(W#16#...)
0000

Ningún error

000E

El valor del parámetro LAST es mayor que 15.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Insertar elementos KOP (Página 7955)
Editar elementos KOP (Página 7974)
Cablear operandos en instrucciones KOP (Página 7981)

LEAD_LAG: Algoritmo Lead y Lag
Descripción
La instrucción "Algoritmo Lead y Lag" procesa señales con una variable analógica. El valor
para la amplificación en el parámetro GAIN debe ser mayor que cero. El resultado de la
instrucción "Algoritmo Lead y Lag" se calcula con la siguiente ecuación:
287

/*B7,0(
/'B7,0(6$03/(B7
/'B7,0(
,1*$,1
35(9B287*$,1
/*B7,0(6$03/(B7
/*B7,0(6$03/(B7
/*B7,0(6$03/(B7

35(9B,1

La instrucción "Algoritmo Lead y Lag" solo devuelve resultados relevantes cuando se ejecuta
en ciclos de programa fijos. Deben indicarse las mismas unidades en los parámetros
LD_TIME, LG_TIME y SAMPLE_T. Si LG_TIME > 4 + SAMPLE_T, la instrucción se aproxima
a la siguiente función:
OUT = GAIN * ((1 + LD_TIME * s) / (1 + LG_TIME * s)) * IN
Si el valor del parámetro GAIN es menor o igual a cero, no se realiza el cálculo y el parámetro
ERR_CODE devuelve una información de error.
La instrucción "Algoritmo Lead y Lag" puede utilizarse junto con bucles para la compensación
en el control anticipativo dinámico. La instrucción comprende dos operaciones. La operación
"Lead" desplaza la fase de la salida OUT, anticipándose la salida a la entrada. En cambio, la
operación "Lag" desplaza la salida, de manera que la salida sigue a la entrada. Puesto que la
operación "Lag" equivale a una integración, puede utilizarse para suprimir perturbaciones o
como filtro pasa bajo. La operación "Lead" equivale a una acción diferencial, por lo que puede
utilizarse como un filtro de paso alto. La combinación de ambas operaciones (Lead y Lag) hace
que la fase de salida siga a la entrada a bajas frecuencias y se le anticipe a altas frecuencias.

Programación del PLC
Manual de programación y manejo, 11/2019

5017

Instrucciones
4.2 Instrucciones
Por este motivo, la instrucción "Algoritmo Lead y Lag" puede utilizarse como si fuera un filtro
de paso de banda.
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Algoritmo Lead y Lag":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habili‐
tación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilita‐
ción

IN

Input

REAL

I, Q, M, D, L, P o
constante

Valor de entrada
del tiempo de
muestreo actual
(tiempo de ciclo)
que se procesa.
En el parámetro IN
también se pue‐
den indicar cons‐
tantes.

SAMPLE_T

Input

INT

I, Q, M, D, L, P o
constante

Tiempo de mues‐
treo
En el parámetro
SAMPLE_T tam‐
bién se pueden in‐
dicar constantes.

5018

OUT

Output

REAL

I, Q, M, D, L, P

Resultado de la
instrucción

ERR_CODE

Output

WORD

I, Q, M, D, L, P

Información de
error

LD_TIME

Static

REAL

I, Q, M, D, L, P o
constante

Tiempo de antici‐
pación en la mis‐
ma unidad que el
tiempo de mues‐
treo.

LG_TIME

Static

REAL

I, Q, M, D, L, P o
constante

Tiempo de retardo
de fase en la mis‐
ma unidad que el
tiempo de mues‐
treo.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

GAIN

Static

REAL

I, Q, M, D, L, P o
constante

Ganancia en % /
% (relación del
cambio en la sali‐
da con respecto al
cambio en la entra‐
da como estado
constante).

PREV_IN

Static

REAL

I, Q, M, D, L, P o
constante

Entrada anterior

PREV_OUT

Static

REAL

I, Q, M, D, L, P o
constante

Salida anterior

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
Código de error* Explicación
(W#16#...)
0000

Ningún error

0009

El valor del parámetro GAIN es menor o igual a cero.

*Los códigos de error en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.
ಯ/($'B/$*B'%ಯ
/($'B/$*
ಯ7DJ,Qಯ

ಯ7DJB,QSXWಯ
ಯ7DJB,QSXWB6$03/(B7ಯ

ಯ7DJ2XWಯ
(1

(12

,1

287

6$03/(B7

(55B&2'(

ಯ7DJB2XWSXWB5HVXOWಯ
ಯ7DJB(UURU&RGHಯ

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.
Antes de la ejecución

Programación del PLC
Manual de programación y manejo, 11/2019

5019

Instrucciones
4.2 Instrucciones
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada:
Parámetro

Operando

Valor

IN

Tag_Input

2.0

SAMPLE_T

Tag_InputSampleTime

10

Los siguientes valores están almacenados en el bloque de datos de instancia
"LEAD_LAG_DB" de la instrucción:
Parámetro

Dirección

Valor

LD_TIME

DBD12

2.0

LG_TIME

DBD16

2.0

GAIN

DBD20

1.0

PREV_IN

DBD24

6.0

PREV_OUT

DBD28

6.0

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Valor

OUT

Tag_Output_Result

2.0

Los siguientes valores se almacenan en el bloque de datos de instancia LEAD_LAD_DB de la
instrucción:
Parámetro

Operando

Valor

PREV_IN

DBD24

2.0

PREV_OUT

DBD28

2.0

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Insertar elementos KOP (Página 7955)
Editar elementos KOP (Página 7974)
Cablear operandos en instrucciones KOP (Página 7981)

5020

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

TONR_X: Acumulador de tiempo
Descripción
La instrucción "Acumulador de tiempo" permite acumular valores de tiempo dentro de un
periodo definido, que se indica con la entrada PV. La instrucción se ejecuta cuando el estado
lógico de la entrada de arranque TMR_EN cambia de "0" a "1". Al mismo tiempo, el
temporizador cuenta el tiempo programado en la entrada PV. Mientras la instrucción se
ejecuta, suma el valor de tiempo de la entrada DELTA_T al valor de tiempo de InOut ET.
Deben cumplirse las siguientes condiciones:
● La entrada de arranque TMR_EN devuelve el estado lógico "1".
● El valor de tiempo de InOut ET es menor que el del parámetro PV.
● La entrada RESET devuelve el estado lógico "0".
La instrucción se interrumpe cuando el estado lógico de la entrada de arranque TMR_EN
cambia de "1" a "0". En cuanto el estado lógico cambia de nuevo a "1", la instrucción prosigue.
La instrucción finaliza cuando el valor de tiempo de InOut ET alcanza el valor de tiempo de la
entrada PV. Entonces la salida Q devuelve el estado lógico "1".
Mientras la salida Q devuelva el estado lógico "1", el valor de tiempo de InOut ET no se
modifica. El valor de tiempo y la salida Q se vuelven a poner a "0" cuando la entrada RESET
adopta el estado lógico "1".
Puesto que la instrucción "Acumulador de tiempo" utiliza el tiempo de ciclo (DELTA_T) del
último ciclo del bloque de organización (OB), solo puede llamarse en bloques de organización
cíclicos.
Nota
El tiempo de ciclo del bloque de organización debe desplazarse desde la información de
arranque a la variable global del parámetro DELTA_T.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Acumulador de tiempo":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L, T, C

Salida de habilitación

TMR_EN (Ti‐
mer Enable)

Input

BOOL

I, Q, M, D, L, T, C

RESET

Input

BOOL

I, Q, M, D, L, T, C

Entrada de reset

PV (Preset
Value)

Input

DINT

I, Q, M, D, L, P o
constante

Tiempo máximo de lectura
del tiempo

Entrada de arranque
Inicia la instrucción y la eje‐
cución del tiempo predetermi‐
nado de la entrada PV

Programación del PLC
Manual de programación y manejo, 11/2019

5021

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

DELTA_T

Input

INT

I, Q, M, D, L o
constante

Tiempo de ciclo del bloque
de organización del ciclo an‐
terior

Q

Output

BOOL

I, Q, M, D, L

Salida que se activa al alcan‐
zar el valor de tiempo prede‐
terminado

ET (Elapsed
Time)

InOut

DINT

I, Q, M, D, L

Valor de tiempo acumulado
(valor de tiempo transcurrido
actualmente + valor de tiem‐
po de la entrada DELTA_T)

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Acumulador de
tiempo":
705B(1

5(6(7

4

39

(7

5022

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
7215B;
ಯ7DJ,Qಯ

(1

ಯ7DJB6WDUWಯ
ಯ7DJB5HVHWಯ


ಯ7DJB(ODSVHG
7LPHಯ

705B(1

ಯ7DJ2XWಯ

(12
4

ಯ7DJB2XWSXWಯ

5(6(7
39
'(/7$B7
(7

La instrucción se inicia cuando los operandos "TagIn" y "Tag_Start" devuelven el estado lógico
"1". Con cada cambio de estado lógico de "0" a "1" en la entrada TMR_EN el tiempo de ciclo
"2" de la entrada DELTA_T se suma al valor de tiempo actual de InOut ET hasta que se alcanza
el valor de tiempo máximo "10" de la entrada PV. Si no se producen errores al ejecutar la
instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y se activa la salida
"TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Insertar elementos KOP (Página 7955)
Editar elementos KOP (Página 7974)
Cablear operandos en instrucciones KOP (Página 7981)

WSR: Guardar datos en el registro de desplazamiento
Descripción
La instrucción "Guardar datos en el registro de desplazamiento" permite escribir datos en un
registro de desplazamiento desde el origen indicado. Todo elemento del registro se desplaza
a la siguiente dirección. Los datos contenidos en la última dirección del registro de
desplazamiento se pierden tras la operación de desplazamiento.
Cada vez que la instrucción se ejecuta con el valor "0" en el parámetro RESET, se leen datos
nuevos del origen (S_DATA) y se desplazan a la dirección inicial (START) del registro de
desplazamiento. El parámetro LENGTH indica el número de elementos que deben
desplazarse. El tipo de datos de los elementos se define en el parámetro E_TYPE. Si se indica
un tipo de datos no admisible en el parámetro E_TYPE, no se procesa la instrucción.
Si el parámetro RESET está a "1" al ejecutarse la instrucción, se borra el registro. El parámetro
Q se pone al estado lógico "1" si el registro de desplazamiento está ocupado con ceros o si se
borra.

Programación del PLC
Manual de programación y manejo, 11/2019

5023

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Guardar datos en el registro de
desplazamiento":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

RESET

Input

BOOL

I, Q, M, D, L

Entrada de reset

S_DATA

Input

POINTER

I, Q, M, D

Apunta al elemento de origen
que se desplaza a la direc‐
ción inicial (START).
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

START

Input

POINTER

I, Q, M, D

Apunta a la dirección inicial
del registro.
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

LEN

Input

WORD

I, Q, M, D, L, P

Número de elementos que
deben desplazarse.

E_TYPE

Input

BYTE

I, Q, M, D, L, P

Indica el tipo de datos de los
elementos que deben despla‐
zarse. Los siguientes tipos
de datos son admisibles:
● W#16#04 = WORD
● B#16#05 = INT
● B#16#06 = DWORD
● B#16#07 = DINT
● B#16#08 = REAL

Q

5024

Output

BOOL

Q, M, D, L

Indica "0" si el parámetro RE‐
SET está activado (1) o si to‐
dos los elementos que deben
desplazarse tienen el valor
"0".

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
En el ejemplo siguiente se desplazan cuatro elementos del tipo de datos WORD a partir de la
dirección indicada en el parámetro START. Una vez desplazado el primer elemento del
registro a la siguiente dirección, la primera dirección se ocupará con los datos a los que señala
el puntero en el parámetro S_DATA. El valor del último elemento del registro se pierde
entonces.
:65
ಯ7DJ,Qಯ

ಯ7DJ2XWಯ
(1

ಯ7DJB,QSXWB5HVHWಯ

5(6(7

ಯ7DJB,QSXWB'DWD6RXUFHಯ

6B'$7$

ಯ7DJB,QSXWB6WDUW$GGUHVVಯ

67$57

ಯ7DJB,QSXWB/HQJWKಯ
ಯ7DJB,QSXWB(OHPHQW7\SHಯ

(12
4

ಯ7DJB2XWSXWB4ಯ

/(1
(B7<3(

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.
Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada y salida:
Parámetro

Operando

Valor

RESET

Tag_Input_Reset

0

S_DATA

Tag_Input_DataSource

P#DB2.DBX6.0
DW0 = W#16#1111
DW2 = W#16#2222
DW4 = W#16#3333
DW6 = W#16#4444

START

Tag_Input_StartAddress

P#DB1.DBX0.0
DW6 = W#16#1234

LEN

Tag_Input_Length

W#16#04

E_TYPE

Tag_Input_ElementType

B#16#04

Q

Tag_Output_Q

1

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Valor

RESET

Tag_Input_Reset

0

S_DATA

Tag_Input_DataSource

P#DB2.DBX6.0
DW0 = W#16#1234
DW2 = W#16#1111
DW4 = W#16#2222
DW6 = W#16#3333

Programación del PLC
Manual de programación y manejo, 11/2019

5025

Instrucciones
4.2 Instrucciones
Parámetro

Operando

Valor

START

Tag_Input_StartAddress

P#DB1.DBX0.0
DW6 = W#16#1234

LEN

Tag_Input_Length

W#16#04

E_TYPE

Tag_Input_ElementType

B#16#04

Q

Tag_Output_Q

1

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Insertar elementos KOP (Página 7955)
Editar elementos KOP (Página 7974)
Cablear operandos en instrucciones KOP (Página 7981)

SHRB: Desplazar bit al registro de desplazamiento
Descripción
La instrucción "Desplazar bit al registro de desplazamiento" permite escribir un bit en un
registro de desplazamiento desde el origen indicado (DATA). Cada vez que la instrucción se
ejecuta con el valor "0" en el parámetro RESET, se leen datos nuevos del origen y se
desplazan a la dirección inicial (S_BIT) del registro de desplazamiento. Los restantes bits se
desplazan una posición. El bit de la última dirección (S_BIT + N) se pierde tras el
desplazamiento. Si el parámetro RESET está a "1" mientras se ejecuta la instrucción, las
direcciones del registro de desplazamiento se ponen a "0" y no se desplazan.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desplazar bit al registro de
desplazamiento":

5026

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habili‐
tación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilita‐
ción

DATA

Input

BOOL

I, Q, M, D, L

Bit de origen

RESET

Input

BOOL

I, Q, M, D, L

Entrada de reset

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

S_BIT

Input

POINTER

I, Q, M, D

Apunta al primer
bit del registro de
desplazamiento.
En el direcciona‐
miento indirecto
por registro interá‐
rea, el puntero de‐
be indicarse en for‐
mato de palabra
doble.

N

Input

WORD

I, Q, M, D, L, P

Número de bits
que deben despla‐
zarse.

Ejemplo
En el ejemplo siguiente, el parámetro N se pone al valor 14 ("E" en notación hexadecimal), con
lo que 14 bits se desplazan a partir de la dirección indicada en el parámetro S_BIT. Una vez
desplazados los bits, la primera dirección se ocupa con los datos del origen del parámetro
DATA. El último valor de bit se pierde.
6+5%
ಯ7DJ,Qಯ

ಯ7DJ2XWಯ
(1

ಯ7DJB,QSXWB'DWDಯ
ಯ7DJB,QSXWB5HVHWಯ
ಯ7DJB,QSXWB%LW6RXUFHಯ
ಯ7DJB,QSXWB1XPEHUಯ

(12

'$7$
5(6(7
6B%,7
1

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.

Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada y salida:
Parámetro

Operando

Valor

RESET

Tag_Input_Reset

0

DATA

Tag_Input_Data

0

S_BIT

Tag_Input_BitSource

P#DB1.DBX1.4

N

Tag_Input_Number

B#16#0E

Antes de ejecutarse la instrucción, los siguientes estados lógicos están almacenados en los 14
bits del registro:

Programación del PLC
Manual de programación y manejo, 11/2019

5027

Instrucciones
4.2 Instrucciones


























6B%,7







































Después de la ejecución
Una vez ejecutada la instrucción, los siguientes estados lógicos se almacenan en los 14 bits
del registro:


























6B%,7







































Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Insertar elementos KOP (Página 7955)
Editar elementos KOP (Página 7974)
Cablear operandos en instrucciones KOP (Página 7981)

SEG: Generar patrón de bits para el display de 7 segmentos
Descripción
La instrucción "Generar patrón de bits para el display de 7 segmentos" permite convertir cada
una de las cuatro cifras hexadecimales de la palabra de origen indicada (IN) en un patrón de
bits equivalente para un display de 7 segmentos. El resultado de la instrucción se devuelve en
la palabra doble del parámetro OUT.

5028

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Entre las cifras hexadecimales y la ocupación de los 7 segmentos (a, b, c, d, e, f, g) existe la
siguiente relación:
Cifra de en‐
trada
(binaria)
0000
0001
0010
0011
0100
0101
0110
0111
1000
1001
1010
1011
1100
1101
1110
1111

Ocupación de
los segmentos
‑gfedcba
00111111
00000110
01011011
01001111
01100110
01101101
01111101
00000111
01111111
01100111
01110111
01111100
00111001
01011110
01111001
01110001

Display
Display de siete segmentos
(hexadecimal)
0
1
2
3
4
5
6
7
8
9
A
B
C
D
E
F

D
I

E
J

H

F
G

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Generar patrón de bits para el
display de 7 segmentos":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habili‐
tación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilita‐
ción

IN

Input

WORD

I, Q, M, D, L, P o
constante

Palabra de origen
con cuatro cifras
hexadecimales

OUT

Output

DWORD

I, Q, M, D, L, P

Patrón de bits pa‐
ra el display de 7
segmentos

Programación del PLC
Manual de programación y manejo, 11/2019

5029

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6(*
ಯ7DJ,Qಯ

ಯ7DJ2XWಯ

ಯ7DJB,QSXWಯ

(1

(12

,1

287

ಯ7DJB2XWSXWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

Hexadecimal

Binario

IN

Tag_Input

W#16#1234

0001 0010 0011 0100

OUT

Tag_Output

DW#16065B4F66

000 00110 0101 1011 0100
1111 0110 0110
Visualización: 1234

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Insertar elementos KOP (Página 7955)
Editar elementos KOP (Página 7974)
Cablear operandos en instrucciones KOP (Página 7981)

BCDCPL: Generar complemento a diez
Descripción
La instrucción "Generar complemento a diez" crea el complemento a diez de un número BCD
de siete dígitos que se indica en el parámetro IN. La instrucción realiza el cálculo con la
siguiente fórmula matemática:
10000000 (como BCD)
– Valor BCD de 7 dígitos
---------------------------------------Complemento a diez (como BCD)

5030

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Generar complemento a diez":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habili‐
tación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilita‐
ción

IN

Input

DWORD

I, Q, M, D, L, P o
constante

Número BCD de 7
dígitos

ERR_CODE

Output

DWORD

I, Q, M, D, L, P

Resultado de la
instrucción

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
%&'&3/
ಯ7DJ,Qಯ

ಯ7DJ2XWಯ
(1

ಯ7DJB,QSXWಯ

,1

(12
(55B&2'(

ಯ7DJB2XWSXWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores concretos:
Parámetro

Operando

Valor*

IN

Tag_Input

DW#16#01234567

ERR_CODE

Tag_Output

DW#16#08765433

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Insertar elementos KOP (Página 7955)
Editar elementos KOP (Página 7974)
Cablear operandos en instrucciones KOP (Página 7981)

Programación del PLC
Manual de programación y manejo, 11/2019

5031

Instrucciones
4.2 Instrucciones

BITSUM: Contar número de bits activados
Descripción
La instrucción "Contar número de bits activados" permite contar el número de bits de un
operando que están puestos al estado lógico "1". El operando cuyos bits se cuentan se
especifica en el parámetro IN. El resultado de la instrucción se devuelve en el parámetro
RET_VAL.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contar número de bits activados":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habili‐
tación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilita‐
ción

IN

Input

DWORD

I, Q, M, D, L, P o
constante

Operando cuyos
bits activados se
cuentan

RET_VAL

Output

INT

I, Q, M, D, L, P

Número de bits ac‐
tivados

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
%,7680
ಯ7DJ,Qಯ

ಯ7DJ2XWಯ
(1

ಯ7DJB,QSXWಯ

,1

(12
5(7B9$/

ಯ7DJB2XWSXWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores concretos:
Parámetro

Operando

Valor*

IN

Tag_Input

DW#16#12345678

RET_VAL

Tag_Output

W#16#000D (13 bits)

*Los códigos de error en el editor de programas se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

5032

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

4.2.2.2

FUP

Operaciones lógicas con bits
&: Operación lógica Y
Descripción
La instrucción "Operación lógica Y" permite consultar los estados lógicos de dos o más
operandos indicados y evaluarlos según la tabla de verdad Y.
Si el estado lógico de todos los operandos es "1", entonces se cumple la condición y la
instrucción da como resultado "1". Si el estado lógico de un operando es "0", no se cumple la
condición y la instrucción da como resultado "0".

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica Y":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<operando>

Input

BOOL

I, Q, M, T, C, D, L

El operando indica el bit cuyo
estado lógico se consulta.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ
ಯ7DJ,QBಯ




ಯ7DJ2XWಯ


La salida "TagOut" se activa cuando el estado lógico de los operandos "TagIn_1" y "TagIn_2"
es "1", y se desactiva cuando el estado lógico de los operandos "TagIn_1" y "TagIn_2" es "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con bits (Página 186)

Programación del PLC
Manual de programación y manejo, 11/2019

5033

Instrucciones
4.2 Instrucciones
Tabla de verdad Y (Página 5034)
Ejemplos de programación FUP (Página 8050)
Principios básicos de FUP (Página 8005)

Tabla de verdad Y
Resultados lógicos
La tabla siguiente muestra los resultados que se obtienen combinando dos operandos
mediante una Y lógica:
Estado lógico del primer operan‐ Estado lógico del segundo ope‐
do
rando

Resultado lógico

1

1

1

0

1

0

1

0

0

0

0

0

Consulte también
&: Operación lógica Y (Página 5033)

>=1: Operación lógica O
Descripción
La instrucción "Operación lógica O" permite consultar los estados lógicos de dos o más
operandos indicados y evaluarlos según la tabla de verdad O.
Si el estado lógico de uno de los operandos es "1", entonces se cumple la condición y la
instrucción da como resultado "1". Si el estado lógico de todos los operandos es "0", no se
cumple la condición y la instrucción da como resultado "0".

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica O":

5034

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<operando>

Input

BOOL

I, Q, M, T, C, D, L

El operando indica el bit cuyo
estado lógico se consulta.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

! 

ಯ7DJ,QBಯ

ಯ7DJ2XWಯ


La salida "TagOut" se activa si el estado lógico del operando "TagIn_1" o del operando
"TagIn_2" es "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Tabla de verdad O (Página 5035)
Ejemplos de programación FUP (Página 8050)
Principios básicos de FUP (Página 8005)

Tabla de verdad O
Resultados lógicos
La tabla siguiente muestra los resultados que se obtienen combinando dos operandos
mediante una O lógica:
Estado lógico del primer operan‐ Estado lógico del segundo ope‐
do
rando

Resultado lógico

1

1

0

0

1

1

1

1

1

0

0

0

Consulte también
>=1: Operación lógica O (Página 5034)

X: Operación lógica O-exclusiva
Descripción
La instrucción "Operación lógica O-exclusiva" permite consultar el resultado de la consulta del
estado lógico de acuerdo con la tabla de verdad O-exclusiva.

Programación del PLC
Manual de programación y manejo, 11/2019

5035

Instrucciones
4.2 Instrucciones
En una instrucción "Operación lógica O-exclusiva", el estado lógico es "1" si el estado lógico
de uno de los dos operandos indicados es "1". Si se consultan más de dos operandos, el
resultado lógico común es "1" si un número impar de los operandos consultados devuelve el
resultado "1".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica O-exclusiva":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<operando>

Input

BOOL

I, Q, M, T, C, D, L

El operando indica el bit cuyo
estado lógico se consulta.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ
ಯ7DJ,QBಯ

;

ಯ7DJ2XWಯ


La salida "TagOut" se activa si el estado lógico de uno de los operandos "TagIn_1" y "TagIn_2"
es "1". Si ambos operandos devuelven el estado lógico "1" o "0", se desactiva la salida
"TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Tabla de verdad O-exclusiva (Página 5036)
Principios básicos de FUP (Página 8005)

Tabla de verdad O-exclusiva
Resultados lógicos
La tabla siguiente muestra los resultados que se obtienen combinando dos operandos
mediante una O-exclusiva lógica:

5036

Estado lógico del primer operan‐ Estado lógico del segundo ope‐
do
rando

Resultado lógico

1

1

0

0

1

1

1

1

0

0

0

0

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra los resultados que se obtienen combinando tres operandos
mediante una O-exclusiva lógica:
Estado lógico del primer Estado lógico del se‐
operando
gundo operando

Estado lógico del tercer
operando

Resultado lógico

1

0

0

1

0

1

1

0

0

1

0

1

1

0

1

0

0

0

1

1

1

1

0

0

1

1

1

1

0

0

0

0

Consulte también
X: Operación lógica O-exclusiva (Página 5035)

Insertar entrada
Descripción
La instrucción "Insertar entrada" permite ampliar el cuadro de una de las instrucciones
siguientes con una entrada:
● "Operación lógica Y"
● "Operación lógica O"
● "Operación lógica O-exclusiva"
Ampliando el cuadro de una instrucción se puede consultar el estado lógico de varios
operandos.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Insertar entrada":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<operando>

Input

BOOL

I, Q, M, T, C, D, L

El operando indica el bit cuyo
estado lógico se consulta.

Programación del PLC
Manual de programación y manejo, 11/2019

5037

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ
ಯ7DJ2XWಯ

ಯ7DJ,QBಯ



ಯ7DJ,QBಯ

El cuadro de la instrucción ha sido ampliado con una entrada adicional en la que se consulta
el estado lógico del operando "TagIn_3". La salida "TagOut" se activa cuando los operandos
"TagIn_1", "TagIn_2" y "TagIn_3" devuelven el estado lógico "1".

Consulte también
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Principios básicos de la palabra de estado (Página 184)
&: Operación lógica Y (Página 5033)
>=1: Operación lógica O (Página 5034)
X: Operación lógica O-exclusiva (Página 5035)
Principios básicos de FUP (Página 8005)

Invertir RLO
Descripción
La instrucción "Invertir RLO" invierte el estado lógico del resultado lógico (RLO).

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ



ಯ7DJ,QBಯ
ಯ7DJ,QBಯ
ಯ7DJ,QBಯ


ಯ7DJ,QBಯ


! 


ಯ7DJ2XWಯ


La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● La entrada "TagIn_1" y/o "TagIn_2" devuelve el estado lógico "0".
● La entrada "TagIn_3" y/o "TagIn_4" devuelve el estado lógico "0" o la entrada "TagIn_5"
devuelve el estado lógico "1".

5038

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Ejemplos de programación FUP (Página 8050)
Principios básicos de FUP (Página 8005)

=: Asignación
Descripción
La instrucción "Asignación" activa el bit de un operando indicado. Si el resultado lógico (RLO)
de la entrada del cuadro es el estado lógico "1", el operando indicado adopta el estado lógico
"1". Si el estado lógico de la entrada del cuadro es "0", el bit del operando indicado se pone a
"0".
La instrucción no afecta al RLO. El RLO de la entrada del cuadro se asigna directamente a los
operandos disponibles a través del cuadro de asignación.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Asignación":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Output

BOOL

I, Q, M, D, L

Operando al que se asigna el
RLO.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ



ಯ7DJ,QBಯ

! 
ಯ7DJ,QBಯ

ಯ7DJ2XWಯ


El operando "TagOut" en la salida de la instrucción "Asignación" se activa cuando se cumple
una de las condiciones siguientes:
● Las entradas "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● El estado lógico de la entrada "TagIn_3" es "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con bits (Página 186)

Programación del PLC
Manual de programación y manejo, 11/2019

5039

Instrucciones
4.2 Instrucciones
Ejemplos de programación FUP (Página 8050)
Principios básicos de FUP (Página 8005)

R: Desactivar salida
Descripción
La instrucción "Desactivar salida" permite poner a "0" el estado lógico de un operando indicado.
La instrucción se ejecuta solo si el resultado lógico (RLO) de la entrada del cuadro es "1". Si
el estado lógico de la entrada del cuadro es "1", el operando indicado se pone a "0". Si el RLO
de la entrada del cuadro es "0", el estado lógico del operando indicado no cambia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desactivar salida":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<operando>

Output

BOOL

I, Q, M, T, C, D, L

Operando que se desactiva
si el RLO = "1".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ



ಯ7DJ,QBಯ

! 
ಯ7DJ2XWಯ
ಯ7DJ,QBಯ

5

El operando "TagOut" se desactiva cuando se cumple una de las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● El estado lógico del operando "TagIn_3" es "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Ejemplos de programación FUP (Página 8050)
Principios básicos de FUP (Página 8005)

5040

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

S: Activar salida
Descripción
La instrucción "Activar salida" permite poner a "1" el estado lógico de un operando indicado.
La instrucción se ejecuta solo si el resultado lógico (RLO) de la entrada del cuadro es "1". Si
el estado lógico de la entrada del cuadro es "1", el operando indicado se pone a "1". Si el RLO
de la entrada del cuadro es "0", el estado lógico del operando indicado no cambia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Activar salida":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<operando>

Output

BOOL

I, Q, M, D, L

Operando que se activa si
RLO = "1".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ



ಯ7DJ,QBಯ

! 
ಯ7DJ2XWಯ
ಯ7DJ,QBಯ

6

El operando "TagOut" se activa cuando se cumple una de las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● El operando "TagIn_3" devuelve el estado lógico "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Ejemplos de programación FUP (Página 8050)
Principios básicos de FUP (Página 8005)

Programación del PLC
Manual de programación y manejo, 11/2019

5041

Instrucciones
4.2 Instrucciones

SR: Flipflop de activación/desactivación
Descripción
La instrucción "Flipflop de activación/desactivación" sirve para activar o desactivar el bit de un
operando indicado en función del estado lógico de las entradas S y R1. Si el estado lógico de
la entrada S es "1" y el de la entrada R1 es "0", el operando indicado se pone a "1". Si el estado
lógico de la entrada S es "0" y el de la entrada R1 es "1", el operando indicado se pone a "0".
La entrada R1 predomina sobre la entrada S. Si el estado lógico de las entradas S y R1 es "1",
el estado lógico del operando indicado se pone a "0".
Si el estado lógico de ambas entradas S y R1 es "0", no se ejecuta la instrucción. En este caso,
no cambia el estado lógico del operando.
El estado lógico actual del operando se transfiere a la salida Q y se puede consultar allí.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Flipflop de activación/
desactivación":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

S

Input

BOOL

I, Q, M, D, L, T, C

Activación habilitada

R1

Input

BOOL

I, Q, M, D, L, T, C

Desactivación habilitada

<operando>

InOut

BOOL

I, Q, M, D, L

Operando que se activa o de‐
sactiva

Q

Output

BOOL

I, Q, M, D, L

Estado lógico del operando

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ65ಯ
ಯ7DJ,QBಯ

65
6
ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

5

4

Los operandos "TagSR" y "TagOut" se activan cuando se cumplen las condiciones siguientes:
● El operando "TagIn_1" devuelve el estado lógico "1".
● El operando "TagIn_2" devuelve el estado lógico "0".
Los operandos "TagSR" y "TagOut" se desactivan cuando se cumple una de las condiciones
siguientes:
● El operando "TagIn_1" devuelve el estado lógico "0" y el operando "TagIn_2" devuelve el
estado lógico "1".
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".

5042

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Principios básicos de FUP (Página 8005)

RS: Flipflop de desactivación/activación
Descripción
La instrucción "Flipflop de desactivación/activación" sirve para desactivar o activar el bit de un
operando indicado en función del estado lógico de las entradas R y S1. Si el estado lógico de
la entrada R es "1" y el de la entrada S1 es "0", el operando indicado se pone a "0". Si el estado
lógico de la entrada R es "0" y el de la entrada S1 es "1", el operando indicado se pone a "1".
La entrada S1 predomina sobre la entrada R. Si el estado lógico de las entradas R y S1 es "1",
el estado lógico del operando indicado se pone a "1".
Si el estado lógico de ambas entradas R y S1 es "0", no se ejecuta la instrucción. En este caso,
no cambia el estado lógico del operando.
El estado lógico actual del operando se transfiere a la salida Q y se puede consultar allí.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Flipflop de desactivación/
activación":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

R

Input

BOOL

I, Q, M, T, C, D, L

Desactivación habilitada

S1

Input

BOOL

I, Q, M, T, C, D, L

Activación habilitada

<operando>

InOut

BOOL

I, Q, M, D, L

Operando que se desactiva o
activa

Q

Output

BOOL

I, Q, M, D, L

Estado lógico del operando

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ56ಯ
ಯ7DJ,QBಯ

56
5
ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

6

Programación del PLC
Manual de programación y manejo, 11/2019

4

5043

Instrucciones
4.2 Instrucciones
Los operandos "TagRS" y "TagOut" se desactivan cuando se cumplen las condiciones
siguientes:
● El operando "TagIn_1" devuelve el estado lógico "1".
● El operando "TagIn_2" devuelve el estado lógico "0".
Los operandos "TagRS" y "TagOut" se activan cuando se cumplen las condiciones siguientes:
● El operando "TagIn_1" devuelve el estado lógico "0" y el operando "TagIn_2" devuelve el
estado lógico "1".
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Principios básicos de FUP (Página 8005)

P: Consultar flanco de señal ascendente de un operando
Descripción
La instrucción "Consultar flanco de señal ascendente de un operando" permite detectar si el
estado lógico de un operando indicado (<Operando1>) ha cambiado de "0" a "1". La
instrucción compara el estado lógico actual del <Operando1> con el estado lógico de la
consulta anterior, que está almacenado en una marca de flancos (<Operando2>). Si la
instrucción detecta un cambio del resultado lógico (RLO) de "0" a "1", significa que hay un
flanco de señal ascendente.
La figura siguiente muestra el cambio del estado lógico en caso de flanco de señal
descendente y ascendente:
(VWDGR
OµJLFR

)ODQFRGHVH³DODVFHQGHQWH

)ODQFRGHVH³DOGHVFHQGHQWH




7HPSRUL]DGRU

El flanco de señal ascendente se consulta cada vez que se ejecuta la instrucción. Si se detecta
un flanco de señal ascendente, el <Operando1> adopta el estado lógico "1" durante un ciclo
del programa. En los demás casos, el estado lógico del operando es "0".

5044

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Indique el operando que debe consultarse (<Operando1>) en el comodín correspondiente
ubicado encima de la instrucción. La marca de flancos (<Operando2>) se indica en el comodín
correspondiente situado debajo de la instrucción.
Nota
Uso de la dirección de la marca de flancos
La dirección de la marca de flancos no se puede utilizar más de una vez en el programa, puesto
que, de lo contrario, se sobrescribe el bit de marcas. Esto influye negativamente en la
evaluación de flancos, de manera que el resultado deja de ser unívoco. El área de memoria de
la marca de flancos debe estar en un bloque de datos (área 'Static' de FB) o en el área de
marcas.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar flanco de señal
ascendente de un operando":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

BOOL

I, Q, M, T, C, D, L

Señal que se debe consultar

<Operan‐
do2>

InOut

BOOL

I, Q, M, D, L

Marca de flancos en la que
se almacena el estado lógico
de la consulta anterior.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ
3
ಯ7DJB0ಯ

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● En la entrada "TagIn_1" hay un flanco de señal ascendente.
● El estado lógico del operando "TagIn_2" es "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Ejemplos de programación FUP (Página 8050)
Principios básicos de FUP (Página 8005)

Programación del PLC
Manual de programación y manejo, 11/2019

5045

Instrucciones
4.2 Instrucciones

N: Consultar flanco de señal descendente de un operando
Descripción
La instrucción "Consultar flanco de señal descendente de un operando" permite detectar si el
estado lógico de un operando indicado (<Operando1>) ha cambiado de "1" a "0". La
instrucción compara el estado lógico actual del <Operando1> con el estado lógico de la
consulta anterior, que está almacenado en una marca de flancos (<Operando2>). Si la
instrucción detecta un cambio del resultado lógico (RLO) de "1" a "0", significa que hay un
flanco de señal descendente.
La figura siguiente muestra el cambio del estado lógico en caso de flanco de señal
descendente y ascendente:
(VWDGR
OµJLFR

)ODQFRGHVH³DODVFHQGHQWH

)ODQFRGHVH³DOGHVFHQGHQWH




7HPSRUL]DGRU

El flanco de señal descendente se consulta cada vez que se ejecuta la instrucción. Si se
detecta un flanco de señal descendente, el <Operando1> adopta el estado lógico "1" durante
un ciclo del programa. En los demás casos, el estado lógico del operando es "0".
Indique el operando que debe consultarse (<Operando1>) en el comodín correspondiente
ubicado encima de la instrucción. La marca de flancos (<Operando2>) se indica en el comodín
correspondiente situado debajo de la instrucción.
Nota
Uso de la dirección de la marca de flancos
La dirección de la marca de flancos no se puede utilizar más de una vez en el programa, puesto
que, de lo contrario, se sobrescribe el bit de marcas. Esto influye negativamente en la
evaluación de flancos, de manera que el resultado deja de ser unívoco. El área de memoria de
la marca de flancos debe estar en un bloque de datos (área 'Static' de FB) o en el área de
marcas.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar flanco de señal
descendente de un operando":

5046

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

BOOL

I, Q, M, T, C, D, L

Señal que se debe consultar

<Operan‐
do2>

InOut

BOOL

I, Q, M, D, L

Marca de flancos en la que
se almacena el estado lógico
de la consulta anterior.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ
1
ಯ7DJB0ಯ

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● En la entrada "TagIn_1" hay un flanco de señal descendente.
● El estado lógico del operando "TagIn_2" es "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Principios básicos de FUP (Página 8005)

P_TRIG: Consultar flanco de señal ascendente del RLO
Descripción
La instrucción "Consultar flanco de señal ascendente del RLO" permite consultar un cambio
del estado lógico del resultado lógico (RLO) de "0" a "1". La instrucción compara el estado
lógico actual del RLO con el estado lógico de la consulta anterior, que está guardado en una
marca de flancos (<Operando>). Si la instrucción detecta un cambio del RLO de "0" a "1",
significa que hay un flanco de señal ascendente.
El flanco de señal ascendente se consulta cada vez que se ejecuta la instrucción. En cuanto
se detecta un flanco de señal ascendente, la salida Q de la instrucción devuelve el estado
lógico "1" durante un ciclo del programa. En todos los demás casos, la salida devuelve el
estado lógico "0".
Nota
Uso de la dirección de la marca de flancos
La dirección de la marca de flancos no se puede utilizar más de una vez en el programa, puesto
que, de lo contrario, se sobrescribe el bit de marcas. Esto influye negativamente en la
evaluación de flancos, de manera que el resultado deja de ser unívoco. El área de memoria de
la marca de flancos debe estar en un bloque de datos (área 'Static' de FB) o en el área de
marcas.

Programación del PLC
Manual de programación y manejo, 11/2019

5047

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar flanco de señal
ascendente del RLO":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CLK

Input

BOOL

I, Q, M, D, L

RLO actual

<Operando>

InOut

BOOL

M, D

Marca de flancos en la que
se almacena el RLO de la
consulta anterior.

Q

Output

BOOL

I, Q, M, D, L

Resultado de la evaluación
de flancos

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

! 

ಯ7DJ,QBಯ

ಯ7DJ2XWಯ

3B75,*
&/.
4

&$6
-03

ಯ7DJB0ಯ

En la marca de flancos "Tag_M" se almacena el RLO de la consulta anterior. Cuando se
detecta un cambio del estado lógico del RLO de "0" a "1", se ejecuta el salto a la etiqueta CAS1.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Principios básicos de FUP (Página 8005)

N_TRIG: Consultar flanco de señal descendente del RLO
Descripción
La instrucción "Consultar flanco de señal descendente del RLO" permite consultar un cambio
del estado lógico del resultado lógico (RLO) de "1" a "0". La instrucción compara el estado
lógico actual del RLO con el estado lógico de la consulta anterior, que está guardado en una
marca de flancos (<Operando>). Si la instrucción detecta un cambio del RLO de "1" a "0",
significa que hay un flanco de señal descendente.
El flanco de señal descendente se consulta cada vez que se ejecuta la instrucción. En cuanto
se detecta un flanco de señal descendente, la salida Q de la instrucción devuelve el estado

5048

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
lógico "1" durante un ciclo del programa. En todos los demás casos, el estado lógico de la
salida de la instrucción es "0".
Nota
Uso de la dirección de la marca de flancos
La dirección de la marca de flancos no se puede utilizar más de una vez en el programa, puesto
que, de lo contrario, se sobrescribe el bit de marcas. Esto influye negativamente en la
evaluación de flancos, de manera que el resultado deja de ser unívoco. El área de memoria de
la marca de flancos debe estar en un bloque de datos (área 'Static' de FB) o en el área de
marcas.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar flanco de señal
descendente del RLO":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CLK

Input

BOOL

I, Q, M, D, L

RLO actual

<Operando>

InOut

BOOL

M, D

Marca de flancos en la que
se almacena el RLO de la
consulta anterior.

Q

Output

BOOL

I, Q, M, D, L

Resultado de la evaluación
de flancos

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

! 

ಯ7DJ,QBಯ

ಯ7DJ2XWಯ

1B75,*
&/.
4

&$6
-03

ಯ7DJB0ಯ

En la marca de flancos "Tag_M" se almacena el RLO de la consulta anterior. Cuando se
detecta un cambio del estado lógico del RLO de "1" a "0", se ejecuta el salto a la etiqueta CAS1.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Principios básicos de FUP (Página 8005)

Programación del PLC
Manual de programación y manejo, 11/2019

5049

Instrucciones
4.2 Instrucciones

Temporizadores
Temporizadores CEI
TP: Impulso
Descripción
La instrucción "Impulso" activa la salida Q por un tiempo programado. La instrucción se inicia
cuando el resultado lógico (RLO) de la entrada IN cambia de "0" a "1" (flanco de señal
ascendente). Para poder ejecutar la instrucción se requiere una operación lógica precedente.
Se puede colocar dentro o al final del segmento. El tiempo programado PT empieza a contarse
al iniciar la instrucción. La salida Q se activa por el tiempo PT, independientemente de cómo
evolucione la señal de entrada. La detección de un nuevo flanco de señal ascendente tampoco
influye en el estado lógico de la salida Q mientras transcurra el tiempo PT.
El valor de tiempo actual se puede consultar en la salida ET. Este valor de tiempo empieza a
contar a partir de T#0s y termina al alcanzarse el valor del tiempo PT. Una vez alcanzado este
tiempo PT y si el estado lógico de la entrada IN es "0", se desactiva la salida ET.
A cada llamada de la instrucción "Impulso" debe asignársele un temporizador CEI, en el que
se guardan los datos de la instrucción. Un temporizador CEI se puede declarar como se indica
a continuación:
● Declaración de un bloque de datos del tipo TP (p. ej., "TP_DB")
● Declaración como variable local del tipo TP en la sección "Static" de un bloque (p. ej.,
#MyTP_TIMER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el temporizador CEI se deposita en un bloque
de datos propio (instancia individual) o como variable local (multiinstancia) en la interfaz del
bloque. Si crea un bloque de datos propio, lo encontrará en el árbol del proyecto, en la carpeta
"Recursos de programa", en "Bloques de programa > Bloques de sistema". Encontrará más
información al respecto en "Consulte también".
El sistema operativo desactiva las instancias de la instrucción "Impulso" cuando se realiza un
arranque en frío. Si alguna instancia de la instrucción debe estar inicializada tras un rearranque
completo (en caliente), las instancias que se deben inicializar se deben llamar en un OB de
arranque con el valor "0" en el parámetro PT. Si un bloque diferente contiene instancias de la
instrucción "Impulso", estas pueden inicializarse p. ej. inicializando el bloque de nivel superior.
Nota
Ignorar instrucción
Si en el programa no se llama la instrucción porque, p. ej., esta es ignorada, la salida ET
devuelve un valor de constante en cuanto ha transcurrido este tiempo.

5050

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Nota
Actualización de los datos de la instrucción
Los datos de la instrucción se actualizan únicamente al llamar la instrucción. En caso de
acceder a las salidas Q o ET, no se actualizan los datos.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Impulso":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de arranque

PT

Input

TIME

I, Q, M, D, L, P o
constante

Duración del impulso.
El valor del parámetro PT de‐
be ser positivo.

Q

Output

BOOL

I, Q, M, D, L

Salida de impulso

ET

Output

TIME

I, Q, M, D, L

Valor de tiempo actual

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Impulso":
,1

4

37

37

37

(7
37

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)

Programación del PLC
Manual de programación y manejo, 11/2019

5051

Instrucciones
4.2 Instrucciones
Ejemplos de programación FUP (Página 8050)
Principios básicos de FUP (Página 8005)

TON: Retardo al conectar
Descripción
Con la instrucción "Retardo al conectar" se puede retardar la activación de la salida Q por el
tiempo programado PT. La instrucción se inicia cuando el resultado lógico (RLO) de la entrada
IN cambia de "0" a "1" (flanco de señal ascendente). Para poder ejecutar la instrucción se
requiere una operación lógica precedente. Se puede colocar dentro o al final del segmento. El
tiempo programado PT empieza a contarse al iniciar la instrucción. Una vez transcurrido el
tiempo PT, la salida Q devuelve el estado lógico "1". La salida Q permanece activada mientras
la entrada de arranque esté puesta a "1". Cuando el estado lógico de la entrada de arranque
cambia de "1" a "0", se desactiva la salida Q. La función de temporización se reinicia al
detectarse un nuevo flanco de señal ascendente en la entrada de arranque.
El valor de tiempo actual se puede consultar en la salida ET. Este valor de tiempo empieza a
partir de T#0s y termina al alcanzarse el valor del tiempo PT. La salida ET se desactiva en
cuanto el estado lógico de la entrada IN cambia a "0".
A cada llamada de la instrucción "Retardo al conectar" debe asignársele un temporizador CEI,
en el que se guardan los datos de la instrucción. Un temporizador CEI se puede declarar como
se indica a continuación:
● Declaración de un bloque de datos del tipo TON (p. ej., "TON_DB")
● Declaración como variable local del tipo TON en la sección "Static" de un bloque (p. ej.,
#MyTON_TIMER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el temporizador CEI se deposita en un bloque
de datos propio (instancia individual) o como variable local (multiinstancia) en la interfaz del
bloque. Si crea un bloque de datos propio, lo encontrará en el árbol del proyecto, en la carpeta
"Recursos de programa", en "Bloques de programa > Bloques de sistema". Encontrará más
información al respecto en "Consulte también".
Los datos de la instrucción se actualizan tanto al efectuar una llamada de la instrucción como
cada vez que se accede a las salidas Q o ET.
El sistema operativo desactiva las instancias de la instrucción "Retardo al conectar" cuando se
realiza un arranque en frío. Si alguna instancia de la instrucción debe estar inicializada tras un
rearranque completo (en caliente), las instancias que se deben inicializar se deben llamar en
un OB de arranque con el valor "0" en el parámetro PT. Si un bloque diferente contiene
instancias de la instrucción "Retardo al conectar", estas pueden inicializarse p. ej. inicializando
el bloque de nivel superior.
Nota
Ignorar instrucción
Si en el programa no se llama la instrucción porque, p. ej., esta es ignorada, la salida ET
devuelve un valor de constante en cuanto ha transcurrido este tiempo.

5052

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Nota
Actualización de los datos de la instrucción
Los datos de la instrucción se actualizan únicamente al llamar la instrucción. En caso de
acceder a las salidas Q o ET, no se actualizan los datos.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Retardo al conectar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de arranque

PT

Input

TIME

I, Q, M, D, L, P o
constante

Tiempo del retardo al conec‐
tar
El valor del parámetro PT de‐
be ser positivo.

Q

Output

BOOL

I, Q, M, D, L

Salida que se activa una vez
transcurrido el tiempo PT.

ET

Output

TIME

I, Q, M, D, L

Valor de tiempo actual

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Retardo al conectar":
,1

4

37

37

(7
37

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)

Programación del PLC
Manual de programación y manejo, 11/2019

5053

Instrucciones
4.2 Instrucciones
Ejemplos de programación FUP (Página 8050)
Principios básicos de FUP (Página 8005)

TOF: Retardo al desconectar
Descripción
Con la instrucción "Retardo al desconectar" se puede retardar la desactivación de la salida Q
por el tiempo programado PT. La salida Q se activa cuando el resultado lógico (RLO) de la
entrada IN cambia de "0" a "1" (flanco de señal ascendente). Para poder ejecutar la instrucción
se requiere una operación lógica precedente. Se puede colocar dentro o al final del segmento.
Cuando el estado lógico de la entrada IN cambia nuevamente a "0", el tiempo programado PT
deja de contar. La salida Q permanece activada mientras transcurre el tiempo PT. Una vez
transcurrido el tiempo PT se desactiva la salida Q. Si el estado lógico de la entrada IN cambia
a "1" antes de que transcurra el tiempo PT, se inicializa el temporizador. El estado lógico de la
salida Q permanece en "1".
El valor de tiempo actual se puede consultar en la salida ET. El valor de tiempo actual empieza
a partir de T#0s y termina al alcanzarse el valor de tiempo PT. Una vez transcurrido el tiempo
PT, el valor actual de la salida ET se conserva hasta que la entrada IN cambie nuevamente a
"1". Si el estado lógico de la entrada IN cambia a "1" antes de transcurrir el tiempo PT, la salida
ET adopta el valor T#0s.
A cada llamada de la instrucción "Retardo al desconectar" debe asignársele un temporizador
CEI, en el que se guardan los datos de la instrucción. Un temporizador CEI se puede declarar
como se indica a continuación:
● Declaración de un bloque de datos del tipo TOF (p. ej., "TOF_DB")
● Declaración como variable local del tipo TOF en la sección "Static" de un bloque (p. ej.,
#MyTOF_TIMER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el temporizador CEI se deposita en un bloque
de datos propio (instancia individual) o como variable local (multiinstancia) en la interfaz del
bloque. Si crea un bloque de datos propio, lo encontrará en el árbol del proyecto, en la carpeta
"Recursos de programa", en "Bloques de programa > Bloques de sistema". Encontrará más
información al respecto en "Consulte también".
El sistema operativo desactiva las instancias de la instrucción "Retardo al desconectar"
cuando se realiza un arranque en frío. Si alguna instancia de la instrucción debe estar
inicializada tras un rearranque completo (en caliente), las instancias que se deben inicializar se
deben llamar en un OB de arranque con el valor "0" en el parámetro PT. Si un bloque diferente
contiene instancias de la instrucción "Retardo al desconectar", estas pueden inicializarse p. ej.
inicializando el bloque de nivel superior.
Nota
Ignorar instrucción
Si en el programa no se llama la instrucción porque, p. ej., esta es ignorada, la salida ET
devuelve un valor de constante en cuanto ha transcurrido este tiempo.

5054

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Nota
Actualización de los datos de la instrucción
Los datos de la instrucción se actualizan únicamente al llamar la instrucción. En caso de
acceder a las salidas Q o ET, no se actualizan los datos.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Retardo al desconectar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de arranque

PT

Input

TIME

I, Q, M, D, L, P o
constante

Tiempo del retardo al desco‐
nectar
El valor del parámetro PT de‐
be ser positivo.

Q

Output

BOOL

I, Q, M, D, L

Salida que se desactiva una
vez transcurrido el tiempo PT.

ET

Output

TIME

I, Q, M, D, L

Valor de tiempo actual

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Retardo al
desconectar":
,1

4
37

37

(7
37

Programación del PLC
Manual de programación y manejo, 11/2019

5055

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Ejemplos de programación FUP (Página 8050)
Principios básicos de FUP (Página 8005)

Temporizadores SIMATIC
S_PULSE: Parametrizar y arrancar temporizador como impulso
Descripción
Con la instrucción "Parametrizar y arrancar temporizador como impulso" se arranca un
temporizador programado al detectarse un cambio en el resultado lógico (RLO) de "0" a "1"
(flanco de señal ascendente) en la entrada S. El temporizador cuenta el tiempo programado
(TV) mientras el estado lógico de la entrada S sea "1". Si el estado lógico en la entrada S
cambia a "0" antes de que transcurra el tiempo programado, se detiene el temporizador. En tal
caso, el estado lógico de la salida Q es "0".
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo. El valor de tiempo actual se emite codificado en binario por la salida
BI y codificado en BCD por la salida BCD.
Si el temporizador está contando y el estado lógico de la entrada R cambia a "1", el valor actual
de tiempo y la base de tiempo también se ponen a cero. Si el temporizador no está en marcha,
el estado lógico "1" de la entrada R no provoca ningún efecto.
La instrucción "Parametrizar y arrancar temporizador como impulso" requiere una operación
lógica precedente para la evaluación de flancos y se puede colocar dentro o en el extremo del
segmento.
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

5056

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y arrancar
temporizador como impulso":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador de la instruc‐
ción
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, T, C, D, L,
P

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo

R

Input

BOOL

I, Q, M, T, C, D, L,
P

Entrada de reset

BI

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en binario)

BCD

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L, P

Estado del temporizador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5057

Instrucciones
4.2 Instrucciones

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como impulso":
W

W

W

5/2HQODHQWUDGD6

5/2HQODHQWUDGD5

7HPSRUL]DGRU
HQPDUFKD

&RQVXOWDಯಯ

&RQVXOWDಯಯ

W WLHPSRSURJUDPDGR

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7LPHUBಯ
6B38/6(
ಯ7DJ,QBಯ
ಯ7DJ,QB1XPEHUಯ

6
79

%,

ಯ7DJ9DOXHBಯ

%&'

ಯ7DJ9DOXHBಯ
ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

5

4

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador empieza a contar con el valor de tiempo del operando
"TagIn_Number" y sigue contando mientras el operando "TagIn_1" devuelva el estado lógico
"1". Si el estado lógico del operando "TagIn_1" cambia de "1" a "0" antes de que transcurra el
tiempo, el temporizador "Timer_1" se detiene. En ese caso, el operando "TagOut" se pone a
"0".

5058

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
El operando "TagOut" devuelve el estado lógico "1" mientras el temporizador esté en marcha
y el operando "TagIn_1" tenga el estado lógico "1". Una vez transcurrido el tiempo o si se
inicializa el temporizador, el operando "TagOut" se pone a "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 5383)
Principios básicos de FUP (Página 8005)

S_PEXT: Parametrizar y arrancar temporizador como impulso prolongado
Descripción
Con la instrucción "Parametrizar y arrancar temporizador como impulso prolongado" se
arranca un temporizador programado al detectarse un cambio en el resultado lógico (RLO) de
"0" a "1" (flanco de señal ascendente) en la entrada S. El temporizador cuenta el tiempo
programado (TV), aunque el estado lógico de la entrada S cambie a "0". Mientras se ejecuta
el temporizador, la salida Q devuelve el estado lógico "1". Una vez transcurrido el tiempo, la
salida Q se pone a "0". Si el estado lógico en la entrada S cambia de "0" a "1" mientras se
cuenta el tiempo, este se reinicia con el tiempo programado en la entrada TV.
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo. El valor de tiempo actual se emite codificado en binario por la salida
BI y codificado en BCD por la salida BCD.
Si el temporizador está contando y el estado lógico de la entrada R cambia a "1", el valor actual
de tiempo y la base de tiempo también se ponen a cero. Si el temporizador no está en marcha,
el estado lógico "1" de la entrada R no provoca ningún efecto.
La instrucción "Parametrizar y arrancar temporizador como impulso prolongado" requiere una
operación lógica precedente para la evaluación de flancos y se puede colocar dentro o en el
extremo del segmento.
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

Programación del PLC
Manual de programación y manejo, 11/2019

5059

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y arrancar
temporizador como impulso prolongado":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador de la instruc‐
ción
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, T, C, D, L,
P

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo

R

Input

BOOL

I, Q, M, T, C, D, L,
P

Entrada de reset

BI

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en binario)

BCD

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L, P

Estado del temporizador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5060

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como impulso prolongado":
W

W

W

5/2HQODHQWUDGD6

5/2HQODHQWUDGD5

(OWHPSRUL]DGRUHVW£HQ
PDUFKD

&RQVXOWDಯಯ

&RQVXOWDಯಯ
W WLHPSRSURJUDPDGR

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7LPHUBಯ
6B3(;7
ಯ7DJ,QBಯ
ಯ7DJ,QB1XPEHUಯ

6
79

%,

ಯ7DJ9DOXHBಯ

%&'

ಯ7DJ9DOXHBಯ
ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

5

4

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador empieza a contar con el valor de tiempo del operando
"TagIn_Number" sin verse afectado por un flanco descendente en la entrada S. Si el estado
lógico del operando "TagIn_1" cambia de "0" a "1" antes de que transcurra el tiempo, el
temporizador se reinicia.

Programación del PLC
Manual de programación y manejo, 11/2019

5061

Instrucciones
4.2 Instrucciones
El operando "TagOut" devuelve el estado lógico "1" mientras el temporizador esté en marcha.
Una vez transcurrido el tiempo o si se inicializa el temporizador, el operando "TagOut" se pone
a "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 5383)
Principios básicos de FUP (Página 8005)

S_ODT: Parametrizar y arrancar temporizador como retardo a la conexión
Descripción
Con la instrucción "Parametrizar y arrancar temporizador como retardo a la conexión" se
arranca un temporizador programado como retardo a la conexión al detectarse un cambio en
el resultado lógico (RLO) de "0" a "1" (flanco de señal ascendente) en la entrada S. El
temporizador cuenta el tiempo programado (TV) mientras el estado lógico de la entrada S sea
"1". Una vez transcurrido el tiempo debidamente y si la entrada S aún tiene el valor lógico "1",
la salida Q devuelve el valor lógico "1". Si el estado de la entrada S cambia de "1" a "0" mientras
se cuenta el tiempo, el temporizador se detiene. En este caso, la salida Q adopta el estado
lógico "0".
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo. El valor de tiempo actual se emite codificado en binario por la salida
BI y codificado en BCD por la salida BCD.
Si el temporizador está contando y el estado lógico de la entrada R cambia de "0" a "1", el valor
actual de tiempo y la base de tiempo también se ponen a cero. En ese caso, el estado lógico
de la salida Q es "0". El temporizador se reinicia cuando el estado lógico de la entrada R es "1",
incluso si el temporizador no se ejecuta y el RLO en la entrada S es "1".
La instrucción "Parametrizar y arrancar temporizador como retardo a la conexión" requiere una
operación lógica precedente para la evaluación de flancos y se puede colocar dentro o en el
extremo del segmento.
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.

5062

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y arrancar
temporizador como retardo a la conexión":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador de la instruc‐
ción
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, T, C, D, L,
P

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo

R

Input

BOOL

I, Q, M, T, C, D, L,
P

Entrada de reset

BI

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en binario)

BCD

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L, P

Estado del temporizador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5063

Instrucciones
4.2 Instrucciones

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como retardo a la conexión":
W

W

W

5/2HQODHQWUDGD6

5/2HQODHQWUDGD5

(OWHPSRUL]DGRUHVW£HQ
PDUFKD

&RQVXOWD

&RQVXOWD
W WLHPSRSURJUDPDGR

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7LPHUBಯ
6B2'7
ಯ7DJ,QBಯ
ಯ7DJ,QB1XPEHUಯ

6
79

%,

ಯ7DJ9DOXHBಯ

%&'

ಯ7DJ9DOXHBಯ
ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

5

4

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador cuenta el valor de tiempo del operando "TagIn_Number".
Una vez transcurrido el tiempo y si el operando tiene el estado lógico "1", el operando "TagOut"
se pone a "1". Si el estado lógico del operando "TagIn_1" cambia de "1" a "0" antes de que
transcurra el tiempo, el temporizador se detiene. El operando "TagOut" devuelve en ese caso
el estado lógico "0".

5064

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 5383)
Principios básicos de FUP (Página 8005)

S_ODTS: Parametrizar y arrancar temporizador como retardo a la conexión con memoria
Descripción
Con la instrucción "Parametrizar y arrancar temporizador como retardo a la conexión con
memoria" se arranca un temporizador programado al detectarse un cambio en el resultado
lógico (RLO) de "0" a "1" (flanco de señal ascendente) en la entrada S. El temporizador cuenta
el tiempo programado (TV), aunque el estado lógico de la entrada S cambie a "0". Una vez
transcurrido el tiempo, la salida Q devuelve el estado lógico "1" independientemente del estado
lógico de la entrada S. Si el estado lógico de la entrada S cambia de "0" a "1" mientras se
cuenta el tiempo, el temporizador vuelve a arrancar con el tiempo programado (TV).
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo. El valor de tiempo actual se emite codificado en binario por la salida
BI y codificado en BCD por la salida BCD.
El estado lógico "1" de la entrada R pone a "0" el valor actual de tiempo y la base de tiempo,
independientemente del estado lógico de la entrada de arranque S. En ese caso, el estado
lógico de la salida Q es "0".
La instrucción "Parametrizar y arrancar temporizador como retardo a la conexión con
memoria" requiere una operación lógica precedente para la evaluación de flancos y se puede
colocar dentro o en el extremo del segmento.
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

Programación del PLC
Manual de programación y manejo, 11/2019

5065

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y arrancar
temporizador como retardo a la conexión con memoria":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador de la instruc‐
ción
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, T, C, D, L,
P

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo

R

Input

BOOL

I, Q, M, T, C, D, L,
P

Entrada de reset

BI

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en binario)

BCD

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L, P

Estado del temporizador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como retardo a la conexión con memoria":
W

W

W

5/2HQODHQWUDGD6

5/2HQODHQWUDGD5

(OWHPSRUL]DGRUHVW£HQ
PDUFKD
&RQVXOWD
&RQVXOWD
W WLHPSRSURJUDPDGR

5066

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7LPHUBಯ
6B2'76
ಯ7DJ,QBಯ
ಯ7DJ,QB1XPEHUಯ

6
79

%,

ಯ7DJ9DOXHBಯ

%&'

ಯ7DJ9DOXHBಯ
ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

5

4

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador cuenta el valor de tiempo del operando "TagIn_Number"
aunque el estado lógico del operando "TagIn_1" cambie a "0". Una vez transcurrido el tiempo,
el operando "TagOut" se pone a "1". Si el estado lógico del operando "TagIn_1" cambia de "0"
a "1" mientras el temporizador está en marcha, se reinicia el temporizador.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 5383)
Principios básicos de FUP (Página 8005)

S_OFFDT: Parametrizar y arrancar temporizador como retardo a la desconexión
Descripción
Con la instrucción "Parametrizar y arrancar temporizador como retardo a la desconexión" se
arranca un temporizador programado al detectarse un cambio en el resultado lógico (RLO) de
"1" a "0" (flanco de señal descendente) en la entrada S. El temporizador empieza a contar con
el tiempo programado (TV). Mientras el temporizador está en marcha o la entrada S devuelve
el estado lógico "1", la salida Q tiene el estado lógico "1". Si el tiempo ha transcurrido y el
estado lógico es "0", la salida Q adopta el valor lógico "0". Si el estado lógico de la entrada S
cambia de "0" a "1" mientras se cuenta el tiempo, el temporizador se inicializa. El temporizador
no vuelve a arrancar hasta que no se detecta un flanco de señal descendente en la entrada S.
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo. El valor de tiempo actual se emite codificado en binario por la salida
BI y codificado en BCD por la salida BCD.
El estado lógico "1" en la entrada R pone a "0" el valor de tiempo y la base de tiempo actuales.
En ese caso, el estado lógico de la salida Q es "0".
La instrucción "Parametrizar y arrancar temporizador como retardo a la desconexión" requiere
una operación lógica precedente para la evaluación de flancos y se puede colocar dentro o en
el extremo del segmento.

Programación del PLC
Manual de programación y manejo, 11/2019

5067

Instrucciones
4.2 Instrucciones
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y arrancar
temporizador como retardo a la desconexión":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador de la instruc‐
ción
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, T, C, D, L,
P

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo

R

Input

BOOL

I, Q, M, T, C, D, L,
P

Entrada de reset

BI

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en binario)

BCD

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L, P

Estado del temporizador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5068

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como retardo a la desconexión":
W

W

W

W

5/2HQODHQWUDGD6

5/2HQODHQWUDGD5

(OWHPSRUL]DGRUHVW£HQ
PDUFKD

&RQVXOWD

&RQVXOWD
W WLHPSRSURJUDPDGR

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7LPHUBಯ
6B2))'7
ಯ7DJ,QBಯ
ಯ7DJ,QB1XPEHUಯ

6
79

%,

ಯ7DJ9DOXHBಯ

%&'

ಯ7DJ9DOXHBಯ
ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

5

4

Cuando el estado lógico del operando "TagIn_1" cambia de "1" a "0", el temporizador "Timer_1"
se pone en marcha. El temporizador cuenta el valor de tiempo del operando "TagIn_Number".
El operando "TagOut" devuelve el estado lógico "1" mientras el temporizador está en marcha
o el operando "TagIn_1" tiene el estado lógico "0". Si el estado lógico del operando "TagIn_1"
cambia de "0" a "1" mientras el temporizador está en marcha, el temporizador se reinicia.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 5383)
Principios básicos de FUP (Página 8005)

Programación del PLC
Manual de programación y manejo, 11/2019

5069

Instrucciones
4.2 Instrucciones

SP: Arrancar temporizador como impulso
Descripción
La instrucción "Arrancar temporizador como impulso" arranca un temporizador programado al
detectarse un cambio en el resultado lógico (RLO) de "0" a "1" (flanco de señal ascendente) en
la entrada de arranque. El temporizador cuenta el tiempo indicado mientras el RLO devuelva
el estado lógico "1". Mientras el temporizador está en marcha, una consulta de si el estado del
temporizador es "1" da como resultado "1". Si el RLO cambia de "1" a "0" antes de que haya
transcurrido el valor de tiempo, el temporizador se detiene. En ese caso, una consulta de si el
estado del temporizador es "1" da como resultado "0".
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo.
La instrucción "Arrancar temporizador como impulso" requiere una operación lógica
precedente para la evaluación de flancos y solo se puede colocar en el margen derecho del
segmento.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
impulso":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, T, C, D, L,
P

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo

<Temporiza‐
dor>

Output

TIMER

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5070

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
ಯ7LPHUBಯ
63

ಯ7DJ,QBಯ
ಯ7DJ,QB1XPEHUಯ

79

6HJPHQWR
ಯ7DJ2XWಯ

6HJPHQWR
ಯ7LPHUBಯ
ಯ7DJ,QBಯ

5

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador empieza a contar con el valor de tiempo del operando
"TagIn_Number" y sigue contando mientras el operando "TagIn_1" devuelva el estado lógico
"1". Si el estado lógico del operando "TagIn_1" cambia de "1" a "0" antes de que transcurra el
tiempo, el temporizador se detiene. Mientras el temporizador está en marcha, el operando
"TagOut" devuelve el estado lógico "1". Si el estado lógico del operando "TagIn_2" cambia de
"0" a "1", el temporizador se inicializa, es decir, se detiene y el valor de tiempo actual se pone
a "0".
La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJ,QBಯ

'HVDFWLYDU

ಯ7DJ,QBಯ

7HPSRUL]DGRU

ಯ7LPHUBಯ

6DOLGD

ಯ7DJ2XWಯ

W

W WLHPSRSURJUDPDGR

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 5383)
Principios básicos de FUP (Página 8005)

Programación del PLC
Manual de programación y manejo, 11/2019

5071

Instrucciones
4.2 Instrucciones

SE: Arrancar temporizador como impulso prolongado
Descripción
La instrucción "Arrancar temporizador como impulso prolongado" arranca un temporizador
programado al detectarse un cambio en el resultado lógico (RLO) de "0" a "1" (flanco de señal
ascendente) en la entrada de arranque. El temporizador cuenta el tiempo indicado, aunque el
RLO cambie al estado lógico "0". Mientras el temporizador está en marcha, una consulta de si
el estado del temporizador es "1" da como resultado "1". Si el RLO cambia de "0" a "1" mientras
el temporizador está funcionando, este se arranca de nuevo con el tiempo programado. La
consulta sobre si el estado es "1" da como resultado "0" si el tiempo ha transcurrido.
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización aquí: L: Cargar valor del
temporizador (Página 5383)

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
impulso prolongado":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, T, C, D, L,
P

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo

<Temporiza‐
dor>

Output

TIMER

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5072

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
ಯ7LPHUBಯ
6(

ಯ7DJ,QBಯ
79

ಯ7DJ,QB1XPEHUಯ
6HJPHQWR

ಯ7DJ2XWಯ

6HJPHQWR
ಯ7LPHUBಯ
5

ಯ7DJ,QBಯ

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador empieza a contar con el valor de tiempo del operando
"TagIn_Number" sin verse afectado por un flanco de señal descendente en el RLO. Mientras
el temporizador está en marcha, el operando "TagOut" devuelve el estado lógico "1". Si el
estado lógico del operando "TagIn_1" vuelve a cambiar de "0" a "1" antes de que transcurra el
tiempo, el temporizador se inicializa.
La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJ,QBಯ

'HVDFWLYDU

ಯ7DJ,QBಯ

7HPSRUL]DGRU

ಯ7LPHUBಯ

6DOLGD

ಯ7DJ2XWಯ

W

W WLHPSRSURJUDPDGR

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de FUP (Página 8005)

Programación del PLC
Manual de programación y manejo, 11/2019

5073

Instrucciones
4.2 Instrucciones

SD: Arrancar temporizador como retardo a la conexión
Descripción
La instrucción "Arrancar temporizador como retardo a la conexión" arranca un temporizador
programado al detectarse el estado lógico "1" en la entrada de arranque. Mientras se
mantenga el estado lógico "1", el temporizador contará el tiempo indicado. Una vez
transcurrido el tiempo y si el estado lógico en la entrada de arranque sigue siendo "1", la
consulta del estado del temporizador también dará como resultado "1". Si la señal de la entrada
de arranque es "0", el temporizador se inicializa. En ese caso, la consulta del estado del
temporizador devuelve el estado lógico "0". En cuanto la señal en la entrada de arranque
vuelve a cambiar a "1", el temporizador vuelve a contar el tiempo.
El estado lógico de la salida del temporizador es idéntico al de la entrada de arranque. La
entrada de arranque está interconectada directamente con la salida y no tiene relación con el
temporizador.
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte
también L: Cargar valor del temporizador (Página 5383).

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
retardo a la conexión":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, T, C, D, L,
P

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo

<Temporiza‐
dor>

Output

TIMER

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

5074

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Segmento 1:
7LPHUB
6(

7DJ,QB
7:

7DJ,QB1XPEHU

Cuando el estado lógico del operando #TagIn_1 cambia de "0" a "1", el temporizador #Timer_1
arranca. El temporizador cuenta el valor de tiempo del operando #TagIn_Number. Si el estado
lógico del operando #TagIn_1 cambia de "1" a "0" antes de que transcurra el tiempo, el
temporizador se inicializa.
Segmento 2:
7DJ2XW
7LPHUB

Si ha transcurrido el tiempo y el estado lógico del operando #TagIn_1 en la entrada de
arranque es "1" y el temporizador no se ha inicializado, el operando #TagOut es "1".
Segmento 3:
7LPHUB
5

7DJ,QB

Si el estado lógico del operando #TagIn_2 es "1", se inicializan el temporizador #Timer_1 y la
salida #TagOut.
Si desea volver a arrancar el #Timer_1, el estado lógico en el operando #TagIn_2 debe ser "0"
y el estado lógico en la entrada de arranque #TagIn_1 debe cambiar de "0" a "1".
La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJ,QBಯ

'HVDFWLYDU

ಯ7DJ,QBಯ

7HPSRUL]DGRU

ಯ7LPHUBಯ

6DOLGD

ಯ7DJ2XWಯ

W

W

W WLHPSRSURJUDPDGR

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de FUP (Página 8005)
Programación del PLC
Manual de programación y manejo, 11/2019

5075

Instrucciones
4.2 Instrucciones

SS: Arrancar temporizador como retardo a la conexión con memoria
Descripción
La instrucción "Arrancar temporizador como retardo a la conexión con memoria" arranca un
temporizador programado al detectarse un cambio en el resultado lógico (RLO) de "0" a "1"
(flanco de señal ascendente) en la entrada de arranque. El temporizador cuenta el tiempo
indicado, aunque el RLO cambie al estado lógico "0". Si ha transcurrido el tiempo, una consulta
de si el estado del temporizador es "1" da como resultado "1". Una vez transcurrido el tiempo,
el temporizador no puede volver a ponerse en marcha hasta que no se haya reiniciado
explícitamente.
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo.
La instrucción "Arrancar temporizador como retardo a la conexión con memoria" requiere una
operación lógica precedente para la evaluación de flancos y solo se puede colocar en el
margen derecho del segmento.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización aquí: L: Cargar valor del
temporizador (Página 5383)

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
retardo a la conexión con memoria":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, T, C, D, L,
P

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo

<Temporiza‐
dor>

Output

TIMER

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5076

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
ಯ7LPHUBಯ
66

ಯ7DJ,QBಯ
79

ಯ7DJ,QB1XPEHUಯ
6HJPHQWR

ಯ7DJ2XWಯ

6HJPHQWR
ಯ7LPHUBಯ
5

ಯ7DJ,QBಯ

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador cuenta el valor de tiempo del operando "TagIn_Number".
Una vez transcurrido el tiempo, el operando "TagOut" se pone a "1". Si el estado lógico del
operando "TagIn_1" cambia de "0" a "1" mientras el temporizador está en marcha, se reinicia
el temporizador. Si el estado lógico del operando "TagIn_2" es "1", el temporizador "Timer_1"
se reinicia, es decir, que se detiene y el valor de tiempo actual se pone a "0".
La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJ,QBಯ

'HVDFWLYDU

ಯ7DJ,QBಯ

7HPSRUL]DGRU

ಯ7LPHUBಯ

6DOLGD

ಯ7DJ2XWಯ

W

W WLHPSRSURJUDPDGR

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de FUP (Página 8005)

Programación del PLC
Manual de programación y manejo, 11/2019

5077

Instrucciones
4.2 Instrucciones

SF: Arrancar temporizador como retardo a la desconexión
Descripción
La instrucción "Arrancar temporizador como retardo a la desconexión" arranca un
temporizador programado al detectarse un cambio en el resultado lógico (RLO) de "1" a "0"
(flanco de señal descendente) en la entrada de arranque. El temporizador empieza a contar
con el tiempo indicado. Mientras el temporizador está en marcha, una consulta de si el estado
del temporizador es "1" da como resultado "1". Si el RLO cambia de "0" a "1" mientras se
ejecuta el temporizador, este se inicializa. El temporizador siempre arranca de nuevo cuando
el RLO cambia de "1" a "0".
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo.
Las consultas de si el estado del temporizador es "1" dan como resultado "1" si el estado del
resultado lógico al ejecutar la instrucción es "1". Si el RLO está a "0", las consultas de si el
estado del temporizador es "1" dan como resultado "0".
La instrucción "Arrancar temporizador como retardo a la desconexión" requiere una operación
lógica precedente para la evaluación de flancos y solo se puede colocar en el margen derecho
del segmento.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización aquí: L: Cargar valor del
temporizador (Página 5383)

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
retardo a la desconexión":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, T, C, D, L,
P

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo

<Temporiza‐
dor>

Output

TIMER

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5078

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
ಯ7LPHUBಯ
6)

ಯ7DJ,QBಯ
ಯ7DJ,QB1XPEHUಯ

79

6HJPHQWR
ಯ7DJ2XWಯ

6HJPHQWR
ಯ7LPHUBಯ
ಯ7DJ,QBಯ

5

Cuando el estado lógico del operando "TagIn_1" cambia de "1" a "0", el temporizador "Timer_1"
arranca. El temporizador cuenta el valor de tiempo del operando "TagIn_Number". Mientras el
temporizador está en marcha, el operando "TagOut" se pone a "1". Si el estado lógico del
operando "TagIn_1" cambia de "1" a "0" mientras el temporizador está en marcha, se reinicia
el temporizador. Si el estado lógico del operando "TagIn_2" es "1", el temporizador "Timer_1"
se reinicia, es decir, que se detiene y el valor de tiempo actual se pone a "0".
La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJ,QBಯ

'HVDFWLYDU

ಯ7DJ,QBಯ

7HPSRUL]DGRU

ಯ7LPHUBಯ
W

6DOLGD

W

ಯ7DJ2XWಯ
W WLHPSRSURJUDPDGR

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de FUP (Página 8005)

Programación del PLC
Manual de programación y manejo, 11/2019

5079

Instrucciones
4.2 Instrucciones

Contadores
Contadores CEI
CTU: Contador ascendente
Descripción
La instrucción "Contador ascendente" incrementa el valor en la salida CV. Cuando el estado
lógico de la entrada CU cambia de "0" a "1" (flanco de señal ascendente), se ejecuta la
instrucción y el valor actual de contaje de la salida CV se incrementa en uno. El valor de contaje
se incrementa cada vez que se detecta un flanco de señal ascendente, hasta alcanzar el valor
límite superior del tipo de datos (INT). Cuando se alcanza el valor límite superior, el estado
lógico de la entrada CU deja de tener efecto en la instrucción.
El estado del contador se puede consultar en la salida Q. El estado lógico de la salida Q es
determinado por el parámetro PV. Si el valor de contaje actual es mayor o igual al valor del
parámetro PV, la salida Q adopta el estado lógico "1". En todos los demás casos, el estado
lógico de la salida Q es "0".
El valor de la salida CV se pone a cero cuando el estado lógico de la entrada R cambia a "1".
Mientras la entrada R tenga el estado lógico "1", el estado lógico de la entrada CU no tendrá
efecto alguno en la instrucción.
A cada llamada de la instrucción "Contador ascendente" debe asignársele un contador CEI, en
el que se guarden los datos de la instrucción. Un contador CEI se declara del siguiente modo:
● Declaración de un bloque de datos del tipo CTU (p. ej., "CTU_DB")
● Declaración como variable local del tipo CTU en la sección "Static" de un bloque (p. ej.,
#MyCTU_COUNTER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el contador CEI se deposita en un bloque de
datos propio (instancia individual), o bien como variable local (multiinstancia) en la interfaz del
bloque. Si crea un bloque de datos propio, lo encontrará bajo "Bloques de programa > Bloques
de sistema" en la carpeta "Recursos de programa", en el árbol del proyecto. Encontrará más
información al respecto en "Consulte también".
El sistema operativo inicializa las instancias de la instrucción "Contador ascendente" cuando
se realiza un arranque en frío. Si deben inicializarse instancias de la instrucción tras un
rearranque completo (en caliente), las instancias por inicializar deben llamarse en un OB de
arranque con el valor "1" en el parámetro R de la instrucción. Si un bloque diferente contiene
instancias de la instrucción "Contador ascendente", estas pueden resetearse p. ej.
inicializando el bloque de nivel superior.
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
Para poder ejecutar la instrucción "Contador ascendente" se requiere una operación lógica
precedente. Se puede colocar dentro o al final del segmento.

5080

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contador ascendente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CU

Input

BOOL

I, Q, M, D, L

Entrada de contaje

R

Input

BOOL

I, Q, M, D, L, T, C,
P

Entrada de reset

PV

Input

INT

I, Q, M, D, L, P o
constante

Valor con el que se activa la
salida Q.

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

CV

Output

INT

I, Q, M, D, L, P

Valor de contaje actual

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&78B'%ಯ
&78
,17

ಯ7DJ,QBಯ

&8

ಯ7DJ,QBಯ

5

ಯ7DJB39ಯ

39

&9

ಯ7DJB&9ಯ

4

ಯ7DJ2XWಯ

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", se ejecuta la instrucción
"Contador ascendente" y el valor actual de contaje del operando "Tag_CV" se incrementa en
uno. Con cada flanco de señal ascendente posterior, el valor de contaje irá incrementando
hasta alcanzar el valor límite superior del tipo de datos (INT = 32767).
El valor del parámetro PV se utiliza como límite para determinar la salida "TagOut". La salida
"TagOut" devuelve el estado lógico "1" mientras el valor actual de contaje sea mayor o igual al
valor del operando "Tag_PV". En todos los demás casos, la salida "TagOut" devuelve el estado
lógico "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de FUP (Página 8005)

Programación del PLC
Manual de programación y manejo, 11/2019

5081

Instrucciones
4.2 Instrucciones

CTD: Contador descendente
Descripción
La instrucción "Contador descendente" decrementa el valor de la salida CV. Cuando el estado
lógico de la entrada CD cambia de "0" a "1" (flanco de señal ascendente), se ejecuta la
instrucción y el valor actual de contaje de la salida CV se decrementa en uno. Cada vez que
se detecta un flanco de señal ascendente, el valor de contaje se decrementa hasta alcanzar el
valor límite inferior del tipo de datos (INT) indicado. Cuando se alcanza el valor límite inferior,
el estado lógico de la entrada CD deja de tener efecto en la instrucción.
El estado del contador se puede consultar en la salida Q. Si el valor de contaje actual es menor
o igual a cero, la salida Q adopta el estado lógico "1". En todos los demás casos, el estado
lógico de la salida Q es "0".
El valor de la salida CV se pone al valor del parámetro PV cuando el estado lógico de la entrada
LD cambia a "1". Mientras la entrada LD tenga el estado lógico "1", el estado lógico de la
entrada CD no tendrá efecto alguno en la instrucción.
A cada llamada de la instrucción "Contador descendente" debe asignársele un contador CEI,
en el que se guarden los datos de la instrucción. Un contador CEI se declara del siguiente
modo:
● Declaración de un bloque de datos del tipo CTD (p. ej., "CTD_DB")
● Declaración como variable local del tipo CTD en la sección "Static" de un bloque (p. ej.,
#MyCTD_COUNTER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el contador CEI se deposita en un bloque de
datos propio (instancia individual), o bien como variable local (multiinstancia) en la interfaz del
bloque. Si crea un bloque de datos propio, lo encontrará bajo "Bloques de programa > Bloques
de sistema" en la carpeta "Recursos de programa", en el árbol del proyecto. Encontrará más
información al respecto en "Consulte también".
El sistema operativo inicializa las instancias de la instrucción "Contador descendente" cuando
se realiza un arranque en frío. Si deben inicializarse instancias de la instrucción tras un
rearranque completo (en caliente), las instancias por inicializar deben llamarse en un OB de
arranque con el valor "1" en el parámetro LD de la instrucción. En el parámetro PV se indica en
este caso el valor inicial deseado para el parámetro CV.
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
Para poder ejecutar la instrucción "Contador descendente" se requiere una operación lógica
precedente. Se puede colocar dentro o al final del segmento.

5082

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contador descendente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CD

Input

BOOL

I, Q, M, D, L

Entrada de contaje

LD

Input

BOOL

I, Q, M, D, L, T, C,
P

Entrada de carga

PV

Input

INT

I, Q, M, D, L, P o
constante

Valor al que se pone la salida
CV cuando LD = 1.

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

CV

Output

INT

I, Q, M, D, L, P

Valor de contaje actual

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&7'B'%ಯ
&7'
,17
ಯ7DJ,QBಯ

&'

ಯ7DJ,QBಯ

/'

&9

ಯ7DJB&9ಯ

ಯ7DJB39ಯ

39

4

ಯ7DJ2XWಯ

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", se ejecuta la instrucción
y el valor de la salida "Tag_CV" se decrementa en uno. Con cada flanco de señal ascendente
posterior, el valor de contaje irá decrementando hasta alcanzar el valor límite inferior del tipo
de datos (INT = -32768).
La salida "TagOut" devuelve el estado lógico "1" mientras el valor de contaje actual sea menor
o igual a cero. En todos los demás casos, la salida "TagOut" devuelve el estado lógico "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de FUP (Página 8005)

Programación del PLC
Manual de programación y manejo, 11/2019

5083

Instrucciones
4.2 Instrucciones

CTUD: Contador ascendente - descendente
Descripción
La instrucción "Contador ascendente - descendente" incrementa y decrementa el valor de
contaje en la salida CV. Cuando el estado lógico de la entrada CU cambia de "0" a "1" (flanco
de señal ascendente), el valor de contaje actual se incrementa en uno y se deposita en la salida
CV. Cuando el estado lógico de la entrada CD cambia de "0" a "1" (flanco de señal
ascendente), el valor de contaje de la salida CV se decrementa en uno. Si en un ciclo del
programa se detecta un flanco de señal ascendente en las entradas CU y CD, el valor actual
de contaje no se modifica en la salida CV.
El valor de contaje se puede seguir incrementando hasta alcanzar el valor límite superior del
tipo de datos indicado (INT). Una vez alcanzado el valor límite superior, el valor de contaje ya
no se incrementa al detectarse un flanco de señal ascendente. Cuando se alcanza el valor
límite inferior del tipo de datos indicado (INT), ya no se decrementa el valor de contaje.
Si el estado lógico de la entrada LD cambia a "1", el valor de contaje de la salida CV adopta el
valor del parámetro PV. Mientras la entrada LD tenga el estado lógico "1", el estado lógico de
las entradas CU y CD no tendrá efecto alguno en la instrucción.
El valor de contaje se pone a cero si el estado lógico de la entrada R cambia a "1". Mientras la
entrada R tenga el estado lógico "1", un cambio del estado lógico de las entradas CU, CD y LD
no tendrá efecto alguno en la instrucción "Contador ascendente - descendente".
El estado del contador ascendente se puede consultar en la salida QU. Si el valor actual de
contaje es mayor o igual al valor del parámetro PV, la salida QU adopta el estado lógico "1". En
todos los demás casos, el estado lógico de la salida QU es "0". En el parámetro PV también se
puede indicar una constante.
El estado del contador descendente se puede consultar en la salida QD. Si el valor actual de
contaje es menor o igual a cero, la salida QD adopta el estado lógico "1". En todos los demás
casos, el estado lógico de la salida QD es "0".
A cada llamada de la instrucción "Contador ascendente - descendente" debe asignársele un
contador CEI en el que se guarden los datos de la instrucción. Un contador CEI se declara del
siguiente modo:
● Declaración de un bloque de datos del tipo CTUD (p. ej., "CTUD_DB")
● Declaración como variable local del tipo CTUD en la sección "Static" de un bloque (p. ej.,
#MyCTUD_COUNTER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el contador CEI se deposita en un bloque de
datos propio (instancia individual), o bien como variable local (multiinstancia) en la interfaz del
bloque. Si crea un bloque de datos propio, lo encontrará bajo "Bloques de programa > Bloques
de sistema" en la carpeta "Recursos de programa", en el árbol del proyecto. Encontrará más
información al respecto en "Consulte también".
El sistema operativo inicializa las instancias de la instrucción "Contador ascendente descendente" cuando se realiza un arranque en frío. Si deben inicializarse instancias tras un

5084

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
rearranque completo (en caliente), las instancias por inicializar deben llamarse en un OB de
arranque con los siguientes valores de parámetros:
● Si se utiliza como contador ascendente, el valor del parámetro R debe ponerse a "1".
● Si se utiliza como contador descendente, el valor del parámetro LD debe ponerse a "1". En
el parámetro PV debe indicarse en este caso el valor inicial deseado del parámetro CV.
Si un bloque diferente contiene instancias de la instrucción "Contador ascendente descendente", estas pueden resetearse p. ej. inicializando el bloque de nivel superior.
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
Para poder ejecutar la instrucción "Contador ascendente - descendente" se requiere una
operación lógica precedente. Se puede colocar dentro o al final del segmento.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Contador ascendente descendente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CU

Input

BOOL

I, Q, M, D, L

Entrada de contaje ascen‐
dente

CD

Input

BOOL

I, Q, M, D, L

Entrada de contaje descen‐
dente

R

Input

BOOL

I, Q, M, D, L, T, C,
P

Entrada de reset

LD

Input

BOOL

I, Q, M, D, L, T, C,
P

Entrada de carga

PV

Input

INT

I, Q, M, D, L, P o
constante

Valor con el que se activa la
salida QU. / Valor al que se
pone la salida CV cuando LD
= 1.

QU

Output

BOOL

I, Q, M, D, L

Estado del contador ascen‐
dente

QD

Output

BOOL

I, Q, M, D, L

Estado del contador descen‐
dente

CV

Output

INT

I, Q, M, D, L, P

Valor de contaje actual

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5085

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&78'B'%ಯ
&78'
,17
ಯ7DJ,QB&8ಯ

&8

ಯ7DJ,QB&'ಯ

&'

ಯ7DJ,QB5ಯ

5

4'

ಯ7DJ2XWB4'ಯ

ಯ7DJ,QB/'ಯ

/'

&9

ಯ7DJB&9ಯ

ಯ7DJB39ಯ

39

48

ಯ7DJ2XWB48ಯ

Si el estado lógico de la entrada "TagIn_CU" o "TagIn_CD" cambia de "0" a "1" (flanco de señal
ascendente), se ejecuta la instrucción "Contador ascendente - descendente". Cuando se
detecta un flanco de señal ascendente en la entrada "TagIn_CU", el valor de contaje actual se
incrementa en uno y se deposita en la salida "Tag_CV". Si se detecta un flanco de señal
ascendente en la entrada "TagIn_CD", el valor de contaje se decrementa en uno y se deposita
en la salida "Tag_CV". Si se detecta un flanco de señal ascendente en la entrada CU, el valor
de contaje se sigue incrementando hasta alcanzar el valor límite superior (INT = 32767).
Cuando se detecta un flanco de señal ascendente en la entrada CD, el valor de contaje se
decrementa hasta alcanzar el valor límite inferior INT = -32768.
La salida "TagOut_QU" devuelve el estado lógico "1" mientras el valor actual de contaje sea
mayor o igual al valor de la entrada "Tag_PV". En todos los demás casos, la salida
"TagOut_QU" devuelve el estado lógico "0".
La salida "TagOut_QD" devuelve el estado lógico "1" mientras el valor de contaje actual sea
menor o igual a cero. En todos los demás casos, la salida "TagOut_QD" devuelve el estado
lógico "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Ejemplos de programación FUP (Página 8050)
Principios básicos de FUP (Página 8005)

5086

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Contadores SIMATIC
S_CU: Parametrizar e incrementar contador
Descripción
La instrucción "Parametrizar e incrementar contador" incrementa el valor de un contador.
Cuando el estado lógico de la entrada CU cambia de "0" a "1" (flanco de señal ascendente), el
valor de contaje actual se incrementa en uno. El valor de contaje actual se emite en formato
hexadecimal en la salida CV y codificado en BCD en la salida CV_BCD. El valor de contaje
sigue incrementando hasta alcanzar el límite de "999". Una vez alcanzado el valor límite, el
valor de contaje no se incrementa al detectarse un flanco de señal ascendente.
Cuando el estado lógico de la entrada S cambia de "0" a "1", el valor de contaje adopta el valor
del parámetro PV. Si el contador se activa y el RLO de la entrada CU es "1", el contador cuenta
una única vez en el ciclo siguiente aunque no se detecte ningún cambio de flanco.
El valor de contaje se pone a cero si el estado lógico de la entrada R cambia a "1". Mientras la
entrada R tenga el estado lógico "1", el estado lógico de las entradas CU y S no tendrá ningún
efecto sobre el valor de contaje.
El estado lógico en la salida Q es "1" si el valor de contaje es superior a cero. Si el valor de
contaje es igual a cero, la salida Q devuelve el estado lógico "0".
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
La instrucción "Parametrizar e incrementar contador" requiere una operación lógica
precedente para la evaluación de flancos y se puede colocar dentro o en el extremo del
segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar e incrementar
contador":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Contador>

InOut

COUNTER

C

Contador de la instrucción
El número de contadores de‐
pende de la CPU.

CU

Input

BOOL

I, Q, M, D, L, T, C

Entrada de contaje ascen‐
dente

S

Input

BOOL

I, Q, M, D, L, T, C

Entrada para preajustar el
contador

PV

Input

WORD

I, Q, M, D, L, P

Valor de contaje predetermi‐
nado (C#0 a C#999)

R

Input

BOOL

I, Q, M, D, L, T, C

Entrada de reset

CV

Output

WORD, S5TIME,
DATE

I, Q, M, D, L, P

Valor de contaje actual (he‐
xadecimal)

Programación del PLC
Manual de programación y manejo, 11/2019

5087

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CV_BCD

Output

WORD, S5TIME,
DATE

I, Q, M, D, L, P

Valor de contaje actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&RXQWHUBಯ
6B&8
ಯ7DJ,QBಯ

&8

ಯ7DJ,QBಯ

6

ಯ7DJ3UHVHW9DOXHಯ
ಯ7DJ,QBಯ

39
5

&9

ಯ7DJ9DOXHBಯ

&9B%&'

ಯ7DJ9DOXHBಯ

ಯ7DJ2XWಯ

4

Cuando el estado lógico de la entrada "TagIn_1" cambia de "0" a "1" (flanco de señal
ascendente) y el valor de contaje actual es menor que "999", este valor se incrementará en
uno. Si el estado lógico de la entrada "TagIn_2" cambia de "0" a "1", el valor de contaje adopta
el valor del operando "TagPresetValue". El valor de contaje se pone a "0" si el operando
"TagIn_3" tiene el estado lógico "1".
El valor de contaje actual se memoriza en formato hexadecimal en el operando "TagValue_1"
y codificado en BCD en el operando "TagValue_2".
La salida "TagOut" devuelve el estado lógico "1" mientras el valor de contaje actual sea
diferente a "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

5088

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

S_CD: Parametrizar y decrementar contador
Descripción
La instrucción "Parametrizar y decrementar contador" reduce el valor de un contador. Cuando
el estado lógico de la entrada CD cambia de "0" a "1" (flanco de señal ascendente), el valor de
contaje actual se decrementa en uno. El valor de contaje actual se emite en formato
hexadecimal en la salida CV y codificado en BCD en la salida CV_BCD. El valor de contaje
sigue decrementando hasta alcanzar el límite inferior "0". Una vez alcanzado el valor límite
inferior, el valor de contaje no se decrementa más al detectarse un flanco de señal ascendente.
Cuando el estado lógico de la entrada S cambia de "0" a "1", el valor de contaje adopta el valor
del parámetro PV. Si el contador se activa y el RLO de la entrada CD es "1", el contador cuenta
una única vez en el ciclo siguiente aunque no se detecte ningún cambio de flanco.
El valor de contaje se pone a cero si el estado lógico de la entrada R cambia a "1". Mientras la
entrada R tenga el estado lógico "1", el estado lógico de las entradas CD y S no tiene ningún
efecto sobre el valor de contaje.
El estado lógico en la salida Q es "1" si el valor de contaje es superior a cero. Si el valor de
contaje es igual a cero, la salida Q devuelve el estado lógico "0".
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
La instrucción "Parametrizar y decrementar contador" requiere una operación lógica
precedente para la evaluación de flancos y se puede colocar dentro o en el extremo del
segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y decrementar
contador":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Contador>

InOut

COUNTER

C

Contador de la instrucción
El número de contadores de‐
pende de la CPU.

CD

Input

BOOL

I, Q, M, D, L

Entrada de contaje descen‐
dente

S

Input

BOOL

I, Q, M, D, L, T, C

Entrada para preajustar el
contador

PV

Input

WORD

I, Q, M, D, L, P

Valor de contaje predetermi‐
nado (C#0 a C#999)

R

Input

BOOL

I, Q, M, D, L, T, C

Entrada de reset

CV

Output

WORD, S5TIME,
DATE

I, Q, M, D, L, P

Valor de contaje actual (he‐
xadecimal)

CV_BCD

Output

WORD, S5TIME,
DATE

I, Q, M, D, L, P

Valor de contaje actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

Programación del PLC
Manual de programación y manejo, 11/2019

5089

Instrucciones
4.2 Instrucciones
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&RXQWHUBಯ
6B&'
ಯ7DJ,QBಯ

&'

ಯ7DJ,QBಯ

6

ಯ7DJ3UHVHW9DOXHಯ
ಯ7DJ,QBಯ

39
5

&9

ಯ7DJ9DOXHBಯ

&9B%&'

ಯ7DJ9DOXHBಯ

ಯ7DJ2XWಯ

4

Cuando el estado lógico de la entrada "TagIn_1" cambia de "0" a "1" (flanco de señal
ascendente) y el valor de contaje actual es mayor que "0", este valor se decrementará en uno.
Si el estado lógico de la entrada "TagIn_2" cambia de "0" a "1", el valor de contaje adopta el
valor del operando "TagPresetValue". El valor de contaje se pone a "0" si el operando
"TagIn_3" tiene el estado lógico "1".
El valor de contaje actual se memoriza en formato hexadecimal en el operando "TagValue_1"
y codificado en BCD en el operando "TagValue_2".
La salida "TagOut" devuelve el estado lógico "1" mientras el valor de contaje actual sea
diferente a "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

S_CUD: Parametrizar e incrementar/decrementar contador
Descripción
La instrucción "Parametrizar e incrementar/decrementar contador" incrementa y reduce el
valor de un contador. Cuando el estado lógico de la entrada CU cambia de "0" a "1" (flanco de
señal ascendente), el valor de contaje actual se incrementa en uno. Cuando el estado lógico
de la entrada CD cambia de "0" a "1" (flanco de señal ascendente), el valor de contaje se
decrementa en uno. El valor de contaje actual se emite en formato hexadecimal en la salida CV
y codificado en BCD en la salida CV_BCD. Si en un ciclo del programa se detecta un flanco de
señal ascendente en las entradas CU y CD, el valor de contaje no se modifica.

5090

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
El valor de contaje sigue incrementando hasta alcanzar el límite superior "999". Una vez
alcanzado el valor límite superior, el valor de contaje no se incrementa al detectarse un flanco
de señal ascendente. Cuando se alcanza el valor límite inferior "0", no se decrementa más el
valor de contaje.
Cuando el estado lógico de la entrada S cambia de "0" a "1", el valor de contaje adopta el valor
del parámetro PV. Si se inicializa el contador y el RLO en las entradas CU y CD es "1", el
contador solo cuenta una vez en el próximo ciclo aunque no se detecte ningún cambio de
flanco.
El valor de contaje se pone a cero si el estado lógico de la entrada R cambia a "1". Mientras la
entrada R tenga el estado lógico "1", el estado lógico de las entradas CU, CD y S no tendrá
ningún efecto sobre el valor de contaje.
El estado lógico en la salida Q es "1" si el valor de contaje es superior a cero. Si el valor de
contaje es igual a cero, la salida Q devuelve el estado lógico "0".
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
La instrucción "Parametrizar e incrementar/decrementar contador" requiere una operación
lógica precedente para la evaluación de flancos y se puede colocar dentro o en el extremo del
segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar e incrementar/
decrementar contador":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Contador>

InOut

COUNTER

C

Contador de la instrucción
El número de contadores de‐
pende de la CPU.

CU

Input

BOOL

I, Q, M, D, L, T, C

Entrada de contaje ascen‐
dente

CD

Input

BOOL

I, Q, M, D, L, T, C

Entrada de contaje descen‐
dente

S

Input

BOOL

I, Q, M, D, L, T, C

Entrada para preajustar el
contador

PV

Input

WORD

I, Q, M, D, L, P

Valor de contaje predetermi‐
nado (C#0 a C#999)

R

Input

BOOL

I, Q, M, D, L, T, C

Entrada de reset

CV

Output

WORD, S5TIME,
DATE

I, Q, M, D, L, P

Valor de contaje actual (he‐
xadecimal)

CV_BCD

Output

WORD, S5TIME,
DATE

I, Q, M, D, L, P

Valor de contaje actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5091

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&RXQWHUBಯ
6B&8'
ಯ7DJ,QBಯ

&8

ಯ7DJ,QBಯ

&'

ಯ7DJ,QBಯ

6

ಯ7DJ3UHVHW9DOXHಯ
ಯ7DJ,QBಯ

39
5

&9

ಯ7DJ9DOXHBಯ

&9B%&'

ಯ7DJ9DOXHBಯ

ಯ7DJ2XWಯ

4

Si el estado lógico de la entrada "TagIn_1" o "TagIn_2" cambia de "0" a "1" (flanco de señal
ascendente), se ejecuta la instrucción "Parametrizar e incrementar/decrementar contador".
Cuando se detecta un flanco de señal ascendente en la entrada "TagIn_1" y el valor de contaje
actual es menor que "999", este valor se incrementará en uno. Cuando se detecta un flanco de
señal ascendente en la entrada "TagIn_2" y el valor de contaje actual es mayor que "0", este
valor se decrementará en uno.
Si el estado lógico de la entrada "TagIn_3" cambia de "0" a "1", el valor de contaje adopta el
valor del operando "TagPresetValue". El valor de contaje se pone a "0" si el operando
"TagIn_4" tiene el estado lógico "1".
El valor de contaje actual se memoriza en formato hexadecimal en el operando "TagValue_1"
y codificado en BCD en el operando "TagValue_2".
La salida "TagOut" devuelve el estado lógico "1" mientras el valor de contaje actual sea
diferente a "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

SC: Poner contador al valor inicial
Descripción
Con la instrucción "Poner contador al valor inicial" se puede ajustar el valor de un contador. La
instrucción se ejecuta cuando el resultado lógico (RLO) de la entrada de arranque de la
instrucción cambia de "0" a "1". Si se ejecuta la instrucción, el contador se pone al valor de
contaje indicado.

5092

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La instrucción "Poner contador al valor inicial" requiere una operación lógica precedente para
la evaluación de flancos y sólo se puede colocar en el margen derecho del segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Poner contador al valor inicial":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, T, C, D, L

Entrada de arranque

PV

Input

WORD

I, Q, M, D, L o
constante

Valor con el que se preajusta
el contador en formato BCD.

<Contador>

InOut/Input

COUNTER

C

(C#0 a C#999)
Contador que se preajusta.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&RXQWHUBಯ

ಯ7DJ,Qಯ
&

6&
&9

Cuando el estado lógico del operando "TagIn" cambia de "0" a "1", el contador "Counter_1" se
pone a "100".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

CU: Contador ascendente
Descripción
La instrucción "Contador ascendente" aumenta en uno el valor del contador indicado cuando
hay un flanco de señal ascendente en la entrada de arranque. El valor de contaje puede seguir
incrementándose hasta alcanzar el límite de "999". Una vez alcanzado el valor límite, el valor
de contaje no se incrementa al detectarse un flanco de señal ascendente.
La instrucción "Contador ascendente" requiere una operación lógica precedente para la
evaluación de flancos y sólo se puede colocar en el margen derecho del segmento.

Programación del PLC
Manual de programación y manejo, 11/2019

5093

Instrucciones
4.2 Instrucciones

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Contador ascendente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, T, C, D, L

Entrada de arranque

<Contador>

InOut/Input

COUNTER

C

Contador cuyo valor se au‐
menta.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
ಯ&RXQWHUBಯ
6&

ಯ7DJ,QBಯ
&

39

6HJPHQWR
ಯ&RXQWHUBಯ
ಯ7DJ,QBಯ

&8

6HJPHQWR
ಯ&RXQWHUBಯ
ಯ7DJ,QBಯ

5

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1" (señal de flanco
ascendente), el contador "Counter_1" se ajusta en el valor "100".
El valor del contador "Counter_1" se incrementa en uno si el estado lógico del operando
"TagIn_2" cambia de "0" a "1".
Si el estado lógico del operando "TagIn_3" es "1", se pone a "0" el valor del contador
"Counter_1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

5094

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

CD: Contador descendente
Descripción
La instrucción "Contador descendente" reduce en uno el valor del contador indicado cuando
hay un flanco de señal ascendente en la entrada de arranque. El valor de contaje puede seguir
decrementándose hasta alcanzar el límite "0". Una vez alcanzado el valor límite, el valor de
contaje no se modifica al detectarse un flanco de señal ascendente.
La instrucción "Contador descendente" requiere una operación lógica precedente para la
evaluación de flancos y sólo se puede colocar en el margen derecho del segmento.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Contador descendente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, T, C, D, L

Entrada de arranque

<Contador>

InOut/Input

COUNTER

C

Contador cuyo valor se de‐
crementa.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
ಯ&RXQWHUBಯ
6&

ಯ7DJ,QBಯ
&

39

6HJPHQWR
ಯ&RXQWHUBಯ
ಯ7DJ,QBಯ

&'

6HJPHQWR
ಯ&RXQWHUBಯ
ಯ7DJ,QBಯ

5

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1" (señal de flanco
ascendente), el contador "Counter_1" se ajusta en el valor "100".

Programación del PLC
Manual de programación y manejo, 11/2019

5095

Instrucciones
4.2 Instrucciones
El valor del contador "Counter_1" se decrementa en uno si el estado lógico del operando
"TagIn_2" cambia de "0" a "1".
Si el estado lógico del operando "TagIn_3" es "1", se pone a "0" el valor del contador
"Counter_1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

Comparación
CMP ==: Igual
Descripción
La instrucción "Igual" consulta si el valor de la entrada IN1 es igual al valor de la entrada IN2.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0".
Nota
Comparación de números en coma flotante
Si desea comparar tipos de datos REAL o LREAL, utilice en lugar de la instrucción "CMP ==:
Igual" la instrucción "IN_RANGE: Valor dentro del rango".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Igual":
Parámetro

Declaración

Tipo de datos

IN1

Input

Secuencias de
I, Q, M, D, L, P o
bits, enteros, nú‐
constante
meros en coma flo‐
tante

Área de memoria

Descripción
Primer valor de comparación

IN2

Input

I, Q, M, D, L, P o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante

Segundo valor de compara‐
ción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5096

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
,17
ಯ7DJB9DOXHಯ
ಯ7DJB9DOXHಯ

,1
,1

ಯ7DJ,QBಯ

ಯ7DJ2XWಯ
6

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● El operando "TagIn_1" devuelve el estado lógico "1".
● Se cumple la condición de la instrucción de comparación cuando "Tag_Value1" =
"Tag_Value2".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones de comparación (Página 192)
Principios básicos de la palabra de estado (Página 184)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

CMP <>: Diferente
Descripción
La instrucción "Diferente" consulta si el valor de la entrada IN1 es distinto al valor de la entrada
IN2.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0".

Programación del PLC
Manual de programación y manejo, 11/2019

5097

Instrucciones
4.2 Instrucciones

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Diferente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN1

Input

I, Q, M, D, L, P o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante

Primer valor de comparación

IN2

Input

I, Q, M, D, L, P o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante

Segundo valor de compara‐
ción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
!
,17
ಯ7DJB9DOXHಯ
ಯ7DJB9DOXHಯ

,1
,1

ಯ7DJ,QBಯ

ಯ7DJ2XWಯ
6

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● El operando "TagIn_1" devuelve el estado lógico "1".
● Se cumple la condición de la instrucción de comparación cuando "Tag_Value1" <>
"Tag_Value2".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones de comparación (Página 192)
Principios básicos de la palabra de estado (Página 184)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

5098

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

CMP >=: Mayor o igual
Descripción
La instrucción "Mayor o igual" consulta si el valor de la entrada IN1 es mayor o igual que el valor
de la entrada IN2. Ambos valores de comparación deben ser del mismo tipo de datos.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Mayor o igual":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Primer valor de comparación

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Segundo valor de compara‐
ción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
!
,17
ಯ7DJB9DOXHಯ
ಯ7DJB9DOXHಯ

,1
,1

ಯ7DJ,QBಯ

ಯ7DJ2XWಯ
6

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● El operando "TagIn_1" devuelve el estado lógico "1".
● Se cumple la condición de la instrucción de comparación cuando "Tag_Value1" >=
"Tag_Value2".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones de comparación (Página 192)
Principios básicos de la palabra de estado (Página 184)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)

Programación del PLC
Manual de programación y manejo, 11/2019

5099

Instrucciones
4.2 Instrucciones
Cablear operandos en instrucciones FUP (Página 8041)
Ejemplos de programación FUP (Página 8050)

CMP <=: Menor o igual
Descripción
La instrucción "Menor o igual" consulta si el valor de la entrada IN1 es menor o igual que el valor
de la entrada IN2. Ambos valores de comparación deben ser del mismo tipo de datos.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Menor o igual":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Primer valor de comparación

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Segundo valor de compara‐
ción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

,17
ಯ7DJB9DOXHಯ
ಯ7DJB9DOXHಯ

,1
,1

ಯ7DJ,QBಯ

ಯ7DJ2XWಯ
6

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● El operando "TagIn_1" devuelve el estado lógico "1".
● Se cumple la condición de la instrucción de comparación cuando "Tag_Value1" <=
"Tag_Value2".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones de comparación (Página 192)
Principios básicos de la palabra de estado (Página 184)

5100

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

CMP >: Mayor
Descripción
La instrucción "Mayor" consulta si el valor de la entrada IN1 es mayor que el valor de la entrada
IN2. Ambos valores de comparación deben ser del mismo tipo de datos.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Mayor":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Primer valor de comparación

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Segundo valor de compara‐
ción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
!
,17
ಯ7DJB9DOXHಯ
ಯ7DJB9DOXHಯ

,1
,1

ಯ7DJ,QBಯ

ಯ7DJ2XWಯ
6

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● El operando "TagIn_1" devuelve el estado lógico "1".
● Se cumple la condición de la instrucción de comparación cuando "Tag_Value1" >
"Tag_Value2".

Programación del PLC
Manual de programación y manejo, 11/2019

5101

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones de comparación (Página 192)
Principios básicos de la palabra de estado (Página 184)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

CMP <: Menor
Descripción
La instrucción "Menor" consulta si el valor de la entrada IN1 es menor que el valor de la entrada
IN2. Ambos valores de comparación deben ser del mismo tipo de datos.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Menor":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Primer valor de comparación

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Segundo valor de compara‐
ción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

,17
ಯ7DJB9DOXHಯ
ಯ7DJB9DOXHಯ

5102

,1
,1

ಯ7DJ,QBಯ

ಯ7DJ2XWಯ
6

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● El operando "TagIn_1" devuelve el estado lógico "1".
● Se cumple la condición de la instrucción de comparación cuando "Tag_Value1" <
"Tag_Value2".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones de comparación (Página 192)
Principios básicos de la palabra de estado (Página 184)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)
Ejemplos de programación FUP (Página 8050)

Funciones matemáticas
ADD: Sumar
Descripción
La instrucción "Sumar" permite sumar el valor de la entrada IN1 al valor de la entrada IN2 y
consultar la suma en la salida OUT (OUT := IN1+IN2).
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El resultado de la instrucción está fuera del rango permitido para el tipo de datos indicado
en la salida OUT.
● Un número en coma flotante tiene un valor no válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Sumar":
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Primer sumando

Programación del PLC
Manual de programación y manejo, 11/2019

5103

Instrucciones
4.2 Instrucciones
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Segundo sumando

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Suma

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
$''
,17

ಯ7DJ,Qಯ

(1

ಯ7DJB9DOXHಯ

,1

287

ಯ7DJB9DOXHಯ

,1

(12

ಯ7DJB5HVXOWಯ
ಯ7DJ2XWಯ

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El valor del
operando "Tag_Value1" se suma al valor del operando "Tag_Value2". El resultado de la suma
se almacena en el operando "Tag_Result". Si no ocurren errores al ejecutar la instrucción, la
salida de habilitación ENO devuelve el estado lógico "1" y se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Ejemplos de programación FUP (Página 8050)
Principios básicos de FUP (Página 8005)

SUB: Restar
Descripción
La instrucción "Restar" permite restar el valor de la entrada IN2 al valor de la entrada IN1 y
consultar el resultado en la salida OUT (OUT := IN1-IN2).

5104

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El resultado de la instrucción está fuera del rango permitido para el tipo de datos indicado
en la salida OUT.
● Un número en coma flotante tiene un valor no válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Restar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Minuendo

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Sustraendo

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Diferencia

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
68%
,17

ಯ7DJ,Qಯ

(1

ಯ7DJB9DOXHಯ

,1

287

ಯ7DJB9DOXHಯ

,1

(12

ಯ7DJB5HVXOWಯ
ಯ7DJ2XWಯ

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El valor del
operando "Tag_Value2" se resta del valor del operando "Tag_Value1". El resultado de la resta
se almacena en el operando "Tag_Result". Si no ocurren errores al ejecutar la instrucción, la
salida de habilitación ENO devuelve el estado lógico "1" y se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar los bits de estado en instrucciones con números enteros (Página 190)

Programación del PLC
Manual de programación y manejo, 11/2019

5105

Instrucciones
4.2 Instrucciones
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de FUP (Página 8005)

MUL: Multiplicar
Descripción
La instrucción "Multiplicar" permite multiplicar el valor de la entrada IN1 con el valor de la
entrada IN2 y consultar el producto en la salida OUT (OUT := IN1*IN2).
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El resultado está fuera del rango permitido para el tipo de datos indicado en la salida OUT.
● Un número en coma flotante tiene un valor no válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Multiplicar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Multiplicador

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Multiplicando

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Producto

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
08/
5($/

ಯ7DJ,Qಯ

(1

ಯ7DJB9DOXHಯ

,1

287

ಯ7DJB9DOXHಯ

,1

(12

ಯ7DJB5HVXOWಯ
ಯ7DJ2XWಯ

5106

6

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El valor del
operando "Tag_Value1" se multiplica por el valor del operando "Tag_Value2". El resultado de
la multiplicación se almacena en el operando "Tag_Result". Si no ocurren errores al ejecutar
la instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y se activa la salida
"TagOut".

Consulte también
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Vista general de los tipos de datos válidos (Página 241)
Ejemplos de programación FUP (Página 8050)
Principios básicos de FUP (Página 8005)

DIV: Dividir
Descripción
La instrucción "Dividir" divide el valor de la entrada IN1 por el valor de la entrada IN2 y consultar
el cociente en la salida OUT (OUT := IN1/IN2).
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El resultado de la instrucción está fuera del rango permitido para el tipo de datos indicado
en la salida OUT.
● Un número en coma flotante tiene un valor no válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Dividir":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Dividendo

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Divisor

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Valor del cociente

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5107

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
',9
5($/

ಯ7DJ,Qಯ

(1

ಯ7DJB9DOXHಯ

,1

287

ಯ7DJB9DOXHಯ

,1

(12

ಯ7DJB5HVXOWಯ
ಯ7DJ2XWಯ
6

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Dividir".
El valor del operando "Tag_Value1" se divide por el valor del operando "Tag_Value2". El
resultado de la división se almacena en el operando "Tag_Result". Si no se producen errores
al ejecutar la instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y se activa
la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Ejemplos de programación FUP (Página 8050)
Principios básicos de FUP (Página 8005)

MOD: Obtener resto de división
Descripción
La instrucción "Obtener resto de división" permite dividir el valor de la entrada IN1 por el valor
de la entrada IN2 y consultar el resto de la división en la salida OUT.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Obtener resto de división":
Parámetro

5108

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

DINT

I, Q, M, D, L, P o
constante

Dividendo

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN2

Input

DINT

I, Q, M, D, L, P o
constante

Divisor

OUT

Output

DINT

I, Q, M, D, L, P

Resto de división

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
02'
',17

ಯ7DJ,Qಯ

(1

ಯ7DJB9DOXHಯ

,1

287

ಯ7DJB9DOXHಯ

,1

(12

ಯ7DJB5HVXOWಯ
ಯ7DJ2XWಯ
6

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El valor del
operando "Tag_Value1" se divide por el valor del operando "Tag_Value2". El resto de la
división se almacena en el operando "Tag_Result". Si no ocurren errores al ejecutar la
instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y se activa la salida
"TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de FUP (Página 8005)

NEG: Generar complemento a dos
Descripción
La instrucción "Generar complemento a dos" cambia el signo del valor de la entrada IN y
consultar el resultado en la salida OUT. Por ejemplo, si la entrada IN tiene un valor positivo, se
deposita el equivalente negativo de este valor en la salida OUT.

Programación del PLC
Manual de programación y manejo, 11/2019

5109

Instrucciones
4.2 Instrucciones
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El resultado de la instrucción está fuera del rango permitido para el tipo de datos indicado
en la salida OUT (sólo válido para números enteros).

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Generar complemento a dos":
Parámetro

Declaración

Tipo de datos

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Complemento a dos del valor
de entrada

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
1(*
5($/
ಯ7DJ,Qಯ
ಯ7DJ,QB9DOXHಯ

(1

287

,1

(12

ಯ7DJ2XWB9DOXHಯ
ಯ7DJ2XWಯ

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Generar
complemento a dos". Se invierte el signo del valor de la entrada "TagIn_Value" y el resultado
se deposita en la salida "TagOut_Value". Si no se producen errores al ejecutar la instrucción,
la salida de habilitación ENO devuelve el estado lógico "1" y se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de FUP (Página 8005)

5110

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

ABS: Calcular valor absoluto
Descripción
La instrucción "Calcular valor absoluto" permite calcular el valor absoluto del valor indicado en
la entrada IN. El resultado de la instrucción se emite en la salida OUT y se puede consultar allí.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor absoluto":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Valor absoluto del valor de
entrada

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
$%6
5($/
ಯ7DJ,Qಯ
ಯ7DJ,QB9DOXHಯ

(1

287

,1

(12

ಯ7DJ2XWB9DOXHಯ
ಯ7DJ2XWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

-6,234

OUT

TagOut_Value

6,234

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
calcula el valor absoluto del valor de la entrada "TagIn_Value" y deposita el resultado en la
salida "TagOut_Value". Si no ocurren errores al ejecutar la instrucción, se activa la salida
"TagOut".

Programación del PLC
Manual de programación y manejo, 11/2019

5111

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

MIN: Determinar mínimo
Descripción
La instrucción "Determinar mínimo" compara los valores de las entradas IN1, IN2 e IN3 y
escribe el valor menor en la salida OUT. Para poder ejecutar la instrucción, es imprescindible
que las variables de todas las entradas sean del mismo tipo de datos.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Las variables indicadas no son del mismo tipo de datos.
● Un número en coma flotante tiene un valor no válido.
Nota
En caso de que la verificación CEI esté desactivada, en los parámetros de entrada se permiten
únicamente los tipos de datos INT, DINT y REAL. Si utiliza los parámetros de entrada de los
tipos WORD o DWORD, las instrucciones devolverán un resultado no definido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Determinar mínimo":
Parámetro

5112

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Primer valor de entrada

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Segundo valor de entrada

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN3

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Tercer valor de entrada

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Resultado

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ
ಯ7DJ,QBಯ

0,1
,17
(1

ಯ7DJ,QB9DOXHಯ

,1

ಯ7DJ,QB9DOXHಯ

,1

287

ಯ7DJ,QB9DOXHಯ

,1

(12

ಯ7DJ2XWB9DOXHಯ

ಯ7DJ2XWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN1

TagIn_Value1

12222

IN2

TagIn_Value2

14444

IN3

TagIn_Value3

13333

OUT

TagOut_Value

12222

Si los operandos "TagIn_1" y "TagIn_2" tienen el estado lógico "1", se ejecuta la instrucción. La
instrucción compara los valores de los operandos indicados y copia el valor menor
("TagIn_Value1") en la salida "TagOut_Value". Si no ocurren errores al ejecutar la instrucción,
se activa la salida "TagOut".

Consulte también
Quitar entradas y salidas (Página 7979)
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)

Programación del PLC
Manual de programación y manejo, 11/2019

5113

Instrucciones
4.2 Instrucciones
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

MAX: Determinar máximo
Descripción
La instrucción "Determinar máximo" compara los valores de las entradas IN1, IN2 e IN3 y
escribe el valor mayor en la salida OUT. Para poder ejecutar la instrucción, es imprescindible
que las variables de todas las entradas sean del mismo tipo de datos.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Las variables indicadas no son del mismo tipo de datos.
● Un número en coma flotante tiene un valor no válido.
Nota
En caso de que la verificación CEI esté desactivada, en los parámetros de entrada se permiten
únicamente los tipos de datos INT, DINT y REAL. Si utiliza los parámetros de entrada de los
tipos WORD o DWORD, las instrucciones devolverán un resultado no definido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Determinar máximo":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Primer valor de entrada

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Segundo valor de entrada

IN3

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Tercer valor de entrada

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Resultado

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5114

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ
ಯ7DJ,QBಯ

0$;
,17
(1

ಯ7DJ,QB9DOXHಯ

,1

ಯ7DJ,QB9DOXHಯ

,1

287

ಯ7DJ,QB9DOXHಯ

,1

(12

ಯ7DJ2XWB9DOXHಯ

ಯ7DJ2XWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN1

TagIn_Value1

12222

IN2

TagIn_Value2

14444

IN3

TagIn_Value3

13333

OUT

TagOut_Value

14444

Si los operandos "TagIn_1" y "TagIn_2" tienen el estado lógico "1", se ejecuta la instrucción. La
instrucción compara los valores de los operandos indicados y copia el valor mayor
("TagIn_Value2") en la salida "TagOut_Value". Si no ocurren errores al ejecutar la instrucción,
se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

Programación del PLC
Manual de programación y manejo, 11/2019

5115

Instrucciones
4.2 Instrucciones

LIMIT: Ajustar valor límite
Descripción
La instrucción "Ajustar valor límite" limita el valor de la entrada IN a los valores de las entradas
MN y MX. Si el valor de la entrada IN cumple la condición MN <= IN <= MX, se copia en la salida
OUT. Si no se cumple la condición y el valor de entrada IN es menor que el límite inferior MN,
la salida OUT adopta el valor de la entrada MN. Si el límite superior MX se rebasa por exceso,
la salida OUT adopta el valor de la entrada MX.
Si el valor de la entrada MN es mayor que el de la entrada MX, el resultado no se define y la
salida de habilitación ENO es "0".
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Las variables indicadas no son del mismo tipo de datos.
● Un operando tiene un valor no válido.
● El valor de la entrada MN es mayor que el valor de la entrada MX.
Nota
En caso de que la verificación CEI esté desactivada, en los parámetros de entrada se permiten
únicamente los tipos de datos INT, DINT y REAL. Si utiliza los parámetros de entrada de los
tipos WORD o DWORD, las instrucciones devolverán un resultado no definido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Ajustar valor límite":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

MN

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Límite inferior

IN

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Valor de entrada

MX

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Límite superior

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Resultado

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5116

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
/,0,7

ಯ7DJ,QBಯ

,17
ಯ7DJ,QBಯ
ಯ7DJB01ಯ
ಯ7DJB9DOXHಯ
ಯ7DJB0;ಯ

(1

287

01

(12

ಯ7DJB5HVXOWಯ
ಯ7DJ2XWಯ

,1
0;

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

MN

Tag_MN

12000

IN

Tag_Value

8000

MX

Tag_MX

16000

OUT

Tag_Result

12000

Si los operandos "TagIn_1" y "TagIn_2" tienen el estado lógico "1", se ejecuta la instrucción. El
valor del operando "Tag_Value" se compara con los valores de los operandos "Tag_MN" y
"Tag_MX". Puesto que el valor del operando "Tag_Value" es menor que el valor límite inferior,
el valor del operando "Tag_MN" se copia en la salida "Tag_Result". Si no ocurren errores al
ejecutar la instrucción, se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

Programación del PLC
Manual de programación y manejo, 11/2019

5117

Instrucciones
4.2 Instrucciones

SQR: Calcular cuadrado
Descripción
La instrucción "Calcular cuadrado" permite elevar al cuadrado el valor de la entrada IN
correspondiente a un número en coma flotante y escribir el resultado en la salida OUT.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular cuadrado":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Cuadrado del valor de entra‐
da

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
645
5($/
ಯ7DJ,Qಯ

(1

287

,1

(12

ಯ7DJB5HVXOWಯ
ಯ7DJ2XWಯ

ಯ7DJB9DOXHಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_Value

5.0

OUT

Tag_Result

25.0

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
eleva al cuadrado el valor del operando "Tag_Value" y deposita el resultado en la salida
"Tag_Result". Si no ocurren errores al ejecutar la instrucción, se activa la salida "TagOut".

5118

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

SQRT: Calcular raíz cuadrada
Descripción
La instrucción "Calcular raíz cuadrada" permite extraer la raíz cuadrada al valor de la entrada
IN correspondiente a un número en coma flotante y escribir el resultado en la salida OUT. La
instrucción da un resultado positivo si el valor de entrada es mayor que cero. En los valores de
entrada menores que cero, la salida OUT devuelve un número en coma flotante no válido. Si
el valor de la entrada IN es "0", el resultado también es "0".
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.
● El valor de la entrada IN es negativo.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular raíz cuadrada":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Raíz cuadrada del valor de
entrada

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5119

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6457
5($/
ಯ7DJ,Qಯ

(1

287

,1

(12

ಯ7DJB5HVXOWಯ
ಯ7DJ2XWಯ

ಯ7DJB9DOXHಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_Value

25.0

OUT

Tag_Result

5.0

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
extrae la raíz cuadrada del valor del operando "Tag_Value" y deposita el resultado en la salida
"Tag_Result". Si no ocurren errores al ejecutar la instrucción, se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

LN: Calcular logaritmo natural
Descripción
La instrucción "Calcular logaritmo natural" permite calcular el logaritmo natural en base e (e =
2718282) del valor de la entrada IN. El resultado se deposita en la salida OUT y se puede
consultar allí. La instrucción da un resultado positivo si el valor de entrada es mayor que cero.
En los valores de entrada menores que cero, la salida OUT devuelve un número en coma
flotante no válido.

5120

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.
● El valor de la entrada IN es negativo.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular logaritmo natural":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Logaritmo natural del valor
de entrada

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
/1
5($/
ಯ7DJ,Qಯ

(1

287

,1

(12

ಯ7DJB5HVXOWಯ
ಯ7DJ2XWಯ

ಯ7DJB9DOXHಯ

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
calcula el logaritmo natural del valor de la entrada "Tag_Value" y deposita el resultado en la
salida "Tag_Result". Si no ocurren errores al ejecutar la instrucción, se activa la salida
"TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)

Programación del PLC
Manual de programación y manejo, 11/2019

5121

Instrucciones
4.2 Instrucciones
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

EXP: Calcular valor exponencial
Descripción
La instrucción "Calcular valor exponencial" permite calcular la potencia en base e (e =
2,718282) del valor indicado en la entrada IN. El resultado se emite en la salida OUT y se
puede consultar allí (OUT = eIN).
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor exponencial":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Valor exponencial del valor
de entrada IN

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
(;3
5($/
ಯ7DJ,Qಯ

(1

287

,1

(12

ಯ7DJB5HVXOWಯ
ಯ7DJ2XWಯ

ಯ7DJB9DOXHಯ

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
calcula la potencia en base e del valor del operando "Tag_Value" y deposita el resultado en la
salida "Tag_Result". Si no ocurren errores al ejecutar la instrucción, se activa la salida
"TagOut".

5122

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

SIN: Calcular valor de seno
Descripción
La instrucción "Calcular valor de seno" permite calcular el seno de un ángulo. El tamaño del
ángulo se indica en radianes en la entrada IN. El resultado de la instrucción se emite en la
salida OUT y se puede consultar allí.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor de seno":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Tamaño del ángulo en radia‐
nes

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Seno del ángulo indicado

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5123

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6,1
5($/
ಯ7DJ,Qಯ

(1

287

,1

(12

ಯ7DJB5HVXOWಯ
ಯ7DJ2XWಯ

ಯ7DJB9DOXHಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_Value

+1.570796 (π/2)

OUT

Tag_Result

1.0

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
calcula el seno del ángulo indicado en la entrada "Tag_Value" y deposita el resultado en la
salida "Tag_Result". Si no ocurren errores al ejecutar la instrucción, se activa la salida
"TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

COS: Calcular valor de coseno
Descripción
La instrucción "Calcular valor de coseno" permite calcular el coseno de un ángulo. El tamaño
del ángulo se indica en radianes en la entrada IN. El resultado de la instrucción se emite en la
salida OUT y se puede consultar allí.

5124

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor de coseno":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Tamaño del ángulo en radia‐
nes

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Coseno del ángulo indicado

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
&26
5($/
ಯ7DJ,Qಯ

(1

287

,1

(12

ಯ7DJB5HVXOWಯ
ಯ7DJ2XWಯ

ಯ7DJB9DOXHಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_Value

+1.570796 (π/2)

OUT

Tag_Result

0

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
calcula el coseno del ángulo indicado en la entrada "Tag_Value" y deposita el resultado en la
salida "Tag_Result". Si no ocurren errores al ejecutar la instrucción, se activa la salida
"TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Programación del PLC
Manual de programación y manejo, 11/2019

5125

Instrucciones
4.2 Instrucciones
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

TAN: Calcular valor de tangente
Descripción
La instrucción "Calcular valor de tangente" permite calcular la tangente de un ángulo. El
tamaño del ángulo se indica en radianes en la entrada IN. El resultado de la instrucción se
emite en la salida OUT y se puede consultar allí.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor de tangente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Tamaño del ángulo en radia‐
nes

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Tangente del ángulo indicado

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
7$1
5($/
ಯ7DJ,Qಯ

(1

287

,1

(12

ಯ7DJB5HVXOWಯ
ಯ7DJ2XWಯ

ಯ7DJB9DOXHಯ

5126

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_Value

+3.141593 (π)

OUT

Tag_Result

0

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
calcula la tangente del ángulo indicado en la entrada "Tag_Value" y deposita el resultado en la
salida "Tag_Result". Si no ocurren errores al ejecutar la instrucción, se activa la salida
"TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

ASIN: Calcular valor de arcoseno
Descripción
La instrucción "Calcular valor de arcoseno" permite calcular a partir del valor de seno indicado
en la entrada IN el tamaño del ángulo que corresponde a este valor. En la entrada IN solo se
pueden indicar números en coma flotante válidos, comprendidos en un rango de valores entre
-1 y +1. El tamaño del ángulo calculado se deposita en radianes en la salida OUT y puede estar
comprendido entre -π/2 y +π/2.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.
● El valor de la entrada IN está fuera del rango de valores permitido (-1 hasta +1).

Programación del PLC
Manual de programación y manejo, 11/2019

5127

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor de arcoseno":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de seno

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Tamaño del ángulo en radia‐
nes

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
$6,1
5($/
ಯ7DJ,Qಯ

(1

287

,1

(12

ಯ7DJB5HVXOWಯ
ಯ7DJ2XWಯ

ಯ7DJB9DOXHಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_Value

1.0

OUT

Tag_Result

+1.570796 (π/2)

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
calcula el tamaño del ángulo que corresponde al valor de seno de la entrada "Tag_Value". El
resultado de la instrucción se deposita en la salida "Tag_Result". Si no ocurren errores al
ejecutar la instrucción, se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)

5128

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

ACOS: Calcular valor de arcocoseno
Descripción
La instrucción "Calcular valor de arcocoseno" permite calcular a partir del valor de coseno
indicado en la entrada IN el tamaño del ángulo que corresponde a este valor. En la entrada IN
solo se pueden indicar números en coma flotante válidos, comprendidos en un rango de
valores entre -1 y +1. El tamaño del ángulo calculado se deposita en radianes en la salida OUT
y puede estar comprendido entre 0 y +π.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.
● El valor de la entrada IN está fuera del rango de valores permitido (-1 hasta +1).

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor de arcocoseno":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de coseno

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Tamaño del ángulo en radia‐
nes

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
$&26
5($/
ಯ7DJ,Qಯ

(1

287

,1

(12

ಯ7DJB5HVXOWಯ
ಯ7DJ2XWಯ

ಯ7DJB9DOXHಯ

Programación del PLC
Manual de programación y manejo, 11/2019

5129

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_Value

0

OUT

Tag_Result

+1.570796 (π/2)

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
calcula el tamaño del ángulo que corresponde al valor de coseno de la entrada "Tag_Value".
El resultado de la instrucción se deposita en la salida "Tag_Result". Si no ocurren errores al
ejecutar la instrucción, se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

ATAN: Calcular valor de arcotangente
Descripción
La instrucción "Calcular valor de arcotangente" permite calcular a partir del valor de tangente
indicado en la entrada IN el tamaño del ángulo que corresponde a este valor. En la entrada IN
solo se pueden indicar números en coma flotante válidos (o -NaN/+NaN). El tamaño del ángulo
calculado se deposita en radianes en la salida OUT y puede estar comprendido entre -π/2 y
+π/2.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.

5130

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor de arcotangente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de tangente

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Tamaño del ángulo en radia‐
nes

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
$7$1
5($/
ಯ7DJ,Qಯ

(1

287

,1

(12

ಯ7DJB5HVXOWಯ
ಯ7DJ2XWಯ

ಯ7DJB9DOXHಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_Value

1,0

OUT

Tag_Result

+0,785398 (π/4)

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
calcula el tamaño del ángulo que corresponde al valor de tangente de la entrada "Tag_Value".
El resultado de la instrucción se deposita en la salida "Tag_Result". Si no ocurren errores al
ejecutar la instrucción, se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Números en coma flotante no válidos (Página 263)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)

Programación del PLC
Manual de programación y manejo, 11/2019

5131

Instrucciones
4.2 Instrucciones
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

Transferencia
MOVE: Copiar valor
Descripción
La instrucción "Copiar valor" transfiere el contenido del operando de la entrada IN al operando
de la salida OUT1. La transferencia se efectúa siempre por orden ascendente de direcciones.
La tabla siguiente muestra las posibles transferencias:
Origen (IN)

Destino (OUT1)
Con verificación CEI

Sin verificación CEI

BYTE

BYTE, WORD, DWORD

BYTE, WORD, DWORD, INT, DINT, TIME, DATE,
TOD, CHAR

WORD

WORD; DWORD

BYTE, WORD, DWORD, INT, DINT, TIME, S5TIME,
DATE, TOD, CHAR

DWORD

DWORD

BYTE, WORD, DWORD, INT, DINT, REAL, TIME, DA‐
TE, TOD, CHAR

INT

INT

BYTE, WORD, DWORD, INT, DINT, TIME, DATE,
TOD

DINT

DINT

BYTE, WORD, DWORD, INT, DINT, TIME, DATE,
TOD

REAL

REAL

DWORD, REAL

TIME

TIME

BYTE, WORD, DWORD, INT, DINT, TIME

S5TIME

S5TIME

WORD, S5TIME

DATE

DATE

BYTE, WORD, DWORD, INT, DINT, DATE

TOD

TOD

BYTE, WORD, DWORD, INT, DINT, TOD

CHAR

CHAR

BYTE, WORD, DWORD, CHAR

COUNTER

INT, WORD, COUNTER

WORD, DWORD, INT, UINT, DINT, UDINT

TIMER

INT, WORD, TIMER

WORD, DWORD, INT, UINT, DINT, UDINT

Si la longitud de bits del tipo de datos de la entrada IN supera la longitud de bits del tipo de datos
de la salida OUT1, se pierden los bits más significativos del valor de origen. Si la longitud de
bit del tipo de datos de la entrada IN es inferior a la longitud de bit del tipo de datos de la salida
OUT1, se sobrescriben con ceros los bits más significativos del valor de destino.
Para copiar campos y estructuras pueden utilizarse también las instrucciones "Copiar área"
(BLKMOV) y "Copiar área sin interrupciones" (UBLKMOV).

5132

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Copiar valor":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

I, Q, M, D, L o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante, temporiza‐
dores, DATE,
TOD, CHAR, TI‐
MER, COUNTER

Valor de origen

OUT1

Output

I, Q, M, D, L
Secuencias de
bits, enteros, nú‐
meros en coma flo‐
tante, temporiza‐
dores, DATE,
TOD, CHAR, TI‐
MER, COUNTER

Dirección de destino

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
029(
ಯ7DJ,Qಯ

(1

287

ಯ7DJ2XWB9DOXHಯ
ಯ7DJ2XWಯ

ಯ7DJ,QB9DOXHಯ

,1

(12

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

0011 1111 1010 1111

OUT1

TagOut_Value

0011 1111 1010 1111

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
copia los contenidos del operando "TagIn_Value" en el operando "TagOut_Value" y pone la
salida "TagOut" al estado lógico "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de FUP (Página 8005)

Programación del PLC
Manual de programación y manejo, 11/2019

5133

Instrucciones
4.2 Instrucciones

BLKMOV: Copiar área
Descripción
La instrucción "Copiar área" copia los contenidos de un área de memoria (área de origen) en
un área de memoria diferente (área de destino). La operación de copia se realiza por orden
ascendente de direcciones. Las áreas de origen y destino se definen mediante punteros ANY.
Nota
En esta instrucción solo se pueden utilizar tipos de datos que sean válidos en una CPU de la
serie S7-300/400.
La figura siguiente muestra el principio de la operación de copia:

'%'%:

$

%

'%'%:

&

'

'%'%:

(

)

'%'%:

*

+

&RSLDU
/DFRSLDVHHIHFW¼DHQ
VHQWLGRDVFHQGHQWHGH
ODVGLUHFFLRQHV

0:

$

%

0:

&

'

0:

(

)

0:

*

+

UHDGHPHPRULD

Coherencia de los datos de origen y destino
Tenga en cuenta que al ejecutar la instrucción "Copiar área" no se modifican los datos de
origen. De lo contrario no está garantizada la coherencia de los datos de destino.

Posibilidad de interrupción
Mientras el área de origen no forme parte de un bloque de datos que solo figura en la memoria
de carga, no hay limitaciones en cuanto a la profundidad de anidamiento.
Por el contrario, en caso de interrumpirse la ejecución de BLKMOV, en la que se copia desde
un DB no relevante para la ejecución, no puede anidarse más la ejecución de la BLKMOV.

5134

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Áreas de memoria
La instrucción "Copiar área" copia las siguientes áreas de memoria:
● Áreas de un bloque de datos
● Marcas
● Memoria imagen de proceso de las entradas
● Memoria imagen de proceso de las salidas
● Bloques de datos no relevantes para la ejecución

Reglas generales para copiar
Las áreas de origen y destino no deben solaparse. Si las áreas de origen y destino son de
diferente longitud, se copia solo hasta la longitud del área más pequeña.
Si el área de origen es más pequeña que el área de destino, el área de origen se copiará por
completo en el área de destino. Los restantes bytes del área de destino permanecen
inalterados.
Si el área de destino es más pequeña que el área de origen, se escribirá en toda el área de
destino. Los restantes bytes del área de origen se ignoran.
Al copiar un área del tipo de datos BOOL, la longitud indicada del área debe ser un múltiplo de
8, pues de lo contrario no se ejecutará la instrucción.
Nota
Si el área de origen o destino realmente existente es menor que el área de origen o destino
indicada en el parámetro SRCBLK o DSTBLK, el comportamiento dependerá del tipo de CPU:
● Para las CPU S7-300 rige lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#837F. Este código de error debe evaluarse en el programa de usuario.
● Para las CPU V4 del S7-400 (V4, CPU H V4 y CPU H V4.5) se aplica lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#8122 o W#16#8323. Este código de error debe evaluarse en el programa de usuario.
● Para las restantes CPU del S7-400 rige:
Se transfieren datos. En el parámetro RET_VAL se devuelve el código de error W#16#8122
o W#16#8323. Este código de error debe evaluarse en el programa de usuario.

Reglas para copiar cadenas de caracteres
La instrucción "Copiar área" permite copiar asimismo áreas de origen y destino del tipo de
datos STRING. Si solo el área de origen es del tipo de datos STRING, se copiarán los
caracteres que realmente contiene la cadena de caracteres. La información sobre la longitud
real y máxima también se escribe en el área de destino. Si tanto el área de origen como el área
de destino son del tipo de datos STRING, la longitud actual de la cadena de caracteres en el
área de destino se pone al número de caracteres realmente copiados.
Si se desea copiar información sobre la longitud máxima y real de una cadena de caracteres,
las áreas de los parámetros SRCBLK y DSTBLK deben indicarse en bytes.

Programación del PLC
Manual de programación y manejo, 11/2019

5135

Instrucciones
4.2 Instrucciones

Reglas para copiar bloques de datos no relevantes para la ejecución
El área de origen también puede encontrarse en un bloque de datos no relevante para la
ejecución en la memoria de carga. Los bloques de datos no relevantes para la ejecución se
identifican con la palabra clave UNLINKED.
Si en la memoria de trabajo se copia un bloque de datos no relevante para la ejecución con la
instrucción "Copiar área" y, al mismo tiempo, este se vuelve a cargar p. ej. desde la
programadora, la ejecución de la instrucción puede retardarse varios milisegundos. Esto
prolonga el ciclo del OB y puede activar la vigilancia del tiempo de ciclo.
Si un bloque de datos no relevante para la ejecución se copia con la instrucción "Copiar área"
y la operación de copia se interrumpe, la instrucción no se podrá seguir ejecutando.
Si en la CPU existe la instrucción "Leer de un bloque de datos de la memoria de carga", debe
utilizarse dicha instrucción para leer los bloques de datos no relevantes para la ejecución en
la memoria de carga. Si se utiliza la instrucción "Copiar área" se emite el error W#16#8092.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Copiar área":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

SRCBLK

Input

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria que se copia (área de ori‐
gen).

RET_VAL

Output

INT

I, Q, M, D, L, P

Información de error:
El parámetro RET_VAL de‐
vuelve un código de error
cuando ocurre un error du‐
rante la ejecución de la ins‐
trucción.

DSTBLK

Output 1)

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria en la que se copia (área
de destino).

1) El parámetro DSTBLK está declarado como Output, pero en la interfaz del bloque debe declararse
como InOut.

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:

5136

Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8092

El área de origen o destino está solo en la memoria de carga.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Código de
error*
(W#16#...)

Explicación

8xyy

Encontrará más información de error en "Consulte también".

*Los códigos de error que aparecen en el editor de programas se pueden representar como valores
enteros o hexadecimales. Encontrará más información sobre el cambio de los formatos de visualización
en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
%/.029
$Q\
ಯ7DJ,Qಯ
30%<7(

(1
65&%/.

5(7B9$/
'67%/.

ಯ7DJB5HW9DOಯ
3'%'%;%<7(
ಯ7DJ2XWಯ

(12

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
copia 10 bytes a partir de MB100 y los escribe en el DB1. Si ocurre un error durante la
operación de copia, el respectivo código de error se indica en la variable "Tag_RetVal".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de FUP (Página 8005)

UBLKMOV: Copiar área sin interrupciones
Descripción
La instrucción "Copiar área sin interrupciones" copia los contenidos de un área de memoria
(área de origen) en un área de memoria diferente (área de destino). La operación de copia se
realiza por orden ascendente de direcciones. Las áreas de origen y destino se definen
mediante punteros ANY.

Programación del PLC
Manual de programación y manejo, 11/2019

5137

Instrucciones
4.2 Instrucciones
La operación de copia no debe ser interrumpida por otras actividades del sistema operativo.
Ello puede aumentar el tiempo de reacción a alarmas de la CPU durante la ejecución de la
instrucción "Copiar área sin interrupciones".
Nota
En esta instrucción solo se pueden utilizar tipos de datos que sean válidos en una CPU de la
serie S7-300/400.

Áreas de memoria
La instrucción "Copiar área sin interrupciones" copia las siguientes áreas de memoria:
● Áreas de un bloque de datos
● Marcas
● Memoria imagen de proceso de las entradas
● Memoria imagen de proceso de las salidas

Reglas generales para copiar
Al ejecutar la instrucción "Copiar área sin interrupciones" no pueden solaparse las áreas de
origen y destino. Si el área de origen es más pequeña que el área de destino, el área de origen
se copiará por completo en el área de destino. Los restantes bytes del área de destino
permanecen inalterados.
Si el área de destino es más pequeña que el área de origen, se escribirá en toda el área de
destino. Los restantes bytes del área de origen se ignoran.
Si un área de origen o destino definida como parámetro formal es menor que un área de origen
o destino indicada en los parámetros SRCBLK o DSTBLK, no se transferirán datos.
Al copiar un área del tipo de datos BOOL, la longitud indicada del área debe ser un múltiplo de
8, pues de lo contrario no se ejecutará la instrucción.
La instrucción "Copiar área sin interrupciones" permite copiar 512 bytes como máximo. A este
respecto deben tenerse en cuenta las limitaciones específicas de la CPU.
Nota
Si el área de origen o destino realmente existente es menor que el área de origen o destino
indicada en el parámetro SRCBLK o DSTBLK, el comportamiento dependerá del tipo de CPU:
● Para las CPU S7-300 rige lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#837F. Este código de error debe evaluarse en el programa de usuario.
● Para las CPU V4 del S7-400 (V4, CPU H V4 y CPU H V4.5) se aplica lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#8122 o W#16#8323. Este código de error debe evaluarse en el programa de usuario.
● Para las restantes CPU del S7-400 rige:
Se transfieren datos. En el parámetro RET_VAL se devuelve el código de error W#16#8122
o W#16#8323. Este código de error debe evaluarse en el programa de usuario.

5138

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Reglas para copiar cadenas de caracteres
La instrucción "Copiar área sin interrupciones" permite copiar asimismo áreas de origen y
destino del tipo de datos STRING. Si solo el área de origen es del tipo de datos STRING, se
copiarán los caracteres que realmente contiene la cadena de caracteres. La información sobre
la longitud real y máxima no se escribe en el área de destino. Si tanto el área de origen como
el área de destino son del tipo de datos STRING, la longitud actual de la cadena de caracteres
en el área de destino se pone al número de caracteres realmente copiados. Si se copian áreas
del tipo de datos STRING, debe indicarse "1" como longitud del área.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Copiar área sin interrupciones":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

SRCBLK

Input

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria que se copia (área de ori‐
gen).

RET_VAL

Output

INT

I, Q, M, D, L, P

Información de error:
El parámetro RET_VAL de‐
vuelve un código de error
cuando ocurre un error du‐
rante la ejecución de la ins‐
trucción.

DSTBLK

Output 1)

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria en la que se copia (área
de destino).

1) El parámetro DSTBLK está declarado como Output, pero en la interfaz del bloque debe declararse
como InOut.

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8091

El área de origen o destino está solo en la memoria de carga.

8xyy

Encontrará más información de error en "Consulte también".

*Los códigos de error que aparecen en el editor de programas se pueden representar como valores
enteros o hexadecimales. Encontrará más información sobre el cambio de los formatos de visualización
en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5139

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
8%/.029
$Q\
ಯ7DJ,Qಯ
30%<7(

(1
65&%/.

5(7B9$/
'67%/.

ಯ7DJB5HW9DOಯ
3'%'%;%<7(
ಯ7DJ2XWಯ

(12

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
copia 10 bytes a partir de MB100 y los escribe en el DB1. Si ocurre un error durante la
operación de copia, el respectivo código de error se indica en la variable "Tag_RetVal".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de FUP (Página 8005)

FILL: Rellenar área
Descripción
La instrucción "Rellenar área" rellena un área de memoria (área de destino) con el contenido
de un área de memoria diferente (área de origen). La instrucción "Rellenar área" copia el
contenido del área de origen en el área de destino las veces necesarias hasta que el área de
destino quede escrita por completo. La operación de copia se realiza por orden ascendente de
direcciones. Las áreas de origen y destino se definen mediante punteros ANY.
Nota
En esta instrucción solo se pueden utilizar tipos de datos que sean válidos en una CPU de la
serie S7-300/400.
La figura siguiente muestra el principio de la operación de copia:

5140

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
),//

%9$/

$

%

0:

$

%

0:

&

'

0:

&

'

0:

(

)

0:

(

)

0:

*

+

0:

*

+

0:

$

%

0:

&

'

0:

(

)

0:

*

+

0:

$

%

0:

&

'

0:

%/.

Ejemplo: El contenido del área MW100 a MW118 debe inicializarse con el contenido de las
palabras de marcas MW14 a MW20.

Coherencia de los datos de origen y destino
Tenga en cuenta que al ejecutar la instrucción "Rellenar área" no se modifican los datos de
origen, pues de lo contrario no se podría garantizar la coherencia de los datos de destino.

Áreas de memoria
La instrucción "Rellenar área" copia las siguientes áreas de memoria:
● Áreas de un bloque de datos
● Marcas
● Memoria imagen de proceso de las entradas
● Memoria imagen de proceso de las salidas

Reglas generales para copiar
Las áreas de origen y destino no deben solaparse. Aunque el área de destino que se debe
inicializar no sea múltiplo entero de la longitud del parámetro de entrada BVAL, el área de
destino se rellenará igualmente hasta el último byte.
Si el área de destino que se debe preasignar es menor que el área de origen, solo se copian
los datos que caben en el área de destino.
Si el área de origen o destino realmente existente es menor que el tamaño del área de memoria
parametrizado para el área de origen o destino (parámetros BVAL, BLK), los datos no se
transfieren.

Programación del PLC
Manual de programación y manejo, 11/2019

5141

Instrucciones
4.2 Instrucciones
Si el puntero ANY (origen o destino) es del tipo de datos BOOL, la longitud indicada del área
debe ser divisible entre 8 ya que, de lo contrario, la instrucción no se ejecuta.
Si el área de destino es del tipo de datos STRING, la instrucción escribe la cadena de
caracteres completa, incluida la información de administración.
Nota
Si el área de origen o destino realmente existente es menor que el área de origen o destino
indicada en el parámetro BVAL o BLK, el comportamiento dependerá del tipo de CPU:
● Para las CPU S7-300 rige lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#837F. Este código de error debe evaluarse en el programa de usuario.
● Para las CPU V4 del S7-400 (V4, CPU H V4 y CPU H V4.5) se aplica lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#8122 o W#16#8323. Este código de error debe evaluarse en el programa de usuario.
● Para las restantes CPU del S7-400 rige:
Se transfieren datos. En el parámetro RET_VAL se devuelve el código de error W#16#8122
o W#16#8323. Este código de error debe evaluarse en el programa de usuario.

Reglas para copiar estructuras
Al indicar una estructura a modo de parámetro de entrada, tenga en cuenta que la longitud de
una estructura se adapta siempre a un número entero de bytes. Si se declara una estructura
con un número impar de bytes, la estructura necesitará un byte adicional de espacio en
memoria.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Rellenar área":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

BVAL

Input

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria (área de origen) con cuyo
contenido se rellena el área
de destino en el parámetro
BLK.

RET_VAL

Output

INT

I, Q, M, D, L, P

Información de error:
El parámetro RET_VAL de‐
vuelve un código de error
cuando ocurre un error du‐
rante la ejecución de la ins‐
trucción.

BLK

Output 1)

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria que se rellena con el con‐
tenido del área de origen.

1) El parámetro BLK está declarado como Output, pero en la interfaz del bloque debe declararse como
InOut.

5142

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8092

El área de origen o destino está solo en la memoria de carga.

8xyy

Encontrará más información de error en "Consulte también".

*Los códigos de error que aparecen en el editor de programas se pueden representar como valores
enteros o hexadecimales. Encontrará más información sobre el cambio de los formatos de visualización
en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
),//
$Q\
ಯ7DJ,Qಯ
30:25'

(1
%9$/

5(7B9$/
%/.

ಯ7DJB5HW9DOಯ
30:25'
ಯ7DJ2XWಯ

(12

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
copia el área de origen de MW14 a MW20 y rellena el área de destino de MW100 a MW118 con
el contenido de las 4 palabras contenidas en el área de memoria del parámetro BVAL.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de FUP (Página 8005)

Programación del PLC
Manual de programación y manejo, 11/2019

5143

Instrucciones
4.2 Instrucciones

Conversión
CONVERT: Convertir valor
Descripción
La instrucción "Convertir valor" lee el contenido del parámetro IN y lo convierte según los tipos
de datos elegidos en el cuadro de la instrucción. El valor convertido se deposita en la salida
OUT.
Encontrará más información relacionada con las conversiones posibles en el apartado
"Conversión explícita" de "Consulte también".
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Durante la ejecución ocurren errores, p. ej. se produce un rebase por exceso.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Convertir valor":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Enteros, números
en coma flotante,
BCD16, BCD32

I, Q, M, D, L, P o
constante

Valor que se convierte.

OUT

Output

Enteros, números
en coma flotante,
BCD16, BCD32

I, Q, M, D, L, P

Resultado de la conversión

En las listas desplegables "???" del cuadro de la instrucción se pueden seleccionar los tipos
de datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
&219
,17
ಯ7DJ,Qಯ
ಯ,QSXWB,17ಯ

WR

',17

(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ2XWSXWB',17ಯ

Si el operando "TagIn" devuelve el estado lógico "1", el contenido del operando "TagIn_Value"
se lee y se convierte en un número entero (16 bits). El resultado se deposita en el operando

5144

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
"TagOut_Value". Si la instrucción se ha ejecutado correctamente, la salida "TagOut" se pone
a "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Conversiones explícitas (Página 590)
Principios básicos de FUP (Página 8005)

ROUND: Redondear número
Descripción
La instrucción "Redondear número" permite redondear el valor de la entrada IN al siguiente
número entero. La instrucción interpreta el valor de la entrada IN como número en coma
flotante y lo convierte a un número entero del tipo de datos DINT. Si el valor de entrada se
encuentra entre un número par y uno impar, se selecciona el número par. El resultado de la
instrucción se emite en la salida OUT y se puede consultar allí.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Durante la ejecución ocurren errores, p. ej. se produce un rebase por exceso.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Redondear número":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

REAL

I, Q, M, D, L, P o
constante

Valor de entrada que se re‐
dondea.

OUT

Output

DINT

I, Q, M, D, L, P

Resultado del redondeo

En las listas desplegables "???" del cuadro de la instrucción se pueden seleccionar los tipos
de datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5145

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
5281'
5($/ WR ',17
ಯ7DJ,Qಯ
ಯ7DJ,QB9DOXHಯ

(1

287

,1

(12

ಯ7DJ2XWB9DOXHಯ
ಯ7DJ2XWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

1.50000000

-1.50000000

OUT

TagOut_Value

2

-2

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El número en
coma flotante de la entrada "TagIn_Value" se redondea al número entero par más próximo y
se deposita en la salida "TagOut_Value". Si no ocurren errores al ejecutar la instrucción, se
activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de FUP (Página 8005)

CEIL: Redondear un número en coma flotante al siguiente entero superior
Descripción
La instrucción "Redondear un número en coma flotante al siguiente entero superior" permite
redondear el valor de la entrada IN al siguiente número entero superior. La instrucción
interpreta el valor de la entrada IN como número en coma flotante y lo convierte en el siguiente
número entero superior. El resultado de la instrucción se emite en la salida OUT y se puede
consultar allí. El valor de salida puede ser mayor o igual al valor de entrada.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Durante la ejecución ocurren errores, p. ej. se produce un rebase por exceso.

5146

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Redondear un número en coma
flotante al siguiente entero superior":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Resultado con el siguiente
entero superior

En las listas desplegables "???" del cuadro de la instrucción se pueden seleccionar los tipos
de datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
&(,/
5($/
ಯ7DJ,Qಯ

WR

',17

(1

287

,1

(12

ಯ7DJ,QB9DOXHಯ

ಯ7DJ2XWB9DOXHಯ
ಯ7DJ2XWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

0.50000000

-0.50000000

OUT

TagOut_Value

1

0

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El número en
coma flotante de la entrada "TagIn_Value" se redondea al número entero superior más
próximo y se deposita en la salida "TagOut_Value". Si no ocurren errores al ejecutar la
instrucción, se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de FUP (Página 8005)

Programación del PLC
Manual de programación y manejo, 11/2019

5147

Instrucciones
4.2 Instrucciones

FLOOR: Redondear un número en coma flotante al siguiente entero inferior
Descripción
La instrucción "Redondear un número en coma flotante al siguiente entero inferior" redondea
el valor de la entrada IN al siguiente número entero inferior. La instrucción interpreta el valor de
la entrada IN como número en coma flotante y lo convierte en el siguiente número entero
inferior. El resultado de la instrucción se deposita en la salida OUT y se puede consultar allí.
El valor de salida puede ser menor o igual al valor de entrada.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Durante la ejecución ocurren errores, p. ej. se produce un rebase por exceso.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Redondear un número en coma
flotante al siguiente entero inferior":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Resultado con el siguiente
entero inferior

En las listas desplegables "???" del cuadro de la instrucción se pueden seleccionar los tipos
de datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

5($/
ಯ7DJ,Qಯ
ಯ7DJ,QB9DOXHಯ

)/225
WR ',17

(1

287

,1

(12

ಯ7DJ2XWB9DOXHಯ
ಯ7DJ2XWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:

5148

Parámetro

Operando

Valor

IN

TagIn_Value

0.50000000

-0.50000000

OUT

TagOut_Value

0

-1

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El número en
coma flotante de la entrada "TagIn_Value" se redondea al número entero inferior más próximo
y se deposita en la salida "TagOut_Value". Si no ocurren errores al ejecutar la instrucción, se
activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de FUP (Página 8005)

TRUNC: Truncar a entero
Descripción
La instrucción "Truncar a entero" permite generar un valor entero a partir del valor de la entrada
IN. El valor de la entrada IN se interpreta como número en coma flotante. La instrucción
selecciona solo la parte entera del número en coma flotante y la deposita sin decimales en la
salida OUT.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Durante la ejecución ocurren errores, p. ej. se produce un rebase por exceso.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Truncar a entero":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

REAL

I, Q, M, D, L o
constante

Valor de entrada

OUT

Output

Enteros

I, Q, M, D, L

Parte entera del valor de en‐
trada

En las listas desplegables "???" del cuadro de la instrucción se pueden seleccionar los tipos
de datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5149

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

5($/
ಯ7DJ,Qಯ
ಯ7DJ,QB9DOXHಯ

7581&
WR ',17

(1

287

,1

(12

ಯ7DJ2XWB9DOXHಯ
ಯ7DJ2XWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

1.50000000

-1.50000000

OUT

TagOut_Value

1

-1

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La parte entera
del número en coma flotante de la entrada "TagIn_Value" se convierte en un número entero y
se deposita en la salida "TagOut_Value". Si no ocurren errores al ejecutar la instrucción, se
activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de FUP (Página 8005)

SCALE: Escalar
Descripción
La instrucción "Escalar" convierte el entero del parámetro IN en un número en coma flotante
que se escala en unidades físicas entre un límite inferior y uno superior. Los límites inferior y
superior del rango de valores en el que se escala el valor de entrada se definen mediante los
parámetros LO_LIM y HI_LIM. El resultado de la instrucción se devuelve en el parámetro OUT.
La instrucción "Escalar" utiliza la siguiente ecuación:
OUT = [((FLOAT (IN) – K1)/(K2–K1)) ∗ (HI_LIM–LO_LIM)] + LO_LIM
El estado lógico del parámetro BIPOLAR determina los valores de las constantes "K1" y "K2".
El parámetro BIPOLAR puede tener los siguientes estados lógicos:
● Estado lógico "1": se presupone que el valor del parámetro IN es bipolar y está comprendido
en un rango de valores entre -27648 y 27648. En este caso, la constante "K1" tiene el valor
"-27648,0" y la constante "K2", el valor "+27648,0".
● Estado lógico "0": se presupone que el valor del parámetro IN es unipolar y está
comprendido en un rango de valores entre 0 y 27648. En este caso, la constante "K1" tiene
el valor "0,0" y la constante "K2", el valor "+27648,0".

5150

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Si el valor del parámetro IN es mayor que el de la constante "K2", el resultado de la instrucción
se pone al valor del límite superior (HI_LIM) y se emite un error.
Si el valor del parámetro IN es menor que el de la constante "K1", el resultado de la instrucción
se pone al valor del límite inferior (LO_LIM) y se emite un error.
Si el límite inferior indicado es mayor que el límite superior (LO_LIM > HI_LIM), el resultado se
escala inversamente proporcional al valor de entrada.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Escalar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

INT

I, Q, M, D, L, P o
constante

Valor de entrada que se es‐
cala

HI_LIM

Input

REAL

I, Q, M, D, L, P o
constante

Valor límite superior

LO_LIM

Input

REAL

I, Q, M, D, L, P o
constante

Valor límite inferior

BIPOLAR

Input

BOOL

I, Q, M, D, L o
constante

Indica si el valor del paráme‐
tro IN se interpreta como bi‐
polar o unipolar. El paráme‐
tro puede adoptar los valores
siguientes:
1: Bipolar
0: Unipolar

OUT

Output

REAL

I, Q, M, D, L, P

Resultado de la instrucción

RET_VAL

Output

WORD

I, Q, M, D, L, P

Información de error

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error
(W#16#....)

Explicación

0000

Ningún error

0008

El valor del parámetro IN es mayor que el de la constante "K2" o menor que el de la
constante "K1".

8xyy

Encontrará más información de error en "Consulte también".

*Los códigos de error en el editor de programas se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Programación del PLC
Manual de programación y manejo, 11/2019

5151

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6&$/(
ಯ7DJ,Qಯ
ಯ7DJB,QSXW9DOXHಯ

(1
,1

ಯ7DJB+LJK/LPLWಯ

+,B/,0

5(7B9$/

ಯ7DJB/RZ/LPLWಯ

/2B/,0

287

ಯ7DJB%LSRODUಯ

%,32/$5

ಯ7DJB(UURU&RGHಯ
ಯ7DJB2XWSXW9DOXHಯ
ಯ7DJ2XWಯ

(12

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_InputValue

22

HI_LIM

Tag_HighLimit

100.0

LO_LIM

Tag_LowLimit

0.0

BIPOLAR

Tag_Bipolar

1

OUT

Tag_OutputValue

50.03978588

RET_VAL

Tag_ErrorCode

W#16#0000

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de FUP (Página 8005)

UNSCALE: Desescalar
Descripción
La instrucción "Desescalar" desescala el número en coma flotante del parámetro IN en
unidades físicas entre un valor límite inferior y un valor límite superior y lo convierte en un
número entero. Los límites inferior y superior del rango de valores en el que se desescala el
valor de entrada se definen mediante los parámetros LO_LIM y HI_LIM. El resultado de la
instrucción se devuelve en el parámetro OUT.
La instrucción "Desescalar" utiliza la siguiente ecuación:
OUT = [ ((IN–LO_LIM)/(HI_LIM–LO_LIM)) ∗ (K2–K1) ] + K1

5152

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
El estado lógico del parámetro BIPOLAR determina los valores de las constantes "K1" y "K2".
El parámetro BIPOLAR puede tener los siguientes estados lógicos:
● Estado lógico "1": se presupone que el valor del parámetro IN es bipolar y está comprendido
en un rango de valores entre -27648 y 27648. En este caso, la constante "K1" tiene el valor
"-27648,0" y la constante "K2", el valor "+27648,0".
● Estado lógico "0": se presupone que el valor del parámetro IN es unipolar y está
comprendido en un rango de valores entre 0 y 27648. En este caso, la constante "K1" tiene
el valor "0,0" y la constante "K2", el valor "+27648,0".
Si el valor del parámetro IN no se encuentra dentro de los límites definidos por HI_LIM y
LO_LIM, se emite un error. El resultado se ajusta al límite más próximo.
Si el límite inferior indicado es mayor que el límite superior (LO_LIM > HI_LIM), el resultado se
escala de forma inversamente proporcional al valor de entrada.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desescalar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Input

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

REAL

I, Q, M, D, L, P o
constante

Valor de entrada que se de‐
sescala en un valor entero

HI_LIM

Input

REAL

I, Q, M, D, L, P o
constante

Valor límite superior

LO_LIM

Input

REAL

I, Q, M, D, L, P o
constante

Valor límite inferior

BIPOLAR

Input

BOOL

I, Q, M, D, L o
constante

Indica si el valor del paráme‐
tro IN se interpreta como bi‐
polar o unipolar. El paráme‐
tro puede adoptar los valores
siguientes:
1: Bipolar
0: Unipolar

OUT

Output

INT

I, Q, M, D, L, P

Resultado de la instrucción

RET_VAL

Output

WORD

I, Q, M, D, L, P

Información de error

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

0008

El valor del parámetro IN es mayor que el del límite superior (HI_LIM) o menor que el del
límite inferior (LO_LIM).

Programación del PLC
Manual de programación y manejo, 11/2019

5153

Instrucciones
4.2 Instrucciones
Código de
error*
(W#16#...)

Explicación

8xyy

Encontrará más información de error en "Consulte también".

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización aquí: Cambiar
formatos de visualización en el estado del programa (Página 8529)

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
816&$/(
ಯ7DJ,Qಯ
ಯ7DJB,QSXW9DOXHಯ

(1
,1

ಯ7DJB+LJK/LPLWಯ

+,B/,0

5(7B9$/

ಯ7DJB/RZ/LPLWಯ

/2B/,0

287

ಯ7DJB%LSRODUಯ

%,32/$5

ಯ7DJB(UURU&RGHಯ
ಯ7DJB2XWSXW9DOXHಯ
ಯ7DJ2XWಯ

(12

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_InputValue

50.03978588

HI_LIM

Tag_HighLimit

100.0

LO_LIM

Tag_LowLimit

0.0

BIPOLAR

Tag_Bipolar

1

OUT

Tag_OutputValue

22

RET_VAL

Tag_ErrorCode

W#16#0000

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de FUP (Página 8005)

5154

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Control del programa
JMP: Saltar si RLO = 1
Descripción
La instrucción "Saltar si RLO = 1" permite interrumpir la ejecución lineal del programa y
continuarla en un segmento diferente. El segmento de destino tiene que marcarse con una
etiqueta (LABEL). El nombre de la etiqueta se indica en el comodín situado encima del cuadro
de la instrucción.
La etiqueta indicada debe encontrarse en el mismo bloque en el que se ejecuta la instrucción.
Su nombre debe ser unívoco en el bloque. En un segmento no se puede utilizar más de una
bobina de salto.
Si el resultado lógico (RLO) de la entrada de la instrucción es "1", se ejecuta el salto al
segmento identificado por la etiqueta indicada. El salto puede realizarse hacia números de
segmento superiores o inferiores.
Si no se cumple la condición en la entrada de la instrucción (RLO = 0), la ejecución del
programa continúa en el segmento siguiente.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR

&$6
ಯ7DJ,QBಯ

6HJPHQWR

-03
ಯ7DJ2XWBಯ

ಯ7DJ,QBಯ

5

6HJPHQWR
&$6
ಯ7DJ2XWBಯ
ಯ7DJ,QBಯ

5

Si el operando "TagIn_1" devuelve el estado lógico "1", se ejecuta la instrucción. Por este
motivo, se interrumpe la ejecución lineal del programa y se prosigue en el segmento 3,
marcado por la etiqueta CAS1. Si la entrada "TagIn_3" devuelve el estado lógico "1", se
desactiva la salida "TagOut_3".

Consulte también
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)

Programación del PLC
Manual de programación y manejo, 11/2019

5155

Instrucciones
4.2 Instrucciones

JMPN: Saltar si RLO = 0
Descripción
La instrucción "Saltar si RLO = 0" permite interrumpir la ejecución lineal del programa y
continuarla en un segmento diferente, si el resultado lógico de la entrada de la instrucción es
"0". El segmento de destino tiene que marcarse con una etiqueta (LABEL). El nombre de la
etiqueta se indica en el comodín situado encima del cuadro de la instrucción.
La etiqueta indicada debe encontrarse en el mismo bloque en el que se ejecuta la instrucción.
Su nombre debe ser unívoco en el bloque. En un segmento no se puede utilizar más de una
bobina de salto.
Si el resultado lógico (RLO) de la entrada de la instrucción es "0", se ejecuta el salto al
segmento identificado por la etiqueta indicada. El salto puede realizarse hacia números de
segmento superiores o inferiores.
Si el RLO de la entrada de la instrucción es "1", la ejecución del programa continúa en el
segmento siguiente.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR

&$6
ಯ7DJ,QBಯ

6HJPHQWR

-031
ಯ7DJ2XWBಯ

ಯ7DJ,QBಯ

5

6HJPHQWR
&$6
ಯ7DJ2XWBಯ
ಯ7DJ,QBಯ

5

Si el operando "TagIn_1" devuelve el estado lógico "0", se ejecuta la instrucción. Por este
motivo, se interrumpe la ejecución lineal del programa y se prosigue en el segmento 3,
marcado por la etiqueta CAS1. Si la entrada "TagIn_3" devuelve el estado lógico "1", se
desactiva la salida "TagOut_3".

Consulte también
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)

5156

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

LABEL: Etiqueta
Descripción
La etiqueta de salto marca un segmento de destino en el que se debe continuar la ejecución
del programa tras ejecutar una instrucción de salto.
La etiqueta y la instrucción en la que se indica la etiqueta como destino del salto deben
encontrarse en el mismo bloque. El nombre de una etiqueta debe ser único en el bloque.
En un segmento solo se puede colocar una etiqueta. A toda etiqueta se puede acceder desde
distintas posiciones.
Para la etiqueta deben observarse las siguientes reglas gramaticales:
● Letras (a - z, A - Z)
● Una combinación de letras y números. Es importante observar el orden, es decir, primero
las letras y después los números (a - z, A - Z, 0 - 9).
● No pueden utilizarse caracteres especiales o una combinación de letras y números en
orden inverso, es decir, primero los números y después las letras (0 - 9, a - z, A - Z).

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR

&$6
ಯ7DJ,QBಯ

6HJPHQWR

-03
ಯ7DJ2XWBಯ

ಯ7DJ,QBಯ

5

6HJPHQWR
&$6
ಯ7DJ2XWBಯ
ಯ7DJ,QBಯ

5

Si el operando "TagIn_1" devuelve el estado lógico "1", se ejecuta la instrucción. Por este
motivo, se interrumpe la ejecución lineal del programa y se prosigue en el segmento 3,
marcado por la etiqueta CAS1. Si la entrada "TagIn_3" devuelve el estado lógico "1", se
desactiva la salida "TagOut_3".

Consulte también
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)

Programación del PLC
Manual de programación y manejo, 11/2019

5157

Instrucciones
4.2 Instrucciones

RET: Retroceder
Descripción
La instrucción "Retroceder" finaliza la ejecución de un bloque de programa.
● Si el resultado lógico (RLO) de la entrada de la instrucción es "1", se finaliza la ejecución del
programa en el bloque de programa llamado actualmente y se continúa en el bloque de
programa que efectúa la llamada (p. ej., en el bloque de organización que llama) después
de la función de llamada. El RLO determina el estado lógico de la salida de habilitación ENO
de la función de llamada. La instrucción representa el RLO como un valor de parámetro fijo.
● Si el resultado lógico (RLO) de la entrada de la instrucción es "0", la instrucción no se
ejecuta. La ejecución del programa continúa en el siguiente segmento del bloque de
programa llamado.
Si la instrucción está programada en el último segmento del bloque de programa llamado, la
salida de habilitación ENO pondrá la función de llamada al estado lógico actual del RLO.
Si se finaliza un bloque de organización con la instrucción, la CPU continuará con el programa
de sistema.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

! 

ಯ7DJ,QBಯ

5/2
5(7

Si uno de los operandos "TagIn_1" o "TagIn_2" devuelve el estado lógico "1", se ejecuta la
instrucción. La ejecución del programa se finaliza en el bloque de programa llamado y continúa
en el bloque de programa que efectúa la llamada. La salida de habilitación ENO de la función
de llamada adopta el estado lógico "1".

Consulte también
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)

OPN: Abrir bloque de datos global
Descripción
La instrucción "Abrir bloque de datos global" permite abrir un bloque de datos (DB). El número
del bloque de datos se transmite al registro del DB. Los siguientes comandos de DB acceden
a los bloques correspondientes en función de los contenidos del registro.

5158

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Abrir bloque de datos global":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Bloque de
datos>

Input

DB_ANY

-

Bloque de datos que se abre.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
Segmento 1
ಯ0RWRUB'%ಯ
231

Segmento 2
ಯ7DJB2XWSXWಯ


ಯ'%;ಯ

En el segmento 1 se llama al bloque de datos "Motor_DB". El número del bloque de datos se
transmite al registro del DB. En el segmento 2 se consulta el operando "DBX0.0". El estado
lógico del operando "DBX0.0" se asigna al operando "Tag_Output".

Consulte también
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)

OPNI: Abrir bloque de datos de instancia
Descripción
La instrucción "Abrir bloque de datos de instancia" permite abrir un bloque de datos (DB). El
número del bloque de datos se transmite al registro del DI. Los siguientes comandos del DI
acceden a los bloques correspondientes en función de los contenidos del registro.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Abrir bloque de datos de
instancia":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Bloque de
datos>

Input

DB_ANY

-

Bloque de datos que se abre.

Programación del PLC
Manual de programación y manejo, 11/2019

5159

Instrucciones
4.2 Instrucciones
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
Segmento 1
ಯ0RWRUB'%ಯ
231,

Segmento 2
ಯ7DJB2XWSXWಯ
ಯ'%;ಯ



En el segmento 1 se llama al bloque de datos "Motor_DB". El número del bloque de datos se
transmite al registro del DI. En el segmento 2 se consulta el operando "DBX0.0". El estado
lógico del operando "DBX0.0" se asigna al operando "Tag_Output".

Consulte también
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)

Control del tiempo de ejecución
COMPRESS: Comprimir la memoria de la CPU
Descripción
La instrucción "Comprimir la memoria de la CPU" comprime la memoria de trabajo de la CPU
o la memoria de carga RAM. Los huecos creados por haber borrado o cargado bloques, se
rellenan juntando los bloques existentes.
Con la llamada de la instrucción "Comprimir la memoria de la CPU" se lanza el proceso de
compresión. El proceso de compresión se reparte entre varios ciclos del programa. La
vigilancia del proceso de compresión se realiza mediante los valores de los distintos
parámetros. Si el parámetro BUSY de la instrucción tiene el valor "1", significa que el proceso
de compresión se está ejecutando todavía. El valor "1" del parámetro DONE indica que ha
finalizado el proceso de compresión. La información de error puede consultarse en el
parámetro RET_VAL.
Si se está ejecutando un proceso de compresión lanzado externamente, la llamada de la
instrucción "Comprimir la memoria de la CPU" origina un error.

5160

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Comprimir la memoria de la CPU":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

RET_VAL

Output

INT

I, Q, M, D, L

Información de error:
El parámetro RET_VAL de‐
vuelve un código de error
cuando ocurre un error du‐
rante la ejecución de la ins‐
trucción.

BUSY

Output

BOOL

I, Q, M, D, L

Información de si está activo
el proceso de compresión.

DONE

Output

BOOL

I, Q, M, D, L

Información de si ha finaliza‐
do el proceso de compresión.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error
El estado del proceso de compresión puede consultarse en los parámetros BUSY y DO‐
NE.

8091

Ya se está ejecutando un proceso de compresión lanzado externamente.

8092

La instrucción no se puede ejecutar porque se cumple una de las condiciones siguientes:
● La función "Borrar bloque" está activa.
● Una función de test y de puesta en servicio repercute sobre un bloque (p. ej. estado).
● La función "Copiar bloques" se ha activado por un impulso externo.
● La CPU H se encuentra en un proceso de acoplamiento o actualización.

8xyy

Encontrará más información de error en "Consulte también".

*Los códigos de error en el editor de programas se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)

Programación del PLC
Manual de programación y manejo, 11/2019

5161

Instrucciones
4.2 Instrucciones
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de FUP (Página 8005)

RE_TRIGR: Reiniciar tiempo de vigilancia del ciclo
Descripción
La instrucción "Reiniciar tiempo de vigilancia del ciclo" reinicia el tiempo de vigilancia del ciclo
de la CPU. El tiempo de vigilancia del ciclo se reinicia entonces con la duración ajustada en la
configuración de la CPU.
La instrucción "Reiniciar tiempo de vigilancia del ciclo" se puede llamar en todos los bloques
independientemente de la prioridad.
Si la instrucción se llama desde un bloque de prioridad superior, p. ej. en una alarma de
proceso o una alarma de diagnóstico, no se ejecuta la instrucción y la salida de habilitación
ENO se pone al estado lógico "0".
La instrucción "Reiniciar tiempo de vigilancia del ciclo" se ejecuta correctamente en un espacio
de tiempo (10 veces el ciclo máximo del programa), independientemente del número de
llamadas. Transcurrido ese tiempo, el ciclo del programa ya no puede prolongarse.

Parámetros
La instrucción "Reiniciar tiempo de vigilancia del ciclo" no tiene parámetros.

Consulte también
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)

STP: Finalizar programa
Descripción
La instrucción "Finalizar programa" conmuta la CPU al estado operativo STOP, con lo que se
finaliza la ejecución del programa. Los efectos al conmutar de RUN a STOP dependen de la
configuración de la CPU.
Si el resultado lógico (RLO) de la entrada de la instrucción es "1", la CPU pasa al estado
operativo STOP y se finaliza el procesamiento del programa. El estado lógico de la salida de
la instrucción no se evalúa.
Si el RLO de la entrada de la instrucción es "0", la instrucción no se ejecuta.

Parámetro
La instrucción "Finalizar programa" no tiene parámetros.

5162

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)

WAIT: Programar retardo
Descripción
La instrucción "Programar retardo" permite detener la ejecución del programa durante un
periodo predeterminado. El periodo se indica en microsegundos en el parámetro WT de la
instrucción.
Es posible programar tiempos de retardo de -32768 a 32767 microsegundos (μs). El tiempo de
retardo mínimo depende de la CPU utilizada y equivale al tiempo de ejecución de la instrucción.
La ejecución de la instrucción puede verse interrumpida por eventos de prioridad superior y no
arrojará información de error.
Válido para CPU S7-300:
En las CPU S7-300 (a excepción de S7-318), el tiempo de retardo programado con la
instrucción es un tiempo mínimo. Se prolonga con el tiempo de ejecución de las clases de
prioridad que intervienen y con las cargas del sistema.
Nota
Tiempo de retardo negativo
Si indica un tiempo de retardo negativo en el parámetro WT, la salida de habilitación ENO, o
el RLO y el bit BR arrojan el estado lógico FALSE. Un tiempo de retardo negativo no afecta a
la CPU. En KOP y FUP no se ejecutan las siguientes instrucciones vinculadas a la salida de
habilitación ENO.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Programar retardo":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

WT

Input

INT

I, Q, M, D, L, P o
constante

Tiempo de retardo en micro‐
segundos (μs)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Insertar elementos FUP (Página 8017)

Programación del PLC
Manual de programación y manejo, 11/2019

5163

Instrucciones
4.2 Instrucciones
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

PROTECT: Cambiar nivel de protección
Descripción
La instrucción "Cambiar nivel de protección" permite modificar el nivel de protección "1"
configurado para la CPU.
El nivel de protección "1" parametrizado con la opción activada "Eliminable por contraseña"
hace que sea necesario parametrizar una contraseña. Esta contraseña permite acceder en
escritura a la CPU protegida contra escritura mediante la instrucción "Cambiar nivel de
protección" durante el funcionamiento (p. ej. cargar).
El nivel de protección se especifica en el parámetro MODE de la instrucción. El nivel de
protección actual de la CPU se visualiza en la ventana de inspección en "Propiedades >
Protección".
La tabla siguiente muestra una explicación de los niveles de protección:
Nivel
de
pro‐
tec‐
ción

Explicación

1

Se permiten todas las funciones de PG. En el caso que exista un bloqueo de la legitimación de
la contraseña, este se elimina llamando la instrucción "Cambiar nivel de protección".

2

● El programa y la configuración de la CPU no se pueden modificar. El programa contenido
en la CPU se puede leer.
● Se permiten las funciones de control, observación y comunicación del proceso.
● Se permiten todas las funciones de información.
● Si conoce la contraseña válida, podrá desactivar la protección contra escritura ajustada.
● En el caso que exista un bloqueo de la legitimación de la contraseña, este se elimina
llamando la instrucción "Cambiar nivel de protección".

3

● Aun conociendo la contraseña válida, no podrá desactivar la protección contra lectura y
escritura ajustada.
● Si al llamar la instrucción "Cambiar nivel de protección" existe una conexión legitimada, la
llamada de la instrucción no tendrá ningún efecto en esta conexión.

Si se ha configurado el nivel de protección "2" o "3" para la CPU, la llamada de la instrucción
"Cambiar nivel de protección" no tiene efecto alguno.

5164

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
El efecto del nivel de protección "2" o "3" una vez ejecutada la instrucción "Cambiar nivel de
protección" puede consultarse en la lista parcial SZL con la ID de SZL W#16#0232 y el índice
W#16#0004.
Nota
La instrucción "Cambiar nivel de protección" permite ajustar un nivel de protección más bajo
que aquel ajustado con "Configurar hardware" de STEP 7. Supongamos que se ha configurado
el nivel de protección 3 y a continuación se llama la instrucción "Cambiar nivel de protección"
con el parámetro MODE = 12. Esto bloqueará la legitimación de la contraseña. Si la instrucción
se llama nuevamente con el parámetro MODE = 0 o 1, el nivel de protección 3 se mantiene y
será posible desactivar la protección de lectura y escritura introduciendo la contraseña válida.

Efectos de las transiciones de estado operativo en el nivel de protección
La tabla siguiente muestra qué efectos tienen las transiciones de estado operativo en el nivel
de protección ajustado con la instrucción "Cambiar nivel de protección".
Acción

Efectos en el nivel de protección

● Selector de modo en "STOP"

El nivel de protección se pone a "1". Se permiten
todas las funciones de PG.

● Conexión (POWER ON) sin respaldo
● Borrado total mediante el selector de modo
● Cambios de configuración y/o del programa en
el estado operativo "STOP" de la CPU S7-400

El sistema operativo pone el nivel de protección a
"1". Se permiten todas las funciones de PG.

● Arranque en frío
● Rearranque (en caliente)

En caso necesario, llamando la instrucción "Cam‐
biar nivel de protección" en el programa es posible
ajustar el nivel de protección en "2" o "3".

Conexión (POWER ON) respaldada

No cambia

Transición de estado operativo RUN/ARRANQUE/ No cambia
PARADA -> STOP (debida a la llamada de la ins‐
trucción "Finalizar programa" (STP), a errores del
programa sin el correspondiente OB de error o a
una acción del usuario).
S7-400: Rearranque por acción del usuario o au‐
tomáticamente tras conexión (POWER ON)

No cambia

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Cambiar nivel de protección":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

Programación del PLC
Manual de programación y manejo, 11/2019

5165

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

MODE

Input

WORD

I, Q, M, D, L o
constante

Nivel de protección
Valores posibles:
● W#16#0000: Ajuste del
nivel de protección "1"
● W#16#0001: Ajuste del
nivel de protección "2"
con legitimación de la
contraseña
● W#16#000C: Ajuste del
nivel de protección "3" sin
legitimación de la
contraseña
En el parámetro MODE tam‐
bién se pueden indicar cons‐
tantes.

RET_VAL

Output

INT

I, Q, M, D, L

Si ocurre un error durante la
ejecución, se emite una infor‐
mación de error.

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

La petición se ha ejecutado sin errores.

8090

Valor no admisible en el parámetro MODE.

80C3

En este momento los recursos necesarios están ocupados.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de FUP (Página 8005)

5166

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

CiR: Controlar proceso CiR
Descripción
La instrucción "Controlar proceso CiR" influye en el proceso CiR en el programa de usuario
como se indica a continuación:
● Bloquear el proceso CiR. En este caso, se rechazará siempre la carga de una configuración
modificada desde la programadora en la CPU. El bloqueo se aplica hasta que se elimina
con la instrucción "Controlar proceso CiR".
● El proceso CiR se puede bloquear de forma condicionada, indicando un límite superior para
el tiempo de sincronización CiR en el parámetro FRZ_TIME. En este caso, solo se permitirá
cargar una configuración modificada desde la programadora en la CPU si el tiempo de
sincronización CiR calculado en la CPU no excede el límite superior definido.
● Habilitar el proceso CiR. El límite superior del tiempo de sincronización CiR se establece al
valor predeterminado de 1 000 ms.
● Determina si el proceso CiR está habilitado o no. Si el proceso CiR está habilitado o lo está
condicionadamente, el límite superior actual del tiempo de sincronización CiR se indica en
el parámetro A_FT de la instrucción.
Nota
Durante el tiempo de sincronización CiR, las salidas están congeladas y las entradas no se
evalúan.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Controlar proceso CiR":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

MODE

Input

BYTE

I, Q, M, D, L o
constante

ID de la petición
Los valores admisibles del
parámetro MODE son:
● 0: Función de información
● 1: Habilitar proceso CiR
● 2: Bloquear proceso CiR
● 3: Bloquear proceso CiR
de forma condicionada.
El límite superior del
tiempo de sincronización
CiR se define en
FRZ_TIME.

Programación del PLC
Manual de programación y manejo, 11/2019

5167

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

FRZ_TIME

Input

TIME

I, Q, M, D, L o
constante

Límite superior del tiempo de
sincronización CiR en milise‐
gundos.
Rango de valores admisible:
60 ... 2500 ms (valor prede‐
terminado: 1000 ms)
El parámetro FRZ_TIME solo
es relevante cuando el pará‐
metro MODE se establece
en el valor "3".

RET_VAL

Output

INT

I, Q, M, D, L

Información de error
Si el parámetro MODE está a
"0", el parámetro RET_VAL
indica si el proceso CiR está
habilitado o no.

A_FT

Output

TIME

I, Q, M, D, L

Límite superior válido actual‐
mente del tiempo de sincro‐
nización CiR

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

La petición se ha ejecutado sin errores.
Este código de error solo se puede emitir si el parámetro MODE presenta el valor "1", "2"
o "3".

0001

El proceso CiR está habilitado.
Este código de error solo se puede emitir si el parámetro MODE está puesto al valor "0".

0002

El proceso CiR está bloqueado.

0003

El proceso CiR está bloqueado de forma condicionada.

8001

La CPU no está lista para un proceso CiR. Se está utilizando una CPU H en el sistema H
(modo "Individual") o una CPU estándar en modo multiprocesador.

8002

El valor del parámetro MODE no es admisible.

8003

El valor del parámetro FRZ_TIME no es admisible.

8xyy

Encontrará más información de error en "Consulte también".

Este código de error solo se puede emitir si el parámetro MODE está puesto al valor "0".
Este código de error solo se puede emitir si el parámetro MODE está puesto al valor "0".

*Los códigos de error que aparecen en el editor de programas se pueden representar como valores
enteros o hexadecimales. Encontrará más información sobre el cambio de los formatos de visualización
en "Consulte también".

5168

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
La instrucción "Controlar proceso CiR" permite programar p. ej. que no se lance ningún
proceso CiR en periodos en los que se requiera la capacidad máxima de la CPU para el
procesamiento.
Para ello debe llamarse la instrucción "Controlar proceso CiR" antes del inicio del periodo con
un aumento de la actividad de procesos en el programa y ejecutarla con el valor "2" (Bloquear
proceso CiR) en el parámetro MODE. Con ello se bloquea el proceso CiR.
Para volver a habilitar el proceso CiR tras finalizar el periodo de actividad aumentada del
proceso, la instrucción "Controlar proceso CiR" debe llamarse de nuevo y ejecutarse con el
valor "1" en el parámetro MODE. Como alternativa, el parámetro MODE se puede poner al
valor "3", con lo que el proceso CiR se bloquea de forma condicionada.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de FUP (Página 8005)

Operaciones lógicas con palabras
AND: Operación lógica Y
Descripción
La instrucción "Operación lógica Y" combina el valor de la entrada IN1 con el valor de la entrada
IN2 de bit en bit mediante una Y lógica y consultar el resultado en la salida OUT.
Al ejecutar la instrucción, el bit 0 del valor de la entrada IN1 se combina mediante una Y lógica
con el bit 0 del valor de la entrada IN2. El resultado se deposita en el bit 0 de la salida OUT. La
misma combinación lógica se realiza para todos los demás bits de los valores indicados.
El estado lógico del bit de resultado es "1" solo si el estado lógico de los dos bits que deben
combinarse lógicamente también es "1". Si el estado lógico de uno de los bits que deben
combinarse lógicamente es "0", se desactivará el bit de resultado correspondiente.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica Y":
Parámetro

Declaración

Tipo de datos

Ár