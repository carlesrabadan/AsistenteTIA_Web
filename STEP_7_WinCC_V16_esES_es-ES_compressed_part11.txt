a tabla siguiente muestra las posibilidades de conversión implícita del tipo de datos TOD:
Origen

TOD

Destino

BOOL

Con

Sin

Verificación
CEI

Verificación
CEI

-

-

Explicación

Sin conversión implícita

BYTE

-

-

WORD

-

-

DWORD

-

X

El patrón de bits del valor de origen se transfiere sin cambios al tipo
de datos de destino. El resultado de la conversión equivale al nú‐
mero de milisegundos desde el inicio del día (0:00 horas).

SINT

-

-

Sin conversión implícita

USINT

-

-

INT

-

-

UINT

-

-

DINT

-

X

UDINT

-

X

El patrón de bits del valor de origen se transfiere sin cambios al tipo
de datos de destino. El resultado de la conversión equivale al nú‐
mero de milisegundos desde el inicio del día (0:00 horas).

REAL

-

-

Sin conversión implícita

LREAL

-

-

TIME

-

X

El patrón de bits del valor de origen se transfiere sin cambios al tipo
de datos de destino. El resultado de la conversión equivale al nú‐
mero de milisegundos desde el inicio del día (0:00 horas).

DTL

-

-

Sin conversión implícita

DATE

-

-

STRING

-

-

WSTRING

-

-

CHAR

-

-

WCHAR

-

-

x: Conversión posible
-: Conversión no posible

Programación del PLC
Manual de programación y manejo, 11/2019

523

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Consulte también
TOD (TIME_OF_DAY) (Página 268)
Activar o desactivar la verificación CEI (Página 508)
Sinopsis de la conversión de tipos de datos (Página 506)
Conversión explícita de TOD (Página 568)

Conversión implícita de DTL
Posibilidades de conversión implícita
La conversión implícita del tipo de datos DTL no es posible.

Consulte también
Conversión explícita de DTL (Página 569)

524

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

3.16.2.7

Cadenas de caracteres

Conversión implícita de CHAR
Posibilidades de conversión implícita
La tabla siguiente muestra las posibilidades de conversión implícita del tipo de datos CHAR:
Origen

CHAR

Destino

Con

Sin

Verificación
CEI

Verificación
CEI

BOOL

-

-

Sin conversión implícita

BYTE

-

X

El patrón de bits del valor de origen se transfiere sin cambios y jus‐
tificado a la derecha al tipo de datos de destino. El resto de los bits
se rellenan con "0" desde la izquierda.

WORD

-

X

DWORD

-

X

SINT

-

X

USINT

-

X

INT

-

X

UINT

-

X

DINT

-

X

UDINT

-

X

REAL

-

-

Explicación

Sin conversión implícita

LREAL

-

-

TIME

-

-

DTL

-

-

TOD

-

-

DATE

-

-

WCHAR

-

-

STRING

X

X

El STRING se acorta hasta la longitud 1 y contiene el carácter.

WSTRING

-

-

Sin conversión implícita

x: Conversión posible
-: Conversión no posible

Consulte también
CHAR (Página 273)
Activar o desactivar la verificación CEI (Página 508)
Sinopsis de la conversión de tipos de datos (Página 506)
Conversión explícita de CHAR (Página 571)

Programación del PLC
Manual de programación y manejo, 11/2019

525

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Conversión implícita de WCHAR
Posibilidades de conversión implícita
La tabla siguiente muestra las posibilidades para la conversión implícita del tipo de datos
WCHAR:
Origen

WCHAR

Destino

BOOL

Con

Sin

Verificación
CEI

Verificación
CEI

-

-

Sin conversión implícita
El patrón de bits del valor de origen se transfiere sin cambios y jus‐
tificado a la derecha al tipo de datos de destino. El resto de los bits
se rellenan con "0" desde la izquierda.

BYTE

-

X

WORD

-

X

DWORD

-

X

SINT

-

X

USINT

-

X

INT

-

X

UINT

-

X

DINT

-

X

UDINT

-

X

REAL

-

-

LREAL

-

-

TIME

-

-

DTL

-

-

TOD

-

-

DATE

-

-

CHAR

-

-

STRING

-

-

WSTRING

X

X

Explicación

Sin conversión implícita

El WSTRING se acorta hasta la longitud 1 y contiene el carácter.

x: Conversión posible
-: Conversión no posible

526

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Conversión implícita de STRING
Posibilidades de conversión implícita
La tabla siguiente muestra las posibilidades de conversión implícita del tipo de datos STRING:
Origen

STRING

Destino

BOOL

Con

Sin

Verificación
CEI

Verificación
CEI

-

-

Explicación

Sin conversión implícita

BYTE

-

-

WORD

-

-

DWORD

-

-

SINT

-

-

USINT

-

-

INT

-

-

UINT

-

-

DINT

-

-

UDINT

-

-

REAL

-

-

LREAL

-

-

TIME

-

-

DTL

-

-

DATE

-

-

TOD

-

-

CHAR

-

X

Se devuelve el primer carácter del STRING si el STRING contiene
uno o más caracteres. De lo contrario, el carácter se muestra con la
codificación $00.

WCHAR

-

-

Sin conversión implícita

WSTRING

-

-

x: Conversión posible
-: Conversión no posible

Consulte también
Conversión explícita de STRING (Página 573)

Programación del PLC
Manual de programación y manejo, 11/2019

527

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Conversión implícita de WSTRING
Posibilidades de conversión implícita
La tabla siguiente muestra las posibilidades para la conversión implícita del tipo de datos
WSTRING:
Origen

WSTRING

Destino

Con

Sin

Verificación
CEI

Verificación
CEI

Explicación

BOOL

-

-

BYTE

-

-

WORD

-

-

DWORD

-

-

SINT

-

-

USINT

-

-

INT

-

-

UINT

-

-

DINT

-

-

UDINT

-

-

REAL

-

-

LREAL

-

-

TIME

-

-

DTL

-

-

DATE

-

-

TOD

-

-

CHAR

-

-

WCHAR

-

X

Se devuelve el primer carácter del WSTRING si el WSTRING con‐
tiene uno o varios caracteres. De lo contrario, el carácter se muestra
con la codificación $0000.

STRING

-

-

Sin conversión implícita

Sin conversión implícita

x: Conversión posible
-: Conversión no posible

528

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

3.16.3

Conversiones explícitas

3.16.3.1

Números binarios

Conversión explícita de BOOL
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos BOOL y
las correspondientes instrucciones:
Origen

Destino

Conversión

Explicación

Nemónicos de la instrucción

BOOL

BYTE

X

WORD

X

DWORD

X

SINT

X

En el tipo de datos de destino sola‐ BOOL_TO_BYTE
mente se activa el LSB (Least Sig‐ BOOL_TO_WORD
nificant Bit). La salida de habilita‐
BOOL_TO_DWORD
ción ENO es siempre "1".
BOOL_TO_SINT

USINT

X

BOOL_TO_USINT

INT

X

BOOL_TO_INT

UINT

X

BOOL_TO_UINT

DINT

X

BOOL_TO_DINT

UDINT

X

REAL

-

LREAL

-

-

TIME

-

-

DTL

-

-

TOD

-

-

DATE

-

-

STRING

-

-

WSTRING

-

-

CHAR

-

-

WCHAR

-

-

BOOL_TO_UDINT
Sin conversión explícita

-

x: Conversión posible
- : Conversión no posible

Consulte también
BOOL (bit) (Página 245)
Conversión implícita de BYTE (Página 510)
Sinopsis de la conversión de tipos de datos (Página 506)

Programación del PLC
Manual de programación y manejo, 11/2019

529

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Secuencias de bits
Conversión explícita de BYTE
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos BYTE y
las correspondientes instrucciones:
Origen

Destino

Conversión

Explicación

Nemónicos de la
instrucción

BYTE

1)

BOOL

X

Pueden darse las siguientes posibilidades: BYTE_TO_BOOL
● Cuando el valor de origen es "0", el tipo
de datos de destino también es "0" y la
salida de habilitación ENO es "1".
● Si en el valor de origen solamente es
"1" el LSB (Least Significant Bit), el tipo
de datos de destino también es "1" y la
salida de habilitación ENO es "1".
● Si en el valor de origen hay bits
distintos al LSB, el tipo de datos de
destino se ajusta según el LSB y la
salida de habilitación ENO es "0".

WORD1)
DWORD

530

X
1)

X

BYTE_TO_WORD
El patrón de bits del valor de origen se
transfiere sin cambios y justificado a la de‐ BYTE_TO_DWORD
recha al tipo de datos de destino.
BYTE_TO_SINT

SINT

X

USINT

X

BYTE_TO_USINT

INT

X

BYTE_TO_INT

UINT

X

BYTE_TO_UINT

DINT

X

BYTE_TO_DINT

UDINT

X

BYTE_TO_UDINT

REAL

-

LREAL

-

TIME

X

BYTE_TO_TIME
El patrón de bits del valor de origen se
transfiere sin cambios y justificado a la de‐
recha al tipo de datos de destino.

DTL

-

Sin conversión explícita

TOD

X

DATE

X

BYTE_TO_TOD
El patrón de bits del valor de origen se
transfiere sin cambios y justificado a la de‐ BYTE_TO_DATE
recha al tipo de datos de destino.

STRING

-

Sin conversión explícita

WSTRING

-

CHAR

X

WCHAR

X

Sin conversión explícita

-

-

-

BYTE_TO_CHAR
El patrón de bits del valor de origen se
transfiere sin cambios y justificado a la de‐ BYTE_TO_WCHAR
recha al tipo de datos de destino.

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200
Origen

Destino

Conversión

Explicación

Nemónicos de la
instrucción

x: Conversión posible
- : Conversión no posible
Las secuencias de bits (BYTE, WORD, DWORD) se interpretan como número entero sin signo con la misma longitud de
bits. El tipo de datos BYTE se interpreta como USINT, WORD como UINT y DWORD como UDINT.

1)

Consulte también
BYTE (Página 246)
Conversión implícita de BYTE (Página 510)
Sinopsis de la conversión de tipos de datos (Página 506)

Programación del PLC
Manual de programación y manejo, 11/2019

531

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Conversión explícita de WORD
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos WORD
y las correspondientes instrucciones:

532

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Origen
WORD

1)

Destino

Conversión

Explicación

Nemónicos de la instrucción

BOOL

X

Pueden darse las siguientes posibilida‐
des:

WORD_TO_BOOL

● Cuando el valor de origen es "0", el
tipo de datos de destino también es
"0" y la salida de habilitación ENO es
"1".
● Si en el valor de origen solamente es
"1" el LSB (Least Significant Bit), el
tipo de datos de destino también es
"1" y la salida de habilitación ENO es
"1".
● Si en el valor de origen hay bits
distintos al LSB, el tipo de datos de
destino se ajusta según el LSB y la
salida de habilitación ENO es "0".
BYTE1)

X
X

El patrón de bits del valor de origen se
transfiere sin cambios y justificado a la
derecha al tipo de datos de destino.

WORD_TO_BYTE

DWORD1)
SINT

X

ENO = TRUE

WORD_TO_SINT

WORD_TO_DWORD

#sint1 := WORD_TO_SINT(16#FFFF); //
-1 a
#sint1 := WORD_TO_SINT(16#FF80); //
-128
#sint1 := WORD_TO_SINT(16#0); // 0 a
#sint1 := WORD_TO_SINT(16#007F); //
127
ENO = FALSE
#sint1 := WORD_TO_SINT(16#FF7F); //
-129 a
#sint1 := WORD_TO_SINT(16#8000); //
-32768
#sint1 := WORD_TO_SINT(16#0080); //
128 a
#sint1 := WORD_TO_SINT(16#7FFF); //
32767
USINT

X

INT

X

UINT

X

DINT

X

El patrón de bits del valor de origen se
transfiere sin cambios y justificado a la
derecha al tipo de datos de destino.

WORD_TO_USINT
WORD_TO_INT
WORD_TO_UINT
WORD_TO_DINT

UDINT

X

REAL

-

LREAL

-

TIME

X

El patrón de bits del valor de origen se
transfiere sin cambios y justificado a la
derecha al tipo de datos de destino.

WORD_TO_TIME

DTL

-

Sin conversión explícita

-

TOD

X

El patrón de bits del valor de origen se
transfiere sin cambios y justificado a la

WORD_TO_TOD

Programación del PLC
Manual de programación y manejo, 11/2019

WORD_TO_UDINT
Sin conversión explícita

-

533

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200
Origen

Destino

Conversión

Explicación

Nemónicos de la instrucción

DATE

X

derecha al tipo de datos de destino.

WORD_TO_DATE

STRING

-

Sin conversión explícita

-

WSTRING

-

CHAR

X

WCHAR

X

WORD_BCD16

INT

X

BCD16

INT

X

El patrón de bits del valor de origen se
transfiere sin cambios y justificado a la
derecha al tipo de datos de destino.

WORD_TO_CHAR
WORD_TO_WCHAR

El valor que debe convertirse tiene el ti‐ WORD_BCD16_TO_INT
po de datos WORD y se aplica como va‐ BCD16_TO_INT
lor codificado en BCD entre -999 y +999.
Tras la conversión, el resultado es un
número entero (representación binaria)
del tipo INT. Se produce una conversión
auténtica. Si el patrón de bits incluye una
tétrada no válida, no se dispara ningún
error síncrono, sino que solamente se
activa el bit de estado OV.

x: Conversión posible
- : Conversión no posible
1)
Las secuencias de bits (BYTE, WORD, DWORD) se interpretan como número entero sin signo con la misma longitud de
bits. El tipo de datos BYTE se interpreta como USINT, WORD como UINT y DWORD como UDINT.

Consulte también
WORD (Página 247)
Conversión implícita de WORD (Página 511)
Sinopsis de la conversión de tipos de datos (Página 506)

534

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Conversión explícita de DWORD
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos DWORD
y las correspondientes instrucciones:

Programación del PLC
Manual de programación y manejo, 11/2019

535

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Origen
DWORD

1)

Destino

Conversión

Explicación

Nemónicos de la instrucción

BOOL

X

Pueden darse las siguientes posibili‐
dades:

DWORD_TO_BOOL

● Cuando el valor de origen es "0",
el tipo de datos de destino también
es "0" y la salida de habilitación
ENO es "1".
● Si en el valor de origen solamente
es "1" el LSB (Least Significant
Bit), el tipo de datos de destino
también es "1" y la salida de
habilitación ENO es "1".
● Si en el valor de origen hay bits
distintos al LSB, el tipo de datos de
destino se ajusta según el LSB y la
salida de habilitación ENO es "0".
BYTE1)

X

WORD1)

X

El patrón de bits del valor de origen se DWORD_TO_BYTE
transfiere sin cambios y justificado a la DWORD_TO_WORD
derecha al tipo de datos de destino.

SINT

X

ENO = TRUE

DWORD_TO_SINT

#sint1 :=
DWORD_TO_SINT(16#FFFF_FFFF);
// -1 bis
#sint1 :=
DWORD_TO_SINT(16#FFFF_FF80);
// -128
#sint1 := DWORD_TO_SINT(16#0); //
0 bis
#sint1 :=
DWORD_TO_SINT(16#0000_007F); /
/ 127
ENO = FALSE
#sint1 :=
DWORD_TO_SINT(16#FFFF_FF7F);
// -129
#sint1 :=
DWORD_TO_SINT(16#8000_0000);
// -2147483648
#sint1 :=
DWORD_TO_SINT(16#0000_0080);
// 128 bis
#sint1 :=
DWORD_TO_SINT(16#7FFF_FFFF);
// 2147483647
USINT

X

El patrón de bits del valor de origen se DWORD_TO_USINT
transfiere sin cambios y justificado a la
derecha al tipo de datos de destino.

INT

X

ENO = TRUE

DWORD_TO_INT

#int1 :=
DWORD_TO_INT(16#FFFF_FFFF); //

536

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200
Origen

Destino

Conversión

Explicación

Nemónicos de la instrucción

-1 bis
#int1 :=
DWORD_TO_INT(16#FFFF_8000); //
-32768
#int1 := DWORD_TO_INT(16#0); // 0
bis
#int1 :=
DWORD_TO_INT(16#0000_7FFF); //
32767
ENO = FALSE
#int1 :=
DWORD_TO_INT(16#FFFF_7FFF); //
-32769
#int1 :=
DWORD_TO_INT(16#8000_0000); //
-2147483648
#int1 :=
DWORD_TO_INT(16#8000); // 32768
bis
#int1 :=
DWORD_TO_INT(16#7FFF_FFFF); //
2147483647
El patrón de bits del valor de origen se DWORD_TO_UINT
transfiere sin cambios y justificado a la DWORD_TO_DINT
derecha al tipo de datos de destino.
DWORD_TO_UDINT

UINT

X

DINT

X

UDINT

X

REAL

X

El patrón de bits del valor de origen se DWORD_TO_REAL
transfiere sin cambios y justificado a la
derecha al tipo de datos de destino. Si
no se producen errores durante la
conversión, el estado lógico de ENO =
1; si se produce un error durante la
ejecución, el estado lógico de ENO =
0.

LREAL

-

Sin conversión explícita

TIME

X

El patrón de bits del valor de origen se DWORD_TO_TIME
transfiere sin cambios y justificado a la
derecha al tipo de datos de destino.

DTL

-

Sin conversión explícita

TOD

X

DATE

X

El patrón de bits del valor de origen se DWORD_TO_TOD
transfiere sin cambios y justificado a la DWORD_TO_DATE
derecha al tipo de datos de destino.

STRING

-

Sin conversión explícita

WSTRING

-

CHAR

X

WCHAR

X

Programación del PLC
Manual de programación y manejo, 11/2019

-

-

-

El patrón de bits del valor de origen se DWORD_TO_CHAR
transfiere sin cambios y justificado a la DWORD_TO_WCHAR
derecha al tipo de datos de destino.

537

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200
Origen

Destino

Conversión

Explicación

DWORD_BCD32

DINT

X

BCD32

DINT

X

El valor que debe convertirse tiene el DWORD_BCD32_TO_DINT
tipo de datos DWORD y se aplica co‐ BCD32_TO_DINT
mo valor codificado en BCD entre
-9999999 y +9999999. Tras la conver‐
sión, el resultado es un número entero
(representación binaria) del tipo
DINT. Se produce una conversión au‐
téntica. Si el patrón de bits incluye una
tétrada no válida, no se dispara nin‐
gún error síncrono, sino que solamen‐
te se activa el bit de estado OV.

Nemónicos de la instrucción

x: Conversión posible
- : Conversión no posible
Las secuencias de bits (BYTE, WORD, DWORD) se interpretan como número entero sin signo con la misma longitud de
bits. El tipo de datos BYTE se interpreta como USINT, WORD como UINT y DWORD como UDINT.

1)

Consulte también
DWORD (Página 248)
Conversión implícita de DWORD (Página 512)
Sinopsis de la conversión de tipos de datos (Página 506)

538

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

3.16.3.2

Enteros

Conversión explícita de SINT
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos SINT y las
correspondientes instrucciones:

Programación del PLC
Manual de programación y manejo, 11/2019

539

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Origen

Destino

Conversión

Explicación

Nemónicos de la
instrucción

SINT

BOOL

X

Pueden darse las siguientes posibilidades: SINT_TO_BOOL
● Cuando el valor de origen es "0", el tipo
de datos de destino también es "0" y la
salida de habilitación ENO es "1".
● Si en el valor de origen solamente es
"1" el LSB (Least Significant Bit), el tipo
de datos de destino también es "1" y la
salida de habilitación ENO es "1".
● Si en el valor de origen hay bits
distintos al LSB, el tipo de datos de
destino se ajusta según el LSB y la
salida de habilitación ENO es "0".

540

BYTE1)

X

WORD1)

X

DWORD1)

X

USINT

X

INT

X

UINT

X

El patrón de bits del valor de origen se
transfiere sin cambios y justificado a la de‐
recha al tipo de datos de destino. Si se
convierte un valor negativo a un tipo de
datos sin signo, la salida de habilitación
ENO se pone a "0".
El patrón de bits del valor de origen se
transfiere al tipo de datos de destino sin
convertir. (Del valor "-1" (16#FF) se obtie‐
ne el valor "-1" (16#FFFFFFFF). Cuando
se convierte un valor negativo en un tipo de
datos de destino sin signo, la salida de ha‐
bilitación ENO se pone a "0".

SINT_TO_BYTE
SINT_TO_WORD
SINT_TO_DWOR
D
SINT_TO_USINT
SINT_TO_INT
SINT_TO_UINT

DINT

X

UDINT

X

SINT_TO_DINT

REAL

X

LREAL

X

TIME

X

SINT_TO_TIME
El valor se transfiere al tipo de datos de
destino y se interpreta como milisegundos.

DTL

-

Sin conversión explícita

TOD

X

SINT_TO_TOD
El patrón de bits del valor de origen se
transfiere al tipo de datos de destino sin
convertir. (Del valor "-1" (16#FF) se obtie‐
ne el valor "-1" (16#FFFFFFFF). Cuando
se convierte un valor negativo en un tipo de
datos de destino sin signo, la salida de ha‐
bilitación ENO se pone a "0". (Interpreta‐
ción en milisegundos desde 0:0)

DATE

X

SINT_TO_DATE
El patrón de bits del valor de origen se
transfiere al tipo de datos de destino sin
convertir. (Del valor "-1" (16#FF) se obtie‐
ne el valor "-1" (16#FFFFFFFF). Cuando
se convierte un valor negativo en un tipo de
datos de destino sin signo, la salida de ha‐
bilitación ENO se pone a "0". (Interpreta‐
ción en días desde 1990-1-1)

SINT_TO_UDINT

El valor se convierte al formato del tipo de SINT_TO_REAL,
NORM_X
datos de destino (p. ej. el valor "-1" se
transforma en el valor "-1.0" con la instruc‐ SINT_TO_LREAL,
ción "Convertir valor" (CONVERT)).
NORM_X

-

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200
Origen

Destino

Conversión

Explicación

Nemónicos de la
instrucción

STRING

X

WSTRING

X

El valor se convierte en una cadena de ca‐ SINT_TO_STRIN
G, S_CONV,
racteres.
VAL_STRG
● KOP / FUP:

SINT_TO_WSTRI
los primeros caracteres de la cadena
se rellenan con espacios. El número de NG
espacios varía en función de la longitud
del valor numérico.
Los valores numéricos positivos se
emiten sin signo.

● AWL / SCL:
no se insertan espacios.
La cadena de caracteres se representa
precedida de signo.
Si se rebasa la longitud de la cadena de
caracteres, la salida de habilitación ENO
se pone a "0".
CHAR1)

X

WCHAR

1)

X

SINT_TO_CHAR
El patrón de bits del valor de origen se
transfiere al tipo de datos de destino sin
SINT_TO_WCHA
convertir. (Del valor "-1" (16#FF) se obtie‐ R
ne el valor "-1" (16#FFFFFFFF). Cuando
se convierte un valor negativo en un tipo de
datos de destino sin signo, la salida de ha‐
bilitación ENO se pone a "0".

x: Conversión posible
- : Conversión no posible
Las secuencias de bits (BYTE, WORD, DWORD) y el tipo de datos CHAR se amplían en primer lugar
hasta el ancho necesario incluido el signo, y a continuación se copian los bits. La interpretación se
decide en función del tipo de origen.
1)

Consulte también
SINT (enteros de 8 bits) (Página 251)
Conversión implícita de SINT (Página 513)
Sinopsis de la conversión de tipos de datos (Página 506)

Programación del PLC
Manual de programación y manejo, 11/2019

541

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Conversión explícita de USINT
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos USINT y
las correspondientes instrucciones:

542

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Origen

Destino

Conversión

Explicación

Nemónicos de la instruc‐
ción

USINT

BOOL

X

Pueden darse las siguientes posibili‐ USINT_TO_BOOL
dades:
● Cuando el valor de origen es "0",
el tipo de datos de destino
también es "0" y la salida de
habilitación ENO es "1".
● Si en el valor de origen
solamente es "1" el LSB (Least
Significant Bit), el tipo de datos
de destino también es "1" y la
salida de habilitación ENO es "1".
● Si en el valor de origen hay bits
distintos al LSB, el tipo de datos
de destino se ajusta según el
LSB y la salida de habilitación
ENO es "0".
El patrón de bits del valor de origen USINT_TO_BYTE
se transfiere sin cambios y justificado USINT_TO_WORD
a la derecha al tipo de datos de des‐
USINT_TO_DWORD
tino.

BYTE1)

X

WORD1)

X

DWORD1)

X

SINT

X

El patrón de bits del valor de origen USINT_TO_SINT
se transfiere sin cambios al tipo de
datos de destino. Si al convertir se
cambia el signo, la salida de habilita‐
ción ENO se pone a "0".

INT

X

UINT

X

DINT

X

El patrón de bits del valor de origen USINT_TO_INT
se transfiere sin cambios y justificado USINT_TO_UINT
a la derecha al tipo de datos de des‐
USINT_TO_DINT
tino.
USINT_TO_UDINT

UDINT

X

REAL

X

LREAL

X

TIME

El valor se convierte al formato del
tipo de datos de destino (p. ej. el va‐
lor "1" se transforma en el valor "1.0"
con la instrucción "Convertir valor"
(CONVERT)).

USINT_TO_REAL,
NORM_X

X

El valor se transfiere al tipo de datos
de destino y se interpreta como mili‐
segundos.

USINT_TO_TIME

DTL

-

Sin conversión explícita

-

TOD

X

DATE

X

El patrón de bits del valor de origen USINT_TO_TOD
se transfiere sin cambios y justificado USINT_TO_DATE
a la derecha al tipo de datos de des‐
tino.

STRING

X

WSTRING X
CHAR1)

Programación del PLC
Manual de programación y manejo, 11/2019

X

El valor se convierte en una cadena
de caracteres. Si se rebasa la longi‐
tud de la cadena de caracteres, la
salida de habilitación ENO se pone a
"0".

USINT_TO_LREAL,
NORM_X

USINT_TO_STRING,
S_CONV, VAL_STRG
USINT_TO_WSTRING

El patrón de bits del valor de origen USINT_TO_CHAR
se transfiere al tipo de datos de des‐

543

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200
Origen

Destino

Conversión

Explicación

Nemónicos de la instruc‐
ción

WCHAR1)

X

tino sin convertir.

USINT_TO_WCHAR

x: Conversión posible
- : Conversión no posible
Las secuencias de bits (BYTE, WORD, DWORD) y el tipo de datos CHAR se amplían en primer lugar
hasta el ancho necesario (el signo inexistente se sustituye por ceros), y a continuación se copian los
bits. La interpretación se decide en función del tipo de origen.

1)

Consulte también
USINT (enteros de 8 bits) (Página 252)
Conversión implícita de USINT (Página 514)
Sinopsis de la conversión de tipos de datos (Página 506)

544

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Conversión explícita de INT
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos INT y las
correspondientes instrucciones:

Programación del PLC
Manual de programación y manejo, 11/2019

545

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Origen

Destino

Conversión Explicación

INT

BOOL

X

Nemónicos de la ins‐
trucción

Pueden darse las siguientes posibilida‐ INT_TO_BOOL
des:
● Cuando el valor de origen es "0", el
tipo de datos de destino también es
"0" y la salida de habilitación ENO
es "1".
● Si en el valor de origen solamente
es "1" el LSB (Least Significant Bit),
el tipo de datos de destino también
es "1" y la salida de habilitación
ENO es "1".
● Si en el valor de origen hay bits
distintos al LSB, el tipo de datos de
destino se ajusta según el LSB y la
salida de habilitación ENO es "0".

546

BYTE1)

X

WORD1)

X

DWORD1)

X

SINT

X

USINT

X

UINT

X

DINT

X

UDINT

X

REAL

X

LREAL

X

TIME

X

El patrón de bits del valor de origen se
transfiere sin cambios y justificado a la
derecha al tipo de datos de destino. Si
se convierte un valor negativo a un tipo
de datos sin signo, la salida de habili‐
tación ENO se pone a "0".

INT_TO_BYTE
INT_TO_WORD
INT_TO_DWORD

El patrón de bits del valor de origen se
transfiere al tipo de datos de destino
sin convertir. (Del valor "-1" (16#FF) se
obtiene el valor "-1" (16#FFFFFFFF)).
Si se convierte un valor negativo a un
tipo de datos sin signo, la salida de ha‐
bilitación ENO se pone a "0".

INT_TO_SINT

El valor se convierte al formato del tipo
de datos de destino (p. ej. el valor "-1"
se transforma en el valor "-1.0" con la
instrucción "Convertir valor" (CON‐
VERT)).

INT_TO_REAL,
NORM_X

INT_TO_USINT
INT_TO_UINT
INT_TO_DINT
INT_TO_UDINT

INT_TO_LREAL,
NORM_X

El valor se transfiere al tipo de datos de INT_TO_TIME
destino y se interpreta como milisegun‐
dos.

DTL

-

Sin conversión explícita

TOD

X

El patrón de bits del valor de origen se INT_TO_TOD
transfiere al tipo de datos de destino
sin convertir. (Del valor "-1" (16#FF) se
obtiene el valor "-1" (16#FFFFFFFF)).
Si se convierte un valor negativo a un
tipo de datos sin signo, la salida de ha‐
bilitación ENO se pone a "0". (Interpre‐
tación en milisegundos desde 0:0; ve‐
rificación de límite de 24 h)

-

DATE

X

El patrón de bits del valor de origen se
transfiere al tipo de datos de destino
sin convertir. (Del valor "-1" (16#FF) se

INT_TO_DATE

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200
Origen

Destino

Conversión Explicación

Nemónicos de la ins‐
trucción

obtiene el valor "-1" (16#FFFFFFFF)).
Si se convierte un valor negativo a un
tipo de datos sin signo, la salida de ha‐
bilitación ENO se pone a "0". (Interpre‐
tación en días desde 1990-1-1; verifi‐
cación de valor negativo)
STRING

X

El valor se convierte en una cadena de
caracteres.

INT_TO_STRING,
S_CONV, VAL_STRG)

WSTRING

X

● KOP / FUP:
los primeros caracteres de la
cadena se rellenan con espacios.
El número de espacios varía en
función de la longitud del valor
numérico.
Los valores numéricos positivos se
emiten sin signo.

INT_TO_WSTRING

● AWL / SCL:
no se insertan espacios.
La cadena de caracteres se
representa precedida de signo.
Si se rebasa la longitud de la cadena
de caracteres, la salida de habilitación
ENO se pone a "0".
CHAR1)

X

WCHAR

X

BCD16

X

BCD16_WO
RD

X

1)

El patrón de bits del valor de origen se INT_TO_CHAR
transfiere al tipo de datos de destino
INT_TO_WCHAR
sin convertir. (Del valor "-1" (16#FF) se
obtiene el valor "-1" (16#FFFFFFFF)).
Si se convierte un valor negativo a un
tipo de datos sin signo, la salida de ha‐
bilitación ENO se pone a "0".
El valor que debe convertirse tiene el INT_TO_BCD16
tipo INT y se aplica como número en‐ INT_TO_BCD16_WO
tero con un valor entre -999 y +999.
RD
Tras la conversión, el resultado es un
número codificado en BCD del tipo
WORD. Se produce una conversión
auténtica. Si el valor está fuera del ran‐
go de destino, no se dispara ningún
error síncrono, sino que solamente se
activa el bit de estado OV.

x: Conversión posible
- : Conversión no posible
Las secuencias de bits (BYTE, WORD, DWORD) y el tipo de datos CHAR se amplían en primer lugar
hasta el ancho necesario incluido el signo, y a continuación se copian los bits. La interpretación se
decide en función del tipo de origen.

1)

Programación del PLC
Manual de programación y manejo, 11/2019

547

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Consulte también
INT (enteros de 16 bits) (Página 253)
Conversión implícita de INT (Página 515)
Sinopsis de la conversión de tipos de datos (Página 506)

548

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Conversión explícita de UINT
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos UINT y
las correspondientes instrucciones:

Programación del PLC
Manual de programación y manejo, 11/2019

549

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Origen

Destino

Conversión

Explicación

Nemónicos de la instruc‐
ción

UINT

BOOL

X

Pueden darse las siguientes posibili‐ UINT_TO_BOOL
dades:
● Cuando el valor de origen es "0",
el tipo de datos de destino
también es "0" y la salida de
habilitación ENO es "1".
● Si en el valor de origen
solamente es "1" el LSB (Least
Significant Bit), el tipo de datos
de destino también es "1" y la
salida de habilitación ENO es "1".
● Si en el valor de origen hay bits
distintos al LSB, el tipo de datos
de destino se ajusta según el
LSB y la salida de habilitación
ENO es "0".

550

BYTE1)

X

WORD1)

X

El patrón de bits del valor de origen
se transfiere sin cambios y justificado
a la derecha al tipo de datos de des‐
tino. Si en este proceso se pierden
bits, la salida de habilitación ENO se
pone a "0".

UINT_TO_BYTE
UINT_TO_WORD

DWORD1)

X

SINT

X

UINT_TO_DWORD

USINT

X

INT

X

El patrón de bits del valor de origen
se transfiere sin cambios al tipo de
datos de destino. Si al convertir se
cambia el bit de signo, la salida de
habilitación ENO se pone a "0".

DINT

X

UDINT

X

El patrón de bits del valor de origen UINT_TO_DINT
se transfiere sin cambios y justificado UINT_TO_UDINT
a la derecha al tipo de datos de des‐
tino.

REAL

X

LREAL

X

TIME

UINT_TO_SINT
UINT_TO_USINT
UINT_TO_INT

El valor se convierte al formato del
tipo de datos de destino (p. ej. el va‐
lor "1" se transforma en el valor "1.0"
con la instrucción "Convertir valor"
(CONVERT)).

UINT_TO_REAL,
NORM_X

X

El valor se transfiere al tipo de datos
de destino y se interpreta como mili‐
segundos.

UINT_TO_TIME

DTL

-

Sin conversión explícita

-

TOD

X

El patrón de bits del valor de origen UINT_TO_TOD
se transfiere al tipo de datos de des‐
tino sin convertir. (Del valor "-1"
(16#FF) se obtiene el valor "-1"
(16#FFFFFFFF). Cuando se convier‐
te un valor negativo en un tipo de da‐
tos de destino sin signo, la salida de
habilitación ENO se pone a "0". (In‐

UINT_TO_LREAL,
NORM_X

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200
Origen

Destino

Conversión

Explicación

Nemónicos de la instruc‐
ción

terpretación en milisegundos desde
0:0; verificación de límite de 24 h)
DATE

X

El patrón de bits del valor de origen UINT_TO_DATE,
se transfiere al tipo de datos de des‐ T_CONV
tino sin convertir. (Del valor "-1"
(16#FF) se obtiene el valor "-1"
(16#FFFFFFFF). Cuando se convier‐
te un valor negativo en un tipo de da‐
tos de destino sin signo, la salida de
habilitación ENO se pone a "0". (In‐
terpretación en días desde 1990-1-1;
verificación de valor negativo)

STRING

X

El valor se convierte en una cadena
de caracteres. Si se rebasa la longi‐
tud de la cadena de caracteres, la
salida de habilitación ENO se pone a
"0".

UINT_TO_STRING,
S_CONV, VAL_STRG

El patrón de bits del valor de origen
se transfiere sin cambios al tipo de
datos de destino. Si se produce un
desbordamiento, la salida de habili‐
tación ENO se pone a "0".

UINT_TO_CHAR

WSTRING X
CHAR1)

X

WCHAR

1)

X

UINT_TO_WSTRING

UINT_TO_WCHAR

x: Conversión posible
- : Conversión no posible
Las secuencias de bits (BYTE, WORD, DWORD, LWORD) y el tipo de datos CHAR se amplían en
primer lugar hasta el ancho necesario (el signo inexistente se sustituye por ceros), y a continuación se
copian los bits. La interpretación se decide en función del tipo de origen.
1)

Consulte también
UINT (enteros de 16 bits) (Página 254)
Conversión implícita de UINT (Página 516)
Sinopsis de la conversión de tipos de datos (Página 506)

Programación del PLC
Manual de programación y manejo, 11/2019

551

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Conversión explícita de DINT
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos DINT y
las correspondientes instrucciones:

552

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Origen

Destino

Conver‐
sión

Explicación

Nemónicos de la instruc‐
ción

DINT

BOOL

X

Pueden darse las siguientes posibili‐ DINT_TO_BOOL
dades:
● Cuando el valor de origen es "0",
el tipo de datos de destino
también es "0" y la salida de
habilitación ENO es "1".
● Si en el valor de origen
solamente es "1" el LSB (Least
Significant Bit), el tipo de datos
de destino también es "1" y la
salida de habilitación ENO es "1".
● Si en el valor de origen hay bits
distintos al LSB, el tipo de datos
de destino se ajusta según el
LSB y la salida de habilitación
ENO es "0".

BYTE1)

X

WORD1)

X

DWORD1)

X

SINT

X

USINT

X

INT

X

UINT

X

UDINT

X

REAL

X

LREAL

X

TIME

El patrón de bits del valor de origen DINT_TO_BYTE
se transfiere sin cambios y justificado DINT_TO_WORD
a la derecha al tipo de datos de des‐
tino. Si se convierte un valor negativo DINT_TO_DWORD
a un tipo de datos sin signo, la salida
de habilitación ENO se pone a "0".
El patrón de bits del valor de origen
se transfiere al tipo de datos de des‐
tino sin convertir. (Del valor "-1"
(16#FF) se obtiene el valor "-1"
(16#FFFFFFFF)). Si se convierte un
valor negativo a un tipo de datos sin
signo, la salida de habilitación ENO
se pone a "0".

DINT_TO_SINT

El valor se convierte al formato del
tipo de datos de destino (p. ej. el va‐
lor "-1" se transforma en el valor
"-1.0" con la instrucción "Convertir
valor" (CONVERT)).

DINT_TO_REAL,
NORM_X

X

El valor se transfiere al tipo de datos
de destino y se interpreta como mili‐
segundos.

DINT_TO_TIME,
T_CONV

DTL

-

Sin conversión explícita

-

TOD

X

El patrón de bits del valor de origen DINT_TO_TOD
se transfiere al tipo de datos de des‐
tino sin convertir. (Del valor "-1"
(16#FF) se obtiene el valor "-1"
(16#FFFFFFFF)). Si se convierte un
valor negativo a un tipo de datos sin
signo, la salida de habilitación ENO
se pone a "0". (Interpretación en mi‐
lisegundos desde 0:0)

Programación del PLC
Manual de programación y manejo, 11/2019

DINT_TO_USINT
DINT_TO_INT
DINT_TO_UINT
DINT_TO_UDINT

DINT_TO_LREAL,
NORM_X

553

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200
Origen

Destino

Conver‐
sión

Explicación

Nemónicos de la instruc‐
ción

DATE

X

El patrón de bits del valor de origen DINT_TO_DATE
se transfiere al tipo de datos de des‐
tino sin convertir. (Del valor "-1"
(16#FF) se obtiene el valor "-1"
(16#FFFFFFFF)). Si se convierte un
valor negativo a un tipo de datos sin
signo, la salida de habilitación ENO
se pone a "0". (Interpretación en días
desde 1990-1-1)

STRING

X

El valor se convierte en una cadena
de caracteres.

DINT_TO_STRING,
S_CONV, VAL_STRG

WSTRING

X

● KOP / FUP:
los primeros caracteres de la
cadena se rellenan con espacios.
El número de espacios varía en
función de la longitud del valor
numérico.
Los valores numéricos positivos
se emiten sin signo.

DINT_TO_WSTRING

● AWL / SCL:
no se insertan espacios.
La cadena de caracteres se
representa precedida de signo.
Si se rebasa la longitud de la cadena
de caracteres, la salida de habilita‐
ción ENO se pone a "0".

554

CHAR1)

X

WCHAR1)

X

BCD32

X

BCD32_DWO
RD

X

El patrón de bits del valor de origen DINT_TO_CHAR
se transfiere al tipo de datos de des‐ DINT_TO_WCHAR
tino sin convertir. (Del valor "-1"
(16#FF) se obtiene el valor "-1"
(16#FFFFFFFF)). Si se convierte un
valor negativo a un tipo de datos sin
signo, la salida de habilitación ENO
se pone a "0".
El valor que debe convertirse tiene el DINT_TO_BCD32
tipo DINT y se aplica como número DINT_TO_BCD32_DWO
entero con un valor entre –999999 y RD
+9999999. Tras la conversión, el re‐
sultado es un número codificado en
BCD del tipo DWORD. Si se produce
un desbordamiento, la salida de ha‐
bilitación se pone a "0". Se produce
una conversión auténtica. Si el valor
está fuera del rango de destino, no se
dispara ningún error síncrono, sino
que solamente se activa el bit de es‐
tado OV.

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200
Origen

Destino

Conver‐
sión

Explicación

Nemónicos de la instruc‐
ción

x: Conversión posible
- : Conversión no posible
Las secuencias de bits (BYTE, WORD, DWORD) y el tipo de datos CHAR se amplían en primer lugar
hasta el ancho necesario incluido el signo, y a continuación se copian los bits. La interpretación se
decide en función del tipo de origen.
1)

Consulte también
DINT (enteros de 32 bits) (Página 255)
Conversión implícita de DINT (Página 517)
Sinopsis de la conversión de tipos de datos (Página 506)

Programación del PLC
Manual de programación y manejo, 11/2019

555

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Conversión explícita de UDINT
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos UDINT y
las correspondientes instrucciones:

556

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Origen

Destino

Conversión

Explicación

Nemónicos de la instruc‐
ción

UDINT

BOOL

X

Pueden darse las siguientes posibili‐ UDINT_TO_BOOL
dades:
● Cuando el valor de origen es "0",
el tipo de datos de destino
también es "0" y la salida de
habilitación ENO es "1".
● Si en el valor de origen
solamente es "1" el LSB (Least
Significant Bit), el tipo de datos
de destino también es "1" y la
salida de habilitación ENO es "1".
● Si en el valor de origen hay bits
distintos al LSB, el tipo de datos
de destino se ajusta según el
LSB y la salida de habilitación
ENO es "0".

BYTE1)

X

WORD1)

X

DWORD

1)

X

El patrón de bits del valor de origen
se transfiere sin cambios al tipo de
datos de destino. Si en este proceso
se pierden bits, la salida de habilita‐
ción ENO se pone a "0".

UDINT_TO_BYTE
UDINT_TO_WORD
UDINT_TO_DWORD

SINT

X

USINT

X

UDINT_TO_USINT

INT

X

UDINT_TO_INT

UINT

X

UDINT_TO_UINT

DINT

X

El patrón de bits del valor de origen
se transfiere sin cambios al tipo de
datos de destino. Si al convertir se
cambia el bit de signo, la salida de
habilitación ENO se pone a "0".

UDINT_TO_DINT

REAL

X

UDINT_TO_REAL,
NORM_X

LREAL

X

El valor se convierte al formato del
tipo de datos de destino (p. ej. el va‐
lor "1" se transforma en el valor "1.0"
con la instrucción "Convertir valor"
(CONVERT)).

TIME

X

El patrón de bits del valor de origen UDINT_TO_TIME
se transfiere sin cambios y alineado
a la derecha, interpretado como mili‐
segundos, al tipo de datos de destino.

DTL

-

Sin conversión explícita

TOD

X

El patrón de bits del valor de origen UDINT_TO_TOD,
se transfiere al tipo de datos de des‐ T_CONV
tino sin convertir. (Del valor "-1"
(16#FF) se obtiene el valor "-1"
(16#FFFFFFFF). Cuando se convier‐
te un valor negativo en un tipo de da‐
tos de destino sin signo, la salida de
habilitación ENO se pone a "0". (In‐
terpretación en milisegundos desde
0:0; verificación de límite de 24 h)

Programación del PLC
Manual de programación y manejo, 11/2019

UDINT_TO_SINT

UDINT_TO_LREAL,
NORM_X

-

557

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200
Origen

Destino

Conversión

Explicación

DATE

X

El patrón de bits del valor de origen UDINT_TO_DATE
se transfiere al tipo de datos de des‐
tino sin convertir. (Del valor "-1"
(16#FF) se obtiene el valor "-1"
(16#FFFFFFFF). Cuando se convier‐
te un valor negativo en un tipo de da‐
tos de destino sin signo, la salida de
habilitación ENO se pone a "0". (In‐
terpretación en días desde 1990-1-1;
verificación de valor negativo)

STRING

X

El valor se convierte en una cadena
de caracteres. Si se rebasa la longi‐
tud de la cadena de caracteres, la
salida de habilitación ENO se pone a
"0".

UDINT_TO_STRING,
S_CONV, VAL_STRG

El patrón de bits del valor de origen
se transfiere sin cambios al tipo de
datos de destino. Si se produce un
desbordamiento, la salida de habili‐
tación ENO se pone a "0".

UDINT_TO_CHAR

WSTRING X
CHAR1)

X

WCHAR

1)

X

Nemónicos de la instruc‐
ción

UDINT_TO_WCHAR

UDINT_TO_WCHAR

x: Conversión posible
- : Conversión no posible
Las secuencias de bits (BYTE, WORD, DWORD, LWORD) y el tipo de datos CHAR se amplían en
primer lugar hasta el ancho necesario (el signo inexistente se sustituye por ceros), y a continuación se
copian los bits. La interpretación se decide en función del tipo de origen.
1)

Consulte también
UDINT (enteros de 32 bits) (Página 256)
Conversión implícita de UDINT (Página 518)
Sinopsis de la conversión de tipos de datos (Página 506)

558

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

3.16.3.3

Números en coma flotante

Conversión explícita de REAL
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos REAL y
las correspondientes instrucciones:

Programación del PLC
Manual de programación y manejo, 11/2019

559

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Origen

Destino

Conversión

Explicación

Nemónicos de la instruc‐
ción

REAL

BOOL

-

Sin conversión explícita

-

BYTE

-

-

WORD

-

-

DWORD

X

El patrón de bits del valor de origen
se transfiere sin cambios al tipo de
datos de destino.

REAL_TO_DWORD

SINT

X

REAL_TO_SINT,
ROUND, CEIL, FLOOR,
TRUNC, NORM_X, SCA‐
LE_X

USINT

X

INT

X

El valor se convierte al tipo de datos
de destino. El resultado de la conver‐
sión depende de la instrucción utili‐
zada. Si durante la conversión se re‐
basa el rango permitido de valores
del tipo de datos de destino o el valor
a convertir es un número en coma
flotante no válido, la salida de habili‐
tación ENO se pone a "0".

UINT

X

REAL_TO_UINT,
ROUND, CEIL, FLOOR,
TRUNC, NORM_X, SCA‐
LE_X

DINT

X

REAL_TO_DINT,
ROUND, CEIL, FLOOR,
TRUNC, NORM_X, SCA‐
LE_X

UDINT

X

REAL_TO_UDINT,
ROUND, CEIL, FLOOR,
TRUNC, NORM_X, SCA‐
LE_X

LREAL

X

El valor se convierte al tipo de datos
de destino. El resultado de la conver‐
sión depende de la instrucción utili‐
zada, p. ej., TRUNC(2.5) = 2.0;
CEIL(2.5) = 3.0

REAL_TO_LREAL,
ROUND, CEIL, FLOOR,
TRUNC, NORM_X, SCA‐
LE_X

TIME

-

Sin conversión explícita

-

DTL

-

-

TOD

-

-

DATE

-

-

STRING

X

WSTRING X

CHAR

560

-

REAL_TO_USINT,
ROUND, CEIL, FLOOR,
TRUNC, NORM_X, SCA‐
LE_X
REAL_TO_INT,
ROUND, CEIL, FLOOR,
TRUNC, NORM_X, SCA‐
LE_X

El valor se convierte en una cadena REAL_TO_STRING,
de caracteres. Si se rebasa la longi‐ S_CONV, VAL_STRG
tud de la cadena de caracteres o el REAL_TO_WSTRING
valor a convertir es un número en co‐
ma flotante no válido, la salida de ha‐
bilitación ENO se pone a "0". La lon‐
gitud mín. de la cadena de caracte‐
res es de 14 caracteres.
Sin conversión explícita

-

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200
Origen

Destino

Conversión

WCHAR

-

Explicación

Nemónicos de la instruc‐
ción
-

x: Conversión posible
-: Conversión no posible

Consulte también
REAL (Página 261)
Conversión implícita de REAL (Página 519)
Sinopsis de la conversión de tipos de datos (Página 506)

Programación del PLC
Manual de programación y manejo, 11/2019

561

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Conversión explícita de LREAL
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos LREAL
y las correspondientes instrucciones:

562

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Origen

Destino

Conversión

Explicación

Nemónicos de la instrucción

LREAL

BOOL

-

Sin conversión explícita

-

BYTE

-

-

WORD

-

-

DWORD

-

-

SINT

X

USINT

X

INT

X

UINT

X

LREAL_TO_UINT, ROUND,
CEIL, FLOOR, TRUNC,
NORM_X, SCALE_X

DINT

X

LREAL_TO_DINT, ROUND,
CEIL, FLOOR, TRUNC,
NORM_X, SCALE_X

UDINT

X

LREAL_TO_UDINT,
ROUND, CEIL, FLOOR,
TRUNC, NORM_X, SCA‐
LE_X

REAL

X

El valor se convierte al tipo de
datos de destino. Si al convertir
se rebasa el rango de valores
permitido o el valor que se desea
convertir es un número en coma
flotante no válido, la salida de ha‐
bilitación ENO se pone a "0". Se
tolera la pérdida de precisión.

LREAL_TO_LREAL,
ROUND, CEIL, FLOOR,
TRUNC, NORM_X, SCA‐
LE_X

TIME

-

Sin conversión explícita

-

DTL

-

-

TOD

-

-

DATE

-

-

STRING

X

WSTRING X

CHAR

-

WCHAR

-

El valor se convierte al tipo de
datos de destino. El resultado de
la conversión depende de la ins‐
trucción utilizada. Si al convertir
se rebasa el rango de valores
permitido o el valor que se desea
convertir es un número en coma
flotante no válido, la salida de ha‐
bilitación ENO se pone a "0".

LREAL_TO_SINT, ROUND,
CEIL, FLOOR, TRUNC,
NORM_X, SCALE_X
LREAL_TO_USINT,
ROUND, CEIL, FLOOR,
TRUNC, NORM_X, SCA‐
LE_X
LREAL_TO_INT, ROUND,
CEIL, FLOOR, TRUNC,
NORM_X, SCALE_X

El valor se convierte en una ca‐
dena de caracteres. Si se rebasa
la longitud de la cadena de ca‐
racteres o el valor a convertir es
un número en coma flotante no
válido, la salida de habilitación
ENO se pone a "0". La longitud
mín. de la cadena de caracteres
es de 21 caracteres.

LREAL_TO_STRING,
S_CONV, VAL_STRG

Sin conversión explícita

-

LREAL_TO_WSTRING

-

x: Conversión posible
-: Conversión no posible

Programación del PLC
Manual de programación y manejo, 11/2019

563

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Consulte también
LREAL (Página 262)
Sinopsis de la conversión de tipos de datos (Página 506)

564

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

3.16.3.4

Temporizadores

Conversión explícita de TIME
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos TIME y
las correspondientes instrucciones:
Origen

Destino Conversión

Explicación

Nemónicos de la instrucción

TIME

BOOL

-

Sin conversión explícita

-

1)

BYTE

X
X

El patrón de bits del valor de origen se
transfiere sin cambios al tipo de datos
de destino.

TIME_TO_BYTE

WORD
DWOR
D1)

X

SINT

X

USINT

X

INT

X

UINT

X

DINT

X

El patrón de bits del valor de origen se TIME_TO_DINT, T_CONV
transfiere sin cambios al tipo de datos
de destino. El resultado de la conver‐
sión muestra el tiempo en milisegun‐
dos.

UDINT

X

El patrón de bits del valor de origen se TIME_TO_UDINT
transfiere sin cambios y alineado a la
derecha, interpretado como milise‐
gundos, al tipo de datos de destino. El
cambio de signo da lugar a que la sa‐
lida de habilitación ENO sea "0".

REAL

-

Sin conversión explícita

LREAL

-

-

DTL

-

-

TOD

X

El patrón de bits del valor de origen se
transfiere sin cambios y justificado a
la derecha al tipo de datos de destino.
Si el valor de origen está fuera del
rango de valores de TOD, el tipo de
datos de destino no se cambia.

TIME_TO_TOD

DATE

-

Sin conversión explícita

-

STRIN
G

-

-

WSTRI
NG

-

-

CHAR

-

-

WCHA
R

-

-

1)

Programación del PLC
Manual de programación y manejo, 11/2019

TIME_TO_WORD
TIME_TO_DWORD

El patrón de bits del valor de origen se
transfiere sin cambios y alineado a la
derecha, interpretado como milise‐
gundos, al tipo de datos de destino.

TIME_TO_SINT
TIME_TO_USINT
TIME_TO_INT
TIME_TO_UINT

-

565

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200
Origen

Destino Conversión

Explicación

Nemónicos de la instrucción

x: Conversión posible
-: Conversión no posible
1)
Las secuencias de bits (BYTE, WORD, DWORD) y el tipo de datos CHAR se amplían en primer lugar
hasta el ancho necesario, y a continuación se copian los bits. La interpretación se decide en función del
tipo de origen.

Consulte también
TIME (tiempo IEC) (Página 266)
Conversión implícita de TIME (Página 521)
Sinopsis de la conversión de tipos de datos (Página 506)

566

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

3.16.3.5

Fecha y hora

Conversión explícita de DATE
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos DATE y
las correspondientes instrucciones:
Origen

Destino

Conversión

Explicación

DATE

BOOL

-

Ninguna conversión explícita -

X

El patrón de bits del valor de DATE_TO_BYTE
origen se transfiere sin cam‐ DATE_TO_WORD
bios y justificado a la derecha
DATE_TO_DWORD
al tipo de datos de destino.

BYTE

1)

WORD 1)

X

DWORD 1)

X

SINT

X

USINT

X

Como resultado se muestra
el número de días desde el
1.1.1990.

Nemónicos de la instrucción

DATE_TO_SINT
DATE_TO_USINT

INT

X

UINT

X

DATE_TO_UINT

DINT

X

DATE_TO_DINT

UDINT

X

REAL

-

Ninguna conversión explícita -

LREAL

-

-

TIME

-

-

DTL

X

El patrón de bits del valor de DATE_TO_DTL
origen se transfiere sin cam‐
bios y justificado a la derecha
al tipo de datos de destino.

TOD

-

Ninguna conversión explícita -

STRING

-

-

WSTRING -

-

CHAR

-

-

WCHAR

-

-

2)

DATE_TO_INT

DATE_TO_UDINT

x: Conversión posible
- : Conversión no posible
1)
Las secuencias de bits (BYTE, WORD, DWORD) y el tipo de datos CHAR se amplían en primer lugar
hasta el ancho necesario, y a continuación se copian los bits. La interpretación se decide en función del
tipo de origen.
2)
El tipo de datos DTL se inicializa del siguiente modo: 1970-1-1-0:0:0. Una conversión de DA‐
TE_TO_DTL ajusta solo la parte correspondiente del DTL. El resto del DTL permanece tal y como se
inicializó. De ahí resultan las siguientes diferencias entre las instrucciones "T_COMBINE" y "T_CONV":

● T_COMBINE(D#2015-24-12, LTOD#12:13:14) devuelve DTL#2015-24-12-12:13:14
● myDTL := T_CONV(D#2015-24-12); myDTL := T_CONV(LTOD#12:13:14) da como resultado en
myDTL = DTL#1970-1-1-12:13:14

Programación del PLC
Manual de programación y manejo, 11/2019

567

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Consulte también
DATE (Página 268)
Conversión implícita de DATE (Página 522)
Sinopsis de la conversión de tipos de datos (Página 506)

Conversión explícita de TOD
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos TOD y las
correspondientes instrucciones:
Origen

Destino

Conversión

Explicación

Nemónicos de la instrucción

TOD

BOOL

-

Sin conversión explícita

-

BYTE

X

El patrón de bits del valor de TOD_TO_BYTE
origen se transfiere sin cam‐ TOD_TO_WORD
bios al tipo de datos de des‐
TOD_TO_DWORD
tino.

1)

WORD1)

X

DWORD1)

X

SINT

X

USINT

X

INT

X

UINT

X

TOD_TO_UINT

DINT

X

TOD_TO_DINT

UDINT

X

El resultado de la conversión TOD_TO_UDINT, T_CONV
equivale al número de milise‐
gundos desde el inicio del
día (0:00 horas).

REAL

-

Sin conversión explícita

LREAL

-

TIME

X

Como resultado se muestra
el tiempo transcurrido desde
medianoche.

DTL

X

Como resultado el día se po‐ TOD_TO_DTL
ne a 1.1.1970.

DATE

-

Sin conversión explícita

STRING

Como resultado se muestra
el número de milisegundos
desde medianoche.

TOD_TO_SINT
TOD_TO_USINT
TOD_TO_INT

TOD_TO_TIME

-

-

-

WSTRING -

-

CHAR

-

-

WCHAR

-

-

x: Conversión posible
-: Conversión no posible
Las secuencias de bits (BYTE, WORD, DWORD) y el tipo de datos CHAR se amplían en primer lugar
hasta el ancho necesario incluido el signo, y a continuación se copian los bits. La interpretación se
decide en función del tipo de origen.

1)

568

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Consulte también
TOD (TIME_OF_DAY) (Página 268)
Conversión implícita de TOD (Página 523)
Sinopsis de la conversión de tipos de datos (Página 506)

Conversión explícita de DTL
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos DTL y las
correspondientes instrucciones:
Origen

Destino

Conversión

Explicación

Nemónicos de la instruc‐
ción

DTL

BYTE

-

Sin conversión explícita

-

WORD

-

-

DWORD

-

-

SINT

-

-

USINT

-

-

INT

-

-

UINT

-

-

DINT

-

-

UDINT

-

-

REAL

-

-

LREAL

-

-

TIME

-

-

TOD

X

Durante la conversión se extrae la
hora del formato DTL y se escribe
en el tipo de datos de destino.

DATE

X

Durante la conversión se extrae la DTL_TO_DATE, T_CONV
fecha del formato DTL y se escribe
en el tipo de datos de destino. Si se
produce un desbordamiento, la sa‐
lida de habilitación ENO se pone a
"0".

STRING

-

Sin conversión explícita

DTL_TO_TOD, T_CONV

-

WSTRING -

-

CHAR

-

-

WCHAR

-

-

x: Conversión posible
-: Conversión no posible

Programación del PLC
Manual de programación y manejo, 11/2019

569

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Consulte también
DTL (Página 271)
Sinopsis de la conversión de tipos de datos (Página 506)

570

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

3.16.3.6

Cadenas de caracteres

Conversión explícita de CHAR
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos CHAR y
las correspondientes instrucciones:
Origen

Destino

Conversión

Explicación

Nemónicos de la instrucción

CHAR

BOOL

-

Sin conversión explícita

-

El patrón de bits del valor de ori‐ CHAR_TO_BYTE
gen se transfiere sin cambios y
CHAR_TO_WORD
justificado a la derecha al tipo de
CHAR_TO_DWORD
datos de destino.
CHAR_TO_SINT

BYTE

X

WORD1)

X

DWORD1)

X

SINT

X

USINT

X

CHAR_TO_USINT

INT

X

CHAR_TO_INT

UINT

X

CHAR_TO_UINT

DINT

X

CHAR_TO_DINT

UDINT

X

CHAR_TO_UDINT

REAL

-

LREAL

-

-

TIME

-

-

DTL

-

-

TOD

-

-

DATE

-

-

STRING

X

1)

WSTRING WCHAR

X

Sin conversión explícita

-

El valor se convierte en el primer CHAR_TO_STRING
carácter de la cadena de carac‐
teres (STRING). Si la longitud de
la cadena de caracteres no está
definida, después de la conver‐
sión se ajusta la longitud "1". Si la
longitud de la cadena de caracte‐
res está definida, permanece
inalterada después de la conver‐
sión.
Sin conversión explícita

CHAR_TO_WCHAR

x: Conversión posible
- : Conversión no posible
Las secuencias de bits (BYTE, WORD, DWORD) y el tipo de datos CHAR se amplían en primer lugar
hasta el ancho necesario, y a continuación se copian los bits. La interpretación se decide en función del
tipo de origen.
1)

Programación del PLC
Manual de programación y manejo, 11/2019

571

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Consulte también
CHAR (Página 273)
Conversión implícita de CHAR (Página 525)
Sinopsis de la conversión de tipos de datos (Página 506)

Conversión explícita de WCHAR
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos WCHAR
y las correspondientes instrucciones:
Origen

Destino

Conversión

Explicación

Nemónicos de la instrucción

WCHA
R

BOOL

-

Sin conversión explícita

-

El patrón de bits del valor de ori‐ WCHAR_TO_BYTE
gen se transfiere sin cambios y
WCHAR_TO_WORD
justificado a la derecha al tipo de
WCHAR_TO_DWORD
datos de destino.
WCHAR_TO_SINT

BYTE

X

WORD1)

X

DWORD1)

X

SINT

X

USINT

X

WCHAR_TO_USINT

INT

X

WCHAR_TO_INT

UINT

X

WCHAR_TO_UINT

DINT

X

WCHAR_TO_DINT

UDINT

X

WCHAR_TO_UDINT

REAL

-

LREAL

-

-

TIME

-

-

DTL

-

-

TOD

-

-

DATE

-

-

STRING

-

1)

WSTRING X

CHAR

X

Sin conversión explícita

-

El valor se convierte en el primer WCHAR_TO_WSTRING
carácter de la cadena de carac‐
teres (WSTRING). Si la longitud
de la cadena de caracteres no
está definida, después de la con‐
versión se ajusta la longitud "1".
Si la longitud de la cadena de ca‐
racteres está definida, permane‐
ce inalterada después de la con‐
versión.
WCHAR_TO_CHAR

x: Conversión posible
- : Conversión no posible
Las secuencias de bits (BYTE, WORD, DWORD) y el tipo de datos CHAR se amplían en primer lugar
hasta el ancho necesario, y a continuación se copian los bits. La interpretación se decide en función del
tipo de origen.
1)

572

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Conversión explícita de STRING
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos STRING
y las correspondientes instrucciones:
Origen

Destino

Conversión

Explicación

Nemónicos de la instruc‐
ción

STRIN
G

BOOL

-

Sin conversión explícita

-

BYTE

-

-

WORD

-

-

DWORD

-

-

SINT

X

USINT

X

INT

X

UINT

X

DINT

X

UDINT

X

REAL

X

LREAL

X

TIME

-

DTL

-

-

TOD

-

-

DATE

-

-

CHAR

X

El primer carácter de la cadena de
caracteres (STRING) se transfiere al
tipo de datos de destino. Si la cadena
de caracteres está vacía, se escribe
en el tipo de datos de destino el valor
"0".

STRING_TO_CHAR,
S_CONV

WCHAR

-

Sin conversión explícita

-

WSTRING X

La conversión comienza por el primer
carácter de la cadena de caracteres
(STRING) y termina en el fin de la ca‐
dena o bien en el primer carácter no
permitido. Se admiten para la conver‐
sión los siguientes caracteres:
● Cifras
● Signo
● Punto
El primer carácter de la cadena pue‐
de ser un signo (+, -) o una cifra. Los
espacios en blanco iniciales se igno‐
ran. Al convertir números en coma
flotante, se usa el punto como carác‐
ter de separación. La notación expo‐
nencial "e" o "E" no está permitida. A
la izquierda del punto decimal se per‐
mite usar comas para separar los mi‐
llares, ya que se ignora. Si la estruc‐
tura de la cadena de caracteres no es
válida para la conversión o se produ‐
ce un desbordamiento, la salida de
habilitación ENO se pone a "0".
Sin conversión explícita

STRING_TO_SINT,
S_CONV, STRG_VAL
STRING_TO_USINT,
S_CONV, STRG_VAL
STRING_TO_INT,
S_CONV, STRG_VAL
STRING_TO_UINT,
S_CONV, STRG_VAL
STRING_TO_DINT,
S_CONV, STRG_VAL
STRING_TO_UDINT,
S_CONV, STRG_VAL
STRING_TO_REAL,
S_CONV, STRG_VAL
STRING_TO_LREAL,
S_CONV, STRG_VAL

-

STRING_TO_WSTRING

x: Conversión posible
- : Conversión no posible

Programación del PLC
Manual de programación y manejo, 11/2019

573

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Consulte también
STRING (Página 274)
Sinopsis de la conversión de tipos de datos (Página 506)

574

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.16 Conversión de los tipos de datos en el S7-1200

Conversión explícita de WSTRING
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos
WSTRING y las correspondientes instrucciones:
Origen

Destino

Conversión

Explicación

Nemónicos de la instruc‐
ción

WSTRI
NG

BOOL

-

Sin conversión explícita

-

BYTE

-

-

WORD

-

-

DWORD

-

-

SINT

X

USINT

X

INT

X

UINT

X

DINT

X

UDINT

X

REAL

X

LREAL

X

TIME

-

DTL

-

-

TOD

-

-

DATE

-

-

CHAR

-

-

WCHAR

X

WSTRING_TO_WCHAR
El primer carácter de la cadena de
caracteres (WSTRING) se transfiere
al tipo de datos de destino. Si la ca‐
dena de caracteres está vacía, se es‐
cribe en el tipo de datos de destino el
valor "0".

STRING

X

WSTRING_TO_STRING

La conversión comienza por el primer
carácter de la cadena de caracteres
(STRING) y termina en el fin de la ca‐
dena o bien en el primer carácter no
permitido. Se admiten para la conver‐
sión los siguientes caracteres:
● Cifras
● Signo
● Punto
El primer carácter de la cadena pue‐
de ser un signo (+, -) o una cifra. Los
espacios en blanco iniciales se igno‐
ran. Al convertir números en coma
flotante, se usa el punto como carác‐
ter de separación. La notación expo‐
nencial "e" o "E" no está permitida. A
la izquierda del punto decimal se per‐
mite usar comas para separar los mi‐
llares, ya que se ignora. Si la estruc‐
tura de la cadena de caracteres no es
válida para la conversión o se produ‐
ce un desbordamiento, la salida de
habilitación ENO se pone a "0".
Sin conversión explícita

WSTRING_TO_SINT,
S_CONV, STRG_VAL
WSTRING_TO_USINT,
S_CONV, STRG_VAL
WSTRING_TO_INT,
S_CONV, STRG_VAL
WSTRING_TO_UINT,
S_CONV, STRG_VAL
WSTRING_TO_DINT,
S_CONV, STRG_VAL
WSTRING_TO_UDINT,
S_CONV, STRG_VAL
WSTRING_TO_REAL,
S_CONV, STRG_VAL
WSTRING_TO_LREAL,
S_CONV, STRG_VAL

-

x: Conversión posible
- : Conversión no posible

Programación del PLC
Manual de programación y manejo, 11/2019

575

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

3.17

Conversión de tipos de datos en el S7-300/S7-400

3.17.1

Sinopsis de las conversiones de tipos de datos

Introducción
Para combinar lógicamente varios operandos en una instrucción, es necesario verificar la
compatibilidad de los tipos de datos. Esto también es aplicable a las asignaciones, o a la
asignación de valores a los parámetros de bloque. Si los tipos de datos de los operandos son
diferentes, será preciso realizar una conversión.
La conversión puede realizarse de dos maneras, a saber:
● Conversión implícita
Los lenguajes de programación KOP, FUP, SCL y GRAPH soportan la conversión implícita.
La conversión implícita no es posible en el lenguaje de programación AWL.
● Conversión explícita
Nota
Conversión de secuencias de bits en SCL
Todas las secuencias de bit (BYTE, WORD, DWORD y LWORD) incluidas en expresiones
reciben el mismo tratamiento que los enteros correspondientes sin signo (USINT, UINT y
UDINT). Por ello, p. ej. la conversión implícita de DWORD a REAL se lleva a cabo del mismo
modo que una conversión de UDINT a REAL.

576

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Conversión implícita
La conversión implícita se realiza automáticamente si los tipos de datos de los operandos son
compatibles. La compatibilidad puede verificarse según criterios más o menos estrictos:
● Con verificación IEC
Si en los lenguajes de programación KOP, FUP y GRAPH está ajustada la verificación IEC,
se aplican las siguientes reglas:
– Sólo los tipos de datos BYTE y WORD pueden convertirse de forma implícita.
– La longitud de bits del tipo de datos de origen no puede rebasar la longitud de bits del
tipo de datos de destino. El operando del tipo de datos WORD no puede indicarse, por
ejemplo, en un parámetro si en el mismo se espera el tipo de datos BYTE.
Si en el lenguaje de programación SCL está ajustada la verificación IEC, se aplican las
siguientes reglas:
– La conversión implícita de secuencias de bits no es posible en otros tipos de datos. El
operando del tipo de datos WORD no puede indicarse, por ejemplo, en un parámetro si
en él se espera el tipo de datos INT.
– La longitud de bits del tipo de datos de origen no puede rebasar la longitud de bits del
tipo de datos de destino. El operando del tipo de datos WORD no puede indicarse, por
ejemplo, en un parámetro si en el mismo se espera el tipo de datos BYTE.
● Sin verificación IEC (ajuste predeterminado)
Si en los lenguajes de programación KOP, FUP y GRAPH no está ajustada la verificación
IEC, se aplican las siguientes reglas:
– Los tipos de datos BYTE, WORD, DWORD, INT, DINT, TIME, S5TIME, TOD, DATE y
CHAR pueden convertirse de forma implícita.
– La longitud de bits del tipo de datos de origen no puede rebasar la longitud de bits del
tipo de datos de destino. El operando del tipo de datos DWORD no puede indicarse, por
ejemplo, en un parámetro si en el mismo se espera el tipo de datos WORD.
Si en el lenguaje de programación SCL no está ajustada la verificación IEC, se aplican las
siguientes reglas:
– La conversión implícita de secuencias de bits es posible en otros tipos de datos. El
operando del tipo de datos WORD puede indicarse, por ejemplo, en un parámetro si en
el mismo se espera el tipo de datos INT.
– La conversión implícita de secuencias de bits no es posible en números en coma
flotante. El operando del tipo de datos WORD no puede indicarse, por ejemplo, en un
parámetro si en el mismo se espera el tipo de datos REAL.
– La conversión implícita de secuencias de bits en los tipos de datos TIME, TOD, DATE
y CHAR sólo es posible si éstos tienen la misma longitud de bits. El operando del tipo de
datos DWORD no puede indicarse, por ejemplo, en un parámetro si en el mismo se
espera el tipo de datos DATE.
– La longitud de bits del tipo de datos de origen no puede rebasar la longitud de bits del
tipo de datos de destino. El operando del tipo de datos DINT no puede indicarse, por
ejemplo, en un parámetro si en el mismo se espera el tipo de datos INT.
– En los parámetros de entrada/salida (InOut) la longitud de bits de un operando indicado
debe coincidir con la longitud de bits programada para el parámetro correspondiente.

Programación del PLC
Manual de programación y manejo, 11/2019

577

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Conversión explícita
Si los operandos no son compatibles, por lo que no se puede realizar una conversión implícita,
es posible utilizar una instrucción de conversión explícita. Encontrará las instrucciones de
conversión en la Task Card "Instrucciones".
Un posible desbordamiento se indica en la salida de habilitación ENO. Un desbordamiento
tiene lugar cuando, p. ej., el valor del tipo de datos de origen es mayor que el valor del tipo de
datos de destino.
Nota
Mover patrones de bits
Si la conversión explícita consiste en mover un patrón de bits, la salida de habilitación ENO no
se activa.
Encontrará más información sobre la conversión explícita en "Consulte también".
La figura siguiente muestra un ejemplo en el que debe realizarse una conversión explícita de
tipos de datos:
%ORFNB'DWD
&219(57
',17WR,17

,1B',17

(1

(12

,1

287

%ORFN
(1
287B,17 287B,17

(12

,1B,17 287B%22/

El bloque de función "Block" espera en el parámetro de entrada "IN_INT" una variable del tipo
de datos INT. Por ello, el valor de la variable "IN_DINT" se debe convertir primero de DINT a
INT. Si el valor de la variable "IN_DINT" se encuentra dentro del rango de valores permitido del
tipo de datos INT, se realiza una conversión. De lo contrario se notifica un desbordamiento. No
obstante, también en caso de desbordamiento se realiza una conversión, pero los valores se
cortan y la salida de habilitación ENO se pone a "0".

Consulte también
Activar o desactivar la verificación CEI (Página 579)
Conversiones implícitas (Página 579)
Conversiones explícitas (Página 590)

578

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

3.17.2

Conversiones implícitas

3.17.2.1

Activar o desactivar la verificación CEI
Se comprueba si los tipos de datos de las variables utilizadas son compatibles. La
compatibilidad puede verificarse según criterios más o menos estrictos. Si está activada la
"Verificación CEI para bloques lógicos", se aplican criterios más estrictos.
La verificación CEI se puede configurar de forma centralizada para todos los bloques nuevos
del proyecto, o bien para un bloque en particular.

Configurar la verificación CEI para bloques nuevos
Para configurar la verificación CEI para todos los bloques nuevos del proyecto, proceda del
siguiente modo:
1. Elija el comando "Configuración" del menú "Opciones".
Se abre la ventana "Configuración" en el área de trabajo.
2. Seleccione el grupo "Programación PLC > General" en la navegación local.
3. En el grupo "Ajuste predeterminado para bloques nuevos", active o desactive la casilla de
verificación "Verificación CEI para bloques lógicos".
La verificación CEI se activa o desactiva para todos los bloques nuevos del programa.

Configurar la verificación CEI para un bloque en particular
Para configurar la verificación CEI para un bloque en particular, proceda del siguiente modo:
1. Abra el bloque.
2. Abra la ficha "Propiedades" de la ventana de inspección.
3. Seleccione el grupo "Atributos" en la navegación local.
4. Active o desactive la casilla de verificación "Verificación CEI".
La verificación CEI se activa o desactiva para este bloque. El ajuste se guarda junto con el
proyecto.

Consulte también
Sinopsis de las conversiones de tipos de datos (Página 576)

3.17.2.2

Números binarios

Conversión implícita de BOOL
Posibilidades de conversión implícita
La conversión implícita del tipo de datos BOOL no es posible.

Programación del PLC
Manual de programación y manejo, 11/2019

579

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Consulte también
BOOL (bit) (Página 245)

Secuencias de bits
Conversión implícita de BYTE
Posibilidades de conversión implícita
La tabla siguiente muestra las posibilidades de conversión implícita del tipo de datos BYTE:
Origen

Destino

Con verifica‐
ción IEC

Sin verifica‐
ción IEC

Explicación

BYTE

BOOL

-

-

Ninguna conversión implícita
El patrón de bits del valor de origen se transfiere sin cambios y
alineado a la derecha al tipo de datos de destino.

WORD

X

X

DWORD

X

X

INT

-

-

Ninguna conversión implícita

DINT

-

X

El patrón de bits del valor de origen se transfiere sin cambios y
alineado a la derecha al tipo de datos de destino.
Ninguna conversión implícita

REAL

-

-

TIME

-

-

S5TIME

-

-

DT

-

-

TOD

-

-

DATE

-

-

STRING

-

-

CHAR

-

X

El patrón de bits del valor de origen se transfiere sin cambios al
tipo de datos de destino.

x: conversión posible
-: conversión no posible

Consulte también
BYTE (Página 246)
Sinopsis de las conversiones de tipos de datos (Página 576)
Conversión explícita de BYTE (Página 591)
Activar o desactivar la verificación CEI (Página 579)

580

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Conversión implícita de WORD
Posibilidades de conversión implícita
La tabla siguiente muestra las posibilidades de conversión implícita del tipo de datos WORD:
Origen

Destino

Con verifi‐
cación IEC

Sin verifica‐
ción IEC

Explicación

WORD

BOOL

-

-

Ninguna conversión implícita

BYTE

-

X

Solamente el byte menos significativo se transfiere al tipo de datos
de destino.

DWORD

X

X

INT

-

X

El patrón de bits del valor de origen se transfiere sin cambios y
alineado a la derecha al tipo de datos de destino.

DINT

-

X

REAL

-

-

Ninguna conversión implícita

TIME

-

-

S5TIME

-

X

El patrón de bits del valor de origen se transfiere sin cambios al tipo
de datos de destino.

DT

-

-

Ninguna conversión implícita

TOD

-

-

DATE

-

X

El patrón de bits del valor de origen se transfiere sin cambios al tipo
de datos de destino.

STRING

-

-

Ninguna conversión implícita

CHAR

-

-

x: Conversión posible
-: Conversión no posible

Consulte también
WORD (Página 247)
Sinopsis de las conversiones de tipos de datos (Página 576)
Conversión explícita de WORD (Página 593)
Activar o desactivar la verificación CEI (Página 579)

Programación del PLC
Manual de programación y manejo, 11/2019

581

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Conversión implícita de DWORD
Posibilidades de conversión implícita
La tabla siguiente muestra las posibilidades de conversión implícita del tipo de datos DWORD:
Origen

Destino

Con verifi‐
cación IEC

Sin verifica‐
ción IEC

Explicación

DWORD

BOOL

-

-

Ninguna conversión implícita

BYTE

-

X

WORD

-

X

El patrón de bits del valor de origen se transfiere sin cambios al tipo
de datos de destino.

INT

-

-

Ninguna conversión implícita

DINT

-

X

El patrón de bits del valor de origen se transfiere sin cambios al tipo
de datos de destino.

REAL

-

-

Ninguna conversión implícita

TIME

-

X

El patrón de bits del valor de origen se transfiere sin cambios al tipo
de datos de destino.

S5TIME

-

-

Ninguna conversión implícita

DT

-

-

TOD

-

X

El patrón de bits del valor de origen se transfiere sin cambios al tipo
de datos de destino.

DATE

-

-

Ninguna conversión implícita

STRING

-

-

CHAR

-

-

x: Conversión posible
-: Conversión no posible

Consulte también
DWORD (Página 248)
Sinopsis de las conversiones de tipos de datos (Página 576)
Conversión explícita de DWORD (Página 596)
Activar o desactivar la verificación CEI (Página 579)

582

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

3.17.2.3

Enteros

Conversión implícita de INT
Posibilidades de conversión implícita
La tabla siguiente muestra las posibilidades de conversión implícita del tipo de datos INT:
Origen

Destino

Con veri‐
ficación
CEI

Sin verifica‐
ción CEI

Explicación

INT

BOOL

-

-

Sin conversión implícita

BYTE

-

-

WORD

-

X

El patrón de bits del valor de origen se transfiere sin cambios al tipo de
datos de destino.

DWORD

-

-

Sin conversión implícita

DINT

X

X

REAL

X

X

El patrón de bits del valor de origen se transfiere sin cambios al tipo de
datos de destino.

TIME

-

-

Sin conversión implícita

1)

S5TIME

-

-

DT

-

-

TOD

-

-

DATE

-

-

STRING

-

-

CHAR

-

-

x: Conversión posible
-: Conversión no posible
: sólo en SCL

1

Consulte también
INT (enteros de 16 bits) (Página 253)
Sinopsis de las conversiones de tipos de datos (Página 576)
Conversión explícita de INT (Página 599)
Activar o desactivar la verificación CEI (Página 579)

Programación del PLC
Manual de programación y manejo, 11/2019

583

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Conversión implícita de DINT
Posibilidades de conversión implícita
La tabla siguiente muestra las posibilidades de conversión implícita del tipo de datos DINT:
Origen

Destino

Con veri‐
ficación
IEC

Sin verifica‐
ción IEC

Explicación

DINT

BOOL

-

-

Ninguna conversión implícita

BYTE

-

-

WORD

-

-

DWORD

-

X

El patrón de bits del valor de origen se transfiere sin cambios al tipo de
datos de destino.

INT

-

-

Ninguna conversión implícita

REAL

-

-

TIME

-

X

El patrón de bits del valor de origen se transfiere sin cambios al tipo de
datos de destino.
Ninguna conversión implícita

S5TIME

-

-

DT

-

-

TOD

-

-

DATE

-

-

STRING

-

-

CHAR

-

-

x: Conversión posible
-: Conversión no posible

Consulte también
DINT (enteros de 32 bits) (Página 255)
Sinopsis de las conversiones de tipos de datos (Página 576)
Conversión explícita de STRING (Página 612)
Activar o desactivar la verificación CEI (Página 579)

3.17.2.4

Números en coma flotante

Conversión implícita de REAL
Posibilidades de conversión implícita
La conversión implícita del tipo de datos REAL no es posible.

584

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Consulte también
REAL (Página 261)
Sinopsis de las conversiones de tipos de datos (Página 576)
Conversión explícita de CHAR (Página 611)
Activar o desactivar la verificación CEI (Página 579)

3.17.2.5

Temporizadores

Conversión implícita de TIME
Posibilidades de conversión implícita
La tabla siguiente muestra las posibilidades de conversión implícita del tipo de datos TIME:
Origen

Destino

Con verifi‐
cación IEC

Sin verifica‐
ción IEC

Explicación

TIME

BOOL

-

-

Ninguna conversión implícita

BYTE

-

-

WORD

-

-

DWORD

-

X

El patrón de bits del valor de origen se transfiere sin cambios al tipo de
datos de destino. El resultado de la conversión muestra el tiempo en
milisegundos.

INT

-

-

Ninguna conversión implícita

DINT

-

X

El patrón de bits del valor de origen se transfiere sin cambios al tipo de
datos de destino. El resultado de la conversión muestra el tiempo en
milisegundos.

REAL

-

-

Ninguna conversión implícita

S5TIME

-

-

DT

-

-

TOD

-

-

DATE

-

-

STRING

-

-

CHAR

-

-

x: Conversión posible
-: Conversión no posible

Consulte también
TIME (tiempo IEC) (Página 266)
Sinopsis de las conversiones de tipos de datos (Página 576)
Conversión explícita de TIME (Página 606)
Activar o desactivar la verificación CEI (Página 579)

Programación del PLC
Manual de programación y manejo, 11/2019

585

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Conversión implícita de S5TIME
Posibilidades para la conversión implícita
La tabla siguiente muestra las posibilidades para la conversión implícita del tipo de datos
S5TIME:
Origen

Destino

Con verificación
IEC

Sin verificación
CEI

Explicación

S5TIME

BOOL

-

-

Ninguna conversión implícita

BYTE

-

-

WORD

-

X

El patrón de bits del valor de origen se transfiere sin cambios
al tipo de datos de destino. El resultado de la conversión
muestra el tiempo en milisegundos.
Ninguna conversión implícita

DWORD

-

-

INT

-

-

DINT

-

-

REAL

-

-

TIME

-

-

DT

-

-

TOD

-

-

DATE

-

-

STRING

-

-

CHAR

-

-

x: Conversión posible
-: Conversión no posible

Consulte también
S5TIME (tiempo) (Página 265)
Sinopsis de las conversiones de tipos de datos (Página 576)
Conversión explícita de S5TIME (Página 607)
Activar o desactivar la verificación CEI (Página 579)

586

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

3.17.2.6

Fecha y hora

Conversión implícita de DATE
Posibilidades de conversión implícita
La tabla siguiente muestra las posibilidades de conversión implícita del tipo de datos DATE:
Origen

Destino

Con veri‐
ficación
IEC

Sin verifica‐
ción IEC

Explicación

DATE

BOOL

-

-

Ninguna conversión implícita

BYTE

-

-

WORD

-

X

El patrón de bits del valor de origen se transfiere sin cambios al tipo de
datos de destino. El resultado de la conversión equivale al número de
días desde el 01.01.1990.

DWORD

-

-

Ninguna conversión implícita

INT

-

-

DINT

-

-

REAL

-

-

TIME

-

-

S5TIME

-

-

DT

-

-

TOD

-

-

STRING

-

-

CHAR

-

-

x: Conversión posible
-: Conversión no posible

Consulte también
DATE (Página 268)
Sinopsis de las conversiones de tipos de datos (Página 576)
Activar o desactivar la verificación CEI (Página 579)

Programación del PLC
Manual de programación y manejo, 11/2019

587

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Conversión implícita de TOD
Posibilidades de conversión implícita
La tabla siguiente muestra las posibilidades de conversión implícita del tipo de datos TOD:
Origen

Destino

Con verificación
IEC

Sin verificación
IEC

Explicación

TOD

BOOL

-

-

Ninguna conversión implícita

BYTE

-

-

WORD

-

-

DWORD

-

X

El patrón de bits del valor de origen se transfiere sin cambios
al tipo de datos de destino. El resultado de la conversión
equivale al número de milisegundos desde el comienzo del
día (0:00 horas).

INT

-

-

Ninguna conversión implícita

DINT

-

-

REAL

-

-

TIME

-

-

S5TIME

-

-

DT

-

-

DATE

-

-

STRING

-

-

CHAR

-

-

x: Conversión posible
-: Conversión no posible

Consulte también
TOD (TIME_OF_DAY) (Página 268)
Sinopsis de las conversiones de tipos de datos (Página 576)
Activar o desactivar la verificación CEI (Página 579)

Conversión implícita de DT
Posibilidades de conversión implícita
La conversión implícita del tipo de datos DT no es posible.

Consulte también
DT (DATE_AND_TIME) (Página 269)
Sinopsis de las conversiones de tipos de datos (Página 576)

588

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400
Conversión explícita de DT (Página 610)
Activar o desactivar la verificación CEI (Página 579)

3.17.2.7

Cadenas de caracteres

Conversión implícita de CHAR
Posibilidades de conversión implícita
La tabla siguiente muestra las posibilidades de conversión implícita del tipo de datos CHAR:
Origen

Destino

Con verifi‐
cación IEC

Sin verifica‐
ción IEC

Explicación

CHAR

BOOL

-

-

Ninguna conversión implícita

BYTE

-

X

El patrón de bits del valor de origen se transfiere sin cambios al tipo
de datos de destino.

WORD

-

-

Ninguna conversión implícita

DWORD

-

-

INT

-

-

DINT

-

-

REAL

-

-

TIME

-

-

S5TIME

-

-

DT

-

-

TOD

-

-

DATE

-

-

STRING

X

X

El patrón de bits del valor de origen se transfiere sin cambios al tipo
de datos de destino.

x: Conversión posible
-: Conversión no posible

Consulte también
CHAR (Página 273)
Sinopsis de las conversiones de tipos de datos (Página 576)
Conversión explícita de CHAR (Página 611)
Activar o desactivar la verificación CEI (Página 579)

Conversión implícita de STRING
Posibilidades de conversión implícita
La conversión implícita del tipo de datos STRING no es posible.

Programación del PLC
Manual de programación y manejo, 11/2019

589

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Consulte también
STRING (Página 274)
Sinopsis de las conversiones de tipos de datos (Página 576)
Conversión explícita de STRING (Página 612)
Activar o desactivar la verificación CEI (Página 579)

3.17.3

Conversiones explícitas

3.17.3.1

Números binarios

Conversión explícita de BOOL
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos BOOL y
las correspondientes instrucciones:
Origen

Destino

Conversión

Explicación

BOOL

BYTE

X

WORD

X

DWORD

X

En el tipo de datos de destino sola‐ CONVERT
mente se activa el LSB (Least Sig‐
nificant Bit). La salida de habilita‐
ción ENO es siempre "1".
BOOL_TO_INT

INT

X

DINT

X

REAL

-

TIME

-

S5TIME

-

DT

-

TOD

-

DATE

-

STRING

-

CHAR

-

Nemónicos de la instrucción

BOOL_TO_DINT
Ninguna conversión explícita

-

x: Conversión posible
- : Conversión no posible

Consulte también
Sinopsis de las conversiones de tipos de datos (Página 576)
BOOL (bit) (Página 245)
Conversiones implícitas (Página 579)

590

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Secuencias de bits
Conversión explícita de BYTE
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos BYTE y
las correspondientes instrucciones:
Origen

Destino

Conversión

Significado

Nemónicos de la instrucción

BYTE

BOOL

X

Pueden darse las siguientes posibi‐ CONVERT
lidades:
● Cuando el valor de origen es
"0", el tipo de datos de destino
también es "0" y la salida de
habilitación ENO es "1".
● Si en el valor de origen
solamente es "1" el LSB (Least
Significant Bit), el tipo de datos
de destino también es "1" y la
salida de habilitación ENO es
"1".
● Si en el valor de origen hay bits
distintos al LSB, el tipo de datos
de destino se ajustará según el
LSB y la salida de habilitación
ENO será "0".

WORD

X

DWORD

X

INT

X

DINT

X

El patrón de bits del valor de origen CONVERT
se transfiere sin cambios y alineado
a la derecha al tipo de datos de
destino. El resto de los bits se po‐
nen a "0".

REAL

-

Ninguna conversión explícita

TIME

-

S5TIME

-

DT

-

TOD

-

DATE

-

STRING

-

CHAR

X

-

El patrón de bits del valor de origen CONVERT
se transfiere sin cambios y alineado
a la derecha al tipo de datos de
destino. El resto de los bits se po‐
nen a "0".

x: conversión posible
- : conversión no posible

Programación del PLC
Manual de programación y manejo, 11/2019

591

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Consulte también
BYTE (Página 246)
Sinopsis de las conversiones de tipos de datos (Página 576)
Conversión implícita de BYTE (Página 580)

592

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Conversión explícita de WORD
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos WORD
y las correspondientes instrucciones:

Programación del PLC
Manual de programación y manejo, 11/2019

593

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Origen

Destino

Conversión

Explicación

Nemónicos de la instrucción

WORD

BOOL

X

Pueden darse las siguientes posibi‐ CONVERT
lidades:
● Cuando el valor de origen es
"0", el tipo de datos de destino
también es "0" y la salida de
habilitación ENO es "1".
● Si en el valor de origen
solamente es "1" el LSB (Least
Significant Bit), el tipo de datos
de destino también es "1" y la
salida de habilitación ENO es
"1".
● Si en el valor de origen hay bits
distintos al LSB, el tipo de datos
de destino se ajusta según el
LSB y la salida de habilitación
ENO es "0".

594

BYTE

X

DWORD

X

INT

X

DINT

X

El patrón de bits del valor de origen
se transfiere sin cambios y justifica‐
do a la derecha al tipo de datos de
destino. Si se rebasa el rango de
valores permitido del tipo de datos
de destino, la salida de habilitación
ENO se pone a "0". En ese caso, el
resultado de la conversión no es
válido.

REAL

-

Ninguna conversión explícita

TIME

-

S5TIME

X

El patrón de bits del valor de origen MOVE
se transfiere sin cambios y justifica‐
do a la derecha al tipo de datos de
destino.

DT

-

Ninguna conversión explícita

TOD

-

DATE

X

El patrón de bits del valor de origen MOVE
se transfiere sin cambios y justifica‐
do a la derecha al tipo de datos de
destino.

STRING

-

Ninguna conversión explícita

CHAR

X

El patrón de bits del valor de origen WORD_TO_CHAR
se transfiere sin cambios y justifica‐
do a la derecha al tipo de datos de
destino.

BLOCK_DB

X

El patrón de bits de WORD se inter‐ WORD_TO_BLOCK_DB
preta como número del bloque de
datos.

-

-

-

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400
Origen

Destino

Conversión

Explicación

WORD_BCD1) 2)

INT

X

BCD1) 2)

INT

X

WORD_BCD_TO_INT
Si se rebasa el rango de valores
permitido del tipo de datos de des‐ BCD_TO_INT
tino, o si existe una tétrada no váli‐
da en el rango A..F, la salida de ha‐
bilitación ENO se pone a "0". En
ese caso, el resultado de la conver‐
sión no es válido.

Nemónicos de la instrucción

x: Conversión posible
- : Conversión no posible
El valor que debe convertirse tiene el tipo de datos WORD y se aplica como valor codificado en BCD entre -999 y +999. Tras
la conversión, el resultado es un número entero (representación binaria) del tipo INT.

1)

Válido para SCL: Si el código BCD contiene un error de BCD, la CPU notifica un error de programación y llama el bloque
de organización "OB121". Si el bloque de organización OB121 no existe, la CPU pasa a STOP.
2)

Consulte también
WORD (Página 247)
Sinopsis de las conversiones de tipos de datos (Página 576)
Conversión implícita de WORD (Página 581)

Programación del PLC
Manual de programación y manejo, 11/2019

595

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Conversión explícita de DWORD
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos DWORD
y las correspondientes instrucciones:

596

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Origen

Destino

Conversión

Explicación

Nemónicos de la instrucción

DWORD

BOOL

X

Pueden darse las siguientes
posibilidades:

CONVERT

● Cuando el valor de origen
es "0", el tipo de datos de
destino también es "0" y la
salida de habilitación ENO
es "1".
● Si en el valor de origen
solamente es "1" el LSB
(Least Significant Bit), el
tipo de datos de destino
también es "1" y la salida de
habilitación ENO es "1".
● Si en el valor de origen hay
bits distintos al LSB, el tipo
de datos de destino se
ajusta según el LSB y la
salida de habilitación ENO
es "0".
BYTE

X

WORD

X

El patrón de bits del valor de
origen se transfiere sin cam‐
bios y justificado a la derecha
al tipo de datos de destino.

INT

X

ENO = TRUE
#int1 :=
DWORD_TO_INT(16#FFFF_F
FFF); // -1 bis
#int1 :=
DWORD_TO_INT(16#FFFF_8
000); // -32768
#int1 :=
DWORD_TO_INT(16#0); // 0
bis
#int1 :=
DWORD_TO_INT(16#0000_7
FFF); // 32767
ENO = FALSE
#int1 :=
DWORD_TO_INT(16#FFFF_7
FFF); // -32769
#int1 :=
DWORD_TO_INT(16#8000_00
00); // -2147483648
#int1 :=
DWORD_TO_INT(16#8000); //
32768 bis
#int1 :=
DWORD_TO_INT(16#7FFF_F
FFF); // 2147483647

Programación del PLC
Manual de programación y manejo, 11/2019

597

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400
Origen

DWORD_BCD

2)

BCD1) 2)

1)

Destino

Conversión

Explicación

Nemónicos de la instrucción

DINT

X

MOVE

REAL

X

TIME

X

El patrón de bits del valor de
origen se transfiere sin cam‐
bios y justificado a la derecha
al tipo de datos de destino.

S5TIME

-

Ninguna conversión explícita

-

DT

-

TOD

X

El patrón de bits del valor de
origen se transfiere sin cam‐
bios y justificado a la derecha
al tipo de datos de destino.

MOVE

DATE

-

Ninguna conversión explícita

-

STRING

-

CHAR

-

DINT

X

DINT

X

Si se rebasa el rango de valo‐ DWORD_BCD_TO_DINT
res permitido del tipo de datos
de destino, o si existe una té‐
BCD_TO_DINT
trada no válida en el rango
A..F, la salida de habilitación
ENO se pone a "0". En ese ca‐
so, el resultado de la conver‐
sión no es válido.

x: Conversión posible
- : Conversión no posible
El valor que debe convertirse tiene el tipo de datos DWORD y se aplica como valor codificado en BCD entre -9999999 y
+9999999. Tras la conversión, el resultado es un número entero (representación binaria) del tipo DINT.

1)

Válido para SCL: Si el código BCD contiene un error de BCD, la CPU notifica un error de programación y llama el bloque
de organización "OB121". Si el bloque de organización OB121 no existe, la CPU pasa a STOP.

2)

Consulte también
DWORD (Página 248)
Sinopsis de las conversiones de tipos de datos (Página 576)
Conversión implícita de DWORD (Página 582)

598

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

3.17.3.2

Enteros

Conversión explícita de INT
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos INT y las
correspondientes instrucciones:

Programación del PLC
Manual de programación y manejo, 11/2019

599

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Origen

Destino

Conversión

Explicación

Nemónicos de la instrucción

INT

BOOL

X

El valor se convierte internamente primero a
WORD y a continuación a BOOL.

INT_TO_BOOL

Pueden darse las siguientes posibilidades:
● Cuando el valor de origen es "0", el tipo
de datos de destino también es "0" y la
salida de habilitación ENO es "1".
● Si en el valor de origen solamente es "1"
el LSB (Least Significant Bit), el tipo de
datos de destino también es "1" y la salida
de habilitación ENO es "1".
● Si en el valor de origen hay bits distintos
al LSB, el tipo de datos de destino se
ajusta según el LSB y la salida de
habilitación ENO es "0".
X

WORD

X

DWORD

X

DINT

X

REAL

X

El valor se convierte al formato del tipo de
datos de destino (p. ej. el valor "1" se trans‐
forma en el valor "1.0" con la instrucción
"Convertir valor" (CONVERT)).

CONVERT, SCALE, ITR

TIME

-

Ninguna conversión explícita

-

S5TIME

-

S_CONV, CONVERT

DT

-

TOD

-

DATE

-

STRING

X

El valor se convierte en una cadena de ca‐
racteres. La cadena de caracteres se repre‐
senta con un signo inicial. Si se rebasa la
longitud de la cadena de caracteres, la salida
de habilitación ENO se pone a "0".

CHAR

X

El patrón de bits del valor de origen se trans‐ CONVERT
fiere sin cambios al tipo de datos de destino.
En caso de convertir valores negativos o en
caso de desbordamiento, la salida de habili‐
tación ENO se pone a "0".

BCD1) 2)

X

Si se rebasa el rango de valores permitido del INT_TO_BCD
tipo de datos de destino, o si existe una té‐
INT_TO_BCD_WORD
trada no válida en el rango A..F, la salida de
habilitación ENO se pone a "0". En ese caso,
el resultado de la conversión no es válido.

BCD_WORD X
1) 2)

600

El patrón de bits del valor de origen se trans‐ CONVERT
fiere sin cambios y justificado a la derecha al MOVE
tipo de datos de destino. Si un valor negativo
se convierte a un tipo de datos de destino sin
signo o si se produce un desbordamiento, la CONVERT, ITD
salida de habilitación ENO se pone a "0".

BYTE

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400
Origen

Destino

Conversión

Explicación

Nemónicos de la instrucción

x: Conversión posible
- : Conversión no posible
El valor que debe convertirse tiene el tipo INT y se aplica como número entero con un valor entre -999 y +999. Tras la
conversión, el resultado es un número codificado en BCD del tipo WORD.

1)

Válido para SCL: Si el código BCD contiene un error de BCD, la CPU notifica un error de programación y llama el bloque
de organización "OB121". Si el bloque de organización OB121 no existe, la CPU pasa a STOP.

2)

Consulte también
INT (enteros de 16 bits) (Página 253)
Sinopsis de las conversiones de tipos de datos (Página 576)
Conversión implícita de INT (Página 583)

Programación del PLC
Manual de programación y manejo, 11/2019

601

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Conversión explícita de DINT
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos DINT y
las correspondientes instrucciones:

602

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Origen

Destino

Conversión

Explicación

Nemónicos de la instrucción

DINT

BOOL

X

El valor se convierte internamente primero
a DWORD y a continuación a BOOL.

DINT_TO_BOOL

Pueden darse las siguientes posibilidades:
● Cuando el valor de origen es "0", el tipo
de datos de destino también es "0" y la
salida de habilitación ENO es "1".
● Si en el valor de origen solamente es
"1" el LSB (Least Significant Bit), el tipo
de datos de destino también es "1" y la
salida de habilitación ENO es "1".
● Si en el valor de origen hay bits
distintos al LSB, el tipo de datos de
destino se ajusta según el LSB y la
salida de habilitación ENO es "0".
CONVERT
El patrón de bits del valor de origen se
transfiere sin cambios y justificado a la de‐
recha al tipo de datos de destino. Si un va‐
lor negativo se convierte a un tipo de datos MOVE
CONVERT
de destino sin signo o si se produce un
desbordamiento, la salida de habilitación
ENO se pone a "0".

BYTE

X

WORD

X

DWORD

X

INT

X

REAL

X

El valor se convierte al formato del tipo de CONVERT, DTR, SCALE
datos de destino (p. ej. el valor "1" se trans‐
forma en el valor "1.0" con la instrucción
"Convertir valor" (CONVERT)).

TIME

X

El patrón de bits del valor de origen se
transfiere sin cambios al tipo de datos de
destino.

T_CONV, MOVE

S5TIME

-

Ninguna conversión explícita

-

DT

-

TOD

X

DATE

X

STRING

X

El valor se convierte en una cadena de ca‐ S_CONV, CONVERT
racteres. La cadena de caracteres se re‐
presenta con un signo inicial. Si se rebasa
la longitud de la cadena de caracteres, la
salida de habilitación ENO se pone a "0".

CHAR

X

El patrón de bits del valor de origen se
transfiere sin cambios al tipo de datos de
destino. En caso de convertir valores ne‐
gativos o en caso de desbordamiento, la
salida de habilitación ENO se pone a "0".

DINT_TO_CHAR

BCD1) 2)

X
X

Si se rebasa el rango de valores permitido
del tipo de datos de destino, o si existe una
tétrada no válida en el rango A..F, la salida
de habilitación ENO se pone a "0". En ese
caso, el resultado de la conversión no es
válido.

DINT_TO_BCD

BCD_DWOR
D1) 2)

Programación del PLC
Manual de programación y manejo, 11/2019

CONVERT
El patrón de bits del valor de origen se
transfiere sin cambios y justificado a la de‐
recha al tipo de datos de destino.

DINT_TO_BCD_DWORD

603

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400
Origen

Destino

Conversión

Explicación

Nemónicos de la instrucción

x: Conversión posible
- : Conversión no posible
El valor que debe convertirse tiene el tipo de datos DWORD y se aplica como valor codificado en BCD entre -9999999 y
+9999999. Tras la conversión, el resultado es un número entero (representación binaria) del tipo DINT.

1)

Válido para SCL: Si el código BCD contiene un error de BCD, la CPU notifica un error de programación y llama el bloque
de organización "OB121". Si el bloque de organización OB121 no existe, la CPU pasa a STOP.

2)

Consulte también
DINT (enteros de 32 bits) (Página 255)
Sinopsis de las conversiones de tipos de datos (Página 576)
Conversiones implícitas (Página 579)

604

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

3.17.3.3

Números en coma flotante

Conversión explícita de REAL
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos REAL y
las correspondientes instrucciones:
Origen

Destino

Conversión

Explicación

Nemónicos de la instrucción

REAL

BOOL

-

Ninguna conversión explícita

-

BYTE

-

WORD

-

DWORD

X

El patrón de bits del valor de origen
se transfiere sin cambios al tipo de
datos de destino.

CONVERT, MOVE

INT

X

DINT

X

El valor se convierte al tipo de datos CONVERT, ROUND, RND, CEIL, RND+,
de destino. El resultado de la conver‐ FLOOR, RND-, TRUNC, UNSCALE
sión depende de la instrucción utili‐
zada. Si durante la conversión se re‐
basa el rango permitido de valores
del tipo de datos de destino o el valor
a convertir es un número en coma
flotante no válido, la salida de habili‐
tación ENO se pone a "0".

TIME

-

S5TIME

-

DT

-

TOD

-

DATE

-

STRING

X

El valor se convierte en una cadena S_CONV, CONVERT
de caracteres. Si se rebasa la longi‐
tud de la cadena de caracteres o el
valor a convertir es un número en co‐
ma flotante no válido, la salida de ha‐
bilitación ENO se pone a "0".

CHAR

-

Ninguna conversión explícita

Ninguna conversión explícita

-

-

x: Conversión posible
- : Conversión no posible

Consulte también
REAL (Página 261)
Sinopsis de las conversiones de tipos de datos (Página 576)
Conversiones implícitas (Página 579)

Programación del PLC
Manual de programación y manejo, 11/2019

605

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

3.17.3.4

Temporizadores

Conversión explícita de TIME
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos TIME y
las correspondientes instrucciones:
Origen

Destino

Conversión

Explicación

Nemónicos de la instrucción

TIME

BOOL

-

Ninguna conversión explícita

-

BYTE

-

WORD

-

DWORD

X

El patrón de bits del valor de origen se CONVERT
transfiere sin cambios al tipo de datos
de destino. El resultado de la conver‐
sión muestra el tiempo en milisegun‐
dos.

INT

-

Ninguna conversión explícita

DINT

X

El patrón de bits del valor de origen se T_CONV, CONVERT
transfiere sin cambios al tipo de datos
de destino. El resultado de la conver‐
sión muestra el tiempo en milisegun‐
dos.

REAL

-

Ninguna conversión explícita

S5TIME

X

El valor se convierte al formato del ti‐ T_CONV, CONVERT
po de datos de destino. Si se produce
un desbordamiento, la salida de habi‐
litación ENO se pone a "0".

DT

-

Ninguna conversión explícita

TOD

-

DATE

-

STRING

-

CHAR

-

-

-

-

x: Conversión posible
- : Conversión no posible

Consulte también
TIME (tiempo IEC) (Página 266)
Sinopsis de las conversiones de tipos de datos (Página 576)
Conversión implícita de TIME (Página 585)

606

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Conversión explícita de S5TIME
Posibilidades de la conversión explícita en KOP, FUP, AWL y GRAPH
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos S5TIME
y las correspondientes instrucciones:
Origen

Destino

Conversión

Explicación

Nemónicos de la instrucción

S5TIME

BOOL

-

Ninguna conversión explícita

-

BYTE

-

WORD

X

El valor se convierte al formato del ti‐
po de datos de destino.

S5TIME_TO_WORD

DWORD

-

Ninguna conversión explícita

-

INT

-

DINT

-

REAL

-

TIME

X

El valor se convierte al formato del ti‐
po de datos de destino.

T_CONV, CONVERT

Ninguna conversión explícita

-

DT

-

TOD

-

DATE

-

STRING

-

CHAR

-

x: Conversión posible
- : Conversión no posible

Consulte también
S5TIME (tiempo) (Página 265)
Sinopsis de las conversiones de tipos de datos (Página 576)
Conversión implícita de S5TIME (Página 586)

Programación del PLC
Manual de programación y manejo, 11/2019

607

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

3.17.3.5

Fecha y hora

Conversión explícita de DATE
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos DATE y
las correspondientes instrucciones:
Origen

Destino

Conversión

Explicación

Nemónicos de la instrucción

DATE

BOOL

-

Ninguna conversión explícita

-

BYTE

-

WORD

X

El valor se convierte al formato del ti‐
po de datos de destino.

DATE_TO_WORD

DWORD

-

Ninguna conversión explícita

-

INT

X

DATE_TO_INT

DINT

X

El valor se convierte al formato del ti‐
po de datos de destino.

REAL

-

Ninguna conversión explícita

-

TIME

-

S5TIME

-

DT

-

TOD

-

STRING

-

CHAR

-

DATE_TO_DINT

x: Conversión posible
- : Conversión no posible

Consulte también
DATE (Página 268)
Sinopsis de las conversiones de tipos de datos (Página 576)
Conversión implícita de DATE (Página 587)

608

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Conversión explícita de TOD
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos TOD y las
correspondientes instrucciones:
Origen
TOD

Destino

Conversión

Explicación

Nemónicos de la instrucción

Ninguna conversión explícita

-

BOOL

-

BYTE

-

WORD

-

DWORD

X

El valor se convierte al formato del tipo TOD_TO_DWORD
de datos de destino.

INT

-

Ninguna conversión explícita

-

DINT

X

El patrón de bits del valor de origen se
transfiere sin cambios y alineado a la
derecha al tipo de datos de destino.

TOD_TO_DINT

REAL

-

Ninguna conversión explícita

-

TIME

-

S5TIME

-

DT

-

DATE

-

STRING

-

CHAR

-

x: Conversión posible
- : Conversión no posible

Consulte también
TOD (TIME_OF_DAY) (Página 268)
Sinopsis de las conversiones de tipos de datos (Página 576)
Conversión implícita de TOD (Página 588)

Programación del PLC
Manual de programación y manejo, 11/2019

609

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Conversión explícita de DT
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos DT y las
correspondientes instrucciones:
Ori‐
gen

Destino

Conversión

Explicación

Nemónicos de la instrucción

DT

BOOL

-

Ninguna conversión explícita

-

BYTE

-

WORD

-

DWORD

-

INT

-

DINT

-

REAL

-

TIME

-

S5TIME

-

TOD

X

Durante la conversión, los datos de la hora se
extraen del formato DTL y se transfieren al
tipo de datos de destino.

T_CONV, CONVERT

DATE

X

Durante la conversión, la información de la
fecha se extrae del formato DTL y se trans‐
fiere al tipo de datos de destino.

STRING

-

Ninguna conversión explícita

CHAR

-

-

x: Conversión posible
- : Conversión no posible

Consulte también
DT (DATE_AND_TIME) (Página 269)
Sinopsis de las conversiones de tipos de datos (Página 576)

610

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

3.17.3.6

Cadenas de caracteres

Conversión explícita de CHAR
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos CHAR y
las correspondientes instrucciones:
Origen

Destino

Conversión

Explicación

Nemónicos de la instrucción

CHAR

BOOL

-

Ninguna conversión explícita

-

El patrón de bits del valor de origen se
transfiere sin cambios y alineado a la
derecha al tipo de datos de destino.

CONVERT

Ninguna conversión explícita

-

BYTE

X

WORD

X

DWORD

X

INT

X

DINT

X

REAL

-

TIME

-

S5TIME

-

DT

-

TOD

-

DATE

-

STRING

X

El valor se convierte en el primer ca‐ S_CONV, CONVERT
rácter de la cadena de caracteres
(STRING). Si la longitud de la cadena
de caracteres no está definida, se
ajustará la longitud "1" tras la conver‐
sión. Si la longitud de la cadena de
caracteres está definida, esta no cam‐
bia tras la conversión.

x: Conversión posible
- : Conversión no posible

Consulte también
CHAR (Página 273)
Sinopsis de las conversiones de tipos de datos (Página 576)
Conversión implícita de CHAR (Página 589)

Programación del PLC
Manual de programación y manejo, 11/2019

611

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Conversión explícita de STRING
Posibilidades de conversión explícita
La tabla siguiente muestra las posibilidades de conversión explícita del tipo de datos STRING
y las correspondientes instrucciones:
Origen

Destino

Conversión

Explicación

Nemónicos de la instrucción

STRING

BOOL

-

Ninguna conversión explícita

-

BYTE

-

WORD

-

DWORD

-

INT

X

DINT

X

REAL

X

La conversión comienza por el primer ca‐ S_CONV, CONVERT
rácter de la cadena de caracteres
(STRING) y termina en el fin de la cadena
o bien en el primer carácter no permitido.
Los caracteres siguientes están permitidos
en la conversión:
● Cifra
● Signo
● Punto
El primer carácter de la cadena de carac‐
teres puede ser un signo (+, -) o una cifra.
Se ignoran los espacios iniciales. El punto
actúa como separador en la conversión de
números en coma flotante. La notación ex‐
ponencial "e" o "E" no está permitida. A la
izquierda del punto decimal se permite
usar comas para separar los millares, ya
que se ignora. Si la estructura de la cadena
de caracteres no es válida para la conver‐
sión o se produce un desbordamiento, la
salida de habilitación ENO se pone a "0".

TIME

-

S5TIME

-

DT

-

TOD

-

DATE

-

CHAR

X

Ninguna conversión explícita

-

El primer carácter de la cadena de carac‐ S_CONV, CONVERT
teres (STRING) se transfiere al tipo de da‐
tos de destino. Si la cadena de caracteres
está vacía, se escribirá el valor "0" en el
tipo de datos de destino.

x: conversión posible
- : conversión no posible

612

Programación del PLC
Manual de programación y manejo, 11/2019

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

Consulte también
STRING (Página 274)
Sinopsis de las conversiones de tipos de datos (Página 576)
Conversiones implícitas (Página 579)

3.17.3.7

Otras funciones de conversión

Otras funciones de conversión explícita en SCL
Posibilidades adicionales para la conversión explícita en SCL
La tabla siguiente muestra las posibilidades adicionales de conversión explícita en SCL y las
correspondientes instrucciones:
Origen

Destino

Explicación

Nemónicos de la instrucción

WORD

BLOCK_DB

El patrón de bits de WORD se interpreta como
número del bloque de datos.

WORD_TO_BLOCK_DB

BLOCK_DB

WORD

El número del bloque de datos se interpreta co‐ BLOCK_DB_TO_WORD
mo patrón de bits de WORD.

Programación del PLC
Manual de programación y manejo, 11/2019

613

Tipos de datos
3.17 Conversión de tipos de datos en el S7-300/S7-400

614

Programación del PLC
Manual de programación y manejo, 11/2019

4

Instrucciones
4.1

Instrucciones

4.1.1

Librerías de ejemplo

4.1.1.1

Sample Library for Instructions
La “Sample Library for Instructions” es la librería global para los ejemplos de programas
relativos a las instrucciones de STEP 7 (TIA Portal). Con sus ejemplos de programas
compactos y fáciles de comprender en lenguaje de programación KOP o SCL, esta librería le
proporcionará ayuda en la programación. Para usar la librería se requiere como mínimo una
CPU de la gama SIMATIC S7-1200 / S7-1500.

,QVWUXFFLRQHVHQHO7,$3RUWDO
6DPSOH/LEUDU\IRU,QVWUXFWLRQV

(MHPSORV

FRPROLEUHU¯D

,QVWUXFFLRQHV
VLPSOHV

Programación del PLC
Manual de programación y manejo, 11/2019

,QVWUXFFLRQHV
DYDQ]DGDV

7HFQRORJ¯D

&RPXQLFDFLµQ

615

Instrucciones
4.1 Instrucciones

Ejemplos de programas en el sistema de información del TIA Portal
Los ejemplos de programas de la “Sample Library for Instructions” son los mismos que los
ejemplos de programas relativos a las instrucciones del sistema de información del TIA Portal.
Por lo tanto encontrará la documentación del ejemplo que le interese en la Ayuda (<F1>) del
TIA Portal.

3URJUDPDHQHO7,$3RUWDO

6LVWHPDGHLQIRUPDFLµQ7,$3RUWDO

/DGRFXPHQWDFLµQH[SOLFDHMHPSORGH
SURJUDPD

)

/DOLEUHU¯DFRQWLHQHHMHPSORGHSURJUDPDREWHQLGRGHODGRFXPHQWDFLµQ

616

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Descarga de la librería
En la página de preguntas frecuentes (FAQ) (https://support.industry.siemens.com/cs/ww/es/
view/109476781) encontrará la “Sample Library for Instructions”.
Nota
Inserción correcta de ejemplos de programas en un proyecto
Debido a las diferentes condiciones previas y funciones, los ejemplos de programas pueden
contener, además de los bloques de programa, otros componentes (p. ej., variables PLC, tipos
de datos PLC, tablas de observación o similares). Además, hay ejemplos de programas que
requieren hardware especial (varias CPU, periferia descentralizada, módulos de entrada, etc.).
Observe las reglas siguientes:
● Nunca inserte todos los ejemplos de programas o la carpeta entera de "Sample Library for
Instructions" en una CPU.
● Asegúrese de que el ejemplo de programa en cuestión no esté compuesto por
componentes para varias CPU.
● Inserte siempre los componentes de los ejemplos de programas de uno en uno en la
carpeta correspondiente del proyecto. Compruebe también que la CPU sea la apropiada.

4.1.1.2

Library of General Functions
La “Library of General Functions” es la librería global para las funciones complementarias
relativas a las instrucciones de STEP 7 (TIA Portal). Esta librería ofrece, como ampliación del
volumen de instrucciones, bloques con funciones básicas útiles que con frecuencia son
necesarios en proyectos de automatización. Todos los contenidos de la librería pueden
utilizarse con una CPU de la serie SIMATIC S7-1200(F) / S7-1500(F).

)XQFLRQHVJHQ«ULFDV

(MHPSORV

FRPROLEUHU¯D /*) /LEUDU\RI*HQHUDO)XQFWLRQV

0DQLSXODFLµQ
GHGDWRV

)XQFLRQHV
GHFRQYHUVLµQ

)XQFLRQHV
PDWHP£WLFDV

)XQFLRQHVGH
)HFKD\KRUD

*HQHUDGRUHV
GHVH³DOHV

2WUDV
IXQFLRQHV

Funciones utilizables con carácter general
Las funciones de la librería "Library of General Functions", utilizables con carácter general,
proporcionan bloques en el lenguaje de programación SCL. La librería contiene, entre otras,
las siguientes funciones: FIFO, función de búsqueda, cálculos de matrices, reloj astronómico.
Es posible utilizar las funciones inmediatamente y con carácter universal mediante
parametrización.

Programación del PLC
Manual de programación y manejo, 11/2019

617

Instrucciones
4.1 Instrucciones

Descarga de la librería
En la página de preguntas frecuentes (FAQ) (https://support.industry.siemens.com/cs/ww/es/
view/109479728) encontrará la “Library of General Functions”.

4.1.2

Instrucciones que funcionan asíncronamente

4.1.2.1

Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente

Instrucciones que funcionan asíncronamente
En la ejecución del programa se distingue entre las instrucciones que funcionan
síncronamente y las que funcionan asíncronamente.
Las propiedades "síncrona" y "asíncrona" hacen referencia a la relación temporal entre la
llamada y la ejecución de la instrucción:
● Para instrucciones síncronas se aplica lo siguiente: Cuando finaliza la llamada de una
instrucción que funciona síncronamente finaliza también su ejecución.
● En cambio, en las instrucciones asíncronas no es así: La ejecución de una instrucción
asíncrona puede prolongarse a lo largo de varias llamadas. La CPU procesa las
instrucciones asíncronas en paralelo al programa de usuario cíclico. Durante su
procesamiento, las instrucciones que funcionan asíncronamente ocupan recursos de la
CPU.
Por lo general, las instrucciones que funcionan asíncronamente sirven para transferir datos
(juegos de datos para módulos, datos de comunicación, datos de diagnóstico, ...).
Encontrará más información sobre las instrucciones que funcionan asíncronamente en:
SIMATIC S7-1500 / ET 200MP Manual Collection (https://
support.industry.siemens.com/cs/ww/es/view/86140384) en el manual de sistema, bajo
Principios básicos de la ejecución del programa > Instrucciones que funcionan
asíncronamente.

Identificación de la petición
Para ejecutar una instrucción a lo largo de varias llamadas, la CPU debe poder asignar
claramente una llamada subsiguiente a una petición en curso de la instrucción. Para asignar
la llamada a la petición, la CPU utiliza uno de los dos mecanismos siguientes, en función del
tipo de instrucción:
● Por medio de la instancia de la instrucción (si es del tipo "SFB" bloque de función de
sistema)
● Por medio de los parámetros de entrada de la instrucción que identifican la petición
Si mediante una instrucción que funciona asíncronamente se dispara una alarma de proceso
o se lanza la salida de comandos de control a los esclavos DP o bien una transferencia de
datos o la cancelación de una conexión no configurada y se vuelve a llamar dicha instrucción

618

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
antes de que finalice la petición en curso, el comportamiento posterior de la instrucción
dependerá en gran medida de si en la siguiente llamada se trata de la misma petición o no.

Transferencia de parámetros a bloques de programa de ejecución asíncrona
Los bloques lógicos (FB/FC) y bloques de datos (DB) se pueden crear con diferentes tipos de
acceso ("estándar" y "optimizado"). En los bloques lógicos se puede llamar cualquier tipo de
instrucción. Algunas instrucciones (p. ej. "WRIT_DBL" y "READ_DBL") se ejecutan de modo
asíncrono. Estos bloques de programa no pueden recibir variables de TEMP, ya que los datos
no se pueden modificar durante la ejecución.
Asegúrese de no utilizar estas instrucciones en programas en los que los bloques lógicos se
llamen unos a otros con diferente tipo de acceso, de modo que pudieran darse los siguientes
casos:
● Una estructura de un bloque de datos estándar se transfiere directa o indirectamente a un
bloque lógico optimizado que retransfiere esta estructura directa o indirectamente a uno de
los bloques arriba mencionados.
● El caso inverso en el que una estructura de un bloque lógico optimizado se transfiera directa
o indirectamente a un bloque de datos estándar que retransfiere esta estructura directa o
indirectamente a uno de los bloques de programa arriba mencionados.
En otro caso se crea una copia oculta de los datos transferidos en TEMP, que hace que los
bloques de programa que funcionan asíncronamente den una respuesta negativa.

Parámetro REQ
El parámetro de entrada REQ (request) sirve exclusivamente para lanzar la orden o para
preparar su inicio:
● Algunas instrucciones como, p. ej., RecipeExport y RecipeImport se activan con un flanco
ascendente en REQ. Para estas instrucciones debe realizarse una llamada preparatoria
con REQ = 0 antes de efectuar la primera llamada con REQ = 1.
● La petición se lanza poniendo a "1" el parámetro de entrada REQ (caso 1).
● Si hay una petición determinada en curso y se vuelve a llamar la instrucción para la misma
petición antes de que finalice (p. ej. en un OB de alarma cíclica), REQ no es evaluado por
la instrucción (caso 2).
● Si la petición ha finalizado pero en la próxima llamada el parámetro de entrada REQ sigue
estando en "1", la petición vuelve a iniciarse de inmediato.
Nota
Bit REQ = "1"
Tenga en cuenta que si el bit REQ está activado, la instrucción asíncrona volverá a
iniciarse, posiblemente de forma involuntaria, una vez finalice la llamada anterior. Para
poder mantener mejor el programa y tener una visión más clara del mismo, es aconsejable
volver a poner a "0" el bit REQ lo antes posible.

Programación del PLC
Manual de programación y manejo, 11/2019

619

Instrucciones
4.1 Instrucciones

Parámetro RET_VAL y BUSY
A través de los parámetros de salida RET_VAL y BUSY se indica el estado de ejecución de la
petición.
Tenga en cuenta la indicación contenida en el apartado: Evaluación de errores con el
parámetro de salida RET_VAL (Página 174)
● Al llamar con REQ = 0, si hay recursos de sistema libres, en RET_VAL se introduce
W#16#7000 y BUSY devuelve el valor "0".
Nota
Llamada con REQ = 0 en caso de recursos de sistema ocupados
Si en una CPU S7-1500 se llama una instrucción asíncrona con REQ = 0 y en ese momento
están ocupados todos los recursos del sistema disponibles y la llamada no es una llamada
intermedia de una petición ya en curso, en RET_VAL se registra el código de error
W#16#80C3 (error temporal de recurso).
En una CPU S7-300, cuando se dan esas condiciones se registra el código de error
W#16#7000 (primera llamada con REQ = 0) en RET_VAL.
● En el caso 1 (primera llamada con REQ = 1), siempre que haya recursos de sistema libres
y los parámetros de entrada reciban valores correctos, se registrará el código W#16#7001
en RET_VAL y BUSY se pondrá a "1".
Si los recursos de sistema necesarios están ocupados temporalmente o si hay un error en
los parámetros de entrada, se registrará el código de error correspondiente en RET_VAL y
BUSY se pondrá a "0".
● En el caso 2 (llamada intermedia) se registra el código W#16#7002 en RET_VAL (significa
que la petición todavía se está procesando) y BUSY se pone a "1".
● En la última llamada de una petición vale lo siguiente:
– En la instrucción "DPNRM_DG (Página 2541)", si la transferencia de datos es correcta
se registra en RET_VAL el número de datos transferidos en bytes como número
positivo. En BUSY se escribe un "0" en este caso.
En caso de error se registra información de error en RET_VAL. BUSY no se debe
evaluar en este caso.
– En las demás instrucciones y si la petición se ejecuta sin errores, se registra un "0" en
RET_VAL y BUSY se pone a "0". En caso de error se registra el código de error en
RET_VAL y BUSY se pone a "0".
Nota
Si la primera y la última llamada coinciden en el tiempo, para RET_VAL y BUSY se aplica lo
descrito para la última llamada.

620

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Resumen
La tabla siguiente muestra una visión esquemática de lo arriba descrito. En particular, indica
los valores posibles de los parámetros de salida, si la petición no ha finalizado todavía después
de una llamada de la instrucción.
Nota
En el programa es necesario evaluar los parámetros de salida relevantes después de cada
llamada.
Relación entre llamada, REQ, RET_VAL y BUSY cuando hay una petición en curso:
N.º de la
llamada

Tipo de lla‐
mada

REQ

RET_VAL

BUSY

DONE

ERROR

ENO

0

Llamada
preparato‐
ria

0

W#16#7000

0

0

0

True

1

Primera lla‐ 1
mada

W#16#7001

1

0

0

True

Código de error

0

0

1

False

2 a (n - 1) Llamada in‐ Irrele‐
termedia
vante

W#16#7002

1

0

0

True

n

0
W#16#0000
(excepciones: RD_REC (Pági‐
na 2504) y RD_DPARA (Pági‐
na 2619): la longitud de datos leída
correctamente se escribe en el pará‐
metro STATUS.)

1

0

True

Código de error, si se han producido
errores.

0

1

False

Última lla‐
mada

Irrele‐
vante

4.1.3

Instrucciones básicas

4.1.3.1

KOP

0

Operaciones lógicas con bits
---| |---: Contacto normalmente abierto
Descripción
La activación de un contacto normalmente abierto depende del estado lógico del operando
correspondiente. Si el estado lógico del operando es "1", se cierra el contacto normalmente
abierto y el estado lógico de la entrada se transfiere a la salida.

Programación del PLC
Manual de programación y manejo, 11/2019

621

Instrucciones
4.1 Instrucciones
Si el estado lógico del operando es "0", el contacto normalmente abierto no se activa y el
estado lógico de la salida de la instrucción se pone a "0".
En una conexión en serie, dos o más contactos normalmente abiertos se combinan de bit en
bit mediante una operación lógica Y. La corriente fluye por una conexión en serie cuando todos
los contactos están cerrados.
En una conexión en paralelo, los contactos normalmente abiertos se combinan mediante una
operación lógica O. La corriente fluye por una conexión en paralelo si uno de los contactos está
cerrado.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro
<Operando>

Declaración
Input

Tipo de datos
BOOL

Área de memoria
S7-1200

S7-1500

I, Q, M, D, L
o constante

I, Q, M, D, L,
T, C o cons‐
tante

Descripción
Operando cuyo es‐
tado lógico se con‐
sulta.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción.
Cree para ello un bloque de datos global con el siguiente contenido:
Nombre del bloque: SLI_gDB_NOContact
Nombre

Tipo de datos

start1

BOOL

start2

BOOL

start3

BOOL

startOut

BOOL

Escriba el siguiente código de programa:
ಯ6/,BJ'%B ಯ6/,BJ'%B
12&RQWDFWಯ 12&RQWDFWಯ
VWDUW
VWDUW

ಯ6/,BJ'%B
12&RQWDFWಯ
VWDUW2XW

ಯ6/,BJ'%B
12&RQWDFWಯ
VWDUW

El operando "SLI_gDB_NOContact".startOut se activa cuando se cumple una de las
condiciones siguientes:
● Los operandos "SLI_gDB_NOContact".start1 y "SLI_gDB_NOContact".start2 tienen el
estado lógico "1".
● El operando "SLI_gDB_NOContact".start3 tiene el estado lógico "1".

622

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

---| / |---: Contacto normalmente cerrado
Descripción
La activación de un contacto normalmente cerrado depende del estado lógico del operando
correspondiente. Si el estado lógico del operando es "1", se abre el contacto normalmente
cerrado y el estado lógico de la salida de la instrucción se pone a "0".
Si el estado lógico del operando es "0", no se activa el contacto normalmente cerrado y el
estado lógico de la entrada se transfiere a la salida.
En una conexión en serie, dos o más contactos normalmente cerrados se combinan de bit en
bit mediante una operación lógica Y. La corriente fluye por una conexión en serie cuando todos
los contactos están cerrados.
En una conexión en paralelo, los contactos normalmente cerrados se combinan mediante una
operación lógica O. La corriente fluye por una conexión en paralelo si uno de los contactos está
cerrado.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro
<Operando>

Declara‐
ción

Tipo de
datos

Input

BOOL

Área de memoria
S7-1200

S7-1500

I, Q, M, D, L o cons‐
tante

I, Q, M, D, L, T, C
o constante

Descripción
Operando cu‐
yo estado lógi‐
co se consulta.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

Programación del PLC
Manual de programación y manejo, 11/2019

623

Instrucciones
4.1 Instrucciones
El operando "TagOut" se activa cuando se cumple una de las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" tienen el estado lógico "1".
● El operando "TagIn_3" tiene el estado lógico "0".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

--|NOT|--: Invertir RLO
Descripción
La instrucción "Invertir RLO" invierte el estado lógico del resultado lógico (RLO). Si el estado
lógico de la entrada de la instrucción es "1", la salida de la instrucción devuelve el estado lógico
"0". Si el estado lógico de la entrada de la instrucción es "0", la salida devuelve el estado lógico
"1".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

127

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ ಯ7DJ,QBಯ

El operando "TagOut" se desactiva cuando se cumple una de las condiciones siguientes:
● El operando "TagIn_1" devuelve el estado lógico "1".
● El estado lógico de los operandos "TagIn_2" y "TagIn_3" es "1".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

624

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

---( )---: Asignación
Descripción
La instrucción "Asignación" permite activar el bit de un operando indicado. Si el resultado
lógico (RLO) en la entrada de la bobina es "1", el operando indicado adopta el estado lógico "1".
Si el estado lógico de la entrada de la bobina es "0", el bit del operando indicado se pone a "0".
La instrucción no afecta al RLO. El RLO de la entrada de la bobina se transfiere directamente
a la salida.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Asignación":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Output

BOOL

I, Q, M, D, L

Operando al que se asigna el
RLO.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJ2XWBಯ
ಯ7DJ,QBಯ

ಯ7DJ2XWBಯ

El operando "TagOut_1" se activa cuando se cumple una de las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● El estado lógico del operando "TagIn_3" es "0".
El operando "TagOut_2" se activa cuando se cumple una de las condiciones siguientes:
● Los operandos "TagIn_1", "TagIn_2" y "TagIn_4" devuelven el estado lógico "1".
● El estado lógico del operando "TagIn_3" es "0" y el del operando "TagIn_4" es "1".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

625

Instrucciones
4.1 Instrucciones

--( / )--: Negar asignación
Descripción
La instrucción "Negar asignación" invierte el resultado lógico (RLO) y lo asigna al operando
indicado. Si el RLO de la entrada de la bobina es "1", se desactiva el operando. Si el RLO de
la entrada de la bobina es "0", el operando adopta el estado lógico "1".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Negar asignación":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Output

BOOL

I, Q, M, D, L

Operando al que se asigna el
RLO negado.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJ2XWBಯ

ಯ7DJ,QBಯ

ಯ7DJ2XWBಯ

El operando "TagOut_1" se desactiva cuando se cumple una de las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● El estado lógico del operando "TagIn_3" es "0".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

---( R )---: Desactivar salida
Descripción
La instrucción "Desactivar salida" permite poner a "0" el estado lógico de un operando indicado.

626

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La instrucción se ejecuta solo si el resultado lógico (RLO) de la entrada de la bobina es "1". Si
fluye corriente hacia la bobina (RLO = "1"), el operando indicado se pone a "0". Si el RLO de
la entrada de la bobina es "0" (no hay flujo de señales en la bobina), el estado lógico del
operando indicado no cambia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desactivar salida":
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

<Operando>

Output

BOOL

Descripción

S7-1500

I, Q, M, D, L I, Q, M, D, L,
T, C

Operando que se
desactiva si el RLO
= "1".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJ2XWಯ
5

ಯ7DJ,QBಯ

El operando "TagOut" se desactiva cuando se cumple una de las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● El estado lógico del operando "TagIn_3" es "0".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

---( S )---: Activar salida
Descripción
Mediante la instrucción "Activar salida" se pone a "1" el estado lógico de un operando indicado.
La instrucción se ejecuta solo si el resultado lógico (RLO) de la entrada de la bobina es "1". Si
fluye corriente hacia la bobina (RLO = "1"), el operando indicado se pone a "1". Si el RLO de

Programación del PLC
Manual de programación y manejo, 11/2019

627

Instrucciones
4.1 Instrucciones
la entrada de la bobina es "0" (no hay flujo de señales en la bobina), el estado lógico del
operando indicado no cambia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Activar salida":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Output

BOOL

I, Q, M, D, L

Operando que se activa si
RLO = "1".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJ2XWಯ
6

ಯ7DJ,QBಯ

El operando "TagOut" se activa cuando se cumple una de las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● El estado lógico del operando "TagIn_3" es "0".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

SET_BF: Activar mapa de bits
Descripción
La instrucción "Activar mapa de bits" activa varios bits a partir de una dirección específica.
El número de bits que deben activarse se determina mediante el valor de <Operando1> .
<Operando2> determina la dirección del primer bit que debe activarse. El valor del
<Operando1> no puede ser mayor que el número de bits de un byte seleccionado. Si es mayor,
la instrucción no se ejecuta y aparece el mensaje de error "Se ha excedido el índice
<Operando1>". Los bits permanecen activados hasta que son desactivados explícitamente
por otra instrucción.

628

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
El <Operando1> se introduce en el comodín del operando debajo de la instrucción. El
<Operando2> se introduce en el comodín del operando encima de la instrucción.
La instrucción se ejecuta solo si el resultado lógico (RLO) de la entrada de la bobina es "1". Si
en la entrada de la bobina hay un RLO de "0", la instrucción no se ejecuta.

Mapas de bits del tipo de datos PLC, STRUCT o ARRAY
En estructuras del tipo de datos PLC, STRUCT o ARRAY se activan como máximo tantos bits
como contiene la estructura:
● Si se indica el valor "20" en <Operando1>, por ejemplo, y la estructura solo contiene 10 bits,
solo se activarán esos 10 bits.
● Si se indica el valor "5" en <Operando1>, por ejemplo, y la estructura contiene 10 bits, se
activarán exactamente 5 bits.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Activar mapa de bits":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

UINT

Constante

Número de bits que deben
activarse

<Operan‐
do2>

Output

BOOL

I, Q, M

Puntero al primer bit que de‐
be activarse.

En un DB o un
IDB, un elemento
de ARRAY[..] of
BOOL

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ0\'%ಯ0\%RRO$UUD\>@
6(7B%)


Si los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1", se activan 5 bits a partir
de la dirección del operando "MyDB".MyBoolArray[4].
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

629

Instrucciones
4.1 Instrucciones

RESET_BF: Desactivar mapa de bits
Descripción
La instrucción "Desactivar mapa de bits" desactiva varios bits a partir de una dirección
específica.
El número de bits que se deben desactivar se determina mediante el valor de <Operando1> .
<Operando2> determina la dirección del primer bit que debe desactivarse. El valor del
<Operando1> no puede ser mayor que el número de bits de un byte seleccionado. Si es mayor,
la instrucción no se ejecuta y aparece el mensaje de error "Se ha excedido el índice
<Operando1>". Los bits permanecen desactivados hasta que son activados explícitamente
por otra instrucción.
El <Operando1> se introduce en el comodín del operando debajo de la instrucción. El
<Operando2> se introduce en el comodín del operando encima de la instrucción.
La instrucción se ejecuta solo si el resultado lógico (RLO) de la entrada de la bobina es "1". Si
en la entrada de la bobina hay un RLO de "0", la instrucción no se ejecuta.

Mapas de bits del tipo de datos PLC, STRUCT o ARRAY
En estructuras del tipo de datos PLC, STRUCT o ARRAY se desactivan como máximo tantos
bits como contiene la estructura:
● Si se indica el valor "20" en <Operando1>, por ejemplo, y la estructura solo contiene 10 bits,
solo se desactivarán esos 10 bits.
● Si se indica el valor "5" en <Operando1>, por ejemplo, y la estructura contiene 10 bits, se
desactivarán exactamente 5 bits.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desactivar mapa de bits":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

UINT

Constante

Número de bits que se deben
desactivar

<Operan‐
do2>

Output

BOOL

I, Q, M

Puntero al primer bit que de‐
be desactivarse.

En un DB o un DB
de instancia, un
elemento de
ARRAY[..] of
BOOL

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

630

ಯ7DJ,QBಯ

ಯ0\'%ಯ0\%RRO$UUD\>@
5(6(7B%)


Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Si los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1", se desactivan 5 bits a
partir de la dirección del operando "MyDB".MyBoolArray[4].
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

SR: Flipflop de activación/desactivación
Descripción
La instrucción "Flipflop de activación/desactivación" sirve para activar o desactivar el bit de un
operando indicado en función del estado lógico de las entradas S y R1. Si el estado lógico de
la entrada S es "1" y el de la entrada R1 es "0", el operando indicado se pone a "1". Si el estado
lógico de la entrada S es "0" y el de la entrada R1 es "1", el operando indicado se pone a "0".
La entrada R1 prevalece sobre la entrada S. Si el estado lógico de las entradas S y R1 es "1",
el estado lógico del operando indicado se pone a "0".
Si el estado lógico de ambas entradas S y R1 es "0", no se ejecuta la instrucción. En este caso,
no cambia el estado lógico del operando.
El estado lógico actual del operando se transfiere a la salida Q y se puede consultar allí.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Flipflop de activación/
desactivación":
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

S7-1500

Descripción

S

Input

BOOL

I, Q, M, D, L
o constante

I, Q, M, D, L
o constante

R1

Input

BOOL

I, Q, M, D, L
o constante

I, Q, M, D, L, Desactivación habili‐
T, C o cons‐ tada
tante

<Operando>

InOut

BOOL

I, Q, M, D, L

I, Q, M, D, L Operando que se ac‐
tiva o desactiva.

Q

Output

BOOL

I, Q, M, D, L

I, Q, M, D, L Estado lógico del
operando

Programación del PLC
Manual de programación y manejo, 11/2019

Activación habilitada

631

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ65ಯ
ಯ7DJ,QBಯ

6

65

4

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ
5

Los operandos "TagSR" y "TagOut" se activan cuando se cumplen las condiciones siguientes:
● El operando "TagIn_1" devuelve el estado lógico "1".
● El operando "TagIn_2" devuelve el estado lógico "0".
Los operandos "TagSR" y "TagOut" se desactivan cuando se cumple una de las condiciones
siguientes:
● El operando "TagIn_1" devuelve el estado lógico "0" y el operando "TagIn_2" devuelve el
estado lógico "1".
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

RS: Flipflop de desactivación/activación
Descripción
La instrucción "Flipflop de desactivación/activación" sirve para desactivar o activar el bit de un
operando indicado en función del estado lógico de las entradas R y S1. Si el estado lógico de
la entrada R es "1" y el de la entrada S1 es "0", el operando indicado se pone a "0". Si el estado
lógico de la entrada R es "0" y el de la entrada S1 es "1", el operando indicado se pone a "1".
La entrada S1 prevalece sobre la entrada R. Si el estado lógico de las entradas R y S1 es "1",
el estado lógico del operando indicado se pone a "1".
Si el estado lógico de ambas entradas R y S1 es "0", no se ejecuta la instrucción. En este caso,
no cambia el estado lógico del operando.
El estado lógico actual del operando se transfiere a la salida Q y se puede consultar allí.

632

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Flipflop de desactivación/
activación":
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

Descripción

S7-1500

R

Input

BOOL

I, Q, M, D, L I, Q, M, D, L o
o constante constante

Desactivación habili‐
tada

S1

Input

BOOL

I, Q, M, D, L I, Q, M, D, L,
o constante T, C o cons‐
tante

Activación habilitada

<Operando>

InOut

BOOL

I, Q, M, D, L I, Q, M, D, L

Operando que se de‐
sactiva o activa.

Q

Output

BOOL

I, Q, M, D, L I, Q, M, D, L

Estado lógico del
operando

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ56ಯ
ಯ7DJ,QBಯ

5

56

4

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ
6

Los operandos "TagRS" y "TagOut" se desactivan cuando se cumplen las condiciones
siguientes:
● El operando "TagIn_1" devuelve el estado lógico "1".
● El operando "TagIn_2" devuelve el estado lógico "0".
Los operandos "TagRS" y "TagOut" se activan cuando se cumple una de las condiciones
siguientes:
● El operando "TagIn_1" devuelve el estado lógico "0" y el operando "TagIn_2" devuelve el
estado lógico "1".
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

633

Instrucciones
4.1 Instrucciones

--|P|--: Consultar flanco de señal ascendente de un operando
Descripción
La instrucción "Consultar flanco de señal ascendente de un operando" permite detectar si el
estado lógico de un operando indicado (<Operando1>) ha cambiado de "0" a "1". La
instrucción compara el estado lógico actual del <Operando1> con el estado lógico de la
consulta anterior, que está almacenado en una marca de flancos (<Operando2>). Si la
instrucción detecta un cambio del resultado lógico (RLO) de "0" a "1", significa que hay un
flanco de señal ascendente.
La figura siguiente muestra el cambio del estado lógico en caso de flanco de señal
descendente y ascendente:
(VWDGR
OµJLFR

)ODQFRGHVH³DODVFHQGHQWH

)ODQFRGHVH³DOGHVFHQGHQWH




7HPSRUL]DGRU

El flanco de señal ascendente se consulta cada vez que se ejecuta la instrucción. Si se detecta
un flanco de señal ascendente, el <Operando1> adopta el estado lógico "1" durante un ciclo
del programa. En los demás casos, el estado lógico del operando es "0".
Indique el operando que debe consultarse (<Operando1>) en el comodín correspondiente
ubicado encima de la instrucción. La marca de flancos (<Operando2>) se indica en el comodín
correspondiente situado debajo de la instrucción.
Nota
Uso de la dirección de la marca de flancos
La dirección de la marca de flancos no se puede utilizar más de una vez en el programa, puesto
que, de lo contrario, se sobrescribe el bit de marcas. Esto influye negativamente en la
evaluación de flancos, de manera que el resultado deja de ser unívoco. El área de memoria de
la marca de flancos debe estar en un bloque de datos (área 'Static' de FB) o en el área de
marcas.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar flanco de señal
ascendente de un operando":
Parámetro

634

Declaración

Tipo de datos

Área de memoria
S7-1200

S7-1500
I, Q, M, D, L,
T, C o cons‐
tante

<Operan‐
do1>

Input

BOOL

I, Q, M, D,
L o cons‐
tante

<Operan‐
do2>

InOut

BOOL

I, Q, M, D, L I, Q, M, D, L

Descripción
Señal que se debe
consultar
Marca de flancos en
la que se almacena
el estado lógico de la
consulta anterior.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ ಯ7DJ,QBಯ ಯ7DJ,QBಯ ಯ7DJ,QBಯ ಯ7DJ,QBಯ ಯ7DJ2XWಯ
3
ಯ7DJB0ಯ

El operando "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1", "TagIn_2" y "TagIn_3" devuelven el estado lógico "1".
● En el operando "TagIn_4" hay un flanco ascendente. El estado lógico de la consulta anterior
se guarda en la marca de flancos "Tag_M".
● El estado lógico del operando "TagIn_5" es "1".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

--|N|--: Consultar flanco de señal descendente de un operando
Descripción
La instrucción "Consultar flanco de señal descendente de un operando" permite detectar si el
estado lógico de un operando indicado (<Operando1>) ha cambiado de "1" a "0". La
instrucción compara el estado lógico actual del <Operando1> con el estado lógico de la
consulta anterior, que está almacenado en una marca de flancos <Operando2>. Si la
instrucción detecta un cambio del resultado lógico (RLO) de "1" a "0", significa que hay un
flanco de señal descendente.
La figura siguiente muestra el cambio del estado lógico en caso de flanco de señal
descendente y ascendente:
(VWDGR
OµJLFR

)ODQFRGHVH³DODVFHQGHQWH

)ODQFRGHVH³DOGHVFHQGHQWH




7HPSRUL]DGRU

El flanco de señal descendente se consulta cada vez que se ejecuta la instrucción. Si se
detecta un flanco de señal descendente, el <Operando1> adopta el estado lógico "1" durante
un ciclo del programa. En los demás casos, el estado lógico del operando es "0".

Programación del PLC
Manual de programación y manejo, 11/2019

635

Instrucciones
4.1 Instrucciones
Indique el operando que debe consultarse (<Operando1>) en el comodín correspondiente
situado encima de la instrucción. La marca de flancos (<Operando2>) se indica en el comodín
de operandos situado debajo de la instrucción.
Nota
Uso de la dirección de la marca de flancos
La dirección de la marca de flancos no se puede utilizar más de una vez en el programa, puesto
que, de lo contrario, se sobrescribe el bit de marcas. Esto influye negativamente en la
evaluación de flancos, de manera que el resultado deja de ser unívoco. El área de memoria de
la marca de flancos debe estar en un bloque de datos (área 'Static' de FB) o en el área de
marcas.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar flanco de señal
descendente de un operando":
Parámetro

Declaración

Tipo de datos

Área de memoria

<Operan‐
do1>

Input

BOOL

I, Q, M,
I, Q, M, D, L,
D, L o
T, C o cons‐
constante tante

Señal que se debe con‐
sultar

<Operan‐
do2>

InOut

BOOL

I, Q, M,
D, L

Marca de flancos en la
que se almacena el es‐
tado lógico de la con‐
sulta anterior.

S7-1200

Descripción

S7-1500

I, Q, M, D, L

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ ಯ7DJ,QBಯ ಯ7DJ,QBಯ ಯ7DJ,QBಯ ಯ7DJ,QBಯ ಯ7DJ2XWಯ
1
ಯ7DJB0ಯ

El operando "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1", "TagIn_2" y "TagIn_3" devuelven el estado lógico "1".
● En el operando "TagIn_4" hay un flanco de señal descendente. El estado lógico de la
consulta anterior se guarda en la marca de flancos "Tag_M".
● El estado lógico del operando "TagIn_5" es "1".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

636

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

--(P)--: Activar operando con flanco de señal ascendente
Descripción
La instrucción "Activar operando con flanco de señal ascendente" permite activar un operando
indicado (<Operando1>) cuando se detecta un cambio del resultado lógico (RLO) de "0" a "1".
La instrucción compara el RLO actual con el RLO de la consulta anterior, que está almacenado
en una marca de flancos (<Operando2>). Si la instrucción detecta un cambio del RLO de "0"
a "1", significa que hay un flanco de señal ascendente.
El flanco de señal ascendente se consulta cada vez que se ejecuta la instrucción. Si se detecta
un flanco de señal ascendente, el <Operando1> adopta el estado lógico "1" durante un ciclo
del programa. En los demás casos, el estado lógico del operando es "0".
Indique el operando que debe activarse (<Operando1>) en el comodín correspondiente
ubicado encima de la instrucción. La marca de flancos (<Operando2>) se indica en el comodín
correspondiente situado debajo de la instrucción.
Nota
Uso de la dirección de la marca de flancos
La dirección de la marca de flancos no se puede utilizar más de una vez en el programa, puesto
que, de lo contrario, se sobrescribe el bit de marcas. Esto influye negativamente en la
evaluación de flancos, de manera que el resultado deja de ser unívoco. El área de memoria de
la marca de flancos debe estar en un bloque de datos (área 'Static' de FB) o en el área de
marcas.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Activar operando con flanco de
señal ascendente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Output

BOOL

I, Q, M, D, L

Operando que se activa si
hay un flanco ascendente.

<Operan‐
do2>

InOut

BOOL

I, Q, M, D, L

Marca de flancos

Programación del PLC
Manual de programación y manejo, 11/2019

637

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ ಯ7DJ,QBಯ ಯ7DJ2XWಯ
3
ಯ7DJB0ಯ
ಯ7DJ,QBಯ

El operando "TagOut" se activa durante un ciclo del programa cuando el estado lógico de la
entrada de la bobina cambia de "0" a "1" (flanco de señal ascendente). En todos los demás
casos, el operando "TagOut" devuelve el estado lógico "0".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

--(N)--: Activar operando con flanco de señal descendente
Descripción
La instrucción "Activar operando con flanco de señal descendente" permite activar un
operando indicado (<Operando1>) cuando se presenta un cambio del resultado lógico (RLO)
de "1" a "0". La instrucción compara el RLO actual con el RLO de la consulta anterior, que está
almacenado en una marca de flancos (<Operando2>). Si la instrucción detecta un cambio del
RLO de "1" a "0", significa que hay un flanco de señal descendente.
El flanco de señal descendente se consulta cada vez que se ejecuta la instrucción. Si se
detecta un flanco de señal descendente, el <Operando1> adopta el estado lógico "1" durante
un ciclo del programa. En los demás casos, el estado lógico del operando es "0".
Indique el operando que debe activarse (<Operando1>) en el comodín correspondiente
ubicado encima de la instrucción. La marca de flancos (<Operando2>) se indica en el comodín
correspondiente situado debajo de la instrucción.
Nota
Uso de la dirección de la marca de flancos
La dirección de la marca de flancos no se puede utilizar más de una vez en el programa, puesto
que, de lo contrario, se sobrescribe el bit de marcas. Esto influye negativamente en la
evaluación de flancos, de manera que el resultado deja de ser unívoco. El área de memoria de
la marca de flancos debe estar en un bloque de datos (área 'Static' de FB) o en el área de
marcas.

638

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Activar operando con flanco de
señal descendente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Output

BOOL

I, Q, M, D, L

Operando que se activa si
hay un flanco descendente.

<Operan‐
do2>

InOut

BOOL

I, Q, M, D, L

Marca de flancos

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ ಯ7DJ,QBಯ ಯ7DJ2XWಯ
1
ಯ7DJB0ಯ
ಯ7DJ,QBಯ

El operando "TagOut" se activa durante un ciclo del programa cuando el estado lógico de la
entrada de la bobina cambia de "1" a "0" (flanco de señal descendente). En todos los demás
casos, el operando "TagOut" devuelve el estado lógico "0".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

P_TRIG: Consultar flanco de señal ascendente del RLO
Descripción
La instrucción "Consultar flanco de señal ascendente del RLO" permite consultar un cambio
del estado lógico del resultado lógico (RLO) de "0" a "1". La instrucción compara el estado
lógico actual del RLO con el estado lógico de la consulta anterior, que está guardado en una
marca de flancos (<Operando>). Si la instrucción detecta un cambio del RLO de "0" a "1",
significa que hay un flanco de señal ascendente.
El flanco de señal ascendente se consulta cada vez que se ejecuta la instrucción. En cuanto
se detecta un flanco de señal ascendente, la salida Q de la instrucción devuelve el estado

Programación del PLC
Manual de programación y manejo, 11/2019

639

Instrucciones
4.1 Instrucciones
lógico "1" durante un ciclo del programa. En todos los demás casos, la salida devuelve el
estado lógico "0".
Nota
Uso de la dirección de la marca de flancos
La dirección de la marca de flancos no se puede utilizar más de una vez en el programa, puesto
que, de lo contrario, se sobrescribe el bit de marcas. Esto influye negativamente en la
evaluación de flancos, de manera que el resultado deja de ser unívoco. El área de memoria de
la marca de flancos debe estar en un bloque de datos (área 'Static' de FB) o en el área de
marcas.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar flanco de señal
ascendente del RLO":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CLK

Input

BOOL

I, Q, M, D, L o
constante

RLO actual

<Operando>

InOut

BOOL

M, D

Marca de flancos en la que
se almacena el RLO de la
consulta anterior.

Q

Output

BOOL

I, Q, M, D, L

Resultado de la evaluación
de flancos

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

3B75,*
&/.

4

&$6
-03

ಯ7DJB0ಯ
ಯ7DJ,QBಯ

En la marca de flancos "Tag_M" se almacena el RLO de la consulta anterior. Cuando se
detecta un cambio del estado lógico del RLO de "0" a "1", se ejecuta el salto a la etiqueta CAS1.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

640

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

N_TRIG: Consultar flanco de señal descendente del RLO
Descripción
La instrucción "Consultar flanco de señal descendente del RLO" permite consultar un cambio
del estado lógico del resultado lógico (RLO) de "1" a "0". La instrucción compara el estado
lógico actual del RLO con el estado lógico de la consulta anterior, que está guardado en una
marca de flancos (<Operando>). Si la instrucción detecta un cambio del RLO de "1" a "0",
significa que hay un flanco de señal descendente.
El flanco de señal descendente se consulta cada vez que se ejecuta la instrucción. En cuanto
se detecta un flanco de señal descendente, la salida Q de la instrucción devuelve el estado
lógico "1" durante un ciclo del programa. En todos los demás casos, el estado lógico de la
salida de la instrucción es "0".
Nota
Uso de la dirección de la marca de flancos
La dirección de la marca de flancos no se puede utilizar más de una vez en el programa, puesto
que, de lo contrario, se sobrescribe el bit de marcas. Esto influye negativamente en la
evaluación de flancos, de manera que el resultado deja de ser unívoco. El área de memoria de
la marca de flancos debe estar en un bloque de datos (área 'Static' de FB) o en el área de
marcas.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar flanco de señal
descendente del RLO":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CLK

Input

BOOL

I, Q, M, D, L o
constante

RLO actual

<Operando>

InOut

BOOL

M, D

Marca de flancos en la que
se almacena el RLO de la
consulta anterior.

Q

Output

BOOL

I, Q, M, D, L

Resultado de la evaluación
de flancos

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

1B75,*
&/.

4

&$6
-03

ಯ7DJB0ಯ
ಯ7DJ,QBಯ

Programación del PLC
Manual de programación y manejo, 11/2019

641

Instrucciones
4.1 Instrucciones
En la marca de flancos "Tag_M" se almacena el RLO de la consulta anterior. Cuando se
detecta un cambio del estado lógico del RLO de "1" a "0", se ejecuta el salto a la etiqueta CAS1.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

R_TRIG: Detectar flanco de señal ascendente
Descripción
La instrucción "Detectar flanco de señal ascendente" permite detectar un cambio de estado de
"0" a "1" en la entrada CLK. La instrucción compara el valor actual de la entrada CLK con el
estado de la consulta anterior (marca de flanco), que está almacenada en la instancia indicada.
Cuando la instrucción detecta un cambio de estado de "0" a "1" en la entrada CLK, en la salida
Q se genera un flanco de señal ascendente, es decir, que la señal tiene el valor TRUE o "1"
exactamente durante un ciclo.
En todos los demás casos, el estado lógico de la salida de la instrucción es "0".

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Detectar flanco de señal
ascendente":

642

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

CLK

Input

BOOL

I, Q, M, D, L o
constante

Señal entrante cuyo flanco
se consulta.

Q

Output

BOOL

I, Q, M, D, L

Resultado de la evaluación
de flancos

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
'%
ಯ5B75,*B'%ಯ

5B75,*

(1
ಯ7DJ,QBಯ

(12

ಯ7DJ,QBಯ
&/.

4

ಯ7DJ2XWB4ಯ

ಯ7DJ,QBಯ

En la variable "R_TRIG_DB" se guarda el estado anterior de la variable en la entrada CLK. Si
en los operandos "TagIn_1" y "TagIn_2" o en el operando "TagIn_3" se detecta un cambio del
estado lógico de "0" a "1", la salida "TagOut_Q" devuelve el estado lógico "1" durante un ciclo.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

F_TRIG: Detectar flanco de señal descendente
Descripción
La instrucción "Detectar flanco de señal descendente" permite detectar un cambio de estado
de "1" a "0" en la entrada CLK. La instrucción compara el valor actual de la entrada CLK con
el estado de la consulta anterior (marca de flanco), que está almacenada en la instancia
indicada. Cuando la instrucción detecta un cambio de estado de "1" a "0" en la entrada CLK,
en la salida Q se genera un flanco de señal descendente, es decir, que la señal tiene el valor
TRUE o "1" exactamente durante un ciclo.
En todos los demás casos, el estado lógico de la salida de la instrucción es "0".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Detectar flanco de señal
descendente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habili‐
tación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilita‐
ción

Programación del PLC
Manual de programación y manejo, 11/2019

643

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CLK

Input

BOOL

I, Q, M, D, L o
constante

Señal entrante cu‐
yo flanco se con‐
sulta.

Q

Output

BOOL

I, Q, M, D, L

Resultado de la
evaluación de flan‐
cos

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
'%
ಯ)B75,*B'%ಯ

)B75,*

(1
ಯ7DJ,QBಯ

(12

ಯ7DJ,QBಯ
&/.

4

ಯ7DJ2XWB4ಯ

ಯ7DJ,QBಯ

En la variable "F_TRIG_DB" se guarda el estado anterior de la variable en la entrada CLK. Si
en los operandos "TagIn_1" y "TagIn_2" o en el operando "TagIn_3" se detecta un cambio de
estado de "1" a "0", la salida "TagOut_Q" devuelve el estado "1" durante un ciclo.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

Temporizadores
TP: Impulso
Descripción
La instrucción "Impulso" activa la salida Q por un tiempo programado. La instrucción se inicia
cuando el resultado lógico (RLO) de la entrada IN cambia de "0" a "1" (flanco de señal
ascendente). Cuando se inicia la instrucción, se empieza a contar el tiempo programado PT .
La salida Q se activa por el tiempo PT, independientemente de cómo evolucione la señal de
entrada. Durante el tiempo PT, la detección de un nuevo flanco de señal ascendente en la
entrada IN no influye en el estado lógico de la salida Q.

644

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
El valor de tiempo actual se puede consultar en la salida ET. Este valor de tiempo empieza a
contar a partir de T#0s y termina al alcanzarse el valor del tiempo PT. Una vez alcanzado este
tiempo PT y si el estado lógico de la entrada IN es "0", se desactiva la salida ET. Si en el
programa no se llama la instrucción porque, p. ej., esta se omite, la salida ET devuelve un valor
constante en cuanto ha transcurrido el tiempo PT.
La instrucción "Impulso" se puede colocar dentro o al final del segmento. Dicha instrucción
requiere una operación lógica precedente.
A cada llamada de la instrucción "Impulso" debe asignársele un temporizador CEI, en el que
se guarden los datos de instancia.

Para CPU S7-1200
El temporizador CEI es una estructura del tipo de datos IEC_TIMER o TP_TIME que se puede
declarar como se indica a continuación:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER (p. ej.,
"MyIEC_TIMER")
● Declaración como variable local del tipo TP_TIME o IEC_TIMER en la sección "Static" de
un bloque (p. ej., #MyIEC_TIMER)

Para CPU S7-1500
El temporizador CEI es una estructura del tipo de datos IEC_TIMER, IEC_LTIMER, TP_TIME
o TP_LTIME que se puede declarar como se indica a continuación:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER o IEC_LTIMER
(p. ej., "MyIEC_TIMER")
● Declaración como variable local del tipo TP_TIME, TP_LTIME, IEC_TIMER o IEC_LTIMER
en la sección "Static" de un bloque (p. ej., #MyIEC_TIMER)

Programación del PLC
Manual de programación y manejo, 11/2019

645

Instrucciones
4.1 Instrucciones

Actualización de los valores actuales en los datos de instancia
Los datos de instancia de "Impulso" se actualizan siguiendo las reglas indicadas a
continuación:
● Entrada IN
La instrucción "Impulso" compara el RLO actual con el RLO de la consulta anterior, que está
almacenado en el parámetro IN de los datos de instancia. Si la instrucción detecta un
cambio del RLO de "0" a "1", significa que hay un flanco de señal ascendente y se empieza
a medir el tiempo. Una vez procesada la instrucción "Impulso", el valor del parámetro IN se
actualiza en los datos de instancia y se utiliza como marca de flancos para la siguiente
consulta.
Tenga en cuenta que la evaluación de flancos falla cuando el valor actual del parámetro IN
es escrito o inicializado por otras funciones.
● Entrada PT
El valor de la entrada PT se escribe en el parámetro PT de los datos de instancia cuando
se produce un cambio de flanco en la entrada IN.
● Salidas Q y ET
Los valores actuales de las salidas Q y ET se actualizan en los casos siguientes:
– Al llamar la instrucción, si las salidas ET o Q están interconectadas.
O bien:
– Al acceder a Q o ET.
Si las salidas no están interconectadas y tampoco se consultan, el valor de tiempo actual
de las salidas Q y ET no se actualiza. Las salidas tampoco se actualizan aunque la
instrucción se omita en el programa.
Para calcular los valores de tiempo de Q y ET se utilizan parámetros internos de la
instrucción "Impulso". Tenga en cuenta que la medición de tiempo falla cuando los valores
actuales de la instrucción son escritos o inicializados por otras funciones.

646

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

PELIGRO
Peligro al reinicializar los valores actuales
Si se reinicializan los valores actuales de un temporizador CEI mientras se está midiendo el
tiempo, se interfiere en la función del temporizador CEI. Esto puede provocar incoherencias
entre el programa y el proceso real. Como consecuencia pueden producirse daños materiales
y personales graves.
Las funciones siguientes pueden provocar la reinicialización de los valores actuales:
● Cargar el bloque con reinicialización
● Cargar instantáneas como valores actuales
● Forzar valores actuales de forma normal o permanente
● La instrucción "WRIT_DBL"
Antes de ejecutar estas funciones, tome las medidas siguientes:
● Asegúrese de que la instalación se encuentra en un estado seguro antes de sobrescribir
los valores actuales.
● Asegúrese de que el temporizador CEI ha finalizado antes de inicializar los valores
actuales.
● Si los valores actuales se sobrescriben con una instantánea, asegúrese de que la
instantánea se haya generado en un instante en que la instalación estaba en un estado
seguro.
● Asegúrese de que el programa no está leyendo ni escribiendo los datos afectados durante
la transferencia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Impulso":
Parámetro

Declaración

Tipo de datos

Área de memoria

S7-1200

S7-1500

S7-1200

S7-1500

Descripción

IN

Input

BOOL

BOOL

I, Q, M, D, L
o constante

I, Q, M, D, L,
P o constan‐
te

Entrada de
arranque

PT

Input

TIME

TIME, LTI‐ I, Q, M, D, L
ME
o constante

I, Q, M, D, L,
P o constan‐
te

Duración del im‐
pulso
El valor del pará‐
metro PT debe
ser positivo.

Q

Output

BOOL

BOOL

I, Q, M, D, L I, Q, M, D, L,
P

Salida de impul‐
so

ET

Output

TIME

TIME, LTI‐ I, Q, M, D, L I, Q, M, D, L,
ME
P

Valor de tiempo
actual

Programación del PLC
Manual de programación y manejo, 11/2019

647

Instrucciones
4.1 Instrucciones

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Impulso":
,1

4

37

37

37

(7
37

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ73B'%ಯ

ಯ7DJB6WDUWಯ

ಯ7DJB3UHVHW7LPHಯ

73
7,0(
,1

4

37

(7

ಯ7DJB6WDWXVಯ

ಯ7DJB(ODSVHG7LPHಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

Tag_Start

Cambio de señal "0" => "1"

PT

Tag_PresetTime

T#10s

Q

Tag_Status

TRUE

ET

Tag_ElapsedTime

de T#0s => T#10s

Cuando el estado lógico del operando "Tag_Start" cambia de "0" a "1", el tiempo programado
en el parámetro PT empieza a contar y el operando "Tag_Status" se pone a "1". El valor de
tiempo actual se guarda en el operando "Tag_ElapsedTime". Una vez transcurrido el tiempo,
el operando "Tag_Status" se vuelve a poner al estado lógico "0".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

648

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplo de control de la temperatura ambiente (Página 8001)
Principios básicos de KOP (Página 7943)

TON: Retardo al conectar
Descripción
La instrucción "Retardo al conectar" retarda la activación de la salida Q por el tiempo
programado PT. La instrucción se inicia cuando el resultado lógico (RLO) de la entrada IN
cambia de "0" a "1" (flanco de señal ascendente). Cuando se inicia la instrucción, se empieza
a contar el tiempo programado PT. Una vez transcurrido el tiempo PT, la salida Q devuelve el
estado lógico "1". La salida Q permanecerá activada mientras la entrada de arranque esté
puesta a "1". Cuando el estado lógico de la entrada de arranque cambia de "1" a "0", se
desactiva la salida Q. La función de temporización se reinicia al detectarse un nuevo flanco de
señal ascendente en la entrada de arranque.
El valor de tiempo actual se puede consultar en la salida ET. Este valor de tiempo empieza a
contar a partir de T#0s y termina al alcanzarse el valor del tiempo PT. La salida ET se desactiva
en cuanto el estado lógico de la entrada IN cambia a "0". Si en el programa no se llama la
instrucción porque, p. ej., esta se omite, la salida ET devuelve un valor constante en cuanto ha
transcurrido el tiempo PT.
La instrucción "Retardo al conectar" se puede colocar dentro o al final del segmento. Dicha
instrucción requiere una operación lógica precedente.
A cada llamada de la instrucción "Retardo al conectar" debe asignársele un temporizador CEI,
en el que se guarden los datos de instancia.

Para CPU S7-1200
El temporizador CEI es una estructura del tipo de datos IEC_TIMER o TON_TIME que se
puede declarar como se indica a continuación:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER (p. ej.,
"MyIEC_TIMER")
● Declaración como variable local del tipo TON_TIME o IEC_TIMER en la sección "Static" de
un bloque (p. ej., #MyIEC_TIMER)

Para CPU S7-1500
El temporizador CEI es una estructura del tipo de datos IEC_TIMER, IEC_LTIMER, TON_TIME
o TON_LTIME que se puede declarar como se indica a continuación:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER o IEC_LTIMER
(p. ej., "MyIEC_TIMER")
● Declaración como variable local del tipo TON_TIME, TON_LTIME, IEC_TIMER o
IEC_LTIMER en la sección "Static" de un bloque (p. ej., #MyIEC_TIMER)

Programación del PLC
Manual de programación y manejo, 11/2019

649

Instrucciones
4.1 Instrucciones

Actualización de los valores actuales en los datos de instancia
Los datos de instancia de "Retardo al conectar" se actualizan siguiendo las reglas indicadas a
continuación:
● Entrada IN
La instrucción "Retardo al conectar" compara el RLO actual con el RLO de la consulta
anterior, que está almacenado en el parámetro IN de los datos de instancia. Si la instrucción
detecta un cambio del RLO de "0" a "1", significa que hay un flanco de señal ascendente y
se empieza a medir el tiempo. Una vez procesada la instrucción "Retardo al conectar", el
valor del parámetro IN se actualiza en los datos de instancia y se utiliza como marca de
flancos para la siguiente consulta.
Tenga en cuenta que la evaluación de flancos falla cuando el valor actual del parámetro IN
es escrito o inicializado por otras funciones.
● Entrada PT
El valor de la entrada PT se escribe en el parámetro PT de los datos de instancia cuando
se produce un cambio de flanco en la entrada IN.
● Salidas Q y ET
Los valores actuales de las salidas Q y ET se actualizan en los casos siguientes:
– Al llamar la instrucción, si las salidas ET o Q están interconectadas.
O bien:
– Al acceder a Q o ET.
Si las salidas no están interconectadas y tampoco se consultan, el valor de tiempo actual
de las salidas Q y ET no se actualiza. Las salidas tampoco se actualizan aunque la
instrucción se omita en el programa.
Para calcular los valores de tiempo de Q y ET se utilizan parámetros internos de la
instrucción "Retardo al conectar". Tenga en cuenta que la medición de tiempo falla cuando
los valores actuales de la instrucción son escritos o inicializados por otras funciones.

650

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

PELIGRO
Peligro al reinicializar los valores actuales
Si se reinicializan los valores actuales de un temporizador CEI mientras se está midiendo el
tiempo, se interfiere en la función del temporizador CEI. Esto puede provocar incoherencias
entre el programa y el proceso real. Como consecuencia pueden producirse daños materiales
y personales graves.
Las funciones siguientes pueden provocar la reinicialización de los valores actuales:
● Cargar el bloque con reinicialización
● Cargar instantáneas como valores actuales
● Forzar valores actuales de forma normal o permanente
● La instrucción "WRIT_DBL"
Antes de ejecutar estas funciones, tome las medidas siguientes:
● Asegúrese de que la instalación se encuentra en un estado seguro antes de sobrescribir
los valores actuales.
● Asegúrese de que el temporizador CEI ha finalizado antes de inicializar los valores
actuales.
● Si los valores actuales se sobrescriben con una instantánea, asegúrese de que la
instantánea se haya generado en un instante en que la instalación estaba en un estado
seguro.
● Asegúrese de que el programa no está leyendo ni escribiendo los datos afectados durante
la transferencia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Retardo al conectar":
Parámetro

Declaración

Tipo de datos

Área de memoria

S7-1200

S7-1500

S7-1200

S7-1500

Descripción

IN

Input

BOOL

BOOL

I, Q, M, D,
L o cons‐
tante

I, Q, M, D, L,
P o constan‐
te

Entrada de
arranque

PT

Input

TIME

TIME, LTIME I, Q, M, D,
L o cons‐
tante

I, Q, M, D, L,
P o constan‐
te

Tiempo del
retardo al co‐
nectar
El valor del
parámetro
PT debe ser
positivo.

Programación del PLC
Manual de programación y manejo, 11/2019

651

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

S7-1200

S7-1500

S7-1200

S7-1500

Descripción

Q

Output

BOOL

BOOL

I, Q, M, D,
L

I, Q, M, D, L,
P

Salida que
se activa
una vez
transcurrido
el tiempo PT.

ET

Output

TIME

TIME, LTIME I, Q, M, D,
L

I, Q, M, D, L,
P

Valor de
tiempo ac‐
tual

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Retardo al conectar":
,1

4

37

37

(7
37

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ721B'%ಯ

ಯ7DJB6WDUWಯ

ಯ7DJB3UHVHW7LPHಯ

721
7,0(
,1

4

37

(7

ಯ7DJB6WDWXVಯ

ಯ7DJB(ODSVHG7LPHಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

652

Operando

Valor

IN

Tag_Start

Cambio de señal "0" => "1"

PT

Tag_PresetTime

T#10s

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Operando

Valor

Q

Tag_Status

FALSE; tras 10 s => TRUE

ET

Tag_ElapsedTime

de T#0s => T#10s

Cuando el estado lógico del operando "Tag_Start" cambia de "0" a "1", el tiempo programado
en el parámetro PT empieza a contar. Una vez transcurrido el tiempo, el operando
"Tag_Status" se pone al estado lógico "1". El operando "Tag_Status" permanece a "1" mientras
el operando "Tag_Start" tenga el estado lógico "1". El valor de tiempo actual se guarda en el
operando "Tag_ElapsedTime". Cuando el estado lógico del operando "Tag_Start" cambia de
"1" a "0", se restablece el operando "Tag_Status".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

TOF: Retardo al desconectar
Descripción
La instrucción "Retardo al desconectar" retarda la desactivación de la salida Q por el tiempo
programado PT. La salida Q se activa cuando el resultado lógico (RLO) de la entrada IN
cambia de "1" a "0" (flanco de señal descendente). Cuando el estado lógico de la entrada IN
cambia nuevamente a "1", el tiempo programado PT deja de contar. La salida Q permanece
activada mientras transcurre el tiempo PT. Una vez transcurrido el tiempo PT se desactiva la
salida Q. Si el estado lógico de la entrada IN cambia a "1" antes de que transcurra el tiempo PT,
se inicializa el temporizador. El estado lógico de la salida Q permanece en "1".
El valor de tiempo actual se puede consultar en la salida ET. Este valor de tiempo empieza a
contar a partir de T#0s y termina al alcanzarse el valor del tiempo PT. Una vez transcurrido el
tiempo PT, el valor actual de la salida ET se conserva hasta que la entrada IN cambie
nuevamente a "1". Si el estado lógico de la entrada IN cambia a "1" antes de transcurrir el
tiempo PT, la salida ET adopta el valor T#0s. Si en el programa no se llama la instrucción
porque, p. ej., esta se omite, la salida ET devuelve un valor constante en cuanto transcurre este
tiempo.
La instrucción "Retardo al desconectar" se puede colocar dentro o al final del segmento. Dicha
instrucción requiere una operación lógica precedente.
A cada llamada de la instrucción "Retardo al desconectar" debe asignársele un temporizador
CEI, en el que se guarden los datos de instancia.

Programación del PLC
Manual de programación y manejo, 11/2019

653

Instrucciones
4.1 Instrucciones

Para CPU S7-1200
El temporizador CEI es una estructura del tipo de datos IEC_TIMER o TOF_TIME que se
puede declarar como se indica a continuación:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER (p. ej.,
"MyIEC_TIMER")
● Declaración como variable local del tipo TOF_TIME o IEC_TIMER en la sección "Static" de
un bloque (p. ej., #MyIEC_TIMER)

Para CPU S7-1500
El temporizador CEI es una estructura del tipo de datos IEC_TIMER, IEC_LTIMER, TOF_TIME
o TOF_LTIME que se puede declarar como se indica a continuación:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER o IEC_LTIMER
(p. ej., "MyIEC_TIMER")
● Declaración como variable local del tipo TOF_TIME, TOF_LTIME, IEC_TIMER o
IEC_LTIMER en la sección "Static" de un bloque (p. ej., #MyIEC_TIMER)

Actualización de los valores actuales en los datos de instancia
Los datos de instancia de "Retardo al desconectar" se actualizan siguiendo las reglas
indicadas a continuación:
● Entrada IN
La instrucción "Retardo al desconectar" compara el RLO actual con el RLO de la consulta
anterior, que está almacenado en el parámetro IN de los datos de instancia. Si la instrucción
detecta un cambio del RLO de "1" a "0", significa que hay un flanco de señal descendente
y se empieza a contar el tiempo. Una vez procesada la instrucción "Retardo al
desconectar", el valor del parámetro IN se actualiza en los datos de instancia y se utiliza
como marca de flancos para la siguiente consulta.
Tenga en cuenta que la evaluación de flancos falla cuando el valor actual del parámetro IN
es escrito o inicializado por otras funciones.
● Entrada PT
El valor de la entrada PT se escribe en el parámetro PT de los datos de instancia cuando
se produce un cambio de flanco en la entrada IN.
● Salidas Q y ET
Los valores actuales de las salidas Q y ET se actualizan en los casos siguientes:
– Al llamar la instrucción, si las salidas ET o Q están interconectadas.
O bien:
– Al acceder a Q o ET.
Si las salidas no están interconectadas y tampoco se consultan, el valor de tiempo actual
de las salidas Q y ET no se actualiza. Las salidas tampoco se actualizan aunque la
instrucción se omita en el programa.
Para calcular los valores de tiempo de Q y ET se utilizan parámetros internos de la
instrucción "Retardo al desconectar". Tenga en cuenta que la medición de tiempo falla
cuando los valores actuales de la instrucción son escritos o inicializados por otras
funciones.

654

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

PELIGRO
Peligro al reinicializar los valores actuales
Si se reinicializan los valores actuales de un temporizador CEI mientras se está midiendo el
tiempo, se interfiere en la función del temporizador CEI. Esto puede provocar incoherencias
entre el programa y el proceso real. Como consecuencia pueden producirse daños materiales
y personales graves.
Las funciones siguientes pueden provocar la reinicialización de los valores actuales:
● Cargar el bloque con reinicialización
● Cargar instantáneas como valores actuales
● Forzar valores actuales de forma normal o permanente
● La instrucción "WRIT_DBL"
Antes de ejecutar estas funciones, tome las medidas siguientes:
● Asegúrese de que la instalación se encuentra en un estado seguro antes de sobrescribir
los valores actuales.
● Asegúrese de que el temporizador CEI ha finalizado antes de inicializar los valores
actuales.
● Si los valores actuales se sobrescriben con una instantánea, asegúrese de que la
instantánea se haya generado en un instante en que la instalación estaba en un estado
seguro.
● Asegúrese de que el programa no está leyendo ni escribiendo los datos afectados durante
la transferencia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Retardo al desconectar":
Parámetro

Declaración

Tipo de datos

Área de memoria

S7-1200

S7-1500

S7-1200

S7-1500

Descripción

IN

Input

BOOL

BOOL

I, Q, M, D,
L o cons‐
tante

I, Q, M, D, L,
P o constan‐
te

Entrada de
arranque

PT

Input

TIME

TIME, LTIME I, Q, M, D,
L o cons‐
tante

I, Q, M, D, L,
P o constan‐
te

Tiempo del
retardo al
desconectar
El valor del
parámetro
PT debe ser
positivo.

Programación del PLC
Manual de programación y manejo, 11/2019

655

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

S7-1200

S7-1500

S7-1200

S7-1500

Descripción

Q

Output

BOOL

BOOL

I, Q, M, D,
L

I, Q, M, D, L,
P

Salida que
se desactiva
una vez
transcurrido
el tiempo PT.

ET

Output

TIME

TIME, LTIME I, Q, M, D,
L

I, Q, M, D, L,
P

Valor de
tiempo ac‐
tual

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Retardo al
desconectar":
,1

4
37

37

(7
37

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ72)B'%ಯ

ಯ7DJB6WDUWಯ

ಯ7DJB3UHVHW7LPHಯ

656

72)
7,0(
,1

4

37

(7

ಯ7DJB6WDWXVಯ

ಯ7DJB(ODSVHG7LPHಯ

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

Tag_Start

Cambio de señal "0" => "1"; cam‐
bio de señal "1" => "0"

PT

Tag_PresetTime

T#10s

Q

Tag_Status

TRUE

ET

Tag_ElapsedTime

de T#10s => T#0s

Cuando el estado lógico del operando "Tag_Start" cambia de "0" a "1", el operando
"Tag_Status" se pone al estado lógico "1". Cuando el estado lógico del operando "Tag_Start"
cambia de "1" a "0", el tiempo programado en el parámetro PT empieza a contar. Mientras
transcurra el tiempo, el operando "Tag_Status" permanecerá en TRUE. Una vez transcurrido
el tiempo, el operando "Tag_Status" se restablecerá a FALSE. El valor de tiempo actual se
guarda en el operando "Tag_ElapsedTime".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

TONR: Acumulador de tiempo
Descripción
La instrucción "Acumulador de tiempo" acumula valores de tiempo dentro de un periodo
definido por el parámetro PT. Cuando el estado lógico de la entrada IN cambia de "0" a "1"
(flanco de señal ascendente), se mide el tiempo y se empieza a contar el tiempo PT. Mientras
transcurre el tiempo PT se van acumulando los valores de tiempo que se leen cuando el estado
lógico de la entrada IN es "1". El tiempo acumulado se deposita en la salida ET y se puede
consultar allí. Una vez se ha alcanzado el tiempo PT, la salida Q devuelve el estado lógico "1".
El parámetro Q permanece a "1" aunque el estado lógico del parámetro IN cambie de "1" a "0"
(flanco de señal descendente).
La entrada R desactiva las salidas ET y Q independientemente del estado lógico de la entrada
de arranque.
La instrucción "Acumulador de tiempo" se puede colocar dentro o al final del segmento. Dicha
instrucción requiere una operación lógica precedente.
A cada llamada de la instrucción "Acumulador de tiempo" debe asignársele un temporizador
CEI, en el que se guarden los datos de instancia.

Programación del PLC
Manual de programación y manejo, 11/2019

657

Instrucciones
4.1 Instrucciones

Para CPU S7-1200
El temporizador CEI es una estructura del tipo de datos IEC_TIMER o TONR_TIME que se
puede declarar como se indica a continuación:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER (p. ej.,
"MyIEC_TIMER")
● Declaración como variable local del tipo TONR_TIME o IEC_TIMER en la sección "Static"
de un bloque (p. ej., #MyIEC_TIMER)

Para CPU S7-1500
El temporizador CEI es una estructura del tipo de datos IEC_TIMER, IEC_LTIMER,
TONR_TIME o TONR_LTIME que se puede declarar como se indica a continuación:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER o IEC_LTIMER
(p. ej., "MyIEC_TIMER")
● Declaración como variable local del tipo TONR_TIME, TONR_LTIME, IEC_TIMER o
IEC_LTIMER en la sección "Static" de un bloque (p. ej., #MyIEC_TIMER)

Actualización de los valores actuales en los datos de instancia
Los datos de instancia de "Acumulador de tiempo" se actualizan siguiendo las reglas indicadas
a continuación:
● Entrada IN
La instrucción "Acumulador de tiempo" compara el RLO actual con el RLO de la consulta
anterior, que está almacenado en el parámetro IN de los datos de instancia. Si la instrucción
detecta un cambio del RLO de "0" a "1", significa que hay un flanco de señal ascendente y
se reanuda la medición de tiempo. Si la instrucción detecta un cambio de "1" a "0" en el
RLO, significa que hay un flanco de señal descendente y la medición de tiempo se
interrumpe. Una vez procesada la instrucción "Acumulador de tiempo", el valor del
parámetro IN se actualiza en los datos de instancia y se utiliza como marca de flancos para
la siguiente consulta.
Tenga en cuenta que la evaluación de flancos falla cuando el valor actual del parámetro IN
es escrito o inicializado por otras funciones.
● Entrada PT
El valor de la entrada PT se escribe en el parámetro PT de los datos de instancia cuando
se produce un cambio de flanco en la entrada IN.

658

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
● Entrada R
La señal "1" en la entrada R inicializa la medición de tiempo y la bloquea. Los flancos en la
entrada IN se ignoran. La señal "0" en la entrada R habilita de nuevo la medición de tiempo.
● Salidas Q y ET
Los valores actuales de las salidas Q y ET se actualizan en los casos siguientes:
– Al llamar la instrucción, si las salidas ET o Q están interconectadas.
O bien:
– Al acceder a Q o ET.
Si las salidas no están interconectadas y tampoco se consultan, el valor de tiempo actual
de las salidas Q y ET no se actualiza. Las salidas tampoco se actualizan aunque la
instrucción se omita en el programa.
Para calcular los valores de tiempo de Q y ET se utilizan parámetros internos de la
instrucción "Acumulador de tiempo". Tenga en cuenta que la medición de tiempo falla
cuando los valores actuales de la instrucción son escritos o inicializados por otras
funciones.
PELIGRO
Peligro al reinicializar los valores actuales
Si se reinicializan los valores actuales de un temporizador CEI mientras se está midiendo el
tiempo, se interfiere en la función del temporizador CEI. Esto puede provocar incoherencias
entre el programa y el proceso real. Como consecuencia pueden producirse daños materiales
y personales graves.
Las funciones siguientes pueden provocar la reinicialización de los valores actuales:
● Cargar el bloque con reinicialización
● Cargar instantáneas como valores actuales
● Forzar valores actuales de forma normal o permanente
● La instrucción "WRIT_DBL"
Antes de ejecutar estas funciones, tome las medidas siguientes:
● Asegúrese de que la instalación se encuentra en un estado seguro antes de sobrescribir
los valores actuales.
● Asegúrese de que el temporizador CEI ha finalizado antes de inicializar los valores
actuales.
● Si los valores actuales se sobrescriben con una instantánea, asegúrese de que la
instantánea se haya generado en un instante en que la instalación estaba en un estado
seguro.
● Asegúrese de que el programa no está leyendo ni escribiendo los datos afectados durante
la transferencia.

Programación del PLC
Manual de programación y manejo, 11/2019

659

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Acumulador de tiempo":
Parámetro

Declaración

Tipo de datos

Área de memoria

S7-1200

S7-1500

S7-1200

Descripción

S7-1500

IN

Input

BOOL

BOOL

I, Q, M,
I, Q, M, D, Entrada de arran‐
D, L o
L, P o cons‐ que
constante tante

R

Input

BOOL

BOOL

I, Q, M,
I, Q, M, D, Entrada de reset
D, L o
L, P o cons‐
constante tante

PT

Input

TIME

TIME, LTI‐
ME

I, Q, M,
I, Q, M, D, Tiempo máximo de
D, L o
L, P o cons‐ lectura del tiempo
constante tante
El valor del pará‐
metro PT debe ser
positivo.

Q

Output

BOOL

BOOL

I, Q, M,
D, L

I, Q, M, D,
L, P

Salida que se acti‐
va una vez transcu‐
rrido el tiempo PT.

ET

Output

TIME

TIME, LTI‐
ME

I, Q, M,
D, L

I, Q, M, D,
L, P

Tiempo acumulado

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Acumulador de
tiempo":
,1

5

4

37

(7

660

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7215B'%ಯ

ಯ7DJB6WDUWಯ
ಯ7DJB5HVHWಯ
ಯ7DJB3UHVHW7LPHಯ

7215
7,0(
,1

4

5

(7

ಯ7DJB6WDWXVಯ
ಯ7DJB(ODSVHG7LPHಯ

37

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

Tag_Start

Cambio de señal "0" => "1"

PT

Tag_PresetTime

T#10s

Q

Tag_Status

FALSE; tras 10 s => TRUE

ET

Tag_ElapsedTime

Cambio de señal "0" => "1":
transcurre el tiempo T#10s.
Pasados 5 s, cambio de señal de
"1" => "0".
El tiempo del operando
"Tag_ElapsedTime" se detiene
en T#5s.
Pasados aprox. 2 s, nuevo cam‐
bio de señal de "0" => "1":
El tiempo del operando
"Tag_ElapsedTime" sigue trans‐
curriendo a partir de T#5s.

Cuando el estado lógico del operando "Tag_Start" cambia de "0" a "1", el tiempo programado
en el parámetro PT empieza a contar. Mientras el operando "Tag_Start" tenga el estado lógico
"1", se cuenta el tiempo. Cuando el estado lógico del operando "Tag_Start" cambia de "1" a "0",
el temporizador se detiene y se memoriza el valor de tiempo actual en el operando
"Tag_ElapsedTime". Si el estado lógico del operando "Tag_Start" vuelve a cambiar de "0" a "1",
el tiempo sigue transcurriendo a partir del valor de tiempo memorizado al cambiar de "1" a "0".
Una vez alcanzado el valor de tiempo indicado en el parámetro PT, el operando "Tag_Status"
adopta el estado lógico "1". El valor de tiempo actual se guarda en el operando
"Tag_ElapsedTime".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

661

Instrucciones
4.1 Instrucciones

---( TP )---: Arrancar temporizador como impulso
Descripción
La instrucción "Arrancar temporizador como impulso" arranca un temporizador CEI como
impulso con un tiempo determinado. El temporizador CEI se inicia cuando el resultado lógico
(RLO) cambia de "0" a "1" (flanco de señal ascendente). El temporizador CEI cuenta el tiempo
indicado, independientemente de cómo evolucione el RLO. La detección de un nuevo flanco
de señal ascendente no influye en el transcurso del temporizador CEI. Mientras el
temporizador CEI cuenta el tiempo, una consulta de si el estado del temporizador es "1" da
como resultado "1". Una vez transcurrido el temporizador CEI, el estado del temporizador
devuelve el estado lógico "0".
El estado actual del temporizador se deposita en el componente de estructura Q del
temporizador CEI. El estado del temporizador se consulta con un contacto normalmente
abierto para saber si es "1" o con un contacto normalmente cerrado para saber si es "0".
En el <Operando1> (tiempo) debajo de la instrucción se introduce el tiempo de retardo a la
desconexión y en el <Operando2> (temporizador CEI) encima de la instrucción se introduce el
temporizador CEI que se arrancará.
La ejecución de la instrucción "Arrancar temporizador como impulso" solo se puede colocar al
final del segmento. Dicha instrucción requiere una operación lógica precedente.
Nota
El arranque y la consulta del temporizador CEI pueden encontrarse en diferentes niveles de
ejecución, pues en cada consulta de las salidas Q o ET se actualiza la estructura IEC_TIMER.

Para CPU S7-1200
La instrucción "Arrancar temporizador como impulso" deposita los datos en una estructura del
tipo de datos IEC_TIMER o TP_TIME. La estructura se puede declarar de la manera siguiente:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER (p. ej.,
"MyIEC_TIMER")
● Declaración como variable local del tipo TP_TIME o IEC_TIMER en la sección "Static" de
un bloque (p. ej., #MyIEC_TIMER)

Para CPU S7-1500
La instrucción "Arrancar temporizador como impulso" deposita los datos en una estructura del
tipo de datos IEC_TIMER, IEC_LTIMER, TP_TIME o TP_LTIME. La estructura se puede
declarar de la manera siguiente:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER o IEC_LTIMER
(p. ej., "MyIEC_TIMER")
● Declaración como variable local del tipo TP_TIME, TP_LTIME, IEC_TIMER o IEC_LTIMER
en la sección "Static" de un bloque (p. ej., #MyIEC_TIMER)

662

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Actualización de los valores actuales en los datos de instancia
Los datos de instancia de "Arrancar temporizador como impulso" se actualizan siguiendo las
reglas indicadas a continuación:
● Entrada IN
La instrucción "Arrancar temporizador como impulso" compara el RLO actual con el RLO de
la consulta anterior, que está almacenado en el parámetro IN de los datos de instancia. Si
la instrucción detecta un cambio del RLO de "0" a "1", significa que hay un flanco de señal
ascendente y se empieza a contar el tiempo. Una vez procesada la instrucción "Arrancar
temporizador como impulso", el valor del parámetro IN se actualiza en los datos de
instancia y se utiliza como marca de flancos para la siguiente consulta.
Tenga en cuenta que la evaluación de flancos falla cuando el valor actual del parámetro IN
es escrito o inicializado por otras funciones.
● Entrada PT
El valor de la entrada PT se escribe en el parámetro PT de los datos de instancia cuando
se produce un cambio de flanco en la entrada IN.
● Salidas Q y ET
Los valores actuales de las salidas Q y ET se actualizan en los casos siguientes:
– Al llamar la instrucción, si las salidas ET o Q están interconectadas.
O bien:
– Al acceder a Q o ET.
Si las salidas no están interconectadas y tampoco se consultan, el valor de tiempo actual
de las salidas Q y ET no se actualiza. Las salidas tampoco se actualizan aunque la
instrucción se omita en el programa.
Para calcular los valores de tiempo de Q y ET se utilizan parámetros internos de la
instrucción "Arrancar temporizador como impulso". Tenga en cuenta que la medición de
tiempo falla cuando los valores actuales de la instrucción son escritos o inicializados por
otras funciones.

Programación del PLC
Manual de programación y manejo, 11/2019

663

Instrucciones
4.1 Instrucciones

PELIGRO
Peligro al reinicializar los valores actuales
Si se reinicializan los valores actuales de un temporizador CEI mientras se está midiendo el
tiempo, se interfiere en la función del temporizador CEI. Esto puede provocar incoherencias
entre el programa y el proceso real. Como consecuencia pueden producirse daños materiales
y personales graves.
Las funciones siguientes pueden provocar la reinicialización de los valores actuales:
● Cargar el bloque con reinicialización
● Cargar instantáneas como valores actuales
● Forzar valores actuales de forma normal o permanente
● La instrucción "WRIT_DBL"
Antes de ejecutar estas funciones, tome las medidas siguientes:
● Asegúrese de que la instalación se encuentra en un estado seguro antes de sobrescribir
los valores actuales.
● Asegúrese de que el temporizador CEI ha finalizado antes de inicializar los valores
actuales.
● Si los valores actuales se sobrescriben con una instantánea, asegúrese de que la
instantánea se haya generado en un instante en que la instalación estaba en un estado
seguro.
● Asegúrese de que el programa no está leyendo ni escribiendo los datos afectados durante
la transferencia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
impulso":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de me‐
moria

Descripción

I, Q, M, D, L o
constante

Tiempo que
cuenta el
temporizador
CEI.

<Tiempo>

Input

TIME

TIME, LTIME

<Temporiza‐
dor CEI>

InOut

IEC_TIMER,
TP_TIME

IEC_TIMER,
D, L
IEC_LTIMER,
TP_TIME, TP_LTI‐
ME

Temporiza‐
dor CEI que
se arranca.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

664

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción:
,1

4

37

37

37

(7
37

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJB,QSXWಯ

ಯ'%ಯ
0\,(&B7,0(5

73
ಯ7DJ7LPHಯ

La instrucción "Arrancar temporizador como impulso" se ejecuta cuando el estado lógico del
operando "Tag_Input" cambia de "0" a "1". El temporizador "DB1".MyIEC_TIMER se arranca
por el tiempo que está guardado en el operando "TagTime".
ಯ'%ಯ
0\,(&B7,0(54

ಯ7DJB2XWSXWಯ

Mientras el temporizador "DB1".MyIEC_TIMER cuenta el tiempo, el estado del temporizador
("DB1".MyIEC_TIMER.Q) devuelve el estado lógico "1" y el operando "Tag_Output" se activa.
Cuando el temporizador CEI termina de contar, el estado lógico del temporizador cambia a "0"
y el operando "Tag_Output" se desactiva.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Programación del PLC
Manual de programación y manejo, 11/2019

665

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

---( TON )---: Arrancar temporizador como retardo a la conexión
Descripción
La instrucción "Arrancar temporizador como retardo a la conexión" arranca un temporizador
CEI como retardo a la conexión con un tiempo determinado. El temporizador CEI se inicia
cuando el resultado lógico (RLO) cambia de "0" a "1" (flanco de señal ascendente). El
temporizador CEI cuenta el tiempo indicado. La salida devuelve el estado lógico "1" si RLO en
la entrada de la instrucción tiene el estado lógico "1". Si el RLO cambia a "0" antes de
transcurrir el tiempo, el temporizador CEI activo se inicializa. La consulta del estado del
temporizador devuelve en este caso el estado lógico "0". Cuando se detecta el siguiente flanco
de señal ascendente en la entrada de la instrucción, se reinicia el temporizador CEI.
El estado actual del temporizador se deposita en el componente de estructura "Q" del
temporizador CEI. El estado del temporizador se consulta con un contacto normalmente
abierto para saber si es "1" o con un contacto normalmente cerrado para saber si es "0".
La instrucción "Arrancar temporizador como retardo a la conexión" solo se puede colocar al
final del segmento. Dicha instrucción requiere una operación lógica precedente.
En el <Operando1> (tiempo) debajo de la instrucción se introduce el tiempo de retardo a la
desconexión y en el <Operando2> (temporizador CEI) encima de la instrucción se introduce el
temporizador CEI que se arrancará.
Nota
El arranque y la consulta del temporizador CEI pueden encontrarse en diferentes niveles de
ejecución, pues en cada consulta de las salidas Q o ET se actualiza la estructura IEC_TIMER.

Para CPU S7-1200
La instrucción "Arrancar temporizador como retardo a la conexión" deposita los datos en una
estructura del tipo de datos IEC_TIMER o TON_TIME. La estructura se puede declarar de la
manera siguiente:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER (p. ej.,
"MyIEC_TIMER")
● Declaración como variable local del tipo TON_TIME o IEC_TIMER en la sección "Static" de
un bloque (p. ej., #MyIEC_TIMER)

666

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Para CPU S7-1500
La instrucción "Arrancar temporizador como retardo a la conexión" deposita los datos en una
estructura del tipo de datos IEC_TIMER, IEC_LTIMER, TON_TIME o TON_LTIME. La
estructura se puede declarar de la manera siguiente:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER o IEC_LTIMER
(p. ej., "MyIEC_TIMER")
● Declaración como variable local del tipo TON_TIME, TON_LTIME, IEC_TIMER o
IEC_LTIMER en la sección "Static" de un bloque (p. ej., #MyIEC_TIMER)

Actualización de los valores actuales en los datos de instancia
Los datos de instancia de "Arrancar temporizador como retardo a la conexión" se actualizan
siguiendo las reglas indicadas a continuación:
● Entrada IN
La instrucción "Arrancar temporizador como retardo a la conexión" compara el RLO actual
con el RLO de la consulta anterior, que está almacenado en el parámetro "IN" de los datos
de instancia. Si la instrucción detecta un cambio del RLO de "0" a "1", significa que hay un
flanco de señal ascendente y se inicia el temporizador. Una vez procesada la instrucción
"Arrancar temporizador como retardo a la conexión", el valor del parámetro IN se actualiza
en los datos de instancia y se utiliza como marca de flancos para la siguiente consulta.
Tenga en cuenta que la evaluación de flancos falla cuando el valor actual del parámetro IN
es escrito o inicializado por otras funciones.
● Entrada PT
El valor de la entrada PT se escribe en el parámetro PT de los datos de instancia cuando
se produce un cambio de flanco en la entrada IN.
● Salidas Q y ET
Los valores actuales de las salidas Q y ET se actualizan en los casos siguientes:
– Al llamar la instrucción, si las salidas ET o Q están interconectadas.
O bien:
– Al acceder a Q o ET.
Si las salidas no están interconectadas y tampoco se consultan, el valor de tiempo actual
de las salidas Q y ET no se actualiza. Las salidas tampoco se actualizan aunque la
instrucción se omita en el programa.
Para calcular los valores de tiempo de Q y ET se utilizan parámetros internos de la
instrucción "Arrancar temporizador como retardo a la conexión". Tenga en cuenta que el
cálculo de tiempo falla cuando los valores actuales de la instrucción son escritos o
inicializados por otras funciones.

Programación del PLC
Manual de programación y manejo, 11/2019

667

Instrucciones
4.1 Instrucciones

PELIGRO
Peligro al reinicializar los valores actuales
Si se reinicializan los valores actuales de un temporizador CEI mientras se está ejecutando
el temporizador, se interfiere en la función del temporizador CEI. Esto puede provocar
incoherencias entre el programa y el proceso real. Como consecuencia pueden producirse
daños materiales y personales graves.
Las funciones siguientes pueden provocar la reinicialización de los valores actuales:
● Cargar el bloque con reinicialización
● Cargar instantáneas como valores actuales
● Forzar valores actuales de forma normal o permanente
● La instrucción "WRIT_DBL"
Antes de ejecutar estas funciones, tome las medidas siguientes:
● Asegúrese de que la instalación se encuentra en un estado seguro antes de sobrescribir
los valores actuales.
● Asegúrese de que el temporizador CEI ha finalizado antes de inicializar los valores
actuales.
● Si los valores actuales se sobrescriben con una instantánea, asegúrese de que la
instantánea se haya generado en un instante en que la instalación estaba en un estado
seguro.
● Asegúrese de que el programa no está leyendo ni escribiendo los datos afectados durante
la transferencia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
retardo a la conexión":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de me‐ Descripción
moria

<Tiempo>

Input

TIME

TIME, LTIME

I, Q, M, D, L
o constante

Tiempo que
cuenta el tem‐
porizador CEI.

<Temporiza‐
dor CEI>

InOut

IEC_TIMER,
TON_TIME

IEC_TIMER,
IEC_LTIMER,
TON_TIME,
TON_LTIME

D, L

Temporizador
CEI que se
arranca.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

668

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción:
,1

4

37

37

(7
37

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJB,QSXWಯ

ಯ0\,(&B7,0(5ಯ

721
ಯ7DJ7LPHಯ

La instrucción "Arrancar temporizador como retardo a la conexión" se ejecuta cuando el estado
lógico del operando "Tag_Input" cambia de "0" a "1". El temporizador "MyIEC_TIMER" se
arranca por el tiempo que está guardado en el operando "TagTime".
ಯ0\,(&B7,0(5ಯ4

ಯ7DJB2XWSXWಯ

Cuando finaliza el tiempo "MyIEC_TIMER" y el operando "Tag_Input" devuelve el estado lógico
"1", la consulta del estado del temporizador ("MyIEC_TIMER".Q) devuelve el estado lógico "1"
y el operando "Tag_Output" se activa. Cuando el estado lógico del operando "Tag_Input"
cambia a "0", la consulta del estado del temporizador devuelve el estado lógico "0" y el
operando "Tag_Output" se desactiva.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

669

Instrucciones
4.1 Instrucciones

---( TOF )---: Arrancar temporizador como retardo a la desconexión
Descripción
La instrucción "Arrancar temporizador como retardo a la desconexión" arranca un
temporizador CEI como retardo a la desconexión con un tiempo determinado. La consulta del
estado del temporizador devuelve el estado lógico "1" si el resultado lógico (RLO) de la entrada
de la instrucción devuelve el estado lógico "1". Si el RLO cambia de "1" a "0" (flanco de señal
descendente), el temporizador CEI arranca con el tiempo indicado. Mientras el temporizador
CEI está activado, el estado del temporizador permanece a "1". Una vez transcurrido el tiempo
y si el RLO de la entrada de la instrucción devuelve el estado lógico "0", el estado del
temporizador se ajusta a "0". Si el RLO cambia a "1" antes de transcurrir el tiempo, el
temporizador CEI activo se inicializa y el estado del temporizador permanece a "1".
El estado actual del temporizador se deposita en el componente de estructura Q del
temporizador CEI. El estado del temporizador se consulta con un contacto normalmente
abierto para saber si es "1" o con un contacto normalmente cerrado para saber si es "0".
En el <Operando1> (tiempo) debajo de la instrucción se introduce el tiempo de retardo a la
desconexión y en el <Operando2> (temporizador CEI) encima de la instrucción se introduce el
temporizador CEI que se arrancará.
La instrucción "Arrancar temporizador como retardo a la desconexión" solo se puede colocar
al final del segmento. Dicha instrucción requiere una operación lógica precedente.
Nota
El arranque y la consulta del temporizador CEI pueden encontrarse en diferentes niveles de
ejecución, pues en cada consulta de las salidas Q o ET se actualiza la estructura IEC_TIMER.

Para CPU S7-1200
La instrucción "Arrancar temporizador como retardo a la desconexión" deposita los datos en
una estructura del tipo de datos IEC_TIMER o TOF_TIME. La estructura se puede declarar de
la manera siguiente:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER (p. ej.,
"MyIEC_TIMER")
● Declaración como variable local del tipo TOF_TIME o IEC_TIMER en la sección "Static" de
un bloque (p. ej., #MyIEC_TIMER)

Para CPU S7-1500
La instrucción "Arrancar temporizador como retardo a la desconexión" deposita los datos en
una estructura del tipo de datos IEC_TIMER, IEC_LTIMER, TOF_TIME o TOF_LTIME. La
estructura se puede declarar de la manera siguiente:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER o IEC_LTIMER
(p. ej., "MyIEC_TIMER")
● Declaración como variable local del tipo TOF_TIME, TOF_LTIME, IEC_TIMER o
IEC_LTIMER en la sección "Static" de un bloque (p. ej., #MyIEC_TIMER)

670

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Actualización de los valores actuales en los datos de instancia
Los datos de instancia de "Arrancar temporizador como retardo a la desconexión" se
actualizan siguiendo las reglas indicadas a continuación:
● Entrada IN
La instrucción "Arrancar temporizador como retardo a la desconexión" compara el RLO
actual con el RLO de la consulta anterior, que está almacenado en el parámetro "IN" de los
datos de instancia. Si la instrucción detecta un cambio del RLO de "1" a "0", significa que
hay un flanco de señal descendente y se empieza a contar el tiempo. Una vez procesada
la instrucción "Arrancar temporizador como retardo a la desconexión", el valor del
parámetro IN se actualiza en los datos de instancia y se utiliza como marca de flancos para
la siguiente consulta.
Tenga en cuenta que la evaluación de flancos falla cuando el valor actual del parámetro "IN"
es escrito o inicializado por otras funciones.
● Entrada PT
El valor de la entrada PT se escribe en el parámetro PT de los datos de instancia cuando
se produce un cambio de flanco en la entrada IN.
● Salidas Q y ET
Los valores actuales de las salidas Q y ET se actualizan en los casos siguientes:
– Al llamar la instrucción, si las salidas ET o Q están interconectadas.
O bien:
– Al acceder a Q o ET.
Si las salidas no están interconectadas y tampoco se consultan, el valor de tiempo actual
de las salidas Q y ET no se actualiza. Las salidas tampoco se actualizan aunque la
instrucción se omita en el programa.
Para calcular los valores de tiempo de Q y ET se utilizan parámetros internos de la
instrucción "Arrancar temporizador como retardo a la desconexión". Tenga en cuenta que
la medición de tiempo falla cuando los valores actuales de la instrucción son escritos o
inicializados por otras funciones.

Programación del PLC
Manual de programación y manejo, 11/2019

671

Instrucciones
4.1 Instrucciones

PELIGRO
Peligro al reinicializar los valores actuales
Si se reinicializan los valores actuales de un temporizador CEI mientras se está midiendo el
tiempo, se interfiere en la función del temporizador CEI. Esto puede provocar incoherencias
entre el programa y el proceso real. Como consecuencia pueden producirse daños materiales
y personales graves.
Las funciones siguientes pueden provocar la reinicialización de los valores actuales:
● Cargar el bloque con reinicialización
● Cargar instantáneas como valores actuales
● Forzar valores actuales de forma normal o permanente
● La instrucción "WRIT_DBL"
Antes de ejecutar estas funciones, tome las medidas siguientes:
● Asegúrese de que la instalación se encuentra en un estado seguro antes de sobrescribir
los valores actuales.
● Asegúrese de que el temporizador CEI ha finalizado antes de inicializar los valores
actuales.
● Si los valores actuales se sobrescriben con una instantánea, asegúrese de que la
instantánea se haya generado en un instante en que la instalación estaba en un estado
seguro.
● Asegúrese de que el programa no está leyendo ni escribiendo los datos afectados durante
la transferencia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
retardo a la desconexión":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de me‐ Descripción
moria

<Tiempo>

Input

TIME

TIME, LTIME

I, Q, M, D, L
o constante

Tiempo que
cuenta el tem‐
porizador CEI.

<Temporiza‐
dor CEI>

InOut

IEC_TIMER,
TOF_TIME

IEC_TIMER,
IEC_LTIMER,
TOF_TIME,
TOF_LTIME

D, L

Temporizador
CEI que se
arranca.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

672

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción:
,1

4
37

37

(7
37

Ejemplo
Mientras se ejecuta el temporizador #MyIEC_TIMER, la consulta del estado del temporizador
(#MyIEC_TIMER.Q) devuelve el estado lógico "1" y el operando "Tag_Output" se activa. Una
vez transcurrido el tiempo y si el operando "Tag_Input" devuelve el estado lógico "0", la
consulta del estado del temporizador devuelve el estado lógico "0". Cuando el estado lógico del
operando "Tag_Input" cambia a "1" antes de transcurrir el temporizador #MyIEC_TIMER, el
temporizador se inicializa. Cuando el estado lógico del operando "Tag_Input" es "1", la
consulta del estado del temporizador devuelve el estado lógico "1".
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJB,QSXWಯ

0\,(&B7,0(5

72)
ಯ7DJ7LPHಯ

La instrucción "Arrancar temporizador como retardo a la desconexión" se ejecuta cuando el
estado lógico del operando "Tag_Input" cambia de "1" a "0". El temporizador #MyIEC_TIMER
se inicia por el tiempo que está guardado en el operando "TagTime".
0\,(&B7,0(54

ಯ7DJB2XWSXWಯ

Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Programación del PLC
Manual de programación y manejo, 11/2019

673

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

---( TONR )---: Acumulador de tiempo
Descripción
La instrucción "Acumulador de tiempo" cuenta durante cuánto tiempo es "1" la señal en la
entrada de la instrucción. La medición de tiempo se inicia cuando el resultado lógico (RLO)
cambia de "0" a "1" (flanco de señal ascendente). Mientras el RLO sea "1", se cuenta el tiempo.
Si el RLO cambia a "0", se detiene la lectura de tiempo. Si el RLO cambia nuevamente a "1",
se sigue contando el tiempo. La consulta de si el estado del temporizador es "1" devuelve el
estado lógico "1" si el tiempo contado supera el tiempo especificado y el RLO a la entrada de
la bobina es "1".
El estado actual del temporizador se deposita en el componente de estructura "Q" del
temporizador CEI. El estado del temporizador se consulta con un contacto normalmente
abierto para saber si es "1" o con un contacto normalmente cerrado para saber si es "0".
El estado del temporizador "Q" y el tiempo leído actualmente "ET" se pueden poner a "0" con
la instrucción "Inicializar temporizador".
En el <Operando1> (tiempo) debajo de la instrucción se introduce el tiempo y en el
<Operando2> (temporizador CEI) encima de la instrucción se introduce el temporizador CEI
que se arrancará.
La instrucción "Acumulador de tiempo" solo se puede colocar al final del segmento. Dicha
instrucción requiere una operación lógica precedente.
Nota
El arranque y la consulta del temporizador CEI pueden encontrarse en diferentes niveles de
ejecución, pues en cada consulta de las salidas Q o ET se actualiza la estructura IEC_TIMER.

Para CPU S7-1200
La instrucción "Acumulador de tiempo" deposita los datos en una estructura del tipo de datos
IEC_TIMER o TONR_TIME. La estructura se puede declarar de la manera siguiente:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER (p. ej.,
"MyIEC_TIMER")
● Declaración como variable local del tipo TONR_TIME o IEC_TIMER en la sección "Static"
de un bloque (p. ej., #MyIEC_TIMER)

674

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Para CPU S7-1500
La instrucción "Acumulador de tiempo" deposita los datos en una estructura del tipo de datos
IEC_TIMER, IEC_LTIMER, TONR_TIME o TONR_LTIME. La estructura se puede declarar de
la manera siguiente:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER o IEC_LTIMER
(p. ej., "MyIEC_TIMER")
● Declaración como variable local del tipo TONR_TIME, TONR_LTIME, IEC_TIMER o
IEC_LTIMER en la sección "Static" de un bloque (p. ej., #MyIEC_TIMER)

Actualización de los valores actuales en los datos de instancia
Los datos de instancia de "Acumulador de tiempo" se actualizan siguiendo las reglas indicadas
a continuación:
● Entrada IN
La instrucción "Acumulador de tiempo" compara el RLO actual con el RLO de la consulta
anterior, que está almacenado en el parámetro "IN" de los datos de instancia. Si la
instrucción detecta un cambio del RLO de "0" a "1", significa que hay un flanco de señal
ascendente y se reanuda la medición de tiempo. Si la instrucción detecta un cambio de "1"
a "0" en el RLO, significa que hay un flanco de señal descendente y la medición de tiempo
se interrumpe. Una vez procesada la instrucción "Acumulador de tiempo", el valor del
parámetro IN se actualiza en los datos de instancia y se utiliza como marca de flancos para
la siguiente consulta.
Tenga en cuenta que la evaluación de flancos falla cuando el valor actual del parámetro IN
es escrito o inicializado por otras funciones.
● Entrada PT
El valor de la entrada PT se escribe en el parámetro PT de los datos de instancia cuando
se produce un cambio de flanco en la entrada IN.
● Entrada R
La señal "1" en la entrada R inicializa la medición de tiempo y la bloquea. Los flancos en la
entrada IN se ignoran. La señal "0" en la entrada R habilita de nuevo la medición de tiempo.
● Salidas Q y ET
Los valores actuales de las salidas Q y ET se actualizan en los casos siguientes:
– Al llamar la instrucción, si las salidas ET o Q están interconectadas.
O bien:
– Al acceder a Q o ET.
Si las salidas no están interconectadas y tampoco se consultan, el valor de tiempo actual
de las salidas Q y ET no se actualiza. Las salidas tampoco se actualizan aunque la
instrucción se omita en el programa.
Para calcular los valores de tiempo de Q y ET se utilizan parámetros internos de la
instrucción "Acumulador de tiempo". Tenga en cuenta que la medición de tiempo falla
cuando los valores actuales de la instrucción son escritos o inicializados por otras
funciones.

Programación del PLC
Manual de programación y manejo, 11/2019

675

Instrucciones
4.1 Instrucciones

PELIGRO
Peligro al reinicializar los valores actuales
Si se reinicializan los valores actuales de un temporizador CEI mientras se está midiendo el
tiempo, se interfiere en la función del temporizador CEI. Esto puede provocar incoherencias
entre el programa y el proceso real. Como consecuencia pueden producirse daños materiales
y personales graves.
Las funciones siguientes pueden provocar la reinicialización de los valores actuales:
● Cargar el bloque con reinicialización
● Cargar instantáneas como valores actuales
● Forzar valores actuales de forma normal o permanente
● La instrucción "WRIT_DBL"
Antes de ejecutar estas funciones, tome las medidas siguientes:
● Asegúrese de que la instalación se encuentra en un estado seguro antes de sobrescribir
los valores actuales.
● Asegúrese de que el temporizador CEI ha finalizado antes de inicializar los valores
actuales.
● Si los valores actuales se sobrescriben con una instantánea, asegúrese de que la
instantánea se haya generado en un instante en que la instalación estaba en un estado
seguro.
● Asegúrese de que el programa no está leyendo ni escribiendo los datos afectados durante
la transferencia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Acumulador de tiempo":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de me‐ Descripción
moria

<Tiempo>

Input

TIME

TIME, LTIME

I, Q, M, D, L
o constante

Tiempo que
cuenta el tem‐
porizador CEI.

<Temporiza‐
dor CEI>

InOut

IEC_TIMER,
TONR_TIME

IEC_TIMER,
IEC_LTIMER,
TONR_TIME,
TONR_LTIME

D, L

Temporizador
CEI que se
arranca.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

676

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción:
,1

5

4

37

(7

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJB,QSXWಯ

ಯ0\,(&B7,0(5ಯ

7215
ಯ7DJ7LPHಯ

La instrucción "Acumulador de tiempo" se ejecuta cuando se detecta un flanco de señal
ascendente en el RLO. Mientras el operando "Tag_Input" devuelva el estado lógico "1", se
cuenta el tiempo.
ಯ0\,(&B7,0(5ಯ4

ಯ7DJB2XWSXWಯ

Si el tiempo contado supera el valor del operando "TagTime", la consulta del estado del
temporizador ("MyIEC_TIMER".Q) devuelve el estado lógico "1" y el operando "Tag_Output"
se activa.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Programación del PLC
Manual de programación y manejo, 11/2019

677

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

---( RT )---: Inicializar temporizador
Descripción
La instrucción "Inicializar temporizador" permite poner a "0" un temporizador CEI. La
instrucción se ejecuta solo si el resultado lógico (RLO) de la entrada de la bobina es "1". Si fluye
corriente hacia la bobina (RLO es "1"), los componentes de la estructura del temporizador en
el bloque de datos indicado se ponen a "0". Si el RLO en la entrada de la instrucción es "0", el
temporizador permanece invariable.
La instrucción no afecta al RLO. El RLO de la entrada de la bobina se transfiere directamente
a la salida de la bobina.
A la instrucción "Inicializar temporizador" debe asignársele un temporizador CEI declarado en
el programa.

Actualización de los valores actuales
Los datos de la instrucción se actualizan únicamente al efectuar una llamada de la instrucción,
y no cada vez que se accede al temporizador CEI asignado. La consulta de datos es igual a la
llamada de instrucción únicamente hasta la siguiente llamada de instrucción.

678

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

PELIGRO
Peligro al reinicializar los valores actuales
Si se reinicializan los valores actuales de un temporizador CEI mientras se está ejecutando
el temporizador, se interfiere en la función del temporizador CEI. Esto puede provocar
incoherencias entre el programa y el proceso real. Como consecuencia pueden producirse
daños materiales y personales graves.
Las funciones siguientes pueden provocar la reinicialización de los valores actuales:
● Cargar el bloque con reinicialización
● Cargar instantáneas como valores actuales
● Forzar valores actuales de forma normal o permanente
● La instrucción "WRIT_DBL"
Antes de ejecutar estas funciones, tome las medidas siguientes:
● Asegúrese de que la instalación se encuentra en un estado seguro antes de sobrescribir
los valores actuales.
● Asegúrese de que el temporizador CEI ha finalizado antes de inicializar los valores
actuales.
● Si los valores actuales se sobrescriben con una instantánea, asegúrese de que la
instantánea se haya generado en un instante en que la instalación estaba en un estado
seguro.
● Asegúrese de que el programa no está leyendo ni escribiendo los datos afectados durante
la transferencia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Inicializar temporizador":
Parámetro
<Temporiza‐
dor CEI>

Declaración
Output

Tipo de datos

Área de
memoria

S7-1200

S7-1500

IEC_TIMER,
TP_TIME,
TON_TIME,
TOF_TIME,
TONR_TIME

IEC_TIMER,
D, L
IEC_LTIMER,
TP_TIME, TP_LTI‐
ME, TON_TIME,
TON_LTIME,
TOF_TIME,
TOF_LTIME,
TONR_TIME,
TONR_LTIME

Descripción
Temporizador
CEI que se ini‐
cializa.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

679

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ721B'%ಯ
721
7,0(

ಯ7DJB,QSXWBಯ
ಯ7DJB37ಯ

ಯ7DJB6WDWXVಯ

,1

4

37

(7

ಯ7DJB(7ಯ

Cuando el estado lógico del operando "Tag_Input_1" cambia de "0" a "1", se ejecuta la
instrucción "Retardo al conectar". El temporizador depositado en el bloque de datos de
instancia "TON_DB" arranca con el tiempo especificado por el operando "Tag_PT".
ಯ7DJB,QSXWBಯ ಯ7DJB,QSXWBಯ

ಯ721B'%ಯ

57

Si los operandos "Tag_Input_2" y "Tag_Input_3" devuelven el estado lógico "1", la instrucción
"Inicializar temporizador" se ejecuta y el temporizador depositado en el bloque de datos
"TON_DB" se inicializa.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

---( PT )---: Cargar tiempo
Descripción
La instrucción "Cargar tiempo" permite ajustar el tiempo de un temporizador CEI. La
instrucción se ejecuta en cada ciclo si el resultado lógico (RLO) de la entrada de la instrucción
tiene el estado lógico "1". La instrucción escribe el tiempo indicado en la estructura del
temporizador CEI indicado.
En el <Operando1> (tiempo) debajo de la instrucción se introduce el tiempo que se cargará y
en el <Operando2> (temporizador CEI) encima de la instrucción se introduce el temporizador
CEI que se arrancará.

680

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
A la instrucción "Cargar tiempo" debe asignársele un temporizador CEI declarado en el
programa.
Nota
Si el temporizador CEI indicado se ejecuta mientras se ejecuta la instrucción, esta sobrescribe
el tiempo actual del temporizador CEI indicado. Esto puede modificar el estado del
temporizador CEI.

Actualización de los valores actuales
La actualización de los datos de la instrucción se lleva a cabo cuando se llama la instrucción
y cada vez que se accede al temporizador CEI asignado. La consulta de Q o ET (p. ej.
"MyTimer".Q y "MyTimer".ET) actualiza la estructura de IEC_TIMER.
PELIGRO
Peligro al reinicializar los valores actuales
Si se reinicializan los valores actuales de un temporizador CEI mientras se está ejecutando
el temporizador, se interfiere en la función del temporizador CEI. Esto puede provocar
incoherencias entre el programa y el proceso real. Como consecuencia pueden producirse
daños materiales y personales graves.
Las funciones siguientes pueden provocar la reinicialización de los valores actuales:
● Cargar el bloque con reinicialización
● Cargar instantáneas como valores actuales
● Forzar valores actuales de forma normal o permanente
● La instrucción "WRIT_DBL"
Antes de ejecutar estas funciones, tome las medidas siguientes:
● Asegúrese de que la instalación se encuentra en un estado seguro antes de sobrescribir
los valores actuales.
● Asegúrese de que el temporizador CEI ha finalizado antes de inicializar los valores
actuales.
● Si los valores actuales se sobrescriben con una instantánea, asegúrese de que la
instantánea se haya generado en un instante en que la instalación estaba en un estado
seguro.
● Asegúrese de que el programa no está leyendo ni escribiendo los datos afectados durante
la transferencia.

Programación del PLC
Manual de programación y manejo, 11/2019

681

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Cargar tiempo":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de me‐ Descripción
moria

<Tiempo>

Input

TIME

TIME, LTIME

I, Q, M, D, L Tiempo que
o constante cuenta el tem‐
porizador CEI.

<Temporiza‐
dor CEI>

Output

IEC_TIMER,
TP_TIME,
TON_TIME,
TOF_TIME,
TONR_TIME

IEC_TIMER,
D, L
IEC_LTIMER,
TP_TIME, TP_LTI‐
ME, TON_TIME,
TON_LTIME,
TOF_TIME,
TOF_LTIME,
TONR_TIME,
TONR_LTIME

Temporizador
CEI cuyo tiem‐
po se ajusta.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ721B'%ಯ
721
7,0(

ಯ7DJB,QSXWBಯ
ಯ7DJB37ಯ

ಯ7DJB6WDWXVಯ

,1

4

37

(7

ಯ7DJB(7ಯ

Cuando el estado lógico del operando "Tag_Input_1" cambia de "0" a "1", se ejecuta la
instrucción "Retardo al conectar". El temporizador CEI depositado en el bloque de datos de
instancia "TON_DB" arranca con el tiempo predeterminado por el operando "Tag_PT".
ಯ7DJB,QSXWBಯ

ಯ721B'%ಯ

37
ಯ7DJB37Bಯ

Cuando el estado lógico del operando "Tag_Input_2" es "1", se ejecuta la instrucción "Cargar
tiempo". La instrucción escribe el tiempo "Tag_PT_2" en el bloque de datos de instancia
"TON_DB" y sobrescribe a la vez el valor del operando "Tag_PT" en el bloque de datos. Esto
puede modificar el estado lógico del estado del temporizador en la siguiente consulta o al
acceder a "MyTimer".Q o "MyTimer".ET.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

682

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

Legacy
S_PULSE: Parametrizar y arrancar temporizador como impulso
Descripción
Con la instrucción "Parametrizar y arrancar temporizador como impulso" se arranca un
temporizador programado al detectarse un cambio en el resultado lógico (RLO) de "0" a "1"
(flanco de señal ascendente) en la entrada S. El temporizador cuenta el tiempo programado
(TV) mientras el estado lógico de la entrada S sea "1". Si el estado lógico en la entrada S
cambia a "0" antes de que transcurra el tiempo programado, se detiene el temporizador. En tal
caso, el estado lógico de la salida Q es "0".
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo. El valor de tiempo actual se emite codificado en binario por la salida
BI y codificado en BCD por la salida BCD.
Si el temporizador está contando y el estado lógico de la entrada R cambia a "1", el valor actual
de tiempo y la base de tiempo también se ponen a cero. Si el temporizador no está en marcha,
el estado lógico "1" de la entrada R no provoca ningún efecto.
La instrucción "Parametrizar y arrancar temporizador como impulso" requiere una operación
lógica precedente para la evaluación de flancos y se puede colocar dentro o en el extremo del
segmento.
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en "L: Cargar valor del
temporizador".

Programación del PLC
Manual de programación y manejo, 11/2019

683

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y arrancar
temporizador como impulso":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador de la instruc‐
ción
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, D, L o
constante

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Valor de tiempo predetermi‐
nado

R

Input

BOOL

I, Q, M, D, L, T, C,
P o constante

Entrada de reset

BI

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en binario)

BCD

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L

Estado del temporizador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

684

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como impulso":
W

W

W

5/2HQODHQWUDGD6

5/2HQODHQWUDGD5

7HPSRUL]DGRUHQPDUFKD

&RQVXOWD

&RQVXOWD

W WLHPSRSURJUDPDGR

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7LPHUBಯ
ಯ7DJ,QBಯ
ಯ7DJ,QB1XPEHUಯ
ಯ7DJ,QBಯ

6B38/6(

ಯ7DJ2XWಯ

6

4

79

%,

ಯ7DJ9DOXHBಯ

%&'

ಯ7DJ9DOXHBಯ

5

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador empieza a contar con el valor de tiempo del operando
"TagIn_Number" y sigue contando mientras el operando "TagIn_1" devuelva el estado lógico
"1". Si el estado lógico del operando "TagIn_1" cambia de "1" a "0" antes de que transcurra el
tiempo, el temporizador "Timer_1" se detiene. En ese caso, el operando "TagOut" se pone a
"0".
Programación del PLC
Manual de programación y manejo, 11/2019

685

Instrucciones
4.1 Instrucciones
El operando "TagOut" devuelve el estado lógico "1" mientras el temporizador esté en marcha
y el operando "TagIn_1" tenga el estado lógico "1". Una vez transcurrido el tiempo o si se
inicializa el temporizador, el operando "TagOut" se pone a "0".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 1604)
Principios básicos de KOP (Página 7943)

S_PEXT: Parametrizar y arrancar temporizador como impulso prolongado
Descripción
Con la instrucción "Parametrizar y arrancar temporizador como impulso prolongado" se
arranca un temporizador programado al detectarse un cambio en el resultado lógico (RLO) de
"0" a "1" (flanco de señal ascendente) en la entrada S. El temporizador cuenta el tiempo
programado (TV), aunque el estado lógico de la entrada S cambie a "0". Mientras se ejecuta
el temporizador, la salida Q devuelve el estado lógico "1". Una vez transcurrido el tiempo, la
salida Q se pone a "0". Si el estado lógico en la entrada S cambia de "0" a "1" mientras se
cuenta el tiempo, este se reinicia con el tiempo programado en la entrada TV.
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo. El valor de tiempo actual se emite codificado en binario por la salida
BI y codificado en BCD por la salida BCD.
Si el temporizador está contando y el estado lógico de la entrada R cambia a "1", el valor actual
de tiempo y la base de tiempo también se ponen a cero. Si el temporizador no está en marcha,
el estado lógico "1" de la entrada R no provoca ningún efecto.
La instrucción "Parametrizar y arrancar temporizador como impulso prolongado" requiere una
operación lógica precedente para la evaluación de flancos y se puede colocar dentro o en el
extremo del segmento.

686

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en "L: Cargar valor del
temporizador".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y arrancar
temporizador como impulso prolongado":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador de la instruc‐
ción
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, D, L o
constante

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Valor de tiempo predetermi‐
nado

R

Input

BOOL

I, Q, M, D, L, T, C,
P o constante

Entrada de reset

BI

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en binario)

BCD

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L

Estado del temporizador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

687

Instrucciones
4.1 Instrucciones

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como impulso prolongado":
W

W

W

5/2HQHQWUDGD6

5/2HQHQWUDGD5

(OWLHPSRFRUUH

&RQVXOWD

&RQVXOWD
W WLHPSRSURJUDPDGR

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7LPHUBಯ
ಯ7DJ,QBಯ
ಯ7DJ,QB1XPEHUಯ
ಯ7DJ,QBಯ

6B3(;7

ಯ7DJ2XWಯ

6

4

79

%,

ಯ7DJ9DOXHBಯ

%&'

ಯ7DJ9DOXHBಯ

5



Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador empieza a contar con el valor de tiempo del operando
"TagIn_Number" sin verse afectado por un flanco descendente en la entrada S. Si el estado
lógico del operando "TagIn_1" cambia de "0" a "1" antes de que transcurra el tiempo, el
temporizador se reinicia.

688

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
El operando "TagOut" devuelve el estado lógico "1" mientras el temporizador esté en marcha.
Una vez transcurrido el tiempo o si se inicializa el temporizador, el operando "TagOut" se pone
a "0".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 1604)
Principios básicos de KOP (Página 7943)

S_ODT: Parametrizar y arrancar temporizador como retardo a la conexión
Descripción
Con la instrucción "Parametrizar y arrancar temporizador como retardo a la conexión" se
arranca un temporizador programado como retardo a la conexión al detectarse un cambio en
el resultado lógico (RLO) de "0" a "1" (flanco de señal ascendente) en la entrada S. El
temporizador cuenta el tiempo programado (TV) mientras el estado lógico de la entrada S sea
"1". Una vez transcurrido el tiempo debidamente y si la entrada S aún tiene el valor lógico "1",
la salida Q devuelve el valor lógico "1". Si el estado de la entrada S cambia de "1" a "0" mientras
se cuenta el tiempo, el temporizador se detiene. En este caso, la salida Q adopta el estado
lógico "0".
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo. El valor de tiempo actual se emite codificado en binario por la salida
BI y codificado en BCD por la salida BCD.
Si el temporizador está contando y el estado lógico de la entrada R cambia de "0" a "1", el valor
actual de tiempo y la base de tiempo también se ponen a cero. En ese caso, el estado lógico
de la salida Q es "0". El temporizador se reinicia cuando el estado lógico de la entrada R es "1",
incluso si el temporizador no se ejecuta y el RLO en la entrada S es "1".
El temporizador de la instrucción se indica en el comodín situado sobre el cuadro. El
temporizador debe estar declarado con el tipo de datos TIMER.
La instrucción "Parametrizar y arrancar temporizador como retardo a la conexión" requiere una
operación lógica precedente para la evaluación de flancos y se puede colocar dentro o en el
extremo del segmento.

Programación del PLC
Manual de programación y manejo, 11/2019

689

Instrucciones
4.1 Instrucciones
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en "L: Cargar valor del
temporizador".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y arrancar
temporizador como retardo a la conexión":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador de la instruc‐
ción
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, D, L o
constante

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Valor de tiempo predetermi‐
nado

R

Input

BOOL

I, Q, M, D, L, T, C,
P o constante

Entrada de reset

BI

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en binario)

BCD

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L

Estado del temporizador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

690

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como retardo a la conexión":
W

W

W

5/2HQHQWUDGD6

5/2HQHQWUDGD5

(OWLHPSRFRUUH

&RQVXOWD

&RQVXOWD
W WLHPSRSURJUDPDGR

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7LPHUBಯ
ಯ7DJ,QBಯ
ಯ7DJ,QB1XPEHUಯ
ಯ7DJ,QBಯ

6B2'7

ಯ7DJ2XWಯ

6

4

79

%,

ಯ7DJ9DOXHBಯ

%&'

ಯ7DJ9DOXHBಯ

5



Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador cuenta el valor de tiempo del operando "TagIn_Number".
Una vez transcurrido el tiempo y si el operando tiene el estado lógico "1", el operando "TagOut"
se pone a "1". Si el estado lógico del operando "TagIn_1" cambia de "1" a "0" antes de que
transcurra el tiempo, el temporizador se detiene. El operando "TagOut" devuelve en ese caso
el estado lógico "0".

Programación del PLC
Manual de programación y manejo, 11/2019

691

Instrucciones
4.1 Instrucciones
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 1604)
Principios básicos de KOP (Página 7943)

S_ODTS: Parametrizar y arrancar temporizador como retardo a la conexión con memoria
Descripción
Con la instrucción "Parametrizar y arrancar temporizador como retardo a la conexión con
memoria" se arranca un temporizador programado al detectarse un cambio en el resultado
lógico (RLO) de "0" a "1" (flanco de señal ascendente) en la entrada S. El temporizador cuenta
el tiempo programado (TV), aunque el estado lógico de la entrada S cambie a "0". Una vez
transcurrido el tiempo, la salida Q devuelve el estado lógico "1" independientemente del estado
lógico de la entrada S. Si el estado lógico de la entrada S cambia de "0" a "1" mientras se
cuenta el tiempo, el temporizador vuelve a arrancar con el tiempo programado (TV).
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo. El valor de tiempo actual se emite codificado en binario por la salida
BI y codificado en BCD por la salida BCD.
El estado lógico "1" de la entrada R pone a "0" el valor actual de tiempo y la base de tiempo,
independientemente del estado lógico de la entrada de arranque S. En ese caso, el estado
lógico de la salida Q es "0".
La instrucción "Parametrizar y arrancar temporizador como retardo a la conexión con
memoria" requiere una operación lógica precedente para la evaluación de flancos y se puede
colocar dentro o en el extremo del segmento.
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en "L: Cargar valor del
temporizador".

692

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y arrancar
temporizador como retardo a la conexión con memoria":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador de la instruc‐
ción
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, D, L o
constante

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Valor de tiempo predetermi‐
nado

R

Input

BOOL

I, Q, M, D, L, T, C,
P o constante

Entrada de reset

BI

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en binario)

BCD

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L

Estado del temporizador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como retardo a la conexión con memoria":
W

W

W

5/2HQHQWUDGD6

5/2HQHQWUDGD5

(OWLHPSRFRUUH

&RQVXOWD
&RQVXOWD
W WLHPSRSURJUDPDGR

Programación del PLC
Manual de programación y manejo, 11/2019

693

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7LPHUBಯ
ಯ7DJ,QBಯ
ಯ7DJ,QB1XPEHUಯ
ಯ7DJ,QBಯ

6B2'76

ಯ7DJ2XWಯ

6

4

79

%,

ಯ7DJ9DOXHBಯ

%&'

ಯ7DJ9DOXHBಯ

5



Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador cuenta el valor de tiempo del operando "TagIn_Number"
aunque el estado lógico del operando "TagIn_1" cambie a "0". Una vez transcurrido el tiempo,
el operando "TagOut" se pone a "1". Si el estado lógico del operando "TagIn_1" cambia de "0"
a "1" mientras el temporizador está en marcha, se reinicia el temporizador.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 1604)
Principios básicos de KOP (Página 7943)

S_OFFDT: Parametrizar y arrancar temporizador como retardo a la desconexión
Descripción
Con la instrucción "Parametrizar y arrancar temporizador como retardo a la desconexión" se
arranca un temporizador programado al detectarse un cambio en el resultado lógico (RLO) de
"1" a "0" (flanco de señal descendente) en la entrada S. El temporizador empieza a contar con
el tiempo programado (TV). Mientras el temporizador está en marcha o la entrada S devuelve
el estado lógico "1", la salida Q tiene el estado lógico "1". Una vez transcurrido el tiempo y si
el estado lógico en la entrada S es "0", el estado lógico de la salida Q se pone a "0". Si el estado
lógico en la entrada S cambia de "0" a "1" mientras el temporizador está funcionando, este se
detiene. El temporizador no vuelve a arrancar hasta que no se detecta un flanco de señal
descendente en la entrada S.
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo. El valor de tiempo actual se emite codificado en binario por la salida
BI y codificado en BCD por la salida BCD.
El estado lógico "1" en la entrada R pone a "0" el valor de tiempo y la base de tiempo actuales.
En ese caso, el estado lógico de la salida Q es "0".

694

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La instrucción "Parametrizar y arrancar temporizador como retardo a la desconexión" requiere
una operación lógica precedente para la evaluación de flancos y se puede colocar dentro o en
el extremo del segmento.
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en "L: Cargar valor del
temporizador".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y arrancar
temporizador como retardo a la desconexión":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador de la instruc‐
ción
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, D, L o
constante

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Valor de tiempo predetermi‐
nado

R

Input

BOOL

I, Q, M, D, L, T, C,
P o constante

Entrada de reset

BI

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en binario)

BCD

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L

Estado del temporizador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

695

Instrucciones
4.1 Instrucciones

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como retardo a la desconexión":
W

W

W

W

5/2HQHQWUDGD6

5/2HQHQWUDGD5

(OWLHPSRFRUUH

&RQVXOWD

&RQVXOWD
W WLHPSRSURJUDPDGR

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7LPHUBಯ
ಯ7DJ,QBಯ
ಯ7DJ,QB1XPEHUಯ
ಯ7DJ,QBಯ

6B2))'7

ಯ7DJ2XWಯ

6

4

79

%,

ಯ7DJ9DOXHBಯ

%&'

ಯ7DJ9DOXHBಯ

5



Cuando el estado lógico del operando "TagIn_1" cambia de "1" a "0", el temporizador "Timer_1"
se pone en marcha. El temporizador cuenta el valor de tiempo del operando "TagIn_Number".
El operando "TagOut" devuelve el estado lógico "1" mientras el temporizador está en marcha
o el operando "TagIn_1" tiene el estado lógico "0". Si el estado lógico del operando "TagIn_1"
cambia de "0" a "1" mientras el temporizador está en marcha, el temporizador se reinicia.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

696

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 1604)
Principios básicos de KOP (Página 7943)

---( SP ): Arrancar temporizador como impulso
Descripción
Con la instrucción "Arrancar temporizador como impulso" se arranca un temporizador
programado al detectarse un cambio en el resultado lógico (RLO) de "0" a "1" (flanco de señal
ascendente). El temporizador cuenta el tiempo indicado mientras el RLO devuelva el estado
lógico "1". Mientras el temporizador está en marcha, una consulta de si el estado del
temporizador es "1" da como resultado "1". Si el RLO cambia de "1" a "0" antes de que haya
transcurrido el valor de tiempo, el temporizador se detiene. En ese caso, una consulta de si el
estado del temporizador es "1" da como resultado "0".
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo. Cuando
se inicia la instrucción, el valor de tiempo programado se cuenta hacia atrás hasta cero. La
base de tiempo indica con qué periodo de tiempo se modifica el valor de tiempo.
En el comodín de operando <Operando1> bajo la instrucción se introduce el tiempo que
contará el temporizador y en el <Operando2> encima de la instrucción se introduce el
temporizador que se iniciará.
La instrucción "Arrancar temporizador como impulso" requiere una operación lógica
precedente para la evaluación de flancos y solo se puede colocar en el margen derecho del
segmento.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en "L: Cargar valor del
temporizador".

Programación del PLC
Manual de programación y manejo, 11/2019

697

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
impulso":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo que cuenta el tempo‐
rizador.

<Operan‐
do2>

InOut/Input

TIMER

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR

6HJPHQWR

ಯ7DJ,QBಯ

ಯ7LPHUBಯ
63
ಯ7DJ,QB1XPEHUಯ

ಯ7LPHUBಯ

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

ಯ7LPHUBಯ
5

6HJPHQWR

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador empieza a contar con el valor de tiempo del operando
"TagIn_Number" y sigue contando mientras el operando "TagIn_1" devuelva el estado lógico
"1". Si el estado lógico del operando "TagIn_1" cambia de "1" a "0" antes de que transcurra el
tiempo, el temporizador se detiene. Mientras el temporizador está en marcha, el operando
"TagOut" devuelve el estado lógico "1". Si el estado lógico del operando "TagIn_2" cambia de
"0" a "1", el temporizador se inicializa, es decir, se detiene y el valor de tiempo actual se pone
a "0".
La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJ,QBಯ

'HVDFWLYDU

ಯ7DJ,QBಯ

7HPSRUL]DGRU

ಯ7LPHUBಯ

6DOLGD

ಯ7DJ2XWಯ

W

W WLHPSRSURJUDPDGR

698

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 1604)
Principios básicos de KOP (Página 7943)

---( SE ): Arrancar temporizador como impulso prolongado
Descripción
Con la instrucción "Arrancar temporizador como impulso prolongado" se arranca un
temporizador programado al detectarse un cambio en el resultado lógico (RLO) de "0" a "1"
(flanco de señal ascendente). El temporizador cuenta el tiempo indicado, aunque el RLO
cambie al estado lógico "0". Mientras el temporizador está en marcha, una consulta de si el
estado del temporizador es "1" da como resultado "1". Si el RLO cambia de "0" a "1" mientras
el temporizador está funcionando, este se arranca de nuevo con el tiempo programado. La
consulta sobre si el estado es "1" da como resultado "0" si el tiempo ha transcurrido.
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo. Cuando
se inicia la instrucción, el valor de tiempo programado se cuenta hacia atrás hasta cero. La
base de tiempo indica con qué periodo de tiempo se modifica el valor de tiempo.
En el comodín de operando <Operando1> bajo la instrucción se introduce el tiempo que
contará el temporizador y en el <Operando2> encima de la instrucción se introduce el
temporizador que se iniciará.
La instrucción "Arrancar temporizador como impulso prolongado" requiere una operación
lógica precedente para la evaluación de flancos y solo se puede colocar en el margen derecho
del segmento.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización aquí: L: Cargar valor del
temporizador (Página 1604)

Programación del PLC
Manual de programación y manejo, 11/2019

699

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
impulso prolongado":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo que cuenta el tempo‐
rizador.

<Operan‐
do2>

InOut/Input

TIMER

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR

6HJPHQWR

ಯ7DJ,QBಯ

ಯ7LPHUBಯ
6(
ಯ7DJ,QB1XPEHUಯ

ಯ7LPHUBಯ

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

ಯ7LPHUBಯ
5

6HJPHQWR

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador empieza a contar con el valor de tiempo del operando
"TagIn_Number" sin verse afectado por un flanco de señal descendente en el RLO. Mientras
el temporizador está en marcha, el operando "TagOut" devuelve el estado lógico "1". Si el
estado lógico del operando "TagIn_1" vuelve a cambiar de "0" a "1" antes de que transcurra el
tiempo, el temporizador se inicializa.
La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJ,QBಯ

'HVDFWLYDU

ಯ7DJ,QBಯ

7HPSRUL]DGRU

ಯ7LPHUBಯ

6DOLGD

ಯ7DJ2XWಯ

W

W WLHPSRSURJUDPDGR

Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

700

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

---( SD ): Arrancar temporizador como retardo a la conexión
Descripción
La instrucción "Arrancar temporizador como retardo a la conexión" arranca un temporizador
programado al detectarse el estado lógico "1" en la entrada de arranque. Mientras se
mantenga el estado lógico "1", el temporizador contará el tiempo indicado. Una vez
transcurrido el tiempo y si el estado lógico en la entrada de arranque sigue siendo "1", la
consulta del estado del temporizador también dará como resultado "1". Si la señal de la entrada
de arranque es "0", el temporizador se inicializa. En ese caso, la consulta del estado del
temporizador devuelve el estado lógico "0". En cuanto la señal en la entrada de arranque
vuelve a cambiar a "1", el temporizador vuelve a contar el tiempo.
El estado lógico de la salida del temporizador es idéntico al de la entrada de arranque. La
entrada de arranque está interconectada directamente con la salida y no tiene relación con el
temporizador.
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero.
En el comodín de operando <Operando1> bajo la instrucción se introduce el tiempo que
contará el temporizador y en el <Operando2> encima de la instrucción se introduce el
temporizador que se iniciará.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización aquí: L: Cargar valor del
temporizador (Página 1604)

Programación del PLC
Manual de programación y manejo, 11/2019

701

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
retardo a la conexión":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo que cuenta el tempo‐
rizador.

<Operan‐
do2>

InOut/Input

TIMER

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR

6HJPHQWR

ಯ7DJ,QBಯ

ಯ7LPHUBಯ
6'
ಯ7DJ,QB1XPEHUಯ

ಯ7LPHUBಯ

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

ಯ7LPHUBಯ
5

6HJPHQWR

Segmento 1:
Cuando el estado lógico del operando #TagIn_1 cambia de "0" a "1", el temporizador #Timer_1
arranca. El temporizador cuenta el valor de tiempo del operando #TagIn_Number. Si el estado
lógico del operando #TagIn_1 cambia de "1" a "0" antes de que transcurra el tiempo, el
temporizador se inicializa.
Segmento 2:
Si ha transcurrido el tiempo y el estado lógico del operando #TagIn_1 en la entrada de
arranque es "1" y el temporizador no se ha inicializado, el operando #TagOut es "1".
Segmento 3:
Si el estado lógico del operando #TagIn_2 es "1", se inicializan el temporizador #Timer_1 y la
salida #TagOut.
Si desea volver a arrancar el #Timer_1, el estado lógico en el operando #TagIn_2 debe ser "0"
y el estado lógico en la entrada de arranque #TagIn_1 debe cambiar de "0" a "1".
La figura siguiente muestra el cronograma del ejemplo:

702

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
$UUDQFDU

ಯ7DJ,QBಯ

'HVDFWLYDU

ಯ7DJ,QBಯ

7HPSRUL]DGRU

ಯ7LPHUBಯ

6DOLGD

ಯ7DJ2XWಯ

W

W

W WLHPSRSURJUDPDGR

Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

---( SS ): Arrancar temporizador como retardo a la conexión con memoria
Descripción
Con la instrucción "Arrancar temporizador como retardo a la conexión con memoria" se
arranca un temporizador programado al detectarse un cambio en el resultado lógico (RLO) de
"0" a "1" (flanco de señal ascendente). El temporizador cuenta el tiempo indicado, aunque el
RLO cambie al estado lógico "0". Si ha transcurrido el tiempo, una consulta de si el estado del
temporizador es "1" da como resultado "1". Una vez transcurrido el tiempo, el temporizador no
puede volver a ponerse en marcha hasta que no se haya reiniciado explícitamente.
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo. Cuando
se inicia la instrucción, el valor de tiempo programado se cuenta hacia atrás hasta cero. La
base de tiempo indica con qué periodo de tiempo se modifica el valor de tiempo.
En el comodín de operando <Operando1> bajo la instrucción se introduce el tiempo que
contará el temporizador y en el <Operando2> encima de la instrucción se introduce el
temporizador que se iniciará.

Programación del PLC
Manual de programación y manejo, 11/2019

703

Instrucciones
4.1 Instrucciones
La instrucción "Arrancar temporizador como retardo a la conexión con memoria" requiere una
operación lógica precedente para la evaluación de flancos y solo se puede colocar en el
margen derecho del segmento.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización aquí: L: Cargar valor del
temporizador (Página 1604)

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
retardo a la conexión con memoria":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo que cuenta el tempo‐
rizador.

<Operan‐
do2>

InOut/Input

TIMER

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR

6HJPHQWR

ಯ7DJ,QBಯ

ಯ7LPHUBಯ
66
ಯ7DJ,QB1XPEHUಯ

ಯ7LPHUBಯ

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

ಯ7LPHUBಯ
5

6HJPHQWR

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador cuenta el valor de tiempo del operando "TagIn_Number".
Una vez transcurrido el tiempo, el operando "TagOut" se pone a "1". Si el estado lógico del
operando "TagIn_1" cambia de "0" a "1" mientras el temporizador está en marcha, se reinicia
el temporizador. Si el estado lógico del operando "TagIn_2" es "1", el temporizador "Timer_1"
se reinicia, es decir, que se detiene y el valor de tiempo actual se pone a "0".

704

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJ,QBಯ

'HVDFWLYDU

ಯ7DJ,QBಯ

7HPSRUL]DGRU

ಯ7LPHUBಯ

6DOLGD

ಯ7DJ2XWಯ

W

W WLHPSRSURJUDPDGR

Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

---( SF ): Arrancar temporizador como retardo a la desconexión
Descripción
Con la instrucción "Arrancar temporizador como retardo a la desconexión" se arranca un
temporizador programado al detectarse un cambio en el resultado lógico (RLO) de "1" a "0"
(flanco de señal descendente). El temporizador empieza a contar con el tiempo indicado.
Mientras el temporizador está en marcha, una consulta de si el estado del temporizador es "1"
da como resultado "1". Si el RLO cambia de "0" a "1" mientras se ejecuta el temporizador, este
se inicializa. El temporizador siempre arranca de nuevo cuando el RLO cambia de "1" a "0".
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo. Cuando
se inicia la instrucción, el valor de tiempo programado se cuenta hacia atrás hasta cero. La
base de tiempo indica con qué periodo de tiempo se modifica el valor de tiempo.
Las consultas de si el estado del temporizador es "1" dan como resultado "1" si el estado del
resultado lógico al ejecutar la instrucción es "1". Si el RLO está a "0", las consultas de si el
estado del temporizador es "1" dan como resultado "0".
En el comodín de operando <Operando1> bajo la instrucción se introduce el tiempo que
contará el temporizador y en el <Operando2> encima de la instrucción se introduce el
temporizador que se iniciará.

Programación del PLC
Manual de programación y manejo, 11/2019

705

Instrucciones
4.1 Instrucciones
La instrucción "Arrancar temporizador como retardo a la desconexión" requiere una operación
lógica precedente para la evaluación de flancos y solo se puede colocar en el margen derecho
del segmento.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en "L: Cargar valor del
temporizador".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
retardo a la desconexión":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo que cuenta el tempo‐
rizador.

<Operan‐
do2>

InOut/Input

TIMER

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR

6HJPHQWR

ಯ7DJ,QBಯ

ಯ7LPHUBಯ
6)
ಯ7DJ,QB1XPEHUಯ

ಯ7LPHUBಯ

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

ಯ7LPHUBಯ
5

6HJPHQWR

Cuando el estado lógico del operando "TagIn_1" cambia de "1" a "0", el temporizador "Timer_1"
arranca. El temporizador cuenta el valor de tiempo del operando "TagIn_Number". Mientras el
temporizador está en marcha, el operando "TagOut" se pone a "1". Si el estado lógico del
operando "TagIn_1" cambia de "1" a "0" mientras el temporizador está en marcha, se reinicia
el temporizador. Si el estado lógico del operando "TagIn_2" es "1", el temporizador "Timer_1"
se reinicia, es decir, que se detiene y el valor de tiempo actual se pone a "0".

706

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJ,QBಯ

'HVDFWLYDU

ಯ7DJ,QBಯ

7HPSRUL]DGRU

ಯ7LPHUBಯ
W

6DOLGD

W

ಯ7DJ2XWಯ
W WLHPSRSURJUDPDGR

Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 1604)
Principios básicos de KOP (Página 7943)

Contadores
CTU: Contador ascendente
Descripción
La instrucción "Contador ascendente" incrementa el valor en la salida CV. Cuando el estado
lógico de la entrada CU cambia de "0" a "1" (flanco de señal ascendente), se ejecuta la
instrucción y el valor actual de contaje de la salida CV se incrementa en uno. El valor de contaje
se incrementa cada vez que se detecta un flanco de señal ascendente, hasta alcanzar el valor
límite superior del tipo de datos indicado en la salida CV. Cuando se alcanza el valor límite
superior, el estado lógico de la entrada CU deja de tener efecto en la instrucción.
El estado del contador se puede consultar en la salida Q. El estado lógico de la salida Q es
determinado por el parámetro PV. Si el valor de contaje actual es mayor o igual que el valor del
parámetro PV, la salida Q adopta el estado lógico "1". En todos los demás casos, el estado
lógico de la salida Q es "0".
El valor de la salida CV se pone a cero cuando el estado lógico de la entrada R cambia a "1".
Mientras la entrada R tenga el estado lógico "1", el estado lógico de la entrada CU no tendrá
efecto alguno en la instrucción.
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.

Programación del PLC
Manual de programación y manejo, 11/2019

707

Instrucciones
4.1 Instrucciones
A cada llamada de la instrucción "Contador ascendente" debe asignársele un contador CEI, en
el que se guarden los datos de la instrucción. Un contador CEI es una estructura con uno de
los tipos de datos siguientes:

Para CPU S7-1200
Bloque de datos del tipo de datos de sistema
IEC_<Contador> (Shared DB)

Variable local

● IEC_SCOUNTER / IEC_USCOUNTER

● CTU_SINT / CTU_USINT

● IEC_COUNTER / IEC_UCOUNTER

● CTU_INT / CTU_UINT

● IEC_DCOUNTER / IEC_UDCOUNTER

● CTU_DINT / CTU_UDINT
● IEC_SCOUNTER / IEC_USCOUNTER
● IEC_COUNTER / IEC_UCOUNTER
● IEC_DCOUNTER / IEC_UDCOUNTER

Para CPU S7-1500
Bloque de datos del tipo de datos de sistema
IEC_<Contador> (Shared DB)

Variable local

● IEC_SCOUNTER / IEC_USCOUNTER

● CTU_SINT / CTU_USINT

● IEC_COUNTER / IEC_UCOUNTER

● CTU_INT / CTU_UINT

● IEC_DCOUNTER / IEC_UDCOUNTER

● CTU_DINT / CTU_UDINT

● IEC_LCOUNTER / IEC_ULCOUNTER

● CTU_LINT / CTU_ULINT
● IEC_SCOUNTER / IEC_USCOUNTER
● IEC_COUNTER / IEC_UCOUNTER
● IEC_DCOUNTER / IEC_UDCOUNTER
● IEC_LCOUNTER / IEC_ULCOUNTER

Un contador CEI se puede declarar del modo siguiente:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_<Contador> (p. ej.
"MyIEC_COUNTER")
● Declaración como variable local del tipo CTU_<tipo de datos> o IEC_<contador> en la
sección "Static" de un bloque (p. ej., #MyIEC_COUNTER)
Si el contador CEI se crea en un bloque de datos propio (instancia individual), el bloque de
datos de instancia se crea de forma estándar con "acceso optimizado al bloque" y las distintas
variables se declaran remanentes. Encontrará más información sobre la configuración de la
remanencia en un bloque de datos de instancia en "Consulte también".
Si el contador CEI se crea como variable local (multiinstancia) en un bloque de función con
"acceso optimizado al bloque", esta se declara remanente en la interfaz del bloque.
Para poder ejecutar la instrucción "Contador ascendente" se requiere una operación lógica
precedente. Se puede colocar dentro o al final del segmento.

708

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contador ascendente":
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

S7-1500

Descripción

CU

Input

BOOL

I, Q, M, D, L o
constante

I, Q, M, D, L o
constante

Entrada de con‐
taje

R

Input

BOOL

I, Q, M, D, L, P
o constante

I, Q, M, D, L,
T, C, P o
constante

Entrada de reset

PV

Input

Enteros

I, Q, M, D, L, P
o constante

I, Q, M, D, L, Valor con el que
P o constante se activa la sali‐
da Q.

Q

Output

BOOL

I, Q, M, D, L

I, Q, M, D, L

CV

Output

Enteros, CHAR,
WCHAR, DATE

I, Q, M, D, L, P I, Q, M, D, L,
P

Estado del conta‐
dor
Valor de contaje
actual

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&78B'%ಯ
&78
ಯ7DJ,QBಯ
ಯ7DJ,QBಯ
ಯ7DJB39ಯ

,17
&8

4

5

&9

ಯ7DJ2XWಯ

ಯ7DJB&9ಯ

39

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", se ejecuta la instrucción
"Contador ascendente" y el valor de contaje actual del operando "Tag_CV" se incrementa en
uno. Con cada flanco de señal ascendente posterior, el valor de contaje irá incrementando
hasta alcanzar el valor límite superior del tipo de datos (INT = 32767).
El valor del parámetro PV se utiliza como límite para determinar la salida "TagOut". La salida
"TagOut" devuelve el estado lógico "1" mientras el valor de contaje actual sea mayor o igual
que el valor del operando "Tag_PV". En todos los demás casos, la salida "TagOut" devuelve
el estado lógico "0".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Remanencia de las variables locales (Página 7789)

Programación del PLC
Manual de programación y manejo, 11/2019

709

Instrucciones
4.1 Instrucciones
Ajustar la remanencia en un bloque de datos de instancia (Página 7855)
Principios básicos de KOP (Página 7943)

CTD: Contador descendente
Descripción
La instrucción "Contador descendente" decrementa el valor de la salida CV. Cuando el estado
lógico de la entrada CD cambia de "0" a "1" (flanco de señal ascendente), se ejecuta la
instrucción y el valor actual de contaje de la salida CV se decrementa en uno. Cada vez que
se detecta un flanco de señal ascendente, el valor de contaje se decrementa hasta alcanzar el
valor límite inferior del tipo de datos indicado. Cuando se alcanza el valor límite inferior, el
estado lógico de la entrada CD deja de tener efecto en la instrucción.
El estado del contador se puede consultar en la salida Q. Si el valor de contaje actual es menor
o igual a cero, la salida Q adopta el estado lógico "1". En todos los demás casos, el estado
lógico de la salida Q es "0".
El valor de la salida CV se pone al valor del parámetro PV cuando el estado lógico de la entrada
LD cambia a "1". Mientras la entrada LD tenga el estado lógico "1", el estado lógico de la
entrada CD no tendrá efecto alguno en la instrucción.
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
A cada llamada de la instrucción "Contador descendente" debe asignársele un contador CEI,
en el que se guarden los datos de la instrucción. Un contador CEI es una estructura con uno
de los tipos de datos siguientes:

Para CPU S7-1200
Bloque de datos del tipo de datos de sistema
IEC_<Contador> (Shared DB)

Variable local

● IEC_SCOUNTER / IEC_USCOUNTER

● CTD_SINT / CTD_USINT

● IEC_COUNTER / IEC_UCOUNTER

● CTD_INT / CTD_UINT

● IEC_DCOUNTER / IEC_UDCOUNTER

● CTD_DINT / CTD_UDINT
● IEC_SCOUNTER / IEC_USCOUNTER
● IEC_COUNTER / IEC_UCOUNTER
● IEC_DCOUNTER / IEC_UDCOUNTER

710

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Para CPU S7-1500
Bloque de datos del tipo de datos de sistema
IEC_<Contador> (Shared DB)

Variable local

● IEC_SCOUNTER / IEC_USCOUNTER

● CTD_SINT / CTD_USINT

● IEC_COUNTER / IEC_UCOUNTER

● CTD_INT / CTD_UINT

● IEC_DCOUNTER / IEC_UDCOUNTER

● CTD_DINT / CTD_UDINT

● IEC_LCOUNTER / IEC_ULCOUNTER

● CTD_LINT / CTD_ULINT
● IEC_SCOUNTER / IEC_USCOUNTER
● IEC_COUNTER / IEC_UCOUNTER
● IEC_DCOUNTER / IEC_UDCOUNTER
● IEC_LCOUNTER / IEC_ULCOUNTER

Un contador CEI se puede declarar del modo siguiente:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_<Contador> (p. ej.
"MyIEC_COUNTER")
● Declaración como variable local del tipo CTD_<Tipo de datos> o IEC_<Contador> en la
sección "Static" de un bloque (p. ej. #MyIEC_COUNTER)
Si el contador CEI se crea en un bloque de datos propio (instancia individual), el bloque de
datos de instancia se crea de forma estándar con "acceso optimizado al bloque" y las distintas
variables se declaran remanentes. Encontrará más información sobre la configuración de la
remanencia en un bloque de datos de instancia en "Consulte también".
Si el contador CEI se crea como variable local (multiinstancia) en un bloque de función con
"acceso optimizado al bloque", esta se declara remanente en la interfaz del bloque.
Para poder ejecutar la instrucción "Contador descendente" se requiere una operación lógica
precedente. Se puede colocar dentro o al final del segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contador descendente":
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

Descripción

S7-1500

CD

Input

BOOL

I, Q, M, D, L o I, Q, M, D, L
constante
o constante

Entrada de contaje

LD

Input

BOOL

I, Q, M, D, L, I, Q, M, D, L,
P o constante T, C, P o
constante

Entrada de carga

PV

Input

Enteros

I, Q, M, D, L, I, Q, M, D, L, Valor al que se po‐
P o constante P o constan‐ ne la salida CV
te
cuando LD = 1.

Q

Output

BOOL

I, Q, M, D, L

I, Q, M, D, L

Estado del contador

CV

Output

Enteros, CHAR,
WCHAR, DATE

I, Q, M, D, L,
P

I, Q, M, D, L,
P

Valor de contaje ac‐
tual

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.

Programación del PLC
Manual de programación y manejo, 11/2019

711

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&7'B'%ಯ
&7'
ಯ7DJ,QBಯ
ಯ7DJ,QBಯ
ಯ7DJB39ಯ

,17
&'

4

/'

&9

ಯ7DJ2XWಯ

ಯ7DJB&9ಯ

39

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", se ejecuta la instrucción
y el valor de la salida "Tag_CV" se decrementa en uno. Con cada flanco de señal ascendente
posterior, el valor de contaje irá decrementando hasta alcanzar el valor límite inferior del tipo
de datos indicado (INT = -32768).
La salida "TagOut" devuelve el estado lógico "1" mientras el valor de contaje actual sea menor
o igual a cero. En todos los demás casos, la salida "TagOut" devuelve el estado lógico "0".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ajustar la remanencia en un bloque de datos de instancia (Página 7855)
Remanencia de las variables locales (Página 7789)
Principios básicos de KOP (Página 7943)

CTUD: Contador ascendente - descendente
Descripción
La instrucción "Contador ascendente - descendente" incrementa y decrementa el valor de
contaje en la salida CV. Cuando el estado lógico de la entrada CU cambia de "0" a "1" (flanco
de señal ascendente), el valor de contaje actual se incrementa en uno y se deposita en la salida
CV. Cuando el estado lógico de la entrada CD cambia de "0" a "1" (flanco de señal
ascendente), el valor de contaje de la salida CV se decrementa en uno. Si en un ciclo del
programa se detecta un flanco de señal ascendente en las entradas CU y CD, el valor actual
de contaje no se modifica en la salida CV.
El valor de contaje se puede seguir incrementando hasta alcanzar el valor límite superior del
tipo de datos indicado en la salida CV. Una vez alcanzado el valor límite superior, el valor de
contaje no se incrementa más aunque se detecte un flanco de señal ascendente. Cuando se
alcanza el valor límite inferior del tipo de datos indicado, ya no se decrementa el valor de
contaje.

712

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Si el estado lógico de la entrada LD cambia a "1", el valor de contaje de la salida CV adopta el
valor del parámetro PV. Mientras la entrada LD tenga el estado lógico "1", el estado lógico de
las entradas CU y CD no tendrá efecto alguno en la instrucción.
El valor de contaje se pone a cero si el estado lógico de la entrada R cambia a "1". Mientras la
entrada R tenga el estado lógico "1", un cambio del estado lógico de las entradas CU, CD y LD
no tendrá efecto alguno en la instrucción "Contador ascendente - descendente".
El estado del contador ascendente se puede consultar en la salida QU. Si el valor de contaje
actual es mayor o igual al valor del parámetro PV, la salida QU adopta el estado lógico "1". En
todos los demás casos, el estado lógico de la salida QU es "0".
El estado del contador descendente se puede consultar en la salida QD. Si el valor de contaje
actual es menor o igual a cero, la salida QD adopta el estado lógico "1". En todos los demás
casos, el estado lógico de la salida QD es "0".
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
A cada llamada de la instrucción "Contador ascendente - descendente" debe asignársele un
contador CEI en el que se guarden los datos de la instrucción. Un contador CEI es una
estructura con uno de los tipos de datos siguientes:

Para CPU S7-1200
Bloque de datos del tipo de datos de sistema
IEC_<Contador> (Shared DB)

Variable local

● IEC_SCOUNTER / IEC_USCOUNTER

● CTUD_SINT / CTUD_USINT

● IEC_COUNTER / IEC_UCOUNTER

● CTUD_INT / CTUD_UINT

● IEC_DCOUNTER / IEC_UDCOUNTER

● CTUD_DINT / CTUD_UDINT
● IEC_SCOUNTER / IEC_USCOUNTER
● IEC_COUNTER / IEC_UCOUNTER
● IEC_DCOUNTER / IEC_UDCOUNTER

Para CPU S7-1500
Bloque de datos del tipo de datos de sistema
IEC_<Contador> (Shared DB)

Variable local

● IEC_SCOUNTER / IEC_USCOUNTER

● CTUD_SINT / CTUD_USINT

● IEC_COUNTER / IEC_UCOUNTER

● CTUD_INT / CTUD_UINT

● IEC_DCOUNTER / IEC_UDCOUNTER

● CTUD_DINT / CTUD_UDINT

● IEC_LCOUNTER / IEC_ULCOUNTER

● CTUD_LINT / CTUD_ULINT
● IEC_SCOUNTER / IEC_USCOUNTER
● IEC_COUNTER / IEC_UCOUNTER
● IEC_DCOUNTER / IEC_UDCOUNTER
● IEC_LCOUNTER / IEC_ULCOUNTER

Programación del PLC
Manual de programación y manejo, 11/2019

713

Instrucciones
4.1 Instrucciones
Un contador CEI se puede declarar del modo siguiente:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_<Contador> (p. ej.
"MyIEC_COUNTER")
● Declaración como variable local del tipo CTUD_<tipo de datos> o IEC_<contador> en la
sección "Static" de un bloque (p. ej., #MyIEC_COUNTER)
Si el contador CEI se crea en un bloque de datos propio (instancia individual), el bloque de
datos de instancia se crea de forma estándar con "acceso optimizado al bloque" y las distintas
variables se declaran remanentes. Encontrará más información sobre la configuración de la
remanencia en un bloque de datos de instancia en "Consulte también".
Si el contador CEI se crea como variable local (multiinstancia) en un bloque de función con
"acceso optimizado al bloque", esta se declara remanente en la interfaz del bloque.
Para poder ejecutar la instrucción "Contador ascendente - descendente" se requiere una
operación lógica precedente. Se puede colocar dentro o al final del segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contador ascendente descendente":
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

Descripción

S7-1500

CU

Input

BOOL

I, Q, M, D, L o I, Q, M, D, L
constante
o constante

Entrada de contaje
ascendente

CD

Input

BOOL

I, Q, M, D, L o I, Q, M, D, L
constante
o constante

Entrada de contaje
descendente

R

Input

BOOL

I, Q, M, D, L,
P o constan‐
te

I, Q, M, D, L,
T, C, P o
constante

Entrada de reset

LD

Input

BOOL

I, Q, M, D, L,
P o constan‐
te

I, Q, M, D, L,
T, C, P o
constante

Entrada de carga

PV

Input

Enteros

I, Q, M, D, L,
P o constan‐
te

I, Q, M, D, L,
P o constan‐
te

Valor con el que se
activa la salida
QU. / Valor al que
se pone la salida
CV cuando LD = 1.

QU

Output

BOOL

I, Q, M, D, L

I, Q, M, D, L

Estado del conta‐
dor ascendente

QD

Output

BOOL

I, Q, M, D, L

I, Q, M, D, L

Estado del conta‐
dor descendente

CV

Output

Enteros, CHAR,
WCHAR, DATE

I, Q, M, D, L,
P

I, Q, M, D, L,
P

Valor de contaje ac‐
tual

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.

714

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&78'B'%ಯ
&78'
,17

ಯ7DJ,QBಯ

ಯ7DJ2XWಯ

&8

48

&'

4'

ಯ7DJ2XWB4'ಯ

5

&9

ಯ7DJB&9ಯ

ಯ7DJ,QBಯ
ಯ7DJ,QBಯ
ಯ7DJ,QBಯ
/'
ಯ7DJB39ಯ

39

Si el estado lógico de la entrada "TagIn_1" o "TagIn_2" cambia de "0" a "1" (flanco de señal
ascendente), se ejecuta la instrucción "Contador ascendente - descendente". Cuando se
detecta un flanco de señal ascendente en la entrada "TagIn_1", el valor de contaje actual se
incrementa en uno y se deposita en la salida "Tag_CV". Si se detecta un flanco de señal
ascendente en la entrada "TagIn_2", el valor de contaje se decrementa en uno y se deposita
en la salida "Tag_CV". Si se detecta un flanco de señal ascendente en la entrada CU, el valor
de contaje se sigue incrementando hasta alcanzar el valor límite superior (32767). Cuando se
detecta un flanco de señal ascendente en la entrada CD, el valor de contaje se decrementa
hasta alcanzar el valor límite inferior INT = -32768.
La salida "TagOut" devuelve el estado lógico "1" mientras el valor de contaje actual sea mayor
o igual que el valor de la entrada "Tag_PV". En todos los demás casos, la salida "TagOut"
devuelve el estado lógico "0".
La salida "TagOut_QD" devuelve el estado lógico "1" mientras el valor de contaje actual sea
menor o igual a cero. En todos los demás casos, la salida "TagOut_QD" devuelve el estado
lógico "0".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ajustar la remanencia en un bloque de datos de instancia (Página 7855)
Remanencia de las variables locales (Página 7789)
Ejemplo de detección del nivel de llenado de una zona de almacén (Página 7996)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

715

Instrucciones
4.1 Instrucciones

Legacy
S_CU: Parametrizar e incrementar contador
Descripción
La instrucción "Parametrizar e incrementar contador" permite incrementar el valor de un
contador. Cuando el estado lógico de la entrada CU cambia de "0" a "1" (flanco de señal
ascendente), el valor de contaje actual se incrementa en uno. El valor de contaje actual se
emite en formato hexadecimal en la salida CV y codificado en BCD en la salida CV_BCD. El
valor de contaje sigue incrementando hasta alcanzar el límite de "999". Una vez alcanzado el
valor límite, el valor de contaje no se incrementa al detectarse un flanco de señal ascendente.
Cuando el estado lógico de la entrada S cambia de "0" a "1", el valor de contaje adopta el valor
del parámetro PV. Si el contador se activa y el RLO de la entrada CU es "1", el contador cuenta
una única vez en el ciclo siguiente aunque no se detecte ningún cambio de flanco.
El valor de contaje se pone a cero si el estado lógico de la entrada R cambia a "1". Mientras la
entrada R tenga el estado lógico "1", el estado lógico de las entradas CU y S no tendrá ningún
efecto sobre el valor de contaje.
El estado lógico en la salida Q es "1" si el valor de contaje es superior a cero. Si el valor de
contaje es igual a cero, la salida Q devuelve el estado lógico "0".
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
La instrucción "Parametrizar e incrementar contador" requiere una operación lógica
precedente para la evaluación de flancos y se puede colocar dentro o en el extremo del
segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar e incrementar
contador":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Contador>

InOut/Input

COUNTER

C

Contador de la instrucción
El número de contadores de‐
pende de la CPU.

716

CU

Input

BOOL

I, Q, M, D, L o
constante

Entrada de contaje ascen‐
dente

S

Input

BOOL

I, Q, M, D, L, T, C o
constante

Entrada para preajustar el
contador

PV

Input

WORD

I, Q, M, D, L o
constante

Valor de contaje predetermi‐
nado (C#0 a C#999)

R

Input

BOOL

I, Q, M, D, L, T, C o
constante

Entrada de reset

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CV

Output

WORD, S5TIME,
DATE

I, Q, M, D, L

Valor de contaje actual (he‐
xadecimal)

CV_BCD

Output

WORD, S5TIME,
DATE

I, Q, M, D, L

Valor de contaje actual (for‐
mato BCD)

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&RXQWHUBಯ
6B&8

ಯ7DJ,QBಯ
&8

ಯ7DJ2XWಯ
4

ಯ7DJ,QBಯ
6
ಯ7DJ3UHVHW9DOXHಯ
ಯ7DJ,QBಯ

39
5

&9

ಯ7DJ9DOXHBಯ

&9B%&'

ಯ7DJ9DOXHBಯ

Cuando el estado lógico de la entrada "TagIn_1" cambia de "0" a "1" (flanco de señal
ascendente) y el valor de contaje actual es menor que "999", este valor se incrementará en
uno. Si el estado lógico de la entrada "TagIn_2" cambia de "0" a "1", el valor de contaje adopta
el valor del operando "TagPresetValue". El valor de contaje se pone a "0" si el operando
"TagIn_3" tiene el estado lógico "1".
El valor de contaje actual se memoriza en formato hexadecimal en el operando "TagValue_1"
y codificado en BCD en el operando "TagValue_2".
La salida "TagOut" devuelve el estado lógico "1" mientras el valor de contaje actual sea
diferente a "0".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

717

Instrucciones
4.1 Instrucciones

S_CD: Parametrizar y decrementar contador
Descripción
La instrucción "Parametrizar y decrementar contador" permite decrementar el valor de un
contador. Cuando el estado lógico de la entrada CD cambia de "0" a "1" (flanco de señal
ascendente), el valor de contaje actual se decrementa en uno. El valor de contaje actual se
emite en formato hexadecimal en la salida CV y codificado en BCD en la salida CV_BCD. El
valor de contaje sigue decrementando hasta alcanzar el límite inferior "0". Una vez alcanzado
el valor límite inferior, el valor de contaje no se decrementa al detectarse un flanco de señal
ascendente.
Cuando el estado lógico de la entrada S cambia de "0" a "1", el valor de contaje adopta el valor
del parámetro PV. Si el contador se activa y el RLO de la entrada CD es "1", el contador cuenta
una única vez en el ciclo siguiente aunque no se detecte ningún cambio de flanco.
El valor de contaje se pone a cero si el estado lógico de la entrada R cambia a "1". Mientras la
entrada R tenga el estado lógico "1", el estado lógico de las entradas CD y S no tiene ningún
efecto sobre el valor de contaje.
El estado lógico en la salida Q es "1" si el valor de contaje es superior a cero. Si el valor de
contaje es igual a cero, la salida Q devuelve el estado lógico "0".
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
La instrucción "Parametrizar y decrementar contador" requiere una operación lógica
precedente para la evaluación de flancos y se puede colocar dentro o en el extremo del
segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y decrementar
contador":

718

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Contado‐
res>

InOut/Input

COUNTER

C

Contador de la instrucción

CD

Input

BOOL

I, Q, M, D, L o
constante

Entrada de contaje descen‐
dente

S

Input

BOOL

I, Q, M, D, L, T, C o
constante

Entrada para preajustar el
contador

PV

Input

WORD

I, Q, M, D, L o
constante

Valor de contaje predetermi‐
nado (C#0 a C#999)

R

Input

BOOL

I, Q, M, D, L, T, C o
constante

Entrada de reset

CV

Output

WORD, S5TIME,
DATE

I, Q, M, D, L

Valor de contaje actual (he‐
xadecimal)

El número de contadores de‐
pende de la CPU.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CV_BCD

Output

WORD, S5TIME,
DATE

I, Q, M, D, L

Valor de contaje actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&RXQWHUBಯ
6B&'

ಯ7DJ,QBಯ
&'

ಯ7DJ2XWಯ
4

ಯ7DJ,QBಯ
6
ಯ7DJ3UHVHW9DOXHಯ
ಯ7DJ,QBಯ

39
5

&9

ಯ7DJ9DOXHBಯ

&9B%&'

ಯ7DJ9DOXHBಯ

Cuando el estado lógico de la entrada "TagIn_1" cambia de "0" a "1" (flanco de señal
ascendente) y el valor de contaje actual es mayor que "0", este valor se decrementará en uno.
Si el estado lógico de la entrada "TagIn_2" cambia de "0" a "1", el valor de contaje adopta el
valor del operando "TagPresetValue". El valor de contaje se pone a "0" si el operando
"TagIn_3" tiene el estado lógico "1".
El valor de contaje actual se memoriza en formato hexadecimal en el operando "TagValue_1"
y codificado en BCD en el operando "TagValue_2".
La salida "TagOut" devuelve el estado lógico "1" mientras el valor de contaje actual sea
diferente a "0".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

719

Instrucciones
4.1 Instrucciones

S_CUD: Parametrizar e incrementar/decrementar contador
Descripción
La instrucción "Parametrizar e incrementar/decrementar contador" permite incrementar y
decrementar el valor de un contador. Cuando el estado lógico de la entrada CU cambia de "0"
a "1" (flanco de señal ascendente), el valor de contaje actual se incrementa en uno. Cuando el
estado lógico de la entrada CD cambia de "0" a "1" (flanco de señal ascendente), el valor de
contaje se decrementa en uno. El valor de contaje actual se emite en formato hexadecimal en
la salida CV y codificado en BCD en la salida CV_BCD. Si en un ciclo del programa se detecta
un flanco de señal ascendente en las entradas CU y CD, el valor de contaje no se modifica.
El valor de contaje sigue incrementando hasta alcanzar el límite superior "999". Una vez
alcanzado el valor límite superior, el valor de contaje no se incrementa al detectarse un flanco
de señal ascendente. Cuando se alcanza el valor límite inferior "0", no se decrementa más el
valor de contaje.
Cuando el estado lógico de la entrada S cambia de "0" a "1", el valor de contaje adopta el valor
del parámetro PV. Si se inicializa el contador y el RLO en las entradas CU y CD es "1", el
contador solo cuenta una vez en el próximo ciclo aunque no se detecte ningún cambio de
flanco.
El valor de contaje se pone a cero si el estado lógico de la entrada R cambia a "1". Mientras la
entrada R tenga el estado lógico "1", el estado lógico de las entradas CU, CD y S no tendrá
ningún efecto sobre el valor de contaje.
El estado lógico en la salida Q es "1" si el valor de contaje es superior a cero. Si el valor de
contaje es igual a cero, la salida Q devuelve el estado lógico "0".
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
La instrucción "Parametrizar e incrementar/decrementar contador" requiere una operación
lógica precedente para la evaluación de flancos y se puede colocar dentro o en el extremo del
segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar e incrementar/
decrementar contador":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Contador>

InOut/Input

COUNTER

C

Contador de la instrucción
El número de contadores de‐
pende de la CPU.

720

CU

Input

BOOL

I, Q, M, D, L o
constante

Entrada de contaje ascen‐
dente

CD

Input

BOOL

I, Q, M, D, L, T, C o
constante

Entrada de contaje descen‐
dente

S

Input

BOOL

I, Q, M, D, L, T, C o
constante

Entrada para preajustar el
contador

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

PV

Input

WORD

I, Q, M, D, L o
constante

Valor de contaje predetermi‐
nado (C#0 a C#999)

R

Input

BOOL

I, Q, M, D, L, T, C o
constante

Entrada de reset

CV

Output

WORD, S5TIME,
DATE

I, Q, M, D, L

Valor de contaje actual (he‐
xadecimal)

CV_BCD

Output

WORD, S5TIME,
DATE

I, Q, M, D, L

Valor de contaje actual (for‐
mato BCD)

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&RXQWHUBಯ
6B&8'

ಯ7DJ,QBಯ
&8
ಯ7DJ,QBಯ
ಯ7DJ,QBಯ
ಯ7DJ3UHVHW9DOXHಯ

ಯ7DJ2XWಯ
4

&'
6
39

&9

ಯ7DJ9DOXHBಯ

&9B%&'

ಯ7DJ9DOXHBಯ

ಯ7DJ,QBಯ
5

Si el estado lógico de la entrada "TagIn_1" o "TagIn_2" cambia de "0" a "1" (flanco de señal
ascendente), se ejecuta la instrucción "Parametrizar e incrementar/decrementar contador".
Cuando se detecta un flanco de señal ascendente en la entrada "TagIn_1" y el valor de contaje
actual es menor que "999", este valor se incrementará en uno. Cuando se detecta un flanco de
señal ascendente en la entrada "TagIn_2" y el valor de contaje actual es mayor que "0", este
valor se decrementará en uno.
Si el estado lógico de la entrada "TagIn_3" cambia de "0" a "1", el valor de contaje adopta el
valor del operando "TagPresetValue". El valor de contaje se pone a "0" si el operando
"TagIn_4" tiene el estado lógico "1".
El valor de contaje actual se memoriza en formato hexadecimal en el operando "TagValue_1"
y codificado en BCD en el operando "TagValue_2".
La salida "TagOut" devuelve el estado lógico "1" mientras el valor de contaje actual sea
diferente a "0".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Programación del PLC
Manual de programación y manejo, 11/2019

721

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

---( SC ): Poner contador al valor inicial
Descripción
Con la instrucción "Poner contador al valor inicial" se ajusta el valor de un contador. La
instrucción se ejecuta cuando el resultado lógico (RLO) de la entrada de la instrucción cambia
de "0" a "1". Si se ejecuta la instrucción, el contador se pone al valor de contaje indicado.
En el comodín de operando <Operando1> bajo la instrucción se indica el valor de preselección
del contador y en <Operando2> encima de la instrucción se indica el contador.
La instrucción "Poner contador al valor inicial" requiere una operación lógica precedente para
la evaluación de flancos y se puede colocar solo en el extremo derecho del segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Poner contador al valor inicial":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

WORD

I, Q, M, D, L o
constante

Valor con el que se preajusta
el contador codificado en
BCD.
(C#0 a C#999)

<Operan‐
do2>

InOut/Input

COUNTER

C

Contador que se preajusta.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,Qಯ

ಯ&RXQWHUBಯ
6&
&

Cuando el estado lógico del operando "TagIn" cambia de "0" a "1", el contador "Counter_1" se
pone a "100".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

722

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

---( CU ): Contador ascendente
Descripción
Con la instrucción "Contador ascendente" se puede aumentar en uno el valor del contador
cuando hay un flanco ascendente en el resultado lógico (RLO). El valor de contaje puede
seguir incrementándose hasta alcanzar el límite de "999". Una vez alcanzado el valor límite, el
valor de contaje no se incrementa al detectarse un flanco de señal ascendente.
La instrucción "Contador ascendente" requiere una operación lógica precedente para la
evaluación de flancos y se puede colocar solo en el extremo derecho del segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contador ascendente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Contado‐
res>

InOut/Input

COUNTER

C

Contador cuyo valor se au‐
menta.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR

ಯ7DJ,QBಯ

ಯ&RXQWHUBಯ
6&
&

6HJPHQWR

ಯ7DJ,QBಯ

ಯ&RXQWHUBಯ
&8

6HJPHQWR

ಯ7DJ,QBಯ

ಯ&RXQWHUBಯ
5

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1" (señal de flanco
ascendente), el contador "Counter_1" se ajusta en el valor "100".
El valor del contador "Counter_1" se incrementa en uno si el estado lógico del operando
"TagIn_2" cambia de "0" a "1".
Si el estado lógico del operando "TagIn_3" es "1", se pone a "0" el valor del contador
"Counter_1".

Programación del PLC
Manual de programación y manejo, 11/2019

723

Instrucciones
4.1 Instrucciones
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

---( CD ): Contador descendente
Descripción
Con la instrucción "Contador descendente" se reduce en uno el valor del contador cuando hay
un flanco ascendente en el resultado lógico (RLO). El valor de contaje puede seguir
decrementándose hasta alcanzar el límite "0". Una vez alcanzado el valor límite, el valor de
contaje no se modifica al detectarse un flanco de señal ascendente.
La instrucción "Contador descendente" requiere una operación lógica precedente para la
evaluación de flancos y se puede colocar solo en el extremo derecho del segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contador descendente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Contado‐
res>

InOut/Input

COUNTER

C

Contador cuyo valor se de‐
crementa.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR

ಯ7DJ,QBಯ

ಯ&RXQWHUBಯ
6&
&

6HJPHQWR

ಯ7DJ,QBಯ

ಯ&RXQWHUBಯ
&'

6HJPHQWR

ಯ7DJ,QBಯ

ಯ&RXQWHUBಯ
5

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1" (señal de flanco
ascendente), el contador "Counter_1" se ajusta en el valor "100".

724

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
El valor del contador "Counter_1" se decrementa en uno si el estado lógico del operando
"TagIn_2" cambia de "0" a "1".
Si el estado lógico del operando "TagIn_3" es "1", se pone a "0" el valor del contador
"Counter_1".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

Comparación
CMP ==: Igual
Descripción
La instrucción "Igual" permite consultar si son iguales el primer (<Operando1>) y segundo
(<Operando2>) valor de comparación.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0". El RLO
de la instrucción se combina lógicamente con el RLO del circuito entero como se indica a
continuación:
● Con una Y lógica si la instrucción de comparación está conectada en serie.
● Con una O lógica si la instrucción de comparación está conectada en paralelo.
El primer valor de comparación (<Operando1>) se indica en el comodín de operandos situado
encima de la instrucción. El segundo valor de comparación (<Operando2>) se indica en el
comodín de operandos situado debajo de la instrucción.
Si está activada la verificación CEI, los operandos que comparar deben ser del mismo tipo de
datos. Si no está activada la verificación CEI, el ancho de los operandos debe ser igual.

Comparación de números en coma flotante
Si desea comparar tipos de datos REAL o LREAL, utilice en lugar de la instrucción "CMP ==:
Igual" la instrucción "IN_RANGE: Valor dentro del rango".
Si se comparan números en coma flotante, los operandos que comparar deben ser del mismo
tipo de datos, independientemente del ajuste de la verificación CEI.
Los patrones de bits especiales de números en coma flotante no válidos (NaN) que se generan
en caso de resultados indefinidos (p. ej. raíz de -1) no pueden compararse. Es decir, si uno de
los dos operandos tiene el valor NaN, la instrucción "CMP ==: Igual" da como resultado FALSE.

Programación del PLC
Manual de programación y manejo, 11/2019

725

Instrucciones
4.1 Instrucciones

Comparación de cadenas de caracteres
En una comparación de cadenas de caracteres, los distintos caracteres se comparan según su
codificación (p. ej. 'a' es mayor que 'A'). La comparación se realiza de izquierda a derecha. El
primer carácter diferente es el decisivo para el resultado de la comparación.
La tabla siguiente muestra ejemplos de comparación de cadenas de caracteres:
<Operando1>

<Operando2>

RLO de la instrucción

'AA'

'AA'

1

'Hello World'

'HelloWorld'

0

'AA'

'aa'

0

'aa'

'aaa'

0

También es posible comparar caracteres individuales de una cadena de caracteres. El número
del carácter que se va a comparar se indica entre corchetes al lado del nombre del operando.
Si se indica "MyString[2]", se compara p. ej. el segundo carácter de la cadena de caracteres
"MyString".
Nota
El estado se sigue mostrando a pesar de que la instrucción está "inactiva"
En las condiciones citadas a continuación se aplica lo siguiente:
● Antes de la instrucción "CMP ==: Igual" (con tipo de datos STRING, WSTRING o VARIANT)
se consulta una condición (p. ej. un contacto normalmente abierto) en el segmento.
● "Activar observación" está activado.
● Un nuevo resultado de la condición vuelve a poner el segmento a FALSE. De este modo,
la instrucción "CMP ==: Igual" está inactiva.
Resultado:
Para la instrucción "CMP ==: Igual" (tipo de datos STRING, WSTRING o VARIANT) se sigue
mostrando el estado anterior en el segmento.
Si se desactiva y vuelve a activar la "observación" o se desplaza a otro segmento, se mostrará
de nuevo el estado correcto de la instrucción "CMP ==: Igual" (tipo de datos STRING,
WSTRING o VARIANT). La instrucción "CMP ==: Igual" se muestra atenuada en el segmento
cuando está inactiva.

Comparación de tiempos, fecha y hora
Los patrones de bits de temporizadores, fechas y horas no válidos, p. ej.
DT#2015-13-33-25:62:99.999_999_999, no pueden compararse. Es decir, si uno de los dos
operandos tiene un valor no válido, la instrucción "CMP ==: Igual" da como resultado FALSE.
No es posible comparar directamente todos los tiempos entre sí, como p. ej. S5TIME. En este
caso se convierten implícitamente a otro tiempo para poder compararlos, p. ej. a TIME.
Para comparar fechas y horas de diferentes tipos de datos entre sí, el valor del tipo de datos
de fecha u hora más pequeño se convierte implícitamente al mayor. De ese modo se
comparan, por ejemplo, ambos tipos de datos de fecha y hora DATE y DTL sobre la base de
DTL.

726

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Si se produce un error en las conversiones implícitas, la comparación da como resultado
FALSE.

Comparación de variables del tipo de datos WORD con variables del tipo de datos S5TIME
Cuando se compara una variable del tipo de datos WORD con una variable del tipo de datos
S5TIME, ambas variables se convierten al tipo de datos TIME. La variable WORD se interpreta
como un valor S5TIME. En caso de que no fuera posible convertir una de las dos variables, la
comparación no se realizará y el resultado será FALSE. Si la conversión es correcta, la
comparación se realizará en función de la instrucción de comparación seleccionada.

Comparación de tipos de datos de hardware
Para poder comparar operandos del tipo de datos PORT, deberá seleccionar el tipo de datos
WORD en la lista desplegable del cuadro de la instrucción.
Si desea comparar los dos tipos de datos de hardware HW_IO y HW_DEVICE, primero deberá
crear una variable del tipo de datos HW_ANY en la sección "Temp" de la interfaz del bloque y
después copiar el LADDR (del tipo de datos HW_DEVICE) a la variable. A continuación se
pueden comparar HW_ANY y HW_IO.

Comparación de estructuras
Nota
Disponibilidad de la comparación de estructuras
La posibilidad de comparar estructuras está disponible en las CPU de la serie S7-1200 a partir
de la versión de firmware >= 4.2 y en las CPU de la serie S7-1500 a partir de la versión de
firmware >= 2.0.
Es posible comparar entre sí los valores de dos operandos estructurados cuando las dos
variables tienen el mismo tipo de datos de estructura. Si se comparan estructuras, los
operandos que comparar deben ser del mismo tipo de datos, independientemente del ajuste
de la verificación CEI. Esto no es aplicable a comparaciones en las que uno de los dos
operandos es un VARIANT o un ANY. Si el tipo de datos se desconoce en el momento de crear
el programa, puede emplearse VARIANT. En este caso, será posible también comparar el
operando con una variable estructurada de cualquier tipo de datos. También pueden
compararse entre sí dos variables del tipo de datos VARIANT o ANY.
Para comparar estructuras, seleccione el tipo de datos VARIANT en la lista desplegable del
cuadro de la instrucción. Son posibles variables de los siguientes tipos de datos:
● Tipo de datos PLC (UDT)
● STRUCT (la estructura del tipo de datos STRUCT debe estar contenida en un tipo de datos
PLC o las dos estructuras que van a compararse son dos elementos de un ARRAY of
STRUCT. No se permiten bloque de datos de instancia ni variables de estructuras
anónimas.)
● Bloques de datos que derivan de un tipo de datos PLC.

Programación del PLC
Manual de programación y manejo, 11/2019

727

Instrucciones
4.1 Instrucciones
● Variable a la que apunta ANY.
● Variable a la que apunta VARIANT.
Para poder comparar entre sí dos variables del tipo de datos ARRAY cuando se selecciona
VARIANT, deben cumplirse los siguientes requisitos:
● Los elementos deben tener el mismo tipo de datos en cada caso.
● Los dos ARRAY deben tener la misma dimensión.
● Todas las dimensiones deben tener el mismo número de elementos. Los límites concretos
de ARRAY no tienen que coincidir necesariamente.
Nota
ARRAY of BOOL
Si se comparan entre sí dos operandos del tipo de datos ARRAY of BOOL, se ha seleccionado
el tipo de datos VARIANT en la lista desplegable y el número de elementos no es divisible entre
8, se comparan también los bits de relleno. Esto puede influir en el resultado de la comparación.
Si un elemento de las estructuras que desea comparar es un STRING/WSTRING no válido,
una indicación no válida de hora o fecha o bien un número en coma flotante no válido, el
resultado de la comparación devuelve el estado lógico "0" en RLO (resultado lógico).
La tabla siguiente muestra un ejemplo de comparación de estructuras:
<Operando1>
Variable del tipo de da‐
tos A <Tipo de datos
PLC>

<Operando2>
Valor de la va‐
riable

Variable del tipo de
datos A <Tipo de da‐
tos PLC>

Valor de la varia‐
ble

BOOL

FALSE

BOOL

FALSE

INT

2

INT

2

<Operando1>
Variable del tipo de da‐
tos A <Tipo de datos
PLC>

<Operando2>
Valor de la va‐
riable

Variable del tipo de
datos B <Tipo de da‐
tos PLC>

Valor de la varia‐
ble

FALSE

BOOL

TRUE

INT

2

INT

3

Variable del tipo de da‐
tos A <Tipo de datos
PLC>

Valor de la va‐
riable

1

RLO de la ins‐
trucción

BOOL

<Operando1>

728

RLO de la ins‐
trucción

0

<Operando2>

RLO de la ins‐
trucción

VARIANT (recibe da‐ Valor de la varia‐
tos de la variable del ble
tipo de datos A)

1

BOOL

FALSE

BOOL

FALSE

INT

2

INT

2

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Igual":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

I, Q, M, D, L, P o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante, secuencias
de caracteres,
temporizadores,
fecha y hora,
ARRAY of <tipo de
datos> con límites
de ARRAY fijos y
variables,
STRUCT, VA‐
RIANT, ANY, tipo
de datos PLC

Primer valor de comparación

<Operan‐
do2>

Input

I, Q, M, D, L, P o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante, secuencias
de caracteres,
temporizadores,
fecha y hora,
ARRAY of <tipo de
datos> con límites
de ARRAY fijos y
variables,
STRUCT, VA‐
RIANT, ANY, tipo
de datos PLC

Segundo valor de compara‐
ción

Como se ha descrito anteriormente, los tipos de datos ARRAY, STRUCT (dentro de un tipo de datos
PLC), VARIANT, ANY y el tipo de datos PLC (UDT) están disponibles a partir de las versiones de
firmware 2.0 y 4.2, respectivamente.

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJB9DOXHಯ
,17

ಯ7DJ2XWಯ
6

ಯ7DJB9DOXHಯ

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● Se cumple la condición de la instrucción de comparación cuando "Tag_Value1" =
"Tag_Value2".

Programación del PLC
Manual de programación y manejo, 11/2019

729

Instrucciones
4.1 Instrucciones
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

CMP <>: Diferente
Descripción
La instrucción "Diferente" permite consultar si son diferentes el primer (<Operando1>) y
segundo (<Operando2>) valor de comparación.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0". El RLO
de la instrucción se combina lógicamente con el RLO del circuito entero como se indica a
continuación:
● Con una Y lógica si la instrucción de comparación está conectada en serie.
● Con una O lógica si la instrucción de comparación está conectada en paralelo.
El primer valor de comparación (<Operando1>) se indica en el comodín de operandos situado
encima de la instrucción. El segundo valor de comparación (<Operando2>) se indica en el
comodín de operandos situado debajo de la instrucción.
Si está activada la verificación CEI, los operandos que comparar deben ser del mismo tipo de
datos. Si no está activada la verificación CEI, el ancho de los operandos debe ser igual.

Comparación de números en coma flotante
Si desea comparar tipos de datos REAL o LREAL, utilice en lugar de la instrucción "CMP <>:
Diferente" la instrucción "OUT_RANGE: Valor fuera del rango".
Si se comparan números en coma flotante, los operandos que comparar deben ser del mismo
tipo de datos, independientemente del ajuste de la verificación CEI.
Los patrones de bits especiales de números en coma flotante no válidos (NaN) que se generan
en caso de resultados indefinidos (p. ej. raíz de -1) no pueden compararse. Es decir, si uno de
los dos operandos tiene el valor NaN, la instrucción "CMP <>: Diferente" da como resultado
FALSE.

Comparación de cadenas de caracteres
En una comparación de cadenas de caracteres, los distintos caracteres se comparan según su
codificación (p. ej. 'a' es mayor que 'A'). La comparación se realiza de izquierda a derecha. El
primer carácter diferente es el decisivo para el resultado de la comparación.

730

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra ejemplos de comparación de cadenas de caracteres:
<Operando1>

<Operando2>

RLO de la instrucción

'AA'

'aa'

1

'Hello World'

'HelloWorld'

1

'AA'

'AA'

0

'aa'

'aaa'

1

También es posible comparar caracteres individuales de una cadena de caracteres. El número
del carácter que se va a comparar se indica entre corchetes al lado del nombre del operando.
Si se indica "MyString[2]", se compara p. ej. el segundo carácter de la cadena de caracteres
"MyString".
Nota
El estado se sigue mostrando a pesar de que la instrucción está "inactiva"
En las condiciones citadas a continuación se aplica lo siguiente:
● Antes de la instrucción "CMP <>: Diferente" (con tipo de datos STRING, WSTRING o
VARIANT) se consulta una condición (p. ej. un contacto normalmente abierto) en el
segmento.
● "Activar observación" está activado.
● Un nuevo resultado de la condición vuelve a poner el segmento a FALSE. De este modo,
la instrucción "CMP <>: Diferente" está inactiva.
Resultado:
Para la instrucción "CMP <>: Diferente" (tipo de datos STRING, WSTRING o VARIANT) se
sigue mostrando el estado anterior en el segmento.
Si se desactiva y vuelve a activar la "observación" o se desplaza a otro segmento, se mostrará
de nuevo el estado correcto de la instrucción "CMP <>: Diferente" (tipo de datos STRING,
WSTRING o VARIANT). La instrucción "CMP <>: Diferente" se muestra atenuada en el
segmento cuando está inactiva.

Comparación de tiempos, fecha y hora
Los patrones de bits de temporizadores, fechas y horas no válidos, p. ej.
DT#2015-13-33-25:62:99.999_999_999, no pueden compararse. Es decir, si uno de los dos
operandos tiene un valor no válido, la instrucción "CMP <>: Diferente" da como resultado
FALSE.
No es posible comparar directamente todos los tiempos entre sí, como p. ej. S5TIME. En este
caso se convierten implícitamente a otro tiempo para poder compararlos, p. ej. a TIME.
Para comparar fechas y horas de diferentes tipos de datos entre sí, el valor del tipo de datos
de fecha u hora más pequeño se convierte implícitamente al mayor. De ese modo se
comparan, por ejemplo, ambos tipos de datos de fecha y hora DATE y DTL sobre la base de
DTL.
Si se produce un error en las conversiones implícitas, la comparación da como resultado
FALSE.

Programación del PLC
Manual de programación y manejo, 11/2019

731

Instrucciones
4.1 Instrucciones

Comparación de variables del tipo de datos WORD con variables del tipo de datos S5TIME
Cuando se compara una variable del tipo de datos WORD con una variable del tipo de datos
S5TIME, ambas variables se convierten al tipo de datos TIME. La variable WORD se interpreta
como un valor S5TIME. En caso de que no fuera posible convertir una de las dos variables, la
comparación no se realizará y el resultado será FALSE. Si la conversión es correcta, la
comparación se realizará en función de la instrucción de comparación seleccionada.

Comparación de tipos de datos de hardware
Para poder comparar operandos del tipo de datos PORT, deberá seleccionar el tipo de datos
WORD en la lista desplegable del cuadro de la instrucción.
Si desea comparar los dos tipos de datos de hardware HW_IO y HW_DEVICE, primero deberá
crear una variable del tipo de datos HW_ANY en la sección "Temp" de la interfaz del bloque y
después copiar el LADDR (del tipo de datos HW_DEVICE) a la variable. A continuación se
pueden comparar HW_ANY y HW_IO.

Comparación de estructuras
Nota
Disponibilidad de la comparación de estructuras
La posibilidad de comparar estructuras está disponible en las CPU de la serie S7-1200 a partir
de la versión de firmware >= 4.2 y en las CPU de la serie S7-1500 a partir de la versión de
firmware >= 2.0.
Es posible comparar entre sí los valores de dos operandos estructurados cuando las dos
variables tienen el mismo tipo de datos de estructura. Si se comparan estructuras, los
operandos que comparar deben ser del mismo tipo de datos, independientemente del ajuste
de la verificación CEI. Esto no es aplicable a comparaciones en las que uno de los dos
operandos es un VARIANT o un ANY. Si el tipo de datos se desconoce en el momento de crear
el programa, puede emplearse VARIANT. En este caso, será posible también comparar el
operando con una variable estructurada de cualquier tipo de datos. También pueden
compararse entre sí dos variables del tipo de datos VARIANT o ANY.
Para comparar estructuras, seleccione el tipo de datos VARIANT en la lista desplegable del
cuadro de la instrucción. Son posibles los siguientes tipos de datos:
● Tipo de datos PLC
● STRUCT (la estructura del tipo de datos STRUCT debe estar contenida en un tipo de datos
PLC (UDT) o las dos estructuras que van a compararse son dos elementos de un ARRAY
of STRUCT. No se permiten las estructuras anónimas.)
● Variable a la que apunta ANY.
● Variable a la que apunta VARIANT.

732

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Para poder comparar entre sí dos variables del tipo de datos ARRAY cuando se selecciona
VARIANT, deben cumplirse los siguientes requisitos:
● Los elementos deben tener el mismo tipo de datos en cada caso.
● Los dos ARRAY deben tener la misma dimensión.
● Todas las dimensiones deben tener el mismo número de elementos. Los límites concretos
de ARRAY no tienen que coincidir necesariamente.
Nota
ARRAY of BOOL
Si se comparan entre sí dos operandos del tipo de datos ARRAY of BOOL, se ha seleccionado
el tipo de datos VARIANT en la lista desplegable y el número de elementos no es divisible entre
8, se comparan también los bits de relleno. Esto puede influir en el resultado de la comparación.
Si un elemento de las estructuras que desea comparar es un STRING/WSTRING no válido,
una indicación no válida de hora o fecha o bien un número en coma flotante no válido, el
resultado de la comparación devuelve el estado lógico "0" en RLO (resultado lógico).
La tabla siguiente muestra un ejemplo de comparación de estructuras:
<Operando1>
Variable del tipo de da‐
tos A <Tipo de datos
PLC>

<Operando2>
Valor de la va‐
riable

Variable del tipo de
datos A <Tipo de da‐
tos PLC>

RLO de la ins‐
trucción
Valor de la varia‐
ble

BOOL

FALSE

BOOL

FALSE

INT

2

INT

2

<Operando1>
Variable del tipo de da‐
tos A <Tipo de datos
PLC>

<Operando2>
Valor de la va‐
riable

Variable del tipo de
datos B <Tipo de da‐
tos PLC>

RLO de la ins‐
trucción
Valor de la varia‐
ble

BOOL

FALSE

BOOL

TRUE

INT

2

INT

3

<Operando1>
Variable del tipo de da‐
tos A <Tipo de datos
PLC>

Valor de la va‐
riable

1

<Operando2>

RLO de la ins‐
trucción

VARIANT (recibe da‐ Valor de la varia‐
tos de la variable del ble
tipo de datos A)

0

BOOL

FALSE

BOOL

FALSE

INT

2

INT

2

Programación del PLC
Manual de programación y manejo, 11/2019

0

733

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Diferente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

I, Q, M, D, L, P o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante, secuencias
de caracteres,
temporizadores,
fecha y hora,
ARRAY of <tipo de
datos> con límites
de ARRAY fijos y
variables,
STRUCT, VA‐
RIANT, ANY, tipo
de datos PLC

Primer valor de comparación

<Operan‐
do2>

Input

I, Q, M, D, L, P o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante, secuencias
de caracteres,
temporizadores,
fecha y hora,
ARRAY of <tipo de
datos> con límites
de ARRAY fijos y
variables,
STRUCT, VA‐
RIANT, ANY, tipo
de datos PLC

Segundo valor de compara‐
ción

Como se ha descrito anteriormente, los tipos de datos ARRAY, STRUCT (dentro de un tipo de datos
PLC), VARIANT, ANY y el tipo de datos PLC (UDT) están disponibles a partir de las versiones de
firmware 2.0 y 4.2, respectivamente.

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJB9DOXHಯ
!
,17

ಯ7DJ2XWಯ
6

ಯ7DJB9DOXHಯ

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● Se cumple la condición de la instrucción de comparación cuando "Tag_Value1" <>
"Tag_Value2".

734

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

CMP >=: Mayor o igual
Descripción
La instrucción "Mayor o igual" permite consultar si el primer valor de comparación
(<Operando1>) es mayor o igual que el segundo (<Operando2>). Ambos valores de
comparación deben ser del mismo tipo de datos.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0". El RLO
de la instrucción se combina lógicamente con el RLO del circuito entero como se indica a
continuación:
● Con una Y lógica si la instrucción de comparación está conectada en serie.
● Con una O lógica si la instrucción de comparación está conectada en paralelo.
El primer valor de comparación (<Operando1>) se indica en el comodín de operandos situado
encima de la instrucción. El segundo valor de comparación (<Operando2>) se indica en el
comodín de operandos situado debajo de la instrucción.

Comparación de cadenas de caracteres
En una comparación de cadenas de caracteres, los distintos caracteres se comparan según su
codificación (p. ej. 'a' es mayor que 'A'). La comparación se realiza de izquierda a derecha. El
primer carácter diferente es el decisivo para el resultado de la comparación. Si la parte
izquierda de la cadena de caracteres más larga es idéntica a la cadena de caracteres más
corta, la más larga se considera la mayor de ellas.
La tabla siguiente muestra ejemplos de comparación de cadenas de caracteres:
<Operando1>

<Operando2>

RLO de la instrucción

'BB'

'AA'

1

'AAA'

'AA'

1

'Hello World'

'Hello World'

1

'Hello World'

'HelloWorld'

0

'AA'

'aa'

0

'AAA'

'a'

0

También es posible comparar caracteres individuales de una cadena de caracteres. El número
del carácter que se va a comparar se indica entre corchetes al lado del nombre del operando.

Programación del PLC
Manual de programación y manejo, 11/2019

735

Instrucciones
4.1 Instrucciones
Si se indica "MyString[2]", se compara p. ej. el segundo carácter de la cadena de caracteres
"MyString".
Nota
El estado se sigue mostrando a pesar de que la instrucción está "inactiva"
En las condiciones citadas a continuación se aplica lo siguiente:
● Antes de la instrucción "CMP >=: Mayor o igual" (con tipo de datos STRING, WSTRING o
VARIANT) se consulta una condición (p. ej. un contacto normalmente abierto) en el
segmento.
● "Activar observación" está activado.
● Un nuevo resultado de la condición vuelve a poner el segmento a FALSE. De este modo,
la instrucción "CMP >=: Mayor o igual" está inactiva.
Resultado:
Para la instrucción "CMP >=: Mayor o igual" (tipo de datos STRING, WSTRING o VARIANT)
se sigue mostrando el estado anterior en el segmento.
Si se desactiva y vuelve a activar la "observación" o se desplaza a otro segmento, se mostrará
de nuevo el estado correcto de la instrucción "CMP >=: Mayor o igual" (tipo de datos STRING,
WSTRING o VARIANT). La instrucción "CMP >=: Mayor o igual" se muestra atenuada en el
segmento cuando está inactiva.

Comparación de tiempos, fecha y hora
Al comparar valores de tiempo, el RLO de la instrucción es "1" si el instante del <Operando1>
es mayor (más reciente) o igual al instante del <Operando2>.
No es posible comparar directamente todos los tiempos entre sí, como p. ej. S5TIME. En este
caso se convierten implícitamente a otro tiempo para poder compararlos, p. ej. a TIME.
Para comparar fechas y horas de diferentes tipos de datos entre sí, el valor del tipo de datos
de fecha u hora más pequeño se convierte implícitamente al mayor. De ese modo se
comparan, por ejemplo, ambos tipos de datos de fecha y hora DATE y DTL sobre la base de
DTL.
Si se produce un error en las conversiones implícitas, la comparación da como resultado
FALSE.

Comparación de variables del tipo de datos WORD con variables del tipo de datos S5TIME
Cuando se compara una variable del tipo de datos WORD con una variable del tipo de datos
S5TIME, ambas variables se convierten al tipo de datos TIME. La variable WORD se interpreta
como un valor S5TIME. En caso de que no fuera posible convertir una de las dos variables, la
comparación no se realizará y el resultado será FALSE. Si la conversión es correcta, la
comparación se realizará en función de la instrucción de comparación seleccionada.

736

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Mayor o igual":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

I, Q, M, D, L, P o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante, secuencias
de caracteres,
temporizadores,
fecha y hora

Primer valor de comparación

<Operan‐
do2>

Input

I, Q, M, D, L, P o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante, secuencias
de caracteres,
temporizadores,
fecha y hora

Segundo valor de compara‐
ción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJB9DOXHಯ
!
,17

ಯ7DJ2XWಯ
6

ಯ7DJB9DOXHಯ

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● Se cumple la condición de la instrucción de comparación cuando "Tag_Value1" >=
"Tag_Value2".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplo de detección del nivel de llenado de una zona de almacén (Página 7996)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

737

Instrucciones
4.1 Instrucciones

CMP <=: Menor o igual
Descripción
La instrucción "Menor o igual" permite consultar si el primer valor de comparación
(<Operando1>) es menor o igual que el segundo (<Operando2>). Ambos valores de
comparación deben ser del mismo tipo de datos.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0". El RLO
de la instrucción se combina lógicamente con el RLO del circuito entero como se indica a
continuación:
● Con una Y lógica si la instrucción de comparación está conectada en serie.
● Con una O lógica si la instrucción de comparación está conectada en paralelo.
El primer valor de comparación (<Operando1>) se indica en el comodín de operandos situado
encima de la instrucción. El segundo valor de comparación (<Operando2>) se indica en el
comodín de operandos situado debajo de la instrucción.

Comparación de cadenas de caracteres
En una comparación de cadenas de caracteres, los distintos caracteres se comparan según su
codificación (p. ej. 'a' es mayor que 'A'). La comparación se realiza de izquierda a derecha. El
primer carácter diferente es el decisivo para el resultado de la comparación. Si la parte
izquierda de la cadena de caracteres más larga es idéntica a la cadena de caracteres más
corta, la más corta se considera la menor de ellas.
La tabla siguiente muestra ejemplos de comparación de cadenas de caracteres:
<Operando1>

<Operando2>

RLO de la instrucción

'AA'

'aa'

1

'AAA'

'a'

1

'Hello World'

'Hello World'

1

'HelloWorld'

'Hello World'

0

'BB'

'AA'

0

'AAA'

'AA'

0

También es posible comparar caracteres individuales de una cadena de caracteres. El número
del carácter que se va a comparar se indica entre corchetes al lado del nombre del operando.

738

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Si se indica "MyString[2]", se compara p. ej. el segundo carácter de la cadena de caracteres
"MyString".
Nota
El estado se sigue mostrando a pesar de que la instrucción está "inactiva"
En las condiciones citadas a continuación se aplica lo siguiente:
● Antes de la instrucción "CMP <=: Menor o igual" (con tipo de datos STRING, WSTRING o
VARIANT) se consulta una condición (p. ej. un contacto normalmente abierto) en el
segmento.
● "Activar observación" está activado.
● Un nuevo resultado de la condición vuelve a poner el segmento a FALSE. De este modo,
la instrucción "CMP <=: Menor o igual" está inactiva.
Resultado:
Para la instrucción "CMP <=: Menor o igual" (tipo de datos STRING, WSTRING o VARIANT)
se sigue mostrando el estado anterior en el segmento.
Si se desactiva y vuelve a activar la "observación" o se desplaza a otro segmento, se mostrará
de nuevo el estado correcto de la instrucción "CMP <=: Menor o igual" (tipo de datos STRING,
WSTRING o VARIANT). La instrucción "CMP <=: Menor o igual" se muestra atenuada en el
segmento cuando está inactiva.

Comparación de tiempos, fecha y hora
Al comparar valores de tiempo, el RLO de la instrucción es "1" si el instante del <Operando1>
es menor (más antiguo) o igual al instante del <Operando2>.
No es posible comparar directamente todos los tiempos entre sí, como p. ej. S5TIME. En este
caso se convierten implícitamente a otro tiempo para poder compararlos, p. ej. a TIME.
Para comparar fechas y horas de diferentes tipos de datos entre sí, el valor del tipo de datos
de fecha u hora más pequeño se convierte implícitamente al mayor. De ese modo se
comparan, por ejemplo, ambos tipos de datos de fecha y hora DATE y DTL sobre la base de
DTL.
Si se produce un error en las conversiones implícitas, la comparación da como resultado
FALSE.

Comparación de variables del tipo de datos WORD con variables del tipo de datos S5TIME
Cuando se compara una variable del tipo de datos WORD con una variable del tipo de datos
S5TIME, ambas variables se convierten al tipo de datos TIME. La variable WORD se interpreta
como un valor S5TIME. En caso de que no fuera posible convertir una de las dos variables, la
comparación no se realizará y el resultado será FALSE. Si la conversión es correcta, la
comparación se realizará en función de la instrucción de comparación seleccionada.

Programación del PLC
Manual de programación y manejo, 11/2019

739

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Menor o igual":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

I, Q, M, D, L, P o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante, secuencias
de caracteres,
temporizadores,
fecha y hora

Primer valor de comparación

<Operan‐
do2>

Input

I, Q, M, D, L, P o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante, secuencias
de caracteres,
temporizadores,
fecha y hora

Segundo valor de compara‐
ción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJB9DOXHಯ

,17

ಯ7DJ2XWಯ
6

ಯ7DJB9DOXHಯ

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● Se cumple la condición de la instrucción de comparación cuando "Tag_Value1" <=
"Tag_Value2".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

740

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

CMP >: Mayor
Descripción
La instrucción "Mayor" permite consultar si el primer valor de comparación (<Operando1>) es
mayor que el segundo (<Operando2>). Ambos valores de comparación deben ser del mismo
tipo de datos.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0". El RLO
de la instrucción se combina lógicamente con el RLO del circuito entero como se indica a
continuación:
● Con una Y lógica si la instrucción de comparación está conectada en serie.
● Con una O lógica si la instrucción de comparación está conectada en paralelo.
El primer valor de comparación (<Operando1>) se indica en el comodín de operandos situado
encima de la instrucción. El segundo valor de comparación (<Operando2>) se indica en el
comodín de operandos situado debajo de la instrucción.

Comparación de cadenas de caracteres
En una comparación de cadenas de caracteres, los distintos caracteres se comparan según su
codificación (p. ej. 'a' es mayor que 'A'). La comparación se realiza de izquierda a derecha. El
primer carácter diferente es el decisivo para el resultado de la comparación. Si la parte
izquierda de la cadena de caracteres más larga es idéntica a la cadena de caracteres más
corta, la más larga se considera la mayor de ellas.
La tabla siguiente muestra ejemplos de comparación de cadenas de caracteres:
<Operando1>

<Operando2>

RLO de la instrucción

'BB'

'AA'

1

'AAA'

'AA'

1

'AA'

'aa'

0

'AAA'

'a'

0

También es posible comparar caracteres individuales de una cadena de caracteres. El número
del carácter que se va a comparar se indica entre corchetes al lado del nombre del operando.

Programación del PLC
Manual de programación y manejo, 11/2019

741

Instrucciones
4.1 Instrucciones
Si se indica "MyString[2]", se compara p. ej. el segundo carácter de la cadena de caracteres
"MyString".
Nota
El estado se sigue mostrando a pesar de que la instrucción está "inactiva"
En las condiciones citadas a continuación se aplica lo siguiente:
● Antes de la instrucción "CMP >: Mayor" (con tipo de datos STRING, WSTRING o VARIANT)
se consulta una condición (p. ej. un contacto normalmente abierto) en el segmento.
● "Activar observación" está activado.
● Un nuevo resultado de la condición vuelve a poner el segmento a FALSE. De este modo,
la instrucción "CMP >: Mayor" está inactiva.
Resultado:
Para la instrucción "CMP >: Mayor" (tipo de datos STRING, WSTRING o VARIANT) se sigue
mostrando el estado anterior en el segmento.
Si se desactiva y vuelve a activar la "observación" o se desplaza a otro segmento, se mostrará
de nuevo el estado correcto de la instrucción "CMP >: Mayor" (tipo de datos STRING,
WSTRING o VARIANT). La instrucción "CMP >: Mayor" se muestra atenuada en el segmento
cuando está inactiva.

Comparación de tiempos, fecha y hora
Al comparar valores de tiempo, el RLO de la instrucción es "1" si el instante del <Operando1>
es mayor (más reciente) que el instante del <Operando2>.
No es posible comparar directamente todos los tiempos entre sí, como p. ej. S5TIME. En este
caso se convierten implícitamente a otro tiempo para poder compararlos, p. ej. a TIME.
Para comparar fechas y horas de diferentes tipos de datos entre sí, el valor del tipo de datos
de fecha u hora más pequeño se convierte implícitamente al mayor. De ese modo se
comparan, por ejemplo, ambos tipos de datos de fecha y hora DATE y DTL sobre la base de
DTL.
Si se produce un error en las conversiones implícitas, la comparación da como resultado
FALSE.

Comparación de variables del tipo de datos WORD con variables del tipo de datos S5TIME
Cuando se compara una variable del tipo de datos WORD con una variable del tipo de datos
S5TIME, ambas variables se convierten al tipo de datos TIME. La variable WORD se interpreta
como un valor S5TIME. En caso de que no fuera posible convertir una de las dos variables, la
comparación no se realizará y el resultado será FALSE. Si la conversión es correcta, la
comparación se realizará en función de la instrucción de comparación seleccionada.

742

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Mayor":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

I, Q, M, D, L, P o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante, secuencias
de caracteres,
temporizadores,
fecha y hora

Primer valor de comparación

<Operan‐
do2>

Input

I, Q, M, D, L, P o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante, secuencias
de caracteres,
temporizadores,
fecha y hora

Segundo valor de compara‐
ción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJB9DOXHಯ
!
,17

ಯ7DJ2XWಯ
6

ಯ7DJB9DOXHಯ

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● Se cumple la condición de la instrucción de comparación cuando "Tag_Value1" >
"Tag_Value2".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

743

Instrucciones
4.1 Instrucciones

CMP <: Menor
Descripción
La instrucción "Menor" permite consultar si el primer valor de comparación (<Operando1>) es
menor que el segundo (<Operando2>). Ambos valores de comparación deben ser del mismo
tipo de datos.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0". El RLO
de la instrucción se combina lógicamente con el RLO del circuito entero como se indica a
continuación:
● Con una Y lógica si la instrucción de comparación está conectada en serie.
● Con una O lógica si la instrucción de comparación está conectada en paralelo.
El primer valor de comparación (<Operando1>) se indica en el comodín de operandos situado
encima de la instrucción. El segundo valor de comparación (<Operando2>) se indica en el
comodín de operandos situado debajo de la instrucción.

Comparación de cadenas de caracteres
En una comparación de cadenas de caracteres, los distintos caracteres se comparan según su
codificación (p. ej. 'a' es mayor que 'A'). La comparación se realiza de izquierda a derecha. El
primer carácter diferente es el decisivo para el resultado de la comparación. Si la parte
izquierda de la cadena de caracteres más larga es idéntica a la cadena de caracteres más
corta, la más corta se considera la menor de ellas.
La tabla siguiente muestra ejemplos de comparación de cadenas de caracteres:
<Operando1>

<Operando2>

RLO de la instrucción

'AA'

'aa'

1

'AAA'

'a'

1

'BB'

'AA'

0

'AAA'

'AA'

0

También es posible comparar caracteres individuales de una cadena de caracteres. El número
del carácter que se va a comparar se indica entre corchetes al lado del nombre del operando.

744

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Si se indica "MyString[2]", se compara p. ej. el segundo carácter de la cadena de caracteres
"MyString".
Nota
El estado se sigue mostrando a pesar de que la instrucción está "inactiva"
En las condiciones citadas a continuación se aplica lo siguiente:
● Antes de la instrucción "CMP <: Menor" (con tipo de datos STRING, WSTRING o VARIANT)
se consulta una condición (p. ej. un contacto normalmente abierto) en el segmento.
● "Activar observación" está activado.
● Un nuevo resultado de la condición vuelve a poner el segmento a FALSE. De este modo,
la instrucción "CMP <: Menor" está inactiva.
Resultado:
Para la instrucción "CMP <: Menor" (tipo de datos STRING, WSTRING o VARIANT) se sigue
mostrando el estado anterior en el segmento.
Si se desactiva y vuelve a activar la "observación" o se desplaza a otro segmento, se mostrará
de nuevo el estado correcto de la instrucción "CMP <: Menor" (tipo de datos STRING,
WSTRING o VARIANT). La instrucción "CMP <: Menor" se muestra atenuada en el segmento
cuando está inactiva.

Comparación de tiempos, fecha y hora
Al comparar valores de tiempo, el RLO de la instrucción es "1" si el instante del <Operando1>
es menor (más antiguo) que el instante del <Operando2>.
No es posible comparar directamente todos los tiempos entre sí, como p. ej. S5TIME. En este
caso se convierten implícitamente a otro tiempo para poder compararlos, p. ej. a TIME.
Para comparar fechas y horas de diferentes tipos de datos entre sí, el valor del tipo de datos
de fecha u hora más pequeño se convierte implícitamente al mayor. De ese modo se
comparan, por ejemplo, ambos tipos de datos de fecha y hora DATE y DTL sobre la base de
DTL.
Si se produce un error en las conversiones implícitas, la comparación da como resultado
FALSE.

Comparación de variables del tipo de datos WORD con variables del tipo de datos S5TIME
Cuando se compara una variable del tipo de datos WORD con una variable del tipo de datos
S5TIME, ambas variables se convierten al tipo de datos TIME. La variable WORD se interpreta
como un valor S5TIME. En caso de que no fuera posible convertir una de las dos variables, la
comparación no se realizará y el resultado será FALSE. Si la conversión es correcta, la
comparación se realizará en función de la instrucción de comparación seleccionada.

Programación del PLC
Manual de programación y manejo, 11/2019

745

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Menor":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do1>

Input

I, Q, M, D, L, P o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante, secuencias
de caracteres,
temporizadores,
fecha y hora

Primer valor de comparación

<Operan‐
do2>

Input

I, Q, M, D, L, P o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante, secuencias
de caracteres,
temporizadores,
fecha y hora

Segundo valor de compara‐
ción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJB9DOXHಯ

,17

ಯ7DJ2XWಯ
6

ಯ7DJB9DOXHಯ

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● Se cumple la condición de la instrucción de comparación cuando "Tag_Value1" <
"Tag_Value2".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplo de detección del nivel de llenado de una zona de almacén (Página 7996)
Principios básicos de KOP (Página 7943)

746

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

IN_RANGE: Valor dentro del rango
Descripción
La instrucción "Valor dentro del rango" permite consultar si el valor de la entrada VAL está
dentro de un determinado rango de valores.
Los límites del rango de valores se determinan mediante las entradas MIN y MAX. La
instrucción "Valor dentro del rango" compara el valor de la entrada VAL con los valores de las
entradas MIN y MAX y transfiere el resultado a la salida del cuadro. Si el valor de la entrada
VAL cumple la comparación MIN <= VAL o VAL <= MAX, la salida del cuadro devuelve el
estado lógico "1". Si no se cumple la comparación, la salida del cuadro devuelve el estado
lógico "0".
Si el estado lógico de la entrada del cuadro es "0", no se ejecuta la instrucción "Valor dentro del
rango".
Para ejecutar la función de comparación es necesario que los valores que deben compararse
sean del mismo tipo de datos y que la entrada del cuadro esté cableada.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Valor dentro del rango":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

Entrada del
cuadro

Input

BOOL

I, Q, M, D, L o
constante

Resultado de la combinación
lógica previa

MIN

Input

Enteros, números
en coma flotante

I, Q, M, D, L o
constante

Límite inferior del rango de
valores

VAL

Input

Enteros, números
en coma flotante

I, Q, M, D, L o
constante

Valor de comparación

MAX

Input

Enteros, números
en coma flotante

I, Q, M, D, L o
constante

Límite superior del rango de
valores

Salida del
cuadro

Output

BOOL

I, Q, M, D, L

Resultado de la comparación

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ ಯ7DJ,QBಯ

ಯ7DJB0LQಯ
ಯ7DJB9DOXHಯ
ಯ7DJB0D[ಯ

Programación del PLC
Manual de programación y manejo, 11/2019

,1B5$1*(
5($/

ಯ7DJ,QBಯ

ಯ7DJ2XWಯ

0,1
9$/
0$;

747

Instrucciones
4.1 Instrucciones
La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● El valor del operando "Tag_Value" está dentro del rango de valores especificado por los
valores actuales de los operandos "Tag_Min" y "Tag_Max" (MIN <= VAL o VAL <= MAX).
● El operando "TagIn_3" devuelve el estado lógico "1".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

OUT_RANGE: Valor fuera del rango
Descripción
La instrucción "Valor fuera del rango" permite consultar si el valor de la entrada VAL está fuera
de un determinado rango de valores.
Los límites del rango de valores se determinan mediante las entradas MIN y MAX. La
instrucción "Valor fuera del rango" compara el valor de la entrada VAL con los valores de las
entradas MIN y MAX y transfiere el resultado a la salida del cuadro. Si el valor de la entrada
VAL cumple la comparación MIN > VAL o VAL > MAX, la salida del cuadro devuelve el estado
lógico "1". La salida del cuadro también devuelve el estado lógico "1" si un operando indicado
del tipo de datos REAL contiene un valor no válido.
La salida del cuadro devuelve el estado lógico "0" si el valor de la entrada VAL no cumple la
condición MIN > VAL o VAL > MAX .
Si el estado lógico de la entrada del cuadro es "0", no se ejecuta la instrucción "Valor fuera del
rango".
Para ejecutar la función de comparación es necesario que los valores que deben compararse
sean del mismo tipo de datos y que la entrada del cuadro esté cableada.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Valor fuera del rango":

748

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

Entrada del
cuadro

Input

BOOL

I, Q, M, D, L o
constante

Resultado de la combinación
lógica previa

MIN

Input

Enteros, números
en coma flotante

I, Q, M, D, L o
constante

Límite inferior del rango de
valores

VAL

Input

Enteros, números
en coma flotante

I, Q, M, D, L o
constante

Valor de comparación

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

MAX

Input

Enteros, números
en coma flotante

I, Q, M, D, L o
constante

Límite superior del rango de
valores

Salida del
cuadro

Output

BOOL

I, Q, M, D, L

Resultado de la comparación

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ ಯ7DJ,QBಯ

ಯ7DJB0LQಯ
ಯ7DJB9DOXHಯ
ಯ7DJB0D[ಯ

287B5$1*(
5($/

ಯ7DJ,QBಯ

ಯ7DJ2XWಯ

0,1
9$/
0$;

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● El valor del operando "Tag_Value" está fuera del rango de valores especificado por los
valores de los operandos "Tag_Min" y "Tag_Max" (MIN > VAL o VAL > MAX).
● El operando "TagIn_3" devuelve el estado lógico "1".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

----I OK I----: Comprobar validez
Descripción
La instrucción "Comprobar validez" permite consultar si el valor de un operando (<Operando>)
es un número en coma flotante válido. La consulta se inicia en cada ciclo del programa cuando
la entrada de la instrucción tiene el estado lógico "1".
La salida de la instrucción devuelve el estado lógico "1" cuando el valor del operando es un
número en coma flotante válido cuando se realiza la consulta y la entrada de la instrucción
devuelve el estado lógico "1". En todos los demás casos, la salida de la instrucción "Comprobar
validez" devuelve el estado lógico "0".

Programación del PLC
Manual de programación y manejo, 11/2019

749

Instrucciones
4.1 Instrucciones
La instrucción "Comprobar validez" puede utilizarse en combinación con el mecanismo EN. Si
el cuadro de la instrucción se conecta a una entrada de habilitación EN, ésta se activa
únicamente si la consulta de la validez del valor da un resultado positivo. Esta función garantiza
que una instrucción se active sólo si el valor del operando indicado es un número en coma
flotante válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Comprobar validez":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

Números en coma
flotante

I, Q, M, D, L

Valor que se consulta.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJB9DOXHಯ
2.

ಯ7DJB9DOXHಯ
2.

08/
5($/
(1
(12

ಯ7DJB9DOXHಯ

,1

ಯ7DJB9DOXHಯ

,1

287

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

Si los valores de los operandos "Tag_Value1" y "Tag_Value2" contienen números en coma
flotante válidos, se ejecuta la instrucción "Multiplicar". El valor del operando "Tag_Value1" se
multiplica por el valor del operando "Tag_Value2". El resultado de la multiplicación se escribe
seguidamente en el operando "Tag_Result". Si no se producen errores al ejecutar la
instrucción, el operando "TagOut" adopta el estado lógico "1" en la salida de habilitación ENO.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

----I NOT_OK I----: Comprobar invalidez
Descripción
La instrucción "Comprobar invalidez" permite consultar si el valor de un operando
(<Operando>) es un número en coma flotante no válido. La consulta se inicia en cada ciclo del
programa cuando la entrada de la instrucción tiene el estado lógico "1".

750

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La salida de la instrucción devuelve el estado lógico "1" cuando el valor del operando es un
número en coma flotante no válido cuando se realiza la consulta y la entrada de la instrucción
devuelve el estado lógico "1". En todos los demás casos, la salida de la instrucción "Comprobar
invalidez" devuelve el estado lógico "0".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Comprobar invalidez":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

Números en coma
flotante

I, Q, M, D, L

Valor que se consulta.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
029(

ಯ7DJ,QB9DOXHಯ
127

127B2.

ಯ7DJ,QB9DOXHಯ

(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJ2XWB9DOXHಯ

Si el valor del operando "TagIn_Value" no es un número en coma flotante válido, no se ejecuta
la instrucción "Copiar valor". El operando "TagOut" adopta el estado lógico "0" en la salida de
habilitación ENO.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

VARIANT
EQ_Type: Comparar si el tipo de datos es IGUAL al tipo de datos de una variable
Descripción
Con la instrucción "Comparar si el tipo de datos es IGUAL al tipo de datos de una variable" se
consulta qué tipo de datos tiene una variable a la que apunta un VARIANT. Se compara si el
tipo de datos de la variable (<Operando1>) declarada en la interfaz del bloque es "Igual" al tipo
de datos de una variable (<Operando2>).

Programación del PLC
Manual de programación y manejo, 11/2019

751

Instrucciones
4.1 Instrucciones
El <Operando1> debe ser del tipo VARIANT. El <Operando2> puede ser un tipo de datos
simple o un tipo de datos PLC.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0". El RLO
de la instrucción se combina lógicamente con el RLO del circuito entero como se indica a
continuación:
● Con una Y lógica si la instrucción de comparación está conectada en serie.
● Con una O lógica si la instrucción de comparación está conectada en paralelo.
El <Operando1> se indica en el comodín de operando situado encima de la instrucción. El
<Operando2> se indica en el comodín de operando situado debajo de la instrucción.

Comparación de tiempos, fecha y hora
No es posible comparar directamente todos los tiempos entre sí, como p. ej. S5TIME. En este
caso se convierten implícitamente a otro tiempo para poder compararlos, p. ej. a TIME.
Para comparar fechas y horas de diferentes tipos de datos entre sí, el valor del tipo de datos
de fecha u hora más pequeño se convierte implícitamente al mayor. De ese modo se
comparan, por ejemplo, ambos tipos de datos de fecha y hora DATE y DTL sobre la base de
DTL.
Si se produce un error en las conversiones implícitas, la comparación da como resultado
FALSE.

Comparación de estructuras
Para comparar estructuras está disponible la instrucción "CMP ==". Por norma general no es
posible comparar estructuras anónimas, excepto cuando forman parte del mismo ARRAY.
Encontrará más información sobre la comparación de estructuras aquí: CMP ==: Igual
(Página 725)

752

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Comparar si el tipo de datos es
IGUAL al tipo de datos de una variable":
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

<Operan‐
do1>

Input

VARIANT

<Operan‐
do2>

Input

I, Q, M, D, L
Secuencias de
bits, enteros, nú‐
meros en coma flo‐
tante, temporiza‐
dores, fecha y ho‐
ra, secuencias de
caracteres,
ARRAY, tipos de
datos PLC

Descripción

S7-1500

L (puede declararse en las
secciones "Input", "InOut" y
"Temp" de la interfaz del blo‐
que.)
I, Q, M, D, L,
P

Primer operando

Segundo operan‐
do

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

7DJB2SHUDQG
(4B7\SH

ಯ7DJ2XWಯ
6

ಯ7DJB2SHUDQGಯ

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● Se cumple la condición de la instrucción de comparación, es decir, el operando
#Tag_Operand1 es igual a "Tag_Operand2".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

753

Instrucciones
4.1 Instrucciones

NE_Type: Comparar si el tipo de datos es DIFERENTE del tipo de datos de una variable
Descripción
Con la instrucción "Comparar si el tipo de datos es DIFERENTE del tipo de datos de una
variable" se consulta el tipo de datos que no tiene una variable a la que señala un VARIANT.
Se compara si el tipo de datos de la variable (<Operando1>) declarada en la interfaz del bloque
es "Diferente" al tipo de datos de una variable (<Operando2>).
El <Operando1> debe ser del tipo VARIANT. El <Operando2> puede ser un tipo de datos
simple o un tipo de datos PLC.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0". El RLO
de la instrucción se combina lógicamente con el RLO del circuito entero como se indica a
continuación:
● Con una Y lógica si la instrucción de comparación está conectada en serie.
● Con una O lógica si la instrucción de comparación está conectada en paralelo.
El <Operando1> se indica en el comodín de operando situado encima de la instrucción. El
<Operando2> se indica en el comodín de operando situado debajo de la instrucción.

Comparación de tiempos, fecha y hora
No es posible comparar directamente todos los tiempos entre sí, como p. ej. S5TIME. En este
caso se convierten implícitamente a otro tiempo para poder compararlos, p. ej. a TIME.
Para comparar fechas y horas de diferentes tipos de datos entre sí, el valor del tipo de datos
de fecha u hora más pequeño se convierte implícitamente al mayor. De ese modo se
comparan, por ejemplo, ambos tipos de datos de fecha y hora DATE y DTL sobre la base de
DTL.
Si se produce un error en las conversiones implícitas, la comparación da como resultado
FALSE.

Comparación de estructuras
Para comparar estructuras está disponible la instrucción "CMP <>". Por norma general no es
posible comparar estructuras anónimas, excepto cuando forman parte del mismo ARRAY.
Encontrará más información sobre la comparación de estructuras aquí: CMP <>: Diferente
(Página 730)

754

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Comparar si el tipo de datos es
DIFERENTE del tipo de datos de una variable":
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

<Operan‐
do1>

Input

VARIANT

<Operan‐
do2>

Input

I, Q, M, D, L
Secuencias de
bits, enteros, nú‐
meros en coma flo‐
tante, temporiza‐
dores, fecha y ho‐
ra, secuencias de
caracteres,
ARRAY, tipos de
datos PLC

Descripción

S7-1500

L (puede declararse en las sec‐ Primer operando
ciones "Input", "InOut" y
"Temp" de la interfaz del blo‐
que.)
I, Q, M, D, L, P Segundo ope‐
rando

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

7DJB2SHUDQG
1(B7\SH

ಯ7DJ2XWಯ
6

ಯ7DJB2SHUDQGಯ

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● Se cumple la condición de la instrucción de comparación, es decir, el operando
#Tag_Operand1 es diferente de "Tag_Operand2".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

755

Instrucciones
4.1 Instrucciones

EQ_ElemType: Comparar si el tipo de datos de un elemento del ARRAY es IGUAL al tipo de datos de
una variable
Descripción
La instrucción "Comparar si el tipo de datos de un elemento del ARRAY es IGUAL al tipo de
datos de una variable" permite saber el tipo de datos que tiene una variable a la que apunta un
VARIANT. Se compara si el tipo de datos de la variable (<Operando1>) declarada en la interfaz
del bloque es "Igual" al tipo de datos de una variable (<Operando2>).
El <Operando1> debe ser del tipo VARIANT. El <Operando2> puede ser un tipo de datos
simple o un tipo de datos PLC.
Si el tipo de datos de la variable VARIANT (<Operando1>) es un ARRAY, se compara el tipo
de datos de los elementos ARRAY.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0". El RLO
de la instrucción se combina lógicamente con el RLO del circuito entero como se indica a
continuación:
● Con una Y lógica si la instrucción de comparación está conectada en serie.
● Con una O lógica si la instrucción de comparación está conectada en paralelo.
El <Operando1> se indica en el comodín de operando situado encima de la instrucción. El
<Operando2> se indica en el comodín de operando situado debajo de la instrucción.

Comparación de tiempos, fecha y hora
No es posible comparar directamente todos los tiempos entre sí, como p. ej. S5TIME. En este
caso se convierten implícitamente a otro tiempo para poder compararlos, p. ej. a TIME.
Para comparar fechas y horas de diferentes tipos de datos entre sí, el valor del tipo de datos
de fecha u hora más pequeño se convierte implícitamente al mayor. De ese modo se
comparan, por ejemplo, ambos tipos de datos de fecha y hora DATE y DTL sobre la base de
DTL.
Si se produce un error en las conversiones implícitas, la comparación da como resultado
FALSE.

Comparación de estructuras
Para comparar estructuras está disponible la instrucción "CMP ==". Por norma general no es
posible comparar estructuras anónimas, excepto cuando forman parte del mismo ARRAY.
Encontrará más información sobre la comparación de estructuras aquí: CMP ==: Igual
(Página 725)

756

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Comparar si el tipo de datos de un
elemento del ARRAY es IGUAL al tipo de datos de una variable":
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

<Operan‐
do1>

Input

VARIANT

<Operan‐
do2>

Input

I, Q, M, D, L
Secuencias de
bits, enteros, nú‐
meros en coma flo‐
tante, temporiza‐
dores, fecha y ho‐
ra, secuencias de
caracteres,
ARRAY, tipos de
datos PLC

Descripción

S7-1500

L (puede declararse en las
secciones "Input", "InOut" y
"Temp" de la interfaz del blo‐
que.)
I, Q, M, D, L,
P

Primer operando

Segundo operan‐
do

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

7DJB2SHUDQG
(4B(OHP7\SH

ಯ7DJ2XWಯ
6

ಯ7DJB2SHUDQGಯ

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● Se cumple la condición de la instrucción de comparación, es decir, el operando
#Tag_Operand1 es igual a "Tag_Operand2".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

757

Instrucciones
4.1 Instrucciones

NE_ElemType: Comparar si el tipo de datos de un elemento de ARRAY es DIFERENTE del tipo de
datos de una variable
Descripción
La instrucción "Comparar si el tipo de datos de un elemento del ARRAY es DIFERENTE al tipo
de datos de una variable" permite saber qué tipo de datos no tiene una variable a la que apunta
un VARIANT. Se compara si el tipo de datos de la variable (<Operando1>) declarada en la
interfaz del bloque es "Diferente" al tipo de datos de una variable (<Operando2>).
El <Operando1> debe ser del tipo VARIANT. El <Operando2> puede ser un tipo de datos
simple o un tipo de datos PLC.
Si el tipo de datos de la variable VARIANT (<Operando1>) es un ARRAY, se compara el tipo
de datos de los elementos ARRAY.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0". El RLO
de la instrucción se combina lógicamente con el RLO del circuito entero como se indica a
continuación:
● Con una Y lógica si la instrucción de comparación está conectada en serie.
● Con una O lógica si la instrucción de comparación está conectada en paralelo.
El <Operando1> se indica en el comodín de operando situado encima de la instrucción. El
<Operando2> se indica en el comodín de operando situado debajo de la instrucción.

Comparación de tiempos, fecha y hora
No es posible comparar directamente todos los tiempos entre sí, como p. ej. S5TIME. En este
caso se convierten implícitamente a otro tiempo para poder compararlos, p. ej. a TIME.
Para comparar fechas y horas de diferentes tipos de datos entre sí, el valor del tipo de datos
de fecha u hora más pequeño se convierte implícitamente al mayor. De ese modo se
comparan, por ejemplo, ambos tipos de datos de fecha y hora DATE y DTL sobre la base de
DTL.
Si se produce un error en las conversiones implícitas, la comparación da como resultado
FALSE.

Comparación de estructuras
Para comparar estructuras está disponible la instrucción "CMP <>". Por norma general no es
posible comparar estructuras anónimas, excepto cuando forman parte del mismo ARRAY.
Encontrará más información sobre la comparación de estructuras aquí: CMP <>: Diferente
(Página 730)

758

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Comparar si el tipo de datos de un
elemento del ARRAY es DIFERENTE al tipo de datos de una variable":
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

<Operan‐
do1>

Input

VARIANT

<Operan‐
do2>

Input

I, Q, M, D, L
Secuencias de
bits, enteros, nú‐
meros en coma flo‐
tante, temporiza‐
dores, fecha y ho‐
ra, secuencias de
caracteres,
ARRAY, tipos de
datos PLC

Descripción

S7-1500

L (puede declararse en las
secciones "Input", "InOut" y
"Temp" de la interfaz del blo‐
que.)
I, Q, M, D, L,
P

Primer operando

Segundo operan‐
do

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

7DJB2SHUDQG
1(B(OHP7\SH

ಯ7DJ2XWಯ
6

ಯ7DJB2SHUDQGಯ

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● Se cumple la condición de la instrucción de comparación, es decir, el operando
#Tag_Operand1 es diferente de "Tag_Operand2".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

IS_NULL: Consultar si es un puntero IGUAL A CERO
Descripción
La instrucción "Consultar si es un puntero IGUAL A CERO" permite saber si VARIANT o la
referencia hace referencia a un puntero CERO y, por tanto, no apunta a un objeto.

Programación del PLC
Manual de programación y manejo, 11/2019

759

Instrucciones
4.1 Instrucciones
El <operando> debe ser del tipo de datos VARIANT o REF_TO <tipo de datos>.
Nota
La variable VARIANT apunta a un puntero ANY
Si la variable VARIANT apunta a un puntero ANY, la instrucción devuelve siempre el resultado
RLO = "0" aunque el puntero ANY tenga el valor CERO.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar si es un puntero IGUAL
A CERO":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

VARIANT o
REF_TO <tipo de
datos>

L (puede declarar‐ Operando que se compara si
se en las seccio‐
es IGUAL A CERO
nes "Input",
"InOut" y "Temp"
de la interfaz del
bloque.)

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

7DJB2SHUDQG
,6B18//

ಯ7DJ2XWಯ
6

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● Se cumple la condición de la instrucción de comparación, es decir, el operando
#Tag_Operand no apunta a ningún objeto.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

760

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

NOT_NULL: Consultar si es un puntero DIFERENTE DE CERO
Descripción
La instrucción "Consultar si es un puntero DIFERENTE DE CERO" permite saber si VARIANT
o la referencia no hace referencia a un puntero CERO y, por tanto, apunta a un objeto.
El <operando> debe ser del tipo de datos VARIANT o REF_TO <tipo de datos>.
Nota
La variable VARIANT apunta a un puntero ANY
Si la variable VARIANT apunta a un puntero ANY, la instrucción devuelve siempre el resultado
RLO = "1" aunque el puntero ANY tenga el valor CERO.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar si es un puntero
DIFERENTE DE CERO":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

VARIANT o
REF_TO <tipo de
datos>

L (puede declarar‐ Operando que se compara si
se en las seccio‐
es DIFERENTE DE CERO
nes "Input",
"InOut" y "Temp"
de la interfaz del
bloque.)

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

7DJB2SHUDQG
127B18//

ಯ7DJ2XWಯ
6

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● Se cumple la condición de la instrucción de comparación, es decir, el operando
#Tag_Operand apunta a un objeto.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Programación del PLC
Manual de programación y manejo, 11/2019

761

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

IS_ARRAY: Consultar si es un ARRAY
Descripción
La instrucción "Consultar si es un ARRAY" permite saber si VARIANT apunta a una variable
del tipo de datos ARRAY.
El <operando> debe ser del tipo de datos VARIANT.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar si es un ARRAY":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

VARIANT

L (puede declarar‐ Operando que se consulta si
se en las seccio‐
es un ARRAY
nes "Input",
"InOut" y "Temp"
de la interfaz del
bloque.)

Encontrará más información sobre los tipos de datos válidos en "Consulte también".
Nota
Consulta de un bloque de datos ARRAY
Si utiliza la instrucción IS_ARRAY en relación con un ArrayDB y genera el parámetro de
entrada VARIANT con DB_ANY_TO_VARIANT , en un punto cualquiera del programa deberá
utilizarse el ArrayDB en forma de símbolo como parámetro actual de un parámetro formal del
tipo de datos de datos VARIANT. Para que funcione correctamente es suficiente que se haya
descargado el lugar de uso. No es necesario que se ejecute.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,QBಯ

762

ಯ7DJ,QBಯ

7DJB9$5,$17
7R$UUD\
,6B$55$<

ಯ7DJ2XWಯ
6

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● Se cumple la condición de la instrucción de comparación, es decir, el operando
#Tag_VARIANTToArray es del tipo de datos ARRAY.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

EQ_TypeOfDB: Comparación de igualdad entre un tipo de datos de un DB direccionado indirectamente
y un tipo de datos
Descripción
La instrucción "Comparación de igualdad entre un tipo de datos de un DB direccionado
indirectamente y un tipo de datos" sirve para consultar el tipo de datos que tiene el bloque de
datos direccionado por la variable del tipo de datos DB_ANY. Se compara el tipo de datos del
DB direccionado por la variable (<Operando1>) con el tipo de datos de otra variable o
directamente con un tipo de datos (<Operando2>) para determinar si es "Igual".
El <Operando1> debe ser del tipo de datos DB_ANY. El <Operando2> puede ser, p. ej., un tipo
de datos PLC, un tipo de datos de sistema, un eje o un FB.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0". El RLO
de la instrucción se combina lógicamente con el RLO del circuito entero como se indica a
continuación:
● Con una Y lógica si la instrucción de comparación está conectada en serie.
● Con una O lógica si la instrucción de comparación está conectada en paralelo.
El <Operando1> se indica en el comodín de operando situado encima de la instrucción. El
<Operando2> se indica en el comodín de operando situado debajo de la instrucción.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

S7-1500

<Operando1>

Input

DB_ANY

L (puede declararse en las sec‐
ciones "Input", "InOut" y "Temp"
de la interfaz del bloque.)

<Operando2>

Input

TYPE_ID

I, Q, M, D, L

Programación del PLC
Manual de programación y manejo, 11/2019

Descripción
Primer operan‐
do

I, Q, M, D, L, P Segundo ope‐
rando

763

Instrucciones
4.1 Instrucciones
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

,QSXW'%$Q\
(4B7\SH2I'%

ಯ7DJ2XWಯ
6

72B6SHHG$[LV

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● Se cumple la condición de la instrucción de comparación, es decir, el tipo de datos del DB
direccionado por el operando #InputDBAny es igual al tipo de datos TO_SpeedAxis.
La salida "TagOut" no se activa cuando se cumplen las condiciones siguientes:
● El número del bloque de datos es "0".
● El bloque de datos no existe.
● El bloque de datos es un DB de ARRAY.
● El bloque de datos contiene una variable del tipo de datos UDT (tipo de datos PLC).

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Uso del tipo de datos DB_ANY (Página 216)
Principios básicos de KOP (Página 7943)

NE_TypeOfDB: Comparación de desigualdad entre un tipo de datos de un DB direccionado
indirectamente y un tipo de datos
Descripción
La instrucción "Comparación de desigualdad entre un tipo de datos de un DB direccionado
indirectamente y un tipo de datos" sirve para consultar el tipo de datos que no tiene el bloque
de datos direccionado por la variable del tipo de datos DB_ANY. Se compara el tipo de datos
del DB direccionado por la variable (<Operando1>) con el tipo de datos de otra variable o
directamente con el tipo de datos (<Operando2>) para determinar si es "Diferente".
El <Operando1> debe ser del tipo de datos DB_ANY. El <Operando2> puede ser, p. ej., un tipo
de datos PLC, un tipo de datos de sistema, un eje o un FB.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0". El RLO

764

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
de la instrucción se combina lógicamente con el RLO del circuito entero como se indica a
continuación:
● Con una Y lógica si la instrucción de comparación está conectada en serie.
● Con una O lógica si la instrucción de comparación está conectada en paralelo.
El <Operando1> se indica en el comodín de operando situado encima de la instrucción. El
<Operando2> se indica en el comodín de operando situado debajo de la instrucción.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

Descripción

S7-1500

<Operando1>

Input

DB_ANY

L (puede declararse en las sec‐
ciones "Input", "InOut" y "Temp"
de la interfaz del bloque.)

<Operando2>

Input

TYPE_ID

I, Q, M, D, L

Primer operan‐
do

I, Q, M, D, L, P Segundo ope‐
rando

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

,QSXW'%$Q\
1(B7\SH2I'%

ಯ7DJ2XWಯ
6

72B6SHHG$[LV

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● Se cumple la condición de la instrucción de comparación, es decir, el tipo de datos del DB
direccionado por el operando #InputDBAny es diferente del tipo de datos TO_SpeedAxis.
La salida "TagOut" no se activa cuando se cumplen las condiciones siguientes:
● El número del bloque de datos es "0".
● El bloque de datos no existe.
● El bloque de datos es un DB de ARRAY.
● El bloque de datos contiene una variable del tipo de datos UDT (tipo de datos PLC).

Programación del PLC
Manual de programación y manejo, 11/2019

765

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Uso del tipo de datos DB_ANY (Página 216)
Principios básicos de KOP (Página 7943)

Funciones matemáticas
CALCULATE: Calcular
Descripción
La instrucción "Calcular" permite deifnir y ejecutar una expresión para calcular operaciones
matemáticas o combinaciones lógicas complejas en función del tipo de datos seleccionado.
El tipo de datos de la instrucción se selecciona en la lista desplegable "???" del cuadro de la
instrucción. Dependiendo del tipo de datos seleccionado se puede combinar la funcionalidad
de determinadas instrucciones para ejecutar un cálculo complejo. La expresión que debe
calcularse se indica en un cuadro de diálogo que se abre con el símbolo de "calculadora"
situado en el margen superior derecho del cuadro de la instrucción. La expresión puede
contener los nombres de los parámetros de entrada y la sintaxis de las instrucciones. No está
permitido indicar nombres o direcciones de operandos.
El cuadro de la instrucción contiene en estado básico al menos 2 entradas (IN1 e IN2). El
número de entradas es ampliable. Las entradas insertadas se numeran en orden ascendente
en el cuadro.
Los valores de las entradas se utilizan para ejecutar la expresión indicada. No obstante, no es
necesario utilizar en la expresión todas las entradas definidas. El resultado de la instrucción se
transfiere a la salida OUT.
Nota
Cuando una de las operaciones matemáticas falla en la expresión, no se transfieren resultados
a la salida OUT y la salida de habilitación ENO devuelve el estado lógico "1".
Si en la expresión se utilizan entradas que no están disponibles en el cuadro, estas se insertan
automáticamente. Para ello, es indispensable que la numeración de las entradas nuevas que
deben definirse en la expresión no contenga huecos. Por ejemplo, es posible no utilizar la
entrada IN4 en la expresión si la entrada IN3 no está definida.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El resultado final o intermedio de la instrucción "Calcular" está fuera del rango permitido
para el tipo de datos indicado en la salida OUT.
● Un número en coma flotante tiene un valor no válido.
● Se ha producido un error al ejecutar una de las instrucciones indicadas en la expresión.

766

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra las instrucciones que pueden ejecutarse combinadas en función del
tipo de datos seleccionado en la expresión de la instrucción "Calcular":
Tipo de datos

Instrucción

Secuencias de bits AND: Operación lógica Y

Enteros

Números en coma
flotante

Sintaxis

Ejemplo

AND

IN1 AND IN2 OR
IN3

OR: Operación lógica O

OR

XOR: Operación lógica O-exclusiva

XOR

INV: Generar complemento a 1

NOT

SWAP: Cambiar disposición

SWAP

1)

ADD: Sumar

+

(IN1 + IN2) * IN3;

SUB: Restar

-

MUL: Multiplicar

*

(ABS(IN2)) *
(ABS(IN1))

DIV: Dividir

/

MOD: Obtener resto de división

MOD

INV: Generar complemento a 1

NOT

NEG: Generar complemento a dos

-(in1)

ABS: Calcular valor absoluto

ABS( )

ADD: Sumar

+

SUB: Restar

-

MUL: Multiplicar

*

DIV: Dividir

/

EXPT: Elevar a potencia

**

ABS: Calcular valor absoluto

ABS( )

SQR: Calcular cuadrado

SQR( )

SQRT: Calcular raíz cuadrada

SQRT( )

LN: Calcular logaritmo natural

LN( )

EXP: Calcular valor exponencial

EXP( )

FRAC: Determinar decimales

FRAC( )

SIN: Calcular valor de seno

SIN( )

COS: Calcular valor de coseno

COS( )

TAN: Calcular valor de tangente

TAN( )

ASIN: Calcular valor de arcoseno

ASIN( )

ACOS: Calcular valor de arcocoseno

ACOS( )

ATAN: Calcular valor de arcotangente

ATAN( )

NEG: Generar complemento a dos

-(in1)

TRUNC: Truncar a entero

TRUNC( )

ROUND: Redondear número

ROUND( )

((SIN(IN2) *
SIN(IN2) +
(SIN(IN3) *
SIN(IN3)) / IN3));
(SQR(SIN(IN2))
+
(SQR(COS(IN3))
/ IN2))

CEIL: Redondear número en coma flotan‐ CEIL( )
te al siguiente entero superior
FLOOR: Redondear número en coma flo‐ FLOOR( )
tante al siguiente entero inferior
1)

No es posible para el tipo de datos BYTE.

Programación del PLC
Manual de programación y manejo, 11/2019

767

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

I, Q, M, D, L, P o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante

Primera entrada disponible

IN2

Input

I, Q, M, D, L, P o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante

Segunda entrada disponible

INn

Input

I, Q, M, D, L, P o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante

Entradas insertadas adicio‐
nalmente

OUT

Output

I, Q, M, D, L, P
Secuencias de
bits, enteros, nú‐
meros en coma flo‐
tante

Salida a la que se transfiere
el resultado final.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
&$/&8/$7(
,17

ಯ7DJB,QSXWಯ

ಯ7DJB2XWSXWಯ

(1

(12

ಯ7DJB9DOXHBಯ

,1

,1,1 ,1 ,1
287

ಯ7DJB9DOXHBಯ

,1

ಯ7DJB9DOXHBಯ

,1

ಯ7DJB9DOXHBಯ

,1

ಯ7DJB5HVXOWಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:

768

Parámetro

Operando

Valor

IN1

Tag_Value_1

4

IN2

Tag_Value_2

4

IN3

Tag_Value_3

3

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Operando

Valor

IN4

Tag_Value_4

2

OUT

Tag_Result

12

Cuando la entrada "Tag_Input" devuelve el estado lógico "1", se ejecuta la instrucción
"Calcular". El valor del operando "Tag_Value_1" se suma al valor del operando "Tag_Value_2".
La suma se multiplica por el valor del operando "Tag_Value_3". El producto se divide por el
valor del operando "Tag_Value_4". El cociente se transfiere como resultado final al operando
"Tag_Result" de la salida OUT de la instrucción. Si no ocurren errores al ejecutar las distintas
instrucciones, la salida de habilitación ENO y el operando "Tag_Output" se ponen a "1".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Utilizar la instrucción "Calcular" (Página 7970)
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Ejemplo de cálculo de una ecuación (Página 7999)
Principios básicos de KOP (Página 7943)

ADD: Sumar
Descripción
La instrucción "Sumar" permite sumar el valor de la entrada IN1 al valor de la entrada IN2 y
consultar la suma en la salida OUT (OUT:= IN1+IN2).
El cuadro de la instrucción contiene en estado estacionario mín. 2 entradas (IN1 e IN2). El
número de entradas es ampliable. Las entradas insertadas se numeran en orden ascendente
en el cuadro. Al ejecutar la instrucción se suman los valores de todos los parámetros de
entrada disponibles. La suma se guarda en la salida OUT.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El resultado de la instrucción está fuera del rango permitido para el tipo de datos indicado
en la salida OUT.
● Un número en coma flotante tiene un valor no válido.

Programación del PLC
Manual de programación y manejo, 11/2019

769

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Sumar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Primer sumando

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Segundo sumando

INn

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Valores de entrada opciona‐
les que se suman.

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Suma

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

$''
,17
(1

ಯ7DJB9DOXHಯ

,1

ಯ7DJB9DOXHಯ

,1

ಯ7DJ2XWಯ
6

(12

287

ಯ7DJB5HVXOWಯ

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Sumar".
El valor del operando "Tag_Value1" se suma al valor del operando "Tag_Value2". El resultado
de la suma se almacena en el operando "Tag_Result". Si no ocurren errores al ejecutar la
instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y se activa la salida
"TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Seleccionar un tipo de datos (Página 7960)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

770

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

SUB: Restar
Descripción
La instrucción "Restar" permite restar el valor de la entrada IN2 del valor de la entrada IN1 y
consultar la diferencia en la salida OUT (OUT:= IN1-IN2).
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El resultado de la instrucción está fuera del rango permitido para el tipo de datos indicado
en la salida OUT.
● Un número en coma flotante tiene un valor no válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Restar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Minuendo

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Sustraendo

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Diferencia

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

68%
,17
(1

ಯ7DJB9DOXHಯ

,1

ಯ7DJB9DOXHಯ

,1

(12

287

ಯ7DJ2XWಯ
6

ಯ7DJB5HVXOWಯ

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Restar".
El valor del operando "Tag_Value2" se resta del valor del operando "Tag_Value1". El resultado
de la resta se almacena en el operando "Tag_Result". Si no ocurren errores al ejecutar la

Programación del PLC
Manual de programación y manejo, 11/2019

771

Instrucciones
4.1 Instrucciones
instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y se activa la salida
"TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

MUL: Multiplicar
Descripción
La instrucción "Multiplicar" permite multiplicar el valor de la entrada IN1 por el valor de la
entrada IN2 y consultar el producto en la salida OUT (OUT:= IN1*IN2).
El número de entradas del cuadro de la instrucción se puede ampliar. Las entradas insertadas
se numeran en orden ascendente en el cuadro. Al ejecutar la instrucción se multiplican los
valores de todos los parámetros de entrada disponibles. El producto se guarda en la salida
OUT.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada EN devuelve el estado lógico "0".
● El resultado está fuera del rango permitido para el tipo de datos indicado en la salida OUT.
● Un número en coma flotante tiene un valor no válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Multiplicar":

772

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Multiplicador

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Multiplicando

INn

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Valores de entrada opciona‐
les que se pueden multiplicar.

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Producto

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

08/
5($/
(1

ಯ7DJB9DOXHಯ

,1

ಯ7DJB9DOXHಯ

,1

ಯ7DJ2XWಯ
6

(12

287

ಯ7DJB5HVXOWಯ

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción
"Multiplicar". El valor del operando "Tag_Value1" se multiplica por el valor del operando
"Tag_Value2". El resultado de la multiplicación se almacena en el operando "Tag_Result". Si
no ocurren errores al ejecutar la instrucción, la salida de habilitación ENO devuelve el estado
lógico "1" y se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

DIV: Dividir
Descripción
La instrucción "Dividir" permite dividir el valor de la entrada IN1 por el valor de la entrada IN2
y consultar el cociente en la salida OUT (OUT := IN1/IN2).
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El resultado de la instrucción está fuera del rango permitido para el tipo de datos indicado
en la salida OUT.
● Un número en coma flotante tiene un valor no válido.

Programación del PLC
Manual de programación y manejo, 11/2019

773

Instrucciones
4.1 Instrucciones

Nota
División por el valor "0"
La división de un dividendo (IN1) por un divisor (IN2) con el valor "0" pone la salida de
habilitación (ENO) al estado lógico "TRUE".
El valor del cociente (OUT) se ve influido por el tipo de datos al realizar la división por "0":
● El tipo de datos es INT o LREAL: El valor del cociente (OUT) es "0".
● El tipo de datos es REAL: El valor del cociente (OUT) es el valor máximo (2143289344).

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Dividir":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Dividendo

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Divisor

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Valor del cociente

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

',9
5($/
(1

ಯ7DJB9DOXHಯ

,1

ಯ7DJB9DOXHಯ

,1

(12

287

ಯ7DJ2XWಯ
6

ಯ7DJB5HVXOWಯ

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Dividir".
El valor del operando "Tag_Value1" se divide por el valor del operando "Tag_Value2". El
resultado de la división se almacena en el operando "Tag_Result". Si no ocurren errores al
ejecutar la instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y se activa
la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

774

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Ejemplos de programación KOP (Página 7992)
Principios básicos de KOP (Página 7943)

MOD: Obtener resto de división
Descripción
La instrucción "Obtener resto de división" permite dividir el valor de la entrada IN1 por el valor
de la entrada IN2 y consultar el resto de la división en la salida OUT.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Obtener resto de división":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

Enteros

I, Q, M, D, L, P o
constante

Dividendo

IN2

Input

Enteros

I, Q, M, D, L, P o
constante

Divisor

OUT

Output

Enteros

I, Q, M, D, L, P

Resto de división

En la lista desplegable "Auto (???)" del cuadro de la instrucción se puede seleccionar el tipo de
datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
02'
ಯ7DJ,Qಯ

',17
(1

ಯ7DJB9DOXHಯ

,1

ಯ7DJB9DOXHಯ

,1

(12

287

ಯ7DJ2XWಯ
6

ಯ7DJB5HVXOWಯ

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Obtener
resto de división". El valor del operando "Tag_Value1" se divide por el valor del operando
"Tag_Value2". El resto de la división se almacena en el operando "Tag_Result". Si no ocurren

Programación del PLC
Manual de programación y manejo, 11/2019

775

Instrucciones
4.1 Instrucciones
errores al ejecutar la instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y
se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

NEG: Generar complemento a dos
Descripción
La instrucción "Generar complemento a dos" permite cambiar el signo del valor de la entrada
IN y consultar el resultado en la salida OUT. Por ejemplo, si la entrada IN tiene un valor positivo,
se deposita el equivalente negativo de este valor en la salida OUT.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El resultado de la instrucción está fuera del rango permitido para el tipo de datos indicado
en la salida OUT.
● Un número en coma flotante tiene un valor no válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Generar complemento a dos":
Parámetro

776

Declaración

Tipo de datos
S7-1200

S7-1500

Área de me‐ Descripción
moria

EN

Input

BOOL

BOOL

I, Q, M, D, L
o constante

Entrada de habilitación

ENO

Output

BOOL

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

SINT, INT,
DINT, núme‐
ros en coma
flotante

SINT, INT,
DINT,
LINT, nú‐
meros en
coma flo‐
tante

I, Q, M, D, L, Valor de entrada
P o constan‐
te

OUT

Output

SINT, INT,
DINT, núme‐
ros en coma
flotante

SINT, INT,
DINT,
LINT, nú‐
meros en
coma flo‐
tante

I, Q, M, D, L,
P

Complemento a dos del va‐
lor de entrada

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJ,QB9DOXHಯ

1(*
5($/
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJ2XWB9DOXHಯ

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Generar
complemento a dos". Se invierte el signo del valor de la entrada "TagIn_Value" y el resultado
se deposita en la salida "TagOut_Value". Si no ocurren errores al ejecutar la instrucción, la
salida de habilitación ENO devuelve el estado lógico "1" y se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

INC: Incrementar
Descripción
La instrucción "Incrementar" permite cambiar el valor del operando del parámetro IN/OUT al
siguiente valor superior y consultar el resultado. La ejecución de la instrucción "Incrementar"
se inicia solo si el estado lógico de la entrada de habilitación EN es "1". Si no ocurre ningún
rebase por exceso durante la ejecución, la salida de habilitación ENO también devuelve el
estado lógico "1".
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Un número en coma flotante tiene un valor no válido.

Programación del PLC
Manual de programación y manejo, 11/2019

777

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Incrementar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN/OUT

InOut

Enteros

I, Q, M, D, L

Valor que se incrementa.

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
,1&
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJB,Q2XWಯ

,17
(1

(12

ಯ7DJ2XWಯ

,1 287

Si los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1", el valor del operando
"Tag_InOut" se incrementa en uno y se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

DEC: Decrementar
Descripción
La instrucción "Decrementar" permite cambiar el valor del operando del parámetro IN/OUT al
siguiente valor inferior y consultar el resultado. La ejecución de la instrucción "Decrementar" se
inicia si el estado lógico de la entrada de habilitación EN es "1". Si no se rebasa por defecto el
rango de valores del tipo de datos seleccionado durante la ejecución, la salida ENO devuelve
asimismo el estado lógico "1".

778

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Un número en coma flotante tiene un valor no válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Decrementar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN/OUT

InOut

Enteros

I, Q, M, D, L

Valor que se decrementa.

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
'(&
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJB,Q2XWಯ

,17
(1

(12

ಯ7DJ2XWಯ

,1 287

Si los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1", el valor del operando
"Tag_InOut" se decrementa en uno y se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

779

Instrucciones
4.1 Instrucciones

ABS: Calcular valor absoluto
Descripción
La instrucción "Calcular valor absoluto" permite calcular el valor absoluto del valor indicado en
la entrada IN. El resultado de la instrucción se devuelve en la salida OUT y se puede consultar
allí.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Un número en coma flotante tiene un valor no válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor absoluto":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de me‐ Descripción
moria

EN

Input

BOOL

BOOL

I, Q, M, D, L Entrada de habilitación
o constante

ENO

Output

BOOL

BOOL

I, Q, M, D, L Salida de habilitación

IN

Input

SINT, INT,
DINT, nú‐
meros en
coma flo‐
tante

SINT, INT,
DINT,
LINT, nú‐
meros en
coma flo‐
tante

I, Q, M, D,
Valor de entrada
L, P o cons‐
tante

OUT

Output

SINT, INT,
DINT, nú‐
meros en
coma flo‐
tante

SINT, INT,
DINT,
LINT, nú‐
meros en
coma flo‐
tante

I, Q, M, D,
L, P

Valor absoluto del valor de
entrada

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJ,QB9DOXHಯ

780

$%6
5($/
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJ2XWB9DOXHಯ

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

-6.234

OUT

TagOut_Value

6.234

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Calcular
valor absoluto". La instrucción calcula el valor absoluto del valor de la entrada "TagIn_Value"
y deposita el resultado en la salida "TagOut_Value". Si no ocurren errores al ejecutar la
instrucción, se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

MIN: Determinar mínimo
Descripción
La instrucción "Determinar mínimo" compara los valores de las entradas disponibles y escribe
el valor menor en la salida OUT. El número de entradas se puede ampliar en el cuadro de la
instrucción mediante entradas adicionales. Las entradas se numeran de forma ascendente en
el cuadro.
Para la ejecución de la instrucción se deben indicar como mínimo dos valores de entrada y
como máximo 100.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● La conversión implícita de los tipos de datos falla durante la ejecución de la instrucción.
● Un número en coma flotante tiene un valor no válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Determinar mínimo":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

Programación del PLC
Manual de programación y manejo, 11/2019

781

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN1

Input

Enteros, números
en coma flotante,
DTL, DT

I, Q, M, D, L, P o
constante

Primer valor de entrada

IN2

Input

Enteros, números
en coma flotante,
DTL, DT

I, Q, M, D, L, P o
constante

Segundo valor de entrada

INn

Input

Enteros, números
en coma flotante,
DTL, DT

I, Q, M, D, L, P o
constante

Entradas insertadas adicio‐
nalmente cuyos valores se
comparan

OUT

Output

Enteros, números
en coma flotante,
DTL, DT

I, Q, M, D, L, P

Resultado

Si la verificación CEI no está activada, también es posible utilizar variables del tipo de datos TIME,
LTIME, TOD, LTOD, DATE y LDT seleccionando como tipo de datos de la instrucción un número entero
o una secuencia de bits de igual longitud. (P. ej. en lugar de TIME => DINT, UDINT o DWORD = 32 bits)

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

0,1
,17

ಯ7DJ2XWಯ

(1

(12

ಯ7DJ,QB9DOXHಯ

,1

287

ಯ7DJ,QB9DOXHಯ

,1

ಯ7DJ,QB9DOXHಯ

,1

ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN1

TagIn_Value1

12222

IN2

TagIn_Value2

14444

IN3

TagIn_Value3

13333

OUT

TagOut_Value

12222

Si los operandos "TagIn_1" y "TagIn_2" tienen el estado lógico "1", se ejecuta la instrucción. La
instrucción compara los valores de los operandos indicados y copia el valor menor
("TagIn_Value1") en la salida "TagOut_Value". Si no ocurren errores al ejecutar la instrucción,
se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

782

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

MAX: Determinar máximo
Descripción
La instrucción "Determinar máximo" compara los valores de las entradas disponibles y escribe
el valor mayor en la salida OUT. El número de entradas se puede ampliar en el cuadro de la
instrucción mediante entradas adicionales. Las entradas se numeran de forma ascendente en
el cuadro.
Para la ejecución de la instrucción se deben indicar como mínimo dos valores de entrada y
como máximo 100.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● La conversión implícita de los tipos de datos falla durante la ejecución de la instrucción.
● Un número en coma flotante tiene un valor no válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Determinar máximo":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

Enteros, números
en coma flotante,
DTL, DT

I, Q, M, D, L, P o
constante

Primer valor de entrada

IN2

Input

Enteros, números
en coma flotante,
DTL, DT

I, Q, M, D, L, P o
constante

Segundo valor de entrada

INn

Input

Enteros, números
en coma flotante,
DTL, DT

I, Q, M, D, L, P o
constante

Entradas insertadas adicio‐
nalmente cuyos valores se
comparan

OUT

Output

Enteros, números
en coma flotante,
DTL, DT

I, Q, M, D, L, P

Resultado

Si la verificación CEI no está activada, también es posible utilizar variables del tipo de datos TIME,
LTIME, TOD, LTOD, DATE y LDT seleccionando como tipo de datos de la instrucción un número entero
o una secuencia de bits de igual longitud. (P. ej. en lugar de TIME => DINT, UDINT o DWORD = 32 bits)

Programación del PLC
Manual de programación y manejo, 11/2019

783

Instrucciones
4.1 Instrucciones
En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

0$;
,17

ಯ7DJ2XWಯ

(1

(12

ಯ7DJ,QB9DOXHಯ

,1

287

ಯ7DJ,QB9DOXHಯ

,1

ಯ7DJ,QB9DOXHಯ

,1

ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN1

TagIn_Value1

12222

IN2

TagIn_Value2

14444

IN3

TagIn_Value3

13333

OUT

TagOut_Value

14444

Si los operandos "TagIn_1" y "TagIn_2" tienen el estado lógico "1", se ejecuta la instrucción. La
instrucción compara los valores de los operandos indicados y copia el valor mayor
("TagIn_Value2") en la salida "TagOut_Value". Si no ocurren errores al ejecutar la instrucción,
se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

LIMIT: Ajustar valor límite
Descripción
La instrucción "Ajustar valor límite" limita el valor de la entrada IN a los valores de las entradas
MN y MX. Si el valor de la entrada IN cumple la condición MN <= IN <= MX, se copia en la salida
OUT. Si no se cumple la condición y el valor de entrada IN es menor que el límite inferior MN,
la salida OUT adopta el valor de la entrada MN. Si el límite superior MX se rebasa por exceso,
la salida OUT adopta el valor de la entrada MX.

784

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Si el valor de la entrada MN es mayor que el de la entrada MX, el resultado será el valor
indicado en el parámetro IN y la salida de habilitación ENO será "0".
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Las variables indicadas no son del mismo tipo de datos.
● Un operando tiene un valor no válido.
● El valor de la entrada MN es mayor que el valor de la entrada MX.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Ajustar valor límite":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de me‐
moria

Descripción

EN

Input

BOOL

BOOL

I, Q, M, D, L
o constante

Entrada de habilitación

ENO

Output

BOOL

BOOL

I, Q, M, D, L

Salida de habilitación

MN

Input

Enteros, nú‐
meros en co‐
ma flotante,
TIME, TOD,
DATE, DTL,
DT

Enteros, nú‐ I, Q, M, D, L, Límite inferior
meros en co‐ P o constan‐
ma flotante,
te
TIME, LTI‐
ME, TOD,
LTOD, DA‐
TE, LDT,
DTL, DT

IN

Input

Enteros, nú‐
meros en co‐
ma flotante,
TIME, TOD,
DATE, DTL,
DT

Enteros, nú‐ I, Q, M, D, L, Valor de entrada
meros en co‐ P o constan‐
ma flotante,
te
TIME, LTI‐
ME, TOD,
LTOD, DA‐
TE, LDT,
DTL, DT

MX

Input

Enteros, nú‐
meros en co‐
ma flotante,
TIME, TOD,
DATE, DTL,
DT

Enteros, nú‐ I, Q, M, D, L, Límite superior
meros en co‐ P o constan‐
ma flotante,
te
TIME, LTI‐
ME, TOD,
LTOD, DA‐
TE, LDT,
DTL, DT

Programación del PLC
Manual de programación y manejo, 11/2019

785

Instrucciones
4.1 Instrucciones
Parámetro
OUT

Declaración
Output

Tipo de datos

Área de me‐
moria

S7-1200

S7-1500

Enteros, nú‐
meros en co‐
ma flotante,
TIME, TOD,
DATE, DTL,
DT

Enteros, nú‐ I, Q, M, D, L,
meros en co‐ P
ma flotante,
TIME, LTI‐
ME, TOD,
LTOD, DA‐
TE, LDT,
DTL, DT

Descripción
Resultado

Los tipos de datos TOD, LTOD, DATE y LDT solo se pueden utilizar cuando la verificación CEI está
desactivada.

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJB01ಯ
ಯ7DJB9DOXHಯ
ಯ7DJB0;ಯ

/,0,7
,17
(1

(12

01

287

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

,1
0;

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

MN

Tag_MN

12000

IN

Tag_Value

8000

MX

Tag_MX

16000

OUT

Tag_Result

12000

Si los operandos "TagIn_1" y "TagIn_2" tienen el estado lógico "1", se ejecuta la instrucción. El
valor del operando "Tag_Value" se compara con los valores de los operandos "Tag_MN" y
"Tag_MX". Puesto que el valor del operando "Tag_Value" es menor que el valor límite inferior,
el valor del operando "Tag_MN" se copia en la salida "Tag_Result". Si no ocurren errores al
ejecutar la instrucción, se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

786

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

SQR: Calcular cuadrado
Descripción
La instrucción "Calcular cuadrado" permite elevar al cuadrado el valor de la entrada IN
correspondiente a un número en coma flotante y escribir el resultado en la salida OUT.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular cuadrado":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Cuadrado del valor de entra‐
da

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJB9DOXHಯ

Programación del PLC
Manual de programación y manejo, 11/2019

645
5($/
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

787

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

Tag_Value

5.0

OUT

Tag_Result

25.0

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Calcular
cuadrado". La instrucción eleva al cuadrado el valor del operando "Tag_Value" y deposita el
resultado en la salida "Tag_Result". Si no ocurren errores al ejecutar la instrucción, se activa
la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)
Insertar elementos KOP (Página 7955)
Editar elementos KOP (Página 7974)
Cablear operandos en instrucciones KOP (Página 7981)
Seleccionar el tipo de datos de un elemento KOP (Página 7960)

SQRT: Calcular raíz cuadrada
Descripción
La instrucción "Calcular raíz cuadrada" permite extraer la raíz cuadrada al valor de la entrada
IN correspondiente a un número en coma flotante y escribir el resultado en la salida OUT. La
instrucción da un resultado positivo si el valor de entrada es mayor que cero. En los valores de
entrada menores que cero, la salida OUT devuelve un número en coma flotante no válido. Si
el valor de la entrada IN es "0", el resultado también es "0".
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.
● El valor de la entrada IN es negativo.

788

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular raíz cuadrada":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Raíz cuadrada del valor de
entrada

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJB9DOXHಯ

6457
5($/
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

Tag_Value

25.0

OUT

Tag_Result

5.0

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Calcular
raíz cuadrada". La instrucción extrae la raíz cuadrada del valor del operando "Tag_Value" y
deposita el resultado en la salida "Tag_Result". Si no ocurren errores al ejecutar la instrucción,
se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Insertar elementos KOP (Página 7955)
Editar elementos KOP (Página 7974)

Programación del PLC
Manual de programación y manejo, 11/2019

789

Instrucciones
4.1 Instrucciones
Cablear operandos en instrucciones KOP (Página 7981)
Seleccionar el tipo de datos de un elemento KOP (Página 7960)

LN: Calcular logaritmo natural
Descripción
La instrucción "Calcular logaritmo natural" permite calcular el logaritmo natural en base e (e =
2,718282) del valor de la entrada IN. El resultado se deposita en la salida OUT y se puede
consultar allí. La instrucción da un resultado positivo si el valor de entrada es mayor que cero.
En los valores de entrada menores que cero, la salida OUT devuelve un número en coma
flotante no válido.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.
● El valor de la entrada IN es negativo.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular logaritmo natural":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Logaritmo natural del valor
de entrada

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJB9DOXHಯ

790

/1
5($/
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Calcular
logaritmo natural". La instrucción calcula el logaritmo natural del valor de la entrada
"Tag_Value" y deposita el resultado en la salida "Tag_Result". Si no ocurren errores al ejecutar
la instrucción, se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

EXP: Calcular valor exponencial
Descripción
La instrucción "Calcular valor exponencial" permite calcular la potencia en base e (e =
2,718282) del valor indicado en la entrada IN. El resultado se emite en la salida OUT y se
puede consultar allí (OUT = eIN).
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor exponencial":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Valor exponencial del valor
de entrada IN

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

791

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
(;3
5($/

ಯ7DJ,Qಯ

ಯ7DJB9DOXHಯ

(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Calcular
valor exponencial". La instrucción calcula la potencia en base e del valor del operando
"Tag_Value" y deposita el resultado en la salida "Tag_Result". Si no ocurren errores al ejecutar
la instrucción, se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

SIN: Calcular valor de seno
Descripción
La instrucción "Calcular valor de seno" permite calcular el seno del ángulo. El tamaño del
ángulo se indica en radianes en la entrada IN. El resultado de la instrucción se devuelve en la
salida OUT y se puede consultar allí.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor de seno":

792

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Tamaño del ángulo en radia‐
nes

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Seno del ángulo indicado

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJB9DOXHಯ

6,1
5($/
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

Tag_Value

+1,570796 (π/2)

OUT

Tag_Result

1.0

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Calcular
valor de seno". La instrucción calcula el seno del ángulo indicado en la entrada "Tag_Value" y
deposita el resultado en la salida "Tag_Result". Si no ocurren errores al ejecutar la instrucción,
se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

COS: Calcular valor de coseno
Descripción
La instrucción "Calcular valor de coseno" permite calcular el coseno de un ángulo. El tamaño
del ángulo se indica en radianes en la entrada IN. El resultado de la instrucción se devuelve en
la salida OUT y se puede consultar allí.

Programación del PLC
Manual de programación y manejo, 11/2019

793

Instrucciones
4.1 Instrucciones
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor de coseno":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Tamaño del ángulo en radia‐
nes

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Coseno del ángulo indicado

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJB9DOXHಯ

&26
5($/
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

Tag_Value

+1.570796 (π/2)

OUT

Tag_Result

0

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Calcular
valor de coseno". La instrucción calcula el coseno del ángulo indicado en la entrada
"Tag_Value" y deposita el resultado en la salida "Tag_Result". Si no ocurren errores al ejecutar
la instrucción, se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

794

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

TAN: Calcular valor de tangente
Descripción
La instrucción "Calcular valor de tangente" permite calcular la tangente de un ángulo. El
tamaño del ángulo se indica en radianes en la entrada IN. El resultado de la instrucción se
devuelve en la salida OUT y se puede consultar allí.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor de tangente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Tamaño del ángulo en radia‐
nes

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Tangente del ángulo indicado

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

(

ಯ7DJB9DOXHಯ

7$1
5($/
(1

287

,1

(12

Programación del PLC
Manual de programación y manejo, 11/2019

ಯ7DJB5HVXOWಯ
$

795

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

Tag_Value

+3,141593 (π)

OUT

Tag_Result

0

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
calcula la tangente del ángulo indicado en la entrada "Tag_Value" y deposita el resultado en la
salida "Tag_Result". Si no ocurren errores al ejecutar la instrucción, se activa la salida
"TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

ASIN: Calcular valor de arcoseno
Descripción
La instrucción "Calcular valor de arcoseno" permite calcular a partir del valor de seno
especificado en la entrada IN el tamaño del ángulo que equivale a este valor. En la entrada IN
solo se pueden indicar números en coma flotante válidos, comprendidos en un rango de
valores entre -1 y +1. El tamaño del ángulo calculado se deposita en radianes en la salida OUT
y puede estar comprendido entre -π/2 y +π/2.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.
● El valor de la entrada IN está fuera del rango de valores permitido (-1 hasta +1).

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor de arcoseno":

796

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de seno

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Tamaño del ángulo en radia‐
nes

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJB9DOXHಯ

$6,1
5($/
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

Tag_Value

1.0

OUT

Tag_Result

+1.570796 (π/2)

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Calcular
valor de arcoseno". La instrucción calcula el tamaño del ángulo que equivale al valor de seno
de la entrada "Tag_Value". El resultado de la instrucción se deposita en la salida "Tag_Result".
Si no ocurren errores al ejecutar la instrucción, se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

797

Instrucciones
4.1 Instrucciones

ACOS: Calcular valor de arcocoseno
Descripción
La instrucción "Calcular valor de arcocoseno" permite calcular a partir del valor de coseno
indicado en la entrada IN el tamaño del ángulo que equivale a este valor. En la entrada IN solo
se pueden indicar números en coma flotante válidos, comprendidos en un rango de valores
entre -1 y +1. El tamaño del ángulo calculado se deposita en radianes en la salida OUT y puede
estar comprendido entre 0 y +π.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.
● El valor de la entrada IN está fuera del rango de valores permitido (-1 hasta +1).

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor de arcocoseno":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de coseno

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Tamaño del ángulo en radia‐
nes

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJB9DOXHಯ

798

$&26
5($/
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

Tag_Value

0

OUT

Tag_Result

+1.570796 (π/2)

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Calcular
valor de arcocoseno". La instrucción calcula el tamaño del ángulo que equivale al valor de
coseno de la entrada "Tag_Value". El resultado de la instrucción se deposita en la salida
"Tag_Result". Si no ocurren errores al ejecutar la instrucción, se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

ATAN: Calcular valor de arcotangente
Descripción
La instrucción "Calcular valor de arcotangente" permite calcular a partir del valor de tangente
indicado en la entrada IN el tamaño del ángulo que corresponde a este valor. En la entrada IN
solo se pueden indicar números en coma flotante válidos (o -NaN/+NaN). El tamaño del ángulo
calculado se deposita en radianes en la salida OUT y puede estar comprendido entre -π/2 y
+π/2.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Calcular valor de arcotangente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de tangente

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Tamaño del ángulo en radia‐
nes

Programación del PLC
Manual de programación y manejo, 11/2019

799

Instrucciones
4.1 Instrucciones
En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJB9DOXHಯ

$7$1
5($/
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

Tag_Value

1.0

OUT

Tag_Result

+0,785398 (π/4)

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Calcular
valor de arcotangente". La instrucción calcula el tamaño del ángulo que corresponde al valor
de tangente de la entrada "Tag_Value". El resultado de la instrucción se deposita en la salida
"Tag_Result". Si no ocurren errores al ejecutar la instrucción, se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Números en coma flotante no válidos (Página 263)
Principios básicos de KOP (Página 7943)

FRAC: Determinar decimales
Descripción
La instrucción "Determinar decimales" permite determinar los decimales del valor de la entrada
IN. El resultado de la consulta se deposita en la salida OUT y se puede consultar allí. Si la
entrada IN lleva, p. ej., el valor 123,4567, la salida OUT proporciona el valor 0,4567.

800

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada IN no es un número en coma flotante válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Determinar decimales":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor cuyos decimales se de‐
terminan.

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Decimales del valor de la en‐
trada IN

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

ಯ7DJB9DOXHಯ

)5$&
5($/

ಯ7DJ2XWಯ

(1

(12

,1

287

ಯ7DJB5HVXOWಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

Tag_Value

2.555

OUT

Tag_Result

0.555

Si el estado lógico de los operandos "TagIn_1" y "TagIn_2" es "1", se inicia la instrucción
"Determinar decimales". Los decimales del valor del operando "Tag_Value" se copian en el
operando "Tag_Result". Si no ocurren errores al ejecutar la instrucción, la salida ENO devuelve
el estado lógico "1" y se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Programación del PLC
Manual de programación y manejo, 11/2019

801

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

EXPT: Elevar a potencia
Descripción
La instrucción "Elevar a potencia" permite elevar el valor de la entrada IN1 a la potencia del
valor de la entrada IN2. El resultado de la operación se deposita en la salida OUT, donde se
puede consultar (OUT = IN1IN2).
La entrada IN1 solo puede tener asignados números en coma flotante válidos. A la entrada IN2
también se pueden asignar números enteros.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Al ejecutar la instrucción se producen errores, p. ej. se produce un rebase por exceso.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Elevar a potencia":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor base

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Valor del exponente

OUT

Output

Números en coma
flotante

I, Q, M, D, L, P

Resultado

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

802

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
(;37
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

5($/

5($/

(1

(12

ಯ7DJB9DOXHಯ

,1

287

ಯ7DJB9DOXHಯ

,1

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

Cuando los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1", se inicia la
instrucción "Elevar a potencia". El valor del operando "Tag_Value1" se eleva a la potencia del
valor del operando "Tag_Value2". El resultado se deposita en la salida "Tag_Result". Si no
ocurren errores al ejecutar la instrucción, la salida de habilitación ENO devuelve el estado
lógico "1" y se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

Transferencia
MOVE: Copiar valor
Descripción
La instrucción "Copiar valor" transfiere el contenido del operando de la entrada IN al operando
de la salida OUT1. La transferencia se efectúa siempre por orden ascendente de direcciones.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El tipo de datos del parámetro IN no puede convertirse al tipo de datos indicado en el
parámetro OUT1.

Programación del PLC
Manual de programación y manejo, 11/2019

803

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra las posibles transferencias para la familia de CPU S7-1200:
Origen (IN)

Destino (OUT1)
Con verificación CEI

Sin verificación CEI

BYTE

BYTE, WORD, DWORD

BYTE, WORD, DWORD, SINT, USINT, INT, UINT,
DINT, UDINT, TIME, DATE ,TOD, CHAR

WORD

WORD, DWORD

BYTE, WORD, DWORD, SINT, USINT, INT, UINT,
DINT, UDINT, TIME, DATE, TOD, CHAR

DWORD

DWORD

BYTE, WORD, DWORD, SINT, USINT, INT, UINT,
DINT, UDINT, REAL, TIME, DATE, TOD, CHAR

SINT

SINT

BYTE, WORD, DWORD, SINT, USINT, INT, UINT,
DINT, UDINT, TIME, DATE, TOD

USINT

USINT, UINT, UDINT

BYTE, WORD, DWORD, SINT, USINT, INT, UINT,
DINT, UDINT, TIME, DATE, TOD

INT

INT

BYTE, WORD, DWORD, SINT, USINT, INT, UINT,
DINT, UDINT, TIME, DATE, TOD

UINT

UINT, UDINT

BYTE, WORD, DWORD, SINT, USINT, INT, UINT,
DINT, UDINT, TIME, DATE, TOD

DINT

DINT

BYTE, WORD, DWORD, SINT, USINT, INT, UINT,
DINT, UDINT, TIME, DATE, TOD

UDINT

UDINT

BYTE, WORD, DWORD, SINT, USINT, INT, UINT,
DINT, UDINT, TIME, DATE, TOD

REAL

REAL

DWORD, REAL

LREAL

LREAL

LREAL

TIME

TIME

BYTE, WORD, DWORD, SINT, USINT, INT, UINT,
DINT, UDINT, TIME

DATE

DATE

BYTE, WORD, DWORD, SINT, USINT, INT, UINT,
DINT, UDINT, DATE

TOD

TOD

BYTE, WORD, DWORD, SINT, USINT, INT, UINT,
DINT, UDINT, TOD

DTL

DTL

DTL

CHAR

CHAR

BYTE, WORD, DWORD, CHAR, carácter de una ca‐
dena1)

WCHAR

WCHAR

BYTE, WORD, DWORD, CHAR, WCHAR, carácter
de una cadena1)

Carácter de
una cadena1)

Carácter de una cadena

CHAR, WCHAR, carácter de una cadena

ARRAY2)

ARRAY

ARRAY

STRUCT

STRUCT

STRUCT

Tipo de datos
PLC (UDT)

Tipo de datos PLC (UDT)

Tipo de datos PLC (UDT)

IEC_TIMER

IEC_TIMER

IEC_TIMER

IEC_SCOUN‐
TER

IEC_SCOUNTER

IEC_SCOUNTER

IEC_USCOUN‐
TER

IEC_USCOUNTER

IEC_USCOUNTER

IEC_COUNTER IEC_COUNTER

804

IEC_COUNTER

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Origen (IN)

Destino (OUT1)
Con verificación CEI

Sin verificación CEI

IEC_UCOUN‐
TER

IEC_UCOUNTER

IEC_UCOUNTER

IEC_DCOUN‐
TER

IEC_DCOUNTER

IEC_DCOUNTER

IEC_UDCOUN‐
TER

IEC_UDCOUNTER

IEC_UDCOUNTER

La tabla siguiente muestra las posibles transferencias para la familia de CPU S7-1500:
Origen (IN)

Destino (OUT1)
Con verificación CEI

Sin verificación CEI

BYTE

BYTE, WORD, DWORD,
LWORD

BYTE, WORD, DWORD, LWORD, SINT, USINT, INT,
UINT, DINT, UDINT, LINT, ULINT, TIME, LTIME,
LDT, DATE ,TOD, LTOD, CHAR

WORD

WORD, DWORD, LWORD

BYTE, WORD, DWORD, LWORD, SINT, USINT, INT,
UINT, DINT, UDINT, LINT, ULINT, S5TIME, TIME,
LTIME, LDT, DATE, TOD, LTOD, CHAR

DWORD

DWORD, LWORD

BYTE, WORD, DWORD, LWORD, SINT, USINT, INT,
UINT, DINT, UDINT, LINT, ULINT, REAL, TIME, LTI‐
ME, LDT, DATE, TOD, LTOD, CHAR

LWORD

LWORD

BYTE, WORD, DWORD, LWORD, SINT, USINT, INT,
UINT, DINT, UDINT, LINT, ULINT, LREAL, TIME,
LTIME, LDT, DATE, TOD, LTOD, CHAR

SINT

SINT

BYTE, WORD, DWORD, LWORD, SINT, USINT, INT,
UINT, DINT, UDINT, LINT, ULINT, TIME, LTIME,
LDT, DATE, TOD, LTOD

USINT

USINT, UINT, UDINT,
ULINT

BYTE, WORD, DWORD, LWORD, SINT, USINT, INT,
UINT, DINT, UDINT, LINT, ULINT, TIME, LTIME,
LDT, DATE, TOD, LTOD

INT

INT

BYTE, WORD, DWORD, LWORD, SINT, USINT, INT,
UINT, DINT, UDINT, LINT, ULINT, TIME, LTIME,
LDT, DATE, TOD, LTOD

UINT

UINT, UDINT, ULINT

BYTE, WORD, DWORD, LWORD, SINT, USINT, INT,
UINT, DINT, UDINT, LINT, ULINT, TIME, LTIME,
LDT, DATE, TOD. LTOD

DINT

DINT

BYTE, WORD, DWORD, LWORD, SINT, USINT, INT,
UINT, DINT, UDINT, LINT, ULINT, TIME, LTIME,
LDT, DATE, TOD, LTOD

UDINT

UDINT, ULINT

BYTE, WORD, DWORD, LWORD, SINT, USINT, INT,
UINT, DINT, UDINT, LINT, ULINT, TIME, LTIME,
LDT, DATE, TOD, LTOD

LINT

LINT

BYTE, WORD, DWORD, LWORD, SINT, USINT, INT,
UINT, DINT, UDINT, LINT, ULINT, TIME, LTIME,
LDT, DATE, TOD, LTOD

ULINT

ULINT

BYTE, WORD, DWORD, LWORD, SINT, USINT, INT,
UINT, DINT, UDINT, LINT, ULINT, TIME, LTIME,
LDT, DATE, TOD, LTOD

REAL

REAL

DWORD, REAL

LREAL

LREAL

LWORD, LREAL

Programación del PLC
Manual de programación y manejo, 11/2019

805

Instrucciones
4.1 Instrucciones
Origen (IN)

806

Destino (OUT1)
Con verificación CEI

Sin verificación CEI

S5TIME

S5TIME

WORD, S5TIME

TIME

TIME

BYTE, WORD, DWORD, LWORD, SINT, USINT, INT,
UINT, DINT, UDINT, LINT, ULINT, TIME

LTIME

LTIME

BYTE, WORD, DWORD, LWORD, SINT, USINT, INT,
UINT, DINT, UDINT, LINT, ULINT, LTIME

DATE

DATE

BYTE, WORD, DWORD, LWORD, SINT, USINT, INT,
UINT, DINT, UDINT, LINT, ULINT, DATE

DT

DT

DT

LDT

LDT

BYTE, WORD, DWORD, LWORD, SINT, USINT, INT,
UINT, DINT, UDINT, LINT, ULINT, LDT

TOD

TOD

BYTE, WORD, DWORD, LWORD, SINT, USINT, INT,
UINT, DINT, UDINT, LINT, ULINT, TOD

LTOD

LTOD

BYTE, WORD, DWORD, LWORD, SINT, USINT, INT,
UINT, DINT, UDINT, LINT, ULINT, LTOD

DTL

DTL

DTL

CHAR

CHAR

BYTE, WORD, DWORD, LWORD, CHAR, carácter
de una cadena1)

WCHAR

WCHAR

BYTE, WORD, DWORD, LWORD, CHAR, WCHAR,
carácter de una cadena1)

Carácter de
una cadena1)

Carácter de una cadena

CHAR, WCHAR, carácter de una cadena

ARRAY2)

ARRAY

ARRAY

STRUCT

STRUCT

STRUCT

COUNTER

COUNTER, WORD, INT

WORD, DWORD, INT, UINT, DINT, UDINT

TIMER

TIMER, WORD, INT

WORD, DWORD, INT, UINT, DINT, UDINT

Tipo de datos
PLC (UDT)

Tipo de datos PLC (UDT)

Tipo de datos PLC (UDT)

IEC_TIMER

IEC_TIMER

IEC_TIMER

IEC_LTIMER

IEC_LTIMER

IEC_LTIMER

IEC_SCOUN‐
TER

IEC_SCOUNTER

IEC_SCOUNTER

IEC_USCOUN‐
TER

IEC_USCOUNTER

IEC_USCOUNTER

IEC_COUNTER IEC_COUNTER

IEC_COUNTER

IEC_UCOUN‐
TER

IEC_UCOUNTER

IEC_UCOUNTER

IEC_DCOUN‐
TER

IEC_DCOUNTER

IEC_DCOUNTER

IEC_UDCOUN‐
TER

IEC_UDCOUNTER

IEC_UDCOUNTER

IEC_LCOUN‐
TER

IEC_LCOUNTER

IEC_LCOUNTER

IEC_ULCOUN‐
TER

IEC_ULCOUNTER

IEC_ULCOUNTER

REF()

No se realiza ninguna conversión del tipo de datos. La variable transferida debe
coincidir exactamente con el tipo de datos de destino.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La instrucción "Copiar valor" también permite transferir caracteres individuales de una
cadena a operandos del tipo de datos CHAR o WCHAR. El número del carácter que se va a
transferir se indica entre corchetes al lado del nombre del operando. Si se indica "MyString[2]",
se transfiere p. ej. el segundo carácter de la cadena de caracteres "MyString". Asimismo, es
posible transferir operandos del tipo de datos CHAR o WCHAR a caracteres individuales de
una cadena de caracteres. También es posible reemplazar un carácter específico de una
cadena de caracteres por el carácter de otra cadena de caracteres.
1)

Solo es posible transferir matrices enteras (ARRAY) si los elementos de matriz de los
operandos de la entrada IN y de la salida OUT1 son del mismo tipo de datos.

2)

Si la longitud de bits del tipo de datos de la entrada IN supera la longitud de bits del tipo de datos
de la salida OUT1, se pierden los bits más significativos del valor de origen. Si la longitud de
bit del tipo de datos de la entrada IN es inferior a la longitud de bit del tipo de datos de la salida
OUT1, se sobrescriben con ceros los bits más significativos del valor de destino.
El cuadro de la instrucción contiene en estado inicial 1 salida (OUT1). El número de salidas es
ampliable. Las salidas insertadas se numeran en orden ascendente en el cuadro. Al ejecutar
la instrucción se transfiere el contenido del operando de la entrada IN a todas las salidas
disponibles. El cuadro de la instrucción no se puede ampliar si se transfieren tipos de datos
estructurados (DTL, STRUCT, ARRAY) o caracteres de una cadena.
Para copiar operandos del tipo de datos ARRAY pueden utilizarse también las instrucciones
"Copiar área" (MOVE_BLK) y "Copiar área sin interrupciones" (UMOVE_BLK). Los operandos
del tipo de datos STRING o WSTRING se pueden copiar con la instrucción "Desplazar cadena
de caracteres" (S_MOVE).

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Copiar valor":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de memo‐ Descripción
ria

EN

Input

BOOL

BOOL

I, Q, M, D, L o
constante

Entrada de ha‐
bilitación

ENO

Output

BOOL

BOOL

I, Q, M, D, L

Salida de habi‐
litación

Programación del PLC
Manual de programación y manejo, 11/2019

807

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de memo‐ Descripción
ria

IN

Input

Secuencias de
bits, enteros,
números en co‐
ma flotante,
tiempos, fecha
y hora, CHAR,
WCHAR,
STRUCT,
ARRAY, tipos
de datos IEC,
tipo de datos
PLC (UDT)

Secuencias de I, Q, M, D, L o
bits, enteros,
constante
números en co‐
ma flotante,
tiempos, fecha
y hora, CHAR,
WCHAR,
STRUCT,
ARRAY, TI‐
MER, COUN‐
TER, tipos de
datos IEC, tipo
de datos PLC
(UDT)

Valor de origen

OUT1

Output

Secuencias de
bits, enteros,
números en co‐
ma flotante,
tiempos, fecha
y hora, CHAR,
WCHAR,
STRUCT,
ARRAY, tipos
de datos IEC,
tipo de datos
PLC (UDT)

Secuencias de I, Q, M, D, L
bits, enteros,
números en co‐
ma flotante,
tiempos, fecha
y hora, CHAR,
WCHAR,
STRUCT,
ARRAY, TI‐
MER, COUN‐
TER, tipos de
datos IEC, tipo
de datos PLC
(UDT)

Operando al
que se transfie‐
re el valor de
origen.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,Qಯ

ಯ7DJ,QB9DOXHಯ

029(
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

0011 1111 1010 1111

OUT1

TagOut_Value

0011 1111 1010 1111

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
copia los contenidos del operando "TagIn_Value" en el operando "TagOut_Value" y pone la
salida "TagOut" al estado lógico "1".

808

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)
Nota
Encontrará más información sobre la instrucción MOVE en el Siemens Industry Online
Support, en el artículo siguiente:
¿Cómo se copian áreas de memoria y datos estructurados entre dos bloques de datos en
STEP 7 (TIA Portal)?
https://support.industry.siemens.com/cs/ww/es/view/42603881 (https://
support.industry.siemens.com/cs/ww/es/view/42603881)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
MOVE_BLK: Copiar área (Página 820)
UMOVE_BLK: Copiar área sin interrupciones (Página 827)
S_MOVE: Desplazar cadena de caracteres (Página 2271)
Principios básicos de KOP (Página 7943)

Deserialize: Deserializar
Descripción
La instrucción "Deserializar" reconvierte la forma de representación secuencial de un tipo de
datos PLC (UDT), STRUCT o ARRAY of <tipo de datos> y rellena todo su contenido.
El área de memoria en la que se encuentra la forma de representación secuencial de un tipo
de datos PLC (UDT), STRUCT o ARRAY of <tipo de datos> debe ser del tipo de datos ARRAY
of BYTE o ARRAY of CHAR y tener declarado el acceso estándar en la versión 1.0. A partir de
la versión 2.0 se permiten también áreas de memoria optimizadas. La capacidad del área de
memoria estándar es de 64 KB. Antes de la conversión asegúrese de que hay suficiente
memoria disponible. Si el área de memoria se ha rellenado utilizando la instrucción "Serializar"
y se han insertado bytes de relleno, estos no se tendrán en cuenta en la conversión.
Se recomienda definir a "0" el límite inferior del ARRAY, ya que entonces el índice dentro del
ARRAY se corresponde con el valor del parámetro POS, p. ej. ARRAY[0] = POS 0. La
descripción y el ejemplo que sigue más abajo se basan en estos fundamentos.
Esta instrucción reconvierte paso a paso a su estado original varias formas de representación
secuenciales de datos convertidos.
Para reconvertir una sola forma de representación secuencial de un tipo de datos PLC (UDT),
STRUCT o ARRAY of <tipo de datos> también se puede utilizar directamente la instrucción
"TRCV: Recibir datos a través de la conexión".

Programación del PLC
Manual de programación y manejo, 11/2019

809

Instrucciones
4.1 Instrucciones

Tamaño del área de memoria
Debido a las reglas de alineación, no se insertan bytes de relleno en las estructuras sencillas
del área de memoria optimizada. Por consiguiente, una estructura del área de memoria
optimizada es más pequeña que en el área de memoria estándar. Los ARRAY de estructuras
y las estructuras anidadas tienen bytes de relleno. Por lo general no es posible saber de
antemano en qué área de memoria requiere más espacio una estructura compuesta.
Válido para las CPU de la serie S7-1500:
En un bloque con la propiedad "Acceso optimizado al bloque", el BOOL tiene una longitud de
1 byte. Esto hace que una estructura, que básicamente está formada por el tipo de datos
BOOL, sea mayor en el área de memoria optimizada que en el área de memoria estándar. Las
estructuras compuestas con un porcentaje reducido de tipos de datos BOOL son menores en
el área de memoria optimizada que en el área de memoria estándar.
Nota
Serialización de varias estructuras en una CPU-S7-1200
Si desea serializar varias estructuras en un búfer de una CPU-S7-1200 y establecer
comunicación con ellas (p. ej., con un sistema de control o una CPU-S7-1500), deberá
comprobar si el valor de retorno (índice del parámetro POS) es par. Si este no es el caso,
deberá incrementar el valor de retorno en 1 antes de serializar la segunda estructura, ya que
la primera estructura no se rellena con un byte de relleno.
Ejemplo:
Estructura compuesta por 1 DWORD y 1 BYTE
La dirección inicial para la siguiente estructura serializada en el búfer es 5. Añada +1 para que
la dirección inicial sea un número par.

Área de memoria optimizada
Para deserializar estructuras de mayor tamaño, el área de memoria para la representación
secuencial puede declararse también con acceso optimizado a partir de la versión de firmware
>= 4.2 de las CPU de la serie S7-1200 y a partir de la versión de firmware >= 2.0 de las CPU
de la serie S7-1500. El contenido de la representación secuencial no cambia, igual que en un
área de memoria estándar. El acceso a los bytes del ARRAY solo es posible simbólicamente.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Deserializar":

810

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

SRC_ARRA
Y

Input

ARRAY[*] of
BYTE 1)

I, Q, D, interfaz de
bloque de un FB
(son posibles las
secciones Input,
Output, Static y
Temp),

ARRAY of BYTE o ARRAY of
CHAR, en el que se guarda el
flujo de datos que debe dese‐
rializarse.

o bien
ARRAY of CHAR

S7-1500:

Para obtener el máximo ren‐
ningún dato de pe‐ dimiento, no transfiera valo‐
riferia
res a este parámetro con un
puntero VARIANT.

DEST_VA‐
RIABLE

InOut

Todos los tipos de
datos

I, Q, D, interfaz de
bloque de un FB,

Variable, en la que se escri‐
birán los datos deserializa‐
ningún dato de pe‐ dos.
riferia
S7-1500:
Para obtener el máximo ren‐
dimiento, no transfiera valo‐
res a este parámetro con un
puntero VARIANT.

POS

InOut

DINT

I, Q, M, D, L

El operando del parámetro
POS almacena el índice del
primer byte tras el número de
bytes que ocupan los datos
de cliente convertidos. El pa‐
rámetro POS se calcula ba‐
sado en cero.

RET_VAL

Output

INT

I, Q, M, D, L

Información de error

Posible con CPU de la serie S7-1200 a partir de la versión de firmware >= 4.2 y con CPU de la serie
S7-1500 a partir de la versión de firmware >= 2.0
1)

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

80B0

Las áreas de memoria de los parámetros SRC_ARRAY y DEST_VARIABLE se solapan.

8136

La variable del parámetro SRC_ARRAY no está en un bloque con acceso estándar.

8150

El tipo de datos VARIANT del parámetro SRC_ARRAY contiene un puntero IGUAL A
CERO.

8151

El parámetro SRC_ARRAY no tiene una referencia válida.

8153

En el parámetro SRC_ARRAY no hay suficiente espacio de memoria disponible.

8154

Tipo de datos no válido en el parámetro SRC_ARRAY

8250

En el parámetro DEST_VARIABLE se ha transferido un puntero NULL.

8251

El parámetro DEST_VARIABLE no tiene una referencia válida.

Programación del PLC
Manual de programación y manejo, 11/2019

811

Instrucciones
4.1 Instrucciones
Código de
error*
(W#16#...)

Explicación

8382

El valor del parámetro POS se encuentra fuera de los valores límite del array.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Particularidades a partir de la versión de firmware 4.2 (S7-1200) y 2.0 (S7-1500):
El código de error siguiente tiene un significado distinto:
Código de
error*
(W#16#...)

Explicación

8136

El acceso al área de memoria en el parámetro SRC_ARRAY no es válido.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Particularidades a partir de la versión de firmware 2.8 (S7-1500):
El rendimiento de la instrucción "Deserializar" (versión 2.1) mejora si no se transfieren valores
a los parámetros SRC_ARRAY y DEST_VARIABLE con un puntero VARIANT, sino con un tipo
de datos concreto.
Tenga en cuenta que el comportamiento erróneo de la instrucción cambia en este caso. En
determinados escenarios de error, la CPU no devuelve códigos de error, sino que pasa a
STOP con un error de acceso. Para evitar que esto ocurra, utilice el tratamiento de errores local
con las instrucciones "GET_ERROR" y "GET_ERR_ID".

Ejemplo
La tabla siguiente muestra la declaración de los operandos:
Operando

Tipo de datos

Declaración

DeliverPos

INT

En la sección "Input" de la inter‐
faz del bloque de un FB o una FC

BufferPos

DINT

Error

INT

En la sección "Temp" de la inter‐
faz del bloque de un FB o una FC

Label

STRING[4]

La siguiente tabla muestra la declaración de los tipos de datos PLC:

812

Nombre de los tipos de datos
PLC

Nombre

Tipo de datos

Article

Number

DINT

Declaration

STRING

Colli

INT

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Nombre de los tipos de datos
PLC

Nombre

Tipo de datos

Client

Title

INT

First name

STRING[10]

Surname

STRING[10]

La tabla siguiente muestra la declaración de los bloques de datos:
Nombre de los bloques de datos Nombre

Tipo de datos

Target

Client

"Client" (tipo de datos PLC)

Article

Array[0..10] of "Article" (tipo de
datos PLC)

Bill

Array[0..10] of INT

Field

Array[0..294] of BYTE

Buffer

El siguiente ejemplo muestra el funcionamiento de la instrucción:
Segmento 1:

029(



'HVHULDOL]H

(1

(12

,1

287

(12

(1
%XIIHU3RV

ಯ%XIIHUಯ)LHOG
%XIIHU3RV

5(7B9$/

65&B$55$<
326

'(67B9$5,$%/(

(UURU
ಯ7DUJHWಯ&OLHQW

La instrucción "Copiar valor" copia el valor "0" en el operando #BufferPos. La instrucción
"Deserializar" deserializa la forma de representación secuencial de los datos de cliente de la
variable "Buffer" y los escribe en la variable "Target". El operando #BufferPos almacena el
índice del primer byte tras el número de bytes que ocupan los datos de cliente convertidos.
Segmento 2:

'HVHULDOL]H
(12

(1
ಯ%XIIHUಯ)LHOG
%XIIHU3RV

(UURU

326

'(67B9$5,$%/(

/DEHO

/DEHO

ಯ%XIIHUಯ)LHOG
%XIIHU3RV

5(7B

65&B$55$<

'(67B9$5,$

326

'HVHULDOL]H

%LOO

(

(1

675,1*
/DEHO

(

(1

675,1*

5(7B9$/

65&B$55$<

'HVHULDOL]H

DUWL

ಯ%XIIHUಯ)LHOG
%XIIHU3RV

5(7B

65&B$55$<
326

'(67B9$5,$

La instrucción "Deserializar" deserializa la forma de representación secuencial del separador
(depositado después de los datos de cliente en la forma de representación secuencial) de la

Programación del PLC
Manual de programación y manejo, 11/2019

813

Instrucciones
4.1 Instrucciones
variable "Buffer" y escribe los caracteres en el operando #Label. Los caracteres se comparan
en relación con "arti" y "Bill" mediante instrucciones de comparación. Si la comparación en
relación con "arti" = TRUE, se trata de datos de artículo que se deserializan y se escriben en
la variable "Target". Si la comparación en relación con "Bill" = TRUE, se trata de datos de
cálculo que se deserializan y se escriben en la variable "Target".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Principios básicos de VARIANT (Página 335)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de los tipos de datos PLC (UDT) (Página 283)
Estructura de una variable ARRAY (Página 298)
Estructura de una variable STRUCT (Página 290)
Estructura de una variable STRING (Página 277)
Bytes de relleno cuando se usan tipos de datos estructurados (Página 143)
Principios básicos de KOP (Página 7943)

Serialize: Serializar
Descripción
Mediante la instrucción "Serializar" se convierten varios tipos de datos PLC (UDT), STRUCT
o ARRAY of <tipo de datos> a una forma de representación secuencial sin que se pierdan
partes de su estructura.
La instrucción permite guardar temporalmente varios datos estructurados del programa en un
búfer, ubicado preferentemente en un bloque de datos global, y enviarlos a otra CPU. El área
de memoria en la que se depositen los datos convertidos debe ser del tipo de datos ARRAY of
BYTE o ARRAY of CHAR y tener declarado el acceso estándar en la versión 1.0. A partir de
la versión 2.0 se permiten también datos optimizados. Los datos de relleno del área de datos
del origen no están definidos en el ARRAY de destino. Pueden ser tanto bytes o bits de relleno
de un área de datos (p. ej., ARRAY, STRUCT o tipo de datos PLC (UDT)) como los caracteres
de una cadena que no se utilicen en ese momento.
La capacidad del área de memoria estándar es de 64 KB. Las estructuras mayores que 64 KB
según las reglas para áreas de memoria estándar no pueden serializarse si el operando del
parámetro DEST_ARRAY está en un área de memoria estándar.
Se recomienda definir a "0" el límite inferior del ARRAY, ya que entonces el índice dentro del
ARRAY se corresponde con el valor del parámetro POS, p. ej. ARRAY[0] = POS 0. La
descripción y el ejemplo que sigue más abajo se basan en estos fundamentos.

814

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
El operando del parámetro POS contiene información sobre el número de bytes que ocupan
los datos.
Para enviar un solo tipo de datos PLC (UDT), STRUCT o ARRAY of <tipo de datos> se puede
llamar directamente la instrucción "TSEND: Enviar datos a través de la conexión".
Nota
Comparación de estructuras
Para comparar estructuras no es necesario serializarlas antes. En su lugar, utilice las
instrucciones "CMP".
Encontrará más información en el capítulo "Comparación".

Tamaño del área de memoria
Debido a las reglas de alineación, no se insertan bytes de relleno en las estructuras sencillas
del área de memoria optimizada. Por consiguiente, una estructura del área de memoria
optimizada es más pequeña que en el área de memoria estándar. Los ARRAY de estructuras
y las estructuras anidadas tienen bytes de relleno. Por lo general no es posible saber de
antemano en qué área de memoria requiere más espacio una estructura compuesta.
Válido para las CPU de la serie S7-1500:
En un bloque con la propiedad "Acceso optimizado al bloque", la longitud del BOOL depende
del tipo de datos que sigue. Por ejemplo, si lo que sigue es un BYTE, el BOOL tiene una
longitud de 1 byte. Si lo que sigue es WORD, el BOOL tiene una longitud de 2 bytes. Esto hace
que una estructura, que básicamente está formada por el tipo de datos BOOL, sea mayor en
el área de memoria optimizada que en el área de memoria estándar. Las estructuras
compuestas con un porcentaje reducido de tipos de datos BOOL son menores en el área de
memoria optimizada que en el área de memoria estándar.
Por eso se recomienda que el área de datos de origen para la serialización empiece con tipos
de datos grandes y termine con elementos booleanos. De este modo se reduce
considerablemente el relleno con bits de relleno.
Nota
Serialización de varias estructuras en una CPU-S7-1200
Si desea serializar varias estructuras en un búfer de una CPU-S7-1200 y establecer
comunicación con ellas (p. ej., con un sistema de control o una CPU-S7-1500), deberá
comprobar si el valor de retorno (índice del parámetro POS) es par. Si este no es el caso,
deberá incrementar el valor de retorno en 1 antes de serializar la segunda estructura, ya que
la primera estructura no se rellena con un byte de relleno.
Ejemplo:
Estructura compuesta por 1 DWORD y 1 BYTE
La dirección inicial para la siguiente estructura serializada en el búfer es 5. Añada +1 para que
la dirección inicial sea un número par.

Programación del PLC
Manual de programación y manejo, 11/2019

815

Instrucciones
4.1 Instrucciones

Área de memoria optimizada
Para serializar estructuras de mayor tamaño, el área de memoria puede declararse también
con acceso optimizado a partir de la versión de firmware >= 4.2 de las CPU de la serie S7-1200
y a partir de la versión de firmware >= 2.0 de las CPU de la serie S7-1500. La representación
secuencial no cambia, igual que en un área de memoria estándar.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Serializar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

SRC_VARIA‐ Input
BLE

Todos los tipos de
datos

I, Q, D, interfaz de
bloque de un FB,

Variable que se serializará.

DEST_ARRA InOut
Y

ARRAY of BYTE o
bien ARRAY of
CHAR

I, Q, D, interfaz de
bloque de un FB
(son posibles las
secciones Input,
Output, Static y
Temp),

Array en el que se guarda el
flujo de datos generado.

S7-1500:
ningún dato de pe‐ Para obtener el máximo ren‐
riferia
dimiento, no transfiera valo‐
res a este parámetro con un
puntero VARIANT.

S7-1500:

Para obtener el máximo ren‐
dimiento, no transfiera valo‐
res a este parámetro con un
ningún dato de pe‐ puntero VARIANT.
riferia

POS

InOut

DINT

I, Q, M, D, L

El operando del parámetro
POS almacena el índice del
primer byte tras el número to‐
tal de bytes que han ocupado
los datos de cliente converti‐
dos. El parámetro POS se
calcula basado en cero.

RET_VAL

Output

INT

I, Q, M, D, L

Información de error

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:

816

Código de
error*
(W#16#...)

Explicación

0000

Ningún error

80B0

Las áreas de memoria de los parámetros SRC_VARIABLE y DEST_ARRAY se solapan.

8150

El tipo de datos VARIANT del parámetro SRC_VARIABLE contiene un puntero IGUAL A
CERO.

8151

El parámetro SRC_VARIABLE no tiene una referencia válida.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Código de
error*
(W#16#...)

Explicación

8236

La variable del parámetro SRC_ARRAY no está en un bloque con acceso estándar.

8250

En el parámetro DEST_ARRAY se ha transferido un puntero CERO.

8251

El parámetro DEST_ARRAY no tiene una referencia válida.

8253

La variable del parámetro DEST_ARRAY no ofrece suficiente espacio de memoria para
el contenido de la variable del parámetro SRC_VARIABLE. El valor de entrada de la
variable del parámetro POS reduce el espacio de memoria disponible. El valor de entrada
del parámetro POS determina en qué posición de la variable se comienza en el parámetro
DEST_ARRAY.

8254

Tipo de datos no válido en el parámetro DEST_ARRAY

8382

El valor del parámetro POS se encuentra fuera de los valores límite del array.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Particularidades a partir de la versión de firmware 4.2 (S7-1200) y 2.0 (S7-1500):
El código de error siguiente tiene un significado distinto:
Código de
error*
(W#16#...)

Explicación

8236

El acceso al área de memoria en el parámetro DEST_ARRAY no es válido.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Particularidades a partir de la versión de firmware 2.8 (S7-1500):
El rendimiento de la instrucción "Serializar" (versión 2.1) mejora si no se transfieren valores a
los parámetros SRC_VARIABLE y DEST_ARRAY con un puntero VARIANT, sino con un tipo
de datos concreto.
Tenga en cuenta que el comportamiento erróneo de la instrucción cambia en este caso. En
determinados escenarios de error, la CPU no devuelve códigos de error, sino que pasa a
STOP con un error de acceso. Para evitar que esto ocurra, utilice el tratamiento de errores local
con las instrucciones "GET_ERROR" y "GET_ERR_ID".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
Segmento 1:

Programación del PLC
Manual de programación y manejo, 11/2019

817

Instrucciones
4.1 Instrucciones

029(



6HULDOL]H

(1

(12

,1

287

(12

(1
%XIIHU3RV

ಯ6RXUFHಯ&OLHQW
%XIIHU3RV

5(7B9$/

65&B9$5,$%/(

'(67B$55$<

326

(UURU
ಯ%XIIHUಯ)LHOG

La instrucción "Copiar valor" copia el valor "0" en el operando #BufferPos. La instrucción
"Deserializar" serializa los datos de cliente de la variable "Source" y los escribe, en
representación secuencial, en la variable "Buffer". El índice del siguiente byte no escrito del
operando "Buffer".Field se almacena en el operando #BufferPos.
Segmento 2:

6B029(

ಭDUWLಫ

6HULDOL]H

(1

(12

,1

287

(12

(1
/DEHO

/DEHO
%XIIHU3RV

65&B9$5,$%/(

5(7B9$/
'(67B$55$<

326

(UURU
ಯ%XIIHUಯ)LHOG

Para facilitar la posterior deserialización de la forma de representación secuencial, ahora se
inserta una especie de separador. La instrucción "Desplazar cadena de caracteres" copia los
caracteres "arti" en el operando #Label. La instrucción "Serializar" escribe estos caracteres,
tras los datos de cliente, en la variable "Buffer". Se incrementa correspondientemente el valor
del operando "#BufferPos".
Segmento 3:

6HULDOL]H
(12

(1
ಯ6RXUFHಯ
$UWLFOH>'HOLYHU3RV@
%XIIHU3RV

65&B9$5,$%/(

5(7B9$/
'(67B$55$<

326

(UURU
ಯ%XIIHUಯ)LHOG

La instrucción "Serializar" serializa los datos de un determinado artículo, que se calcula en
tiempo de ejecución, de la variable "Source", y los escribe en forma de representación
secuencial después de los caracteres "arti" en la variable "Buffer".
La tabla siguiente muestra la declaración de los operandos:

818

Operando

Tipo de datos

Declaración

DeliverPos

INT

En la sección "Input" de la inter‐
faz del bloque

BufferPos

DINT

En la sección "Temp" de la inter‐
faz del bloque

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Operando

Tipo de datos

Declaración

Error

INT

En la sección "Temp" de la inter‐
faz del bloque

Label

STRING[4]

En la sección "Temp" de la inter‐
faz del bloque

La siguiente tabla muestra la declaración de los tipos de datos PLC:
Nombre de los tipos de datos
PLC

Nombre

Tipo de datos

Article

Number

DINT

Declaration

STRING

Colli

INT

Title

INT

First name

STRING[10]

Surname

STRING[10]

Client

La tabla siguiente muestra la declaración de los bloques de datos:
Nombre de los bloques de datos Nombre

Tipo de datos

Source

Client

"Client" (tipo de datos PLC)

Article

Array[0..10] of "Article" (tipo de
datos PLC)

Field

Array[0..294] of BYTE

Buffer

Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Principios básicos de VARIANT (Página 335)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de los tipos de datos PLC (UDT) (Página 283)
Estructura de una variable ARRAY (Página 298)
Estructura de una variable STRUCT (Página 290)
Estructura de una variable STRING (Página 277)
Bytes de relleno cuando se usan tipos de datos estructurados (Página 143)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

819

Instrucciones
4.1 Instrucciones

MOVE_BLK: Copiar área
Descripción
La instrucción "Copiar área" permite copiar los contenidos de un área de memoria (área de
origen) en un área de memoria diferente (área de destino). El número de elementos que se
copian en el área de destino se determina con la entrada COUNT. El ancho del elemento de
la entrada IN define el ancho de los elementos que deben copiarse.
Para poder ejecutar la instrucción, el área de origen y el área de destino deben ser del mismo
tipo de datos.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Se copian más datos de los que están disponibles en la entrada IN o en la salida OUT.
Si se copia un ARRAY of BOOL, en caso de desbordamiento la salida de habilitación ENO
permanece a "1" hasta que se rebasa el límite de byte de la estructura ARRAY. Si el valor de
la entrada COUNT rebasa el límite del byte de la estructura ARRAY, la salida de habilitación
ENO se pone a "0".
Nota
Uso de ARRAYs
La instrucción copia el contenido a partir del elemento definido n elementos (n = depende del
valor del parámetro COUNT) desde el área de origen al área de destino, comenzando por el
índice especificado.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Copiar área":

820

Parámetro

Declaración

Tipo de datos

Área de memo‐ Descripción
ria

S7-1200

S7-1500

EN

Input

BOOL

BOOL

I, Q, M, D, L o
constante

Entrada de ha‐
bilitación

ENO

Output

BOOL

BOOL

I, Q, M, D, L

Salida de habi‐
litación

IN 1)

Input

Números bina‐
rios, enteros,
números en co‐
ma flotante,
tiempos, DA‐
TE, CHAR,
WCHAR, TOD

Números bina‐ D, L
rios, enteros,
números en co‐
ma flotante,
tiempos, DA‐
TE, CHAR,
WCHAR,
TOD, LTOD

Primer elemen‐
to del área de
origen que se
copia

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración
S7-1200

Tipo de datos
S7-1500

Área de memo‐ Descripción
ria
I, Q, M, D, L, P
o constante

COUNT

Input

USINT, UINT,
UDINT

USINT, UINT,
UDINT, ULINT

OUT 1)

Output

Números bina‐
rios, enteros,
números en co‐
ma flotante,
tiempos, DA‐
TE, CHAR,
WCHAR, TOD

Números bina‐ D, L
rios, enteros,
números en co‐
ma flotante,
tiempos, DA‐
TE, CHAR,
WCHAR,
TOD, LTOD

1)

Número de ele‐
mentos que se
copian del
área de origen
al área de des‐
tino.
Primer elemen‐
to del área de
destino en la
que se copian
los contenidos
del área de ori‐
gen

Los tipos de datos indicados solamente pueden utilizarse como elementos de una estructura ARRAY.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

DBDUUD\>@
ಯ7DJB&RXQWಯ

029(B%/.
(1

(12

,1

287

ಯ7DJ2XWಯ

EBDUUD\>@

&2817

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

a_array[2]

El operando "a_array" es del tipo
de datos Array [0..5] of INT.
Consta de 6 elementos del tipo
de datos INT.

COUNT

Tag_Count

3

OUT

b_array[1]

El operando "b_array" es del tipo
de datos Array [0..6] of INT.
Consta de 7 elementos del tipo
de datos INT.

Si los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1", se ejecuta la
instrucción. La instrucción selecciona a partir del tercer elemento tres elementos INT de la
variable #a_array y copia su contenido en la variable de salida #b_array, comenzando por el
segundo elemento. Si no ocurren errores al ejecutar la instrucción, la salida de habilitación
ENO devuelve el estado lógico "1" y se activa la salida "TagOut".

Programación del PLC
Manual de programación y manejo, 11/2019

821

Instrucciones
4.1 Instrucciones
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)
Nota
Encontrará más información sobre la instrucción MOVE_BLK en el Siemens Industry Online
Support, en el artículo siguiente:
¿Cómo se copian áreas de memoria y datos estructurados entre dos bloques de datos en
STEP 7 (TIA Portal)?
https://support.industry.siemens.com/cs/ww/es/view/42603881 (https://
support.industry.siemens.com/cs/ww/es/view/42603881)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

MOVE_BLK_VARIANT: Copiar área
Descripción
La instrucción "Copiar área" copia los contenidos de un área de memoria (área de origen) en
un área de memoria diferente (área de destino). Se pueden copiar elementos de un ARRAY o
un ARRAY completo en otro ARRAY del mismo tipo de datos. El tamaño (número de
elementos) de los ARRAY de origen y de destino puede diferir. Se pueden copiar varios
elementos dentro de un mismo ARRAY o bien copiar elementos individuales.
El número de elementos que deben copiarse no puede rebasar el área de origen o destino
seleccionado.
Cuando se utiliza la instrucción no es necesario conocer el ARRAY en el momento de crear el
bloque, puesto que el origen y el destino se transfieren vía VARIANT.
El recuento en los parámetros SRC_INDEX y DEST_INDEX comienza siempre por el límite
inferior "0", independientemente de la declaración posterior del ARRAY.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Se copian más datos de los que hay disponibles.

822

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Copiar área":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

SRC

Input

VARIANT (que
apunta a un
ARRAY o a un ele‐
mento individual
del ARRAY),
ARRAY of <tipo de
datos>

L (puede declarar‐ El área de origen de la que se
se en las seccio‐
copia
nes "Input",
"InOut" y "Temp"
de la interfaz del
bloque.)

COUNT

Input

UDINT

I, Q, M, D, L o
constante

2)

Número de elementos que
se copian
Asigne al parámetro COUNT
el valor "1" si en el parámetro
SRC o en el parámetro DEST
no hay indicado ningún
ARRAY.

SRC_INDEX

Input

DINT

I, Q, M, D, L o
constante

Define el primer elemento
que se copia:
● El parámetro
SRC_INDEX se calcula
basado en cero. Si en el
parámetro SRC hay
indicado un ARRAY, el
entero del parámetro
SRC_INDEX indica el
primer elemento del área
de origen de la que debe
copiarse. Esto es así
independientemente de
los límites declarados del
ARRAY.
● Si en el parámetro SRC
no hay indicado ningún
ARRAY o solo un
elemento individual de un
ARRAY, asigne el valor
"0" al parámetro
SRC_INDEX.

Programación del PLC
Manual de programación y manejo, 11/2019

823

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

DEST_IN‐
DEX

Input

DINT

I, Q, M, D, L o
constante

Define el inicio del área de
memoria de destino:
● El parámetro
DEST_INDEX se calcula
basado en cero. Si en el
parámetro DEST hay
indicado un ARRAY, el
entero del parámetro
DEST_INDEX indica el
primer elemento del área
de destino en la que debe
copiarse. Esto es así
independientemente de
los límites declarados del
ARRAY.
● Si en el parámetro DEST
no hay indicado ningún
ARRAY, asigne el valor
"0" al parámetro
DEST_INDEX.

DEST

Output 1)

VARIANT

L (puede declarar‐ Área de destino a la que se
se en las seccio‐
copia el contenido del área
nes "Input",
de origen.
"InOut" y "Temp"
de la interfaz del
bloque.)

RET_VAL

Output

INT

I, Q, M, D, L

Información de error:
El parámetro RET_VAL de‐
vuelve un código de error
cuando ocurre un error du‐
rante la ejecución de la ins‐
trucción.

1) El parámetro DEST está declarado como Output, ya que los datos desembocan en la variable. Sin
embargo, la propia variable debe declararse como InOut en la interfaz del bloque.
2) En el parámetro SRC, los tipos de datos BOOL y ARRAY of BOOL no están permitidos.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*

Explicación

(W#16#...)

824

0000

Ningún error

80B4

Los tipos de datos no coinciden. En lugar de un ARRAY of Struct utilice un ARRAY of tipo
de datos PLC (UDT).

8151

No es posible acceder al parámetro SRC.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Código de
error*

Explicación

(W#16#...)
8152

El operando del parámetro SRC no está tipificado.

8153

Error de creación de código en el parámetro SRC

8154

El operando del parámetro SRC es del tipo de datos BOOL.

8281

Valor no válido en el parámetro COUNT

8382

El valor del parámetro SRC_INDEX es menor que CERO.

8383

El valor del parámetro SRC_INDEX se encuentra fuera del límite superior del ARRAY.

8482

El valor del parámetro DEST_INDEX se encuentra fuera de los límites del ARRAY.

8483

El ARRAY al que señala el parámetro DEST es demasiado pequeño para los datos que
deben copiarse.

8534

El parámetro DEST está protegido contra escritura

8551

No es posible acceder al parámetro DEST.

8552

El operando del parámetro DEST no está tipificado.

8553

Error de creación de código en el parámetro DEST

8554

El operando del parámetro DEST es del tipo de datos BOOL.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ
6UF)LHOG
ಯ7DJB&RXQWಯ

029(B%/.B9$5,$17
(1

(12

ಯ7DJ2XWಯ

65&
&2817

ಯ7DJB6UFB,QGH[ಯ

65&B,1'(;

ಯ7DJB'HVWB,QGH[ಯ

'(67B,1'(;

5(7B9$/
'(67

ಯ7DJB5HVXOWಯ
'HVW)LHOG

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Declaración en la inter‐
faz del bloque

Operando

Valor

SRC

Input

#SrcField

El operando local
#SrcField utiliza un tipo
de datos PLC todavía
desconocido en el mo‐
mento de programar el
bloque. (ARRAY[0..10]
of "MOVE_UDT"

COUNT

Input

Tag_Count

2

SRC_INDEX

Input

Tag_Src_Index

3

Programación del PLC
Manual de programación y manejo, 11/2019

825

Instrucciones
4.1 Instrucciones
Parámetro

Declaración en la inter‐
faz del bloque

Operando

Valor

DEST_INDEX

Input

Tag_Dest_Index

3

DEST

InOut

#DestField

El operando local
#DestField utiliza un ti‐
po de datos PLC toda‐
vía desconocido en el
momento de programar
el bloque.
(ARRAY[10..20] of "MO‐
VE_UDT"

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. En el área de
destino se copian dos elementos del área de origen, empezando por el cuarto elemento del
ARRAY[0..10] of MOVE_UDT. Las copias se insertan en el ARRAY[10..20] of MOVE_UDT a
partir del cuarto elemento. Si no se producen errores al ejecutar la instrucción, la salida de
habilitación ENO devuelve el estado lógico TRUE y la salida "TagOut" se activa.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)
Nota
Encontrará más información sobre la instrucción MOVE_BLK_VARIANT en el Siemens
Industry Online Support, en el artículo siguiente:
¿Cómo se copian áreas de memoria y datos estructurados entre dos bloques de datos en
STEP 7 (TIA Portal)?
https://support.industry.siemens.com/cs/ww/es/view/42603881 (https://
support.industry.siemens.com/cs/ww/es/view/42603881)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
VariantGet: Leer valor de una variable VARIANT (Página 870)
Ejemplo de movimiento de datos (Página 344)
Principios básicos de VARIANT (Página 335)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de KOP (Página 7943)

826

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

UMOVE_BLK: Copiar área sin interrupciones
Descripción
La instrucción "Copiar área sin interrupciones" copia sin interrupciones los contenidos de un
área de memoria (área de origen) en un área de memoria diferente (área de destino). El
número de elementos que se copian en el área de destino se determina con el parámetro
COUNT. El ancho del elemento de la entrada IN define el ancho de los elementos que deben
copiarse.
Para poder ejecutar la instrucción, el área de origen y el área de destino deben ser del mismo
tipo de datos.
Nota
La operación de copia no debe ser interrumpida por otras actividades del sistema operativo.
Por este motivo, los tiempos de reacción a alarmas de la CPU podrían aumentar al ejecutar la
instrucción "Copiar área sin interrupciones".
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Se copian más datos de los que están disponibles en la entrada IN o en la salida OUT.
Si se copia un ARRAY of BOOL, en caso de desbordamiento la salida de habilitación ENO
permanece a "1" hasta que se rebasa el límite de byte de la estructura ARRAY. Si el valor de
la entrada COUNT rebasa el límite del byte de la estructura ARRAY, la salida de habilitación
ENO se pone a "0".
Nota
Uso de ARRAYs
La instrucción copia el contenido a partir del elemento definido n elementos (n = depende del
valor del parámetro COUNT) desde el área de origen al área de destino, comenzando por el
índice especificado.
La instrucción "Copiar área sin interrupciones" permite copiar 16 KB como máximo. A este
respecto deben tenerse en cuenta las limitaciones específicas de la CPU.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Copiar área sin interrupciones":
Parámetro

Declaración
S7-1200

S7-1500

EN

Input

BOOL

BOOL

I, Q, M, D, L o
constante

Entrada de ha‐
bilitación

ENO

Output

BOOL

BOOL

I, Q, M, D, L

Salida de habi‐
litación

Programación del PLC
Manual de programación y manejo, 11/2019

Tipo de datos

Área de memo‐ Descripción
ria

827

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de memo‐ Descripción
ria

IN 1)

Input

Números bina‐
rios, enteros,
números en co‐
ma flotante,
tiempos, DA‐
TE, CHAR,
WCHAR, TOD

Números bina‐ D, L
rios, enteros,
números en co‐
ma flotante,
tiempos, DA‐
TE, CHAR,
WCHAR,
TOD, LTOD

Primer elemen‐
to del área de
origen que se
copia

COUNT

Input

USINT, UINT,
UDINT

USINT, UINT,
UDINT, ULINT

Número de ele‐
mentos que se
copian del
área de origen
al área de des‐
tino.

OUT 1)

Output

Números bina‐
rios, enteros,
números en co‐
ma flotante,
tiempos, DA‐
TE, CHAR,
WCHAR, TOD

Números bina‐ D, L
rios, enteros,
números en co‐
ma flotante,
tiempos, DA‐
TE, CHAR,
WCHAR,
TOD, LTOD

1)

I, Q, M, D, L, P
o constante

Primer elemen‐
to del área de
destino en la
que se copian
los contenidos
del área de ori‐
gen

Los tipos de datos indicados solamente pueden utilizarse como elementos de una estructura ARRAY.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

DBDUUD\>@
ಯ7DJB&RXQWಯ

8029(B%/.
(1

(12

,1

287

ಯ7DJ2XWಯ

EBDUUD\>@

&2817

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:

828

Parámetro

Operando

Valor

IN

a_array[2]

El operando "a_array" es del tipo
de datos Array [0..5] of INT.
Consta de 6 elementos del tipo
de datos INT.

COUNT

Tag_Count

3

OUT

b_array[1]

El operando "b_array" es del tipo
de datos Array [0..6] of INT.
Consta de 7 elementos del tipo
de datos INT.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Si los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1", se ejecuta la
instrucción. La instrucción selecciona a partir del tercer elemento tres elementos INT de la
variable #a_array y copia su contenido en la variable de salida #b_array, comenzando por el
segundo elemento. La operación de copia no debe ser interrumpida por otras actividades del
sistema operativo. Si no ocurren errores al ejecutar la instrucción, la salida ENO devuelve el
estado lógico "1" y se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)
Nota
Encontrará más información sobre la instrucción UMOVE_BLK en el Siemens Industry Online
Support, en el artículo siguiente:
¿Cómo se copian áreas de memoria y datos estructurados entre dos bloques de datos en
STEP 7 (TIA Portal)?
https://support.industry.siemens.com/cs/ww/es/view/42603881 (https://
support.industry.siemens.com/cs/ww/es/view/42603881)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

FILL_BLK: Rellenar área
Descripción
La instrucción "Rellenar área" permite rellenar un área de memoria (área de destino) con el
valor de la entrada IN. El área de destino se rellena a partir de la dirección indicada en la salida
OUT. El número de repeticiones de copia se determina mediante el parámetro COUNT. Al
ejecutar la instrucción, el valor de la entrada IN se copia en el área de destino el número de
veces especificado por el valor del parámetro COUNT.
Para poder ejecutar la instrucción, el área de origen y el área de destino deben ser del mismo
tipo de datos.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Como máximo se modifican tantos elementos como tiene el ARRAY o la estructura. Si se
copian más datos que los elementos disponibles en la salida OUT, el resultado no será el
deseado.
Si se copia un ARRAY of BOOL, en caso de desbordamiento la salida de habilitación ENO
permanece a "1" hasta que se rebasa el límite de byte de la estructura ARRAY. Si el valor de

Programación del PLC
Manual de programación y manejo, 11/2019

829

Instrucciones
4.1 Instrucciones
la entrada COUNT rebasa el límite del byte de la estructura ARRAY, la salida de habilitación
ENO se pone a "0".
Nota
Uso de ARRAYs
La instrucción lee en el área de origen el contenido del elemento seleccionado y lo copia n
veces (n = depende del valor del parámetro COUNT) en el área de destino, comenzado a partir
del índice especificado.

Rellenar estructuras
Además de los elementos de un ARRAY, también es posible rellenar varios elementos de una
estructura (STRUCT, tipo de datos PLC) con el mismo valor. La estructura cuyos elementos
deben rellenarse puede contener únicamente elementos individuales del mismo tipo de datos
elemental. No obstante, la estructura propiamente dicha puede estar incrustada en otra
estructura.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Rellenar área":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de memo‐ Descripción
ria

EN

Input

BOOL

BOOL

I, Q, M, D, L o
constante

Entrada de ha‐
bilitación

ENO

Output

BOOL

BOOL

I, Q, M, D, L

Salida de habi‐
litación

IN

Input

Números bina‐
rios, enteros,
números en co‐
ma flotante,
tiempos, DA‐
TE, TOD,
CHAR,
WCHAR

Números bina‐ I, Q, M, D, L, P
rios, enteros,
o constante
números en co‐
ma flotante,
tiempos, DA‐
TE, CHAR,
WCHAR,
TOD, LTOD

Elemento con
el que se relle‐
na el área de
destino

COUNT

Input

USINT, UINT,
UDINT

USINT, UINT,
UDINT, ULINT

Número de re‐
peticiones de
copia

OUT

Output

Números bina‐
rios, enteros,
números en co‐
ma flotante,
tiempos, DA‐
TE, TOD,
CHAR,
WCHAR

Números bina‐ D, L
rios, enteros,
números en co‐
ma flotante,
tiempos, DA‐
TE, CHAR,
WCHAR,
TOD, LTOD

I, Q, M, D, L, P
o constante

Dirección del
área de desti‐
no a partir de la
cual se rellena

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

830

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplo con un ARRAY
El siguiente ejemplo muestra el funcionamiento de la instrucción cuando debe rellenarse un
ARRAY:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

)LOO9DOXH
ಯ7DJB&RXQWಯ

),//B%/.
(1

(12

,1

287

ಯ7DJ2XWಯ

7DUJHW$UHD>@

&2817

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

FillValue

El operando es del tipo de datos
INT.

COUNT

Tag_Count

3

OUT

TargetArea

El operando TargetArea es del
tipo de datos ARRAY[1..5] of
INT. Consta de 5 elementos del
tipo de datos INT.

Si los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1", se ejecuta la
instrucción. La instrucción copia tres veces el valor del operando #FillValue en la variable de
salida #TargetArea, empezando por el primer elemento. Si no se producen errores al ejecutar
la instrucción, el operando "TagOut" adopta el estado lógico "1" en la salida de habilitación
ENO.

Ejemplos con una estructura
Los siguientes ejemplos muestran el funcionamiento de la instrucción cuando debe rellenarse
una estructura.
Cree un bloque de datos global con los elementos siguientes:
Data_block_1

Tipo de datos

MyStruct1

STRUCT

Member_1

INT

Member_2

INT

Member_3

INT

Member_4

INT

MyStruct2

Programación del PLC
Manual de programación y manejo, 11/2019

STRUCT

831

Instrucciones
4.1 Instrucciones
Data_block_1

Tipo de datos

SubArray

ARRAY[1..2] of STRUCT

SubArray[1]

STRUCT

NestedStruct

STRUCT

Member_1

INT

Member_2

INT

Member_3

INT

Member_4

INT

SubArray[2]

STRUCT

Nes‐
tedStruct

STRUCT
Member_1

INT

Member_2

INT

Member_3

INT

Member_4

INT

Cree el código de programa siguiente para direccionar la variable MyStruct1:
),//B%/.
(1



ಯ7DJ2XWಯ

(12

,1
&2817

287

ಯ'DWDBEORFNBಯ
0\6WUXFW
0HPEHUB

Cree el código de programa siguiente para direccionar la variable MyStruct2:
),//B%/.
(1



,1
&2817

ಯ7DJ2XWಯ

(12

287

ಯ'DWDBEORFNBಯ0\6WUXFW
6XE$UUD\>@1HVWHG6WUXFW
0HPEHUB

En ambos ejemplos, el valor 10 del parámetro IN se copia dos veces en el operando del
parámetro OUT, empezando por el elemento Member_2. Esto significa que el valor 10 se copia
tanto en el elemento Member_2 como en el Member_3. Los otros dos elementos, Member_1
y Member_4, no cambian. Si no se producen errores al ejecutar la instrucción, el operando
"TagOut" adopta el estado lógico "1".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

832

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

UFILL_BLK: Rellenar área sin interrupciones
Descripción
La instrucción "Rellenar área sin interrupciones" rellena sin interrupciones un área de memoria
(área de destino) con el valor de la entrada IN. El área de destino se rellena a partir de la
dirección indicada en la salida OUT. El número de repeticiones de copia se determina
mediante el parámetro COUNT. Al ejecutar la instrucción, el valor de la entrada IN se copia en
el área de destino el número de veces especificado por el valor del parámetro COUNT.
Para poder ejecutar la instrucción, el área de origen y el área de destino deben ser del mismo
tipo de datos.
Nota
La operación de copia no debe ser interrumpida por otras actividades del sistema operativo.
Por este motivo, los tiempos de reacción a alarmas de la CPU podrían aumentar al ejecutar la
instrucción "Rellenar área sin interrupciones".
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Como máximo se modifican tantos elementos como tiene el ARRAY o la estructura. Si se
copian más datos que los elementos disponibles en la salida OUT, el resultado no será el
deseado.
Si se copia un ARRAY of BOOL, en caso de desbordamiento la salida de habilitación ENO
permanece a "1" hasta que se rebasa el límite de byte de la estructura ARRAY. Si el valor de
la entrada COUNT rebasa el límite del byte de la estructura ARRAY, la salida de habilitación
ENO se pone a "0".
Nota
Uso de ARRAYs
La instrucción lee en el área de origen el contenido del elemento seleccionado y lo copia n
veces (n = depende del valor del parámetro COUNT) en el área de destino, comenzado a partir
del índice especificado.
La instrucción "Rellenar área sin interrupciones" permite copiar 16 KB como máximo. A este
respecto deben tenerse en cuenta las limitaciones específicas de la CPU.

Rellenar estructuras
Además de los elementos de un ARRAY, también es posible rellenar varios elementos de una
estructura (STRUCT, tipo de datos PLC) con el mismo valor. La estructura cuyos elementos
deben rellenarse puede contener únicamente elementos individuales del mismo tipo de datos
elemental. No obstante, la estructura propiamente dicha puede estar incrustada en otra
estructura.

Programación del PLC
Manual de programación y manejo, 11/2019

833

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Rellenar área sin interrupciones":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de memo‐ Descripción
ria

EN

Input

BOOL

BOOL

I, Q, M, D, L o
constante

Entrada de ha‐
bilitación

ENO

Output

BOOL

BOOL

I, Q, M, D, L

Salida de habi‐
litación

IN

Input

Números bina‐
rios, enteros,
números en co‐
ma flotante,
tiempos, DA‐
TE, CHAR,
WCHAR, TOD

Números bina‐ I, Q, M, D, L, P
rios, enteros,
o constante
números en co‐
ma flotante,
tiempos, DA‐
TE, CHAR,
WCHAR,
TOD, LTOD

Elemento con
el que se relle‐
na el área de
destino.

COUNT

Input

USINT, UINT,
UDINT

USINT, UINT,
UDINT, ULINT

Número de re‐
peticiones de
copia

OUT

Output

Números bina‐
rios, enteros,
números en co‐
ma flotante,
tiempos, DA‐
TE, CHAR,
WCHAR, TOD

Números bina‐ D, L
rios, enteros,
números en co‐
ma flotante,
tiempos, DA‐
TE, CHAR,
WCHAR,
TOD, LTOD

I, Q, M, D, L, P
o constante

Dirección del
área de desti‐
no a partir de la
cual se rellena.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo con un ARRAY
El siguiente ejemplo muestra el funcionamiento de la instrucción cuando debe rellenarse un
ARRAY:
ಯ7DJ,QBಯ

ಯ7DJ,QBಯ

)LOO9DOXH
ಯ7DJB&RXQWಯ

834

8),//B%/.
(1

(12

,1

287

ಯ7DJ2XWಯ

7DUJHW$UHD>@

&2817

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

FillValue

El operando es del tipo de datos
INT.

COUNT

Tag_Count

3

OUT

TargetArea

El operando TargetArea es del
tipo de datos ARRAY[1..5] of
INT. Consta de 5 elementos del
tipo de datos INT.

Si los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1", se ejecuta la
instrucción. La instrucción copia tres veces el valor del operando #FillValue en la variable de
salida #TargetArea, empezando por el primer elemento. La operación de copia no debe ser
interrumpida por otras actividades del sistema operativo. Si no se producen errores al ejecutar
la instrucción, el operando "TagOut" adopta el estado lógico "1" en la salida de habilitación
ENO.

Ejemplos con una estructura
Los siguientes ejemplos muestran el funcionamiento de la instrucción cuando debe rellenarse
una estructura.
Cree un bloque de datos global con los elementos siguientes:
Data_block_1

Tipo de datos

MyStruct1

STRUCT

Member_1

INT

Member_2

INT

Member_3

INT

Member_4

INT

MyStruct2

STRUCT

SubArray

ARRAY[1..2] of STRUCT

SubArray[1]

STRUCT

NestedStruct

STRUCT

Member_1

INT

Member_2

INT

Member_3

INT

Member_4

INT

SubArray[2]

STRUCT

Nes‐
tedStruct

STRUCT
Member_1

INT

Member_2

INT

Member_3

INT

Member_4

INT

Cree el código de programa siguiente para direccionar la variable MyStruct1:

Programación del PLC
Manual de programación y manejo, 11/2019

835

Instrucciones
4.1 Instrucciones
8),//B%/.
(1



,1
&2817

ಯ7DJ2XWಯ

(12

287

ಯ'DWDBEORFNBಯ
0\6WUXFW
0HPEHUB

Cree el código de programa siguiente para direccionar la variable MyStruct2:
8),//B%/.
(1



,1
&2817

ಯ7DJ2XWಯ

(12

287

ಯ'DWDBEORFNBಯ0\6WUXFW
6XE$UUD\>@1HVWHG6WUXFW
0HPEHUB

En ambos ejemplos, el valor 10 del parámetro IN se copia dos veces en el operando del
parámetro OUT, empezando por el elemento Member_2. Esto significa que el valor 10 se copia
tanto en el elemento Member_2 como en el Member_3. Los otros dos elementos, Member_1
y Member_4, no cambian. Si no se producen errores al ejecutar la instrucción, el operando
"TagOut" adopta el estado lógico "1".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

SCATTER: Dispersión de una secuencia de bits en bits individuales
Descripción
La instrucción "Dispersión de una secuencia de bits en bits individuales" descompone una
variable del tipo de datos BYTE, WORD, DWORD o LWORD en bits individuales y los guarda
en un ARRAY of BOOL, un STRUCT anónimo o un tipo de datos PLC con elementos
booleanos exclusivamente.
Nota
ARRAY of BOOL multidimensional
En la instrucción "Dispersión de una secuencia de bits en bits individuales" no está permitido
utilizar un ARRAY of BOOL multidimensional.

836

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Nota
Longitud del ARRAY, del STRUCT o del tipo de datos PLC
El ARRAY, el STRUCT anónimo o el tipo de datos PLC deben tener tantos elementos como se
especifique en la secuencia de bits.
Es decir, en el tipo de datos BYTE, p. ej., el ARRAY, el STRUCT o el tipo de datos PLC deben
tener exactamente 8 elementos (WORD = 16, DWORD = 32 y LWORD = 64).
Nota
Disponibilidad de la instrucción
La instrucción puede utilizarse en las CPU de la serie S7-1200 a partir de la versión de firmware
>4.2 y en las CPU de la serie S7-1500 a partir de la versión de firmware 2.1.
De este modo es posible, p. ej., descomponer una palabra de estado y leer y modificar por
índice el estado de los bits individuales. Mediante GATHER pueden juntarse nuevamente los
bits en una secuencia de bits.
La salida de habilitación ENO devuelve el estado lógico "0" si se cumple una de las siguientes
condiciones:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El ARRAY, STRUCT o tipo de datos PLC no proporciona suficientes elementos BOOL.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de memo‐ Descripción
ria

EN

Input

BOOL

BOOL

I, Q, M, D, L o
constante

Entrada de ha‐
bilitación

ENO

Output

BOOL

BOOL

I, Q, M, D, L

Salida de habili‐
tación

Programación del PLC
Manual de programación y manejo, 11/2019

837

Instrucciones
4.1 Instrucciones
Parámetro
IN

Declaración

Tipo de datos

Input

OUT

Output

S7-1200

S7-1500

BYTE, WORD,
DWORD

BYTE,
WORD,
DWORD,
LWORD

ARRAY[*] of
BOOL,
STRUCT o tipo
de datos PLC
*: 8, 16, 32 o 64
elementos

Área de memo‐ Descripción
ria
I, Q, M, D, L

Secuencia de
bits que se des‐
compone.
Los valores no
pueden encon‐
trarse en el
área de perife‐
ria o en el DB
de un objeto
tecnológico.

ARRAY[*] of I, Q, M, D, L
BOOL,
STRUCT o
tipo de datos
PLC
*: 8, 16, 32 o
64 elemen‐
tos

ARRAY,
STRUCT o tipo
de datos PLC
en el/los que se
guardan los
bits individuales

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo con un ARRAY
Cree las siguientes variables en la interfaz del bloque:
Variable

Sección

Tipo de datos

Enable

Input

BOOL

SourceWord

WORD

EnableOut

Output

BOOL

DestinationArray

ARRAY[0..15] of BOOL

El siguiente ejemplo muestra el funcionamiento de la instrucción:

(QDEOH
6RXUFH:RUG

6&$77(5
:25'
(1

(12

,1

287

(QDEOH2XW
6
'HVWLQDWLRQ$UUD\

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

838

Operando

Tipo de datos

IN

SourceWord

WORD (16 bits)

OUT

DestinationArray

El operando "DestinationArray"
es del tipo de datos
ARRAY[0..15] of BOOL. Consta
de 16 elementos y, por tanto, tie‐
ne el mismo tamaño que la
WORD que se debe descompo‐
ner.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Si el operando #Enable devuelve el estado lógico "1" en la entrada de habilitación EN, se
ejecuta la instrucción. El operando #SourceWord del tipo de datos WORD se descompone en
sus bits individuales (16) y se asigna a los distintos elementos del operando #DestinationArray.
Si ocurre un error durante la ejecución de la instrucción, el operando #EnableOut devuelve el
estado lógico "0" en la salida de habilitación ENO.
Encontrará información adicional y el código del programa del ejemplo anterior aquí: Sample
Library for Instructions (Página 615).

Ejemplo con un tipo de datos PLC
Cree el siguiente tipo de datos PLC "myBits":

Cree las siguientes variables en la interfaz del bloque:
Variable

Sección

Tipo de datos

Enable

Input

BOOL

SourceWord

WORD

EnableOut

Output

BOOL

DestinationUDT

"myBits"

El siguiente ejemplo muestra el funcionamiento de la instrucción:

(QDEOH
6RXUFH:RUG

Programación del PLC
Manual de programación y manejo, 11/2019

6&$77(5
:25'
(1

(12

,1

287

(QDEOH2XW
6
'HVWLQDWLRQ8'7

839

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Tipo de datos

IN

SourceWord

WORD (16 bits)

OUT

DestinationUDT

El operando "DestinationUDT"
es del tipo de datos PLC (UDT).
Consta de 16 elementos y, por
tanto, tiene el mismo tamaño
que la WORD que se debe des‐
componer.

Si el operando #Enable devuelve el estado lógico "1" en la entrada de habilitación EN, se
ejecuta la instrucción. El operando #SourceWord del tipo de datos WORD se descompone en
sus bits individuales (16) y se asigna a los distintos elementos del operando #DestinationUDT.
Si ocurre un error durante la ejecución de la instrucción, el operando #EnableOut devuelve el
estado lógico "0" en la salida de habilitación ENO.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

840

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

SCATTER_BLK: Dispersión de elementos de un ARRAY of secuencia de bits en bits individuales
Descripción
La instrucción "Dispersión de elementos de un ARRAY of secuencia de bits en bits
individuales" descompone uno o varios elementos de un ARRAY of BYTE, WORD, DWORD
o LWORD en bits individuales y los guarda en un ARRAY of BOOL, un STRUCT anónimo o un
tipo de datos PLC con elementos booleanos exclusivamente. En el parámetro COUNT_IN se
introduce el número de elementos del ARRAY de origen que deben dispersarse. El ARRAY de
origen en el parámetro IN puede tener más elementos que los indicados en el parámetro
COUNT_IN. El ARRAY of BOOL, el STRUCT anónimo o el tipo de datos PLC deben tener
suficientes elementos para poder guardar los bits de la secuencia de bits descompuesta. El
área de memoria de destino también puede ser mayor.
Nota
ARRAY of BOOL multidimensional
Si el ARRAY es un ARRAY of BOOL multidimensional, se cuentan también los bits de relleno
de las dimensiones contenidas, aunque no se hayan declarado explícitamente.
Ejemplo 1: un ARRAY[1..10,0..4,1..2] of BOOL recibe el mismo tratamiento que un
ARRAY[1..10,0..4,1..8] of BOOL o que un ARRAY[0..399] of BOOL.
Ejemplo 2: En el parámetro IN hay un ARRAY[0..5] of WORD (sourceArrayWord[2])
interconectado. El parámetro COUNT_IN tiene el valor "3". En el parámetro OUT hay un
ARRAY[0..1,0..5,0..7] of BOOL (destinationArrayBool[0,0,0]) interconectado. Tanto el array
del parámetro IN como el del parámetro OUT tienen 96 bits de tamaño. El ARRAY of WORD
se descompone en 48 bits individuales.
Nota
Si el límite inferior del ARRAY de destino no es "0", cabe considerar lo siguiente:
Por motivos de rendimiento, el índice debe comenzar siempre en un límite de BYTE, WORD,
DWORD o LWORD. Esto significa que debe calcularse el índice partiendo del límite inferior del
ARRAY. Como base para el cálculo se utiliza la siguiente fórmula:
Índice válido = límite inferior del ARRAY + n(número de secuencias de bits) * número de bits
de la secuencia de bits deseada
Para un ARRAY[-2..45] of BOOL y la secuencia de bits WORD, el cálculo es el siguiente:
● Índice válido (-2) = -2 + 0 * 16
● Índice válido (14) = -2 + 1 * 16
● Índice válido (30) = -2 + 2 * 16
Ver un ejemplo más adelante.
Nota
Disponibilidad de la instrucción
La instrucción puede utilizarse en las CPU de la serie S7-1200 a partir de la versión de firmware
>4.2 y en las CPU de la serie S7-1500 a partir de la versión de firmware 2.1.

Programación del PLC
Manual de programación y manejo, 11/2019

841

Instrucciones
4.1 Instrucciones
De este modo es posible, p. ej., descomponer palabras de estado y leer y modificar por índice
el estado de los bits individuales. Mediante GATHER pueden juntarse nuevamente los bits en
una secuencia de bits.
La salida de habilitación ENO devuelve el estado lógico "0" si se cumple una de las siguientes
condiciones:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El ARRAY de origen tiene menos elementos que los que se especifican en el parámetro
COUNT_IN.
● El índice del ARRAY de destino no empieza en un límite de BYTE, WORD, DWORD o
LWORD. En este caso no se escribe ningún resultado en el ARRAY of BOOL.
● El ARRAY[*] of BOOL, el STRUCT o el tipo de datos PLC no proporcionan el número
necesario de elementos.
– CPU S7-1500: en este caso se descomponen tantas secuencias de bits como sea
posible y se escriben en el ARRAY of BOOL, STRUCT anónimo o tipo de datos PLC. El
resto de secuencias de bits no se tiene en cuenta.
– CPU S7-1200: no se efectúa ninguna copia.
Nota
CPU S7-1200: Salida de habilitación ENO = 0
Si la salida de habilitación ENO devuelve el estado lógico "0", no se escribirán datos en el
parámetro de salida OUT.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:

842

Parámetro

Declaración

Tipo de datos

Área de memo‐ Descripción
ria

S7-1200

S7-1500

EN

Input

BOOL

BOOL

I, Q, M, D, L o
constante

Entrada de ha‐
bilitación

ENO

Output

BOOL

BOOL

I, Q, M, D, L

Salida de habili‐
tación

IN

Input

Elemento de un
ARRAY[*] of
<secuencia de
bits>

Elemento de
un
ARRAY[*] of
<secuencia
de bits>

I, Q, M, D, L

ARRAY of <se‐
cuencia de
bits> que se
descompone.
Los valores no
pueden encon‐
trarse en el
área de perife‐
ria o en el DB
de un objeto
tecnológico.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro
COUNT_IN

Declaración

Tipo de datos

Input

S7-1200

S7-1500

USINT, UINT,
UDINT

USINT,
UINT,
UDINT,
ULINT

Área de memo‐ Descripción
ria
I, Q, M, D, L

Contador del
número de ele‐
mentos del
ARRAY de ori‐
gen que deben
descomponer‐
se.
El valor no pue‐
de encontrarse
en el área de
periferia o en el
DB de un obje‐
to tecnológico.

OUT

Output

Elemento de un
ARRAY[*] of
BOOL,
STRUCT o tipo
de datos PLC

Elemento de I, Q, M, D, L
un
ARRAY[*] of
BOOL,
STRUCT o
tipo de datos
PLC

ARRAY,
STRUCT o tipo
de datos PLC
en el/los que se
guardan los
bits individuales

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar la secuencia de
bits deseada.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo de un ARRAY de destino con el límite inferior de "0"
Cree las siguientes variables en la interfaz del bloque:
Variable

Sección

Tipo de datos

Enable

Input

BOOL

SourceArrayWord

ARRAY[0..5] of WORD

CounterInput

UDINT

EnableOut

Output

BOOL

DestinationArrayBool

ARRAY[0..95] of BOOL

El siguiente ejemplo muestra el funcionamiento de la instrucción:

(QDEOH
6RXUFH$UUD\:RUG>@
&RXQWHU,QSXW

Programación del PLC
Manual de programación y manejo, 11/2019

6&$77(5B%/.
:25'
(1

(12

,1

287

(QDEOH2XW
6
'HVWLQDWLRQ$UUD\%RRO>@

&2817B,1

843

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Tipo de datos

IN

SourceArrayWord[2]

ARRAY[0..5] of WORD (Pueden
dispersarse 96 bits.)

COUNT_IN

CounterInput = 3

UDINT3 (deben descomponerse
3 WORD o 48 bits. Esto significa
que en el ARRAY de destino de‐
be haber al menos 48 bits).

OUT

DestinationArrayBool[0]

El operando "DestinationArray‐
Bool" es del tipo de datos
ARRAY[0..95] of BOOL. Hay por
tanto 96 elementos BOOL dispo‐
nibles.

Si el operando #Enable devuelve el estado lógico "1" en la entrada de habilitación EN, se
ejecuta la instrucción. La 3.ª, 4.ª y 5.ª WORD del operando #SourceArrayWord se
descomponen en sus bits individuales (48) y se asignan a los distintos elementos del operando
#DestinationArrayBool a partir del 1.er elemento. Si ocurre un error durante la ejecución de la
instrucción, el operando #EnableOut devuelve el estado lógico "0" en la salida de habilitación
ENO.

Ejemplo de ARRAY de destino con el límite inferior de "-2"
Cree las siguientes variables en la interfaz del bloque:
Variable

Sección

Tipo de datos

Enable

Input

BOOL

SourceArrayWord

ARRAY[0..5] of WORD

CounterInput

UDINT

EnableOut

Output

DestinationArrayBool

BOOL
ARRAY[-2..93] of BOOL

El siguiente ejemplo muestra el funcionamiento de la instrucción:

(QDEOH
6RXUFH$UUD\:RUG>@
&RXQWHU,QSXW

844

6&$77(5B%/.
:25'
(1

(12

,1

287

(QDEOH2XW
6
'HVWLQDWLRQ$UUD\%RRO>@

&2817B,1

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Tipo de datos

IN

SourceArrayWord[2]

ARRAY[0..5] of WORD (Pueden
dispersarse 96 bits.)

COUNT_IN

CounterInput = 3

UDINT3 (deben descomponerse
3 WORD o 48 bits. Esto significa
que en el ARRAY de destino de‐
be haber al menos 48 bits).

OUT

DestinationArrayBool[14]

El operando "DestinationArray‐
Bool" es del tipo de datos
ARRAY[-2..93] of BOOL. Hay
por tanto 96 elementos BOOL
disponibles.

Si el operando #Enable devuelve el estado lógico "1" en la entrada de habilitación EN, se
ejecuta la instrucción. La 3.ª, 4.ª y 5.ª WORD del operando #SourceArrayWord se descompone
en sus bits individuales (48) y a partir del 16.º elemento se asignan a los distintos elementos
del operando #DestinationArrayBool. Si ocurre un error durante la ejecución de la instrucción,
el operando #EnableOut devuelve el estado lógico "0" en la salida de habilitación ENO. Los 32
bits restantes no se escriben.
Encontrará información adicional y el código del programa del ejemplo anterior aquí: Sample
Library for Instructions (Página 615).

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

GATHER: Recopilación de bits individuales en una secuencia de bits
Descripción
La instrucción "Recopilación de bits individuales en una secuencia de bits" recompone los bits
de un ARRAY of BOOL, un STRUCT anónimo o un tipo de datos PLC en una secuencia de bits
con elementos booleanos exclusivamente. La secuencia de bits se guarda en una variable del
tipo de datos BYTE, WORD, DWORD o LWORD.
Nota
ARRAY of BOOL multidimensional
En la instrucción "Recopilación de bits individuales en una secuencia de bits" no está permitido
utilizar un ARRAY of BOOL multidimensional.

Programación del PLC
Manual de programación y manejo, 11/2019

845

Instrucciones
4.1 Instrucciones
Nota
Longitud del ARRAY, del STRUCT o del tipo de datos PLC
El ARRAY, el STRUCT o el tipo de datos PLC deben tener tantos elementos como se
especifique en la secuencia de bits.
Es decir, en el tipo de datos BYTE, p. ej., el ARRAY, el STRUCT anónimo o el tipo de datos PLC
deben tener exactamente 8 elementos (WORD = 16, DWORD = 32 y LWORD = 64).
Nota
Disponibilidad de la instrucción
La instrucción puede utilizarse en las CPU de la serie S7-1200 a partir de la versión de firmware
>4.2 y en las CPU de la serie S7-1500 a partir de la versión de firmware 2.1.
La salida de habilitación ENO devuelve el estado lógico "0" si se cumple una de las siguientes
condiciones:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El ARRAY, STRUCT o tipo de datos PLC (UDT) tiene más o menos elementos BOOL que
lo que especifica la secuencia de bits. En este caso no se transfieren los elementos BOOL.
● Hay menos bits que el número de bits necesario.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

846

Declaración

Tipo de datos
S7-1200

S7-1500

Área de memo‐ Descripción
ria

EN

Input

BOOL

BOOL

I, Q, M, D, L o
constante

Entrada de ha‐
bilitación

ENO

Output

BOOL

BOOL

I, Q, M, D, L

Salida de habili‐
tación

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro
IN

Declaración

Tipo de datos

Input

S7-1500

ARRAY[*] of
BOOL,
STRUCT o tipo
de datos PLC

ARRAY[*] of I, Q, M, D, L
BOOL,
STRUCT o
tipo de datos
PLC

*: 8, 16, 32 o 64
elementos

OUT

Output

Área de memo‐ Descripción
ria

S7-1200

BYTE, WORD,
DWORD

*: 8, 16, 32 o
64 elemen‐
tos

BYTE,
WORD,
DWORD,
LWORD

ARRAY,
STRUCT o tipo
de datos PLC
cuyos bits se re‐
componen en
una secuencia
de bits.
Los valores no
pueden encon‐
trarse en el
área de perife‐
ria o en el DB
de un objeto
tecnológico.

I, Q, M, D, L

Secuencia de
bits recopilada
que está guar‐
dada en una va‐
riable

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar la secuencia de
bits deseada.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo con un ARRAY
Cree las siguientes variables en la interfaz del bloque:
Variable

Sección

Tipo de datos

Enable

Input

BOOL

SourceArray

ARRAY[0..15] of BOOL

EnableOut

Output

BOOL

DestinationWord

WORD

El siguiente ejemplo muestra el funcionamiento de la instrucción:

(QDEOH
6RXUFH$UUD\

Programación del PLC
Manual de programación y manejo, 11/2019

*$7+(5
:25'
(1

(12

,1

287

(QDEOH2XW
6
'HVWLQDWLRQ:RUG

847

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operando
concretos:
Parámetro

Operando

Tipo de datos

IN

SourceArray

El operando "SourceArray" es
del tipo de datos ARRAY[0..15]
of BOOL. Consta de 16 elemen‐
tos y, por tanto, tiene el mismo
tamaño que la WORD en la que
se deben recomponer los bits.

OUT

DestinationWord

WORD (16 bits)

Si el operando #Enable devuelve el estado lógico "1" en la entrada de habilitación EN, se
ejecuta la instrucción. Los bits del operando #SourceArray se recopilan en una WORD. Si
ocurre un error durante la ejecución de la instrucción, el operando #EnableOut devuelve el
estado lógico "0" en la salida de habilitación ENO.
Encontrará información adicional y el código del programa del ejemplo anterior aquí: Sample
Library for Instructions (Página 615).

Ejemplo con un tipo de datos PLC (UDT)
Cree el siguiente tipo de datos PLC "myBits":

Cree las siguientes variables en la interfaz del bloque:
Variable

Sección

Tipo de datos

Enable

Input

BOOL

SourceUDT
EnableOut
DestinationWord

"myBits"
Output

BOOL
WORD

El siguiente ejemplo muestra el funcionamiento de la instrucción:

848

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

(QDEOH
6RXUFH8'7

*$7+(5
:25'
(1

(12

,1

287

(QDEOH2XW
6
'HVWLQDWLRQ:RUG

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operando
concretos:
Parámetro

Operando

Tipo de datos

IN

SourceUDT

El operando "SourceUDT" es del
tipo de datos PLC (UDT). Consta
de 16 elementos y, por tanto, tie‐
ne el mismo tamaño que la
WORD en la que se deben re‐
componer los bits.

OUT

DestinationWord

WORD (16 bits)

Si el operando #Enable devuelve el estado lógico "1" en la entrada de habilitación EN, se
ejecuta la instrucción. Los bits del operando #SourceUDT se recomponen en una WORD. Si
ocurre un error durante la ejecución de la instrucción, el operando #EnableOut devuelve el
estado lógico "0" en la salida de habilitación ENO.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

849

Instrucciones
4.1 Instrucciones

GATHER_BLK: Recopilación de bits individuales en varios elementos de un ARRAY of secuencia de bits
Descripción
La instrucción "Recopilación de bits individuales en varios elementos de un ARRAY of
secuencia de bits" recompone los bits de un ARRAY of BOOL, un STRUCT anónimo o un tipo
de datos PLC con elementos booleanos exclusivamente en uno o varios elementos de un
ARRAY of <secuencia de bits>. En el parámetro COUNT_OUT se introduce el número de
elementos del ARRAY de destino que deben escribirse. Al hacerlo se especifica
implícitamente cuántos elementos del ARRAY of BOOL, del STRUCT anónimo o del tipo de
datos PLC se necesitan. El ARRAY de destino en el parámetro OUT puede tener más
elementos que los indicados en el parámetro COUNT_OUT. El ARRAY of <secuencia de bits>
debe tener suficientes elementos para poder guardar los bits que deben recopilarse. El
ARRAY de destino también puede ser mayor.
Nota
ARRAY of BOOL multidimensional
Si el ARRAY es un ARRAY of BOOL multidimensional, se cuentan también los bits de relleno
de las dimensiones contenidas, aunque no se hayan declarado explícitamente.
Ejemplo 1: un ARRAY[1..10,0..4,1..2] of BOOL recibe el mismo tratamiento que un
ARRAY[1..10,0..4,1..8] of BOOL o que un ARRAY[0..399] of BOOL.
Ejemplo 2: En el parámetro OUT hay un ARRAY[0..5] of WORD (sourceArrayWord[2])
interconectado. El parámetro COUNT_IN tiene el valor "3". En el parámetro IN hay un
ARRAY[0..1,0..5,0..7] of BOOL (destinationArrayBool[0,0,0]) interconectado. Tanto el array
del parámetro IN como el del parámetro OUT tienen 96 bits de tamaño. A partir del ARRAY of
BOOL se recomponen 48 bits individuales.
Nota
Si el límite inferior del ARRAY de origen no es "0", cabe considerar lo siguiente:
Por motivos de rendimiento, el índice debe comenzar siempre en un límite de BYTE, WORD,
DWORD o LWORD. Esto significa que debe calcularse el índice partiendo del límite inferior del
ARRAY. Como base para el cálculo se utiliza la siguiente fórmula:
Índice válido = límite inferior del ARRAY + n(número de secuencias de bits) * número de bits
de la secuencia de bits deseada
Para un ARRAY[-2..45] of BOOL y la secuencia de bits WORD, el cálculo es el siguiente:
● Índice válido (-2) = -2 + 0 * 16
● Índice válido (14) = -2 + 1 * 16
● Índice válido (30) = -2 + 2 * 16
Ver un ejemplo más adelante.
Nota
Disponibilidad de la instrucción
La instrucción puede utilizarse en las CPU de la serie S7-1200 a partir de la versión de firmware
>4.2 y en las CPU de la serie S7-1500 a partir de la versión de firmware 2.1.

850

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La salida de habilitación ENO devuelve el estado lógico "0" si se cumple una de las siguientes
condiciones:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El índice del ARRAY de origen no empieza en un límite de BYTE, WORD, DWORD o
LWORD. En este caso no se escribe ningún resultado en el ARRAY of <secuencia de bits>.
● El ARRAY[*] of <secuencia de bits> no proporciona el número necesario de elementos.
– CPU S7-1500: en este caso se juntan tantas secuencias de bits como sea posible y se
escriben en el ARRAY of <secuencia de bits>. El resto de los bits no se tiene en cuenta.
– CPU S7-1200: no se efectúa ninguna copia.
Nota
CPU S7-1200: Salida de habilitación ENO = 0
Si la salida de habilitación ENO devuelve el estado lógico "0", no se escribirán datos en el
parámetro de salida OUT.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memo‐ Descripción
ria

S7-1200

S7-1500

EN

Input

BOOL

BOOL

I, Q, M, D, L o
constante

Entrada de ha‐
bilitación

ENO

Output

BOOL

BOOL

I, Q, M, D, L

Salida de habili‐
tación

IN

Input

Elemento de un
ARRAY[*] of
BOOL,
STRUCT o tipo
de datos PLC

Elemento de I, Q, M, D, L
un
ARRAY[*] of
BOOL,
STRUCT o
tipo de datos
PLC

ARRAY of
BOOL,
STRUCT o tipo
de datos PLC
cuyos bits se re‐
componen
(ARRAY de ori‐
gen).
Los valores no
pueden encon‐
trarse en el
área de perife‐
ria o en el DB
de un objeto
tecnológico.

Programación del PLC
Manual de programación y manejo, 11/2019

851

Instrucciones
4.1 Instrucciones
Parámetro
COUNT_OUT

Declaración

Tipo de datos

Input

S7-1200

S7-1500

USINT, UINT,
UDINT

USINT,
UINT,
UDINT,
ULINT

Área de memo‐ Descripción
ria
I, Q, M, D, L

Contador del
número de ele‐
mentos del
ARRAY de des‐
tino que deben
escribirse.
El valor no pue‐
de encontrarse
en el área de
periferia o en el
DB de un obje‐
to tecnológico.

OUT

Output

Elemento de un
ARRAY[*] of
<secuencia de
bits>

Elemento de
un
ARRAY[*] of
<secuencia
de bits>

I, Q, M, D, L

ARRAY de <se‐
cuencia de
bits> en el que
se guardan los
bits (ARRAY de
destino)

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar la secuencia de
bits deseada.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo de ARRAY de origen con el límite inferior de "0"
Cree las siguientes variables en la interfaz del bloque:
Variable

Sección

Tipo de datos

Enable

Input

BOOL

SourceArrayBool

ARRAY[0..95] of BOOL

CounterOutput

UDINT

EnableOut

Output

BOOL

DestinationArrayWord

ARRAY[0..5] of WORD

El siguiente ejemplo muestra el funcionamiento de la instrucción:

(QDEOH
6RXUFH$UUD\%RRO>@
&RXQWHU2XWSXW

852

*$7+(5B%/.
:25'
(1

(12

,1

287

(QDEOH2XW
6
'HVWLQDWLRQ$UUD\:RUG>@

&2817B287

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Tipo de datos

IN

SourceArrayBool[0]

El operando "SourceArrayBool"
es del tipo de datos
ARRAY[0..95] of BOOL. Hay por
tanto 96 elementos BOOL dispo‐
nibles que pueden volver a reco‐
pilarse en palabras.

COUNT_OUT

CounterOutput = 3

UDINT3 (deben escribirse 3 pa‐
labras. Esto significa que en el
ARRAY de origen debe haber 48
bits).

OUT

DestinationArrayWord[2]

El operando "DestinationArray‐
Word" es del tipo de datos
ARRAY[0..5] of WORD. Hay 6
elementos WORD disponibles.

Si el operando #Enable devuelve el estado lógico "1" en la entrada de habilitación EN, se
ejecuta la instrucción. A partir del 1.er elemento del operando #SourceArrayBool se
recomponen 48 bits en el operando #DestinationArrayWord. En el ARRAY de destino se
empieza a partir del 3.er elemento. Esto significa que los primeros 16 bits se escriben en la 3.ª
palabra, los segundos 16 bits en la 4.ª palabra y los terceros 16 bits en la 5.ª palabra del
ARRAY de destino. Si ocurre un error durante la ejecución de la instrucción, el operando
#EnableOut devuelve el estado lógico "0" en la salida de habilitación ENO.

Ejemplo de ARRAY de origen con el límite inferior de "-2"
Cree las siguientes variables en la interfaz del bloque:
Variable

Sección

Tipo de datos

Enable

Input

BOOL

SourceArrayBool

ARRAY[-2..93] of BOOL

CounterOutput

UDINT

EnableOut

Output

BOOL

DestinationArrayWord

ARRAY[0..5] of WORD

El siguiente ejemplo muestra el funcionamiento de la instrucción:

(QDEOH
6RXUFH$UUD\%RRO>@
&RXQWHU2XWSXW

Programación del PLC
Manual de programación y manejo, 11/2019

*$7+(5B%/.
:25'
(1

(12

,1

287

(QDEOH2XW
6
'HVWLQDWLRQ$UUD\:RUG>@

&2817B287

853

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Tipo de datos

IN

SourceArrayBool[14]

El operando "SourceArrayBool"
es del tipo de datos
ARRAY[-2..93] of BOOL. Dado
que se empieza a partir del 16.º
elemento, hay solo 80 elemen‐
tos BOOL disponibles que pue‐
dan volver a recopilarse en pala‐
bras.

COUNT_OUT

CounterOutput = 3

UDINT3 (deben escribirse 3 pa‐
labras. Esto significa que en el
ARRAY de origen debe haber 48
bits).

OUT

DestinationArrayWord[2]

El operando "DestinationArray‐
Word" es del tipo de datos
ARRAY[0..5] of WORD. Hay 6
elementos WORD disponibles.

Si el operando #Enable devuelve el estado lógico "1" en la entrada de habilitación EN, se
ejecuta la instrucción. A partir del 16.º elemento del operando #SourceArrayBool se recopilan
48 bits en el operando #DestinationArrayWord. En el ARRAY de destino se empieza a partir del
3.er elemento. Esto significa que los primeros 16 bits del ARRAY de origen no se tienen en
cuenta. Los segundos 16 bits se escriben en la 3.ª palabra, los terceros 16 bits en la 4.ª palabra
y los cuartos 16 bits en la 5.ª palabra del ARRAY de destino. Los 64 bits restantes del ARRAY
de origen tampoco se tienen en cuenta. Si ocurre un error durante la ejecución de la
instrucción, el operando #EnableOut devuelve el estado lógico "0" en la salida de habilitación
ENO.
Encontrará información adicional y el código del programa del ejemplo anterior aquí: Sample
Library for Instructions (Página 615).

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

AssignmentAttempt: Intento de asignación de VARIANT a una referencia
Descripción
La instrucción "AssignmentAttempt" intenta asignar una variable VARIANT a una variable de
referencia. El tipo de datos de una variable de referencia se define en el momento de la
declaración, mientras que el tipo de datos de una variable VARIANT se determina en tiempo
de ejecución. En las variables de referencia no está permitida la conversión implícita del tipo
de datos. Para asignar un tipo de datos al otro se utiliza el intento de asignación.
En el intento de asignación, se comprueba en tiempo de ejecución si la variable VARIANT es
del tipo de datos correcto. Si es así, se ejecuta la asignación. Una vez ejecutada

854

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
correctamente, en la variable de destino hay una referencia válida; en caso contrario, hay
CERO.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

EN

Input

BOOL

Entrada de habili‐
tación

ENO

Output

BOOL

Salida de habilita‐
ción

SRC

Input

VARIANT

● Interfaz de
bloque de una
FC:
Input, Output,
InOut, Temp

Descripción

Puntero hacia la
variable origen cu‐
ya dirección se ha
leído

● Interfaz de
bloque de un
FB:
Input, Output,
Temp
DST

Output

Referencia a:
● Secuencias de
bits, excepto
BOOL,
● Enteros,
● Números en
coma flotante,
● Cadenas de
caracteres,

● Interfaz de
bloque de una
FC: Input,
Output, Temp,
Return

Referencia a la
que se transfiere
la dirección de la
variable de origen

● Interfaz de
bloque de un
FB: Temp

● Tipos de datos
PLC (UDT),
● Tipos de datos
de sistema
(SDT),
● ARRAYs de
los tipos de
datos citados

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

855

Instrucciones
4.1 Instrucciones

Reglas
Para el intento de asignación se aplican las siguientes reglas: Las variables VARIANT que no
satisfacen estas reglas devuelven el valor "NULL" en tiempo de ejecución.
● VARIANT debe señalar a una dirección de un área de memoria optimizada.
● VARIANT no puede señalar a una dirección de un área de memoria temporal.
● Si desea asignar un VARIANT a una referencia a un ARRAY, se aplican las siguientes
reglas:
– La variable VARIANT debe señalar a un ARRAY cuyos límites coincidan exactamente
con los de la referencia declarada. Una variable VARIANT que señala a un ARRAY [0..9]
no concuerda con una variable REF_TO ARRAY[1..10].
– Además, los bloques que forman el valor de la variable VARIANT deben compilarse una
vez en una CPU de la serie S7-1500, con firmware de la versión V2.5.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
En la interfaz del bloque se han declarado la VARIANT "myVariant" y la variable de referencia
"myReference".

En el código de programa se intenta asignar "myVariant" a la variable de referencia
"myReference". Si en tiempo de ejecución "myVariant" tiene el tipo de datos "Int", en
"myReference" hay una referencia válida a la variable de destino de VARIANT; en caso
contrario, hay CERO. Si la asignación se ha realizado correctamente, la salida de habilitación
"ENO" devuelve el estado lógico "1" y se puede escribir el valor "10" en la variable de destino.

856

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Consulte también
Principios básicos de las referencias (Página 310)
Intento de asignación de VARIANT a una referencia (Página 325)
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Sample Library for Instructions (Página 615)
Principios básicos de KOP (Página 7943)

SWAP: Cambiar disposición
Descripción
La instrucción "Cambiar disposición" permite cambiar la disposición de los bytes de la entrada
IN y consultar el resultado en la salida OUT.
La figura siguiente muestra cómo se intercambian los bytes de un operando del tipo de datos
DWORD utilizando la instrucción "Cambiar disposición":


,1

 

 
 

 

 

 


 



 

 

 

 

 

 


 



 

 


 


 



 
 

 






287

 



 

 


 



 




 

 

 

 


 


 

 

 





Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Cambiar disposición":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de me‐
moria

Descripción

EN

Input

BOOL

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

BOOL

I, Q, M, D, L

Salida de habilitación

Programación del PLC
Manual de programación y manejo, 11/2019

857

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de me‐
moria

Descripción

IN

Input

WORD,
DWORD

WORD,
DWORD,
LWORD

I, Q, M, D, L, Operando cuyos bytes se
P o constante intercambian.

OUT

Output

WORD,
DWORD

WORD,
DWORD,
LWORD

I, Q, M, D, L, P Resultado

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6:$3
:25'

ಯ7DJ,Qಯ

ಯ7DJ,QB9DOXHಯ

(1

(12

,1

287

ಯ7DJ2XWಯ
6
ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

0000 1111 0101 0101

OUT

TagOut_Value

0101 0101 0000 1111

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Cambiar
disposición". La disposición de los bytes se cambia y se deposita en el operando
"TagOut_Value".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

858

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

DB ARRAY
ReadFromArrayDB: Leer en un bloque de datos ARRAY
Descripción
La instrucción "Leer en un bloque de datos ARRAY" lee el elemento de un bloque de datos del
tipo ARRAY-DB al que hace referencia el índice y escribe el valor en el área de destino.
Un bloque de datos ARRAY es un bloque de datos que consta exactamente de un ARRAY of
<tipo de datos>. Los elementos del ARRAY pueden ser del tipo de datos PLC o de cualquier
otro tipo de datos simple. El contaje del ARRAY comienza siempre por el límite inferior "0".
La salida de habilitación ENO devuelve el estado lógico FALSE cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico FALSE.
● Se produce un error al ejecutar la instrucción.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Leer en un bloque de datos
ARRAY":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

DB

Input

DB_ANY

I, Q, M, D, L

Bloque de datos en el que se
lee

INDEX

Input

DINT

I, Q, M, D, L, P o
constante

Elemento del DB que se lee.
Puede ser una constante,
una variable global o un valor
indexado.

VALUE

Output 1)

VARIANT

L (puede declarar‐ Valor que se lee y se devuel‐
se en las seccio‐
ve
nes "Input",
"InOut" y "Temp"
de la interfaz del
bloque.)

RET_VAL

Output

INT

I, Q, M, D, L, P

Información de error:
El parámetro RET_VAL de‐
vuelve un código de error
cuando ocurre un error du‐
rante la ejecución de la ins‐
trucción.

1) El parámetro VALUE está declarado como Output, ya que los datos desembocan en la variable. Sin
embargo, la propia variable debe declararse como InOut en la interfaz del bloque.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

859

Instrucciones
4.1 Instrucciones

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*

Explicación

(W#16#...)
0000

Ningún error

80B4

El tipo de datos del elemento, guardado en el bloque de datos ARRAY, no concuerda con
el tipo de datos del elemento transferido en VARIANT.

80B5

La operación de copia se ha cancelado.

8132

El bloque de datos no existe, es demasiado corto, está protegido contra escritura o está
en la memoria de carga.

8135

El bloque de datos de ARRAY contiene valores no válidos.

8154

El bloque de datos es de un tipo incorrecto.

8282

El valor del parámetro INDEX se encuentra fuera de los valores límite del ARRAY.

8450

El tipo de datos VARIANT del parámetro VALUE devuelve el valor "0".

8452

Error de creación de código

8453

Hay dos posibles causas de error:
● El tamaño del parámetro VALUE no coincide con la longitud del elemento en el bloque
de datos ARRAY.
● Ninguna de las dos variables se encuentra en un área de memoria con acceso
optimizado. Encontrará más información sobre los tipos de acceso al área de memoria
aquí: Fundamentos del acceso a bloques (Página 54)

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
5HDG)URP$UUD\'%

ಯ7DJ,QBಯ

ಯ$UUD\'%ಯ


860

ಯ7DJ2XWಯ

(1

(12

'%

5(7B9$/

ಯ7DJ5HWB9DOಯ

9$/8(

ಯ7DUJHW)LHOGಯ

,1'(;

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

DB

ArrayDB

El operando "ArrayDB" es un
ARRAY-DB del tipo de datos
Array [0..10] of INT.

INDEX

2

Segundo elemento del
"ArrayDB"

VALUE

TargetField

El operando "TargetField" es
una variable global del tipo de
datos INT.

Si el operando "TagIn1" devuelve el estado lógico "1", se ejecuta la instrucción. El segundo
elemento se lee en el "ArrayDB" y se escribe en el operando "TargetField". Si no se producen
errores al ejecutar la instrucción, la salida de habilitación ENO devuelve el estado lógico TRUE
y la salida "TagOut" se activa.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Ejemplo de uso de bloques de datos ARRAY (Página 43)
Principios básicos de VARIANT (Página 335)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de KOP (Página 7943)

WriteToArrayDB: Escribir en un bloque de datos ARRAY
Descripción
La instrucción "Escribir en un bloque de datos ARRAY" escribe el elemento al que hace
referencia el índice en un bloque de datos del tipo ARRAY-DB.
Un bloque de datos ARRAY es un bloque de datos que consta exactamente de un ARRAY of
<tipo de datos>. Los elementos del ARRAY pueden ser del tipo de datos PLC o de cualquier
otro tipo de datos simple. El contaje del ARRAY comienza siempre por el límite inferior "0".
La salida de habilitación ENO devuelve el estado lógico FALSE cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico FALSE.
● Se produce un error al ejecutar la instrucción.

Programación del PLC
Manual de programación y manejo, 11/2019

861

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Escribir en un bloque de datos
ARRAY":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

DB

Input

DB_ANY

I, Q, M, D, L

Bloque de datos en el que se
escribe

INDEX

Input

DINT

I, Q, M, D, L, P o
constante

Elemento del DB en el que se
escribe. Puede ser una cons‐
tante, una variable global o
un valor indexado.

VALUE

Input

VARIANT

L (puede declarar‐ Valor que se escribe
se en las seccio‐
nes "Input",
"InOut" y "Temp"
de la interfaz del
bloque.)

RET_VAL

Output

INT

I, Q, M, D, L, P

Información de error:
El parámetro RET_VAL de‐
vuelve un código de error
cuando ocurre un error du‐
rante la ejecución de la ins‐
trucción.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*

Explicación

(W#16#...)

862

0000

Ningún error

80B4

El tipo de datos del elemento, guardado en el bloque de datos ARRAY, no concuerda con
el tipo de datos del elemento transferido en VARIANT.

80B5

La operación de copia se ha cancelado.

8132

El bloque de datos no existe, es demasiado corto o está en la memoria de carga.

8134

El bloque de datos está protegido contra escritura.

8135

El bloque de datos no es un bloque de datos de ARRAY.

8154

El bloque de datos es de un tipo incorrecto.

8282

El valor del parámetro INDEX se encuentra fuera de los valores límite del ARRAY.

8350

El tipo de datos VARIANT del parámetro VALUE devuelve el valor "0".

8352

Error de creación de código

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Código de
error*

Explicación

(W#16#...)
8353

Hay dos posibles causas de error:
● El tamaño del parámetro VALUE no coincide con la longitud del elemento en el bloque
de datos ARRAY.
● Ninguna de las dos variables se encuentra en un área de memoria con acceso
optimizado. Encontrará más información sobre los tipos de acceso al área de memoria
aquí: Fundamentos del acceso a bloques (Página 54)

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
:ULWH7R$UUD\'%

ಯ7DJ,QBಯ

ಯ$UUD\'%ಯ

ಯ7DJ2XWಯ

(1

(12

'%

5(7B9$/



,1'(;

ಯ6RXUFH)LHOGಯ

9$/8(

ಯ7DJ5HWB9DOಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetros

Operando

Valor

DB

ArrayDB

El operando "ArrayDB" es un
ARRAY-DB del tipo de datos
Array [0..10] of INT.

INDEX

2

Segundo elemento del
"ArrayDB"

VALUE

SourceField

El operando "SourceField" es
una variable global del tipo de
datos INT.

Si el operando "TagIn1" devuelve el estado lógico "1", se ejecuta la instrucción. El valor del
operando "SourceField" se escribe en el segundo elemento del DB de ARRAY. Si no se
producen errores al ejecutar la instrucción, la salida de habilitación ENO devuelve el estado
lógico TRUE y la salida "TagOut" se activa.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)

Programación del PLC
Manual de programación y manejo, 11/2019

863

Instrucciones
4.1 Instrucciones
Cambiar formatos de visualización en el estado del programa (Página 8529)
Ejemplo de uso de bloques de datos ARRAY (Página 43)
Principios básicos de VARIANT (Página 335)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de KOP (Página 7943)

ReadFromArrayDBL: Leer en un bloque de datos ARRAY de la memoria de carga
Descripción
La instrucción "Leer en un bloque de datos ARRAY de la memoria de carga" lee el elemento
de un bloque de datos del tipo ARRAY-DB de la memoria de carga al que hace referencia el
índice y lo escribe en el área de destino.
Un bloque de datos ARRAY es un bloque de datos que consta exactamente de un ARRAY of
<tipo de datos>. Los elementos del ARRAY pueden ser del tipo de datos PLC o de cualquier
otro tipo de datos simple. El contaje del ARRAY comienza siempre por el límite inferior "0".
Si el bloque de datos ARRAY se ha marcado con el atributo de bloque "Depositar sólo en la
memoria de carga", se guarda únicamente en la memoria de carga.
Si en el parámetro REQ se detecta un flanco de señal ascendente, se ejecuta la instrucción.
El parámetro BUSY devuelve el estado lógico "1". Si en el parámetro BUSY se detecta un
flanco de señal descendente, finaliza la instrucción. Durante un ciclo del programa, el
parámetro DONE tiene el estado lógico "1" y durante este ciclo se emite el valor leído en el
parámetro VALUE. En los demás ciclos del programa, el valor del parámetro VALUE no se
modifica.
La salida de habilitación ENO devuelve el estado lógico FALSE cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico FALSE.
● Se produce un error al ejecutar la instrucción.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Leer en un bloque de datos
ARRAY de la memoria de carga":

864

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

REQ

Input

BOOL

I, Q, M, D, L o
constante

REQ = "1": Comenzar la lec‐
tura del DB de ARRAY

DB 1)

Input

DB_ANY

I, Q, M, D, L

Bloque de datos en el que se
lee

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

INDEX

Input

DINT

I, Q, M, D, L, P o
constante

Elemento del DB que se lee.
Puede ser una constante,
una variable global o un valor
indexado.

VALUE 1)

InOut

VARIANT

D (elemento de un
bloque de datos
global)

Puntero al bloque de datos
de la memoria de trabajo que
se lee y cuyo valor se escribe.

L (puede declarar‐ No está permitido utilizar
constantes locales o varia‐
se en las seccio‐
bles de la sección TEMP.
nes "Input",
"InOut" y "Temp"
de la interfaz del
bloque.)
BUSY

Output

BOOL

I, Q, M, D, L

BUSY = "1": La lectura del
DB de ARRAY todavía no ha
finalizado

DONE

Output

BOOL

I, Q, M, D, L

DONE = "1": La instrucción
se ha ejecutado correcta‐
mente

ERROR

Output

INT

I, Q, M, D, L, P

Información de error:
El parámetro ERROR devuel‐
ve un código de error cuando
ocurre un error durante la eje‐
cución de la instrucción.

1)

Los bloques de datos deben crearse con la propiedad de bloque "Optimizado".

Parámetro ERROR
La tabla siguiente muestra el significado de los valores del parámetro ERROR:
Código de
error*

Explicación

(W#16#...)
0000

Ningún error

80B4

El tipo de datos del elemento, guardado en el bloque de datos ARRAY, no concuerda con
el tipo de datos del elemento transferido en VARIANT.

8230

El número del bloque de datos es incorrecto.

8231

El bloque de datos no existe.

8232

El bloque de datos es demasiado corto o no está en la memoria de carga.

8235

El bloque de datos no es un DB de ARRAY.

8254

El bloque de datos es de un tipo incorrecto.

8382

El valor del parámetro INDEX se encuentra fuera de los valores límite del ARRAY.

8750

El tipo de datos VARIANT del parámetro VALUE devuelve el valor "0".

8751

Error de creación de código

8752

Error de creación de código

Programación del PLC
Manual de programación y manejo, 11/2019

865

Instrucciones
4.1 Instrucciones
Código de
error*

Explicación

(W#16#...)
8753

El tamaño del parámetro VALUE no coincide con la longitud del elemento en el bloque de
datos ARRAY.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Encontrará la descripción de los códigos de error activados por las instrucciones "READ_DBL"
y "WRIT_DBL" en las descripciones de las instrucciones correspondientes.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ5HDG)URP$UUD\'%/B'%ಯ
5HDG)URP$UUD\'%/

ಯ7DJ,QBಯ

(1
ಯ7DJ5HTಯ
ಯ$UUD\'%ಯ

ಯ7DJ2XWಯ

(12

5(4

%86<

ಯ7DJ%XV\ಯ

'%

'21(

ಯ7DJ'RQHಯ

(5525

ಯ7DJ(UURUಯ



,1'(;

ಯ7DUJHW)LHOGಯ

9$/8(

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

REQ

TagReq

BOOL

DB

ArrayDB

El operando "ArrayDB" es un
ARRAY-DB del tipo de datos
ARRAY [0..10] of INT.

INDEX

2

Segundo elemento del
"ArrayDB"

VALUE

TargetField

El operando "TargetField" es
una variable global del tipo de
datos INT.

BUSY

TagBusy

BOOL

DONE

TagDone

BOOL

Si el operando "TagIn1" devuelve el estado lógico "1" y en el operando "TagReq" se registra un
flanco de señal ascendente, la instrucción se ejecuta. El segundo elemento se lee en el
"ArrayDB" y se devuelve en el parámetro "VALUE". En cuanto se detecta un flanco de señal
descendente en el operando "TagBusy", finaliza la instrucción y el valor del parámetro VALUE
ya no se modifica. Si no se producen errores al ejecutar la instrucción, la salida de habilitación
ENO devuelve el estado lógico TRUE y la salida "TagOut" se activa. Después de ejecutar la
instrucción, el operando "TagDone" tiene el estado lógico TRUE.

866

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
READ_DBL: Leer de un bloque de datos de la memoria de carga (Página 2919)
WRIT_DBL: Escribir en un bloque de datos de la memoria de carga (Página 2923)
Ejemplo de uso de bloques de datos ARRAY (Página 43)
Principios básicos de VARIANT (Página 335)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente (Página 618)
Principios básicos de KOP (Página 7943)

WriteToArrayDBL: Escribir en un bloque de datos ARRAY de la memoria de carga
Descripción
La instrucción "Escribir en un bloque de datos ARRAY de la memoria de carga" escribe el
elemento al que hace referencia el índice en un bloque de datos del tipo ARRAY-DB de la
memoria de carga.
Un bloque de datos ARRAY es un bloque de datos que consta exactamente de un ARRAY of
<tipo de datos>. Los elementos del ARRAY pueden ser del tipo de datos PLC o de cualquier
otro tipo de datos simple. El contaje del ARRAY comienza siempre por el límite inferior "0".
Si el bloque de datos ARRAY se ha marcado con el atributo de bloque "Depositar sólo en la
memoria de carga", se guarda únicamente en la memoria de carga.
Si en el parámetro REQ se detecta un flanco de señal ascendente, se ejecuta la instrucción.
El parámetro BUSY devuelve el estado lógico "1". Si en el parámetro BUSY se detecta un
flanco de señal descendente, finaliza la instrucción y el valor del parámetro VALUE se escribe
en el bloque de datos. Durante un ciclo del programa, el parámetro DONE tiene el estado
lógico "1".
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Se produce un error al ejecutar la instrucción.

Programación del PLC
Manual de programación y manejo, 11/2019

867

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Escribir en un bloque de datos
ARRAY de la memoria de carga":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

REQ

Input

BOOL

I, Q, M, D, L o
constante

REQ = "1": Comenzar a es‐
cribir en el DB de array

DB 1)

Input

DB_ANY

I, Q, M, D, L

Bloque de datos ARRAY en
el que se escribe

INDEX

Input

DINT

I, Q, M, D, L, P o
constante

Elemento del DB en el que se
escribe. Puede ser una cons‐
tante, una variable global o
un valor indexado.

VALUE 1)

Input

VARIANT

D (elemento de un
bloque de datos
global)

Puntero al bloque de datos
de la memoria de trabajo que
se lee y cuyo valor se escribe.

L (puede declarar‐ No está permitido utilizar
constantes locales o varia‐
se en las seccio‐
bles de la sección TEMP.
nes "Input",
"InOut" y "Temp"
de la interfaz del
bloque.)
BUSY

Output

BOOL

I, Q, M, D, L

BUSY = "1": Todavía no se
ha terminado de escribir en el
DB de array

DONE

Output

BOOL

I, Q, M, D, L

DONE = "1": La instrucción
se ha ejecutado correcta‐
mente

ERROR

Output

INT

I, Q, M, D, L, P

Información de error:
El parámetro ERROR devuel‐
ve un código de error cuando
ocurre un error durante la eje‐
cución de la instrucción.

1)

Los bloques de datos deben crearse con la propiedad de bloque "Optimizado".

Parámetro ERROR
La tabla siguiente muestra el significado de los valores del parámetro ERROR:
Código de
error*

Explicación

(W#16#...)

868

0000

Ningún error

80B4

El tipo de datos del elemento, guardado en el bloque de datos ARRAY, no concuerda con
el tipo de datos del elemento transferido en VARIANT.

8230

El número del bloque de datos es incorrecto.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Código de
error*

Explicación

(W#16#...)
8231

El bloque de datos no existe.

8232

El bloque de datos es demasiado corto o no está en la memoria de carga.

8234

El bloque de datos está protegido contra escritura.

8235

El bloque de datos no es un DB de ARRAY.

8254

El bloque de datos es de un tipo incorrecto.

8382

El valor del parámetro INDEX se encuentra fuera de los valores límite del ARRAY.

8450

El tipo de datos VARIANT del parámetro VALUE devuelve el valor "0".

8751

Error de creación de código

8752

Error de creación de código

8753

El tamaño del parámetro VALUE no coincide con la longitud del elemento en el bloque de
datos ARRAY.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Encontrará la descripción de los códigos de error activados por las instrucciones "READ_DBL"
y "WRIT_DBL" en las descripciones de las instrucciones correspondientes.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ:ULWH7R$UUD\'%/B'%ಯ
:ULWH7R$UUD\'%/

ಯ7DJ,QBಯ
(1
ಯ7DJ5HTಯ
ಯ$UUD\'%ಯ

ಯ6RXUFH)LHOGಯ

ಯ7DJ2XWಯ

(12

5(4

%86<

ಯ7DJ%XV\ಯ

'%

'21(

ಯ7DJ'RQHಯ

(5525

ಯ7DJ(UURUಯ

,1'(;
9$/8(

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

REQ

TagReq

BOOL

DB

ArrayDB

El operando "ArrayDB" es un
ARRAY-DB del tipo de datos
ARRAY [0..10] of INT.

INDEX

2

Segundo elemento del
"ArrayDB"

VALUE

SourceField

El operando "SourceField" es
una variable global del tipo de
datos INT.

Programación del PLC
Manual de programación y manejo, 11/2019

869

Instrucciones
4.1 Instrucciones
Parámetro

Operando

Valor

BUSY

TagBusy

BOOL

DONE

TagDone

BOOL

Si el operando "TagIn1" devuelve el estado lógico "1" y en el operando "TagReq" se registra un
flanco de señal ascendente, la instrucción se ejecuta. En cuanto se detecta un flanco
descendente en el operando "TagBusy", la instrucción finaliza y el valor del parámetro VALUE
se escribe en el segundo elemento del "ArrayDB". Si no se producen errores al ejecutar la
instrucción, la salida de habilitación ENO devuelve el estado lógico TRUE y la salida "TagOut"
se activa. Después de ejecutar la instrucción, el operando "TagDone" tiene el estado lógico
TRUE.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
READ_DBL: Leer de un bloque de datos de la memoria de carga (Página 2919)
WRIT_DBL: Escribir en un bloque de datos de la memoria de carga (Página 2923)
Ejemplo de uso de bloques de datos ARRAY (Página 43)
Principios básicos de VARIANT (Página 335)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente (Página 618)
Principios básicos de KOP (Página 7943)

VARIANT
VariantGet: Leer valor de una variable VARIANT
Descripción
Con la instrucción "Leer valor de una variable VARIANT" se lee el valor de la variable a la que
apunta VARIANT en el parámetro SRC y se escribe este valor en la variable del parámetro
DST.
El parámetro SRC es del tipo de datos VARIANT. En el parámetro DST se puede indicar
cualquier tipo de datos excepto VARIANT.

870

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
El tipo de datos de la variable indicada en el parámetro DST debe coincidir con el tipo de datos
al que apunta VARIANT.
Nota
Para copiar estructuras y ARRAY también se puede utilizar la instrucción
"MOVE_BLK_VARIANT: Copiar área". Encontrará más información al respecto en "Consulte
también".
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Los tipos de datos no coinciden. (No se transmiten valores.)

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Leer valor de una variable
VARIANT":
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

S7-1500

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

I, Q, M, D, L
o constante

Entrada de habili‐
tación

ENO

Output

BOOL

I, Q, M, D, L

I, Q, M, D, L

Salida de habilita‐
ción

SRC

Input

VARIANT

L (puede declararse en las
secciones "Input", "InOut" y
"Temp" de la interfaz del blo‐
que.)

DST

Output

I, Q, M, D, L
Secuencias de
bits, enteros, nú‐
meros en coma flo‐
tante, tiempos, fe‐
cha y hora, se‐
cuencias de carac‐
teres, elementos
de ARRAY, tipos
de datos PLC

I, Q, M, D, L,
P

Variable que se
lee

Resultado de la
instrucción

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

871

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

7DJ,QB6RXUFH

9DULDQW*HW
(1

(12

ಯ7DJ2XWಯ
6

65&

'67

ಯ7DJ2XWB'HVWಯ

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El valor de la
variable a la que señala VARIANT en el operando "#TagIn_Source" se lee y se escribe en el
operando "TagOut_Dest".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
MOVE_BLK_VARIANT: Copiar área (Página 822)
Principios básicos de KOP (Página 7943)

VariantPut: Escribir valor en una variable VARIANT
Descripción
La instrucción "Escribir valor en una variable VARIANT" escribe el valor de la variable indicada
en el parámetro SRC en la memoria del parámetro DST al que apunta VARIANT.
El parámetro DST es del tipo de datos VARIANT. En el parámetro SRC se puede indicar
cualquier tipo de datos excepto VARIANT.
El tipo de datos de la variable del parámetro SRC debe coincidir con el tipo de datos al que
apunta VARIANT.
Nota
Para copiar estructuras y ARRAY también se puede utilizar la instrucción
"MOVE_BLK_VARIANT: Copiar área". Encontrará más información al respecto en "Consulte
también".
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Los tipos de datos no coinciden. (No se transmiten valores.)

872

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Escribir valor en una variable
VARIANT":
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

S7-1500

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

I, Q, M, D, L
o constante

Entrada de habili‐
tación

ENO

Output

BOOL

I, Q, M, D, L

I, Q, M, D, L

Salida de habilita‐
ción

SRC

Input

I, Q, M, D, L
Secuencias de
bits, enteros, nú‐
meros en coma flo‐
tante, tiempos, fe‐
cha y hora, se‐
cuencias de carac‐
teres, elementos
de ARRAY, tipos
de datos PLC

I, Q, M, D, L,
P

Variable que se
lee

DST

Input

VARIANT

L (puede declararse en las
secciones "Input", "InOut" y
"Temp" de la interfaz del blo‐
que.)

Resultado de la
instrucción

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

9DULDQW3XW
(1

ಯ7DJ,QB6RXUFHಯ

65&

7DJ,QB'HVW

'67

(12

ಯ7DJ2XWಯ
6

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El valor del
operando "TagIn_Source" se escribe en la variable a la que apunta VARIANT en el operando
#TagIn_Dest.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)

Programación del PLC
Manual de programación y manejo, 11/2019

873

Instrucciones
4.1 Instrucciones
MOVE_BLK_VARIANT: Copiar área (Página 822)
Principios básicos de KOP (Página 7943)

CountOfElements: Consultar número de elementos de ARRAY
Descripción
La instrucción "Consultar número de elementos de ARRAY" permite saber el número de
elementos de ARRAY que tiene una variable a la que apunta VARIANT.
Si el ARRAY es unidimensional, el resultado se devuelve como número de elementos ARRAY.
(La diferencia entre el límite superior e inferior + 1). Si el ARRAY es multidimensional, el
resultado se devuelve como cantidad de todas las dimensiones.
Si desea consultar los elementos de un DB de ARRAY deberá utilizar las instrucciones
"ReadFromArrayDB" o "WriteFromArrayDB", puesto que estas permiten una evaluación de
errores más precisa para el número de elementos.
Nota
Instancias
El puntero VARIANT no puede señalar a ninguna instancia y, por lo tanto, tampoco a ninguna
multiinstancia o ARRAY of multiinstancias.
Nota
ARRAY en un bloque de datos
Si desea consultar el número de elementos de un ARRAY que se encuentra en un bloque de
datos, en este no debe estar activado el atributo de bloque "Bloque de datos protegido contra
escritura en el dispositivo". De lo contrario, el parámetro RET_VAL devuelve el resultado "0",
independientemente de cuántos elementos contenga el ARRAY.
El resultado también es "0" si la variable VARIANT no es ARRAY.
Si VARIANT apunta a un ARRAY of BOOL, se cuentan también los elementos de relleno. (P.
ej. con un ARRAY[0..1] of BOOL se devuelve 8.)
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● La variable VARIANT no es un ARRAY. (El resultado es "0".)

874

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar número de elementos
de ARRAY":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

VARIANT

L (puede declarar‐ Variable que se consulta
se en las seccio‐
nes "Input",
"InOut" y "Temp"
de la interfaz del
bloque.)

RET_VAL

Output

UDINT

I, Q, M, D, L

Resultado de la instrucción

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

&RXQW2I(OHPHQWV
(1

7DJ,QB6RXUFH

,1

ಯ7DJ2XWಯ
6

(12
5(7B9$/

ಯ7DJ2XWB5HW9DOಯ

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El número de
elementos de ARRAY de la variable a la que apunta VARIANT en el operando #TagIn_Source
se lee y se devuelve en el operando "TagOut_RetVal".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

875

Instrucciones
4.1 Instrucciones

ARRAY[*]
LOWER_BOUND: Leer límite inferior del ARRAY
Descripción
En la interfaz de un bloque de función o de una función se pueden declarar variables del tipo
de datos ARRAY[*]. Para estas variables locales pueden leerse los límites del ARRAY. En el
parámetro DIM debe indicarse la dimensión deseada.
Para leer el límite inferior variable del ARRAY está disponible la instrucción "Leer límite inferior
del ARRAY".
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● La dimensión indicada en la entrada DIM no existe.
Nota
Disponibilidad de la instrucción
La instrucción está disponible en las CPU de la serie S7-1200 a partir de la versión de firmware
>= 4.2 y en las CPU de la serie S7-1500 a partir de la versión de firmware >= 2.0.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Leer límite inferior del ARRAY":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

ARR

Input

ARRAY[*]

FB => sección
InOut

ARRAY cuyo límite inferior
variable debe leerse.

FC => sección In‐
put y InOut

876

DIM

Input

UDINT

I, Q, M, D, L, P o
constante

Dimensión del ARRAY cuyo
límite inferior variable debe
leerse.

OUT

Output

DINT

I, Q, M, D, L, P

Resultado

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
/2:(5B%281'
ಯ(QDEOHB6WDUWಯ

(1

$55$<B$

$55



',0

(12

287

ಯ(QDEOHB2XWಯ
6

ಯ5HVXOWಯ

Si el operando "Enable_Start" devuelve el estado lógico "1", se ejecuta la instrucción. Esta lee
el límite inferior variable del ARRAY #ARRAY_A a partir de la segunda dimensión. Si no se
producen errores al ejecutar la instrucción, el resultado se escribe en el operando "Result" y se
activa el operando "Enable_Out".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos del ARRAY (Página 293)
Principios básicos de KOP (Página 7943)

UPPER_BOUND: Leer límite superior de ARRAY
Descripción
En la interfaz de un bloque de función o de una función se pueden declarar variables del tipo
de datos ARRAY[*]. Para estas variables locales pueden leerse los límites del ARRAY. En el
parámetro DIM debe indicarse la dimensión deseada.
Para leer el límite superior variable del ARRAY está disponible la instrucción "Leer límite
superior de ARRAY".
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● La dimensión indicada en la entrada DIM no existe.
Nota
Disponibilidad de la instrucción
La instrucción está disponible en las CPU de la serie S7-1200 a partir de la versión de firmware
>= 4.2 y en las CPU de la serie S7-1500 a partir de la versión de firmware >= 2.0.

Programación del PLC
Manual de programación y manejo, 11/2019

877

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Leer límite superior de ARRAY":
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

ARR

Input

ARRAY[*]

FB => sección
InOut

ARRAY cuyo límite superior
variable debe leerse.

FC => sección In‐
put y InOut
DIM

Input

UDINT

I, Q, M, D, L, P o
constante

Dimensión del ARRAY cuyo
límite superior variable debe
leerse.

OUT

Output

DINT

I, Q, M, D, L, P

Resultado

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
833(5B%281'
ಯ(QDEOHB6WDUWಯ

(1

$55$<B$

$55



',0

(12

287

ಯ(QDEOHB2XWಯ
6

ಯ5HVXOWಯ

Si el operando "Enable_Start" devuelve el estado lógico "1", se ejecuta la instrucción. Esta lee
el límite superior variable del ARRAY #ARRAY_A a partir de la segunda dimensión. Si no se
producen errores al ejecutar la instrucción, el resultado se escribe en el operando "Result" y se
activa el operando "Enable_Out".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos del ARRAY (Página 293)
Principios básicos de KOP (Página 7943)

878

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Legacy
FieldRead: Leer campo
Descripción
La instrucción "Leer campo" permite leer un elemento determinado del campo indicado en la
entrada MEMBER y transferir su contenido a la variable de la salida VALUE. El índice del
elemento de campo que se lee se define en la entrada INDEX. En la entrada MEMBER se
indica el primer elemento del campo que se lee.
Los tipos de datos del componente de campo indicado en el parámetro MEMBER, del índice
y de la variable del parámetro VALUE deben coincidir con el tipo de datos de la instrucción
"Leer campo", puesto que no es posible una conversión implícita.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El elemento de campo indicado en la entrada INDEX no está definido en el campo
especificado en la entrada MEMBER.
● Durante la ejecución ocurren errores, p. ej. se produce un rebase por exceso.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Leer campo":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de memo‐ Descripción
ria

EN

Input

BOOL

BOOL

I, Q, M, D, L o
constante

Entrada de ha‐
bilitación

ENO

Output

BOOL

BOOL

I, Q, M, D, L

Salida de habi‐
litación

INDEX

Input

DINT

DINT

I, Q, M, D, L, P
o constante

Índice del ele‐
mento cuyo
contenido se
lee.

Programación del PLC
Manual de programación y manejo, 11/2019

879

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de memo‐ Descripción
ria

MEMBER

Input

Números bina‐
rios, enteros,
números en co‐
ma flotante,
tiempos, DA‐
TE, TOD,
CHAR y
WCHAR como
elementos de
una variable
ARRAY

Números bina‐ D, L
rios, enteros,
números en co‐
ma flotante,
tiempos, DA‐
TE, TOD,
LTOD, CHAR
y WCHAR co‐
mo elementos
de una varia‐
ble ARRAY

Primer elemen‐
to del campo
que se lee.

VALUE

Output

Números bina‐
rios, enteros,
números en co‐
ma flotante,
tiempos, DA‐
TE, TOD,
CHAR,
WCHAR

Números bina‐ I, Q, M, D, L, P
rios, enteros,
números en co‐
ma flotante,
tiempos, DA‐
TE, TOD,
LTOD, CHAR,
WCHAR

Operando al
que se transfie‐
re el contenido
del elemento.

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
)LHOG5HDG
5($/
(1
DBLQGH[
ಯ'%Bಯ
0DLQB)LHOG>@

,1'(;

4

(12
9$/8(

DBUHDO

0(0%(5

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Variable

Valor

INDEX

a_index

4

MEMBER

"DB_1".Main_Field[-10]

Primer elemento del campo
"Main_Field[-10..10] of REAL" en el bloque de
datos "DB_1"

VALUE

a_real

Elemento con índice 4 del campo
"Main_Field[-10..10] of REAL"

El elemento con índice 4 se lee del campo "Main_Field[-10...10] of REAL" y se escribe en la
variable "a_real". El elemento de campo que se lee está definido por el valor de la entrada
INDEX.

880

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

FieldWrite: Escribir campo
Descripción
La instrucción "Escribir campo" transfiere el contenido de la variable de la entrada VALUE a un
elemento determinado del campo especificado en la salida MEMBER. El índice del elemento
que se escribe se define con el valor de la entrada INDEX. En la salida MEMBER se indica el
primer elemento del campo en el que se escribe.
Los tipos de datos del componente de campo indicado en el parámetro MEMBER, del índice
y de la variable del parámetro VALUE deben coincidir con el tipo de datos de la instrucción
"Leer campo", puesto que no es posible una conversión implícita.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El elemento indicado en la entrada INDEX no está definido en el campo especificado en la
salida MEMBER.
● Durante la ejecución ocurren errores, p. ej. se produce un rebase por exceso.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Escribir campo":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de memo‐ Descripción
ria

EN

Input

BOOL

BOOL

I, Q, M, D, L o
constante

Entrada de ha‐
bilitación

ENO

Output

BOOL

BOOL

I, Q, M, D, L

Salida de habi‐
litación

INDEX

Input

DINT

DINT

I, Q, M, D, L, P
o constante

Índice del ele‐
mento en el
que se escribe
el contenido de
VALUE.

Programación del PLC
Manual de programación y manejo, 11/2019

881

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de memo‐ Descripción
ria

VALUE

Input

Números bina‐
rios, enteros,
números en co‐
ma flotante,
tiempos, DA‐
TE, TOD,
CHAR,
WCHAR

Números bina‐ I, Q, M, D, L, P
rios, enteros,
o constante
números en co‐
ma flotante,
tiempos, DA‐
TE, TOD,
LTOD, CHAR,
WCHAR

Operando cu‐
yo contenido
se copia.

MEMBER

Output

Números bina‐
rios, enteros,
números en co‐
ma flotante,
tiempos, DA‐
TE, TOD,
CHAR y
WCHAR como
elementos de
una variable
ARRAY

Números bina‐ D, L
rios, enteros,
números en co‐
ma flotante,
tiempos, DA‐
TE, TOD,
LTOD, CHAR
y WCHAR co‐
mo elementos
de una varia‐
ble ARRAY

Primer elemen‐
to del campo
en el que se es‐
cribe el conte‐
nido de VA‐
LUE.

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
)LHOG:ULWH
5($/
(1
DBLQGH[

,1'(;

DBUHDO

9$/8(

4

(12
0(0%(5

ಯ'%Bಯ
0DLQB)LHOG>@

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

INDEX

a_index

4

VALUE

a_real

10.54

MEMBER

"DB_1".Main_Field[-10]

Primer elemento del campo
"Main_Field[-10..10] of REAL" en el bloque de
datos "DB_1"

El valor "10.54" de la variable "a_real" se escribe en el componente con el índice 4 del campo
"Main_Field[-10..10] of REAL". El índice del elemento de campo al que se transfiere el
contenido de la variable "a_real" está definido por el valor de la entrada INDEX.

882

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

BLKMOV: Copiar área
Descripción
La instrucción "Copiar área" permite copiar los contenidos de un área de memoria (área de
origen) en un área de memoria diferente (área de destino). La operación de copia se realiza por
orden ascendente de direcciones. Las áreas de origen y destino se definen mediante
VARIANT.
Nota
Las variables de la instrucción sólo se pueden usar en áreas de memoria en las que no esté
activado el atributo "Acceso optimizado al bloque". Esto es válido para bloques de datos (DB),
bloques de organización (OB), funciones (FC), marcas (M), entradas (I) y salidas (Q).
Sin embargo, si una variable de la instrucción se ha declarado con el ajuste de remanencia
"Ajustar en IDB", la variable también se puede usar en áreas de memoria "con acceso
optimizado al bloque".
La figura siguiente muestra el principio de la operación de copia:

Programación del PLC
Manual de programación y manejo, 11/2019

883

Instrucciones
4.1 Instrucciones

'%'%:

$

%

'%'%:

&

'

'%'%:

(

)

'%'%:

*

+

&RSLDU
/DFRSLDVHHIHFW¼DHQ
VHQWLGRDVFHQGHQWHGH
ODVGLUHFFLRQHV

0:

$

%

0:

&

'

0:

(

)

0:

*

+

UHDGHPHPRULD

Coherencia de los datos de origen y destino
Tenga en cuenta que al ejecutar la instrucción "Copiar área" no se modifican los datos de
origen. De lo contrario no está garantizada la coherencia de los datos de destino.

Posibilidad de interrupción
No hay limitaciones en cuanto a la profundidad de anidamiento.

Áreas de memoria
La instrucción "Copiar área" permite copiar las siguientes áreas de memoria:
● Áreas de un bloque de datos
● Marcas
● Memoria imagen de proceso de las entradas
● Memoria imagen de proceso de las salidas

Reglas generales para copiar
Las áreas de origen y destino no deben solaparse. Si las áreas de origen y destino son de
diferente longitud, se copia solo hasta la longitud del área más pequeña.
Si el área de origen es más pequeña que el área de destino, el área de origen se copiará por
completo en el área de destino. Los restantes bytes del área de destino permanecen
inalterados.

884

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Si el área de destino es más pequeña que el área de origen, se escribirá en toda el área de
destino. Los restantes bytes del área de origen se ignoran.
Al copiar un área del tipo de datos BOOL, la variable debe direccionarse de forma absoluta y
la longitud indicada del área debe ser un múltiplo de 8, pues de lo contrario no se ejecutará la
instrucción.

Reglas para copiar cadenas de caracteres
La instrucción "Copiar área" permite copiar asimismo áreas de origen y destino del tipo de
datos STRING. Si solo el área de origen es del tipo de datos STRING, se copiarán los
caracteres que realmente contiene la cadena de caracteres. La información sobre la longitud
real y máxima también se escribe en el área de destino. Si tanto el área de origen como el área
de destino son del tipo de datos STRING, la longitud actual de la cadena de caracteres en el
área de destino se pone al número de caracteres realmente copiados.
Si se desea copiar información sobre la longitud máxima y real de una cadena de caracteres,
las áreas de los parámetros SRCBLK y DSTBLK deben indicarse en bytes.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Copiar área":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

SRCBLK

Input

VARIANT

I, Q, M, D, L, P

Indicación del área de memo‐
ria que se copia (área de ori‐
gen).

RET_VAL

Output

INT

I, Q, M, D, L, P

Información de error:
El parámetro RET_VAL de‐
vuelve un código de error
cuando ocurre un error du‐
rante la ejecución de la ins‐
trucción.

DSTBLK

Output 1)

VARIANT

I, Q, M, D, L, P

Indicación del área de memo‐
ria en la que se copia (área
de destino).

1) El parámetro DSTBLK está declarado como Output, ya que los datos desembocan en la variable. Sin
embargo, la propia variable debe declararse como InOut en la interfaz del bloque.

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8092

El área de origen o destino está solo en la memoria de carga.

Programación del PLC
Manual de programación y manejo, 11/2019

885

Instrucciones
4.1 Instrucciones
Código de
error*
(W#16#...)

Explicación

8152

En el parámetro SRCBLK no están permitidos los tipos de datos WSTRING, WCHAR,
BOOL, ARRAY of STRING, ARRAY of WSTRING y ARRAY of WCHAR.

8352

En el parámetro DSTBLK no están permitidos los tipos de datos WSTRING, WCHAR,
BOOL, ARRAY of STRING, ARRAY of WSTRING y ARRAY of WCHAR.

Información
de error ge‐
neral

Consulte también: "GET_ERR_ID: Consultar ID de error localmente"

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
%/.029
ಯ7DJ,Qಯ
30%<7(

9DULDQW
(1
65&%/.

(12
5(7B9$/
'67%/.

ಯ7DJ2XWಯ
ಯ7DJB5HW9DOಯ

3'%'%;%<7(

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
copia 10 bytes a partir de MB100 y los escribe en el DB1. Si ocurre un error durante la
operación de copia, el respectivo código de error se indica en la variable "Tag_RetVal".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
GET_ERR_ID: Consultar ID de error localmente (Página 933)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de KOP (Página 7943)

886

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

UBLKMOV: Copiar área sin interrupciones
Descripción
La instrucción "Copiar área sin interrupciones" permite copiar los contenidos de un área de
memoria (área de origen) en un área de memoria diferente (área de destino). La operación de
copia se realiza por orden ascendente de direcciones. Las áreas de origen y destino se definen
mediante VARIANT.
La operación de copia no debe ser interrumpida por otras actividades del sistema operativo.
Ello puede aumentar el tiempo de reacción a alarmas de la CPU durante la ejecución de la
instrucción "Copiar área sin interrupciones".
Nota
Las variables de la instrucción sólo se pueden usar en áreas de memoria en las que no esté
activado el atributo "Acceso optimizado al bloque". Esto es válido para bloques de datos (DB),
bloques de organización (OB), funciones (FC), marcas (M), entradas (I) y salidas (Q).
Sin embargo, si una variable de la instrucción se ha declarado con el ajuste de remanencia
"Ajustar en IDB", la variable también se puede usar en áreas de memoria "con acceso
optimizado al bloque".

Áreas de memoria
La instrucción "Copiar área sin interrupciones" permite copiar las siguientes áreas de memoria:
● Áreas de un bloque de datos
● Marcas
● Memoria imagen de proceso de las entradas
● Memoria imagen de proceso de las salidas

Reglas generales para copiar
Al ejecutar la instrucción "Copiar área sin interrupciones" no pueden solaparse las áreas de
origen y destino. Si el área de origen es más pequeña que el área de destino, el área de origen
se copiará por completo en el área de destino. Los restantes bytes del área de destino
permanecen inalterados.
Si el área de destino es más pequeña que el área de origen, se escribirá en toda el área de
destino. Los restantes bytes del área de origen se ignoran.
Si un área de origen o destino definida como parámetro formal es menor que un área de origen
o destino indicada en los parámetros SRCBLK o DSTBLK, no se transferirán datos.
Al copiar un área del tipo de datos BOOL, la variable debe direccionarse de forma absoluta y
la longitud indicada del área debe ser un múltiplo de 8, pues de lo contrario no se ejecutará la
instrucción.
La instrucción "Copiar área sin interrupciones" permite copiar 16 KB como máximo. A este
respecto deben tenerse en cuenta las limitaciones específicas de la CPU.

Programación del PLC
Manual de programación y manejo, 11/2019

887

Instrucciones
4.1 Instrucciones

Reglas para copiar cadenas de caracteres
La instrucción "Copiar área sin interrupciones" permite copiar asimismo áreas de origen y
destino del tipo de datos STRING. Si solo el área de origen es del tipo de datos STRING, se
copiarán los caracteres que realmente contiene la cadena de caracteres. La información sobre
la longitud real y máxima no se escribe en el área de destino. Si tanto el área de origen como
el área de destino son del tipo de datos STRING, la longitud actual de la cadena de caracteres
en el área de destino se pone al número de caracteres realmente copiados. Si se copian áreas
del tipo de datos STRING, debe indicarse "1" como longitud del área.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Copiar área sin interrupciones":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

SRCBLK

Input

VARIANT

I, Q, M, D, L, P

Indicación del área de memo‐
ria que se copia (área de ori‐
gen).

RET_VAL

Output

INT

I, Q, M, D, L, P

Información de error:
El parámetro RET_VAL de‐
vuelve un código de error
cuando ocurre un error du‐
rante la ejecución de la ins‐
trucción.

DSTBLK

Output 1)

VARIANT

I, Q, M, D, L, P

Indicación del área de memo‐
ria en la que se copia (área
de destino).

1) El parámetro DSTBLK está declarado como Output, ya que los datos desembocan en la variable. Sin
embargo, la propia variable debe declararse como InOut en la interfaz del bloque.

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:

888

Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8091

El área de origen o destino está solo en la memoria de carga.

8152

En el parámetro SRCBLK no están permitidos los tipos de datos WSTRING, WCHAR,
BOOL, ARRAY of STRING, ARRAY of WSTRING y ARRAY of WCHAR.

8352

En el parámetro DSTBLK no están permitidos los tipos de datos WSTRING, WCHAR,
BOOL, ARRAY of STRING, ARRAY of WSTRING y ARRAY of WCHAR.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Código de
error*
(W#16#...)

Explicación

Información
de error gene‐
ral

Consulte también: "GET_ERR_ID: Consultar ID de error localmente"

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
8%/.029
ಯ7DJ,Qಯ
30%<7(

9DULDQW
(1
65&%/.

(12
5(7B9$/
'67%/.

ಯ7DJ2XWಯ
ಯ7DJB5HW9DOಯ

3'%'%;%<7(

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
copia 10 bytes a partir de MB100 y los escribe en el DB1. Si ocurre un error durante la
operación de copia, el respectivo código de error se indica en la variable "Tag_RetVal".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
GET_ERR_ID: Consultar ID de error localmente (Página 933)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

889

Instrucciones
4.1 Instrucciones

FILL: Rellenar área
Descripción
La instrucción "Rellenar área" rellena un área de memoria (área de destino) con el contenido
de un área de memoria diferente (área de origen). La instrucción "Rellenar área" copia el
contenido del área de origen en el área de destino las veces necesarias hasta que el área de
destino quede escrita por completo. La operación de copia se realiza por orden ascendente de
direcciones.
Las áreas de origen y destino se definen mediante VARIANT.
Nota
Las variables de la instrucción sólo se pueden usar en áreas de memoria en las que no esté
activado el atributo "Acceso optimizado al bloque". Esto es válido para bloques de datos (DB),
bloques de organización (OB), funciones (FC), marcas (M), entradas (I) y salidas (Q).
Sin embargo, si una variable de la instrucción se ha declarado con el ajuste de remanencia
"Ajustar en IDB", la variable también se puede usar en áreas de memoria "con acceso
optimizado al bloque".
Para los bloques con el atributo "Acceso optimizado al bloque" puede utilizarse la instrucción
"FILL_BLK: Rellenar área".
La figura siguiente muestra el principio de la operación de copia:
),//

%9$/

$

%

0:

$

%

0:

&

'

0:

&

'

0:

(

)

0:

(

)

0:

*

+

0:

*

+

0:

$

%

0:

&

'

0:

(

)

0:

*

+

0:

$

%

0:

&

'

0:

%/.

Ejemplo: el contenido del área MW100 a MW118 debe inicializarse con el contenido de las
palabras de marcas MW14 a MW20.

890

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Coherencia de los datos de origen y destino
Tenga en cuenta que al ejecutar la instrucción "Rellenar área" no se modifican los datos de
origen, pues de lo contrario no se podría garantizar la coherencia de los datos de destino.

Áreas de memoria
La instrucción "Rellenar área" permite copiar las siguientes áreas de memoria:
● Áreas de un bloque de datos
● Marcas
● Memoria imagen de proceso de las entradas
● Memoria imagen de proceso de las salidas

Reglas generales para copiar
Las áreas de origen y destino no deben solaparse. Aunque el área de destino que se debe
inicializar no sea múltiplo entero de la longitud del parámetro de entrada BVAL, el área de
destino se rellenará igualmente hasta el último byte.
Si el área de destino que se debe rellenar es menor que el área de origen, sólo se copiarán los
datos que quepan en el área de destino.
Si el área de origen o destino realmente existente es menor que el tamaño del área de memoria
parametrizada para el área de origen o destino (parámetros BVAL, BLK), los datos no se
transfieren.
Si el puntero ANY (origen o destino) es del tipo de datos BOOL, debe direccionarse de forma
absoluta y la longitud indicada del área debe ser un múltiplo de 8, pues de lo contrario no se
ejecutará la instrucción.
Si el área de destino es del tipo de datos STRING, la instrucción escribe la cadena de
caracteres completa, incluida la información de administración.

Reglas para copiar estructuras
Al transferir una estructura a modo de parámetro de entrada, tenga en cuenta que la longitud
de una estructura se rige siempre por un número par de bytes. Si se declara una estructura con
un número impar de bytes, la estructura necesitará un byte adicional de espacio en memoria.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Rellenar área":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

Programación del PLC
Manual de programación y manejo, 11/2019

891

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

BVAL

Input

VARIANT

I, Q, M, D, L, P

Indicación del área de memo‐
ria (área de origen) con cuyo
contenido se rellena el área
de destino en el parámetro
BLK.

RET_VAL

Output

INT

I, Q, M, D, L, P

Información de error:
El parámetro RET_VAL de‐
vuelve un código de error
cuando ocurre un error du‐
rante la ejecución de la ins‐
trucción.

BLK

Output 1)

VARIANT

I, Q, M, D, L, P

Indicación del área de memo‐
ria que se rellena con el con‐
tenido del área de origen.

1) El parámetro BLK está declarado como Output, ya que los datos desembocan en la variable. Sin
embargo, la propia variable debe declararse como InOut en la interfaz del bloque.

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8092

El área de origen o destino está solo en la memoria de carga.

8152

En el parámetro BVAL no están permitidos los tipos de datos WSTRING, WCHAR,
BOOL, ARRAY of STRING, ARRAY of WSTRING y ARRAY of WCHAR.

8352

En el parámetro BLK no están permitidos los tipos de datos WSTRING, WCHAR, BOOL,
ARRAY of STRING, ARRAY of WSTRING y ARRAY of WCHAR.

Informa‐
Consulte también: "GET_ERR_ID: Consultar ID de error localmente"
ción de
error gene‐
ral
*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

892

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
),//
ಯ7DJ,Qಯ
30:25'

9DULDQW
(1
%9$/

(12
5(7B9$/
%/.

ಯ7DJ2XWಯ
ಯ7DJB5HW9DOಯ

30:25'

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
copia el área de origen de MW14 a MW20 y rellena el área de destino de MW100 a MW118 con
el contenido de las 4 palabras contenidas en el área de memoria del parámetro BVAL.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
GET_ERR_ID: Consultar ID de error localmente (Página 933)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de KOP (Página 7943)

Conversión
CONVERT: Convertir valor
Descripción
La instrucción "Convertir valor" lee el contenido del parámetro IN y lo convierte según los tipos
de datos seleccionados en el cuadro de la instrucción. El valor convertido se deposita en la
salida OUT.
Encontrará información relacionada con las conversiones posibles en el apartado "Conversión
explícita" de "Consulte también".
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Durante la ejecución ocurren errores, p. ej. se produce un rebase por exceso.

Programación del PLC
Manual de programación y manejo, 11/2019

893

Instrucciones
4.1 Instrucciones

Opciones de conversión de secuencias de bits
En el cuadro de la instrucción no se pueden seleccionar las secuencias de bits BYTE y WORD.
Sin embargo es posible indicar un operando del tipo de datos DWORD o LWORD en un
parámetro de la instrucción si coinciden la longitud del operando de entrada y la del operando
de salida. En tal caso, el operando del tipo de datos de una secuencia de bits se interpreta
conforme al tipo de datos del parámetro de entrada o salida y se convierte implícitamente. El
tipo de datos DWORD se interpreta, p. ej., como DINT/UDINT, y LWORD como LINT/ULINT.
Estas opciones de conversión también están disponibles estando activada la verificación CEI.
Nota
Para las CPU de las series S7-1500 se aplica: Los tipos de datos DWORD y LWORD sólo se
pueden convertir a o desde el tipo de datos REAL o LREAL.
El patrón de bits del valor de origen se transfiere sin cambios y justificado a la derecha al tipo
de datos de destino. Si no se producen errores durante la conversión, el estado de señal de la
salida de habilitación ENO = 1; si se produce un error durante la ejecución, el estado de señal
de la salida de habilitación ENO = 0.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Convertir valor":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

I, Q, M, D, L, P o
Secuencias de
constante
bits, enteros, nú‐
meros en coma flo‐
tante, CHAR,
WCHAR, BCD16,
BCD32

Valor que se convierte.

OUT

Output

I, Q, M, D, L, P
Secuencias de
bits, enteros, nú‐
meros en coma flo‐
tante, CHAR,
WCHAR, BCD16,
BCD32

Resultado de la conversión

En las listas desplegables "???" del cuadro de la instrucción se pueden seleccionar los tipos
de datos de la instrucción.

894

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplos
El ejemplo siguiente muestra la conversión de un entero (16 bits) a otro entero (32 bits):
&219
ಯ7DJ,Qಯ

ಯ,QSXWB,17ಯ

,17

WR

',17

(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ2XWSXWB',17ಯ

El ejemplo siguiente muestra la conversión de un byte (8 bits) al entero SINT (8 bits):
&219
ಯ7DJ,Qಯ

ಯ,QSXWB%<7(ಯ

6,17 WR

6,17

(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ2XWSXWB6,17ಯ

El ejemplo siguiente muestra la conversión de un byte (8 bits) a un entero sin signo USINT (8
bits):
&219
ಯ7DJ,Qಯ

ಯ,QSXWB%<7(ಯ

86,17 WR 86,17
(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ2XWSXWB86,17ಯ

Las conversiones son posibles porque los operandos tienen la misma longitud.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Conversión de los tipos de datos en el S7-1200 (Página 506)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

895

Instrucciones
4.1 Instrucciones

ROUND: Redondear número
Descripción
La instrucción "Redondear número" permite redondear el valor de la entrada IN al siguiente
número entero. La instrucción interpreta el valor de la entrada IN como número en coma
flotante y lo convierte a un número entero del tipo de datos DINT. Si el valor de entrada se
encuentra entre un número par y uno impar, se selecciona el número par. El resultado de la
instrucción se devuelve en la salida OUT y se puede consultar allí.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Durante la ejecución ocurren errores, p. ej. se produce un rebase por exceso.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Redondear número":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de entrada que se re‐
dondea.

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Resultado del redondeo

En la lista desplegable "???" del cuadro de la instrucción se pueden seleccionar los tipos de
datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
5281'
ಯ7DJ,Qಯ

ಯ7DJ,QB9DOXHಯ

5($/

WR

',17

(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:

896

Parámetro

Operando

IN

TagIn_Value

1.50000000

Valor
-1.50000000

OUT

TagOut_Value

2

-2

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El número en
coma flotante de la entrada "TagIn_Value" se redondea al número entero par más próximo y
se deposita en la salida "TagOut_Value". Si no ocurren errores al ejecutar la instrucción, se
activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

CEIL: Redondear un número en coma flotante al siguiente entero superior
Descripción
La instrucción "Redondear un número en coma flotante al siguiente entero superior" permite
redondear el valor de la entrada IN al siguiente número entero superior. La instrucción
interpreta el valor de la entrada IN como número en coma flotante y lo convierte en el siguiente
número entero superior. El resultado de la instrucción se devuelve en la salida OUT y se puede
consultar allí. El valor de salida puede ser mayor o igual al valor de entrada.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Durante la ejecución ocurren errores, p. ej. se produce un rebase por exceso.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Redondear un número en coma
flotante al siguiente entero superior":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Resultado con el siguiente
entero superior

En la lista desplegable "???" del cuadro de la instrucción se pueden seleccionar los tipos de
datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

897

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
&(,/
ಯ7DJ,Qಯ

ಯ7DJ,QB9DOXHಯ

5($/

WR

',17

(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

0.50000000

-0.50000000

OUT

TagOut_Value

1

0

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El número en
coma flotante de la entrada "TagIn_Value" se redondea al siguiente número entero superior y
se devuelve en la salida "TagOut_Value". Si no ocurren errores al ejecutar la instrucción, se
activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

FLOOR: Redondear un número en coma flotante al siguiente entero inferior
Descripción
La instrucción "Redondear un número en coma flotante al siguiente entero inferior" permite
redondear el valor de la entrada IN al siguiente número entero inferior. La instrucción interpreta
el valor de la entrada IN como número en coma flotante y lo convierte en el siguiente número
entero inferior. El resultado de la instrucción se deposita en la salida OUT y se puede consultar
allí. El valor de salida puede ser menor o igual al valor de entrada.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● Durante la ejecución ocurren errores, p. ej. se produce un rebase por exceso.

898

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Redondear un número en coma
flotante al siguiente entero inferior":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Resultado con el siguiente
entero inferior

En la lista desplegable "???" del cuadro de la instrucción se pueden seleccionar los tipos de
datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
)/225
ಯ7DJ,Qಯ

ಯ7DJ,QB9DOXHಯ

5($/

WR

',17

(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

0.50000000

-0.50000000

OUT

TagOut_Value

0

-1

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El número en
coma flotante de la entrada "TagIn_Value" se redondea al número entero inferior más próximo
y se deposita en la salida "TagOut_Value". Si no ocurren errores al ejecutar la instrucción, se
activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Programación del PLC
Manual de programación y manejo, 11/2019

899

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

TRUNC: Truncar a entero
Descripción
La instrucción "Truncar a entero" permite generar un valor entero a partir del valor de la entrada
IN. El valor de la entrada IN se interpreta como número en coma flotante. La instrucción
selecciona solo la parte entera del número en coma flotante y la deposita sin decimales en la
salida OUT.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada EN devuelve el estado lógico "0".
● Durante la ejecución ocurren errores, p. ej. se produce un rebase por exceso.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Truncar a entero":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Números en coma
flotante

I, Q, M, D, L o
constante

Valor de entrada

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L

Parte entera del valor de en‐
trada

En la lista desplegable "???" del cuadro de la instrucción se pueden seleccionar los tipos de
datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

900

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
7581&
ಯ7DJ,Qಯ

ಯ7DJ,QB9DOXHಯ

5($/

WR

',17

(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

1.50000000

-1.50000000

OUT

TagOut_Value

1

-1

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La parte entera
del número en coma flotante de la entrada "TagIn_Value" se convierte en un número entero y
se deposita en la salida "TagOut_Value". Si no ocurren errores al ejecutar la instrucción, se
activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

SCALE_X: Escalar
Descripción
La instrucción "Escalar" escala el valor de la entrada VALUE mapeándolo en un determinado
rango de valores. Al ejecutar la instrucción "Escalar", el número en coma flotante de la entrada
VALUE se escala al rango de valores definido por los parámetros MIN y MAX. El resultado de
la escala es un número entero que se deposita en la salida OUT.
La figura siguiente muestra un ejemplo de cómo pueden escalarse los valores:

Programación del PLC
Manual de programación y manejo, 11/2019

901

Instrucciones
4.1 Instrucciones

0$;
287
0,1



9$/8(

La instrucción "Escalar" utiliza la siguiente ecuación:
OUT = [VALUE ∗ (MAX – MIN)] + MIN
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada MIN es mayor o igual al valor de la entrada MAX.
● El valor de un número en coma flotante indicado está fuera del rango de los números
normalizados según IEEE-754.
● Ocurre un rebase por exceso.
● El valor de la entrada VALUE es NaN (Not a number = resultado de una operación
aritmética no válida).
Nota
Encontrará más información sobre la conversión de valores analógicos en el manual de
producto correspondiente.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Escalar":

902

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

MIN

Input

Enteros, números
en coma flotante

I, Q, M, D, L o
constante

Límite inferior del rango de
valores

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

VALUE

Input

Números en coma
flotante

I, Q, M, D, L o
constante

Valor que se escala.
Si se indica una constante,
esta debe declararse.

MAX

Input

Enteros, números
en coma flotante

I, Q, M, D, L o
constante

Límite superior del rango de
valores

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L

Resultado de la escala

En las listas desplegables "???" del cuadro de la instrucción se pueden seleccionar los tipos
de datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".
Encontrará más información sobre la declaración de constantes en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6&$/(B;
ಯ7DJ,Qಯ

ಯ7DJB0,1ಯ

5($/

WR

',17

(1

(12

0,1

287

ಯ7DJB9DOXHಯ

9$/8(

ಯ7DJB0$;ಯ

0$;

ಯ7DJ2XWಯ
6
ಯ7DJB5HVXOWಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

MIN

Tag_MIN

10

VALUE

Tag_Value

0.5

MAX

Tag_MAX

30

OUT

Tag_Result

20

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El valor de la
entrada "Tag_Value" se escala al rango de valores definido por los valores de las entradas
"Tag_MIN" y "Tag_MAX". El resultado se deposita en la salida "Tag_Result". Si no se producen
errores al ejecutar la instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y
se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

903

Instrucciones
4.1 Instrucciones

NORM_X: Normalizar
Descripción
La instrucción "Normalizar" normaliza el valor de la variable de la entrada VALUE
representándolo en una escala lineal. Los parámetros MIN y MAX sirven para definir los límites
de un rango de valores que se refleja en la escala. En función de la posición del valor que se
debe normalizar en este rango de valores, se calcula el resultado y se deposita como número
en coma flotante en la salida OUT. Si el valor que se debe normalizar es igual al valor de la
entrada MIN, la salida OUT devuelve el valor "0.0". Si el valor que se debe normalizar es igual
al valor de la entrada MAX, la salida OUT devuelve el valor "1.0".
La figura siguiente muestra un ejemplo de cómo pueden normalizarse los valores:


287

0,1

0$;
9$/8(

La instrucción "Normalizar" utiliza la siguiente ecuación:
OUT = (VALUE – MIN) / (MAX – MIN)
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor de la entrada MIN es mayor o igual al valor de la entrada MAX.
● El valor de un número en coma flotante indicado está fuera del rango de los números
normalizados según IEEE-754.
● El valor de la entrada VALUE es NaN (resultado de una operación aritmética no válida).
Nota
Encontrará más información sobre la conversión de valores analógicos en el manual de
producto correspondiente.

904

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Normalizar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

MIN

Input

Enteros, números
en coma flotante

I, Q, M, D, L o
constante

Límite inferior del rango de
valores

VALUE 1)

Input

Enteros, números
en coma flotante

I, Q, M, D, L o
constante

Valor que se normaliza.

MAX 1)

Input

Enteros, números
en coma flotante

I, Q, M, D, L o
constante

Límite superior del rango de
valores

OUT

Output

Números en coma
flotante

I, Q, M, D, L

Resultado de la normaliza‐
ción

1)

1)

Si se utilizan constantes en estos tres parámetros, basta con declarar una de ellas.

En las listas desplegables "???" del cuadro de la instrucción se pueden seleccionar los tipos
de datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".
Encontrará más información sobre la declaración de constantes en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
1250B;
ಯ7DJ,Qಯ

ಯ7DJB0,1ಯ

',17

WR

5($/

(1

(12

0,1

287

ಯ7DJB9DOXHಯ

9$/8(

ಯ7DJB0$;ಯ

0$;

ಯ7DJ2XWಯ
6
ಯ7DJB5HVXOWಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

MIN

Tag_MIN

10

VALUE

Tag_Value

20

MAX

Tag_MAX

30

OUT

Tag_Result

0.5

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El valor de la
entrada "Tag_Value" se asigna al rango de valores definido por los valores de las entradas
"Tag_MIN" y "Tag_MAX". El valor de la variable de la entrada "Tag_Value" se normaliza
conforme al rango de valores definido. El resultado se deposita como número en coma flotante
en la salida "Tag_Result". Si no se producen errores al ejecutar la instrucción, la salida de
habilitación ENO devuelve el estado lógico "1" y se activa la salida "TagOut".

Programación del PLC
Manual de programación y manejo, 11/2019

905

Instrucciones
4.1 Instrucciones
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

Legacy
SCALE: Escalar
Descripción
La instrucción "Escalar" convierte el entero del parámetro IN en un número en coma flotante
que se escala en unidades físicas entre un límite inferior y uno superior. Los límites inferior y
superior del rango de valores en el que se escala el valor de entrada se definen mediante los
parámetros LO_LIM y HI_LIM. El resultado de la instrucción se devuelve en el parámetro OUT.
La instrucción "Escalar" utiliza la siguiente ecuación:
OUT = [((FLOAT (IN) – K1)/(K2–K1)) ∗ (HI_LIM–LO_LIM)] + LO_LIM
El estado lógico del parámetro BIPOLAR determina los valores de las constantes "K1" y "K2".
El parámetro BIPOLAR puede tener los siguientes estados lógicos:
● Estado lógico "1": se presupone que el valor del parámetro IN es bipolar y está comprendido
en un rango de valores entre -27648 y 27648. En este caso, la constante "K1" tiene el valor
"-27648,0" y la constante "K2", el valor "+27648,0".
● Estado lógico "0": se presupone que el valor del parámetro IN es unipolar y está
comprendido en un rango de valores entre 0 y 27648. En este caso, la constante "K1" tiene
el valor "0,0" y la constante "K2", el valor "+27648,0".
Si el valor del parámetro IN es mayor que el de la constante "K2", el resultado de la instrucción
se pone al valor del límite superior (HI_LIM) y se emite un error.
Si el valor del parámetro IN es menor que el de la constante "K1", el resultado de la instrucción
se pone al valor del límite inferior (LO_LIM) y se emite un error.
Si el límite inferior indicado es mayor que el límite superior (LO_LIM > HI_LIM), el resultado se
escala de forma inversamente proporcional al valor de entrada.

906

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Escalar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habili‐
tación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilita‐
ción

IN

Input

INT

I, Q, M, D, L, P o
constante

Valor de entrada
que se escala.

HI_LIM

Input

REAL

I, Q, M, D, L, P o
constante

Valor límite supe‐
rior

LO_LIM

Input

REAL

I, Q, M, D, L, P o
constante

Valor límite inferior

BIPOLAR

Input

BOOL

I, Q, M, D, L o
constante

Indica si el valor
del parámetro IN
se interpreta como
bipolar o unipolar.
El parámetro pue‐
de adoptar los va‐
lores siguientes:
1: Bipolar
0: Unipolar

OUT

Output

REAL

I, Q, M, D, L, P

Resultado de la
instrucción

RET_VAL

Output

WORD

I, Q, M, D, L, P

Información de
error

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

0008

El valor del parámetro IN es mayor que el de la constante "K2" o menor que el de la
constante "K1"

Información
de error ge‐
neral

Consulte también: "GET_ERR_ID: Consultar ID de error localmente"

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Programación del PLC
Manual de programación y manejo, 11/2019

907

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6&$/(
ಯ7DJ,Qಯ
ಯ7DJB,QSXW9DOXHಯ

(1
,1

ಯ7DJB+LJK/LPLWಯ

+,B/,0

ಯ7DJB/RZ/LPLWಯ

/2B/,0

ಯ7DJB%LSRODUಯ

ಯ7DJ2XWಯ

(12
5(7B9$/
287

ಯ7DJB2XWSXW9DOXHಯ
ಯ7DJB(UURU&RGHಯ

%,32/$5

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

Tag_InputValue

22

HI_LIM

Tag_HighLimit

100.0

LO_LIM

Tag_LowLimit

0.0

BIPOLAR

Tag_Bipolar

1

OUT

Tag_OutputValue

50.03978588

RET_VAL

Tag_ErrorCode

W#16#0000

Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
GET_ERR_ID: Consultar ID de error localmente (Página 933)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de KOP (Página 7943)

UNSCALE: Desescalar
Descripción
La instrucción "Desescalar" permite desescalar el número en coma flotante del parámetro IN
en unidades físicas comprendidas entre un límite inferior y uno superior y convertirlo en un
número entero. Los límites inferior y superior del rango de valores en el que se desescala el
valor de entrada se definen mediante los parámetros LO_LIM y HI_LIM. El resultado de la
instrucción se devuelve en el parámetro OUT.
La instrucción "Desescalar" utiliza la siguiente ecuación:

908

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
OUT = [ ((IN–LO_LIM)/(HI_LIM–LO_LIM)) ∗ (K2–K1) ] + K1
El estado lógico del parámetro BIPOLAR determina los valores de las constantes "K1" y "K2".
El parámetro BIPOLAR puede tener los siguientes estados lógicos:
● Estado lógico "1": se presupone que el valor del parámetro IN es bipolar y está comprendido
en un rango de valores entre -27648 y 27648. En este caso, la constante "K1" tiene el valor
"-27648,0" y la constante "K2", el valor "+27648,0".
● Estado lógico "0": se presupone que el valor del parámetro IN es unipolar y está
comprendido en un rango de valores entre 0 y 27648. En este caso, la constante "K1" tiene
el valor "0,0" y la constante "K2", el valor "+27648,0".
Si el valor del parámetro IN no se encuentra dentro de los límites definidos por HI_LIM y
LO_LIM, se emite un error.
Si el límite inferior indicado es mayor que el límite superior (LO_LIM > HI_LIM), el resultado se
escala de forma inversamente proporcional al valor de entrada.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desescalar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habili‐
tación

ENO

Input

BOOL

I, Q, M, D, L

Salida de habilita‐
ción

IN

Input

REAL

I, Q, M, D, L, P o
constante

Valor de entrada
que se desescala
en un valor entero.

HI_LIM

Input

REAL

I, Q, M, D, L, P o
constante

Valor límite supe‐
rior

LO_LIM

Input

REAL

I, Q, M, D, L, P o
constante

Valor límite inferior

BIPOLAR

Input

BOOL

I, Q, M, D, L o
constante

Indica si el valor
del parámetro IN
se interpreta como
bipolar o unipolar.
El parámetro pue‐
de adoptar los va‐
lores siguientes:
1: Bipolar
0: Unipolar

OUT

Output

INT

I, Q, M, D, L, P

Resultado de la
instrucción

RET_VAL

Output

WORD

I, Q, M, D, L, P

Información de
error

Programación del PLC
Manual de programación y manejo, 11/2019

909

Instrucciones
4.1 Instrucciones

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

0008

El valor del parámetro IN es mayor que el del límite superior (HI_LIM) o menor que el del
límite inferior (LO_LIM).

Información
de error ge‐
neral

Consulte también: "GET_ERR_ID: Consultar ID de error localmente"

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización aquí: Cambiar
formatos de visualización en el estado del programa (Página 8529)

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
816&$/(
ಯ7DJ,Qಯ
ಯ7DJB,QSXW9DOXHಯ

(1
,1

ಯ7DJB+LJK/LPLWಯ

+,B/,0

ಯ7DJB/RZ/LPLWಯ

/2B/,0

ಯ7DJB%LSRODUಯ

ಯ7DJ2XWಯ

(12
5(7B9$/
287

ಯ7DJB(UURU&RGHಯ
ಯ7DJB2XWSXW9DOXHಯ

%,32/$5

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_InputValue

50.03978588

HI_LIM

Tag_HighLimit

100.0

LO_LIM

Tag_LowLimit

0.0

BIPOLAR

Tag_Bipolar

1

OUT

Tag_OutputValue

22

RET_VAL

Tag_ErrorCode

W#16#0000

Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)

910

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
GET_ERR_ID: Consultar ID de error localmente (Página 933)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de KOP (Página 7943)

Control del programa
---( JMP ): Saltar si RLO = 1
Descripción
La instrucción "Saltar si RLO = 1" permite interrumpir la ejecución lineal del programa y
continuarla en un segmento diferente. El segmento de destino tiene que marcarse con una
etiqueta (LABEL). El nombre de la etiqueta se indica en el comodín situado encima de la
instrucción.
La etiqueta indicada debe encontrarse en el mismo bloque en el que se ejecuta la instrucción.
Su nombre debe ser unívoco en el bloque. En cada segmento no debe existir más de una
bobina de salto.
Si el resultado lógico (RLO) de la entrada de la instrucción es "1", se ejecuta el salto al
segmento identificado por la etiqueta indicada. El salto puede realizarse hacia números de
segmento superiores o inferiores.
Si no se cumple la condición en la entrada de la instrucción (RLO = 0), la ejecución del
programa continúa en el segmento siguiente.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
ಯ7DJ,QBಯ

&$6
-03

ಯ7DJ,QBಯ

ಯ7DJ2XWBಯ
5

6HJPHQWR

6HJPHQWR
&$6
ಯ7DJ,QBಯ

ಯ7DJ2XWBಯ
5

Si el operando "TagIn_1" devuelve el estado lógico "1", se ejecuta la instrucción "Saltar si RLO
= 1". Por este motivo, se interrumpe la ejecución lineal del programa y se prosigue en el
segmento 3, marcado por la etiqueta CAS1. Si la entrada "TagIn_3" devuelve el estado lógico
"1", se desactiva la salida "TagOut_3".

Programación del PLC
Manual de programación y manejo, 11/2019

911

Instrucciones
4.1 Instrucciones
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

---( JMPN ): Saltar si RLO = 0
Descripción
La instrucción "Saltar si RLO = 0" permite interrumpir la ejecución lineal del programa y
continuarla en un segmento diferente si el resultado lógico de la entrada de la instrucción es
"0". El segmento de destino tiene que marcarse con una etiqueta (LABEL). El nombre de la
etiqueta se indica en el comodín situado encima de la instrucción.
La etiqueta indicada debe encontrarse en el mismo bloque en el que se ejecuta la instrucción.
Su nombre debe ser unívoco en el bloque. En cada segmento no debe existir más de una
bobina de salto.
Si el resultado lógico (RLO) de la entrada de la instrucción es "0", se ejecuta el salto al
segmento identificado por la etiqueta indicada. El salto puede realizarse hacia números de
segmento superiores o inferiores.
Si el resultado lógico de la entrada de la instrucción es "1", la ejecución del programa continúa
en el segmento siguiente.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
ಯ7DJ,QBಯ

&$6
-031

ಯ7DJ,QBಯ

ಯ7DJ2XWBಯ
5

6HJPHQWR

6HJPHQWR
&$6
ಯ7DJ,QBಯ

ಯ7DJ2XWBಯ
5

Si el operando "TagIn_1" devuelve el estado lógico "0", se ejecuta la instrucción "Saltar si RLO
= 0". Por este motivo, se interrumpe la ejecución lineal del programa y se prosigue en el

912

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
segmento 3, marcado por la etiqueta CAS1. Si la entrada "TagIn_3" devuelve el estado lógico
"1", se desactiva la salida "TagOut_3".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

LABEL: Etiqueta
Descripción
Una etiqueta sirve para marcar el segmento de destino en el que debe continuar la ejecución
del programa tras un salto.
La etiqueta y la instrucción en la que se indica la etiqueta como destino del salto deben
encontrarse en el mismo bloque. El nombre de una etiqueta debe ser unívoca en el bloque.
Puede declarar un máximo de 32 etiquetas en caso de utilizar una CPU S7-1200 y un máximo
de 256 etiquetas en caso de utilizar una CPU S7-1500.
En un segmento solo se puede colocar una etiqueta. A toda etiqueta se puede acceder desde
distintas posiciones.
Para la etiqueta deben observarse las siguientes reglas gramaticales:
● Letras (a-z, A-Z)
● Una combinación de letras y números. Debe observarse el orden correcto, es decir, primero
las letras y luego los números (a - z, A - Z, 0 - 9).
● No pueden utilizarse caracteres especiales o una combinación de letras y números en
orden inverso, es decir, primero los números y luego las letras (0 - 9, a - z, A - Z).

Programación del PLC
Manual de programación y manejo, 11/2019

913

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
ಯ7DJ,QBಯ

&$6
-03

ಯ7DJ,QBಯ

ಯ7DJ2XWBಯ
5

6HJPHQWR

6HJPHQWR
&$6
ಯ7DJ,QBಯ

ಯ7DJ2XWBಯ
5

Si el operando "TagIn_1" devuelve el estado lógico "1", se ejecuta la instrucción "Saltar si RLO
= 1". Por este motivo, se interrumpe la ejecución lineal del programa y se prosigue en el
segmento 3, marcado por la etiqueta CAS1. Si la entrada "TagIn_3" devuelve el estado lógico
"1", se desactiva la salida "TagOut_3".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

JMP_LIST: Definir lista de saltos
Descripción
La instrucción "Definir lista de saltos" permite definir varios saltos condicionados y continuar la
ejecución del programa en un segmento determinado en función del valor del parámetro K.
Los saltos se definen mediante etiquetas (LABEL) que se indican en las salidas del cuadro de
la instrucción. El número de salidas del cuadro de la instrucción se puede ampliar. Puede
declarar un máximo de 32 salidas en caso de utilizar una CPU S7-1200 y un máximo de 256
salidas en caso de utilizar una CPU S7-1500.
La numeración de las salidas comienza por el valor "0" y continúa en orden ascendente con
cada nueva salida. En las salidas de la instrucción únicamente se pueden indicar etiquetas. No
está permitido indicar instrucciones u operandos.
Con el valor del parámetro K se indica el número de la salida y a la vez la etiqueta en la que
debe continuarse la ejecución del programa. Si el valor del parámetro K es mayor que el
número de salidas disponibles, la ejecución del programa continúa en el siguiente segmento
del bloque.

914

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La instrucción "Definir lista de saltos" se ejecuta solo si el estado lógico de la entrada de
habilitación EN es "1".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Definir lista de saltos":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

K

Input

UINT

I, Q, M, D, L o
constante

Indica el número de la salida
y a la vez el salto que se eje‐
cuta.

DEST0

-

-

-

Primera etiqueta

DEST1

-

-

-

Segunda etiqueta

DESTn

-

-

-

Etiquetas opcionales

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJB,QSXWಯ
ಯ7DJB9DOXHಯ

-03B/,67
(1
.

'(67

/$%(/

'(67

/$%(/

'(67

/$%(/

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando/etiqueta

Valor

K

Tag_Value

1

Dest0

LABEL0

Salto al segmento que está mar‐
cado con la etiqueta "LABEL0".

Dest1

LABEL1

Salto al segmento que está mar‐
cado con la etiqueta "LABEL1".

Dest2

LABEL2

Salto al segmento que está mar‐
cado con la etiqueta "LABEL2".

Si el operando "Tag_Input" devuelve el estado lógico "1", se ejecuta la instrucción "Definir lista
de saltos". La ejecución del programa continúa conforme al valor del operando "Tag_Value" en
el segmento que está marcado con la etiqueta "LABEL1".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Programación del PLC
Manual de programación y manejo, 11/2019

915

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

SWITCH: Distribuidor de saltos
Descripción
La instrucción "Distribuidor de saltos" permite definir varios saltos de programa que se
ejecutarán en función del resultado de una o varias instrucciones de comparación.
El valor que se va a comparar se especifica en el parámetro K. Este valor se compara con los
valores que devuelven las distintas entradas. El tipo de comparación se selecciona
individualmente para cada entrada. La disponibilidad de las diferentes instrucciones de
comparación depende del tipo de datos de la instrucción.
La tabla siguiente muestra las instrucciones de comparación disponibles en función del tipo de
datos elegido:
Tipo de datos
S7-1200

Instrucción

Sintaxis

S7-1500

Secuencias de bits Secuencias de bits Igual
Enteros, números Enteros, números
en coma flotante, en coma flotante,
TIME, DATE, TOD TIME, LTIME, DA‐
TE, TOD, LTOD,
LDT

==

Diferente

<>

Igual

==

Diferente

<>

Mayor o igual

>=

Menor o igual

<=

Mayor

>

Menor

<

El tipo de datos de la instrucción se selecciona en la lista desplegable "???" del cuadro de la
instrucción. Si selecciona una instrucción de comparación sin que esté definido el tipo de datos
de la instrucción, en la lista desplegable "???" solo aparecerán los tipos de datos permitidos
para la instrucción de comparación seleccionada.
La ejecución de la instrucción comienza por la primera comparación y se sigue ejecutando
hasta que se cumpla una condición de comparación. Cuando se cumple una condición de
comparación, no se tienen en cuenta las siguientes condiciones de comparación. Si no se
cumple ninguna de las condiciones de comparación indicadas, el salto se ejecuta en la salida
ELSE. Si en la salida ELSE no hay definido ningún salto de programa, la ejecución del
programa continúa en el segmento siguiente.
El número de salidas del cuadro de la instrucción se puede ampliar. La numeración de las
salidas comienza por el valor "0" y continúa en orden ascendente con cada nueva salida.
Indique etiquetas (LABEL) en las salidas de la instrucción. No está permitido indicar
instrucciones u operandos en las salidas de la instrucción.
Por cada salida adicional se inserta automáticamente una entrada. El salto programado en una
salida se ejecuta cuando se cumple la condición de comparación de la entrada
correspondiente.

916

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Distribuidor de saltos":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de
memoria

Descripción

EN

Input

BOOL

BOOL

I, Q, M, D, L Entrada de habilitación
o constante

K

Input

UINT

UINT

I, Q, M, D, L Indica el valor que se
o constante compara.

<Valores de
compara‐
ción>

Input

Secuencias
de bits, ente‐
ros, números
en coma flo‐
tante, TIME,
DATE, TOD

Secuencias
de bits, ente‐
ros, números
en coma flo‐
tante, TIME,
LTIME, DA‐
TE, TOD,
LTOD, LDT

I, Q, M, D, L Valores de entrada con
o constante los que se compara el
valor del parámetro K.

DEST0

-

-

-

-

Primera etiqueta

DEST1

-

-

-

-

Segunda etiqueta

DEST(n)

-

-

-

-

Etiquetas opcionales:
● S7-1200: n = de 2 a
32
● S7-1500: n = de 2 a
256

ELSE

-

-

-

-

Salto de programa que
se ejecuta cuando no se
cumple ninguna de las
condiciones de compa‐
ración.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6:,7&+
8,17

ಯ7DJB,QSXWಯ

(1
ಯ7DJB9DOXHಯ

.

ಯ7DJB9DOXHBಯ

Programación del PLC
Manual de programación y manejo, 11/2019

'(67

/$%(/

ಯ7DJB9DOXHBಯ

!

'(67

/$%(/

ಯ7DJB9DOXHBಯ



'(67

/$%(/

(/6(

/$%(/

917

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando/etiqueta

Valor

K

Tag_Value

23

==

Tag_Value_1

20

>

Tag_Value_2

21

<

Tag_Value_3

19

DEST0

LABEL0

Salto a la etiqueta "LABEL0" si el
valor del parámetro K es igual a
20.

DEST1

LABEL1

Salto a la etiqueta "LABEL1" si el
valor del parámetro K es mayor
que 21.

DEST2

LABEL2

Salto a la etiqueta "LABEL2" si el
valor del parámetro K es menor
que 19.

ELSE

LABEL3

Salto a la etiqueta "LABEL3" si
no se cumple ninguna de las con‐
diciones de comparación.

Si el operando "Tag_Input" cambia al estado lógico "1", se ejecuta la instrucción "Distribuidor
de saltos". La ejecución del programa continúa en el segmento que está marcado con la
etiqueta "LABEL1".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

--(RET): Retroceder
Descripción
La instrucción "Retroceder" permite finalizar la ejecución de un bloque de programa de forma
condicionada o absoluta. El estado lógico del valor de retorno (operando) se calcula al salir del
bloque de programa en la salida de habilitación ENO del bloque de programa invocante.

918

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Hay tres formas posibles de terminar la ejecución de un bloque de programa:
Finalización del bloque de
programa

Significado

Sin llamada de la instruc‐
ción

Tras ejecutar el último segmento, se abandona el bloque de programa. La
salida de habilitación ENO del bloque de programa invocante adopta el
estado lógico "1".

Si se cumple la operación lógica precedente, la ejecución del programa
Llamada de la instrucción
con operación lógica prece‐ finaliza en el bloque de programa llamado actualmente y se abandona el
dente (ver ejemplo)
bloque (finalización condicionada del bloque de programa). La ejecución
del programa continúa en el bloque de programa invocante (p. ej., en un
OB) tras la llamada del bloque de programa. La salida de habilitación
ENO del bloque de programa invocante se corresponde con el operando.
El bloque de programa se abandona de forma incondicionada (finaliza‐
Llamada de la instrucción
sin operación lógica previa, ción absoluta del bloque de programa). La salida de habilitación ENO del
o la instrucción está conec‐ bloque de programa invocante se corresponde con el operando.
tada directamente a la ba‐
rra colectora izquierda

Cuando se finaliza un bloque de organización (OB), el sistema de niveles de ejecución
selecciona otro bloque de programa para luego iniciarlo o seguir ejecutándolo:
● Si se finaliza el OB de ciclo de programa, este se reinicia.
● Si se finaliza un OB que ha interrumpido otro bloque de programa (p. ej., un OB de alarma),
se sigue ejecutando el bloque de programa interrumpido (p. ej., OB de ciclo de programa).
Nota
Instrucción RET en relación con JMP y JMPN
Si en un segmento ya se utiliza la instrucción de salto "JMP: Saltar si RLO = 1" o "JMPN: Saltar
si RLO = 0", no se utilizará la instrucción "RET: Retroceder". En un segmento no se puede
utilizar más de una bobina de salto.

Posibles ajustes del valor de retorno (operando)
El valor de retorno de la instrucción puede adoptar los valores siguientes:
● Ret (RLO, corresponde al resultado de la operación lógica RLO. Se devuelve el estado
lógico "1" en la salida de habilitación ENO del bloque de programa invocante, pues la
instrucción RET solo se ejecuta como instrucción condicionada cuando la condición es
TRUE).
● Ret True o Ret False (el correspondiente valor de la constante TRUE o FALSE se devuelve
en el bloque de programa invocante).
● Ret Value (el valor de la variable booleana <operando> se devuelve en el bloque de
programa invocante).
Para ajustar el valor de retorno de la instrucción, haga clic en el pequeño triángulo amarillo de
la instrucción y elija el valor deseado en la lista desplegable.

Programación del PLC
Manual de programación y manejo, 11/2019

919

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra el estado del bloque de programa invocante cuando la instrucción
está programada en un segmento del bloque de programa llamado:
RLO

Valor de retorno

ENO del bloque de programa invocante

1

RLO

1

TRUE

1

FALSE

0

<Operando>

<Operando>

Variable booleana con las áreas
de memoria posibles I, Q, M, D, L,
TyC
0

RLO
TRUE
FALSE

La ejecución del programa continúa en el
siguiente segmento del bloque de programa
llamado.

<Operando>

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,Qಯ

)$/6(
5(7

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La ejecución del
programa se finaliza en el bloque de programa llamado y continúa en el bloque de programa
que efectúa la llamada. La salida de habilitación ENO del bloque de programa invocante se
pone al estado lógico "0".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplo del mecanismo EN/ENO en KOP (Página 157)
Principios básicos de KOP (Página 7943)

Control del tiempo de ejecución
ENDIS_PW: Limitar y habilitar legitimación de la contraseña
Descripción
La instrucción "Limitar y habilitar legitimación de la contraseña" permite definir si las
contraseñas configuradas para la CPU están legitimadas o no. Con ello, se pueden impedir
conexiones legitimadas, aun conociendo la contraseña correcta.

920

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Si la instrucción se ejecuta y el parámetro REQ tiene el estado lógico "0", en los parámetros de
salida se muestra el estado ajustado en ese momento. Si se han realizado cambios en los
parámetros de entrada, estos no se transfieren a los parámetros de salida.
Si se ejecuta la instrucción y el parámetro REQ tiene el estado lógico "1", se aplica el estado
lógico de los parámetros de entrada (F_PWD, FULL_PWD, R_PWD, HMI_PWD):
● Si se tiene el estado lógico "0", no está permitida la legitimación por contraseña.
● Si se tiene el estado lógico "1", se puede utilizar la contraseña.
Es posible permitir o prohibir individualmente el bloqueo o la habilitación de las contraseñas.
Por ejemplo, pueden prohibirse todas las contraseñas excepto la contraseña de seguridad
positiva. Esto permite limitar las posibilidades de acceso a un reducido grupo de usuarios. Los
parámetros de salida (F_PWD_ON, FULL_PWD_ON, R_PWD_ON, HMI_PWD_ON) siempre
muestran el estado actual del uso de contraseñas, independientemente del parámetro REQ.
Las contraseñas no configuradas deben tener en la entrada el estado lógico TRUE y devolver
el estado lógico TRUE en la salida. La contraseña de seguridad positiva (fail-safe) solo se
puede parametrizar para una CPU F y por eso en una CPU estándar debe interconectarse
siempre con el estado lógico TRUE. Si la instrucción devuelve un error, la llamada permanece
sin efecto, es decir, el bloqueo anterior sigue en vigor.
Las contraseñas bloqueadas pueden volver a habilitarse en las condiciones siguientes:
● Se ha restablecido la configuración de fábrica de la CPU.
● El panel frontal de la CPU S7-1500 soporta un cuadro de diálogo que permite navegar al
menú adecuado y volver a habilitar las contraseñas.
● Cuando se llama la instrucción "Limitar y habilitar legitimación de la contraseña", el
parámetro de entrada de la contraseña deseada tiene el estado lógico "1".
● Ponga el selector de modo a STOP. La restricción de la legitimación de contraseña se
activa de nuevo en cuanto se mueve el selector nuevamente a RUN.
● La inserción de una tarjeta de memoria vacía (tarjeta de transferencia o tarjeta de
programa) en una CPU S7-1200.
● La transición de POWER OFF-POWER ON desactiva la protección en la CPU S7-1200. La
instrucción "Limitar y habilitar legitimación de la contraseña" debe volverse a llamar en el
programa (por ejemplo en el OB de arranque).
Nota
Si la contraseña HMI no está habilitada, la instrucción "Limitar y habilitar legitimación de la
contraseña" bloquea el acceso de los sistemas HMI.
Nota
Las conexiones ya existentes y legitimadas conservan sus derechos de acceso y no pueden
limitarse con la instrucción "Limitar y habilitar legitimación de la contraseña".

Impedir el bloqueo no intencionado en una CPU S7-1500
Los ajustes pueden realizarse en el panel frontal de la CPU S7-1500, que guarda el último
ajuste en cada caso.
Programación del PLC
Manual de programación y manejo, 11/2019

921

Instrucciones
4.1 Instrucciones
Para impedir un bloqueo no intencionado, en una CPU S7-1500 es posible desactivar la
protección moviendo el selector de modo a STOP. La protección se activa automáticamente
después de mover el selector de modo a RUN sin que tenga que volver a llamarse la
instrucción "Limitar y habilitar legitimación de la contraseña" o deban realizarse otras acciones
en el panel frontal.

Impedir el bloqueo no intencionado en una CPU S7-1200
Como la CPU S7-1200 no dispone de selector de modo, la protección se desactiva con
POWER OFF-POWER ON. De este modo es posible y recomendable impedir el bloqueo no
intencionado con ayuda de determinadas secuencias en el programa.
Para ello, programe un control de tiempo, ya sea mediante un OB de alarma cíclica o un
temporizador en el Main OB (OB 1). De este modo, tras una transición de POWER OFFPOWER ON y la consiguiente desactivación de la protección, se puede volver a llamar
rápidamente la instrucción "Limitar y habilitar legitimación de la contraseña" en el OB
correspondiente (por ejemplo OB 1 u OB 35). Para que la ventana temporal en la que la
instrucción no está activa y en la que por tanto no existen limitaciones en la legitimación de la
contraseña sea lo más pequeña posible, llame la instrucción en el OB de arranque (OB 100).
Este procedimiento ofrece la mayor protección posible contra accesos no autorizados.
Si se ha producido un bloqueo no intencionado puede omitirse la llamada en el OB de arranque
(por ejemplo mediante la consulta de un parámetro de entrada) y se dispondrá del tiempo
configurado (por ejemplo de 10 segundos a 1 minuto) para establecer una conexión con la
CPU antes de que el bloqueo vuelva a activarse.
Si no se ha previsto ningún temporizador en el código del programa y se produce un bloqueo,
inserte en la CPU una tarjeta de transferencia o una tarjeta de programa vacía. La tarjeta de
transferencia o la tarjeta de programa vacía borra la memoria de carga interna de la CPU.
Después deberá cargarse nuevamente el programa de usuario de STEP 7 en la CPU.

Procedimiento en caso de pérdida de contraseña en una CPU S7-1200
Si ha perdido la contraseña de una CPU S7-1200 protegida por contraseña, borre el programa
protegido por contraseña con una tarjeta de transferencia o una tarjeta de programa vacía. La
tarjeta de transferencia o la tarjeta de programa vacía borra la memoria de carga interna de la
CPU. A continuación, puede transferir un nuevo programa de usuario de STEP 7 Basic a la
CPU.
ADVERTENCIA
Inserción de una tarjeta de transferencia vacía
Cuando se inserta una tarjeta de transferencia en una CPU en funcionamiento, la CPU pasa
a STOP. En estados operativos no seguros, los controladores pueden fallar y, con ello,
provocar un funcionamiento incontrolado de los dispositivos que se controlan. El resultado es
un funcionamiento impredecible del sistema de automatización que puede provocar lesiones
mortales o graves, así como daños materiales.
El contenido de la tarjeta de transferencia se encuentra en la memoria de carga interna
después de su extracción. Compruebe aquí que la tarjeta no contenga ningún programa.

922

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
ADVERTENCIA
Inserción de una tarjeta de programa vacía
Cuando se inserta una tarjeta de programa en una CPU en funcionamiento, la CPU pasa a
STOP. En estados operativos no seguros, los controladores pueden fallar y, con ello,
provocar un funcionamiento incontrolado de los dispositivos que se controlan. El resultado es
un funcionamiento impredecible del sistema de automatización que puede provocar lesiones
mortales o graves, así como daños materiales.
Asegúrese de que la tarjeta de programa esté vacía. La memoria de carga interna se copiará
en la tarjeta de programa vacía. Después de retirar la tarjeta de programa previamente vacía,
la memoria de carga interna quedará vacía.
Debe retirarse la tarjeta de transferencia o la tarjeta de programa antes de poner la CPU en
RUN.

Efectos del uso de contraseñas en los modos de operación
La siguiente tabla muestra qué efectos tiene el uso de contraseñas en los modos de operación
y en las respectivas acciones del usuario mediante la instrucción "Limitar y habilitar
legitimación de la contraseña".
Acción

Protección por contraseña mediante la instruc‐
ción

Estado básico después de

No activado

● Selector de modo en STOP

(sin limitaciones)

● Restablecimiento manual de la memoria (PG,
interruptor, cambio de MC (Motion Control))
● Restablecimiento de la configuración de fábrica
Estado básico tras conexión (POWER ON)

● CPU S7-1200:
El bloqueo está desactivado y la
instrucción tiene que volverse a ejecutar
en el programa (por ejemplo en el OB de
arranque).
● CPU S7-1500:
Activada (si antes de la desconexión
(POWER OFF) había un bloqueo activo)
La posibilidad de no permitir contraseñas
es remanente.

Activado
Transición del estado operativo RUN/ARRANQUE/
PARADA -> STOP (mediante finalización de la ins‐
Las contraseñas siguen sin poder utilizarse.
trucción, un error o comunicación) o STOP -> ARRAN‐
QUE/RUN/PARADA

Programación del PLC
Manual de programación y manejo, 11/2019

923

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Limitar y habilitar legitimación de
la contraseña":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

REQ

Input

BOOL

I, Q, M, D, L o
constante

Si el parámetro REQ tiene el
estado lógico "0", se consulta
el estado lógico ajustado ac‐
tualmente para las contrase‐
ñas.

F_PWD

Input

BOOL

I, Q, M, D, L o
constante

Acceso de lectura/escritura
incluido failsafe
● F_PWD = "0": No permitir
contraseña
● F_PWD = "1": Permitir
contraseña

FULL_PWD

Input

BOOL

I, Q, M, D, L o
constante

Acceso de lectura/escritura
● FULL_PWD = "0": No
permitir contraseña
● FULL_PWD = "1":
Permitir contraseña

R_PWD

Input

BOOL

I, Q, M, D, L o
constante

Acceso de lectura
● R_PWD = "0": No permitir
contraseña
● R_PWD = "1": Permitir
contraseña

HMI_PWD

Input

BOOL

I, Q, M, D, L o
constante

Acceso a la HMI
● HMI_PWD = "0": No
permitir contraseña
● HMI_PWD = "1": Permitir
contraseña

F_PWD_ON

Output

BOOL

I, Q, M, D, L o
constante

Estado del acceso de lectura/
escritura incluido failsafe
● F_PWD_ON = "0":
Contraseña no permitida
● F_PWD_ON = "1":
Contraseña permitida

FULL_PWD_
ON

Output

BOOL

I, Q, M, D, L o
constante

Estado del acceso de lectura/
escritura
● FULL_PWD_ON = "0":
Contraseña no permitida
● FULL_PWD_ON = "1":
Contraseña permitida

924

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

R_PWD_ON

Output

BOOL

I, Q, M, D, L o
constante

Estado del acceso de lectura
● R_PWD_ON = "0":
Contraseña no permitida
● R_PWD_ON = "1":
Contraseña permitida

HMI_PWD_O Output
N

BOOL

I, Q, M, D, L o
constante

Estado del acceso a la HMI
● HMI_PWD_ON = "0":
Contraseña no permitida
● HMI_PWD_ON = "1":
Contraseña permitida

RET_VAL

Output

WORD

I, Q, M, D, L

Información de error

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*

Explicación

(W#16#...)
0000

Ningún error

8090

No se soporta la instrucción "Limitar y habilitar legitimación de la contraseña".

80D0

La contraseña de seguridad (fail-safe) no está configurada. En las CPU estándar, el
estado lógico tiene que ser TRUE.

80D1

El acceso de lectura/escritura no está configurado

80D2

El acceso de lectura no está configurado

80D3

El acceso HMI no está configurado

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

925

Instrucciones
4.1 Instrucciones

Sistemas de PC
SHUT_DOWN: Apagar sistema de destino
Descripción
Con la instrucción "SHUT_DOWN: Apagar sistema de destino" se apaga el sistema de
automatización basado en PC y se rearranca el controlador por software S7 CPU 150xS o
Windows en el sistema de automatización basado en PC.
Encontrará la instrucción en la Task Card "Instrucciones", sección Instrucciones básicas >
Control del programa > Control del tiempo de ejecución.
Un reinicio puede ser útil en las situaciones siguientes, p. ej.:
● Un SAI industrial (sistema de alimentación ininterrumpida) notifica un fallo de tensión
mediante una entrada digital.
● Windows no responde o presenta una "pantalla azul".
● En el programa de usuario se llaman demasiados OB de error.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Apagar sistema de destino":
Parámetro

Declaración

Tipo de
datos

Área de memoria

Descripción

MODE

Input

UINT

I, Q, M, D, L o constan‐ MODE = 1: apagar CPU 150xS y Windows
te
La CPU pasa a STOP y guarda los datos remanentes. Se‐
guidamente se apagan la CPU y Windows. El sistema debe
rearrancarse manualmente.
MODE = 2: rearrancar CPU 150xS
La CPU pasa a STOP y guarda los datos remanentes. A
continuación la CPU se apaga y se reinicia.
MODE = 3: Reiniciar Windows. La CPU permanece en RUN.
Windows se reinicia (desde TIA Portal V14, el MODE 3 solo
está autorizado en caso de compatibilidad descendente. Se
recomienda usar MODE 4 o MODE 5).
MODE = 4: Windows se apaga correctamente y se reinicia.
La CPU permanece en RUN.
MODE = 5: Reiniciar Windows. (comparable al MODE 3;
excepción: MODE 5 solo debe usarse si se ha caído Win‐
dows).

COM‐
MENT

Input

STRING

I, Q, M, D, L

Con Mode = 1, 3 y 4 es posible indicar el motivo del reinicio.
El motivo se mostrará en el registro de eventos de Windows.

Ret_Val

Return

WORD

Q, M, D, L

Ret_Val = 0: ningún error
Ret_Val = 8090: el valor transferido a MODE no se soporta.
Ret_Val = 8091: Windows no responde a la llamada de la
instrucción Shut_Down (solo válido para Mode 3 y 4).
Ret_Val = 8092: Si aparece este error diríjase al SIMATIC
Customer Support (solo válido para Mode 3 y 4).

926

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

RE_TRIGR: Reiniciar tiempo de vigilancia del ciclo
Descripción
La instrucción "Reiniciar tiempo de vigilancia del ciclo" reinicia el tiempo de vigilancia del ciclo
de la CPU. El tiempo de vigilancia del ciclo se reinicia entonces con la duración ajustada en la
configuración de la CPU.
La instrucción se ejecuta correctamente durante un intervalo de tiempo (10 veces el ciclo
máximo del programa), independientemente del número de llamadas. Transcurrido ese
tiempo, el ciclo del programa ya no puede prolongarse.

Llamada de la instrucción
Se aplican las siguientes condiciones de llamada:
● En las CPU de la serie S7-1200:
En las versiones de firmware < 2.2 solo es posible llamar la instrucción en un bloque de
organización cíclico de la prioridad 1. Equivale a la prioridad más baja de todos los bloques
de organización. Si la instrucción se llama desde un bloque de organización de prioridad
superior, no se ejecuta y el resultado (bit BR, salida de habilitación ENO) es siempre "0".
En las versiones de firmware >= 2.2 puede llamarse la instrucción en todos los bloques de
organización, independientemente de la prioridad.
● En las CPU de la serie S7-1500:
La instrucción puede llamarse en todos los bloques de organización, independientemente
de la prioridad.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

927

Instrucciones
4.1 Instrucciones

STP: Finalizar programa
Descripción
La instrucción "Finalizar programa" conmuta la CPU al estado operativo STOP, con lo que se
finaliza la ejecución del programa. Los efectos al conmutar de RUN a STOP dependen de la
configuración de la CPU.
Si el resultado lógico (RLO) de la entrada de la instrucción es "1", la CPU pasa al estado
operativo STOP y se finaliza el procesamiento del programa. El estado lógico de la salida de
la instrucción no se evalúa.
Si el RLO a la entrada de la instrucción es "0", la instrucción no se ejecuta.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de KOP (Página 7943)

GET_ERROR: Consultar error localmente
Descripción
La instrucción "Consultar error localmente" consulta si se han producido errores en un bloque
de programa. Suele tratarse de un error de programación o de acceso. Si el sistema notifica
errores durante la ejecución del bloque de programa, en el operando de la salida ERROR se
guarda información detallada acerca del primer error de ejecución ocurrido desde la última vez
que se ejecutó la instrucción.
En la salida ERROR solo pueden especificarse operandos del tipo de datos de sistema
"ErrorStruct". El tipo de datos de sistema "ErrorStruct" especifica la estructura exacta con la
que debe guardarse la información acerca del error que ha ocurrido. Con ayuda de otras
instrucciones se puede evaluar esta estructura y programar la reacción correspondiente. Si se

928

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
producen varios errores en el bloque de programa, la instrucción emitirá información sobre el
siguiente error ocurrido solo tras haberse solucionado el primer error.
Nota
Salida ERROR
La salida ERROR se modifica solo si existe información de error. Para poner a "0" la salida
después del tratamiento de errores, dispone de las siguientes posibilidades:
● Declare la variable en la sección "Temp" de la interfaz del bloque.
● Ponga a "0" la variable antes de llamar la instrucción.
● Consulte la salida de habilitación ENO.
La salida de habilitación ENO se activa únicamente si la entrada de habilitación EN devuelve
el estado lógico "1" y existe información de error. Si no se cumple una de estas condiciones,
el procesamiento ulterior del programa no se verá afectado por la instrucción.
Nota
Activación del tratamiento local de errores
En cuanto se inserta la instrucción en el código de un bloque de programa, se activa el
tratamiento local de errores y se ignoran las reacciones preajustadas del sistema si se
producen errores.

Posibilidades del tratamiento de errores
Aquí encontrará un resumen de las posibilidades del tratamiento de errores: Sinopsis de los
mecanismos para el tratamiento de errores (Página 149)
Aquí encontrará un ejemplo exhaustivo del tratamiento local de errores con varias
posibilidades de tratamiento: Ejemplo de tratamiento de errores de ejecución del programa
(Página 180)

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar error localmente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

ERROR

Output

ErrorStruct

D, L

Información de error

Programación del PLC
Manual de programación y manejo, 11/2019

929

Instrucciones
4.1 Instrucciones

Tipo de datos "ErrorStruct"
El tipo de datos "ErrorStruct" se puede insertar en un bloque de datos global o en la interfaz del
bloque. También se puede insertar el tipo de datos varias veces si cada vez se asigna un
nombre distinto para la estructura de datos. La estructura de datos y el nombre de los distintos
elementos de la estructura no se pueden modificar. Si guarda la información del error en un
bloque de datos global, se podrá leer desde otro bloque de programa.
La tabla siguiente muestra la estructura del tipo de datos "ErrorStruct":
Componente de estructura

Tipo de datos

Descripción

ERROR_ID

WORD

ID de error

FLAGS

BYTE

Muestra si el error se ha producido durante
la llamada de un bloque de programa.
16#01: error durante la llamada de un blo‐
que de programa
16#00: no hay errores durante la llamada
de un bloque de programa

REACTION

BYTE

Reacción predeterminada:
0: ignorar (error de escritura)
1: continuar con el valor sustitutivo "0"
(error de lectura)
2: omitir instrucción (error de sistema)

CODE_ADDRESS
BLOCK_TYPE

CREF

Información sobre la dirección y el tipo del
bloque de programa

BYTE

Tipo de bloque de programa en el que se
ha producido el error:
1: bloque de organización (OB)
2: función (FC)
3: bloque de función (FB)

930

CB_NUMBER

UINT

Número del bloque lógico

OFFSET

UDINT

Referencia a la memoria interna

MODE

BYTE

Información sobre la dirección de un ope‐
rando

OPERAND_NUMBER

UINT

Número de operando del comando de la
máquina

POINTER_NUMBER_LOCA‐
TION

UINT

(A) Puntero interno

SLOT_NUMBER_SCOPE

UINT

(B) Área de almacenamiento en la memo‐
ria interna

DATA_ADDRESS

NREF

Información sobre la dirección de un ope‐
rando

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Componente de estructura
AREA

Tipo de datos

Descripción

BYTE

(C) Área de memoria:
L: 16#40...16#7F, 16#86, 16#87, 16#8E,
16#8F, 16#C0...16#FF
I: 16#81
Q: 16#82
M: 16#83
DB: 16#40, 16#84, 16#85, 16#8A, 16#8B
PI: 16#01
PQ: 16#02
Objetos tecnológicos: 16#04

DB_NUMBER

UINT

(D) Número del bloque de datos

OFFSET

UDINT

(E) Dirección relativa del operando

Componente de estructura "ERROR_ID"
La tabla siguiente muestra los valores que pueden devolverse en el componente de estructura
"ERROR_ID":
ID*
(hexadecimal)

ID*
(decimal)

Descripción

0

0

Ningún error

2503

9475

Puntero no válido

2520

9504

STRING no válido

2522

9506

Error de lectura: operando fuera del rango válido

2523

9507

Error de escritura: operando fuera del rango válido

2524

9508

Error de lectura: operando no válido

2525

9509

Error de escritura: operando no válido

2528

9512

Error de lectura: alineación de datos

2529

9513

Error de escritura: alineación de datos

252C

9516

Puntero no válido

2530

9520

Error de escritura: bloque de datos

2533

9523

Referencia usada no válida

2538

9528

Error de acceso: el DB no existe

2539

9529

Error de acceso: se ha utilizado un DB incorrecto

253A

9530

El bloque de datos global no existe

253C

9532

Indicación errónea o la función no existe

253D

9533

La función de sistema no existe

253E

9534

Indicación errónea o el bloque de función no existe

253F

9535

El bloque de sistema no existe

2550

9552

Error de acceso: el DB no existe

2551

9553

Error de acceso: se ha utilizado un DB incorrecto

2575

9589

Error en la profundidad de anidamiento del programa

2577

9591

La propiedad de bloque "Alimentación de parámetros a través de
registros" no está activada.

Programación del PLC
Manual de programación y manejo, 11/2019

931

Instrucciones
4.1 Instrucciones
ID*
(hexadecimal)

ID*
(decimal)

Descripción

2576

9590

Error en la distribución de datos locales

25A0

9632

Error interno en TP

25A1

9633

Variable protegida contra escritura

25A2

9634

Valor numérico no válido de la variable

2942

10562

Error de lectura: entrada

2943

10563

Error de escritura: salida

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
08/
$XWR 5HDO

)LHOG>LQGH[@

7DJ2XWB(QDEOHG

!
5($/


)LHOG>LQGH[@


(12
(5525

(12

,1

287

%<7(
(UURU

7DJ2XW

,1

(UURU5($&7,21

*(7B(5525
(1

(1

7DJ2XWB(QDEOHG
5



Se ha producido un error al acceder a la variable #Field[#index]. La salida de habilitación ENO
de la instrucción "Multiplicar" y el operando #TagOut_Enabled devuelven el estado lógico "1"
a pesar del error de lectura/escritura, y la multiplicación se realiza con el valor "0.0". En este
caso de error, es recomendable programar la instrucción "Consultar error localmente" después
de la instrucción "Multiplicar" para interceptar el error. La información de error que devuelve la
instrucción "Consultar error localmente" se evalúa mediante la instrucción de comparación
"Igual". Si el componente de estructura #Error.REACTION tiene el valor "1", se trata de un error
de lectura/escritura y la salida #TagOut_Enabled se desactiva de nuevo.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Cambiar formatos de visualización en el estado del programa (Página 8529)

932

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Uso de las instrucciones GET_ERROR y GET_ERR_ID (Página 178)
Principios básicos de KOP (Página 7943)

GET_ERR_ID: Consultar ID de error localmente
Descripción
La instrucción "Consultar ID de error localmente" consulta si se han producido errores en un
bloque. Suele tratarse de un error de acceso. Si al ejecutar el bloque el sistema notifica errores
de ejecución desde que se ejecutó la instrucción por última vez, la ID de error del primer error
ocurrido se guarda en la variable de la salida ID.
En la salida ID solo pueden especificarse operandos del tipo de datos "WORD". Si se producen
varios errores en el bloque, la instrucción soluciona el primer error ocurrido, y solo entonces la
instrucción emite la ID de error del siguiente error ocurrido.
Nota
La salida ID se modifica solo si existe información de error. Para poner a "0" la salida después
del tratamiento de errores, dispone de las siguientes posibilidades:
● Declare la variable en la sección "Temp" de la interfaz del bloque.
● Ponga a "0" la variable antes de llamar la instrucción.
● Consulte la salida de habilitación ENO.
La salida de habilitación ENO de la instrucción "Consultar ID de error localmente" se activa
únicamente si la entrada de habilitación EN devuelve el estado lógico "1" y existe información
de error. Si no se cumple alguna de estas condiciones, la ejecución ulterior del programa no se
ve afectada por la instrucción "Consultar ID de error localmente".
Encontrará un ejemplo sobre cómo utilizar la instrucción en combinación con otras
posibilidades de tratamiento de errores, en "Consulte también".
Nota
La instrucción "Consultar ID de error localmente" activa el tratamiento local de errores dentro
del bloque. Si en la lógica de un bloque se ha insertado la instrucción "Consultar ID de error
localmente", se ignoran las reacciones predeterminadas del sistema al ocurrir errores.

Posibilidades del tratamiento de errores
Aquí encontrará un resumen de las posibilidades del tratamiento de errores: Sinopsis de los
mecanismos para el tratamiento de errores (Página 149)
Aquí encontrará un ejemplo exhaustivo del tratamiento local de errores con varias
posibilidades de tratamiento: Ejemplo de tratamiento de errores de ejecución del programa
(Página 180)

Programación del PLC
Manual de programación y manejo, 11/2019

933

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar ID de error localmente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

ID

Output

WORD

I, Q, M, D, L

ID de error

Parámetro ID
La tabla siguiente muestra los valores que pueden depositarse en el parámetro ID:

934

ID*
(hexadecimal)

ID*
(decimal)

Descripción

0

0

Ningún error

2503

9475

Puntero no válido

2520

9504

STRING no válido

2522

9506

Error de lectura: operando fuera del rango válido

2523

9507

Error de escritura: operando fuera del rango válido

2524

9508

Error de lectura: operando no válido

2525

9509

Error de escritura: operando no válido

2528

9512

Error de lectura: alineación de datos

2529

9513

Error de escritura: alineación de datos

252C

9516

Puntero no válido

2530

9520

Error de escritura: bloque de datos

2533

9523

Referencia usada no válida

2538

9528

Error de acceso: el DB no existe

2539

9529

Error de acceso: se ha utilizado un DB incorrecto

253A

9530

El bloque de datos global no existe

253C

9532

Indicación errónea o la función no existe

253D

9533

La función de sistema no existe

253E

9534

Indicación errónea o el bloque de función no existe

253F

9535

El bloque de sistema no existe

2550

9552

Error de acceso: el DB no existe

2551

9553

Error de acceso: se ha utilizado un DB incorrecto

2575

9589

Error en la profundidad de anidamiento del programa

2576

9590

Error en la distribución de datos locales

2577

9591

La propiedad de bloque "Alimentación de parámetros a través de
registros" no está activada.

25A0

9632

Error interno en TP

25A1

9633

Variable protegida contra escritura

25A2

9634

Valor numérico no válido de la variable

2942

10562

Error de lectura: entrada

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
ID*
(hexadecimal)

ID*
(decimal)

Descripción

2943

10563

Error de escritura: salida

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
08/
$XWR 5HDO

)LHOG>LQGH[@

7DJ2XWB(QDEOHG

!
5($/


)LHOG>LQGH[@


(12
,'

(12

,1

287

7DJ2XW

,1

7DJ,'

*(7B(55B,'
(1

(1

029(

,17
7DJ,'





(1

(12

,1

287

7DJ2XW

Se ha producido un error al acceder a la variable #Field[#index]. La salida de habilitación ENO
de la instrucción "Multiplicar" y el operando #TagOut_Enabled devuelven el estado lógico "1"
a pesar del error de lectura/escritura, y la multiplicación se realiza con el valor "0.0". En este
caso de error, es recomendable programar la instrucción "Consultar ID de error localmente"
después de la instrucción "Multiplicar" para interceptar el error. La información de error que
devuelve la instrucción "Consultar ID de error localmente" se evalúa mediante la instrucción de
comparación "Igual". Si el operando #TagID devuelve la ID 2522, se trata de un error de lectura/
escritura, y se escribe el valor "100.0" en la salida #TagOut.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Uso de las instrucciones GET_ERROR y GET_ERR_ID (Página 178)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

935

Instrucciones
4.1 Instrucciones

INIT_RD: Inicializar todos los datos remanentes
Descripción
La instrucción "Inicializar todos los datos remanentes" permite inicializar todos los datos
remanentes de todos los bloques de datos, marcas y temporizadores y contadores SIMATIC
al mismo tiempo. La instrucción solo puede ejecutarse dentro de un OB de arranque, puesto
que su ejecución excedería el tiempo de ciclo de programa.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Inicializar todos los datos
remanentes":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

REQ

Input

BOOL

I, Q, M, D, L, T, C o
constante

Si la entrada REQ devuelve
el estado lógico "1", se inicia‐
lizan todos los datos rema‐
nentes.

RET_VAL

Output

INT

I, Q, M, D, L

Información de error:
El parámetro RET_VAL de‐
vuelve un código de error
cuando ocurre un error du‐
rante la ejecución de la ins‐
trucción.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

80B5

No puede ejecutarse la instrucción porque no ha sido programada dentro de un OB de
arranque.

Informa‐
Consulte también: "GET_ERR_ID: Consultar ID de error localmente"
ción de
error gene‐
ral
*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

936

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
,1,7B5'
ಯ7DJ,QBಯ

ಯ7DJB5(4ಯ

(1
5(4

(12
5(7B9$/

ಯ7DJ2XWಯ

ಯ7DJB5HVXOWಯ

Si los operandos "TagIn_1" y "Tag_REQ" devuelven el estado lógico "1", se ejecuta la
instrucción. Se inicializan todos los datos remanentes de todos los bloques de datos, marcas
y temporizadores y contadores SIMATIC. Si no ocurren errores al ejecutar la instrucción, la
salida de habilitación ENO devuelve el estado lógico "1".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
GET_ERR_ID: Consultar ID de error localmente (Página 933)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de KOP (Página 7943)

WAIT: Programar retardo
Descripción
La instrucción "Programar retardo" permite detener la ejecución del programa durante un
periodo predeterminado. El periodo se indica en microsegundos en el parámetro WT de la
instrucción.
Es posible programar tiempos de retardo de -32768 a +32767 microsegundos (μs). El tiempo
de retardo mínimo depende de la CPU utilizada y equivale al tiempo de ejecución de la
instrucción.

Programación del PLC
Manual de programación y manejo, 11/2019

937

Instrucciones
4.1 Instrucciones
La ejecución de la instrucción puede verse interrumpida por eventos de prioridad superior y no
arrojará información de error.
Nota
Tiempo de retardo negativo
Si indica un tiempo de retardo negativo en el parámetro WT, la salida de habilitación ENO, o
el RLO y el bit BR arrojan el estado lógico FALSE. Un tiempo de retardo negativo no afecta a
la CPU. En KOP y FUP no se ejecutan las siguientes instrucciones vinculadas a la salida de
habilitación ENO.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Programar retardo":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

WT

Input

INT

I, Q, M, D, L, P o
constante

Tiempo de retardo en micro‐
segundos (μs)

Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Ejemplo de cómo influir en el tiempo de retardo previsto
En el ejemplo siguiente se ve la influencia del tiempo de retardo de la instrucción "WAIT" en
diferentes escenarios.
La figura siguiente ilustra los escenarios esquemáticamente:

938

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
6HQG&ORFN

&DVR 
2%

PV

:$,7  PV
7'HOD\ PV

7&RGH PV

7'HOD\ PV

7&RGH PV

7'HOD\ PV

7&RGH PV

75H PV

&DVR
2%GHDODUPD

75H PV

&DVR
2%GHDODUPD

7&RGH PV

&DVR
2%GHDODUPD
72Y PV
6HQG&ORFN 7LHPSRGHFLFORGHHPLVLµQGHOD&38
7'HOD\ 7LHPSRGHUHWDUGRGHO2%GHDODUPD
7&RGH 7LHPSRGHHMHFXFLµQGHOSURJUDPD
75H 7LHPSRUHVWDQWH
72Y 7LHPSRHQHOTXHVHSURORQJDHOWLHPSRGHFLFORGHHPLVLµQ
(O2%FRQODLQVWUXFFLµQ:$,7WDPEL«QIRUPDSDUWHGHORVFDVRV\\GHEH
WHQHUVHHQFXHQWD

Tiempo restante = intervalo entre el final del tiempo de retardo previsto (mediante "WAIT") y la
finalización del OB de alarma
Tiempo de prolongación = intervalo entre la finalización del OB de alarma y el final del tiempo
de retardo previsto (mediante "WAIT")
Caso 1:
La instrucción "WAIT" se llama en un OB1. La instrucción "WAIT" puede verse interrumpida por
OB o procesos de mayor prioridad (p. ej. System Threads). Sin embargo, el tiempo de retardo
de la instrucción "WAIT" no se ha modificado ni se ha aplazado.
Casos 2 y 3:
El procesamiento del programa en el OB1 prosigue tras un retardo de 20 ms. Este retardo se
calcula con la llamada de la instrucción "WAIT" en el OB1 (consulte OB1 con WAIT). En esos
20 ms, un OB de alarma puede ejecutar su propio código de programa. El tiempo de ciclo de
emisión de la CPU no cambia.

Programación del PLC
Manual de programación y manejo, 11/2019

939

Instrucciones
4.1 Instrucciones
Caso 4:
El procesamiento del programa en el OB1 prosigue tras finalizar el proceso de mayor prioridad.
Los 20 ms de retardo en el OB1 han transcurrido, pero el proceso de mayor prioridad todavía
no ha finalizado. El tiempo de ciclo de emisión de la CPU aumenta.
Nota
Secuencia de ejecución de procesos del sistema o de comunicación (System Threads)
Los threads del sistema suelen utilizar la prioridad "15". También hay threads del sistema con
una prioridad mayor que "26", pero estos procesos suponen una carga menor para la CPU. Los
threads del sistema no se muestran en la figura.
Medición del tiempo de ejecución del OB1 utilizando la instrucción "RT_INFO":
Caso 2: 20 ms - 8 ms - System Threads = <12 ms. Tiempo de ciclo de emisión: ~20 ms.
Caso 3: 20 ms - 11 ms - System Threads - <9 ms. Tiempo de ciclo de emisión: ~20 ms.
Caso 4: 20 ms - 15 ms - System Threads - <7 ms. Tiempo de ciclo de emisión: ~22 ms.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

RUNTIME: Medir tiempo de ejecución
Descripción
La instrucción "Medir tiempo de ejecución" permite medir el tiempo de ejecución de todo el
programa, bloques individuales o secuencias de comandos.
Si desea medir el tiempo de ejecución de todo el programa, efectúe la llamada de la instrucción
"Medir tiempo de ejecución" en el OB1. El punto inicial para medir el tiempo de ejecución se
determina con la primera llamada y la salida RET_VAL devuelve el tiempo de ejecución del
programa tras la segunda llamada. El tiempo de ejecución medido incluye toda clase de
procesos de la CPU que se hayan producido durante la ejecución del programa, como, p. ej.,
interrupciones a causa de eventos o comunicaciones de mayor prioridad. La instrucción "Medir
tiempo de ejecución" lee un contador interno de la CPU y escribe su valor en el parámetro de
entrada/salida MEM. La instrucción calcula el tiempo de ejecución actual del programa según
la frecuencia interna del contador, y la escribe en la salida RET_VAL.
Si desea medir el tiempo de ejecución de bloques o secuencias de comandos individuales,
necesita tres segmentos diferentes. Efectúe la llamada de la instrucción "Medir tiempo de
ejecución" en un segmento individual dentro del programa. Al efectuar esta primera llamada de
la instrucción se establece el punto inicial para medir el tiempo de ejecución. A continuación,
llame el bloque de programa o la secuencia de comando que desee en el siguiente segmento.
Efectúe la llamada de la instrucción "Medir tiempo de ejecución" por segunda vez en otro
segmento diferente y asigne al parámetro de entrada/salida MEM la misma memoria que en la
primera llamada de la instrucción. En el tercer segmento, la instrucción "Medir tiempo de

940

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
ejecución" lee un contador interno de la CPU, calcula el tiempo de ejecución actual del bloque
de programa o secuencia de comando según la frecuencia interna del contador y lo escribe en
la salida RET_VAL.
La instrucción "Medir tiempo de ejecución" utiliza un contador interno de alta frecuencia para
calcular el tiempo. Cuando el contador se desborda, la instrucción devuelve valores <= 0.0. En
las CPU S7-1200 con versión de firmware < V4.2, esto puede suceder hasta una vez por
minuto. Estos valores de runtime deben ignorarse.
Nota
Puesto que el orden de las instrucciones de una secuencia de comandos se modifica mediante
la compilación optimizada del programa, no es posible determinar el tiempo de ejecución de
una secuencia de comandos con exactitud.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Medir tiempo de ejecución":
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

MEM

InOut

LREAL

I, Q, M, D, L

El contenido está previsto
únicamente para fines inter‐
nos.

RET_VAL

Output

LREAL

I, Q, M, D, L

Devuelve el tiempo de ejecu‐
ción medido en segundos

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción mediante el cálculo del tiempo
de ejecución de un bloque de programa:
Segmento 1:
5817,0(
ಯ7DJ,Qಯ

ಯ7DJ0HPRU\ಯ

(1

(12

0(0

5(7B9$/

ಯ7DJB5HVXOWಯ

Segmento 2:
'%
ಯ%HVWBEHIRUHBGDWHB'%ಯ
)%
ಯ%HVWBEHIRUHBGDWHಯ

(1

Programación del PLC
Manual de programación y manejo, 11/2019

(12

941

Instrucciones
4.1 Instrucciones
Segmento 3:
5817,0(
ಯ7DJ,Qಯ

ಯ7DJ0HPRU\ಯ

(1
0(0

(12
5(7B9$/

ಯ7DJ5HVXOWB5XQWLPHಯ

Si el operando "TagIn1" devuelve el estado lógico "1" en el segmento 1, se ejecuta la
instrucción. Con la primera llamada de la instrucción se determina el punto inicial para la
medición del tiempo de ejecución, y se guarda como referencia en una memora intermedia del
operando "TagMemory" para la segunda llamada de la instrucción.
En el segmento 2 se llama el bloque de programa FB1 "Best_before_date".
Si el bloque de programa FB1 se ha procesado y el operando "TagIn1" devuelve el estado
lógico "1", la instrucción se ejecuta en el segmento 3. La segunda llamada de la instrucción
calcula el tiempo de ejecución del bloque de programa y escribe el resultado en la salida
RET_VAL.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)
Encontrará un ejemplo detallado de cómo medir el tiempo de ciclo total de un programa en el
Siemens Industry Online Support, en la ID de artículo: 87668055 (https://
support.industry.siemens.com/cs/ww/es/view/87668055)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

Operaciones lógicas con palabras
AND: Operación lógica Y
Descripción
La instrucción "Operación lógica Y" permite combinar el valor de la entrada IN1 con el valor de
la entrada IN2 de bit en bit mediante una Y lógica y consultar el resultado en la salida OUT.
Al ejecutar la instrucción, el bit 0 del valor de la entrada IN1 se combina con el bit 0 del valor
de la entrada IN2 mediante una Y lógica. El resultado se deposita en el bit 0 de la salida OUT.
La misma combinación lógica se realiza para todos los demás bits de los valores indicados.
El número de entradas del cuadro de la instrucción se puede ampliar. Las entradas insertadas
se numeran en orden ascendente en el cuadro. Al ejecutar la instrucción se combinan
mediante una Y lógica los valores de todos los parámetros de entrada disponibles. El resultado
se deposita en la salida OUT.

942

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
El estado lógico del bit de resultado es "1" solo si el estado lógico de los dos bits que deben
combinarse lógicamente también es "1". Si el estado lógico de uno de los bits que deben
combinarse lógicamente es "0", se desactivará el bit de resultado correspondiente.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica Y":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

Secuencias de bits I, Q, M, D, L, P o
constante

Primer valor de la operación
lógica

IN2

Input

Secuencias de bits I, Q, M, D, L, P o
constante

Segundo valor de la opera‐
ción lógica

INn

Input

Secuencias de bits I, Q, M, D, L, P o
constante

Otras entradas cuyos valores
se combinan.

OUT

Output

Secuencias de bits I, Q, M, D, L, P

Resultado de la instrucción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

$1'
:25'
(1

ಯ7DJB9DOXHಯ

,1

ಯ7DJB9DOXHಯ

,1

ಯ7DJ2XWಯ

(12
287

ಯ7DJB5HVXOWಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN1

Tag_Value1

0101 0101 0101 0101

IN2

Tag_Value2

0000 0000 0000 1111

OUT

Tag_Result

0000 0000 0000 0101

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El valor del
operando "Tag_Value1" se combina con el valor del operando "Tag_Value2" mediante una Y
lógica. El resultado se obtiene de bit en bit y se deposita en el operando "Tag_Result". La salida
de habilitación ENO y la salida "TagOut" adoptan el estado lógico "1".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Programación del PLC
Manual de programación y manejo, 11/2019

943

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

OR: Operación lógica O
Descripción
La instrucción "Operación lógica O" permite combinar el valor de la entrada IN1 con el valor de
la entrada IN2 de bit en bit mediante una O lógica y consultar el resultado en la salida OUT.
Al ejecutar la instrucción, el bit 0 del valor de la entrada IN1 se combina con el bit 0 del valor
de la entrada IN2 mediante una O lógica. El resultado se deposita en el bit 0 de la salida OUT.
La misma combinación lógica se realiza para todos los bits de la variable indicada.
El número de entradas del cuadro de la instrucción se puede ampliar. Las entradas insertadas
se numeran en orden ascendente en el cuadro. Al ejecutar la instrucción se combinan
mediante una O lógica los valores de todos los parámetros de entrada disponibles. El resultado
se deposita en la salida OUT.
El estado lógico del bit de resultado es "1" si el estado lógico de como mínimo uno de los dos
bits que deben combinarse lógicamente también es "1". Si el estado lógico de ambos bits que
deben combinarse lógicamente es "0", se desactivará el bit de resultado correspondiente.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica O":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

Secuencias de bits I, Q, M, D, L, P o
constante

Primer valor de la operación
lógica

IN2

Input

Secuencias de bits I, Q, M, D, L, P o
constante

Segundo valor de la opera‐
ción lógica

INn

Input

Secuencias de bits I, Q, M, D, L, P o
constante

Otras entradas cuyos valores
se combinan.

OUT

Output

Secuencias de bits I, Q, M, D, L, P

Resultado de la instrucción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

944

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

25
:25'
(1

ಯ7DJB9DOXHಯ

,1

ಯ7DJB9DOXHಯ

,1

ಯ7DJ2XWಯ

(12
287

ಯ7DJB5HVXOWಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN1

Tag_Value1

0101 0101 0101 0101

IN2

Tag_Value2

0000 0000 0000 1111

OUT

Tag_Result

0101 0101 0101 1111

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El valor del
operando "Tag_Value1" se combina con el valor del operando "Tag_Value2" mediante una O
lógica. El resultado se obtiene de bit en bit y se deposita en el operando "Tag_Result". La salida
de habilitación ENO y la salida "TagOut" adoptan el estado lógico "1".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

XOR: Operación lógica O-exclusiva
Descripción
La instrucción "Operación lógica O-exclusiva" permite combinar el valor de la entrada IN1 con
el valor de la entrada IN2 de bit en bit mediante una O-exclusiva lógica y consultar el resultado
en la salida OUT.
Al ejecutar la instrucción, el bit 0 del valor de la entrada IN1 se combina con el bit 0 del valor
de la entrada IN2 mediante una O exclusiva lógica. El resultado se deposita en el bit 0 de la
salida OUT. La misma combinación lógica se realiza para todos los demás bits del valor
indicado.
El número de entradas del cuadro de la instrucción se puede ampliar. Las entradas insertadas
se numeran en orden ascendente en el cuadro. Al ejecutar la instrucción se combinan los
valores de todos los parámetros de entrada disponibles mediante una O exclusiva lógica. El
resultado se deposita en la salida OUT.

Programación del PLC
Manual de programación y manejo, 11/2019

945

Instrucciones
4.1 Instrucciones
El estado lógico del bit de resultado es "1" si el estado lógico de uno de los dos bits que deben
combinarse lógicamente también es "1". Si el estado lógico de ambos bits que deben
combinarse lógicamente es "1" o "0", se desactivará el bit de resultado correspondiente.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica O-exclusiva":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

Secuencias de bits I, Q, M, D, L, P o
constante

Primer valor de la operación
lógica

IN2

Input

Secuencias de bits I, Q, M, D, L, P o
constante

Segundo valor de la opera‐
ción lógica

INn

Input

Secuencias de bits I, Q, M, D, L, P o
constante

Otras entradas cuyos valores
se combinan.

OUT

Output

Secuencias de bits I, Q, M, D, L, P

Resultado de la instrucción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

;25
:25'
(1

ಯ7DJB9DOXHಯ

,1

ಯ7DJB9DOXHಯ

,1

ಯ7DJ2XWಯ

(12
287

ಯ7DJB5HVXOWಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN1

Tag_Value1

0101 0101 0101 0101

IN2

Tag_Value2

0000 0000 0000 1111

OUT

Tag_Result

0101 0101 0101 1010

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El valor del
operando "Tag_Value1" se combina con el valor del operando "Tag_Value2" mediante una Oexclusiva. El resultado se obtiene de bit en bit y se deposita en el operando "Tag_Result". La
salida de habilitación ENO y la salida "TagOut" adoptan el estado lógico "1".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

946

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

INVERT: Complemento a 1
Descripción
La instrucción "Complemento a 1" permite invertir el estado lógico de los bits de la entrada IN.
Al ejecutar la instrucción, el valor de la entrada IN se combina con una operación lógica Oexclusiva utilizando una plantilla hexadecimal (W#16#FFFF para números de 16 bits o
DW#16#FFFF FFFF para números de 32 bits). Esto invierte el estado lógico de los distintos
bits y deposita el resultado en la salida OUT.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Complemento a 1":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Secuencias de
bits, enteros

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Secuencias de
bits, enteros

I, Q, M, D, L, P

Complemento a 1 del valor
de la entrada IN

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
,19
:25'

ಯ7DJ,Qಯ

ಯ7DJ,QB9DOXHಯ

Programación del PLC
Manual de programación y manejo, 11/2019

(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJ2XWB9DOXHಯ

947

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

W#16#000F

W#16#7E

OUT

TagOut_Value

W#16#FFF0

W#16#81

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
invierte el estado lógico de los distintos bits de la entrada "TagIn_Value" y escribe el resultado
en la salida "TagOut_Value". La salida de habilitación ENO y la salida "TagOut" adoptan el
estado lógico "1".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

DECO: Descodificar
Descripción
La instrucción "Descodificar" permite activar en el valor de salida un bit especificado por el
valor de entrada.
La instrucción "Descodificar" lee el valor de la entrada IN y activa el bit del valor de salida, cuya
posición de bit equivale al valor leído. Los demás bits del valor de salida se rellenan con ceros.
Si el valor de la entrada IN es mayor que 31, se ejecuta una instrucción modulo 32.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Descodificar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

UINT

I, Q, M, D, L, P o
constante

Posición del bit que se activa
en el valor de salida.

OUT

Output

Secuencias de bits I, Q, M, D, L, P

Valor de salida

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

948

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
'(&2
ಯ7DJ,Qಯ

ಯ7DJ,QB9DOXHಯ

8,17

WR ':25'

(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJ2XWB9DOXHಯ

La figura siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
ಯ7DJ,QB9DOXHಯ




ಯ7DJ2XWB9DOXHಯ

 



 

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
lee el número de bit "3" del valor del operando "TagIn_Value" de la entrada y activa el tercer bit
del valor del operando "TagOut_Value" de la salida.
Si no ocurren errores al ejecutar la instrucción, la salida de habilitación ENO devuelve el estado
lógico "1" y se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

ENCO: Codificar
Descripción
La instrucción "Codificar" permite leer el número del bit menos significativo que está activado
en el valor de entrada y depositarlo en la salida OUT.
La instrucción "Codificar" selecciona el bit menos significativo del valor de la entrada IN y
escribe su número de bit en la variable de la salida OUT.

Programación del PLC
Manual de programación y manejo, 11/2019

949

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Codificar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Secuencias de bits I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

INT

Valor de salida

I, Q, M, D, L, P

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
(1&2
':25'

ಯ7DJ,Qಯ

ಯ7DJ,QB9DOXHಯ

(1

(12

,1

287

ಯ7DJ2XWಯ

ಯ7DJ2XWB9DOXHಯ

La figura siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:

ಯ7DJ,QB9DOXHಯ
ಯ7DJ2XWB9DOXHಯ

 



 


Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
selecciona el bit menos significativo que está activado en la entrada "TagIn_Value" y escribe
el bit "3" en la variable de la salida "TagOut_Value".
Si no ocurren errores al ejecutar la instrucción, la salida de habilitación ENO devuelve el estado
lógico "1" y se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

950

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

SEL: Seleccionar
Descripción
La instrucción "Seleccionar" permite elegir, en función de un interruptor (entrada G), una de las
entradas IN0 o IN1 y copiar su contenido en la salida OUT. Si la entrada G tiene el estado lógico
"0", se copia el valor de la entrada IN0. Si la entrada G tiene el estado lógico "1", se copia el
valor de la entrada IN1 en la salida OUT.
Todas las variables de los parámetros deben tener el mismo tipo de datos.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Seleccionar":
Parámetro

Declara‐
ción

S7-1200

S7-1500

S7-1200

S7-1500

EN

Input

BOOL

BOOL

I, Q, M, D,
L o cons‐
tante

I, Q, M, D, L
o constante

ENO

Output

BOOL

BOOL

I, Q, M, D,
L

I, Q, M, D, L Salida de habilita‐
ción

G

Input

BOOL

BOOL

I, Q, M, D,
L o cons‐
tante

I, Q, M, D, L, Interruptor
T, C o cons‐
tante

IN0

Input

Secuencias
de bits, ente‐
ros, números
en coma flo‐
tante, tiem‐
pos, TOD,
CHAR,
WCHAR, DA‐
TE

Secuen‐
cias de
bits, ente‐
ros, núme‐
ros en co‐
ma flotan‐
te, tiem‐
pos, TOD,
LTOD,
LDT,
CHAR,
WCHAR,
DATE

I, Q, M, D,
L, P o
constante

I, Q, M, D, L, Primer valor de
P o constan‐ entrada
te

Programación del PLC
Manual de programación y manejo, 11/2019

Tipo de datos

Área de memoria

Descripción
Entrada de habili‐
tación

951

Instrucciones
4.1 Instrucciones
Parámetro

Declara‐
ción

Tipo de datos

Área de memoria

S7-1200

S7-1500

S7-1200

S7-1500

Descripción

IN1

Input

Secuencias
de bits, ente‐
ros, números
en coma flo‐
tante, tiem‐
pos, TOD,
CHAR,
WCHAR, DA‐
TE

Secuen‐
cias de
bits, ente‐
ros, núme‐
ros en co‐
ma flotan‐
te, tiem‐
pos, TOD,
LTOD,
LDT,
CHAR,
WCHAR,
DATE

I, Q, M, D,
L, P o
constante

I, Q, M, D, L, Segundo valor de
P o constan‐ entrada
te

OUT

Output

Secuencias
de bits, ente‐
ros, números
en coma flo‐
tante, tiem‐
pos, TOD,
CHAR,
WCHAR, DA‐
TE

Secuen‐
cias de
bits, ente‐
ros, núme‐
ros en co‐
ma flotan‐
te, tiem‐
pos, TOD,
LTOD,
LDT,
CHAR,
WCHAR,
DATE

I, Q, M, D,
L, P

I, Q, M, D, L, Resultado
P

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJ,Qಯ

ಯ7DJ,QB*ಯ

6(/
:25'
(1

(12

*

287

ಯ7DJ,QB9DOXHಯ

,1

ಯ7DJ,QB9DOXHಯ

,1

ಯ7DJ2XWಯ
ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:

952

Parámetro

Operando

Valor

G

TagIn_G

0

1

IN0

TagIn_Value0

W#16#0000

W#16#4C

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Operando

IN1

TagIn_Value1

W#16#FFFF

Valor
W#16#5E

OUT

TagOut_Value

W#16#0000

W#16#5E

Si el operando "TagIn" tiene el estado lógico "1", se ejecuta la instrucción. Dependiendo del
estado lógico de la entrada "TagIn_G", se selecciona el valor de la entrada "TagIn_Value0" o
"TagIn_Value1" y se copia en la salida "TagOut_Value". Si no se producen errores al ejecutar
la instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y se activa la salida
"TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

MUX: Multiplexar
Descripción
La instrucción "Multiplexar" permite copiar el contenido de una entrada seleccionada en la
salida OUT. El número de entradas seleccionables en el cuadro de la instrucción se puede
ampliar. Se puede declarar un máximo de 32 entradas.
Las entradas se numeran automáticamente en el cuadro. La numeración comienza por IN0 y
continúa en orden ascendente con cada nueva entrada. El parámetro K determina la entrada
cuyo contenido se copia en la salida OUT. Si el valor del parámetro K es mayor que el número
de entradas disponibles, el contenido del parámetro ELSE se copia en la salida OUT y a la
salida de habilitación ENO se le asigna el estado lógico "0".
La instrucción "Multiplexar" solo se puede ejecutar si las variables de todas las entradas y de
la salida OUT tienen el mismo tipo de datos. El parámetro K es una excepción, ya que para este
solo pueden indicarse números enteros.
La salida de habilitación ENO devuelve el estado lógico "0" cuando se cumple una de las
condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● La entrada del parámetro K está fuera del rango de entradas disponibles. Esta reacción es
independiente de que se utilice o no la entrada ELSE. El valor de la salida OUT no varía.
● Se producen errores al ejecutar la instrucción.

Programación del PLC
Manual de programación y manejo, 11/2019

953

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Multiplexar":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de me‐
moria

Descripción
Entrada de habilitación

EN

Input

BOOL

BOOL

I, Q, M, D, L
o constante

ENO

Output

BOOL

BOOL

I, Q, M, D, L

Salida de habilitación

K

Input

Enteros

Enteros

I, Q, M, D, L,
P o constan‐
te

Indica la entrada cuyo
contenido se copia.
● Si K = 0 =>
parámetro IN0
● Si K = 1 =>
parámetro IN1, etc.

954

IN0

Input

Números bina‐
rios, enteros,
números en
coma flotante,
tiempos,
CHAR,
WCHAR,
TOD, DATE

Números bi‐ I, Q, M, D, L,
narios, ente‐ P o constan‐
te
ros, núme‐
ros en coma
flotante,
tiempos,
CHAR,
WCHAR,
TOD,
LTOD, DA‐
TE, LDT

Primer valor de entrada

IN1

Input

Números bina‐
rios, enteros,
números en
coma flotante,
tiempos,
CHAR,
WCHAR,
TOD, DATE

Números bi‐ I, Q, M, D, L,
narios, ente‐ P o constan‐
te
ros, núme‐
ros en coma
flotante,
tiempos,
CHAR,
WCHAR,
TOD,
LTOD, DA‐
TE, LDT

Segundo valor de entra‐
da

INn

Input

Números bina‐
rios, enteros,
números en
coma flotante,
tiempos,
CHAR,
WCHAR,
TOD, DATE

Números bi‐ I, Q, M, D, L,
narios, ente‐ P o constan‐
te
ros, núme‐
ros en coma
flotante,
tiempos,
CHAR,
WCHAR,
TOD,
LTOD, DA‐
TE, LDT

Valores de entrada op‐
cionales

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de me‐
moria

Descripción

ELSE

Input

Números bina‐
rios, enteros,
números en
coma flotante,
tiempos,
CHAR,
WCHAR,
TOD, DATE

Números bi‐ I, Q, M, D, L,
narios, ente‐ P o constan‐
te
ros, núme‐
ros en coma
flotante,
tiempos,
CHAR,
WCHAR,
TOD,
LTOD, DA‐
TE, LDT

Indica el valor que se
copia si K > n

OUT

Output

Números bina‐
rios, enteros,
números en
coma flotante,
tiempos,
CHAR,
WCHAR,
TOD, DATE

Números bi‐ I, Q, M, D, L,
narios, ente‐ P
ros, núme‐
ros en coma
flotante,
tiempos,
CHAR,
WCHAR,
TOD,
LTOD, DA‐
TE, LDT

Salida en la que se co‐
pia el valor

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

ಯ7DJB,QSXWಯ

08;
':25'
(1

(12

ಯ7DJB1XPEHUಯ

.

287

ಯ7DJB9DOXHBಯ

,1

ಯ7DJB9DOXHBಯ

,1

ಯ7DJB9DOXHBಯ

(/6(

ಯ7DJB2XWSXWಯ
6
ಯ7DJB5HVXOWಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

K

Tag_Number

1

Valor

IN0

Tag_Value_0

DW#16#00000000

IN1

Tag_Value_1

DW#16#003E4A7D

ELSE

Tag_Value_2

DW#16#FFFF0000

OUT

Tag_Result

DW#16#003E4A7D

Programación del PLC
Manual de programación y manejo, 11/2019

955

Instrucciones
4.1 Instrucciones
Si el operando "Tag_Input" devuelve el estado lógico "1", se ejecuta la instrucción. De acuerdo
con el valor del operando "Tag_Number", se copia el valor de la entrada "Tag_Value_1" y se
asigna al operando de la salida "Tag_Result". Si no se producen errores al ejecutar la
instrucción, se activan la salida de habilitación ENO y "Tag_Output".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

DEMUX: Desmultiplexar
Descripción
La instrucción "Desmultiplexar" permite copiar el contenido de la entrada IN en una salida
seleccionada. El número de salidas seleccionables del cuadro de la instrucción se puede
ampliar. Las salidas se numeran automáticamente en el cuadro. La numeración comienza por
OUT0 y continúa en orden ascendente con cada nueva salida. El parámetro K permite
determinar la salida en la que se copia el contenido de la entrada IN. Las demás salidas no
cambian. Si el valor del parámetro K es mayor que el número de salidas disponibles, el
contenido de la entrada IN se copia en el parámetro ELSE y a la salida de habilitación ENO se
le asigna el estado lógico "0".
La instrucción "Desmultiplexar" solo se puede ejecutar si las variables de la entrada IN y las de
todas las salidas son del mismo tipo de datos. El parámetro K es una excepción, ya que en el
mismo sólo pueden indicarse números enteros.
La salida de habilitación ENO se desactiva si se cumple una de las condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El valor del parámetro K es mayor que el número de salidas disponibles.
● Se producen errores al ejecutar la instrucción.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desmultiplexar":
Parámetro

956

Declaración

Tipo de datos
S7-1200

S7-1500

Área de me‐
moria

Descripción

EN

Input

BOOL

BOOL

I, Q, M, D, L
o constante

Entrada de habilitación

ENO

Output

BOOL

BOOL

I, Q, M, D, L

Salida de habilitación

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro
K

Declaración
Input

Tipo de datos
S7-1200

S7-1500

Enteros

Enteros

Área de me‐
moria

Descripción

I, Q, M, D, L,
P o constan‐
te

Indica la salida en la que se
copia el valor de entrada
(IN).
● Si K = 0 => parámetro
OUT0
● Si K = 1 => parámetro
OUT1, etc.

IN

Input

Números
binarios,
enteros,
números
en coma
flotante,
tiempos,
CHAR,
WCHAR,
TOD, DA‐
TE

Números bi‐ I, Q, M, D, L,
narios, ente‐ P o constan‐
te
ros, núme‐
ros en coma
flotante,
tiempos,
CHAR,
WCHAR,
TOD,
LTOD, DA‐
TE, LDT

Valor de entrada

OUT0

Output

Números
binarios,
enteros,
números
en coma
flotante,
tiempos,
CHAR,
WCHAR,
TOD, DA‐
TE

Números bi‐ I, Q, M, D, L,
narios, ente‐ P
ros, núme‐
ros en coma
flotante,
tiempos,
CHAR,
WCHAR,
TOD,
LTOD, DA‐
TE, LDT

Primera salida

OUT1

Output

Números
binarios,
enteros,
números
en coma
flotante,
tiempos,
CHAR,
WCHAR,
TOD, DA‐
TE

Números bi‐ I, Q, M, D, L,
narios, ente‐ P
ros, núme‐
ros en coma
flotante,
tiempos,
CHAR,
WCHAR,
TOD,
LTOD, DA‐
TE, LDT

Segunda salida

Programación del PLC
Manual de programación y manejo, 11/2019

957

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de me‐
moria

Descripción

OUTn

Output

Números
binarios,
enteros,
números
en coma
flotante,
tiempos,
CHAR,
WCHAR,
TOD, DA‐
TE

Números bi‐ I, Q, M, D, L,
narios, ente‐ P
ros, núme‐
ros en coma
flotante,
tiempos,
CHAR,
WCHAR,
TOD,
LTOD, DA‐
TE, LDT

Salidas opcionales

ELSE

Output

Números
binarios,
enteros,
números
en coma
flotante,
tiempos,
CHAR,
WCHAR,
TOD, DA‐
TE

Números bi‐ I, Q, M, D, L,
narios, ente‐ P
ros, núme‐
ros en coma
flotante,
tiempos,
CHAR,
WCHAR,
TOD,
LTOD, DA‐
TE, LDT

Salida en la que se copia el
valor de entrada (IN) con K
> n.

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos disponibles en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
'(08;
ಯ7DJB,QSXWಯ
ಯ7DJB1XPEHUಯ
ಯ7DJB9DOXHಯ

':25'

ಯ7DJB2XWSXWಯ
6

(1

(12

.

287

ಯ7DJB2XWSXWBಯ

,1

287

ಯ7DJB2XWSXWBಯ

(/6(

ಯ7DJB2XWSXWBಯ

Las tablas siguientes muestran el funcionamiento de la instrucción con valores de operandos
concretos:
Tabla 4-1

958

Valores de entrada de la instrucción "Desmultiplexar" antes de ejecutar el segmento

Parámetro

Operando

K

Tag_Number

1

4

IN

Tag_Value

DW#16#FFFFFFFF

DW#16#003E4A7D

Valores

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Tabla 4-2

Valores de salida de la instrucción "Desmultiplexar" tras ejecutar el segmento

Parámetro

Operando

Valores

OUT0

Tag_Output_0

Sin cambios

Sin cambios

OUT1

Tag_Output_1

DW#16#FFFFFFFF

Sin cambios

ELSE

Tag_Output_2

Sin cambios

DW#16#003E4A7D

Si la entrada "Tag_Input" devuelve el estado lógico "1", se ejecuta la instrucción. Según el valor
del operando "Tag_Number", se copia el valor de la entrada IN en la salida correspondiente.
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

Desplazamiento y rotación
SHR: Desplazar a la derecha
Descripción
La instrucción "Desplazar a la derecha" permite desplazar el contenido del operando de la
entrada IN de bit en bit hacia la derecha y consultar el resultado en la salida OUT. El parámetro
N determina el número de bits que debe desplazarse el valor indicado.
Si el valor del parámetro N es "0", el valor de la entrada IN se copia en el operando de la salida
OUT.
Si el valor del parámetro N es mayor que el número de bits disponibles, el valor del operando
de la entrada IN se desplaza hacia la derecha las posiciones de bit disponibles.
En los valores sin signo, se rellenan con ceros los bits que quedan libres en el área izquierda
del operando al realizar el desplazamiento. Si el valor indicado lleva signo, las posiciones libres
se ocupan con el estado lógico del bit de signo.
La figura siguiente muestra cómo el contenido de un operando del tipo de datos Integer se
desplaza cuatro posiciones de bit hacia la derecha:

Programación del PLC
Manual de programación y manejo, 11/2019

959

Instrucciones
4.1 Instrucciones


,1



1

%LW
GHVLJQR

287



 













































SRVLFLRQHV

























(VWRVFXDWURELWV
VHSLHUGHQ

/RVELWVTXHTXHGDQOLEUHV
VHUHOOHQDQFRQHOHVWDGROµJLFR
GHOELWGHVLJQR

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desplazar a la derecha":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de me‐ Descripción
moria

EN

Input

BOOL

BOOL

I, Q, M, D, L Entrada de habilita‐
o constante ción

ENO

Output

BOOL

BOOL

I, Q, M, D, L Salida de habilitación

IN

Input

Secuencias de
bits, enteros

Secuencias de
bits, enteros

I, Q, M, D, L Valor que se desplaza
o constante

N

Input

USINT, UINT,
UDINT

USINT, UINT, I, Q, M, D, L Número de posicio‐
UDINT, ULINT o constante nes de bit que se des‐
plaza el valor

OUT

Output

Secuencias de
bits, enteros

Secuencias de
bits, enteros

I, Q, M, D, L Resultado de la ins‐
trucción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

960

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6+5
:25'

ಯ7DJ,Qಯ
ಯ7DJ,QB9DOXHಯ
ಯ7DJB1XPEHUಯ

(1

,1

1

(12

287


ಯ7DJ2XWಯ
6
ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

0011 1111 1010 1111

N

Tag_Number

3

OUT

TagOut_Value

0000 0111 1111 0101

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Desplazar a la
derecha". El contenido del operando "TagIn_Value" se desplaza tres posiciones de bit hacia la
derecha. El resultado se emite en la salida "TagOut_Value". Si no se producen errores al
ejecutar la instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y se activa
la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

SHL: Desplazar a la izquierda
Descripción
La instrucción "Desplazar a la izquierda" permite desplazar el contenido del operando de la
entrada IN de bit en bit hacia la izquierda y consultar el resultado en la salida OUT. El
parámetro N determina el número de bits que debe desplazarse el valor indicado.
Si el valor del parámetro N es "0", el valor de la entrada IN se copia en el operando de la salida
OUT.
Si el valor del parámetro N es mayor que el número de bits disponibles, el valor del operando
de la entrada IN se desplaza hacia la izquierda las posiciones de bit disponibles.
Los bits que quedan libres en el área derecha del operando al realizar el desplazamiento se
rellenan con ceros.

Programación del PLC
Manual de programación y manejo, 11/2019

961

Instrucciones
4.1 Instrucciones
La figura siguiente muestra cómo el contenido de un operando del tipo de datos WORD se
desplaza seis posiciones de bit hacia la izquierda:


,1



 




1

287




























SRVLFLRQHV

     

































/RVELWVTXHTXHGDQ
OLEUHVVHUHOOHQDQ
FRQFHURV

(VWRVVHLVELWV
VHSLHUGHQ

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desplazar a la izquierda":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de
memoria

Descripción

EN

Input

BOOL

BOOL

I, Q, M, D, L Entrada de habilitación
o constante

ENO

Output

BOOL

BOOL

I, Q, M, D, L Salida de habilitación

IN

Input

Secuencias de
bits, enteros

Secuencias
de bits, ente‐
ros

I, Q, M, D, L Valor que se desplaza
o constante

N

Input

USINT, UINT,
UDINT

USINT, UINT, I, Q, M, D, L Número de posiciones
UDINT, ULINT o constante de bit que se desplaza
el valor

OUT

Output

Secuencias de
bits, enteros

Secuencias
de bits, ente‐
ros

I, Q, M, D, L Resultado de la ins‐
trucción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

962

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6+/
:25'

ಯ7DJ,Qಯ
ಯ7DJ,QB9DOXHಯ
ಯ7DJB1XPEHUಯ

(1

,1

1

(12

287


ಯ7DJ2XWಯ
6
ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

0011 1111 1010 1111

N

Tag_Number

4

OUT

TagOut_Value

1111 1010 1111 0000

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Desplazar a la
izquierda". El contenido del operando "TagIn_Value" se desplaza cuatro posiciones de bit
hacia la izquierda. El resultado se emite en la salida "TagOut_Value". Si no se producen
errores al ejecutar la instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y
se activa la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

ROR: Rotar a la derecha
Descripción
La instrucción "Rotar a la derecha" permite rotar el contenido del operando de la entrada IN de
bit en bit hacia la derecha y consultar el resultado en la salida OUT. El parámetro N determina
el número de bits que debe rotarse el valor indicado. Los bits que quedan libres al realizar la
rotación se rellenan con los bits desplazados hacia fuera.
Si el valor del parámetro N es "0", el valor de la entrada IN se copia en el operando de la salida
OUT.
Si el valor del parámetro N es mayor que el número de bits disponibles, el valor del operando
en la entrada IN rota de todos modos el número indicado de posiciones de bit.
La figura siguiente muestra cómo el contenido de un operando del tipo de datos DWORD rota
tres posiciones hacia la derecha:

Programación del PLC
Manual de programación y manejo, 11/2019

963

Instrucciones
4.1 Instrucciones


,1

 



       

1

SRVLFLRQHV

287

        
(OHVWDGROµJLFRGHORVWUHV
ELWVGHVSOD]DGRVVHLQVHUWD
HQODVSRVLFLRQHVTXHTXHGDQOLEUHV

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Rotar a la derecha":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de
memoria

Descripción

EN

Input

BOOL

BOOL

I, Q, M, D, L Entrada de habilitación
o constante

ENO

Output

BOOL

BOOL

I, Q, M, D, L Salida de habilitación

IN

Input

Secuencias
de bits, ente‐
ros

Secuencias
de bits, ente‐
ros

I, Q, M, D, L Valor que se rota
o constante

N

Input

USINT, UINT,
UDINT

USINT, UINT, I, Q, M, D, L Número de posiciones
UDINT, ULINT o constante de bit que rota el valor

OUT

Output

Secuencias
de bits, ente‐
ros

Secuencias
de bits, ente‐
ros

I, Q, M, D, L Resultado de la instruc‐
ción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

964

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
525
:25'

ಯ7DJ,Qಯ
ಯ7DJ,QB9DOXHಯ
ಯ7DJB1XPEHUಯ

(1

,1

1

(12

287


ಯ7DJ2XWಯ
6
ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

0000 1111 1001 0101

N

Tag_Number

5

OUT

TagOut_Value

1010 1000 0111 1100

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Rotar a la
derecha". El contenido del operando "TagIn_Value" se rota cinco posiciones de bit hacia la
derecha. El resultado se emite en la salida "TagOut_Value". Si no se producen errores al
ejecutar la instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y se activa
la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

ROL: Rotar a la izquierda
Descripción
La instrucción "Rotar a la izquierda" permite rotar el contenido del operando de la entrada IN
de bit en bit hacia la izquierda y consultar el resultado en la salida OUT. El parámetro N
determina el número de bits que debe rotarse el valor indicado. Los bits que quedan libres al
realizar la rotación se rellenan con los bits desplazados hacia fuera.
Si el valor del parámetro N es "0", el valor de la entrada IN se copia en el operando de la salida
OUT.
Si el valor del parámetro N es mayor que el número de bits disponibles, el valor del operando
en la entrada IN rota de todos modos el número indicado de posiciones de bit.
La figura siguiente muestra cómo el contenido de un operando del tipo de datos DWORD rota
tres posiciones hacia la izquierda:

Programación del PLC
Manual de programación y manejo, 11/2019

965

Instrucciones
4.1 Instrucciones


,1

 

       

1

287



SRVLFLRQHV

        
(OHVWDGROµJLFRGHORVWUHV
ELWVGHVSOD]DGRVVHLQVHUWD
HQODVSRVLFLRQHVTXHTXHGDQOLEUHV

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Rotar a la izquierda":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de me‐ Descripción
moria

EN

Input

BOOL

BOOL

I, Q, M, D, L
o constante

Entrada de habilita‐
ción

ENO

Output

BOOL

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Secuencias
de bits, ente‐
ros

Secuencias de
bits, enteros

I, Q, M, D, L
o constante

Valor que se rota

N

Input

USINT, UINT,
UDINT

USINT, UINT,
UDINT, ULINT

I, Q, M, D, L
o constante

Número de posicio‐
nes de bit que rota el
valor

OUT

Output

Secuencias
de bits, ente‐
ros

Secuencias de
bits, enteros

I, Q, M, D, L

Resultado de la ins‐
trucción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

966

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
52/
:25'

ಯ7DJ,Qಯ
ಯ7DJ,QB9DOXHಯ
ಯ7DJB1XPEHUಯ

(1

,1

1

(12

287


ಯ7DJ2XWಯ
6
ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

1010 1000 1111 0110

N

Tag_Number

5

OUT

TagOut_Value

0001 1110 1101 0101

Si la entrada "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción "Rotar a la
izquierda". El contenido del operando "TagIn_Value" se rota cinco posiciones de bit hacia la
izquierda. El resultado se emite en la salida "TagOut_Value". Si no se producen errores al
ejecutar la instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y se activa
la salida "TagOut".
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

Legacy
DRUM: Materializar circuito secuencial sucesivo
Descripción
La instrucción "Materializar circuito secuencial sucesivo" ocupa los bits de salida programados
(OUT1 a OUT16) y la palabra de salida (OUT_WORD) con los valores programados del
parámetro OUT_VAL del paso respectivo. El paso en cuestión debe cumplir las condiciones de
la máscara de habilitación programada en el parámetro S_MASK mientras la instrucción
permanece en dicho paso. La instrucción pasa al paso siguiente cuando el evento de éste es
verdadero y una vez transcurrido el tiempo programado para el paso actual, o bien cuando el
valor del parámetro JOG cambia de "0" a "1". La instrucción se desactiva cuando el estado
lógico del parámetro RESET cambia a "1". Con ello, el paso actual se iguala al paso
predeterminado (DSP).

Programación del PLC
Manual de programación y manejo, 11/2019

967

Instrucciones
4.1 Instrucciones
El tiempo de permanencia en un paso se calcula multiplicando la base de tiempo
predeterminada (DTBP) por el valor de contaje predeterminado (S_PRESET) para cada paso.
Al comienzo de un nuevo paso, este valor calculado se carga en el parámetro DCC, que
contiene el tiempo restante para el paso actual. Por ejemplo, si el valor del parámetro DTBP es
"2" y el valor predeterminado para el primer paso es "100" (100 ms), el parámetro DCC
devolverá el valor "200" (200 ms).
Un paso puede programarse con un valor de tiempo, con un evento o con ambos. Los pasos
programados con un bit de evento y el valor de tiempo "0" pasan al siguiente paso en cuanto
el estado lógico del bit de evento es "1". Los pasos programados solo con un valor de tiempo
empiezan a contar el tiempo inmediatamente. Los pasos programados con un bit de evento y
un valor de tiempo mayor que "0" empiezan a contar el tiempo en cuanto el estado lógico del
bit de evento es "1". Los bits de evento se inicializan con el estado lógico "1".
Si el circuito secuencial sucesivo se encuentra en el último paso programado (LST_STEP) y ha
transcurrido el tiempo para dicho paso, el estado lógico del parámetro Q se pone a "1". De lo
contrario, se pone a "0". Si está activado el parámetro Q, la instrucción permanece en el paso
hasta la desactivación.
En la máscara configurable (S_MASK) es posible seleccionar los distintos bits de la palabra de
salida (OUT_WORD) y activar o desactivar los bits de salida (OUT1 a OUT16) mediante los
valores de salida (OUT_VAL). Si un bit de la máscara configurable tiene el estado lógico "1",
el valor OUT_VAL activa o desactiva el bit correspondiente. Si el estado lógico de un bit de la
máscara configurable es "0", no cambia el bit respectivo. Todos los bits de la máscara
configurable de todos los 16 pasos se inicializan con el estado lógico "1".
El bit de salida del parámetro OUT1 equivale al bit menos significativo de la palabra de salida
(OUT_WORD). El bit de salida del parámetro OUT16 equivale al bit más significativo de la
palabra de salida (OUT_WORD).

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Materializar circuito secuencial
sucesivo":

968

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

RESET

Input

BOOL

I, Q, M, D, L o
constante

El estado lógico "1" indica
una condición de desactiva‐
ción.

JOG

Input

BOOL

I, Q, M, D, L o
constante

Si el estado lógico cambia de
"0" a "1", la instrucción pasa
al siguiente paso.

DRUM_EN

Input

BOOL

I, Q, M, D, L o
constante

El estado lógico "1" permite
que el circuito secuencial su‐
cesivo siga contando según
el evento y los criterios de
tiempo.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

LST_STEP

Input

BYTE

I, Q, M, D, L o
constante

Número máximo de etapas
(p. ej.: LST_STEP = 16#08;
son posibles 8 etapas como
máximo.)

EVENT(i),

Input

BOOL

I, Q, M, D, L o
constante

Bit de evento (i);

Output

BOOL

I, Q, M, D, L

Bit de salida (j)

Q

Output

BOOL

I, Q, M, D, L

El estado lógico "1" indica
que ha transcurrido el tiempo
del último paso.

OUT_WORD

Output

WORD

I, Q, M, D, L, P

Dirección de palabra en la
que el circuito secuencial su‐
cesivo escribe los valores de
salida.

ERR_CODE

Output

WORD

I, Q, M, D, L, P

Información de error

JOG_HIS

Static

BOOL

I, Q, M, D, L

Bit de evolución del paráme‐
tro JOG

EOD

Static

BOOL

I, Q, M, D, L o
constante

El estado lógico "1" indica
que ha transcurrido el tiempo
del último paso.

DSP

Static

BYTE

I, Q, M, D, L, P o
constante

Paso predeterminado del cir‐
cuito secuencial sucesivo

DSC

Static

BYTE

I, Q, M, D, L, P o
constante

Paso actual del circuito se‐
cuencial sucesivo

DCC

Static

DWORD

I, Q, M, D, L, P o
constante

Valor de contaje actual del
circuito secuencial sucesivo

DTBP

Static

WORD

I, Q, M, D, L, P o
constante

Base de tiempo predetermi‐
nada del circuito secuencial
sucesivo

PrevTime

Static

TIME

I, Q, M, D, L o
constante

Hora de sistema anterior

S_PRESET

Static

ARRAY[1..16] of
WORD

I, Q, M, D, L o
constante

Valor de contaje predetermi‐
nado para cada paso [1 a 16];
1 ciclo de reloj = 1 ms.

OUT_VAL

Static

ARRAY[1..16,
0..15] of BOOL

I, Q, M, D, L o
constante

Valores de salida para cada
etapa [1 a 16, 0 a 15].

S_MASK

Static

ARRAY[1..16,
0..15] of BOOL

I, Q, M, D, L o
constante

Máscara configurable para
cada etapa [1 a 16, 0 a 15].
Los estados lógicos iniciales
son "1".

1 ≤ i ≤ 16
OUT(j),

El estado lógico inicial es "1".

1 ≤ j ≤ 16

Programación del PLC
Manual de programación y manejo, 11/2019

969

Instrucciones
4.1 Instrucciones

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
ERR_CO‐
DE*

Explicación

W#16#000
0

Ningún error

W#16#000
B

El valor del parámetro LST_STEP es menor que 1 o mayor que 16.

W#16#000
C

El valor del parámetro DSC es menor que 1 o mayor que el valor del parámetro
LST_STEP.

W#16#000
D

El valor del parámetro DSP es menor que 1 o mayor que el valor de LST_STEP.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
En el ejemplo siguiente, la instrucción pasa del paso 1 al paso 2. Los bits de salida (OUT1 a
OUT16) y la palabra de salida (OUT_WORD) se activan según la máscara configurada para el
paso 2 y los valores del parámetro OUT_VAL.
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.
ಯ'580B'%ಯ
'580

ಯ7DJ,Qಯ

ಯ7DJ2XWಯ
(12

(1
ಯ7DJB5HVHWಯ
ಯ7DJB,QSXWB-2*ಯ
ಯ7DJB'580B(1ಯ
ಯ/DVW6WHSಯ
ಯ0\(YHQWಯ

5(6(7
-2*
'580B(1
/67B67(3
(9(17

287
4
287B:25'
(55B&2'(

ಯ0\2XWSXWಯ
ಯ7DJB2XWSXWB4ಯ
ಯ7DJB2XWSXWB:25'ಯ
ಯ7DJB(UURU&RGHಯ

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.

Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para asignar valores a los parámetros de
entrada:
Parámetro

970

Operando

Dirección

Valor

RESET

Tag_Reset

M0.0

FALSE

JOG

Tag_Input_JOG

M0.1

FALSE

DRUM_EN

Tag_Input_DrumEN

M0.2

TRUE

LST_STEP

Tag_Number_LastStep

MB1

B#16#08

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Operando

Dirección

Valor

EVENT2

MyTag_Event_2

M20.0

FALSE

EVENT4

MyTag_Event_4

M20.1

FALSE

EVENT6

MyTag_Event_6

M20.2

FALSE

EVENT8

MyTag_Event_8

M20.3

FALSE

EVENT10

MyTag_Event_10

M20.4

FALSE

EVENT12

MyTag_Event_12

M20.5

FALSE

EVENT14

MyTag_Event_14

M20.6

FALSE

EVENT16

MyTag_Event_16

M20.7

FALSE

En el bloque de datos de instancia "DRUM_DB" de la instrucción se guardan los siguientes
valores:
Parámetro

Dirección

Valor

JOG_HIS

DBX12.0

FALSE

EOD

DBX12.1

FALSE

DSP

DBB13

W#16#0001

DSC

DBB14

W#16#0001

DCC

DBD16

DW#16#0000000A

DTBP

DBW20

W#16#0001

S_PRESET[1]

DBW26

W#16#0064

S_PRESET[2]

DBW28

W#16#00C8

OUT_VAL[1,0]

DBX58.0

TRUE

OUT_VAL[1,1]

DBX58.1

TRUE

OUT_VAL[1,2]

DBX58.2

TRUE

OUT_VAL[1,3]

DBX58.3

TRUE

OUT_VAL[1,4]

DBX58.4

TRUE

OUT_VAL[1,5]

DBX58.5

TRUE

OUT_VAL[1,6]

DBX58.6

TRUE

OUT_VAL[1,7]

DBX58.7

TRUE

OUT_VAL[1,8]

DBX59.0

TRUE

OUT_VAL[1,9]

DBX59.1

TRUE

OUT_VAL[1,10]

DBX59.2

TRUE

OUT_VAL[1,11]

DBX59.3

TRUE

OUT_VAL[1,12]

DBX59.4

TRUE

OUT_VAL[1,13]

DBX59.5

TRUE

OUT_VAL[1,14]

DBX59.6

TRUE

OUT_VAL[1,15]

DBX59.7

TRUE

OUT_VAL[2,0]

DBX60.0

FALSE

OUT_VAL[2,1]

DBX60.1

FALSE

OUT_VAL[2,2]

DBX60.2

FALSE

OUT_VAL[2,3]

DBX60.3

FALSE

OUT_VAL[2,4]

DBX60.4

FALSE

OUT_VAL[2,5]

DBX60.5

FALSE

OUT_VAL[2,6]

DBX60.6

FALSE

Programación del PLC
Manual de programación y manejo, 11/2019

971

Instrucciones
4.1 Instrucciones
Parámetro

Dirección

Valor

OUT_VAL[2,7]

DBX60.7

FALSE

OUT_VAL[2,8]

DBX61.0

FALSE

OUT_VAL[2,9]

DBX61.1

FALSE

OUT_VAL[2,10]

DBX61.2

FALSE

OUT_VAL[2,11]

DBX61.3

FALSE

OUT_VAL[2,12]

DBX61.4

FALSE

OUT_VAL[2,13]

DBX61.5

FALSE

OUT_VAL[2,14]

DBX61.6

FALSE

OUT_VAL[2,15]

DBX61.7

FALSE

S_MASK[2,0]

DBX92.0

FALSE

S_MASK[2,1]

DBX92.1

TRUE

S_MASK[2,2]

DBX92.2

TRUE

S_MASK[2,3]

DBX92.3

TRUE

S_MASK[2,4]

DBX92.4

TRUE

S_MASK[2,5]

DBX92.5

FALSE

S_MASK[2,6]

DBX92.6

TRUE

S_MASK[2,7]

DBX92.7

TRUE

S_MASK[2,8]

DBX93.0

FALSE

S_MASK[2,9]

DBX93.1

FALSE

S_MASK[2,10]

DBX93.2

TRUE

S_MASK[2,11]

DBX93.3

TRUE

S_MASK[2,12]

DBX93.4

TRUE

S_MASK[2,13]

DBX93.5

TRUE

S_MASK[2,14]

DBX93.6

FALSE

S_MASK[2,15]

DBX93.7

TRUE

Los parámetros de salida tienen los valores siguientes antes de ejecutarse la instrucción:

972

Parámetro

Operando

Dirección

Valor

Q

Tag_Output_Q

M6.0

FALSE

OUTWORD

Tag_OutputWord

MW8

W#16#FFFF

OUT1

MyTag_Output_1

M4.0

TRUE

OUT2

MyTag_Output_2

M4.1

TRUE

OUT3

MyTag_Output_3

M4.2

TRUE

OUT4

MyTag_Output_4

M4.3

TRUE

OUT5

MyTag_Output_5

M4.4

TRUE

OUT6

MyTag_Output_6

M4.5

TRUE

OUT7

MyTag_Output_7

M4.6

TRUE

OUT8

MyTag_Output_8

M4.7

TRUE

OUT9

MyTag_Output_9

M5.0

TRUE

OUT10

MyTag_Output_10

M5.1

TRUE

OUT11

MyTag_Output_11

M5.2

TRUE

OUT12

MyTag_Output_12

M5.3

TRUE

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Operando

Dirección

Valor

OUT13

MyTag_Output_13

M5.4

TRUE

OUT14

MyTag_Output_14

M5.5

TRUE

OUT15

MyTag_Output_15

M5.6

TRUE

OUT16

MyTag_Output_16

M5.7

TRUE

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Dirección

Valor

OUT1

MyTag_Output_1

M4.0

TRUE

OUT2

MyTag_Output_2

M4.1

FALSE

OUT3

MyTag_Output_3

M4.2

FALSE

OUT4

MyTag_Output_4

M4.3

FALSE

OUT5

MyTag_Output_5

M4.4

FALSE

OUT6

MyTag_Output_6

M4.5

TRUE

OUT7

MyTag_Output_7

M4.6

FALSE

OUT8

MyTag_Output_8

M4.7

FALSE

OUT9

MyTag_Output_9

M5.0

TRUE

OUT10

MyTag_Output_10

M5.1

TRUE

OUT11

MyTag_Output_11

M5.2

FALSE

OUT12

MyTag_Output_12

M5.3

FALSE

OUT13

MyTag_Output_13

M5.4

FALSE

OUT14

MyTag_Output_14

M5.5

FALSE

OUT15

MyTag_Output_15

M5.6

TRUE

OUT16

MyTag_Output_16

M5.7

FALSE

Q

Tag_Output_Q

M6.0

FALSE

OUTWORD

Tag_OutputWord

MW8

W#16#4321

ERR_CODE

Tag_ErrorCode

MW10

W#16#0000

Los siguientes valores se modifican en el bloque de datos de instancia "DRUM_DB" de la
instrucción después de su ejecución:
Parámetro

Dirección

Valor

JOG_HIS

DBX12.0

FALSE

EOD

DBX12.1

FALSE

DSC

DBB14

W#16#0002

DCC

DBD16

DW#16#000000C8

Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Programación del PLC
Manual de programación y manejo, 11/2019

973

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Principios básicos de KOP (Página 7943)

DCAT: Alarma de tiempo para control discreto
Descripción
La instrucción "Alarma de tiempo para control discreto" acumula el tiempo desde el instante en
el que el parámetro CMD da la orden de abrir o cerrar. El tiempo se acumula hasta excederse
el tiempo predeterminado (PT) o hasta recibir la notificación de que el dispositivo se ha cerrado
o abierto dentro del tiempo prescrito (O_FB o C_FB). Si se excede el tiempo predeterminado
antes de recibirse la notificación de que se ha abierto o cerrado el dispositivo, se activa la
alarma correspondiente. Si el estado lógico de la entrada de la orden cambia antes del tiempo
predeterminado, se reinicia el tiempo.
La instrucción "Alarma de tiempo para control discreto" tiene las reacciones siguientes en las
condiciones de entrada:
● Si el estado lógico del parámetro CMD cambia de "0" a "1", esto tiene los efectos siguientes
en los estados lógicos de los parámetros Q, CMD_HIS, ET (solo si ET < PT), OA y CA:
– Los parámetros Q y CMD_HIS se ponen a "1".
– Los parámetros ET, OA y CA se ponen a "0".
● Si el estado lógico del parámetro CMD cambia de "1" a "0", los parámetros Q, ET (solo si
ET < PT), OA, CA y CMD_HIS se ponen a "0".
● Si los parámetros CMD y CMD_HIS tienen el estado lógico "1" y el parámetro O_FB se pone
a "0", la diferencia de tiempo (ms) desde la última ejecución de la instrucción se suma al
valor del parámetro ET. Si el valor del parámetro ET excede el del parámetro PT, el estado
lógico del parámetro OA se pone a "1". Si el valor del parámetro ET no excede el del
parámetro PT, el estado lógico del parámetro OA se pone a "0". El valor del parámetro
CMD_HIS se pone al del parámetro CMD.
● Si los estados lógicos de los parámetros CMD, CMD_HIS y O_FB están a "1" y el parámetro
C_FB devuelve el valor "0", el estado lógico del parámetro OA se pone a "0". El valor del
parámetro ET se pone al del parámetro PT. Si el estado lógico del parámetro O_FB cambia
a "0", se activa la alarma en la siguiente ejecución de la instrucción. El valor del parámetro
CMD_HIS se pone al del parámetro CMD.
● Si los parámetros CMD, CMD_HIS y C_FB devuelven "0", la diferencia de tiempo (ms)
desde la última ejecución de la instrucción se suma al valor del parámetro ET. Si el valor del
parámetro ET excede el del parámetro PT, el estado lógico del parámetro CA se pone a "1".
Si no se excede el valor del parámetro PT, el parámetro CA devuelve el estado lógico "0".
El valor del parámetro CMD_HIS se pone al del parámetro CMD.

974

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
● Si los parámetros CMD, CMD_HIS y O_FB devuelven el estado lógico "0" y el parámetro
C_FB está a "1", el parámetro CA se pone a "0". El valor del parámetro ET se pone al del
parámetro PT. Si el estado lógico del parámetro C_FB cambia a "0", se activa la alarma en
la siguiente ejecución de la instrucción. El valor del parámetro CMD_HIS se pone al del
parámetro CMD.
● Si los parámetros O_FB y C_FB devuelven simultáneamente el estado lógico "1", los
estados lógicos de ambas salidas de alarma se ponen a "1".
La instrucción "Alarma de tiempo para control discreto" no devuelve información de error.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Alarma de tiempo para control
discreto":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

CMD

Input

BOOL

I, Q, M, D, L o
constante

El estado lógico "0" da la or‐
den de "Cerrar".
El estado lógico "1" da la or‐
den de "Abrir".

O_FB

Input

BOOL

I, Q, M, D, L o
constante

Entrada de respuesta al abrir

C_FB

Input

BOOL

I, Q, M, D, L o
constante

Entrada de respuesta al ce‐
rrar

Q

Output

BOOL

I, Q, M, D, L

Indica el estado del paráme‐
tro CMD

OA

Output

BOOL

I, Q, M, D, L

Salida de alarma al abrir

CA

Output

BOOL

I, Q, M, D, L

Salida de alarma al cerrar

ET

Static

DINT

D, L o constante

Tiempo actual transcurrido;
un ciclo de reloj = 1 ms

PT

Static

DINT

D, L o constante

Valor de tiempo predetermi‐
nado; un ciclo de reloj = 1 ms

PREV_TIME

Static

DWORD

D, L o constante

Hora de sistema anterior

CMD_HIS

Static

BOOL

D, L o constante

Bit de evolución de CMD

Ejemplo
En el ejemplo siguiente, el parámetro CMD cambia de "0" a "1". Una vez ejecutada la
instrucción, el parámetro Q se pone a "1" y las dos salidas de alarma OA y CA se ponen a "0".
El parámetro CMD_HIS del bloque de datos de instancia se pone a "1" y el parámetro ET se
pone a "0".
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.

Programación del PLC
Manual de programación y manejo, 11/2019

975

Instrucciones
4.1 Instrucciones
ಯ'&$7B'%ಯ
'&$7

ಯ7DJ,Qಯ
(1

ಯ7DJ2XWಯ
(12

ಯ7DJB,QSXWB&0'ಯ
&0'

4

ಯ7DJB2XWSXWB4ಯ

ಯ7DJB,QSXWB2B)%ಯ
2B)%

2$

ಯ7DJB2XWSXWB2$ಯ

&B)%

&$

ಯ7DJB2XWSXWB&$ಯ

ಯ7DJB,QSXWB&B)%ಯ

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.
Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada y salida:
Parámetro

Operando

Valor

CMD

Tag_Input_CMD

TRUE

O_FB

Tag_Input_O_FB

FALSE

C_FB

Tag_Input_C_FB

FALSE

Q

Tag_Output_Q

FALSE

OA

Tag_Output_OA

FALSE

CA

Tag_Output_CA

FALSE

En el bloque de datos de instancia "DCAT_DB" de la instrucción se guardan los siguientes
valores:
Parámetro

Dirección

Valor

ET

DBD4

L#12

PT

DBD8

L#222

CMD_HIS

DBX16.0

FALSE

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Valor

Q

Tag_Output_Q

TRUE

OA

Tag_Output_OA

FALSE

CA

Tag_Output_CA

FALSE

En el bloque de datos de instancia "DCAT_DB" de la instrucción se guardan los siguientes
valores:
Parámetro

976

Dirección

Valor

ET

DBD4

L#0

CMD_HIS

DBX16.0

TRUE

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

MCAT: Alarma de tiempo para control del motor
Descripción
La instrucción "Alarma de tiempo para control del motor" acumula el tiempo desde el instante
en el que se activa una de las entradas de comando (abrir o cerrar). El tiempo se acumula hasta
que se excede el tiempo predeterminado o hasta que la entrada de realimentación
correspondiente indica que el dispositivo ha ejecutado la operación solicitada dentro del
tiempo prescrito. Si se excede el tiempo predeterminado antes de recibir respuesta, se dispara
la alarma correspondiente.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Alarma de tiempo para control del
motor":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

O_CMD

Input

BOOL

I, Q, M, D, L o
constante

Entrada del comando "Abrir"

C_CMD

Input

BOOL

I, Q, M, D, L o
constante

Entrada del comando "Ce‐
rrar"

S_CMD

Input

BOOL

I, Q, M, D, L o
constante

Entrada del comando "Parar"

O_FB

Input

BOOL

I, Q, M, D, L o
constante

Entrada de respuesta al abrir

C_FB

Input

BOOL

I, Q, M, D, L o
constante

Entrada de respuesta al ce‐
rrar

OO

Output

BOOL

I, Q, M, D, L

Salida "Abrir"

CO

Output

BOOL

I, Q, M, D, L

Salida "Cerrar"

OA

Output

BOOL

I, Q, M, D, L

Salida de alarma al abrir

CA

Output

BOOL

I, Q, M, D, L

Salida de alarma al cerrar

Q

Output

BOOL

I, Q, M, D, L

El estado lógico "0" indica
una condición de error.

ET

Static

DINT

D, L o constante

Tiempo actual transcurrido;
un ciclo de reloj = 1 ms

Programación del PLC
Manual de programación y manejo, 11/2019

977

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

PT

Static

DINT

D, L o constante

Valor de tiempo predetermi‐
nado; un ciclo de reloj = 1 ms

PREV_TIME

Static

DWORD

D, L o constante

Hora de sistema anterior

O_HIS

Static

BOOL

D, L o constante

Bit de evolución "Abrir"

C_HIS

Static

BOOL

D, L o constante

Bit de evolución "Cerrar"

Ejecución de la instrucción "Alarma de tiempo para control del motor"
La tabla siguiente muestra las reacciones de la instrucción "Alarma de tiempo para control del
motor" a las distintas condiciones de entrada:
Parámetros de entrada

Parámetros de salida

ET

O_H
IS

C_H
IS

O_C
MD

C_C
MD

S_C
MD

O_F
B

C_F
B

OO

CO

OA

CA

ET

O_H
IS

C_HI Q
S

Estado

X

1

1

X

X

X

X

X

0

0

1

1

PT

0

0

Alarma

X

X

X

X

X

X

1

1

0

0

1

1

PT

0

0

0

Alarma

X

X

X

X

X

1

X

X

0

0

0

0

X

0

0

1

Stop

X

X

X

1

1

X

X

X

0

0

0

0

X

0

0

1

Stop

X

0

X

1

0

0

X

X

1

0

0

0

0

1

0

1

Empezar a
abrir

<PT

1

0

X

0

0

0

X

1

0

0

0

INC

1

0

1

Abrir

X

1

0

X

0

0

1

0

0

0

0

0

PT

1

0

1

Abierto

>=
PT

1

0

X

0

0

0

X

0

0

1

0

PT

1

0

0

Abrir alarma

X

X

0

0

1

0

X

X

0

1

0

0

0

0

1

1

Empezar a
cerrar

< PT 0

1

0

X

0

X

0

0

1

0

0

INC

0

1

1

Cerrar

X

0

1

0

X

0

0

1

0

0

0

0

PT

0

1

1

Cerrado

>=
PT

0

1

0

X

0

X

0

0

0

0

1

PT

0

1

0

Cerrar alar‐
ma

X

0

0

0

0

0

X

X

0

0

0

0

X

0

0

1

Parado

0

Leyenda:
INC

Sumar a ET la diferencia de tiempo (en ms) desde la última ejecución del FB

PT

PT se pone al mismo valor que ET

X

No aplicable

< PT

ET < PT

978

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetros de entrada
>= PT

Parámetros de salida

ET >= PT

Si los parámetros de entrada O_HIS y C_HIS tienen el estado lógico "1", se ponen inmediatamente al estado lógico "0". En
este caso se aplica la última fila de la tabla mencionada más arriba (X). Puesto que por este motivo no es posible comprobar
si los parámetros de entrada O_HIS y C_HIS tienen el estado lógico "1", en este caso se asigna el siguiente valor a los
parámetros de salida:
OO = FALSE
CO = FALSE
OA = FALSE
CA = FALSE
ET = PT
Q = TRUE

La instrucción "Alarma de tiempo para control del motor" no devuelve información de error.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.
ಯ0&$7B'%ಯ
ಯ7DJ,Qಯ

0&$7
(1

ಯ7DJ2XWಯ

(12

ಯ7DJB,QSXWB2B&0'ಯ
2B&0'

22

ಯ7DJB2XWSXW2SHQಯ

&B&0'

&2

ಯ7DJB2XWSXW&ORVHGಯ

6B&0'

2$

ಯ7DJB2XWSXWB2$ಯ

2B)%

&$

ಯ7DJB2XWSXWB&$ಯ

&B)%

4

ಯ7DJB2XWSXWB4ಯ

ಯ7DJB,QSXWB&B&0'ಯ
ಯ7DJB,QSXWB6B&0'ಯ
ಯ7DJB,QSXWB2B)%ಯ
ಯ7DJB,QSXWB&B)%ಯ

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.
Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada y salida:
Parámetro

Operando

Valor

O_CMD

Tag_Input_O_CMD

TRUE

C_CMD

Tag_Input_C_CMD

FALSE

S_CMD

Tag_Input_S_CMD

FALSE

Programación del PLC
Manual de programación y manejo, 11/2019

979

Instrucciones
4.1 Instrucciones
Parámetro

Operando

Valor

O_FB

Tag_Input_O_FB

FALSE

C_FB

Tag_Input_C_FB

FALSE

OO

Tag_OutputOpen

FALSE

CO

Tag_OutputClosed

FALSE

OA

Tag_Output_OA

FALSE

CA

Tag_Output_CA

FALSE

Q

Tag_Output_Q

FALSE

En el bloque de datos de instancia "MCAT_DB" de la instrucción se guardan los siguientes
valores:
Parámetro

Dirección

Valor

ET

DBD4

L#2

PT

DBD8

L#22

O_HIS

DBX16.0

TRUE

C_HIS

DBX16.1

FALSE

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Valor

OO

Tag_OutputOpen

TRUE

CO

Tag_OutputClosed

FALSE

OA

Tag_Output_OA

FALSE

CA

Tag_Output_CA

FALSE

Q

Tag_Output_Q

TRUE

En el bloque de datos de instancia "MCAT_DB" de la instrucción se guardan los siguientes
valores:
Parámetro

Dirección

Valor

ET

DBD4

L#0

O_HIS

DBX16.0

TRUE

CMD_HIS

DBX16.1

FALSE

Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

980

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

IMC: Comparar bits de entrada con bits de una máscara
Descripción
La instrucción "Comparar bits de entrada con bits de una máscara" compara el estado lógico
de hasta 16 bits de entrada programados (IN_BIT0 a IN_BIT15) con el bit correspondiente de
una máscara. Es posible programar como máximo 16 pasos con máscaras. El valor del
parámetro IN_BIT0 se compara con el valor de la máscara CMP_VAL[x,0], siendo "x" el
número del paso. El número del paso de la máscara utilizada para la comparación se define en
el parámetro CMP_STEP. De esta misma manera se comparan todos los valores
programados. Los bits de entrada no programados o los bits no programados de la máscara
tienen el estado lógico predeterminado FALSE.
Si se encuentra una coincidencia al realizar la comparación, el estado lógico del parámetro
OUT se pone a "1". De lo contrario, el parámetro OUT se pone a "0".
Si el valor del parámetro CMP_STEP es mayor que 15, no se ejecuta la instrucción. En el
parámetro ERR_CODE se emite un mensaje de error.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Comparar bits de entrada con bits
de una máscara":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN_BIT0

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 0 se compa‐
ra con el bit 0 de la máscara.

IN_BIT1

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 1 se compa‐
ra con el bit 1 de la máscara.

IN_BIT2

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 2 se compa‐
ra con el bit 2 de la máscara.

IN_BIT3

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 3 se compa‐
ra con el bit 3 de la máscara.

IN_BIT4

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 4 se compa‐
ra con el bit 4 de la máscara.

IN_BIT5

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 5 se compa‐
ra con el bit 5 de la máscara.

IN_BIT6

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 6 se compa‐
ra con el bit 6 de la máscara.

IN_BIT7

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 7 se compa‐
ra con el bit 7 de la máscara.

IN_BIT8

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 8 se compa‐
ra con el bit 8 de la máscara.

IN_BIT9

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 9 se compa‐
ra con el bit 9 de la máscara.

IN_BIT10

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 10 se com‐
para con el bit 10 de la más‐
cara.

Programación del PLC
Manual de programación y manejo, 11/2019

981

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN_BIT11

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 11 se com‐
para con el bit 11 de la más‐
cara.

IN_BIT12

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 12 se com‐
para con el bit 12 de la más‐
cara.

IN_BIT13

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 13 se com‐
para con el bit 13 de la más‐
cara.

IN_BIT14

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 14 se com‐
para con el bit 14 de la más‐
cara.

IN_BIT15

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 15 se com‐
para con el bit 15 de la más‐
cara.

CMP_STEP

Input

BYTE

I, Q, M, D, L, P o
constante

Número de paso de la más‐
cara con la que se compara.

OUT

Output

BOOL

I, Q, M, D, L

El estado lógico "1" indica
que se ha encontrado una
coincidencia.
El estado lógico "0" indica
que no se ha encontrado nin‐
guna coincidencia.

ERR_CODE

Output

WORD

I, Q, M, D, L, P

Información de error

CMP_VAL

Static

ARRAY OF
WORD

I, Q, M, D, L o
constante

Máscaras de comparación [0
a 15, 0 a 15]: El primer núme‐
ro del índice es el número del
paso y, el segundo, el núme‐
ro de bit de la máscara.

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

000A

El valor del parámetro CMP_STEP es mayor que 15.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

982

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)

SMC: Barrido de matriz
Descripción
La instrucción "Barrido de matriz" compara el estado lógico de hasta 16 bits de entrada
programados (IN_BIT0 a IN_BIT15) con los bits correspondientes de las máscaras de
comparación de cada paso. La ejecución empieza por el paso 1 y continúa hasta el último paso
programado (LAST) o hasta que se encuentre una correspondencia. El bit de entrada del
parámetro IN_BIT0 se compara con el valor de la máscara CMP_VAL[x,0], siendo "x" el
número de paso. De esta misma manera se comparan todos los valores programados. Si se
encuentra una correspondencia, el estado lógico del parámetro OUT se pone a "1" y el número
de paso se escribe con la máscara correspondiente en el parámetro OUT_STEP. Los bits de
entrada no programados o los bits no programados de la máscara tienen el estado lógico
predeterminado FALSE. Si varios pasos tienen una máscara equivalente, se indica solo la
primera correspondencia encontrada en el parámetro OUT_STEP. Si no se encuentra ninguna
correspondencia, el estado lógico del parámetro OUT se pone a "0". En este caso, el valor del
parámetro OUT_STEP excede en "1" el valor del parámetro LAST.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Barrido de matriz":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN_BIT0

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 0 se compa‐
ra con el bit 0 de la máscara.

IN_BIT1

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 1 se compa‐
ra con el bit 1 de la máscara.

IN_BIT2

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 2 se compa‐
ra con el bit 2 de la máscara.

IN_BIT3

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 3 se compa‐
ra con el bit 3 de la máscara.

IN_BIT4

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 4 se compa‐
ra con el bit 4 de la máscara.

IN_BIT5

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 5 se compa‐
ra con el bit 5 de la máscara.

IN_BIT6

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 6 se compa‐
ra con el bit 6 de la máscara.

IN_BIT7

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 7 se compa‐
ra con el bit 7 de la máscara.

Programación del PLC
Manual de programación y manejo, 11/2019

983

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN_BIT8

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 8 se compa‐
ra con el bit 8 de la máscara.

IN_BIT9

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 9 se compa‐
ra con el bit 9 de la máscara.

IN_BIT10

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 10 se com‐
para con el bit 10 de la más‐
cara.

IN_BIT11

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 11 se com‐
para con el bit 11 de la más‐
cara.

IN_BIT12

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 12 se com‐
para con el bit 12 de la más‐
cara.

IN_BIT13

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 13 se com‐
para con el bit 13 de la más‐
cara.

IN_BIT14

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 14 se com‐
para con el bit 14 de la más‐
cara.

IN_BIT15

Input

BOOL

I, Q, M, D, L o
constante

El bit de entrada 15 se com‐
para con el bit 15 de la más‐
cara.

OUT

Output

BOOL

I, Q, M, D, L

El estado lógico "1" indica
que se ha encontrado una
correspondencia.
El estado lógico "0" indica
que no se ha encontrado nin‐
guna correspondencia.

984

ERR_CODE

Output

WORD

I, Q, M, D, L, P

Información de error

OUT_STEP

Output

BYTE

I, Q, M, D, L, P

Contiene el número de paso
con la máscara correspon‐
diente o el número de paso
que excede en "1" el valor del
parámetro LAST, si no se ha
encontrado ninguna corres‐
pondencia.

LAST

Static

BYTE

I, Q, M, D, L, P o
constante

Indica el número del último
paso en que se tiene que
buscar una máscara corres‐
pondiente.

CMP_VAL

Static

ARRAY OF
WORD

I, Q, M, D, L o
constante

Máscaras de comparación [0
a 15, 0 a 15]: El primer núme‐
ro del índice es el número del
paso y, el segundo, el núme‐
ro de bit de la máscara.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

000E

El valor del parámetro LAST es mayor que 15.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Principios básicos de KOP (Página 7943)

LEAD_LAG: Algoritmo Lead y Lag
Descripción
La instrucción "Algoritmo Lead y Lag" procesa señales con una variable analógica. El valor de
la ganancia en el parámetro GAIN debe ser mayor que cero. El resultado de la instrucción
"Algoritmo Lead y Lag" se calcula con la siguiente ecuación:
287

/*B7,0(
/'B7,0(6$03/(B7
/'B7,0(
,1*$,1
35(9B287*$,1
/*B7,0(6$03/(B7
/*B7,0(6$03/(B7
/*B7,0(6$03/(B7

35(9B,1

La instrucción "Algoritmo Lead y Lag" solo devuelve resultados relevantes cuando se ejecuta
en ciclos de programa fijos. Deben indicarse las mismas unidades en los parámetros
LD_TIME, LG_TIME y SAMPLE_T. Si LG_TIME > 4 + SAMPLE_T, la instrucción se aproxima
a la siguiente función:
OUT = GAIN * ((1 + LD_TIME * s) / (1 + LG_TIME * s)) * IN
Si el valor del parámetro GAIN es menor o igual a cero, no se realiza el cálculo y el parámetro
ERR_CODE devuelve una información de error.
La instrucción "Algoritmo Lead y Lag" puede utilizarse junto con bucles para la compensación
en el control anticipativo. La instrucción comprende dos operaciones. La operación "Lead"
desplaza la fase de la salida OUT, anticipándose la salida a la entrada. En cambio, la operación
"Lag" desplaza la salida, de manera que la salida sigue a la entrada. Puesto que la operación
"Lag" equivale a una integración, puede utilizarse para suprimir perturbaciones o como filtro
pasa bajo. La operación "Lead" equivale a una acción diferencial, por lo que puede utilizarse
como un filtro de paso alto. La combinación de ambas operaciones (Lead y Lag) hace que la

Programación del PLC
Manual de programación y manejo, 11/2019

985

Instrucciones
4.1 Instrucciones
fase de salida siga a la entrada a bajas frecuencias y se le anticipe a altas frecuencias. Por este
motivo, la instrucción "Algoritmo Lead y Lag" puede utilizarse como si fuera un filtro de paso de
banda.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Algoritmo Lead y Lag":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habili‐
tación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilita‐
ción

IN

Input

REAL

I, Q, M, D, L, P o
constante

Valor de entrada
del tiempo de
muestreo actual
(tiempo de ciclo)
que se procesa.
En el parámetro IN
también se pue‐
den indicar cons‐
tantes.

SAMPLE_T

Input

INT

I, Q, M, D, L, P o
constante

Tiempo de mues‐
treo
En el parámetro
SAMPLE_T tam‐
bién se pueden in‐
dicar constantes.

986

OUT

Output

REAL

I, Q, M, D, L

Resultado de la
instrucción

ERR_CODE

Output

WORD

I, Q, M, D, L

Información de
error

LD_TIME

Static

REAL

I, Q, M, D, L, P o
constante

Tiempo de antici‐
pación en la mis‐
ma unidad que el
tiempo de mues‐
treo.

LG_TIME

Static

REAL

I, Q, M, D, L, P o
constante

Tiempo de retardo
de fase en la mis‐
ma unidad que el
tiempo de mues‐
treo.

GAIN

Static

REAL

I, Q, M, D, L, P o
constante

Ganancia en % /
% (relación del
cambio en la sali‐
da con respecto al
cambio en la entra‐
da como estado
constante).

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

PREV_IN

Static

REAL

I, Q, M, D, L, P o
constante

Entrada anterior

PREV_OUT

Static

REAL

I, Q, M, D, L, P o
constante

Salida anterior

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

0009

El valor del parámetro GAIN es menor o igual a cero.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.
ಯ/($'B/$*B'%ಯ
/($'B/$*
ಯ7DJ,Qಯ

ಯ7DJB,QSXWಯ
ಯ7DJB,QSXWB6$03/(B7ಯ

ಯ7DJ2XWಯ
(1

(12

,1

287

6$03/(B7

(55B&2'(

ಯ7DJB2XWSXWB5HVXOWಯ
ಯ7DJB(UURU&RGHಯ

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.
Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada:
Parámetro

Operando

Valor

IN

Tag_Input

2.0

SAMPLE_T

Tag_InputSampleTime

10

Programación del PLC
Manual de programación y manejo, 11/2019

987

Instrucciones
4.1 Instrucciones
En el bloque de datos de instancia "LEAD_LAG_DB" de la instrucción se guardan los
siguientes valores:
Parámetro

Dirección

Valor

LD_TIME

DBD12

2.0

LG_TIME

DBD16

2.0

GAIN

DBD20

1.0

PREV_IN

DBD24

6.0

PREV_OUT

DBD28

6.0

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Valor

OUT

Tag_Output_Result

2.0

Los siguientes valores se guardan en el bloque de datos de instancia LEAD_LAD_DB de la
instrucción:
Parámetro

Operando

Valor

PREV_IN

DBD24

2.0

PREV_OUT

DBD28

2.0

Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Principios básicos de KOP (Página 7943)

SEG: Generar patrón de bits para el display de 7 segmentos
Descripción
La instrucción "Generar patrón de bits para el display de 7 segmentos" permite convertir cada
una de las cuatro cifras hexadecimales de la palabra de origen indicada (IN) en un patrón de
bits equivalente para un display de 7 segmentos. El resultado de la instrucción se devuelve en
la palabra doble del parámetro OUT.

988

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Entre las cifras hexadecimales y la ocupación de los 7 segmentos (a, b, c, d, e, f, g) existe la
siguiente relación:
Cifra de en‐
trada
(binaria)
0000
0001
0010
0011
0100
0101
0110
0111
1000
1001
1010
1011
1100
1101
1110
1111

Ocupación de
los segmentos
‑gfedcba
00111111
00000110
01011011
01001111
01100110
01101101
01111101
00000111
01111111
01100111
01110111
01111100
00111001
01011110
01111001
01110001

Display
Display de siete segmentos
(hexadecimal)
0
1
2
3
4
5
6
7
8
9
A
B
C
D
E
F

D
I

E
J

H

F
G

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Generar patrón de bits para el
display de 7 segmentos":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

WORD

I, Q, M, D, L, P o
constante

Palabra de origen con cuatro
cifras hexadecimales

OUT

Output

DWORD

I, Q, M, D, L, P

Patrón de bits para el display
de 7 segmentos

Programación del PLC
Manual de programación y manejo, 11/2019

989

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6(*
ಯ7DJ,Qಯ

ಯ7DJ2XWಯ

ಯ7DJB,QSXWಯ

(1

(12

,1

287

ಯ7DJB2XWSXWಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

Hexadecimal

Binario

IN

Tag_Input

W#16#1234

0001 0010 0011 0100

OUT

Tag_Output

DW#16065B4F66

000 00110 0101 1011 0100
1111 0110 0110
Visualización: 1234

Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de KOP (Página 7943)

BCDCPL: Generar complemento a diez
Descripción
La instrucción "Generar complemento a diez" crea el complemento a diez de un número BCD
de siete dígitos que se indica en el parámetro IN. La instrucción realiza el cálculo con la
siguiente fórmula matemática:
10000000 (como BCD)
– Valor BCD de 7 dígitos
---------------------------------------Complemento a diez (como BCD)

990

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Generar complemento a diez":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Secuencias de bits I, Q, M, D, L, P o
constante

Número BCD de 7 dígitos

ERR_CODE

Output

DWORD

Resultado de la instrucción

I, Q, M, D, L, P

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
%&'&3/
ಯ7DJ,Qಯ

ಯ7DJ2XWಯ
(1

ಯ7DJB,QSXWಯ

,1

(12
(55B&2'(

ಯ7DJB2XWSXWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores concretos:
Parámetro

Operando

Valor*

IN

Tag_Input

DW#16#01234567

ERR_CODE

Tag_Output

DW#16#08765433

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Principios básicos de KOP (Página 7943)

Programación del PLC
Manual de programación y manejo, 11/2019

991

Instrucciones
4.1 Instrucciones

BITSUM: Contar número de bits activados
Descripción
La instrucción "Contar número de bits activados" permite contar el número de bits de un
operando que tienen el estado lógico "1". El operando, cuyos bits se cuentan, se especifica en
el parámetro IN. El resultado de la instrucción se devuelve en el parámetro RET_VAL.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contar número de bits activados":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

DWORD

I, Q, M, D, L, P o
constante

Operando cuyos bits activa‐
dos se cuentan.

RET_VAL

Output

INT

I, Q, M, D, L, P

Número de bits activados

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
%,7680
ಯ7DJ,Qಯ

ಯ7DJ2XWಯ
(1

ಯ7DJB,QSXWಯ

,1

(12
5(7B9$/

ಯ7DJB2XWSXWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores concretos:
Parámetro

Operando

Valor*

IN

Tag_Input

DW#16#12345678

RET_VAL

Tag_Output

W#16#000D (13 bits)

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Encontrará información adicional y el código del programa para el ejemplo mencionado más
arriba aquí: Sample Library for Instructions (Página 615)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)

992

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de KOP (Página 7943)

4.1.3.2

FUP

Operaciones lógicas con bits
&: Operación lógica Y
Descripción
La instrucción "Operación lógica Y" permite consultar los estados lógicos de dos o más
operandos indicados y evaluarlos según la tabla de verdad Y.
Si el estado lógico de todos los operandos es "1", entonces se cumple la condición y la
instrucción da como resultado "1". Si el estado lógico de un operando es "0", no se cumple la
condición y la instrucción da como resultado "0".
Nota
Instrucciones que se muestran como "inactivas" en los operandos
En las condiciones citadas a continuación se aplica lo siguiente:
● La instrucción "Operación lógica Y" está interconectada en sus entradas con varios
comparadores (p. ej. CMP ==) del tipo de datos String, WString o Variant.
● Para la instrucción "Operación lógica Y" se obtiene el resultado fijo "FALSE" con
comparadores del mismo tipo (String, WString o Variant) con el estado lógico "FALSE".
Resultado: En modo online, los comparadores siguientes (tipo de datos String, WString o
Variant) de la interconexión se muestran como "inactivas".
Ejemplo:
Operando 1: CMP == (tipo de datos String) devuelve el estado lógico "TRUE". CMP == se
muestra como "activo".
Operando 2: CMP == (tipo de datos INT) devuelve el estado lógico "TRUE". CMP == se
muestra como "activo".
Operando 3: CMP == (tipo de datos String) devuelve el estado lógico "FALSE". CMP == se
muestra como "activo".
Operando 4: CMP == (tipo de datos String) devuelve el estado lógico "TRUE". CMP == se
muestra como "inactivo".
Resultado de la "Operación lógica Y": estado lógico "FALSE".

Programación del PLC
Manual de programación y manejo, 11/2019

993

Instrucciones
4.1 Instrucciones

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica Y":
Parámetros
<Operando>

Declaración
Input

Tipo de datos
BOOL

Área de memoria
S7-1200

S7-1500

I, Q, M, D, L
o constante

I, Q, M, D, L,
T, C o cons‐
tante

Descripción
El operando indica
el bit cuyo estado ló‐
gico se consulta.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ


ಯ7DJ2XWಯ

ಯ7DJ,QBಯ





La salida "TagOut" se activa cuando el estado lógico de los operandos "TagIn_1" y "TagIn_2"
es "1", y se desactiva cuando el estado lógico de los operandos "TagIn_1" y "TagIn_2" es "0".

Consulte también
Tabla de verdad Y (Página 995)
Ejemplo de detección del sentido de marcha de una cinta transportadora (Página 8052)
Ejemplo de control de la temperatura ambiente (Página 8060)
Vista general de los tipos de datos válidos (Página 241)
Insertar entradas y salidas adicionales en los elementos FUP (Página 8038)
Insertar entrada (Página 1000)
Ejemplo de detección del nivel de llenado de una zona de almacén (Página 8054)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)
Ejemplos de programación FUP (Página 8050)

994

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Tabla de verdad Y
Resultados lógicos
La tabla siguiente muestra los resultados que se obtienen combinando dos operandos
mediante una Y lógica:
Estado lógico del primer operan‐ Estado lógico del segundo ope‐
do
rando

Resultado lógico

1

1

1

0

1

0

1

0

0

0

0

0

Consulte también
&: Operación lógica Y (Página 993)
Vista general de los tipos de datos válidos (Página 241)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

>=1: Operación lógica O
Descripción
La instrucción "Operación lógica O" permite consultar los estados lógicos de dos o más
operandos indicados y evaluarlos según la tabla de verdad O.

Programación del PLC
Manual de programación y manejo, 11/2019

995

Instrucciones
4.1 Instrucciones
Si el estado lógico de uno de los operandos es "1", entonces se cumple la condición y la
instrucción da como resultado "1". Si el estado lógico de todos los operandos es "0", no se
cumple la condición y la instrucción da como resultado "0".
Nota
Instrucciones que se muestran como "inactivas" en los operandos
En las condiciones citadas a continuación se aplica lo siguiente:
● La instrucción "Operación lógica O" está interconectada en sus entradas con varios
comparadores (p. ej. CMP ==) del tipo de datos String, WString o Variant.
● El resultado ("TRUE") de la instrucción "Operación lógica O" ya se cumple con
comparadores del mismo tipo (String, WString o Variant) con el estado lógico "TRUE".
Resultado: En modo online, los comparadores siguientes (tipo de datos String, WString o
Variant) de la interconexión se muestran como "inactivas".
Ejemplo:
Operando 1: CMP == (tipo de datos String) devuelve el estado lógico "FALSE". CMP == se
muestra como "activo".
Operando 2: CMP == (tipo de datos String) devuelve el estado lógico "TRUE". CMP == se
muestra como "activo".
Operando 3: CMP == (tipo de datos String) devuelve el estado lógico "TRUE". CMP == se
muestra como "inactivo".
Operando 4: CMP == (tipo de datos INT) devuelve el estado lógico "TRUE". CMP == se
muestra como "activo".
Resultado de la "Operación lógica O": estado lógico "TRUE".

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica O":
Parámetro

Declaración

Tipo de datos

<Operando>

Input

BOOL

Área de memoria
S7-1200

S7-1500

I, Q, M, D,
L o cons‐
tante

I, Q, M, D, L,
T, C o cons‐
tante

Descripción
El operando indica el
bit cuyo estado lógico
se consulta.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ
ಯ7DJ,QBಯ

996

! 

ಯ7DJ2XWಯ


Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La salida "TagOut" se activa si el estado lógico del operando "TagIn_1" o del operando
"TagIn_2" es "1".

Consulte también
Tabla de verdad O (Página 997)
Ejemplo de control de una cinta transportadora (Página 8050)
Insertar entradas y salidas adicionales en los elementos FUP (Página 8038)
Vista general de los tipos de datos válidos (Página 241)
Insertar entrada (Página 1000)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)
Ejemplos de programación FUP (Página 8050)

Tabla de verdad O
Resultados lógicos
La tabla siguiente muestra los resultados que se obtienen combinando dos operandos
mediante una O lógica:
Estado lógico del primer operan‐ Estado lógico del segundo ope‐
do
rando

Resultado lógico

1

1

0

0

1

1

1

1

1

0

0

0

Consulte también
>=1: Operación lógica O (Página 995)
Vista general de los tipos de datos válidos (Página 241)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

Programación del PLC
Manual de programación y manejo, 11/2019

997

Instrucciones
4.1 Instrucciones

X: Operación lógica O-exclusiva
Descripción
La instrucción "Operación lógica O-exclusiva" permite consultar el resultado de la consulta del
estado lógico de acuerdo con la tabla de verdad O-exclusiva.
En una instrucción "Operación lógica O-exclusiva", el estado lógico es "1" si el estado lógico
de uno de los dos operandos indicados es "1". Si se consultan más de dos operandos, el
resultado lógico común es "1" si un número impar de los operandos consultados devuelve el
resultado "1".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica O-exclusiva":
Parámetro
<Operando>

Declaración
Input

Tipo de datos
BOOL

Área de memoria
S7-1200

S7-1500

I, Q, M, D,
L o cons‐
tante

I, Q, M, D,
L, T, C o
constante

Descripción
El operando indica el bit
cuyo estado lógico se
consulta.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

;

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ



La salida "TagOut" se activa si el estado lógico de uno de los operandos "TagIn_1" y "TagIn_2"
es "1". Si ambos operandos devuelven el estado lógico "1" o "0", se desactiva la salida
"TagOut".

Consulte también
Tabla de verdad O-exclusiva (Página 999)
Insertar entradas y salidas adicionales en los elementos FUP (Página 8038)
Vista general de los tipos de datos válidos (Página 241)
Insertar entrada (Página 1000)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

998

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Tabla de verdad O-exclusiva
Resultados lógicos
La tabla siguiente muestra los resultados que se obtienen combinando dos operandos
mediante una O-exclusiva lógica:
Estado lógico del primer operan‐ Estado lógico del segundo ope‐
do
rando

Resultado lógico

1

0

1

0

1

1

1

1

0

0

0

0

La tabla siguiente muestra los resultados que se obtienen combinando tres operandos
mediante una O-exclusiva lógica:
Estado lógico del primer Estado lógico del se‐
operando
gundo operando

Estado lógico del tercer
operando

Resultado lógico

1

0

0

1

0

1

1

0

0

1

0

1

1

0

1

0

0

0

1

1

1

1

0

0

1

1

1

1

0

0

0

0

Consulte también
X: Operación lógica O-exclusiva (Página 998)
Vista general de los tipos de datos válidos (Página 241)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

Programación del PLC
Manual de programación y manejo, 11/2019

999

Instrucciones
4.1 Instrucciones

Insertar entrada
Descripción
La instrucción "Insertar entrada" permite ampliar el cuadro de una de las instrucciones
siguientes con una entrada:
● "Operación lógica Y"
● "Operación lógica O"
● "Operación lógica O-exclusiva"
Ampliando el cuadro de una instrucción se puede consultar el estado lógico de varios
operandos.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Insertar entrada":
Parámetro
<Operando>

Declaración
Input

Tipo de datos
BOOL

Área de memoria
S7-1200

S7-1500

I, Q, M,
D, L o
constan‐
te

I, Q, M, D,
L, T, C o
constante

Descripción
El operando indica el bit
cuyo estado lógico se
consulta.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ
ಯ7DJ,QBಯ
ಯ7DJ,QBಯ

ಯ7DJ2XWಯ


El cuadro de la instrucción "Operación lógica Y" ha sido ampliado con una entrada adicional,
en la que se consulta el estado lógico del operando "TagIn_3". La salida "TagOut" se activa
cuando los operandos "TagIn_1", "TagIn_2" y "TagIn_3" devuelven el estado lógico "1".

Consulte también
&: Operación lógica Y (Página 993)
>=1: Operación lógica O (Página 995)
X: Operación lógica O-exclusiva (Página 998)
Vista general de los tipos de datos válidos (Página 241)
Cablear operandos en instrucciones FUP (Página 8041)

1000

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)

Invertir RLO
Descripción
La instrucción "Invertir RLO" invierte el estado lógico del resultado lógico (RLO).

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ



ಯ7DJ,QBಯ
ಯ7DJ,QBಯ
ಯ7DJ,QBಯ




! 

ಯ7DJ,QBಯ


ಯ7DJ2XWಯ


La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● La entrada "TagIn_1" y/o "TagIn_2" devuelve el estado lógico "0".
● La entrada "TagIn_3" y/o "TagIn_4" devuelve el estado lógico "0" o la entrada "TagIn_5"
devuelve el estado lógico "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplo de detección del sentido de marcha de una cinta transportadora (Página 8052)
Ejemplo de detección del nivel de llenado de una zona de almacén (Página 8054)
Ejemplo de control de la temperatura ambiente (Página 8060)
Ejemplos de programación FUP (Página 8050)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

Programación del PLC
Manual de programación y manejo, 11/2019

1001

Instrucciones
4.1 Instrucciones

=: Asignación
Descripción
La instrucción "Asignación" activa el bit de un operando indicado. Si el resultado lógico (RLO)
de la entrada del cuadro es el estado lógico "1", el operando indicado adopta el estado lógico
"1". Si el estado lógico de la entrada del cuadro es "0", el bit del operando indicado se pone a
"0".
La instrucción no afecta al RLO. El RLO de la entrada del cuadro se asigna directamente a los
operandos disponibles a través del cuadro de asignación.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Asignación":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Output

BOOL

I, Q, M, D, L

Operando al que se asigna el
RLO.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ



ಯ7DJ,QBಯ

! 
ಯ7DJ,QBಯ

ಯ7DJ2XWಯ


El operando "TagOut" en la salida de la instrucción "Asignación" se activa cuando se cumple
una de las condiciones siguientes:
● Las entradas "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● El estado lógico de la entrada "TagIn_3" es "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplo de detección del nivel de llenado de una zona de almacén (Página 8054)
Ejemplo de control de la temperatura ambiente (Página 8060)
Ejemplos de programación FUP (Página 8050)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

1002

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

/=: Negar asignación
Descripción
La instrucción "Negar asignación" invierte el resultado lógico (RLO) y lo asigna al operando
que figura sobre el cuadro. Si el RLO de la entrada del cuadro es "1", se desactiva el operando.
Si el RLO de la entrada del cuadro es "0", el operando adopta el estado lógico "1".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Negar asignación":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<operando>

Output

BOOL

I, Q, M, D, L

Operando al que se asigna el
RLO negado.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

! 

ಯ7DJ,QBಯ
ಯ7DJ2XWಯ
ಯ7DJ,QBಯ



El operando "TagOut" se desactiva cuando se cumplen las condiciones siguientes:
● El operando "TagIn_1" o "TagIn_2" tiene el estado lógico "1".
● El operando "TagIn_3" tiene el estado lógico "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

R: Desactivar salida
Descripción
La instrucción "Desactivar salida" permite poner a "0" el estado lógico de un operando indicado.
La instrucción se ejecuta solo si el resultado lógico (RLO) de la entrada del cuadro es "1". Si
el estado lógico de la entrada del cuadro es "1", el operando indicado se pone a "0". Si el RLO
de la entrada del cuadro es "0", el estado lógico del operando indicado no cambia.
Programación del PLC
Manual de programación y manejo, 11/2019

1003

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desactivar salida":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

S7-1200 S7-1500
<operando>

Output

BOOL

I, Q, M,
D, L

I, Q, M, D, L, Operando que se desac‐
T, C
tiva si el RLO = "1".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ



ಯ7DJ,QBಯ

! 
ಯ7DJ2XWಯ
ಯ7DJ,QBಯ

5

El operando "TagOut" se desactiva cuando se cumple una de las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● El operando "TagIn_3" devuelve el estado lógico "0".

Consulte también
Ejemplo de control de una cinta transportadora (Página 8050)
Ejemplo de detección del sentido de marcha de una cinta transportadora (Página 8052)
Vista general de los tipos de datos válidos (Página 241)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)
Ejemplos de programación FUP (Página 8050)

S: Activar salida
Descripción
La instrucción "Activar salida" permite poner a "1" el estado lógico de un operando indicado.
La instrucción se ejecuta solo si el resultado lógico (RLO) de la entrada del cuadro es "1". Si
el estado lógico de la entrada del cuadro es "1", el operando indicado se pone a "1". Si el RLO
de la entrada del cuadro es "0", el estado lógico del operando indicado no cambia.

1004

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Activar salida":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<operando>

Output

BOOL

I, Q, M, D, L

Operando que se activa si
RLO = "1".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:


ಯ7DJ,QBಯ
ಯ7DJ,QBಯ

! 
ಯ7DJ2XWಯ
ಯ7DJ,QBಯ

6

El operando "TagOut" se activa cuando se cumple una de las condiciones siguientes:
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".
● El operando "TagIn_3" devuelve el estado lógico "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplo de detección del sentido de marcha de una cinta transportadora (Página 8052)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)
Ejemplos de programación FUP (Página 8050)

SET_BF: Activar mapa de bits
Descripción
La instrucción "Activar mapa de bits" activa varios bits a partir de una dirección específica.
El número de bits que deben desactivarse se determina mediante el valor de la constante en
la entrada N. La dirección del primer bit que debe activarse viene dada por el <Operando>. El
valor del <Operando> no puede ser mayor que el número de bits de un byte seleccionado. Si
es mayor, la instrucción no se ejecuta y aparece el mensaje de error "Se ha excedido el índice
<Operando1>". Los bits permanecen activados hasta que son desactivados explícitamente
por otra instrucción.
La instrucción se ejecuta sólo cuando el estado lógico de la entrada de habilitación EN es "1".

Programación del PLC
Manual de programación y manejo, 11/2019

1005

Instrucciones
4.1 Instrucciones

Mapas de bits del tipo de datos PLC, STRUCT o ARRAY
En estructuras del tipo de datos PLC, STRUCT o ARRAY se activan como máximo tantos bits
como contiene la estructura:
● Si se indica el valor "20" en la entrada N, por ejemplo, y la estructura solo contiene 10 bits,
solo se activarán esos 10 bits.
● Si se indica el valor "5" en la entrada N, por ejemplo, y la estructura contiene 10 bits, se
activarán exactamente 5 bits.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Activar mapa de bits":
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

Descripción

S7-1500

EN

Input

BOOL

I, Q, M,
I, Q, M, D, L,
D, L o
T, C o cons‐
constante tante

Entrada de habilitación

N

Input

UINT

Constan‐
te

Constante

Número de bits que de‐
ben activarse

<Operando>

Output

BOOL

I, Q, M

I, Q, M

En un DB
o un IDB,
un ele‐
mento de
ARRAY[..
] of BOOL

En un DB o
un IDB, un
elemento de
ARRAY[..] of
BOOL

Puntero al primer bit
que debe activarse.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ0\'%ಯ0\%RRO$UUD\>@

ಯ7DJ,QBಯ

6(7B%)
(1


1

Si los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1", se activan 5 bits a partir
de la dirección del operando "MyDB".MyBoolArray[4].

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

1006

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

RESET_BF: Desactivar mapa de bits
Descripción
La instrucción "Desactivar mapa de bits" desactiva varios bits a partir de una dirección
específica.
El número de bits que deben desactivarse se determina con el valor de la constante en la
entrada N. La dirección del primer bit que debe desactivarse viene dada por el <Operando>.
El valor de la constante no puede ser mayor que el número de bits de un byte seleccionado. Si
es mayor, la instrucción no se ejecuta y aparece el mensaje de error "Se ha excedido el índice
<Operando1>". Los bits permanecen desactivados hasta que son activados explícitamente
por otra instrucción.
La instrucción se ejecuta sólo cuando el estado lógico de la entrada de habilitación EN es "1".

Mapas de bits del tipo de datos PLC, STRUCT o ARRAY
En estructuras del tipo de datos PLC, STRUCT o ARRAY se desactivan como máximo tantos
bits como contiene la estructura:
● Si se indica el valor "20" en la entrada N, por ejemplo, y la estructura solo contiene 10 bits,
solo se desactivarán esos 10 bits.
● Si se indica el valor "5" en la entrada N, por ejemplo, y la estructura contiene 10 bits, se
desactivarán exactamente 5 bits.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Desactivar mapa de bits":
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

S7-1500

Descripción

EN

Input

BOOL

I, Q, M, D,
L o cons‐
tante

I, Q, M, D, L,
T, C o cons‐
tante

Entrada de habilita‐
ción

N

Input

UINT

Constante

Constante

Número de bits que
se deben desactivar

<Operando>

Output

BOOL

I, Q, M

I, Q, M

En un DB
o un IDB,
un ele‐
mento de
ARRAY[..]
of BOOL

En un DB o
un IDB, un
elemento de
ARRAY[..]
of BOOL

Puntero al primer bit
que debe desactivar‐
se.

Programación del PLC
Manual de programación y manejo, 11/2019

1007

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

ಯ0\'%ಯ0\%RRO$UUD\>@
5(6(7B%)

ಯ7DJ,QBಯ

(1


1

Si los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1", se desactivan 5 bits a
partir de la dirección del operando "MyDB".MyBoolArray[4].

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

SR: Flipflop de activación/desactivación
Descripción
La instrucción "Flipflop de activación/desactivación" sirve para activar o desactivar el bit de un
operando indicado en función del estado lógico de las entradas S y R1. Si el estado lógico de
la entrada S es "1" y el de la entrada R1 es "0", el operando indicado se pone a "1". Si el estado
lógico de la entrada S es "0" y el de la entrada R1 es "1", el operando indicado se pone a "0".
La entrada R1 prevalece sobre la entrada S. Si el estado lógico de las entradas S y R1 es "1",
el estado lógico del operando indicado se pone a "0".
Si el estado lógico de ambas entradas S y R1 es "0", no se ejecuta la instrucción. En este caso,
no cambia el estado lógico del operando.
El estado lógico actual del operando se transfiere a la salida Q y se puede consultar allí.

1008

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Flipflop de activación/
desactivación":
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

S7-1500

Descripción

S

Input

BOOL

I, Q, M, D,
L o cons‐
tante

I, Q, M, D, L, Activación habilitada
T, C o cons‐
tante

R1

Input

BOOL

I, Q, M, D,
L o cons‐
tante

I, Q, M, D, L, Desactivación habilita‐
T, C o cons‐ da
tante

<Operando>

InOut

BOOL

I, Q, M, D,
L

I, Q, M, D, L

Operando que se acti‐
va o desactiva

Q

Output

BOOL

I, Q, M, D,
L

I, Q, M, D, L

Estado lógico del ope‐
rando

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ65ಯ
ಯ7DJ,QBಯ

65
6
ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

5

4

Los operandos "TagSR" y "TagOut" se activan cuando se cumplen las condiciones siguientes:
● El operando "TagIn_1" devuelve el estado lógico "1".
● El operando "TagIn_2" devuelve el estado lógico "0".
Los operandos "TagSR" y "TagOut" se desactivan cuando se cumple una de las condiciones
siguientes:
● El operando "TagIn_1" devuelve el estado lógico "0" y el operando "TagIn_2" devuelve el
estado lógico "1".
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

Programación del PLC
Manual de programación y manejo, 11/2019

1009

Instrucciones
4.1 Instrucciones

RS: Flipflop de desactivación/activación
Descripción
La instrucción "Flipflop de desactivación/activación" sirve para desactivar o activar el bit de un
operando indicado en función del estado lógico de las entradas R y S1. Si el estado lógico de
la entrada R es "1" y el de la entrada S1 es "0", el operando indicado se pone a "0". Si el estado
lógico de la entrada R es "0" y el de la entrada S1 es "1", el operando indicado se pone a "1".
La entrada S1 prevalece sobre la entrada R. Si el estado lógico de las entradas R y S1 es "1",
el estado lógico del operando indicado se pone a "1".
Si el estado lógico de ambas entradas R y S1 es "0", no se ejecuta la instrucción. En este caso,
no cambia el estado lógico del operando.
El estado lógico actual del operando se transfiere a la salida Q y se puede consultar allí.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Flipflop de desactivación/
activación":
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

Descripción

S7-1500

R

Input

BOOL

I, Q, M,
I, Q, M, D,
D, L o
L, T, C o
constante constante

Desactivación habilita‐
da

S1

Input

BOOL

I, Q, M,
I, Q, M, D,
D, L o
L, T, C o
constante constante

Activación habilitada

<Operando>

InOut

BOOL

I, Q, M,
D, L

I, Q, M, D, L Operando que se de‐
sactiva o activa.

Q

Output

BOOL

I, Q, M,
D, L

I, Q, M, D, L Estado lógico del ope‐
rando

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ56ಯ
ಯ7DJ,QBಯ

56
5
ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

6

4

Los operandos "TagRS" y "TagOut" se desactivan cuando se cumplen las condiciones
siguientes:
● El operando "TagIn_1" devuelve el estado lógico "1".
● El operando "TagIn_2" devuelve el estado lógico "0".

1010

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Los operandos "TagRS" y "TagOut" se activan cuando se cumplen las condiciones siguientes:
● El operando "TagIn_1" devuelve el estado lógico "0" y el operando "TagIn_2" devuelve el
estado lógico "1".
● Los operandos "TagIn_1" y "TagIn_2" devuelven el estado lógico "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

P: Consultar flanco de señal ascendente de un operando
Descripción
La instrucción "Consultar flanco de señal ascendente de un operando" permite detectar si el
estado lógico de un operando indicado (<Operando1>) ha cambiado de "0" a "1". La
instrucción compara el estado lógico actual del <Operando1> con el estado lógico de la
consulta anterior, que está almacenado en una marca de flancos (<Operando2>). Si la
instrucción detecta un cambio del resultado lógico (RLO) de "0" a "1", significa que hay un
flanco de señal ascendente.
La figura siguiente muestra el cambio del estado lógico en caso de flanco de señal
descendente y ascendente:
(VWDGR
OµJLFR

)ODQFRGHVH³DODVFHQGHQWH

)ODQFRGHVH³DOGHVFHQGHQWH




7HPSRUL]DGRU

El flanco de señal ascendente se consulta cada vez que se ejecuta la instrucción. Si se detecta
un flanco de señal ascendente, el <Operando1> adopta el estado lógico "1" durante un ciclo
del programa. En los demás casos, el estado lógico del operando es "0".
Indique el operando que debe consultarse (<Operando1>) en el comodín correspondiente
ubicado encima de la instrucción. La marca de flancos (<Operando2>) se indica en el comodín
correspondiente situado debajo de la instrucción.
Nota
Uso de la dirección de la marca de flancos
La dirección de la marca de flancos no se puede utilizar más de una vez en el programa, puesto
que, de lo contrario, se sobrescribe el bit de marcas. Esto influye negativamente en la
evaluación de flancos, de manera que el resultado deja de ser unívoco. El área de memoria de
la marca de flancos debe estar en un bloque de datos (área 'Static' de FB) o en el área de
marcas.

Programación del PLC
Manual de programación y manejo, 11/2019

1011

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar flanco de señal
ascendente de un operando":
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

Descripción

S7-1500

<Operan‐
do1>

Input

BOOL

I, Q, M,
I, Q, M, D,
D, L o
L, T, C o
constante constante

<Operan‐
do2>

InOut

BOOL

I, Q, M,
D, L

Señal que se debe con‐
sultar

I, Q, M, D, L Marca de flancos en la
que se almacena el es‐
tado lógico de la consul‐
ta anterior.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ
3
ಯ7DJB0ಯ

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● En la entrada "TagIn_1" hay un flanco de señal ascendente.
● El estado lógico del operando "TagIn_2" es "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplo de detección del sentido de marcha de una cinta transportadora (Página 8052)
Ejemplos de programación FUP (Página 8050)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

1012

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

N: Consultar flanco de señal descendente de un operando
Descripción
La instrucción "Consultar flanco de señal descendente de un operando" permite detectar si el
estado lógico de un operando indicado (<Operando1>) ha cambiado de "1" a "0". La
instrucción compara el estado lógico actual del <Operando1> con el estado lógico de la
consulta anterior, que está almacenado en una marca de flancos (<Operando2>). Si la
instrucción detecta un cambio del resultado lógico (RLO) de "1" a "0", significa que hay un
flanco de señal descendente.
La figura siguiente muestra el cambio del estado lógico en caso de flanco de señal
descendente y ascendente:
(VWDGR
OµJLFR

)ODQFRGHVH³DODVFHQGHQWH

)ODQFRGHVH³DOGHVFHQGHQWH




7HPSRUL]DGRU

El flanco de señal descendente se consulta cada vez que se ejecuta la instrucción. Si se
detecta un flanco de señal descendente, el <Operando1> adopta el estado lógico "1" durante
un ciclo del programa. En los demás casos, el estado lógico del operando es "0".
Indique el operando que debe consultarse (<Operando1>) en el comodín correspondiente
ubicado encima de la instrucción. La marca de flancos (<Operando2>) se indica en el comodín
correspondiente situado debajo de la instrucción.
Nota
Uso de la dirección de la marca de flancos
La dirección de la marca de flancos no se puede utilizar más de una vez en el programa, puesto
que, de lo contrario, se sobrescribe el bit de marcas. Esto influye negativamente en la
evaluación de flancos, de manera que el resultado deja de ser unívoco. El área de memoria de
la marca de flancos debe estar en un bloque de datos (área 'Static' de FB) o en el área de
marcas.

Programación del PLC
Manual de programación y manejo, 11/2019

1013

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar flanco de señal
descendente de un operando":
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

Descripción

S7-1500

<Operan‐
do1>

Input

BOOL

I, Q, M,
I, Q, M, D,
D, L o
L, T, C o
constan‐ constante
te

<Operan‐
do2>

InOut

BOOL

I, Q, M,
D, L

Señal que se debe con‐
sultar

I, Q, M, D, L Marca de flancos en la
que se almacena el esta‐
do lógico de la consulta
anterior.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ
1
ಯ7DJB0ಯ

ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

La salida "TagOut" se activa cuando se cumplen las condiciones siguientes:
● En la entrada "TagIn_1" hay un flanco de señal descendente.
● El estado lógico del operando "TagIn_2" es "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Insertar elementos FUP (Página 8017)
Cablear operandos en instrucciones FUP (Página 8041)
Editar elementos FUP (Página 8034)

P=: Activar operando con flanco de señal ascendente
Descripción
La instrucción "Activar operando con flanco de señal ascendente" permite activar un operando
indicado (<Operando2>) cuando se detecta un cambio del resultado lógico (RLO) de "0" a "1".
La instrucción compara el RLO actual con el RLO de la consulta anterior, que está almacenado
en una marca de flancos (<operando1>). Si la instrucción detecta un cambio del RLO de "0" a
"1", significa que hay un flanco de señal ascendente.

1014

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
El flanco de señal ascendente se consulta cada vez que se ejecuta la instrucción. Si se detecta
un flanco de señal ascendente, el <Operando2> adopta el estado lógico "1" durante un ciclo
del programa. En los demás casos, el estado lógico del operando es "0".
Indique el operando que debe activarse (<operando2>) en el comodín correspondiente
ubicado encima de la instrucción. La marca de flancos (<operando1>) se indica en el comodín
de operandos situado debajo de la instrucción.
Nota
Uso de la dirección de la marca de flancos
La dirección de la marca de flancos no se puede utilizar más de una vez en el programa, puesto
que, de lo contrario, se sobrescribe el bit de marcas. Esto influye negativamente en la
evaluación de flancos, de manera que el resultado deja de ser unívoco. El área de memoria de
la marca de flancos debe estar en un bloque de datos (área 'Static' de FB) o en el área de
marcas.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Activar operando con flanco de
señal ascendente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operan‐
do2>

Output

BOOL

I, Q, M, D, L

Operando que se activa si
hay un flanco de señal ascen‐
dente.

<Operan‐
do1>

InOut

BOOL

I, Q, M, D, L

Marca de flancos

Ejemplo
El siguiente ejemplo muestra los parámetros de la instrucción:
ಯ7DJ,QBಯ
ಯ7DJ,QBಯ

ಯ7DJ2XWಯ
3
ಯ7DJB0ಯ

La salida "TagOut" se activa durante un ciclo del programa cuando el estado lógico de la
entrada del cuadro de la instrucción cambia de "0" a "1" (flanco de señal ascendente). En todos
los demás casos, la salida "TagOut" devuelve el estado lógico "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

Programación del PLC
Manual de programación y manejo, 11/2019

1015

Instrucciones
4.1 Instrucciones

N=: Activar operando con flanco de señal descendente
Descripción
La instrucción "Activar operando con flanco de señal descendente" permite activar un
operando indicado (<Operando1>) cuando se presenta un cambio del resultado lógico (RLO)
de "1" a "0". La instrucción compara el RLO actual con el RLO de la consulta anterior, que está
almacenado en una marca de flancos (<Operando2>). Si la instrucción detecta un cambio del
RLO de "1" a "0", significa que hay un flanco de señal descendente.
El flanco de señal descendente se consulta cada vez que se ejecuta la instrucción. Si se
detecta un flanco de señal descendente, el <Operando1> adopta el estado lógico "1" durante
un ciclo del programa. En los demás casos, el estado lógico del operando es "0".
Indique el operando que debe activarse (<Operando1>) en el comodín correspondiente
ubicado encima de la instrucción. La marca de flancos (<Operando2>) se indica en el comodín
correspondiente situado debajo de la instrucción.
Nota
Uso de la dirección de la marca de flancos
La dirección de la marca de flancos no se puede utilizar más de una vez en el programa, puesto
que, de lo contrario, se sobrescribe el bit de marcas. Esto influye negativamente en la
evaluación de flancos, de manera que el resultado deja de ser unívoco. El área de memoria de
la marca de flancos debe estar en un bloque de datos (área 'Static' de FB) o en el área de
marcas.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Activar operando con flanco de
señal descendente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando1>

Output

BOOL

I, Q, M, D, L

Operando que se
activa si hay un
flanco de señal
descendente.

<Operando2>

InOut

BOOL

I, Q, M, D, L

Marca de flancos

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ
ಯ7DJ,QBಯ

ಯ7DJ2XWಯ
1
ಯ7DJB0ಯ

El operando "TagOut" se activa durante un ciclo del programa cuando el estado lógico de la
entrada del cuadro de la instrucción cambia de "1" a "0" (flanco de señal descendente). En
todos los demás casos, el operando "TagOut" devuelve el estado lógico "0".

1016

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Insertar elementos FUP (Página 8017)
Cablear operandos en instrucciones FUP (Página 8041)
Editar elementos FUP (Página 8034)

P_TRIG: Consultar flanco de señal ascendente del RLO
Descripción
La instrucción "Consultar flanco de señal ascendente del RLO" permite consultar un cambio
del estado lógico del resultado lógico (RLO) de "0" a "1". La instrucción compara el estado
lógico actual del RLO con el estado lógico de la consulta anterior, que está guardado en una
marca de flancos (<Operando>). Si la instrucción detecta un cambio del RLO de "0" a "1",
significa que hay un flanco de señal ascendente.
El flanco de señal ascendente se consulta cada vez que se ejecuta la instrucción. En cuanto
se detecta un flanco de señal ascendente, la salida Q de la instrucción devuelve el estado
lógico "1" durante un ciclo del programa. En todos los demás casos, la salida devuelve el
estado lógico "0".
Nota
Uso de la dirección de la marca de flancos
La dirección de la marca de flancos no se puede utilizar más de una vez en el programa, puesto
que, de lo contrario, se sobrescribe el bit de marcas. Esto influye negativamente en la
evaluación de flancos, de manera que el resultado deja de ser unívoco. El área de memoria de
la marca de flancos debe estar en un bloque de datos (área 'Static' de FB) o en el área de
marcas.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar flanco de señal
ascendente del RLO":
Parámetro

Declaración

Tipo de datos

Área de memoria

CLK

Input

BOOL

I, Q, M, D, L

RLO actual

<Operando>

InOut

BOOL

M, D

Marca de flancos en la que
se almacena el RLO de la
consulta anterior.

Q

Output

BOOL

I, Q, M, D, L

Resultado de la evaluación
de flancos

Programación del PLC
Manual de programación y manejo, 11/2019

Descripción

1017

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

! 

ಯ7DJ,QBಯ

ಯ7DJ2XWಯ

3B75,*
&/.
4

&$6
-03

ಯ7DJB0ಯ

En la marca de flancos "Tag_M" se almacena el RLO de la consulta anterior. Cuando se
detecta un cambio del estado lógico del RLO de "0" a "1", se ejecuta el salto a la etiqueta CAS1.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

N_TRIG: Consultar flanco de señal descendente del RLO
Descripción
La instrucción "Consultar flanco de señal descendente del RLO" permite consultar un cambio
del estado lógico del resultado lógico (RLO) de "1" a "0". La instrucción compara el estado
lógico actual del RLO con el estado lógico de la consulta anterior, que está guardado en una
marca de flancos (<Operando>). Si la instrucción detecta un cambio del RLO de "1" a "0",
significa que hay un flanco de señal descendente.
El flanco de señal descendente se consulta cada vez que se ejecuta la instrucción. En cuanto
se detecta un flanco de señal descendente, la salida Q de la instrucción devuelve el estado
lógico "1" durante un ciclo del programa. En todos los demás casos, el estado lógico de la
salida de la instrucción es "0".
Nota
Uso de la dirección de la marca de flancos
La dirección de la marca de flancos no se puede utilizar más de una vez en el programa, puesto
que, de lo contrario, se sobrescribe el bit de marcas. Esto influye negativamente en la
evaluación de flancos, de manera que el resultado deja de ser unívoco. El área de memoria de
la marca de flancos debe estar en un bloque de datos (área 'Static' de FB) o en el área de
marcas.

1018

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar flanco de señal
descendente del RLO":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CLK

Input

BOOL

I, Q, M, D, L

RLO actual

<Operando>

InOut

BOOL

M, D

Marca de flancos en la que
se almacena el RLO de la
consulta anterior.

Q

Output

BOOL

I, Q, M, D, L

Resultado de la evaluación
de flancos

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

! 

ಯ7DJ,QBಯ

ಯ7DJ2XWಯ

1B75,*
&/.
4

&$6
-03

ಯ7DJB0ಯ

En la marca de flancos "Tag_M" se almacena el RLO de la consulta anterior. Cuando se
detecta un cambio del estado lógico del RLO de "1" a "0", se ejecuta el salto a la etiqueta CAS1.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

R_TRIG: Detectar flanco de señal ascendente
Descripción
La instrucción "Detectar flanco de señal ascendente" permite detectar un cambio de estado de
"0" a "1" en la entrada CLK. La instrucción compara el valor actual de la entrada CLK con el
estado de la consulta anterior (marca de flanco), que está almacenada en la instancia indicada.
Cuando la instrucción detecta un cambio de estado de "0" a "1" en la entrada CLK, en la salida
Q se genera un flanco de señal ascendente, es decir, que la señal tiene el valor TRUE o "1"
exactamente durante un ciclo.
En todos los demás casos, el estado lógico de la salida de la instrucción es "0".

Programación del PLC
Manual de programación y manejo, 11/2019

1019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Detectar flanco de señal
ascendente":
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

S7-1500

Descripción

EN

Input

BOOL

I, Q, M, D, L o
constante

I, Q, M, D, L, T,
C o constante

Entrada de ha‐
bilitación

ENO

Output

BOOL

I, Q, M, D, L

I, Q, M, D, L

Salida de habi‐
litación

CLK

Input

BOOL

I, Q, M, D, L o
constante

I, Q, M, D, L, T,
C o constante

Señal entrante
cuyo flanco se
consulta.

Q

Output

BOOL

I, Q, M, D, L

I, Q, M, D, L

Resultado de
la evaluación
de flancos

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

'%
ಯ5B75,*B'%ಯ

! 

5B75,*

ಯ7DJ,QBಯ
ಯ7DJ,Qಯ
ಯ7DJ,QBಯ

4

(1
&/.

ಯ7DJ2XWಯ

(12

En la variable "R_TRIG_DB" se guarda el estado anterior de la variable en la entrada CLK. Si
en los operandos "TagIn_1" y "TagIn_2" o en el operando "TagIn_3" se detecta un cambio del
estado lógico de "0" a "1", la salida "TagOut_Q" devuelve el estado lógico "1" durante un ciclo.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

1020

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

F_TRIG: Detectar flanco de señal descendente
Descripción
La instrucción "Detectar flanco de señal descendente" permite detectar un cambio de estado
de "1" a "0" en la entrada CLK. La instrucción compara el valor actual de la entrada CLK con
el estado de la consulta anterior (marca de flanco), que está almacenada en la instancia
indicada. Cuando la instrucción detecta un cambio de estado de "1" a "0" en la entrada CLK,
en la salida Q se genera un flanco de señal descendente, es decir, que la señal tiene el valor
TRUE o "1" exactamente durante un ciclo.
En todos los demás casos, el estado lógico de la salida de la instrucción es "0".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Detectar flanco de señal
descendente":
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

S7-1500

Descripción

EN

Input

BOOL

I, Q, M, D, L

I, Q, M, D, L, T,
C

Entrada de ha‐
bilitación

ENO

Output

BOOL

I, Q, M, D, L

I, Q, M, D, L

Salida de habi‐
litación

CLK

Input

BOOL

I, Q, M, D, L o
constante

I, Q, M, D, L, T,
C o constante

Señal entrante
cuyo flanco se
consulta.

Q

Output

BOOL

I, Q, M, D, L

I, Q, M, D, L

Resultado de
la evaluación
de flancos

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ

'%
ಯ)B75,*B'%ಯ

! 

)B75,*

ಯ7DJ,QBಯ
ಯ7DJ,Qಯ
ಯ7DJ,QBಯ

(1
&/.

4

ಯ7DJ2XWಯ

(12

En la variable "F_TRIG_DB" se guarda el estado anterior de la variable en la entrada CLK. Si
en los operandos "TagIn_1" y "TagIn_2" o en el operando "TagIn_3" se detecta un cambio de
estado de "1" a "0", la salida "TagOut_Q" devuelve el estado "1" durante un ciclo.

Programación del PLC
Manual de programación y manejo, 11/2019

1021

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

Temporizadores
TP: Impulso
Descripción
La instrucción "Impulso" activa la salida Q por un tiempo programado. La instrucción se inicia
cuando el resultado lógico (RLO) de la entrada IN cambia de "0" a "1" (flanco de señal
ascendente). Cuando se inicia la instrucción, se empieza a contar el tiempo programado PT.
La salida Q se activa por el tiempo PT, independientemente de cómo evolucione la señal de
entrada. Durante el tiempo PT, la detección de un nuevo flanco de señal ascendente en la
entrada IN no influye en el estado lógico de la salida Q.
El valor de tiempo actual se puede consultar en la salida ET. Este valor de tiempo empieza a
contar a partir de T#0s y termina al alcanzarse el valor del tiempo PT. Una vez alcanzado este
tiempo PT y si el estado lógico de la entrada IN es "0", se desactiva la salida ET. Si en el
programa no se llama la instrucción porque, p. ej., esta se omite, la salida ET devuelve un valor
constante en cuanto ha transcurrido el tiempo PT.
La instrucción "Impulso" se puede colocar dentro o al final del segmento. Dicha instrucción
requiere una operación lógica precedente.
A cada llamada de la instrucción "Impulso" debe asignársele un temporizador CEI, en el que
se guarden los datos de instancia.

Para CPU S7-1200
El temporizador CEI es una estructura del tipo de datos IEC_TIMER o TP_TIME que se puede
declarar como se indica a continuación:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER (p. ej.,
"MyIEC_TIMER")
● Declaración como variable local del tipo TP_TIME o IEC_TIMER en la sección "Static" de
un bloque (p. ej., #MyIEC_TIMER)

1022

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Para CPU S7-1500
El temporizador CEI es una estructura del tipo de datos IEC_TIMER, IEC_LTIMER, TP_TIME
o TP_LTIME que se puede declarar como se indica a continuación:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER o IEC_LTIMER
(p. ej., "MyIEC_TIMER")
● Declaración como variable local del tipo TP_TIME, TP_LTIME, IEC_TIMER o IEC_LTIMER
en la sección "Static" de un bloque (p. ej., #MyIEC_TIMER)

Actualización de los valores actuales en los datos de instancia
Los datos de instancia de "Impulso" se actualizan siguiendo las reglas indicadas a
continuación:
● Entrada IN
La instrucción "Impulso" compara el RLO actual con el RLO de la consulta anterior, que está
almacenado en el parámetro IN de los datos de instancia. Si la instrucción detecta un
cambio del RLO de "0" a "1", significa que hay un flanco de señal ascendente y se empieza
a medir el tiempo. Una vez procesada la instrucción "Impulso", el valor del parámetro IN se
actualiza en los datos de instancia y se utiliza como marca de flancos para la siguiente
consulta.
Tenga en cuenta que la evaluación de flancos falla cuando el valor actual del parámetro IN
es escrito o inicializado por otras funciones.
● Entrada PT
El valor de la entrada PT se escribe en el parámetro PT de los datos de instancia cuando
se produce un cambio de flanco en la entrada IN.
● Salidas Q y ET
Los valores actuales de las salidas Q y ET se actualizan en los casos siguientes:
– Al llamar la instrucción, si las salidas ET o Q están interconectadas.
O bien:
– Al acceder a Q o ET.
Si las salidas no están interconectadas y tampoco se consultan, el valor de tiempo actual
de las salidas Q y ET no se actualiza. Las salidas tampoco se actualizan aunque la
instrucción se omita en el programa.
Para calcular los valores de tiempo de Q y ET se utilizan parámetros internos de la
instrucción "Impulso". Tenga en cuenta que la medición de tiempo falla cuando los valores
actuales de la instrucción son escritos o inicializados por otras funciones.

Programación del PLC
Manual de programación y manejo, 11/2019

1023

Instrucciones
4.1 Instrucciones

PELIGRO
Peligro al reinicializar los valores actuales
Si se reinicializan los valores actuales de un temporizador CEI mientras se está midiendo el
tiempo, se interfiere en la función del temporizador CEI. Esto puede provocar incoherencias
entre el programa y el proceso real. Como consecuencia pueden producirse daños materiales
y personales graves.
Las funciones siguientes pueden provocar la reinicialización de los valores actuales:
● Cargar el bloque con reinicialización
● Cargar instantáneas como valores actuales
● Forzar valores actuales de forma normal o permanente
● La instrucción "WRIT_DBL"
Antes de ejecutar estas funciones, tome las medidas siguientes:
● Asegúrese de que la instalación se encuentra en un estado seguro antes de sobrescribir
los valores actuales.
● Asegúrese de que el temporizador CEI ha finalizado antes de inicializar los valores
actuales.
● Si los valores actuales se sobrescriben con una instantánea, asegúrese de que la
instantánea se haya generado en un instante en que la instalación estaba en un estado
seguro.
● Asegúrese de que el programa no está leyendo ni escribiendo los datos afectados durante
la transferencia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Impulso":
Parámetro

1024

Declaración

Tipo de datos

Área de memoria

S7-1200

S7-1500

S7-1200

S7-1500

Descripción

IN

Input

BOOL

BOOL

I, Q, M, D, L
o constante

I, Q, M, D, L,
T, C, P o
constante

Entrada de
arranque

PT

Input

TIME

TIME, LTI‐
ME

I, Q, M, D, L
o constante

I, Q, M, D, L, Duración del
P o constan‐ impulso.
te
El valor del
parámetro
PT debe ser
positivo.

Q

Output

BOOL

BOOL

I, Q, M, D, L

I, Q, M, D, L,
P

Salida de im‐
pulso

ET

Output

TIME

TIME, LTI‐
ME

I, Q, M, D, L

I, Q, M, D, L,
P

Valor de
tiempo ac‐
tual

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Impulso":
,1

4

37

37

37

(7
37

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ73B'%ಯ
73
7,0(
ಯ7DJB6WDUWಯ

,1

4

ಯ7DJB3UHVHW7LPHಯ

37

(7

ಯ7DJB6WDWXVಯ
ಯ7DJB(ODSVHG7LPHಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

Tag_Start

Cambio de señal "0" => "1"

PT

Tag_PresetTime

T#10s

Q

Tag_Status

TRUE

ET

Tag_ElapsedTime

de T#0s => T#10s

Cuando el estado lógico del operando "Tag_Start" cambia de "0" a "1", el tiempo programado
en el parámetro PT empieza a contar y el operando "Tag_Status" se pone a "1". El valor de
tiempo actual se guarda en el operando "Tag_ElapsedTime". Una vez transcurrido el tiempo,
el operando "Tag_Status" se vuelve a poner al estado lógico "0".

Programación del PLC
Manual de programación y manejo, 11/2019

1025

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplo de control de la temperatura ambiente (Página 8060)
Instancias (Página 61)
Ejemplos de programación FUP (Página 8050)
Principios básicos de FUP (Página 8005)

TON: Retardo al conectar
Descripción
Con la instrucción "Retardo al conectar" se puede retrasar la activación de la salida Q el tiempo
parametrizado PT. La instrucción se inicia cuando el resultado lógico (RLO) de la entrada IN
cambia de "0" a "1" (flanco de señal ascendente). Cuando se inicia la instrucción, se empieza
a contar el tiempo programado PT. Una vez transcurrido el tiempo PT, la salida Q devuelve el
estado lógico "1". La salida Q permanecerá activada mientras la entrada de arranque esté
puesta a "1". Cuando el estado lógico de la entrada de arranque cambia de "1" a "0", se
desactiva la salida Q. La función de temporización se reinicia al detectarse un nuevo flanco de
señal ascendente en la entrada de arranque.
El valor de tiempo actual se puede consultar en la salida ET. Este valor de tiempo empieza a
contar a partir de T#0s y termina al alcanzarse el valor del tiempo PT. La salida ET se desactiva
en cuanto el estado lógico de la entrada IN cambia a "0". Si en el programa no se llama la
instrucción porque, p. ej., esta se omite, la salida ET devuelve un valor constante en cuanto ha
transcurrido el tiempo PT.
La instrucción "Retardo al conectar" se puede colocar dentro o al final del segmento. Dicha
instrucción requiere una operación lógica precedente.
A cada llamada de la instrucción "Retardo al conectar" debe asignársele un temporizador CEI,
en el que se guarden los datos de instancia.

Para CPU S7-1200
El temporizador CEI es una estructura del tipo de datos IEC_TIMER o TON_TIME que se
puede declarar como se indica a continuación:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER (p. ej.,
"MyIEC_TIMER")
● Declaración como variable local del tipo TON_TIME o IEC_TIMER en la sección "Static" de
un bloque (p. ej., #MyIEC_TIMER)

1026

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Para CPU S7-1500
El temporizador CEI es una estructura del tipo de datos IEC_TIMER, IEC_LTIMER, TON_TIME
o TON_LTIME que se puede declarar como se indica a continuación:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER o IEC_LTIMER
(p. ej., "MyIEC_TIMER")
● Declaración como variable local del tipo TON_TIME, TON_LTIME, IEC_TIMER o
IEC_LTIMER en la sección "Static" de un bloque (p. ej., #MyIEC_TIMER)
Los datos de la instrucción se actualizan en los casos siguientes:
● Al llamar la instrucción, si las salidas ET o Q están interconectadas. Si las salidas no están
interconectadas, el valor de tiempo actual de la salida ET no se actualiza.
● Al acceder a las salidas Q o ET.

Actualización de los valores actuales en los datos de instancia
Los datos de instancia de "Retardo al conectar" se actualizan siguiendo las reglas indicadas a
continuación:
● Entrada IN
La instrucción "Retardo al conectar" compara el RLO actual con el RLO de la consulta
anterior, que está almacenado en el parámetro IN de los datos de instancia. Si la instrucción
detecta un cambio del RLO de "0" a "1", significa que hay un flanco de señal ascendente y
se empieza a medir el tiempo. Una vez procesada la instrucción "Retardo al conectar", el
valor del parámetro IN se actualiza en los datos de instancia y se utiliza como marca de
flancos para la siguiente consulta.
Tenga en cuenta que la evaluación de flancos falla cuando el valor actual del parámetro IN
es escrito o inicializado por otras funciones.
● Entrada PT
El valor de la entrada PT se escribe en el parámetro PT de los datos de instancia cuando
se produce un cambio de flanco en la entrada IN.
● Salidas Q y ET
Los valores actuales de las salidas Q y ET se actualizan en los casos siguientes:
– Al llamar la instrucción, si las salidas ET o Q están interconectadas.
O bien:
– Al acceder a Q o ET.
Si las salidas no están interconectadas y tampoco se consultan, el valor de tiempo actual
de las salidas Q y ET no se actualiza. Las salidas tampoco se actualizan aunque la
instrucción se omita en el programa.
Para calcular los valores de tiempo de Q y ET se utilizan parámetros internos de la
instrucción "Retardo al conectar". Tenga en cuenta que la medición de tiempo falla cuando
los valores actuales de la instrucción son escritos o inicializados por otras funciones.

Programación del PLC
Manual de programación y manejo, 11/2019

1027

Instrucciones
4.1 Instrucciones

PELIGRO
Peligro al reinicializar los valores actuales
Si se reinicializan los valores actuales de un temporizador CEI mientras se está midiendo el
tiempo, se interfiere en la función del temporizador CEI. Esto puede provocar incoherencias
entre el programa y el proceso real. Como consecuencia pueden producirse daños materiales
y personales graves.
Las funciones siguientes pueden provocar la reinicialización de los valores actuales:
● Cargar el bloque con reinicialización
● Cargar instantáneas como valores actuales
● Forzar valores actuales de forma normal o permanente
● La instrucción "WRIT_DBL"
Antes de ejecutar estas funciones, tome las medidas siguientes:
● Asegúrese de que la instalación se encuentra en un estado seguro antes de sobrescribir
los valores actuales.
● Asegúrese de que el temporizador CEI ha finalizado antes de inicializar los valores
actuales.
● Si los valores actuales se sobrescriben con una instantánea, asegúrese de que la
instantánea se haya generado en un instante en que la instalación estaba en un estado
seguro.
● Asegúrese de que el programa no está leyendo ni escribiendo los datos afectados durante
la transferencia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Retardo al conectar":
Parámetro

Declaración

Tipo de datos

Área de memoria

S7-1200

S7-1500

S7-1200

S7-1500

Descripción

IN

Input

BOOL

BOOL

I, Q, M, D, L
o constante

I, Q, M, D, L,
T, C, P o
constante

Entrada de
arranque

PT

Input

TIME

TIME, LTI‐
ME

I, Q, M, D, L
o constante

I, Q, M, D, L, Tiempo de
P o constan‐ retardo al co‐
nectar.
te
El valor del
parámetro
PT debe ser
positivo.

1028

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

S7-1200

S7-1500

S7-1200

S7-1500

Descripción

Q

Output

BOOL

BOOL

I, Q, M, D, L

I, Q, M, D, L,
P

Salida que
se activa
una vez
transcurrido
el tiempo PT.

ET

Output

TIME

TIME, LTI‐
ME

I, Q, M, D, L

I, Q, M, D, L,
P

Valor de
tiempo ac‐
tual

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Retardo al conectar":
,1

4

37

37

(7
37

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ721B'%ಯ
721
7,0(
ಯ7DJB6WDUWಯ

,1

4

ಯ7DJB3UHVHW7LPHಯ

37

(7

ಯ7DJB6WDWXVಯ
ಯ7DJB(ODSVHG7LPHಯ

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

Tag_Start

Cambio de señal "0" => "1"

PT

Tag_PresetTime

T#10s

Programación del PLC
Manual de programación y manejo, 11/2019

1029

Instrucciones
4.1 Instrucciones
Parámetro

Operando

Valor

Q

Tag_Status

FALSE; tras 10 s => TRUE

ET

Tag_ElapsedTime

de T#0s => T#10s

Cuando el estado lógico del operando "Tag_Start" cambia de "0" a "1", el tiempo programado
en el parámetro PT empieza a contar. Una vez transcurrido el tiempo, el operando
"Tag_Status" se pone al estado lógico "1". El operando "Tag_Status" permanece a "1" mientras
el operando "Tag_Start" tenga el estado lógico "1". El valor de tiempo actual se guarda en el
operando "Tag_ElapsedTime". Cuando el estado lógico del operando "Tag_Start" cambia de
"1" a "0", se restablece el operando "Tag_Status".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de FUP (Página 8005)

TOF: Retardo al desconectar
Descripción
Con la instrucción "Retardo al desconectar" se puede retrasar la desactivación de la salida Q
el tiempo parametrizado PT. La salida Q se activa cuando el resultado lógico (RLO) de la
entrada IN cambia de "1" a "0" (flanco de señal descendente). Cuando el estado lógico de la
entrada IN cambia nuevamente a "1" (flanco de señal descendente), el tiempo parametrizado
PT deja de contar. La salida Q permanece activada mientras transcurre el tiempo PT. Una vez
transcurrido el tiempo PT se desactiva la salida Q. Si el estado lógico de la entrada IN cambia
a "1" antes de que transcurra el tiempo PT, se inicializa el temporizador. El estado lógico de la
salida Q permanece en "1".
El valor de tiempo actual se puede consultar en la salida ET. Este valor de tiempo empieza a
contar a partir de T#0s y termina al alcanzarse el valor del tiempo PT. Una vez transcurrido el
tiempo PT, el valor actual de la salida ET se conserva hasta que la entrada IN cambie
nuevamente a "1". Si el estado lógico de la entrada IN cambia a "1" antes de transcurrir el
tiempo PT, la salida ET adopta el valor T#0s. Si en el programa no se llama la instrucción
porque, p. ej., esta se omite, la salida ET devuelve un valor constante en cuanto transcurre este
tiempo.
La instrucción "Retardo al desconectar" se puede colocar dentro o al final del segmento. Dicha
instrucción requiere una operación lógica precedente.
A cada llamada de la instrucción "Retardo al desconectar" debe asignársele un temporizador
CEI, en el que se guarden los datos de instancia.

1030

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Para CPU S7-1200
El temporizador CEI es una estructura del tipo de datos IEC_TIMER o TOF_TIME que se
puede declarar como se indica a continuación:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER (p. ej.,
"MyIEC_TIMER")
● Declaración como variable local del tipo TOF_TIME o IEC_TIMER en la sección "Static" de
un bloque (p. ej., #MyIEC_TIMER)

Para CPU S7-1500
El temporizador CEI es una estructura del tipo de datos IEC_TIMER, IEC_LTIMER, TOF_TIME
o TOF_LTIME que se puede declarar como se indica a continuación:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER o IEC_LTIMER
(p. ej., "MyIEC_TIMER")
● Declaración como variable local del tipo TOF_TIME, TOF_LTIME, IEC_TIMER o
IEC_LTIMER en la sección "Static" de un bloque (p. ej., #MyIEC_TIMER)

Actualización de los valores actuales en los datos de instancia
Los datos de instancia de "Retardo al desconectar" se actualizan siguiendo las reglas
indicadas a continuación:
● Entrada IN
La instrucción "Retardo al desconectar" compara el RLO actual con el RLO de la consulta
anterior, que está almacenado en el parámetro IN de los datos de instancia. Si la instrucción
detecta un cambio del RLO de "1" a "0", significa que hay un flanco de señal descendente
y se empieza a contar el tiempo. Una vez procesada la instrucción "Retardo al
desconectar", el valor del parámetro IN se actualiza en los datos de instancia y se utiliza
como marca de flancos para la siguiente consulta.
Tenga en cuenta que la evaluación de flancos falla cuando el valor actual del parámetro IN
es escrito o inicializado por otras funciones.
● Entrada PT
El valor de la entrada PT se escribe en el parámetro PT de los datos de instancia cuando
se produce un cambio de flanco en la entrada IN.
● Salidas Q y ET
Los valores actuales de las salidas Q y ET se actualizan en los casos siguientes:
– Al llamar la instrucción, si las salidas ET o Q están interconectadas.
O bien:
– Al acceder a Q o ET.
Si las salidas no están interconectadas y tampoco se consultan, el valor de tiempo actual
de las salidas Q y ET no se actualiza. Las salidas tampoco se actualizan aunque la
instrucción se omita en el programa.
Para calcular los valores de tiempo de Q y ET se utilizan parámetros internos de la
instrucción "Retardo al desconectar". Tenga en cuenta que la medición de tiempo falla
cuando los valores actuales de la instrucción son escritos o inicializados por otras
funciones.

Programación del PLC
Manual de programación y manejo, 11/2019

1031

Instrucciones
4.1 Instrucciones

PELIGRO
Peligro al reinicializar los valores actuales
Si se reinicializan los valores actuales de un temporizador CEI mientras se está midiendo el
tiempo, se interfiere en la función del temporizador CEI. Esto puede provocar incoherencias
entre el programa y el proceso real. Como consecuencia pueden producirse daños materiales
y personales graves.
Las funciones siguientes pueden provocar la reinicialización de los valores actuales:
● Cargar el bloque con reinicialización
● Cargar instantáneas como valores actuales
● Forzar valores actuales de forma normal o permanente
● La instrucción "WRIT_DBL"
Antes de ejecutar estas funciones, tome las medidas siguientes:
● Asegúrese de que la instalación se encuentra en un estado seguro antes de sobrescribir
los valores actuales.
● Asegúrese de que el temporizador CEI ha finalizado antes de inicializar los valores
actuales.
● Si los valores actuales se sobrescriben con una instantánea, asegúrese de que la
instantánea se haya generado en un instante en que la instalación estaba en un estado
seguro.
● Asegúrese de que el programa no está leyendo ni escribiendo los datos afectados durante
la transferencia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Retardo al desconectar":
Parámetro

Declaración

Tipo de datos

Área de memoria

S7-1200

S7-1500

S7-1200

S7-1500

Descripción

IN

Input

BOOL

BOOL

I, Q, M, D, L
o constante

I, Q, M, D, L,
T, C, P o
constante

Entrada de
arranque

PT

Input

TIME

TIME, LTI‐
ME

I, Q, M, D, L
o constante

I, Q, M, D, L, Tiempo del
P o constan‐ retardo al
te
desconectar
El valor del
parámetro
PT debe ser
positivo.

1032

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

S7-1200

S7-1500

S7-1200

S7-1500

Descripción

Q

Output

BOOL

BOOL

I, Q, M, D, L

I, Q, M, D, L,
P

Salida que
se desactiva
una vez
transcurrido
el tiempo PT.

ET

Output

TIME

TIME, LTI‐
ME

I, Q, M, D, L

I, Q, M, D, L,
P

Valor de
tiempo ac‐
tual

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Retardo al
desconectar":
,1

4
37

37

(7
37

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ72)B'%ಯ
72)
7,0(
ಯ7DJB6WDUWಯ

,1

4

ಯ7DJB3UHVHW7LPHಯ

37

(7

Programación del PLC
Manual de programación y manejo, 11/2019

ಯ7DJB6WDWXVಯ
ಯ7DJB(ODSVHG7LPHಯ

1033

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:
Parámetro

Operando

Valor

IN

Tag_Start

Cambio de señal "0" => "1"; cam‐
bio de señal "1" => "0"

PT

Tag_PresetTime

T#10s

Q

Tag_Status

TRUE

ET

Tag_ElapsedTime

de T#10s => T#0s

Cuando el estado lógico del operando "Tag_Start" cambia de "0" a "1", el operando
"Tag_Status" se pone al estado lógico "1". Cuando el estado lógico del operando "Tag_Start"
cambia de "1" a "0", el tiempo programado en el parámetro PT empieza a contar. Mientras
transcurra el tiempo, el operando "Tag_Status" permanecerá en TRUE. Una vez transcurrido
el tiempo, el operando "Tag_Status" se restablecerá a FALSE. El valor de tiempo actual se
guarda en el operando "Tag_ElapsedTime".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de FUP (Página 8005)

TONR: Acumulador de tiempo
Descripción
La instrucción "Acumulador de tiempo" acumula valores de tiempo dentro de un periodo
definido por el parámetro PT. Cuando el resultado lógico (RLO) de la entrada IN cambia de "0"
a "1" (flanco de señal ascendente), se inicia la medición de tiempo y se empieza a contar el
tiempo PT parametrizado. Mientras transcurre el tiempo PT se van acumulando los valores de
tiempo que se leen cuando el estado lógico de la entrada IN es "1". El tiempo acumulado se
deposita en la salida ET y se puede consultar allí. Una vez alcanzado el valor de tiempo actual
PT, la salida Q devuelve el estado lógico "1". La salida Q permanece a "1" aunque el estado
lógico de la entrada IN cambie a "0".
La entrada R desactiva las salidas ET y Q, independientemente del estado lógico de la entrada
de arranque.
La instrucción "Acumulador de tiempo" se puede colocar dentro o al final del segmento. Dicha
instrucción requiere una operación lógica precedente.
A cada llamada de la instrucción "Acumulador de tiempo" debe asignársele un temporizador
CEI, en el que se guarden los datos de instancia.

1034

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Para CPU S7-1200
El temporizador CEI es una estructura del tipo de datos IEC_TIMER o TONR_TIME que se
puede declarar como se indica a continuación:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER (p. ej.,
"MyIEC_TIMER")
● Declaración como variable local del tipo TONR_TIME o IEC_TIMER en la sección "Static"
de un bloque (p. ej., #MyIEC_TIMER)

Para CPU S7-1500
El temporizador CEI es una estructura del tipo de datos IEC_TIMER, IEC_LTIMER,
TONR_TIME o TONR_LTIME que se puede declarar como se indica a continuación:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER o IEC_LTIMER
(p. ej., "MyIEC_TIMER")
● Declaración como variable local del tipo TONR_TIME, TONR_LTIME, IEC_TIMER o
IEC_LTIMER en la sección "Static" de un bloque (p. ej., #MyIEC_TIMER)

Actualización de los valores actuales en los datos de instancia
Los datos de instancia de "Acumulador de tiempo" se actualizan siguiendo las reglas indicadas
a continuación:
● Entrada IN
La instrucción "Acumulador de tiempo" compara el RLO actual con el RLO de la consulta
anterior, que está almacenado en el parámetro IN de los datos de instancia. Si la instrucción
detecta un cambio del RLO de "0" a "1", significa que hay un flanco de señal ascendente y
se reanuda la medición de tiempo. Si la instrucción detecta un cambio de "1" a "0" en el
RLO, significa que hay un flanco de señal descendente y la medición de tiempo se
interrumpe. Una vez procesada la instrucción "Acumulador de tiempo", el valor del
parámetro IN se actualiza en los datos de instancia y se utiliza como marca de flancos para
la siguiente consulta.
Tenga en cuenta que la evaluación de flancos falla cuando el valor actual del parámetro IN
es escrito o inicializado por otras funciones.
● Entrada PT
El valor de la entrada PT se escribe en el parámetro PT de los datos de instancia cuando
se produce un cambio de flanco en la entrada IN.

Programación del PLC
Manual de programación y manejo, 11/2019

1035

Instrucciones
4.1 Instrucciones
● Entrada R
La señal "1" en la entrada R inicializa la medición de tiempo y la bloquea. Los flancos en la
entrada IN se ignoran. La señal "0" en la entrada R habilita de nuevo la medición de tiempo.
● Salidas Q y ET
Los valores actuales de las salidas Q y ET se actualizan en los casos siguientes:
– Al llamar la instrucción, si las salidas ET o Q están interconectadas.
O bien:
– Al acceder a Q o ET.
Si las salidas no están interconectadas y tampoco se consultan, el valor de tiempo actual
de las salidas Q y ET no se actualiza. Las salidas tampoco se actualizan aunque la
instrucción se omita en el programa.
Para calcular los valores de tiempo de Q y ET se utilizan parámetros internos de la
instrucción "Acumulador de tiempo". Tenga en cuenta que la medición de tiempo falla
cuando los valores actuales de la instrucción son escritos o inicializados por otras
funciones.
PELIGRO
Peligro al reinicializar los valores actuales
Si se reinicializan los valores actuales de un temporizador CEI mientras se está midiendo el
tiempo, se interfiere en la función del temporizador CEI. Esto puede provocar incoherencias
entre el programa y el proceso real. Como consecuencia pueden producirse daños materiales
y personales graves.
Las funciones siguientes pueden provocar la reinicialización de los valores actuales:
● Cargar el bloque con reinicialización
● Cargar instantáneas como valores actuales
● Forzar valores actuales de forma normal o permanente
● La instrucción "WRIT_DBL"
Antes de ejecutar estas funciones, tome las medidas siguientes:
● Asegúrese de que la instalación se encuentra en un estado seguro antes de sobrescribir
los valores actuales.
● Asegúrese de que el temporizador CEI ha finalizado antes de inicializar los valores
actuales.
● Si los valores actuales se sobrescriben con una instantánea, asegúrese de que la
instantánea se haya generado en un instante en que la instalación estaba en un estado
seguro.
● Asegúrese de que el programa no está leyendo ni escribiendo los datos afectados durante
la transferencia.

1036

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Acumulador de tiempo":
Parámetro

Declaración

Tipo de datos

Área de memoria

S7-1200

S7-1500

S7-1200

S7-1500

Descripción

IN

Input

BOOL

BOOL

I, Q, M, D, L
o constante

I, Q, M, D, L,
T, C, P o
constante

Entrada de
arranque

R

Input

BOOL

BOOL

I, Q, M, D, L
o constante

I, Q, M, D, L, Entrada de
P o constan‐ reset
te

PT

Input

TIME

TIME, LTI‐
ME

I, Q, M, D, L
o constante

I, Q, M, D, L, Tiempo má‐
P o constan‐ ximo de lec‐
te
tura del tiem‐
po.
El valor del
parámetro
PT debe ser
positivo.

Q

Output

BOOL

BOOL

I, Q, M, D, L

I, Q, M, D, L,
P

Salida que
se activa
una vez
transcurrido
el tiempo PT.

ET

Output

TIME

TIME, LTI‐
ME

I, Q, M, D, L

I, Q, M, D, L,
P

Valor de
tiempo ac‐
tual

Programación del PLC
Manual de programación y manejo, 11/2019

1037

Instrucciones
4.1 Instrucciones

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Acumulador de
tiempo":
,1

5

4

37

(7

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7215B'%ಯ
7215
7,0(
ಯ7DJB6WDUWಯ

,1

4

ಯ7DJB5HVHWಯ

5

(7

ಯ7DJB3UHVHW7LPHಯ

ಯ7DJB6WDWXVಯ
ಯ7DJB(ODSVHG7LPHಯ

37

La tabla siguiente muestra cómo funciona la instrucción con valores de operandos concretos:

1038

Parámetro

Operando

Valor

IN

Tag_Start

Cambio de señal "0" => "1"

PT

Tag_PresetTime

T#10s

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Operando

Valor

Q

Tag_Status

FALSE; tras 10 s => TRUE

ET

Tag_ElapsedTime

Cambio de señal "0" => "1":
transcurre el tiempo T#10s.
Pasados 5 s, cambio de señal de
"1" => "0".
El tiempo del operando
"Tag_ElapsedTime" se detiene
en T#5s.
Pasados aprox. 2 s, nuevo cam‐
bio de señal de "0" => "1":
El tiempo del operando
"Tag_ElapsedTime" sigue trans‐
curriendo a partir de T#5s.

Cuando el estado lógico del operando "Tag_Start" cambia de "0" a "1", el tiempo programado
en el parámetro PT empieza a contar. Mientras el operando "Tag_Start" tenga el estado lógico
"1", se cuenta el tiempo. Cuando el estado lógico del operando "Tag_Start" cambia de "1" a "0",
el temporizador se detiene y se memoriza el valor de tiempo actual en el operando
"Tag_ElapsedTime". Si el estado lógico del operando "Tag_Start" vuelve a cambiar de "0" a "1",
el tiempo sigue transcurriendo a partir del valor de tiempo memorizado al cambiar de "1" a "0".
Una vez alcanzado el valor de tiempo indicado en el parámetro PT, el operando "Tag_Status"
adopta el estado lógico "1". El valor de tiempo actual se guarda en el operando
"Tag_ElapsedTime".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de FUP (Página 8005)

TP: Arrancar temporizador como impulso
Descripción
La instrucción "Arrancar temporizador como impulso" arranca un temporizador CEI como
impulso con un tiempo determinado. El temporizador CEI se inicia cuando el resultado lógico
(RLO) cambia de "0" a "1" (flanco de señal ascendente). El temporizador CEI cuenta el tiempo
indicado, independientemente de cómo evolucione el RLO. La detección de un nuevo flanco
de señal ascendente no influye en el transcurso del temporizador CEI. Mientras el
temporizador CEI cuenta el tiempo, una consulta de si el estado del temporizador es "1" da
como resultado "1". Una vez transcurrido el temporizador CEI, el estado del temporizador
devuelve el estado lógico "0".
El estado actual del temporizador se deposita en el componente de estructura Q del
temporizador CEI. El estado del temporizador se puede consultar con una combinación lógica
binaria.

Programación del PLC
Manual de programación y manejo, 11/2019

1039

Instrucciones
4.1 Instrucciones
La ejecución de la instrucción "Arrancar temporizador como impulso" solo se puede colocar al
final del segmento. Dicha instrucción requiere una operación lógica precedente.
Nota
El arranque y la consulta del temporizador CEI pueden encontrarse en diferentes niveles de
ejecución, pues en cada consulta de las salidas Q o ET se actualiza la estructura IEC_TIMER.

Para CPU S7-1200
La instrucción "Arrancar temporizador como impulso" deposita los datos en una estructura del
tipo de datos IEC_TIMER o TP_TIME. La estructura se puede declarar de la manera siguiente:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER (p. ej.,
"MyIEC_TIMER")
● Declaración como variable local del tipo TP_TIME o IEC_TIMER en la sección "Static" de
un bloque (p. ej., #MyIEC_TIMER)

Para CPU S7-1500
La instrucción "Arrancar temporizador como impulso" deposita los datos en una estructura del
tipo de datos IEC_TIMER, IEC_LTIMER, TP_TIME o TP_LTIME. La estructura se puede
declarar de la manera siguiente:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER o IEC_LTIMER
(p. ej., "MyIEC_TIMER")
● Declaración como variable local del tipo TP_TIME, TP_LTIME, IEC_TIMER o IEC_LTIMER
en la sección "Static" de un bloque (p. ej., #MyIEC_TIMER)

1040

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Actualización de los valores actuales en los datos de instancia
Los datos de instancia de "Arrancar temporizador como impulso" se actualizan siguiendo las
reglas indicadas a continuación:
● Entrada IN
La instrucción "Arrancar temporizador como impulso" compara el RLO actual con el RLO de
la consulta anterior, que está almacenado en el parámetro IN de los datos de instancia. Si
la instrucción detecta un cambio del RLO de "0" a "1", significa que hay un flanco de señal
ascendente y se empieza a contar el tiempo. Una vez procesada la instrucción "Arrancar
temporizador como impulso", el valor del parámetro IN se actualiza en los datos de
instancia y se utiliza como marca de flancos para la siguiente consulta.
Tenga en cuenta que la evaluación de flancos falla cuando el valor actual del parámetro IN
es escrito o inicializado por otras funciones.
● Entrada PT
El valor de la entrada PT se escribe en el parámetro PT de los datos de instancia cuando
se produce un cambio de flanco en la entrada IN.
● Salidas Q y ET
Los valores actuales de las salidas Q y ET se actualizan en los casos siguientes:
– Al llamar la instrucción, si las salidas ET o Q están interconectadas.
O bien:
– Al acceder a Q o ET.
Si las salidas no están interconectadas y tampoco se consultan, el valor de tiempo actual
de las salidas Q y ET no se actualiza. Las salidas tampoco se actualizan aunque la
instrucción se omita en el programa.
Para calcular los valores de tiempo de Q y ET se utilizan parámetros internos de la
instrucción "Arrancar temporizador como impulso". Tenga en cuenta que la medición de
tiempo falla cuando los valores actuales de la instrucción son escritos o inicializados por
otras funciones.

Programación del PLC
Manual de programación y manejo, 11/2019

1041

Instrucciones
4.1 Instrucciones

PELIGRO
Peligro al reinicializar los valores actuales
Si se reinicializan los valores actuales de un temporizador CEI mientras se está midiendo el
tiempo, se interfiere en la función del temporizador CEI. Esto puede provocar incoherencias
entre el programa y el proceso real. Como consecuencia pueden producirse daños materiales
y personales graves.
Las funciones siguientes pueden provocar la reinicialización de los valores actuales:
● Cargar el bloque con reinicialización
● Cargar instantáneas como valores actuales
● Forzar valores actuales de forma normal o permanente
● La instrucción "WRIT_DBL"
Antes de ejecutar estas funciones, tome las medidas siguientes:
● Asegúrese de que la instalación se encuentra en un estado seguro antes de sobrescribir
los valores actuales.
● Asegúrese de que el temporizador CEI ha finalizado antes de inicializar los valores
actuales.
● Si los valores actuales se sobrescriben con una instantánea, asegúrese de que la
instantánea se haya generado en un instante en que la instalación estaba en un estado
seguro.
● Asegúrese de que el programa no está leyendo ni escribiendo los datos afectados durante
la transferencia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
impulso":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de memo‐ Descripción
ria

VALUE

Input

TIME

TIME, LTIME

I, Q, M, D, L o
constante

Tiempo que
cuenta el tem‐
porizador CEI.

<Temporiza‐
dor CEI>

InOut

IEC_TIMER,
TP_TIME

IEC_TIMER,
IEC_LTIMER,
TP_TIME,
TP_LTIME

D, L

Temporizador
CEI que se
arranca.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

1042

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción:
,1

4

37

37

37

(7
37

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ'%ಯ
0\,(&B7,0(5
ಯ7DJB,QSXWಯ

ಯ7DJB7,0(ಯ

73
7,0(
9$/8(

La instrucción "Arrancar temporizador como impulso" se ejecuta cuando el estado lógico del
operando "Tag_Input" cambia de "0" a "1". El temporizador "DB1".MyIEC_TIMER se arranca
por el tiempo que está guardado en el operando "TagTime".
ಯ7DJB2XWSXWಯ
ಯ'%ಯ0\,(&B
7,0(54

Mientras el temporizador "DB1".MyIEC_TIMER cuenta el tiempo, el estado del temporizador
("DB1".MyIEC_TIMER.Q) devuelve el estado lógico "1" y el operando "Tag_Output" se activa.
Cuando el temporizador CEI termina de contar, el estado lógico del temporizador cambia a "0"
y el operando "Tag_Output" se desactiva.

Programación del PLC
Manual de programación y manejo, 11/2019

1043

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de FUP (Página 8005)

TON: Arrancar temporizador como retardo a la conexión
Descripción
La instrucción "Arrancar temporizador como retardo a la conexión" arranca un temporizador
CEI como retardo a la conexión con un tiempo determinado. El temporizador CEI se inicia
cuando el resultado lógico (RLO) cambia de "0" a "1" (flanco de señal ascendente). El
temporizador CEI cuenta el tiempo indicado. La salida devuelve el estado lógico "1" si RLO en
la entrada de la instrucción tiene el estado lógico "1". Si el RLO cambia a "0" antes de
transcurrir el tiempo, el temporizador CEI activo se inicializa. La consulta del estado del
temporizador devuelve en este caso el estado lógico "0". Cuando se detecta el siguiente flanco
de señal ascendente en la entrada de la instrucción, se reinicia el temporizador CEI.
El estado actual del temporizador se deposita en el componente de estructura "Q" del
temporizador CEI. El estado del temporizador se puede consultar con una combinación lógica
binaria.
La instrucción "Arrancar temporizador como retardo a la conexión" solo se puede colocar al
final del segmento. Dicha instrucción requiere una operación lógica precedente.
Nota
El arranque y la consulta del temporizador CEI pueden encontrarse en diferentes niveles de
ejecución, pues en cada consulta de las salidas Q o ET se actualiza la estructura IEC_TIMER.

Para CPU S7-1200
La instrucción "Arrancar temporizador como retardo a la conexión" deposita los datos en una
estructura del tipo de datos IEC_TIMER o TON_TIME. La estructura se puede declarar de la
manera siguiente:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER (p. ej.,
"MyIEC_TIMER")
● Declaración como variable local del tipo TON_TIME o IEC_TIMER en la sección "Static" de
un bloque (p. ej., #MyIEC_TIMER)

1044

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Para CPU S7-1500
La instrucción "Arrancar temporizador como retardo a la conexión" deposita los datos en una
estructura del tipo de datos IEC_TIMER, IEC_LTIMER, TON_TIME o TON_LTIME. La
estructura se puede declarar de la manera siguiente:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER o IEC_LTIMER
(p. ej., "MyIEC_TIMER")
● Declaración como variable local del tipo TON_TIME, TON_LTIME, IEC_TIMER o
IEC_LTIMER en la sección "Static" de un bloque (p. ej., #MyIEC_TIMER)

Actualización de los valores actuales en los datos de instancia
Los datos de instancia de "Arrancar temporizador como retardo a la conexión" se actualizan
siguiendo las reglas indicadas a continuación:
● Entrada IN
La instrucción "Arrancar temporizador como retardo a la conexión" compara el RLO actual
con el RLO de la consulta anterior, que está almacenado en el parámetro "IN" de los datos
de instancia. Si la instrucción detecta un cambio del RLO de "0" a "1", significa que hay un
flanco de señal ascendente y se empieza a medir el tiempo. Una vez procesada la
instrucción "Arrancar temporizador como retardo a la conexión", el valor del parámetro IN
se actualiza en los datos de instancia y se utiliza como marca de flancos para la siguiente
consulta.
Tenga en cuenta que la evaluación de flancos falla cuando el valor actual del parámetro IN
es escrito o inicializado por otras funciones.
● Entrada PT
El valor de la entrada PT se escribe en el parámetro PT de los datos de instancia cuando
se produce un cambio de flanco en la entrada IN.
● Salidas Q y ET
Los valores actuales de las salidas Q y ET se actualizan en los casos siguientes:
– Al llamar la instrucción, si las salidas ET o Q están interconectadas.
O bien:
– Al acceder a Q o ET.
Si las salidas no están interconectadas y tampoco se consultan, el valor de tiempo actual
de las salidas Q y ET no se actualiza. Las salidas tampoco se actualizan aunque la
instrucción se omita en el programa.
Para calcular los valores de tiempo de Q y ET se utilizan parámetros internos de la
instrucción "Arrancar temporizador como retardo a la conexión". Tenga en cuenta que la
medición de tiempo falla cuando los valores actuales de la instrucción son escritos o
inicializados por otras funciones.

Programación del PLC
Manual de programación y manejo, 11/2019

1045

Instrucciones
4.1 Instrucciones

PELIGRO
Peligro al reinicializar los valores actuales
Si se reinicializan los valores actuales de un temporizador CEI mientras se está midiendo el
tiempo, se interfiere en la función del temporizador CEI. Esto puede provocar incoherencias
entre el programa y el proceso real. Como consecuencia pueden producirse daños materiales
y personales graves.
Las funciones siguientes pueden provocar la reinicialización de los valores actuales:
● Cargar el bloque con reinicialización
● Cargar instantáneas como valores actuales
● Forzar valores actuales de forma normal o permanente
● La instrucción "WRIT_DBL"
Antes de ejecutar estas funciones, tome las medidas siguientes:
● Asegúrese de que la instalación se encuentra en un estado seguro antes de sobrescribir
los valores actuales.
● Asegúrese de que el temporizador CEI ha finalizado antes de inicializar los valores
actuales.
● Si los valores actuales se sobrescriben con una instantánea, asegúrese de que la
instantánea se haya generado en un instante en que la instalación estaba en un estado
seguro.
● Asegúrese de que el programa no está leyendo ni escribiendo los datos afectados durante
la transferencia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
retardo a la conexión":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de memo‐ Descripción
ria

VALUE

Input

TIME

TIME, LTIME

I, Q, M, D, L o
constante

Tiempo que
cuenta el tem‐
porizador CEI.

<Temporiza‐
dor CEI>

InOut

IEC_TIMER,
TON_TIME

IEC_TIMER,
IEC_LTIMER,
TON_TIME,
TON_LTIME

D, L

Temporizador
CEI que se
arranca.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

1046

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción:
,1

4

37

37

(7
37

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ0\,(&B7,0(5ಯ
ಯ7DJB,QSXWಯ

ಯ7DJB7,0(ಯ

721
7,0(
9$/8(

La instrucción "Arrancar temporizador como retardo a la conexión" se ejecuta cuando el estado
lógico del operando "Tag_Input" cambia de "0" a "1". El temporizador "MyIEC_TIMER" se
arranca por el tiempo que está guardado en el operando "Tag_TIME".
ಯ7DJB2XWSXWಯ
ಯ0\,(&B7,0(5ಯ4

Cuando finaliza el tiempo "MyIEC_TIMER" y el operando "Tag_Input" devuelve el estado lógico
"1", la consulta del estado del temporizador ("MyIEC_TIMER".Q) devuelve el estado lógico "1"
y el operando "Tag_Output" se activa. Cuando el estado lógico del operando "Tag_Input"
cambia a "0", la consulta del estado del temporizador devuelve el estado lógico "0" y el
operando "Tag_Output" se desactiva.

Programación del PLC
Manual de programación y manejo, 11/2019

1047

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de FUP (Página 8005)

TOF: Arrancar temporizador como retardo a la desconexión
Descripción
La instrucción "Arrancar temporizador como retardo a la desconexión" arranca un
temporizador CEI como retardo a la desconexión con un tiempo determinado. La consulta del
estado del temporizador devuelve el estado lógico "1" si el resultado lógico (RLO) de la entrada
de la instrucción devuelve el estado lógico "1". Si el RLO cambia de "1" a "0" (flanco de señal
descendente), el temporizador CEI arranca con el tiempo indicado. Mientras el temporizador
CEI está activado, el estado del temporizador permanece a "1". Una vez transcurrido el tiempo
y si el RLO de la entrada de la instrucción devuelve el estado lógico "0", el estado del
temporizador se ajusta a "0". Si el RLO cambia a "1" antes de transcurrir el tiempo, el
temporizador CEI activo se reinicia y el estado lógico del temporizador permanece a "1".
La instrucción "Arrancar temporizador como retardo a la desconexión" solo se puede colocar
al final del segmento. Dicha instrucción requiere una operación lógica precedente.
El estado actual del temporizador se deposita en el componente de estructura "Q" del
temporizador CEI. El estado del temporizador se puede consultar con una combinación lógica
binaria.
Nota
El arranque y la consulta del temporizador CEI pueden encontrarse en diferentes niveles de
ejecución, pues en cada consulta de las salidas Q o ET se actualiza la estructura IEC_TIMER.

Para CPU S7-1200
La instrucción "Arrancar temporizador como retardo a la desconexión" deposita los datos en
una estructura del tipo de datos IEC_TIMER o TOF_TIME. La estructura se puede declarar de
la manera siguiente:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER (p. ej.,
"MyIEC_TIMER")
● Declaración como variable local del tipo TOF_TIME o IEC_TIMER en la sección "Static" de
un bloque (p. ej., #MyIEC_TIMER)

1048

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Para CPU S7-1500
La instrucción "Arrancar temporizador como retardo a la desconexión" deposita los datos en
una estructura del tipo de datos IEC_TIMER, IEC_LTIMER, TOF_TIME o TOF_LTIME. La
estructura se puede declarar de la manera siguiente:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER o IEC_LTIMER
(p. ej., "MyIEC_TIMER")
● Declaración como variable local del tipo TOF_TIME, TOF_LTIME, IEC_TIMER o
IEC_LTIMER en la sección "Static" de un bloque (p. ej., #MyIEC_TIMER)

Actualización de los valores actuales en los datos de instancia
Los datos de instancia de "Arrancar temporizador como retardo a la desconexión" se
actualizan siguiendo las reglas indicadas a continuación:
● Entrada IN
La instrucción "Arrancar temporizador como retardo a la desconexión" compara el RLO
actual con el RLO de la consulta anterior, que está almacenado en el parámetro "IN" de los
datos de instancia. Si la instrucción detecta un cambio del RLO de "1" a "0", significa que
hay un flanco de señal descendente y se empieza a contar el tiempo. Una vez procesada
la instrucción "Arrancar temporizador como retardo a la desconexión", el valor del
parámetro IN se actualiza en los datos de instancia y se utiliza como marca de flancos para
la siguiente consulta.
Tenga en cuenta que la evaluación de flancos falla cuando el valor actual del parámetro "IN"
es escrito o inicializado por otras funciones.
● Entrada PT
El valor de la entrada PT se escribe en el parámetro PT de los datos de instancia cuando
se produce un cambio de flanco en la entrada IN.
● Salidas Q y ET
Los valores actuales de las salidas Q y ET se actualizan en los casos siguientes:
– Al llamar la instrucción, si las salidas ET o Q están interconectadas.
O bien:
– Al acceder a Q o ET.
Si las salidas no están interconectadas y tampoco se consultan, el valor de tiempo actual
de las salidas Q y ET no se actualiza. Las salidas tampoco se actualizan aunque la
instrucción se omita en el programa.
Para calcular los valores de tiempo de Q y ET se utilizan parámetros internos de la
instrucción "Arrancar temporizador como retardo a la desconexión". Tenga en cuenta que
la medición de tiempo falla cuando los valores actuales de la instrucción son escritos o
inicializados por otras funciones.

Programación del PLC
Manual de programación y manejo, 11/2019

1049

Instrucciones
4.1 Instrucciones

PELIGRO
Peligro al reinicializar los valores actuales
Si se reinicializan los valores actuales de un temporizador CEI mientras se está midiendo el
tiempo, se interfiere en la función del temporizador CEI. Esto puede provocar incoherencias
entre el programa y el proceso real. Como consecuencia pueden producirse daños materiales
y personales graves.
Las funciones siguientes pueden provocar la reinicialización de los valores actuales:
● Cargar el bloque con reinicialización
● Cargar instantáneas como valores actuales
● Forzar valores actuales de forma normal o permanente
● La instrucción "WRIT_DBL"
Antes de ejecutar estas funciones, tome las medidas siguientes:
● Asegúrese de que la instalación se encuentra en un estado seguro antes de sobrescribir
los valores actuales.
● Asegúrese de que el temporizador CEI ha finalizado antes de inicializar los valores
actuales.
● Si los valores actuales se sobrescriben con una instantánea, asegúrese de que la
instantánea se haya generado en un instante en que la instalación estaba en un estado
seguro.
● Asegúrese de que el programa no está leyendo ni escribiendo los datos afectados durante
la transferencia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
retardo a la desconexión":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de memo‐ Descripción
ria

VALUE

Input

TIME

TIME, LTIME I, Q, M, D, L o
constante

Tiempo que cuenta el
temporizador CEI.

<Temporiza‐
dor CEI>

InOut

IEC_TIMER,
TOF_TIME

IEC_TIMER,
IEC_LTI‐
MER,
TOF_TIME,
TOF_LTIME

Temporizador CEI
que se arranca.

D, L

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

1050

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción:
,1

4
37

37

(7
37

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
0\,(&B7,0(5

72)

ಯ7DJB,QSXWಯ

ಯ7DJB7,0(ಯ

7,0(
9$/8(

La instrucción "Arrancar temporizador como retardo a la desconexión" se ejecuta cuando el
estado lógico del operando "Tag_Input" cambia de "1" a "0". El temporizador #MyIEC_TIMER
se inicia por el tiempo que está guardado en el operando "Tag_TIME".
ಯ7DJB2XWSXWಯ
0\,(&B7,0(5

Mientras se ejecuta el temporizador #MyIEC_TIMER, la consulta del estado del temporizador
(#MyIEC_TIMER.Q) devuelve el estado lógico "1" y el operando "Tag_Output" se activa. Una
vez transcurrido el tiempo y si el operando "Tag_Input" devuelve el estado lógico "0", la
consulta del estado del temporizador devuelve el estado lógico "0". Cuando el estado lógico del
operando "Tag_Input" cambia a "1" antes de transcurrir el temporizador #MyIEC_TIMER, el
temporizador se inicializa. Cuando el estado lógico del operando "Tag_Input" es "1", la
consulta del estado del temporizador devuelve el estado lógico "1".

Programación del PLC
Manual de programación y manejo, 11/2019

1051

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de FUP (Página 8005)

TONR: Acumulador de tiempo
Descripción
La instrucción "Acumulador de tiempo" cuenta durante cuánto tiempo es "1" la señal en la
entrada de la instrucción. La medición de tiempo se inicia cuando el resultado lógico (RLO)
cambia de "0" a "1" (flanco de señal ascendente). Mientras el RLO sea "1", se cuenta el tiempo.
Si el RLO cambia a "0", se detiene la lectura de tiempo. Si el RLO cambia nuevamente a "1",
se sigue contando el tiempo. La consulta de si el estado del temporizador es "1" devuelve el
estado lógico "1" si el tiempo contado supera el tiempo especificado y el RLO a la entrada de
la bobina es "1".
El estado actual del temporizador se deposita en el componente de estructura "Q" del
temporizador CEI. El estado del temporizador se consulta con un contacto normalmente
abierto para saber si es "1" o con un contacto normalmente cerrado para saber si es "0".
El estado del temporizador "Q" y el tiempo leído actualmente "ET" se pueden poner a "0" con
la instrucción "Inicializar temporizador".
En el <Operando1> (tiempo) debajo de la instrucción se introduce el tiempo y en el
<Operando2> (temporizador CEI) encima de la instrucción se introduce el temporizador CEI
que se arrancará.
La instrucción "Acumulador de tiempo" solo se puede colocar al final del segmento. Dicha
instrucción requiere una operación lógica precedente.
Nota
El arranque y la consulta del temporizador CEI pueden encontrarse en diferentes niveles de
ejecución, pues en cada consulta de las salidas Q o ET se actualiza la estructura IEC_TIMER.

Para CPU S7-1200
La instrucción "Acumulador de tiempo" deposita los datos en una estructura del tipo de datos
IEC_TIMER o TONR_TIME. La estructura se puede declarar de la manera siguiente:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER (p. ej.,
"MyIEC_TIMER")
● Declaración como variable local del tipo TONR_TIME o IEC_TIMER en la sección "Static"
de un bloque (p. ej., #MyIEC_TIMER)

1052

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Para CPU S7-1500
La instrucción "Acumulador de tiempo" deposita los datos en una estructura del tipo de datos
IEC_TIMER, IEC_LTIMER, TONR_TIME o TONR_LTIME. La estructura se puede declarar de
la manera siguiente:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_TIMER o IEC_LTIMER
(p. ej., "MyIEC_TIMER")
● Declaración como variable local del tipo TONR_TIME, TONR_LTIME, IEC_TIMER o
IEC_LTIMER en la sección "Static" de un bloque (p. ej., #MyIEC_TIMER)

Actualización de los valores actuales en los datos de instancia
Los datos de instancia de "Acumulador de tiempo" se actualizan siguiendo las reglas indicadas
a continuación:
● Entrada IN
La instrucción "Acumulador de tiempo" compara el RLO actual con el RLO de la consulta
anterior, que está almacenado en el parámetro "IN" de los datos de instancia. Si la
instrucción detecta un cambio del RLO de "0" a "1", significa que hay un flanco de señal
ascendente y se reanuda la medición de tiempo. Si la instrucción detecta un cambio de "1"
a "0" en el RLO, significa que hay un flanco de señal descendente y la medición de tiempo
se interrumpe. Una vez procesada la instrucción "Acumulador de tiempo", el valor del
parámetro IN se actualiza en los datos de instancia y se utiliza como marca de flancos para
la siguiente consulta.
Tenga en cuenta que la evaluación de flancos falla cuando el valor actual del parámetro IN
es escrito o inicializado por otras funciones.
● Entrada PT
El valor de la entrada PT se escribe en el parámetro PT de los datos de instancia cuando
se produce un cambio de flanco en la entrada IN.
● Entrada R
La señal "1" en la entrada R inicializa la medición de tiempo y la bloquea. Los flancos en la
entrada IN se ignoran. La señal "0" en la entrada R habilita de nuevo la medición de tiempo.
● Salidas Q y ET
Los valores actuales de las salidas Q y ET se actualizan en los casos siguientes:
– Al llamar la instrucción, si las salidas ET o Q están interconectadas.
O bien:
– Al acceder a Q o ET.
Si las salidas no están interconectadas y tampoco se consultan, el valor de tiempo actual
de las salidas Q y ET no se actualiza. Las salidas tampoco se actualizan aunque la
instrucción se omita en el programa.
Para calcular los valores de tiempo de Q y ET se utilizan parámetros internos de la
instrucción "Acumulador de tiempo". Tenga en cuenta que la medición de tiempo falla
cuando los valores actuales de la instrucción son escritos o inicializados por otras
funciones.

Programación del PLC
Manual de programación y manejo, 11/2019

1053

Instrucciones
4.1 Instrucciones

PELIGRO
Peligro al reinicializar los valores actuales
Si se reinicializan los valores actuales de un temporizador CEI mientras se está midiendo el
tiempo, se interfiere en la función del temporizador CEI. Esto puede provocar incoherencias
entre el programa y el proceso real. Como consecuencia pueden producirse daños materiales
y personales graves.
Las funciones siguientes pueden provocar la reinicialización de los valores actuales:
● Cargar el bloque con reinicialización
● Cargar instantáneas como valores actuales
● Forzar valores actuales de forma normal o permanente
● La instrucción "WRIT_DBL"
Antes de ejecutar estas funciones, tome las medidas siguientes:
● Asegúrese de que la instalación se encuentra en un estado seguro antes de sobrescribir
los valores actuales.
● Asegúrese de que el temporizador CEI ha finalizado antes de inicializar los valores
actuales.
● Si los valores actuales se sobrescriben con una instantánea, asegúrese de que la
instantánea se haya generado en un instante en que la instalación estaba en un estado
seguro.
● Asegúrese de que el programa no está leyendo ni escribiendo los datos afectados durante
la transferencia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Acumulador de tiempo":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de memoria

Descrip‐
ción

VALUE

Input

TIME

TIME, LTIME

I, Q, M, D, L o cons‐
tante

Tiempo
que
cuenta el
tempori‐
zador
CEI.

<Temporiza‐
dor CEI>

InOut

IEC_TIMER,
TONR_TIME

IEC_TIMER,
IEC_LTIMER,
TONR_TIME,
TONR_LTIME

D, L

Tempori‐
zador
CEI que
se arran‐
ca.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

1054

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción:
,1

5

4

37

(7

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ0\,(&B7,0(5ಯ
ಯ7DJB,QSXWಯ

ಯ7DJB7,0(ಯ

7215
7,0(
9$/8(

La instrucción "Acumulador de tiempo" se ejecuta cuando se detecta un flanco de señal
ascendente en el RLO. Mientras el operando "Tag_Input" devuelva el estado lógico "1", se
cuenta el tiempo.
ಯ7DJB2XWSXWಯ
ಯ0\,(&B7,0(5ಯ4

Si el tiempo contado supera el valor del operando "Tag_TIME", la consulta del estado del
temporizador ("MyIEC_TIMER".Q) devuelve el estado lógico "1" y el operando "Tag_Output"
se activa.

Programación del PLC
Manual de programación y manejo, 11/2019

1055

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
RT: Inicializar temporizador (Página 1056)
Instancias (Página 61)
Principios básicos de FUP (Página 8005)

RT: Inicializar temporizador
Descripción
La instrucción "Inicializar temporizador" permite poner a "0" un temporizador CEI. Para indicar
el temporizador CEI que debe reiniciarse, introduzca en el comodín ubicado sobre la
instrucción el nombre del bloque de datos que contiene la estructura del temporizador CEI.
La instrucción se ejecuta solo si el resultado lógico (RLO) de la entrada del cuadro es "1". Al
ejecutarse la función se ponen a "0" los componentes de estructura del temporizador CEI en
el bloque de datos indicado. Si el RLO de la entrada del cuadro es "0", no se ejecuta la
instrucción.
La instrucción no afecta al RLO. El RLO de la entrada del cuadro se transfiere directamente a
la salida.
A la instrucción "Inicializar temporizador" debe asignársele un temporizador CEI declarado en
el programa.

Actualización de los valores actuales
Los datos de la instrucción se actualizan únicamente al efectuar una llamada de la instrucción,
y no cada vez que se accede al temporizador CEI asignado. La consulta de datos es igual a la
llamada de instrucción únicamente hasta la siguiente llamada de instrucción.

1056

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

PELIGRO
Peligro al reinicializar los valores actuales
Si se reinicializan los valores actuales de un temporizador CEI mientras se está ejecutando
el temporizador, se interfiere en la función del temporizador CEI. Esto puede provocar
incoherencias entre el programa y el proceso real. Como consecuencia pueden producirse
daños materiales y personales graves.
Las funciones siguientes pueden provocar la reinicialización de los valores actuales:
● Cargar el bloque con reinicialización
● Cargar instantáneas como valores actuales
● Forzar valores actuales de forma normal o permanente
● La instrucción "WRIT_DBL"
Antes de ejecutar estas funciones, tome las medidas siguientes:
● Asegúrese de que la instalación se encuentra en un estado seguro antes de sobrescribir
los valores actuales.
● Asegúrese de que el temporizador CEI ha finalizado antes de inicializar los valores
actuales.
● Si los valores actuales se sobrescriben con una instantánea, asegúrese de que la
instantánea se haya generado en un instante en que la instalación estaba en un estado
seguro.
● Asegúrese de que el programa no está leyendo ni escribiendo los datos afectados durante
la transferencia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Inicializar temporizador":
Parámetro
<Temporiza‐
dor CEI>

Declaración
InOut

Tipo de datos
S7-1200

S7-1500

IEC_TIMER,
TP_TIME,
TON_TIME,
TOF_TIME,
TONR_TIME

IEC_TIMER,
IEC_LTIMER,
TP_TIME,
TP_LTIME,
TON_TIME,
TON_LTIME,
TOF_TIME,
TOF_LTIME,
TONR_TIME,
TONR_LTIME

Área de memo‐ Descripción
ria
D, L

Temporizador
CEI que se ini‐
cializa.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

1057

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ721B'%ಯ
721
7,0(
ಯ7DJB,QSXWBಯ

,1

(7

ಯ7DJB37ಯ

37

4

ಯ7DJB(7ಯ

ಯ7DJB6WDWXVಯ

Cuando el estado lógico del operando "Tag_Input_1" cambia de "0" a "1", se ejecuta la
instrucción "Retardo al conectar". El temporizador CEI depositado en el bloque de datos de
instancia "TON_DB" arranca con el tiempo predeterminado por el operando "Tag_PT".
ಯ7DJB,QSXWBಯ

ಯ721B'%ಯ

ಯ7DJB,QSXWBಯ

57

Si los operandos "Tag_Input_2" y "Tag_Input_3" devuelven el estado lógico "1", se ejecuta la
instrucción "Inicializar temporizador" y se reinicia el temporizador CEI depositado en el bloque
de datos "TON_DB".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de FUP (Página 8005)

PT: Cargar tiempo
Descripción
La instrucción "Cargar tiempo" parametriza la duración de un temporizador CEI. La instrucción
se ejecuta en cada ciclo cuando el resultado lógico (RLO) de la entrada del cuadro de la
instrucción tiene el estado lógico "1". La instrucción escribe el tiempo indicado en la estructura
del temporizador CEI indicado.
A la instrucción "Cargar tiempo" debe asignársele un temporizador CEI declarado en el
programa.
Nota
Si el temporizador CEI indicado se ejecuta mientras se ejecuta la instrucción, esta sobrescribe
el tiempo actual del temporizador CEI indicado. Esto puede modificar el estado del
temporizador CEI.

1058

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Actualización de los valores actuales
La actualización de los datos de la instrucción se lleva a cabo cuando se llama la instrucción
y cada vez que se accede al temporizador CEI asignado. La consulta de Q o ET (p. ej.
"MyTimer".Q y "MyTimer".ET) actualiza la estructura de IEC_TIMER.
PELIGRO
Peligro al reinicializar los valores actuales
Si se reinicializan los valores actuales de un temporizador CEI mientras se está ejecutando
el temporizador, se interfiere en la función del temporizador CEI. Esto puede provocar
incoherencias entre el programa y el proceso real. Como consecuencia pueden producirse
daños materiales y personales graves.
Las funciones siguientes pueden provocar la reinicialización de los valores actuales:
● Cargar el bloque con reinicialización
● Cargar instantáneas como valores actuales
● Forzar valores actuales de forma normal o permanente
● La instrucción "WRIT_DBL"
Antes de ejecutar estas funciones, tome las medidas siguientes:
● Asegúrese de que la instalación se encuentra en un estado seguro antes de sobrescribir
los valores actuales.
● Asegúrese de que el temporizador CEI ha finalizado antes de inicializar los valores
actuales.
● Si los valores actuales se sobrescriben con una instantánea, asegúrese de que la
instantánea se haya generado en un instante en que la instalación estaba en un estado
seguro.
● Asegúrese de que el programa no está leyendo ni escribiendo los datos afectados durante
la transferencia.

Programación del PLC
Manual de programación y manejo, 11/2019

1059

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Cargar tiempo":
Parámetro

Declaración

Tipo de datos
S7-1200

S7-1500

Área de memo‐ Descripción
ria

PT

Input

TIME

TIME, LTIME

I, Q, M, D, L o
constante

Tiempo

<Temporiza‐
dor CEI>

InOut

IEC_TIMER,
TP_TIME,
TON_TIME,
TOF_TIME,
TONR_TIME

IEC_TIMER,
IEC_LTIMER,
TP_TIME,
TP_LTIME,
TON_TIME,
TON_LTIME,
TOF_TIME,
TOF_LTIME,
TONR_TIME,
TONR_LTIME

D, L

Temporizador
CEI cuyo tiem‐
po se ajusta.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ721B'%ಯ
721
7,0(
ಯ7DJB,QSXWBಯ

,1

(7

ಯ7DJB37ಯ

37

4

ಯ7DJB(7ಯ

ಯ7DJB6WDWXVಯ

Cuando el estado lógico del operando "Tag_Input_1" cambia de "0" a "1", se ejecuta la
instrucción "Retardo al conectar". El temporizador CEI depositado en el bloque de datos de
instancia "TON_DB" arranca con el tiempo predeterminado por el operando "Tag_PT".
ಯ721B'%ಯ

37

ಯ7DJB,QSXWBಯ
ಯ7DJB37Bಯ

37

Cuando el estado lógico del operando "Tag_Input_2" es "1", se ejecuta la instrucción "Cargar
tiempo". La instrucción escribe el tiempo "Tag_PT_2" en el bloque de datos de instancia
"TON_DB" y sobrescribe a la vez el valor del operando "Tag_PT" en el bloque de datos. Esto
puede modificar el estado lógico del estado del temporizador en la siguiente consulta o al
acceder a "MyTimer".Q o "MyTimer".ET.
Nota
"Tag_Input_2" se ejecuta como marca de impulso para poder efectuar la carga de tiempo solo
durante un ciclo del programa.

1060

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de FUP (Página 8005)

Legacy
S_PULSE: Parametrizar y arrancar temporizador como impulso
Descripción
Con la instrucción "Parametrizar y arrancar temporizador como impulso" se arranca un
temporizador programado al detectarse un cambio en el resultado lógico (RLO) de "0" a "1"
(flanco de señal ascendente) en la entrada S. El temporizador cuenta el tiempo programado
(TV) mientras el estado lógico de la entrada S sea "1". Si el estado lógico en la entrada S
cambia a "0" antes de que transcurra el tiempo programado, se detiene el temporizador. En tal
caso, el estado lógico de la salida Q es "0".
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo. El valor de tiempo actual se emite codificado en binario por la salida
BI y codificado en BCD por la salida BCD.
Si el temporizador está contando y el estado lógico de la entrada R cambia a "1", el valor actual
de tiempo y la base de tiempo también se ponen a cero. Si el temporizador no está en marcha,
el estado lógico "1" de la entrada R no provoca ningún efecto.
La instrucción "Parametrizar y arrancar temporizador como impulso" requiere una operación
lógica precedente para la evaluación de flancos y se puede colocar dentro o en el extremo del
segmento.
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

Programación del PLC
Manual de programación y manejo, 11/2019

1061

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y arrancar
temporizador como impulso":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador de la instruc‐
ción
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, T, C, D, L,
P o constante

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo

R

Input

BOOL

I, Q, M, T, C, D, L,
P o constante

Entrada de reset

BI

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en binario)

BCD

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L, P

Estado del temporizador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

1062

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como impulso":
W

W

W

5/2HQODHQWUDGD6

5/2HQODHQWUDGD5

7HPSRUL]DGRU
HQPDUFKD

&RQVXOWDಯಯ

&RQVXOWDಯಯ

W WLHPSRSURJUDPDGR

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7LPHUBಯ
6B38/6(
ಯ7DJ,QBಯ
ಯ7DJ,QB1XPEHUಯ

6
79

%,

ಯ7DJ9DOXHBಯ

%&'

ಯ7DJ9DOXHBಯ
ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

5

4

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador empieza a contar con el valor de tiempo del operando
"TagIn_Number" y sigue contando mientras el operando "TagIn_1" devuelva el estado lógico
"1". Si el estado lógico del operando "TagIn_1" cambia de "1" a "0" antes de que transcurra el
tiempo, el temporizador "Timer_1" se detiene. En ese caso, el operando "TagOut" se pone a
"0".
Programación del PLC
Manual de programación y manejo, 11/2019

1063

Instrucciones
4.1 Instrucciones
El operando "TagOut" devuelve el estado lógico "1" mientras el temporizador esté en marcha
y el operando "TagIn_1" tenga el estado lógico "1". Una vez transcurrido el tiempo o si se
inicializa el temporizador, el operando "TagOut" se pone a "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 1604)
Principios básicos de FUP (Página 8005)

S_PEXT: Parametrizar y arrancar temporizador como impulso prolongado
Descripción
Con la instrucción "Parametrizar y arrancar temporizador como impulso prolongado" se
arranca un temporizador programado al detectarse un cambio en el resultado lógico (RLO) de
"0" a "1" (flanco de señal ascendente) en la entrada S. El temporizador cuenta el tiempo
programado (TV), aunque el estado lógico de la entrada S cambie a "0". Mientras se ejecuta
el temporizador, la salida Q devuelve el estado lógico "1". Una vez transcurrido el tiempo, la
salida Q se pone a "0". Si el estado lógico en la entrada S cambia de "0" a "1" mientras se
cuenta el tiempo, este se reinicia con el tiempo programado en la entrada TV.
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo. El valor de tiempo actual se emite codificado en binario por la salida
BI y codificado en BCD por la salida BCD.
Si el temporizador está contando y el estado lógico de la entrada R cambia a "1", el valor actual
de tiempo y la base de tiempo también se ponen a cero. Si el temporizador no está en marcha,
el estado lógico "1" de la entrada R no provoca ningún efecto.
La instrucción "Parametrizar y arrancar temporizador como impulso prolongado" requiere una
operación lógica precedente para la evaluación de flancos y se puede colocar dentro o en el
extremo del segmento.
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

1064

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y arrancar
temporizador como impulso prolongado":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador de la instruc‐
ción
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, T, C, D, L,
P o constante

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo

R

Input

BOOL

I, Q, M, T, C, D, L,
P o constante

Entrada de reset

BI

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en binario)

BCD

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L, P

Estado del temporizador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

1065

Instrucciones
4.1 Instrucciones

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como impulso prolongado":
W

W

W

5/2HQODHQWUDGD6

5/2HQODHQWUDGD5

(OWHPSRUL]DGRUHVW£HQ
PDUFKD

&RQVXOWDಯಯ

&RQVXOWDಯಯ
W WLHPSRSURJUDPDGR

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7LPHUBಯ
6B3(;7
ಯ7DJ,QBಯ
ಯ7DJ,QB1XPEHUಯ

6
79

%,

ಯ7DJ9DOXHBಯ

%&'

ಯ7DJ9DOXHBಯ
ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

5

4

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador empieza a contar con el valor de tiempo del operando
"TagIn_Number" sin verse afectado por un flanco descendente en la entrada S. Si el estado
lógico del operando "TagIn_1" cambia de "0" a "1" antes de que transcurra el tiempo, el
temporizador se reinicia.

1066

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
El operando "TagOut" devuelve el estado lógico "1" mientras el temporizador esté en marcha.
Una vez transcurrido el tiempo o si se inicializa el temporizador, el operando "TagOut" se pone
a "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 1604)
Principios básicos de FUP (Página 8005)

S_ODT: Parametrizar y arrancar temporizador como retardo a la conexión
Descripción
Con la instrucción "Parametrizar y arrancar temporizador como retardo a la conexión" se
arranca un temporizador programado como retardo a la conexión al detectarse un cambio en
el resultado lógico (RLO) de "0" a "1" (flanco de señal ascendente) en la entrada S. El
temporizador cuenta el tiempo programado (TV) mientras el estado lógico de la entrada S sea
"1". Una vez transcurrido el tiempo debidamente y si la entrada S aún tiene el valor lógico "1",
la salida Q devuelve el valor lógico "1". Si el estado de la entrada S cambia de "1" a "0" mientras
se cuenta el tiempo, el temporizador se detiene. En este caso, la salida Q adopta el estado
lógico "0".
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo. El valor de tiempo actual se emite codificado en binario por la salida
BI y codificado en BCD por la salida BCD.
Si el temporizador está contando y el estado lógico de la entrada R cambia de "0" a "1", el valor
actual de tiempo y la base de tiempo también se ponen a cero. En ese caso, el estado lógico
de la salida Q es "0". El temporizador se reinicia cuando el estado lógico de la entrada R es "1",
incluso si el temporizador no se ejecuta y el RLO en la entrada S es "1".
La instrucción "Parametrizar y arrancar temporizador como retardo a la conexión" requiere una
operación lógica precedente para la evaluación de flancos y se puede colocar dentro o en el
extremo del segmento.
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.

Programación del PLC
Manual de programación y manejo, 11/2019

1067

Instrucciones
4.1 Instrucciones
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y arrancar
temporizador como retardo a la conexión":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador de la instruc‐
ción
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, T, C, D, L,
P o constante

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo

R

Input

BOOL

I, Q, M, T, C, D, L,
P o constante

Entrada de reset

BI

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en binario)

BCD

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L, P

Estado del temporizador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

1068

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como retardo a la conexión":
W

W

W

5/2HQODHQWUDGD6

5/2HQODHQWUDGD5

(OWHPSRUL]DGRUHVW£HQ
PDUFKD

&RQVXOWD

&RQVXOWD
W WLHPSRSURJUDPDGR

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7LPHUBಯ
6B2'7
ಯ7DJ,QBಯ
ಯ7DJ,QB1XPEHUಯ

6
79

%,

ಯ7DJ9DOXHBಯ

%&'

ಯ7DJ9DOXHBಯ
ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

5

4

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador cuenta el valor de tiempo del operando "TagIn_Number".
Una vez transcurrido el tiempo y si el operando tiene el estado lógico "1", el operando "TagOut"
se pone a "1". Si el estado lógico del operando "TagIn_1" cambia de "1" a "0" antes de que
transcurra el tiempo, el temporizador se detiene. El operando "TagOut" devuelve en ese caso
el estado lógico "0".

Programación del PLC
Manual de programación y manejo, 11/2019

1069

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 1604)
Principios básicos de FUP (Página 8005)

S_ODTS: Parametrizar y arrancar temporizador como retardo a la conexión con memoria
Descripción
Con la instrucción "Parametrizar y arrancar temporizador como retardo a la conexión con
memoria" se arranca un temporizador programado al detectarse un cambio en el resultado
lógico (RLO) de "0" a "1" (flanco de señal ascendente) en la entrada S. El temporizador cuenta
el tiempo programado (TV), aunque el estado lógico de la entrada S cambie a "0". Una vez
transcurrido el tiempo, la salida Q devuelve el estado lógico "1" independientemente del estado
lógico de la entrada S. Si el estado lógico de la entrada S cambia de "0" a "1" mientras se
cuenta el tiempo, el temporizador vuelve a arrancar con el tiempo programado (TV).
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo. El valor de tiempo actual se emite codificado en binario por la salida
BI y codificado en BCD por la salida BCD.
El estado lógico "1" de la entrada R pone a "0" el valor actual de tiempo y la base de tiempo,
independientemente del estado lógico de la entrada de arranque S. En ese caso, el estado
lógico de la salida Q es "0".
La instrucción "Parametrizar y arrancar temporizador como retardo a la conexión con
memoria" requiere una operación lógica precedente para la evaluación de flancos y se puede
colocar dentro o en el extremo del segmento.
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

1070

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y arrancar
temporizador como retardo a la conexión con memoria":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador de la instruc‐
ción
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, T, C, D, L,
P o constante

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo

R

Input

BOOL

I, Q, M, T, C, D, L,
P o constante

Entrada de reset

BI

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en binario)

BCD

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L, P

Estado del temporizador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como retardo a la conexión con memoria":
W

W

W

5/2HQODHQWUDGD6

5/2HQODHQWUDGD5

(OWHPSRUL]DGRUHVW£HQ
PDUFKD
&RQVXOWD
&RQVXOWD
W WLHPSRSURJUDPDGR

Programación del PLC
Manual de programación y manejo, 11/2019

1071

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7LPHUBಯ
6B2'76
ಯ7DJ,QBಯ
ಯ7DJ,QB1XPEHUಯ

6
79

%,

ಯ7DJ9DOXHBಯ

%&'

ಯ7DJ9DOXHBಯ
ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

5

4

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador cuenta el valor de tiempo del operando "TagIn_Number"
aunque el estado lógico del operando "TagIn_1" cambie a "0". Una vez transcurrido el tiempo,
el operando "TagOut" se pone a "1". Si el estado lógico del operando "TagIn_1" cambia de "0"
a "1" mientras el temporizador está en marcha, se reinicia el temporizador.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 1604)
Principios básicos de FUP (Página 8005)

S_OFFDT: Parametrizar y arrancar temporizador como retardo a la desconexión
Descripción
Con la instrucción "Parametrizar y arrancar temporizador como retardo a la desconexión" se
arranca un temporizador programado al detectarse un cambio en el resultado lógico (RLO) de
"1" a "0" (flanco de señal descendente) en la entrada S. El temporizador empieza a contar con
el tiempo programado (TV). Mientras el temporizador está en marcha o la entrada S devuelve
el estado lógico "1", la salida Q tiene el estado lógico "1". Si el tiempo ha transcurrido y el
estado lógico es "0", la salida Q adopta el valor lógico "0". Si el estado lógico en la entrada S
cambia de "0" a "1" mientras el temporizador está funcionando, este se detiene. El
temporizador no vuelve a arrancar hasta que no se detecta un flanco de señal descendente en
la entrada S.
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo. El valor de tiempo actual se emite codificado en binario por la salida
BI y codificado en BCD por la salida BCD.
El estado lógico "1" en la entrada R pone a "0" el valor de tiempo y la base de tiempo actuales.
En ese caso, el estado lógico de la salida Q es "0".
La instrucción "Parametrizar y arrancar temporizador como retardo a la desconexión" requiere
una operación lógica precedente para la evaluación de flancos y se puede colocar dentro o en
el extremo del segmento.

1072

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y arrancar
temporizador como retardo a la desconexión":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador de la instruc‐
ción
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, T, C, D, L,
P o constante

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo

R

Input

BOOL

I, Q, M, T, C, D, L,
P o constante

Entrada de reset

BI

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en binario)

BCD

Output

WORD

I, Q, M, D, L, P

Valor de tiempo actual (codi‐
ficado en BCD)

Q

Output

BOOL

I, Q, M, D, L, P

Estado del temporizador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

1073

Instrucciones
4.1 Instrucciones

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como retardo a la desconexión":
W

W

W

W

5/2HQODHQWUDGD6

5/2HQODHQWUDGD5

(OWHPSRUL]DGRUHVW£HQ
PDUFKD

&RQVXOWD

&RQVXOWD
W WLHPSRSURJUDPDGR

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7LPHUBಯ
6B2))'7
ಯ7DJ,QBಯ
ಯ7DJ,QB1XPEHUಯ

6
79

%,

ಯ7DJ9DOXHBಯ

%&'

ಯ7DJ9DOXHBಯ
ಯ7DJ2XWಯ

ಯ7DJ,QBಯ

5

4

Cuando el estado lógico del operando "TagIn_1" cambia de "1" a "0", el temporizador "Timer_1"
se pone en marcha. El temporizador cuenta el valor de tiempo del operando "TagIn_Number".
El operando "TagOut" devuelve el estado lógico "1" mientras el temporizador está en marcha
o el operando "TagIn_1" tiene el estado lógico "0". Si el estado lógico del operando "TagIn_1"
cambia de "0" a "1" mientras el temporizador está en marcha, el temporizador se reinicia.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 1604)
Principios básicos de FUP (Página 8005)

1074

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

SP: Arrancar temporizador como impulso
Descripción
La instrucción "Arrancar temporizador como impulso" arranca un temporizador programado al
detectarse un cambio en el resultado lógico (RLO) de "0" a "1" (flanco de señal ascendente) en
la entrada de arranque. El temporizador cuenta el tiempo indicado mientras el RLO devuelva
el estado lógico "1". Mientras el temporizador está en marcha, una consulta de si el estado del
temporizador es "1" da como resultado "1". Si el RLO cambia de "1" a "0" antes de que haya
transcurrido el valor de tiempo, el temporizador se detiene. En ese caso, una consulta de si el
estado del temporizador es "1" da como resultado "0".
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo.
La instrucción "Arrancar temporizador como impulso" requiere una operación lógica
precedente para la evaluación de flancos y solo se puede colocar en el margen derecho del
segmento.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
impulso":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, T, C, D, L,
P

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

Programación del PLC
Manual de programación y manejo, 11/2019

1075

Instrucciones
4.1 Instrucciones
Segmento 1:
7LPHUB
6,

7DJ,QB
7DJ,QB1XPEHU

7:

Cuando el estado lógico del operando #TagIn_1 cambia de "0" a "1", el temporizador #Timer_1
arranca. El temporizador empieza a contar con el valor de tiempo del operando
#TagIn_Number y sigue contando mientras el operando #TagIn_1 devuelva el estado lógico
"1". Si el estado lógico del operando #TagIn_1 cambia de "1" a "0" antes de que transcurra el
tiempo, el temporizador se detiene.
Segmento 2:
7DJ2XW
7LPHUB

Mientras el temporizador está en marcha, el operando #TagOut devuelve el estado lógico "1".
Segmento 3:
7LPHUB
7DJ,QB

5

Si el estado lógico del operando #TagIn_2 cambia de "0" a "1", el temporizador se inicializa, es
decir, se detiene y el valor de tiempo actual se pone a "0".
La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJ,QBಯ

'HVDFWLYDU

ಯ7DJ,QBಯ

7HPSRUL]DGRU

ಯ7LPHUBಯ

6DOLGD

ಯ7DJ2XWಯ

W

W WLHPSRSURJUDPDGR

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 1604)
Principios básicos de FUP (Página 8005)

1076

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

SE: Arrancar temporizador como impulso prolongado
Descripción
La instrucción "Arrancar temporizador como impulso prolongado" arranca un temporizador
programado al detectarse un cambio en el resultado lógico (RLO) de "0" a "1" (flanco de señal
ascendente) en la entrada de arranque. El temporizador cuenta el tiempo indicado, aunque el
RLO cambie al estado lógico "0". Mientras el temporizador está en marcha, una consulta de si
el estado del temporizador es "1" da como resultado "1". Si el RLO cambia de "0" a "1" mientras
el temporizador está funcionando, este se arranca de nuevo con el tiempo programado. La
consulta sobre si el estado es "1" da como resultado "0" si el tiempo ha transcurrido.
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización aquí: L: Cargar valor del
temporizador (Página 1604)

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
impulso prolongado":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, T, C, D, L,
P

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
Segmento 1:

Programación del PLC
Manual de programación y manejo, 11/2019

1077

Instrucciones
4.1 Instrucciones
7LPHUB
69

7DJ,QB
7DJ,QB1XPEHU

7:

Cuando el estado lógico del operando #TagIn_1 cambia de "0" a "1", el temporizador #Timer_1
arranca. El temporizador empieza a contar con el valor de tiempo del operando
#TagIn_Number sin verse afectado por un flanco de señal descendente en el RLO.
Segmento 2:
7DJ2XW
7LPHUB

Mientras el temporizador está en marcha, el operando #TagOut devuelve el estado lógico "1".
Segmento 3:
7LPHUB
7DJ,QB

5

Si el estado lógico del operando #TagIn_1 vuelve a cambiar de "0" a "1" antes de que
transcurra el tiempo, el temporizador se inicializa.
La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJ,QBಯ

'HVDFWLYDU

ಯ7DJ,QBಯ

7HPSRUL]DGRU

ಯ7LPHUBಯ

6DOLGD

ಯ7DJ2XWಯ

W

W WLHPSRSURJUDPDGR

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de FUP (Página 8005)

1078

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

SD: Arrancar temporizador como retardo a la conexión
Descripción
La instrucción "Arrancar temporizador como retardo a la conexión" arranca un temporizador
programado al detectarse el estado lógico "1" en la entrada de arranque. Mientras se
mantenga el estado lógico "1", el temporizador contará el tiempo indicado. Una vez
transcurrido el tiempo y si el estado lógico en la entrada de arranque sigue siendo "1", la
consulta del estado del temporizador también dará como resultado "1". Si la señal de la entrada
de arranque es "0", el temporizador se inicializa. En ese caso, la consulta del estado del
temporizador devuelve el estado lógico "0". En cuanto la señal en la entrada de arranque
vuelve a cambiar a "1", el temporizador vuelve a contar el tiempo.
El estado lógico de la salida del temporizador es idéntico al de la entrada de arranque. La
entrada de arranque está interconectada directamente con la salida y no tiene relación con el
temporizador.
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización aquí: L: Cargar valor del
temporizador (Página 1604)

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
retardo a la conexión":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, T, C, D, L,
P

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

Programación del PLC
Manual de programación y manejo, 11/2019

1079

Instrucciones
4.1 Instrucciones
Segmento 1:
7LPHUB
6(

7DJ,QB
7DJ,QB1XPEHU

7:

Cuando el estado lógico del operando #TagIn_1 cambia de "0" a "1", el temporizador #Timer_1
arranca. El temporizador cuenta el valor de tiempo del operando #TagIn_Number. Si el estado
lógico del operando #TagIn_1 cambia de "1" a "0" antes de que transcurra el tiempo, el
temporizador se inicializa.
Segmento 2:
7DJ2XW
7LPHUB

Si ha transcurrido el tiempo y el estado lógico del operando #TagIn_1 en la entrada de
arranque es "1" y el temporizador no se ha inicializado, el operando #TagOut es "1".
Segmento 3:
7LPHUB
7DJ,QB

5

Si el estado lógico del operando #TagIn_2 es "1", se inicializan el temporizador #Timer_1 y la
salida #TagOut.
Si desea volver a arrancar el #Timer_1, el estado lógico en el operando #TagIn_2 debe ser "0"
y el estado lógico en la entrada de arranque #TagIn_1 debe cambiar de "0" a "1".
La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJ,QBಯ

'HVDFWLYDU

ಯ7DJ,QBಯ

7HPSRUL]DGRU

ಯ7LPHUBಯ

6DOLGD

ಯ7DJ2XWಯ

W

W

W WLHPSRSURJUDPDGR

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de FUP (Página 8005)

1080

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

SS: Arrancar temporizador como retardo a la conexión con memoria
Descripción
La instrucción "Arrancar temporizador como retardo a la conexión con memoria" arranca un
temporizador programado al detectarse un cambio en el resultado lógico (RLO) de "0" a "1"
(flanco de señal ascendente) en la entrada de arranque. El temporizador cuenta el tiempo
indicado, aunque el RLO cambie al estado lógico "0". Si ha transcurrido el tiempo, una consulta
de si el estado del temporizador es "1" da como resultado "1". Una vez transcurrido el tiempo,
el temporizador no puede volver a ponerse en marcha hasta que no se haya reiniciado
explícitamente.
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo.
La instrucción "Arrancar temporizador como retardo a la conexión con memoria" requiere una
operación lógica precedente para la evaluación de flancos y solo se puede colocar en el
margen derecho del segmento.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización aquí: L: Cargar valor del
temporizador (Página 1604)

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
retardo a la conexión con memoria":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, T, C, D, L,
P

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

Programación del PLC
Manual de programación y manejo, 11/2019

1081

Instrucciones
4.1 Instrucciones
Segmento 1:
7LPHUB
66

7DJ,QB
7DJ,QB1XPEHU

7:

Cuando el estado lógico del operando #TagIn_1 cambia de "0" a "1", el temporizador #Timer_1
arranca. El temporizador cuenta el valor de tiempo del operando #TagIn_Number.
Segmento 2:
7DJ2XW
7LPHUB

Una vez transcurrido el tiempo, el operando #TagOut se pone a "1".
Segmento 3:
7LPHUB
7DJ,QB

5

Si el estado lógico del operando #TagIn_1 cambia de "0" a "1" mientras el temporizador está
en marcha, se reinicia el temporizador. Si el estado lógico del operando #TagIn_2 es "1", el
temporizador #Timer_1 se inicializa, es decir, se detiene y el valor de tiempo actual se pone a
"0".
La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJ,QBಯ

'HVDFWLYDU

ಯ7DJ,QBಯ

7HPSRUL]DGRU

ಯ7LPHUBಯ

6DOLGD

ಯ7DJ2XWಯ

W

W WLHPSRSURJUDPDGR

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de FUP (Página 8005)

1082

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

SF: Arrancar temporizador como retardo a la desconexión
Descripción
La instrucción "Arrancar temporizador como retardo a la desconexión" arranca un
temporizador programado al detectarse un cambio en el resultado lógico (RLO) de "1" a "0"
(flanco de señal descendente) en la entrada de arranque. El temporizador empieza a contar
con el tiempo indicado. Mientras el temporizador está en marcha, una consulta de si el estado
del temporizador es "1" da como resultado "1". Si el RLO cambia de "0" a "1" mientras se
ejecuta el temporizador, este se inicializa. El temporizador siempre arranca de nuevo cuando
el RLO cambia de "1" a "0".
El tiempo se compone internamente de un valor de tiempo y de una base de tiempo y se
programa en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado
se cuenta hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se
modifica el valor de tiempo.
Las consultas de si el estado del temporizador es "1" dan como resultado "1" si el estado del
resultado lógico al ejecutar la instrucción es "1". Si el RLO está a "0", las consultas de si el
estado del temporizador es "1" dan como resultado "0".
La instrucción "Arrancar temporizador como retardo a la desconexión" requiere una operación
lógica precedente para la evaluación de flancos y solo se puede colocar en el margen derecho
del segmento.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización aquí: L: Cargar valor del
temporizador (Página 1604)

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
retardo a la desconexión":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, T, C, D, L,
P

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L o
constante

Tiempo

<Temporiza‐
dor>

InOut/Input

TIMER

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

1083

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
Segmento 1:
7LPHUB
6$

7DJ,QB
7DJ,QB1XPEHU

7:

Cuando el estado lógico del operando #TagIn_1 cambia de "1" a "0", el temporizador #Timer_1
arranca. El temporizador cuenta el valor de tiempo del operando #TagIn_Number.
Segmento 2:
7DJ2XW
7LPHUB

Mientras el temporizador está en marcha, el operando #TagOut se pone a "1".
Segmento 3:
7LPHUB
7DJ,QB

5

Si el estado lógico del operando #TagIn_1 cambia de "1" a "0" mientras el temporizador está
en marcha, se reinicia el temporizador. Si el estado lógico del operando #TagIn_2 es "1", el
temporizador #Timer_1 se inicializa, es decir, se detiene y el valor de tiempo actual se pone a
"0".
La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJ,QBಯ

'HVDFWLYDU

ಯ7DJ,QBಯ

7HPSRUL]DGRU

ಯ7LPHUBಯ
W

6DOLGD

W

ಯ7DJ2XWಯ
W WLHPSRSURJUDPDGR

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de FUP (Página 8005)

1084

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Contadores
CTU: Contador ascendente
Descripción
La instrucción "Contador ascendente" incrementa el valor en la salida CV. Cuando el estado
lógico de la entrada CU cambia de "0" a "1" (flanco de señal ascendente), se ejecuta la
instrucción y el valor actual de contaje de la salida CV se incrementa en uno. El valor de contaje
se incrementa cada vez que se detecta un flanco de señal ascendente, hasta alcanzar el valor
límite superior del tipo de datos indicado en la salida CV. Cuando se alcanza el valor límite
superior, el estado lógico de la entrada CU deja de tener efecto en la instrucción.
El estado del contador se puede consultar en la salida Q. El estado lógico de la salida Q es
determinado por el parámetro PV. Si el valor de contaje actual es mayor o igual al valor del
parámetro PV, la salida Q adopta el estado lógico "1". En todos los demás casos, el estado
lógico de la salida Q es "0". En el parámetro PV también se puede indicar una constante.
El valor de la salida CV se pone a "0" y se guarda en una marca de flancos, cuando el estado
lógico de la entrada R cambia a "1". Mientras la entrada R tenga el estado lógico "1", el estado
lógico de la entrada CU no tendrá efecto alguno en la instrucción.
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
A cada llamada de la instrucción "Contador ascendente" debe asignársele un contador CEI, en
el que se guarden los datos de la instrucción. Un contador CEI es una estructura con uno de
los tipos de datos siguientes:

Para CPU S7-1200
Bloque de datos del tipo de datos de sistema
IEC_<Contador> (Shared DB)

Variable local

● IEC_SCOUNTER / IEC_USCOUNTER

● CTU_SINT / CTU_USINT

● IEC_COUNTER / IEC_UCOUNTER

● CTU_INT / CTU_UINT

● IEC_DCOUNTER / IEC_UDCOUNTER

● CTU_DINT / CTU_UDINT
● IEC_SCOUNTER / IEC_USCOUNTER
● IEC_COUNTER / IEC_UCOUNTER
● IEC_DCOUNTER / IEC_UDCOUNTER

Programación del PLC
Manual de programación y manejo, 11/2019

1085

Instrucciones
4.1 Instrucciones

Para CPU S7-1500
Bloque de datos del tipo de datos de sistema
IEC_<Contador> (Shared DB)

Variable local

● IEC_SCOUNTER / IEC_USCOUNTER

● CTU_SINT / CTU_USINT

● IEC_COUNTER / IEC_UCOUNTER

● CTU_INT / CTU_UINT

● IEC_DCOUNTER / IEC_UDCOUNTER

● CTU_DINT / CTU_UDINT

● IEC_LCOUNTER / IEC_ULCOUNTER

● CTU_LINT / CTU_ULINT
● IEC_SCOUNTER / IEC_USCOUNTER
● IEC_COUNTER / IEC_UCOUNTER
● IEC_DCOUNTER / IEC_UDCOUNTER
● IEC_LCOUNTER / IEC_ULCOUNTER

Un contador CEI se puede declarar del modo siguiente:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_<Contador> (p. ej.
"MyIEC_COUNTER")
● Declaración como variable local del tipo CTU_<tipo de datos> o IEC_<contador> en la
sección "Static" de un bloque (p. ej., #MyIEC_COUNTER)
Si el contador CEI se crea en un bloque de datos propio (instancia individual), el bloque de
datos de instancia se crea de forma estándar con "acceso optimizado al bloque" y las distintas
variables se declaran remanentes. Encontrará más información sobre la configuración de la
remanencia en un bloque de datos de instancia en "Consulte también".
Si el contador CEI se crea como variable local (multiinstancia) en un bloque de función con
"acceso optimizado al bloque", esta se declara remanente en la interfaz del bloque.
Para poder ejecutar la instrucción "Contador ascendente" se requiere una operación lógica
precedente. Se puede colocar dentro o al final del segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contador ascendente":
Parámetro

1086

Declaración

Tipo de datos

Área de memoria
S7-1200

S7-1500

Descripción

CU

Input

BOOL

I, Q, M, D, L o
constante

I, Q, M, D, L o
constante

Entrada de con‐
taje

R

Input

BOOL

I, Q, M, D, L, P
o constante

Entrada de reset
I, Q, M, D, L,
T, C, P o cons‐
tante

PV

Input

Enteros

I, Q, M, D, L, P
o constante

I, Q, M, D, L, P
o constante

Valor con el que
se activa la sali‐
da Q.

Q

Output

BOOL

I, Q, M, D, L

I, Q, M, D, L

Estado del con‐
tador

CV

Output

Enteros, CHAR,
WCHAR, DATE

I, Q, M, D, L, P I, Q, M, D, L, P Valor de contaje
actual

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&78B'%ಯ
&78
,17

ಯ7DJ,QBಯ

&8

ಯ7DJ,QBಯ

5

ಯ7DJB39ಯ

39

&9

ಯ7DJB&9ಯ

4

ಯ7DJ2XWಯ

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", se ejecuta la instrucción
"Contador ascendente" y el valor de contaje actual del operando "Tag_CV" se incrementa en
uno. Con cada flanco de señal ascendente posterior, el valor de contaje irá incrementando
hasta alcanzar el valor límite superior del tipo de datos indicado (INT = 32767).
El valor del parámetro PV se utiliza como límite para determinar la salida "TagOut". La salida
"TagOut" devuelve el estado lógico "1" mientras el valor de contaje actual sea mayor o igual
que el valor del operando "Tag_PV". En los demás casos, la salida "TagOut" devuelve el
estado lógico "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ajustar la remanencia en un bloque de datos de instancia (Página 7855)
Remanencia de las variables locales (Página 7789)
Instancias (Página 61)
Principios básicos de FUP (Página 8005)

CTD: Contador descendente
Descripción
La instrucción "Contador descendente" decrementa el valor de la salida CV. Cuando el estado
lógico de la entrada CD cambia de "0" a "1" (flanco de señal ascendente), se ejecuta la
instrucción y el valor actual de contaje de la salida CV se decrementa en uno. Cada vez que
se detecta un flanco de señal ascendente, el valor de contaje se decrementa hasta alcanzar el
valor límite inferior del tipo de datos indicado. Cuando se alcanza el valor límite inferior, el
estado lógico de la entrada CD deja de tener efecto en la instrucción.
El estado del contador se puede consultar en la salida Q. Si el valor actual de contaje es menor
o igual a "0", la salida Q adopta el estado lógico "1". En todos los demás casos, el estado lógico
de la salida Q es "0". En el parámetro PV también se puede indicar una constante.

Programación del PLC
Manual de programación y manejo, 11/2019

1087

Instrucciones
4.1 Instrucciones
El valor de la salida CV se pone al valor del parámetro PV y se guarda en una marca de flancos,
cuando el estado lógico de la entrada LD cambia de "0" a "1". Mientras la entrada LD tenga el
estado lógico "1", el estado lógico de la entrada CD no tendrá efecto alguno en la instrucción.
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
A cada llamada de la instrucción "Contador descendente" debe asignársele un contador CEI,
en el que se guarden los datos de la instrucción. Un contador CEI es una estructura con uno
de los tipos de datos siguientes:

Para CPU S7-1200
Bloque de datos del tipo de datos de sistema
IEC_<Contador> (Shared DB)

Variable local

● IEC_SCOUNTER / IEC_USCOUNTER

● CTD_SINT / CTD_USINT

● IEC_COUNTER / IEC_UCOUNTER

● CTD_INT / CTD_UINT

● IEC_DCOUNTER / IEC_UDCOUNTER

● CTD_DINT / CTD_UDINT
● IEC_SCOUNTER / IEC_USCOUNTER
● IEC_COUNTER / IEC_UCOUNTER
● IEC_DCOUNTER / IEC_UDCOUNTER

Para CPU S7-1500
Bloque de datos del tipo de datos de sistema
IEC_<Contador> (Shared DB)

Variable local

● IEC_SCOUNTER / IEC_USCOUNTER

● CTD_SINT / CTD_USINT

● IEC_COUNTER / IEC_UCOUNTER

● CTD_INT / CTD_UINT

● IEC_DCOUNTER / IEC_UDCOUNTER

● CTD_DINT / CTD_UDINT

● IEC_LCOUNTER / IEC_ULCOUNTER

● CTD_LINT / CTD_ULINT
● IEC_SCOUNTER / IEC_USCOUNTER
● IEC_COUNTER / IEC_UCOUNTER
● IEC_DCOUNTER / IEC_UDCOUNTER
● IEC_LCOUNTER / IEC_ULCOUNTER

Un contador CEI se puede declarar del modo siguiente:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_<Contador> (p. ej.
"MyIEC_COUNTER")
● Declaración como variable local del tipo CTD_<Tipo de datos> o IEC_<Contador> en la
sección "Static" de un bloque (p. ej. #MyIEC_COUNTER)
Si el contador CEI se crea en un bloque de datos propio (instancia individual), el bloque de
datos de instancia se crea de forma estándar con "acceso optimizado al bloque" y las distintas
variables se declaran remanentes. Encontrará más información sobre la configuración de la
remanencia en un bloque de datos de instancia en "Consulte también".

1088

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Si el contador CEI se crea como variable local (multiinstancia) en un bloque de función con
"acceso optimizado al bloque", esta se declara remanente en la interfaz del bloque.
Para poder ejecutar la instrucción "Contador descendente" se requiere una operación lógica
precedente. Se puede colocar dentro o al final del segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contador descendente":
Parámetro

Declaración

Tipo de datos

Área de memoria
S7-1200

Descripción

S7-1500

CD

Input

BOOL

I, Q, M, D, L o I, Q, M, D, L Entrada de contaje
constante
o constante

LD

Input

BOOL

I, Q, M, D, L, I, Q, M, D,
P o constante L, T, C, P o
constante

PV

Input

Enteros

Valor al que se pone
I, Q, M, D, L, I, Q, M, D,
P o constante L, P o cons‐ la salida CV cuando
tante
LD = 1.

Q

Output

BOOL

I, Q, M, D, L

I, Q, M, D, L Estado del contador

CV

Output

Enteros, CHAR,
WCHAR, DATE

I, Q, M, D, L,
P

I, Q, M, D,
L, P

Entrada de carga

Valor de contaje ac‐
tual

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&7'B'%ಯ
&7'
,17
ಯ7DJ,QBಯ

&'

ಯ7DJ,QBಯ

/'

&9

ಯ7DJB&9ಯ

ಯ7DJB39ಯ

39

4

ಯ7DJ2XWಯ

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1", se ejecuta la instrucción
y el valor de la salida "Tag_CV" se decrementa en uno. Con cada flanco de señal ascendente
posterior, el valor de contaje irá decrementando hasta alcanzar el valor límite inferior del tipo
de datos indicado (INT = -32768).
El valor del parámetro PV se utiliza como límite para determinar la salida "TagOut". La salida
"TagOut" devolverá el estado lógico "1" mientras el valor actual de contaje sea menor o igual
a "0". En los demás casos, la salida "TagOut" devuelve el estado lógico "0".

Programación del PLC
Manual de programación y manejo, 11/2019

1089

Instrucciones
4.1 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ajustar la remanencia en un bloque de datos de instancia (Página 7855)
Remanencia de las variables locales (Página 7789)
Instancias (Página 61)
Principios básicos de FUP (Página 8005)

CTUD: Contador ascendente - descendente
Descripción
La instrucción "Contador ascendente - descendente" incrementa y decrementa el valor de
contaje en la salida CV. Cuando el estado lógico de la entrada CU cambia de "0" a "1" (flanco
de señal ascendente), el valor de contaje actual se incrementa en uno y se deposita en la salida
CV. Cuando el estado lógico de la entrada CD cambia de "0" a "1" (flanco de señal
ascendente), el valor actual de contaje de la salida CV se decrementa en uno. Si en un ciclo
del programa se detecta un flanco de señal ascendente en las entradas CU y CD, el valor
actual de contaje no se modifica en la salida CV.
El valor de contaje se puede seguir incrementando hasta alcanzar el valor límite superior del
tipo de datos indicado en la salida CV. Una vez alcanzado el valor límite superior, el valor de
contaje no se incrementa más aunque se detecte un flanco de señal ascendente. Cuando se
alcanza el valor límite inferior del tipo de datos indicado, ya no se decrementa el valor de
contaje.
Si el estado lógico de la entrada LD cambia a "1", el valor de contaje de la salida CV adopta el
valor del parámetro PV y se guarda en una marca de flancos. Mientras la entrada LD tenga el
estado lógico "1", el estado lógico de las entradas CU y CD no tendrá efecto alguno en la
instrucción.
El valor de contaje se pone a "0" y se guarda en una marca de flancos, cuando el estado lógico
de la entrada R cambia a "1". Mientras la entrada R tenga el estado lógico "1", un cambio del
estado lógico de las entradas CU, CD y LD no tendrá efecto alguno en la instrucción "Contador
ascendente - descendente".
El estado del contador ascendente se puede consultar en la salida QU. Si el valor de contaje
actual es mayor o igual al valor del parámetro PV, la salida QU adopta el estado lógico "1". En
todos los demás casos, el estado lógico de la salida QU es "0". En el parámetro PV también se
puede indicar una constante.
El estado del contador descendente se puede consultar en la salida QD. Si el valor de contaje
actual es menor o igual a cero, la salida QD adopta el estado lógico "1". En todos los demás
casos, el estado lógico de la salida QD es "0".
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.

1090

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
A cada llamada de la instrucción "Contador ascendente - descendente" debe asignársele un
contador CEI en el que se guarden los datos de la instrucción. Un contador CEI es una
estructura con uno de los tipos de datos siguientes:

Para CPU S7-1200
Bloque de datos del tipo de datos de sistema
IEC_<Contador> (Shared DB)

Variable local

● IEC_SCOUNTER / IEC_USCOUNTER

● CTUD_SINT / CTUD_USINT

● IEC_COUNTER / IEC_UCOUNTER

● CTUD_INT / CTUD_UINT

● IEC_DCOUNTER / IEC_UDCOUNTER

● CTUD_DINT / CTUD_UDINT
● IEC_SCOUNTER / IEC_USCOUNTER
● IEC_COUNTER / IEC_UCOUNTER
● IEC_DCOUNTER / IEC_UDCOUNTER

Para CPU S7-1500
Bloque de datos del tipo de datos de sistema
IEC_<Contador> (Shared DB)

Variable local

● IEC_SCOUNTER / IEC_USCOUNTER

● CTUD_SINT / CTUD_USINT

● IEC_COUNTER / IEC_UCOUNTER

● CTUD_INT / CTUD_UINT

● IEC_DCOUNTER / IEC_UDCOUNTER

● CTUD_DINT / CTUD_UDINT

● IEC_LCOUNTER / IEC_ULCOUNTER

● CTUD_LINT / CTUD_ULINT
● IEC_SCOUNTER / IEC_USCOUNTER
● IEC_COUNTER / IEC_UCOUNTER
● IEC_DCOUNTER / IEC_UDCOUNTER
● IEC_LCOUNTER / IEC_ULCOUNTER

Un contador CEI se puede declarar del modo siguiente:
● Declaración de un bloque de datos del tipo de datos de sistema IEC_<Contador> (p. ej.
"MyIEC_COUNTER")
● Declaración como variable local del tipo CTUD_<tipo de datos> o IEC_<contador> en la
sección "Static" de un bloque (p. ej., #MyIEC_COUNTER)
Si el contador CEI se crea en un bloque de datos propio (instancia individual), el bloque de
datos de instancia se crea de forma estándar con "acceso optimizado al bloque" y las distintas
variables se declaran remanentes. Encontrará más información sobre la configuración de la
remanencia en un bloque de datos de instancia en "Consulte también".
Si el contador CEI se crea como variable local (multiinstancia) en un bloque de función con
"acceso optimizado al bloque", esta se declara remanente en la interfaz del bloque.
Para poder ejecutar la instrucción "Contador ascendente - descendente" se requiere una
operación lógica precedente. Se puede colocar dentro o al final del segmento.

Programación del PLC
Manual de programación y manejo, 11/2019

1091

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contador ascendente descendente":
Parámetros

Declaración

Tipo de datos

Área de memoria
S7-1200

S7-1500

Descripción

CU

Input

BOOL

I, Q, M, D, L
o constante

I, Q, M, D,
L o cons‐
tante

Entrada de contaje
ascendente

CD

Input

BOOL

I, Q, M, D, L
o constante

I, Q, M, D,
L o cons‐
tante

Entrada de contaje
descendente

R

Input

BOOL

I, Q, M, D, L, I, Q, M, D,
P o constan‐ L, T, C, P o
constante
te

Entrada de reset

LD

Input

BOOL

I, Q, M, D, L, I, Q, M, D,
P o constan‐ L, T, C, P o
constante
te

Entrada de carga

PV

Input

Enteros

I, Q, M, D, L, I, Q, M, D, Valor con el que se
P o constan‐ L, P o cons‐ activa la salida QU. /
tante
Valor al que se pone
te
la salida CV cuando
LD = 1.

QU

Output

BOOL

I, Q, M, D, L

I, Q, M, D, L Contador ascenden‐
te de estado

QD

Output

BOOL

I, Q, M, D, L

I, Q, M, D, L Contador descenden‐
te de estado

CV

Output

Enteros, CHAR,
WCHAR, DATE

I, Q, M, D, L,
P

I, Q, M, D,
L, P

Valor de contaje ac‐
tual

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&78'B'%ಯ
&78'
,17

1092

ಯ7DJ,QB&8ಯ

&8

ಯ7DJ,QB&'ಯ

&'

ಯ7DJ,QB5ಯ

5

4'

ಯ7DJ2XWB4'ಯ

ಯ7DJ,QB/'ಯ

/'

&9

ಯ7DJB&9ಯ

ಯ7DJB39ಯ

39

48

ಯ7DJ2XWB48ಯ

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Si el estado lógico de la entrada "TagIn_CU" o "TagIn_CD" cambia de "0" a "1" (flanco de señal
ascendente), se ejecuta la instrucción "Contador ascendente - descendente". Cuando se
detecta un flanco de señal ascendente en la entrada "TagIn_CU", el valor de contaje actual se
incrementa en uno y se deposita en la salida "Tag_CV". Si se detecta un flanco de señal
ascendente en la entrada "TagIn_CD", el valor de contaje se decrementa en uno y se deposita
en la salida "Tag_CV". Si se detecta un flanco de señal ascendente en la entrada CU, el valor
de contaje se sigue incrementando hasta alcanzar el valor límite superior (INT = 32767). Si se
detecta un flanco de señal ascendente en la entrada CD, el valor de contaje se va
decrementando hasta alcanzar el valor límite inferior de (INT = -32768).
La salida "TagOut_GU" devuelve el estado lógico "1" mientras el valor de contaje actual sea
mayor o igual que el valor de la entrada "Tag_PV". En los demás casos, la salida "TagOut_QU"
devuelve el estado lógico "0".
La salida "TagOut_QD" devolverá el estado lógico "1" mientras el valor actual de contaje sea
menor o igual a "0". En todos los demás casos, la salida "TagOut_QD" devuelve el estado
lógico "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Ejemplo de detección del nivel de llenado de una zona de almacén (Página 8054)
Ajustar la remanencia en un bloque de datos de instancia (Página 7855)
Remanencia de las variables locales (Página 7789)
Instancias (Página 61)
Ejemplos de programación FUP (Página 8050)
Principios básicos de FUP (Página 8005)

Legacy
S_CU: Parametrizar e incrementar contador
Descripción
La instrucción "Parametrizar e incrementar contador" permite incrementar el valor de un
contador. Cuando el estado lógico de la entrada CU cambia de "0" a "1" (flanco de señal
ascendente), el valor de contaje actual se incrementa en uno. El valor de contaje actual se
emite en formato hexadecimal en la salida CV y codificado en BCD en la salida CV_BCD. El
valor de contaje sigue incrementando hasta alcanzar el límite de "999". Una vez alcanzado el
valor límite, el valor de contaje no se incrementa al detectarse un flanco de señal ascendente.
Cuando el estado lógico de la entrada S cambia de "0" a "1", el valor de contaje adopta el valor
del parámetro PV. Si el contador se activa y el RLO de la entrada CU es "1", el contador cuenta
una única vez en el ciclo siguiente aunque no se detecte ningún cambio de flanco.
El valor de contaje se pone a cero si el estado lógico de la entrada R cambia a "1". Mientras la
entrada R tenga el estado lógico "1", el estado lógico de las entradas CU y S no tendrá ningún
efecto sobre el valor de contaje.

Programación del PLC
Manual de programación y manejo, 11/2019

1093

Instrucciones
4.1 Instrucciones
El estado lógico en la salida Q es "1" si el valor de contaje es superior a cero. Si el valor de
contaje es igual a cero, la salida Q devuelve el estado lógico "0".
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
La instrucción "Parametrizar e incrementar contador" requiere una operación lógica
precedente para la evaluación de flancos y se puede colocar dentro o en el extremo del
segmento.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar e incrementar
contador":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Contador>

InOut/Input

COUNTER

C

Contador de la instrucción
El número de contadores de‐
pende de la CPU.

CU

Input

BOOL

I, Q, M, D, L, T, C o
constante

Entrada de contaje ascen‐
dente

S

Input

BOOL

I, Q, M, D, L, T, C o
constante

Entrada para preajustar el
contador

PV

Input

WORD

I, Q, M, D, L o
constante

Valor de contaje predetermi‐
nado (C#0 a C#999)

R

Input

BOOL

I, Q, M, D, L, T, C o
constante

Entrada de reset

BI

Output

WORD, S5TIME,
DATE

I, Q, M, D, L

Valor de contaje actual (he‐
xadecimal)

CV_BCD

Output

WORD, S5TIME,
DATE

I, Q, M, D, L

Valor de contaje actual (for‐
mato BCD)

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

1094

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&RXQWHUBಯ
6B&8
ಯ7DJ,QBಯ

&8

ಯ7DJ,QBಯ

6

ಯ7DJ3UHVHW9DOXHಯ
ಯ7DJ,QBಯ

39

&9

ಯ7DJ9DOXHBಯ

&9B%&'

ಯ7DJ9DOXHBಯ

5

ಯ7DJ2XWಯ

4

Cuando el estado lógico de la entrada "TagIn_1" cambia de "0" a "1" (flanco de señal
ascendente) y el valor de contaje actual es menor que "999", este valor se incrementará en
uno. Si el estado lógico de la entrada "TagIn_2" cambia de "0" a "1", el valor de contaje adopta
el valor del operando "TagPresetValue". El valor de contaje se pone a "0" si el operando
"TagIn_3" tiene el estado lógico "1".
El valor de contaje actual se memoriza en formato hexadecimal en el operando "TagValue_1"
y codificado en BCD en el operando "TagValue_2".
La salida "TagOut" devuelve el estado lógico "1" mientras el valor de contaje actual sea
diferente a "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de FUP (Página 8005)

S_CD: Parametrizar y decrementar contador
Descripción
La instrucción "Parametrizar y decrementar contador" permite decrementar el valor de un
contador. Cuando el estado lógico de la entrada CD cambia de "0" a "1" (flanco de señal
ascendente), el valor de contaje actual se decrementa en uno. El valor de contaje actual se
emite en formato hexadecimal en la salida CV y codificado en BCD en la salida CV_BCD. El
valor de contaje sigue decrementando hasta alcanzar el límite inferior "0". Una vez alcanzado
el valor límite inferior, el valor de contaje no se decrementa más al detectarse un flanco de
señal ascendente.
Cuando el estado lógico de la entrada S cambia de "0" a "1", el valor de contaje adopta el valor
del parámetro PV. Si el contador se activa y el RLO de la entrada CD es "1", el contador cuenta
una única vez en el ciclo siguiente aunque no se detecte ningún cambio de flanco.
El valor de contaje se pone a cero si el estado lógico de la entrada R cambia a "1". Mientras la
entrada R tenga el estado lógico "1", el estado lógico de las entradas CD y S no tiene ningún
efecto sobre el valor de contaje.

Programación del PLC
Manual de programación y manejo, 11/2019

1095

Instrucciones
4.1 Instrucciones
El estado lógico en la salida Q es "1" si el valor de contaje es superior a cero. Si el valor de
contaje es igual a cero, la salida Q devuelve el estado lógico "0".
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
La instrucción "Parametrizar y decrementar contador" requiere una operación lógica
precedente para la evaluación de flancos y se puede colocar dentro o en el extremo del
segmento.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar y decrementar
contador":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Contador>

InOut/Input

COUNTER

C

Contador de la instrucción
El número de contadores de‐
pende de la CPU.

CD

Input

BOOL

I, Q, M, D, L o
constante

Entrada de contaje descen‐
dente

S

Input

BOOL

I, Q, M, D, L, T, C o
constante

Entrada para preajustar el
contador

PV

Input

WORD

I, Q, M, D, L o
constante

Valor de contaje predetermi‐
nado (C#0 a C#999)

R

Input

BOOL

I, Q, M, D, L, T, C o
constante

Entrada de reset

CV

Output

WORD, S5TIME,
DATE

I, Q, M, D, L

Valor de contaje actual (he‐
xadecimal)

CV_BCD

Output

WORD, S5TIME,
DATE

I, Q, M, D, L

Valor de contaje actual (for‐
mato BCD)

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

1096

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&RXQWHUBಯ
6B&'
ಯ7DJ,QBಯ

&'

ಯ7DJ,QBಯ

6

ಯ7DJ3UHVHW9DOXHಯ
ಯ7DJ,QBಯ

39
5

&9

ಯ7DJ9DOXHBಯ

&9B%&'

ಯ7DJ9DOXHBಯ

ಯ7DJ2XWಯ

4

Cuando el estado lógico de la entrada "TagIn_1" cambia de "0" a "1" (flanco de señal
ascendente) y el valor de contaje actual es mayor que "0", este valor se decrementará en uno.
Si el estado lógico de la entrada "TagIn_2" cambia de "0" a "1", el valor de contaje adopta el
valor del operando "TagPresetValue". El valor de contaje se pone a "0" si el operando
"TagIn_3" tiene el estado lógico "1".
El valor de contaje actual se memoriza en formato hexadecimal en el operando "TagValue_1"
y codificado en BCD en el operando "TagValue_2".
La salida "TagOut" devuelve el estado lógico "1" mientras el valor de contaje actual sea
diferente a "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de FUP (Página 8005)

S_CUD: Parametrizar e incrementar/decrementar contador
Descripción
La instrucción "Parametrizar e incrementar/decrementar contador" permite incrementar y
decrementar el valor de un contador. Cuando el estado lógico de la entrada CU cambia de "0"
a "1" (flanco de señal ascendente), el valor de contaje actual se incrementa en uno. Cuando el
estado lógico de la entrada CD cambia de "0" a "1" (flanco de señal ascendente), el valor de
contaje se decrementa en uno. El valor de contaje actual se emite en formato hexadecimal en
la salida CV y codificado en BCD en la salida CV_BCD. Si en un ciclo del programa se detecta
un flanco de señal ascendente en las entradas CU y CD, el valor de contaje no se modifica.
El valor de contaje sigue incrementando hasta alcanzar el límite superior "999". Una vez
alcanzado el valor límite superior, el valor de contaje no se incrementa al detectarse un flanco
de señal ascendente. Cuando se alcanza el valor límite inferior "0", no se decrementa más el
valor de contaje.
Cuando el estado lógico de la entrada S cambia de "0" a "1", el valor de contaje adopta el valor
del parámetro PV. Si se inicializa el contador y el RLO en las entradas CU y CD es "1", el

Programación del PLC
Manual de programación y manejo, 11/2019

1097

Instrucciones
4.1 Instrucciones
contador solo cuenta una vez en el próximo ciclo aunque no se detecte ningún cambio de
flanco.
El valor de contaje se pone a cero si el estado lógico de la entrada R cambia a "1". Mientras la
entrada R tenga el estado lógico "1", el estado lógico de las entradas CU, CD y S no tendrá
ningún efecto sobre el valor de contaje.
El estado lógico en la salida Q es "1" si el valor de contaje es superior a cero. Si el valor de
contaje es igual a cero, la salida Q devuelve el estado lógico "0".
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
La instrucción "Parametrizar e incrementar/decrementar contador" requiere una operación
lógica precedente para la evaluación de flancos y se puede colocar dentro o en el extremo del
segmento.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Parametrizar e incrementar/
decrementar contador":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Contador>

InOut/Input

COUNTER

C

Contador de la instrucción
El número de contadores de‐
pende de la CPU.

CU

Input

BOOL

I, Q, M, D, L, T, C o
constante

Entrada de contaje ascen‐
dente

CD

Input

BOOL

I, Q, M, D, L, T, C o
constante

Entrada de contaje descen‐
dente

S

Input

BOOL

I, Q, M, D, L, T, C o
constante

Entrada para preajustar el
contador

PV

Input

WORD

I, Q, M, D, L o
constante

Valor de contaje predetermi‐
nado (C#0 a C#999)

R

Input

BOOL

I, Q, M, D, L, T, C o
constante

Entrada de reset

BI

Output

WORD, S5TIME,
DATE

I, Q, M, D, L

Valor de contaje actual (he‐
xadecimal)

CV_BCD

Output

WORD, S5TIME,
DATE

I, Q, M, D, L

Valor de contaje actual (for‐
mato BCD)

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

1098

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&RXQWHUBಯ
6B&8'
ಯ7DJ,QBಯ

&8

ಯ7DJ,QBಯ

&'

ಯ7DJ,QBಯ

6

ಯ7DJ3UHVHW9DOXHಯ
ಯ7DJ,QBಯ

39
5

&9

ಯ7DJ9DOXHBಯ

&9B%&'

ಯ7DJ9DOXHBಯ

ಯ7DJ2XWಯ

4

Si el estado lógico de la entrada "TagIn_1" o "TagIn_2" cambia de "0" a "1" (flanco de señal
ascendente), se ejecuta la instrucción "Parametrizar e incrementar/decrementar contador".
Cuando se detecta un flanco de señal ascendente en la entrada "TagIn_1" y el valor de contaje
actual es menor que "999", este valor se incrementará en uno. Cuando se detecta un flanco de
señal ascendente en la entrada "TagIn_2" y el valor de contaje actual es mayor que "0", este
valor se decrementará en uno.
Si el estado lógico de la entrada "TagIn_3" cambia de "0" a "1", el valor de contaje adopta el
valor del operando "TagPresetValue". El valor de contaje se pone a "0" si el operando
"TagIn_4" tiene el estado lógico "1".
El valor de contaje actual se memoriza en formato hexadecimal en el operando "TagValue_1"
y codificado en BCD en el operando "TagValue_2".
La salida "TagOut" devuelve el estado lógico "1" mientras el valor de contaje actual sea
diferente a "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de FUP (Página 8005)

SC: Poner contador al valor inicial
Descripción
Con la instrucción "Poner contador al valor inicial" se ajusta el valor de un contador. La
instrucción se ejecuta cuando el resultado lógico (RLO) de la entrada de arranque de la
instrucción cambia de "0" a "1". Si se ejecuta la instrucción, el contador se pone al valor de
contaje indicado.
La instrucción "Poner contador al valor inicial" requiere una operación lógica precedente para
la evaluación de flancos y se puede colocar solo en el extremo derecho del segmento.

Programación del PLC
Manual de programación y manejo, 11/2019

1099

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Poner contador al valor inicial":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, T, C, D, L

Entrada de arranque

PV

Input

WORD

I, Q, M, D, L o
constante

Valor con el que se preajusta
el contador codificado en
BCD.
(C#0 a C#999)

<Contador>

InOut/Input

COUNTER

C

Contador que se preajusta.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ&RXQWHUBಯ

ಯ7DJ,Qಯ
&

6&
&9

Cuando el estado lógico del operando "TagIn" cambia de "0" a "1", el contador "Counter_1" se
pone a "100".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de FUP (Página 8005)

CU: Contador ascendente
Descripción
La instrucción "Contador ascendente" permite aumentar en uno el valor del contador indicado
cuando hay un flanco de señal ascendente en la entrada de arranque. El valor de contaje
puede seguir incrementándose hasta alcanzar el límite de "999". Una vez alcanzado el valor
límite, el valor de contaje no se incrementa al detectarse un flanco de señal ascendente.
La instrucción "Contador ascendente" requiere una operación lógica precedente para la
evaluación de flancos y sólo se puede colocar en el margen derecho del segmento.

1100

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Contador ascendente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, T, C, D, L

Entrada de arranque

<Contador>

InOut/Input

COUNTER

C

Contador cuyo valor se au‐
menta.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
ಯ&RXQWHUBಯ
6&

ಯ7DJ,QBಯ
&

39

6HJPHQWR
ಯ&RXQWHUBಯ
ಯ7DJ,QBಯ

&8

6HJPHQWR
ಯ&RXQWHUBಯ
ಯ7DJ,QBಯ

5

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1" (señal de flanco
ascendente), el contador "Counter_1" se ajusta en el valor "100".
El valor del contador "Counter_1" se incrementa en uno si el estado lógico del operando
"TagIn_2" cambia de "0" a "1".
Si el estado lógico del operando "TagIn_3" es "1", se pone a "0" el valor del contador
"Counter_1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de FUP (Página 8005)

Programación del PLC
Manual de programación y manejo, 11/2019

1101

Instrucciones
4.1 Instrucciones

CD: Contador descendente
Descripción
La instrucción "Contador descendente" permite reducir en uno el valor del contador indicado
cuando hay un flanco de señal ascendente en la entrada de arranque. El valor de contaje
puede seguir decrementándose hasta alcanzar el límite "0". Una vez alcanzado el valor límite,
el valor de contaje no se modifica al detectarse un flanco de señal ascendente.
La instrucción "Contador descendente" requiere una operación lógica precedente para la
evaluación de flancos y sólo se puede colocar en el margen derecho del segmento.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Contador descendente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, T, C, D, L

Entrada de arranque

<Contador>

InOut/Input

COUNTER

C

Contador cuyo valor se de‐
crementa.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
ಯ&RXQWHUBಯ
6&

ಯ7DJ,QBಯ
&

39

6HJPHQWR
ಯ&RXQWHUBಯ
ಯ7DJ,QBಯ

&'

6HJPHQWR
ಯ&RXQWHUBಯ
ಯ7DJ,QBಯ

5

Cuando el estado lógico del operando "TagIn_1" cambia de "0" a "1" (señal de flanco
ascendente), el contador "Counter_1" se ajusta en el valor "100".

1102

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
El valor del contador "Counter_1" se decrementa en uno si el estado lógico del operando
"TagIn_2" cambia de "0" a "1".
Si el estado lógico del operando "TagIn_3" es "1", se pone a "0" el valor del contador
"Counter_1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de FUP (Página 8005)

Comparación
CMP ==: Igual
Descripción
La instrucción "Igual" consulta si el valor de la entrada IN1 es igual al valor de la entrada IN2.
Si se cumple la condición de la comparación, la instrucción devuelve el resultado lógico (RLO)
"1". Si la condición de la comparación no se cumple, la instrucción devuelve el RLO "0".
Si está activada la verificación CEI, los operandos que comparar deben ser del mismo tipo de
datos. Si no está activada la verificación CEI, el ancho de los operandos debe ser igual.

Comparación de números en coma flotante
Si desea comparar tipos de datos REAL o LREAL, utilice en lugar de la instrucción "CMP ==:
Igual" la instrucción "IN_RANGE: Valor dentro del rango".
Si se comparan números en coma flotante, los operandos que comparar deben ser del mismo
tipo de datos, independientemente del ajuste de la verificación CEI.
Los patrones de bits especiales de números en coma flotante no válidos (NaN) que se generan
en caso de resultados indefinidos (p. ej. raíz de -1) no pueden compararse. Es decir, si uno de
los dos operandos tiene el valor NaN, la instrucción "CMP ==: Igual" da como resultado FALSE.

Comparación de cadenas de caracteres
En una comparación de cadenas de caracteres, los distintos caracteres se comparan según su
codificación (p. ej. 'a' es mayor que 'A'). La comparación se realiza de izquierda a derecha. El
primer carácter diferente es el decisivo para el resultado de la comparación.
La tabla siguiente muestra ejemplos de comparación de cadenas de caracteres:
IN1

IN2

RLO de la instrucción

'AA'

'AA'

1

'Hello World'

'HelloWorld'

0

'AA'

'aa'

0

'aa'

'aaa'

0

Programación del PLC
Manual de programación y manejo, 11/2019

1103

Instrucciones
4.1 Instrucciones
También es posible comparar caracteres individuales de una cadena de caracteres. El número
del carácter que se va a comparar se indica entre corchetes al lado del nombre del operando.
Si se indica "MyString[2]", se compara p. ej. el segundo carácter de la cadena de caracteres
"MyString".
Nota
El estado se sigue mostrando a pesar de que la instrucción está "inactiva"
En las condiciones citadas a continuación se aplica lo siguiente:
● Antes de la instrucción "CMP ==: Igual" (con tipo de datos STRING, WSTRING o VARIANT)
se consulta una condición (p. ej. un contacto normalmente abierto) en el segmento.
● "Activar observación" está activado.
● Un nuevo resultado de la condición vuelve a poner el segmento a FALSE. De este modo,
la instrucción "CMP ==: Igual" está inactiva.
Resultado:
Para la instrucción "CMP ==: Igual" (tipo de datos STRING, WSTRING o VARIANT) se sigue
mostrando el estado anterior en el segmento.
Si se desactiva y vuelve a activar la "observación" o se desplaza a otro segmento, se mostrará
de nuevo el estado correcto de la instrucción "CMP ==: Igual" (tipo de datos STRING,
WSTRING o VARIANT). La instrucción "CMP ==: Igual" se muestra atenuada en el segmento
cuando está inactiva.

Comparación de tiempos, fecha y hora
Los patrones de bits de temporizadores, fechas y horas no válidos, p. ej.
DT#2015-13-33-25:62:99.999_999_999, no pueden compararse. Es decir, si uno de los dos
operandos tiene un valor no válido, la instrucción "CMP ==: Igual" da como resultado FALSE.
No es posible comparar directamente todos los tiempos entre sí, como p. ej. S5TIME. En este
caso se convierten implícitamente a otro tiempo para poder compararlos, p. ej. a TIME.
Para comparar fechas y horas de diferentes tipos de datos entre sí, el valor del tipo de datos
de fecha u hora más pequeño se convierte implícitamente al mayor. De ese modo se
comparan, por ejemplo, ambos tipos de datos de fecha y hora DATE y DTL sobre la base de
DTL.
Si se produce un error en las conversiones implícitas, la comparación da como resultado
FALSE.

Comparación de variables del tipo de datos WORD con variables del tipo de datos S5TIME
Cuando se compara una variable del tipo de datos WORD con una variable del tipo de datos
S5TIME, ambas variables se convierten al tipo de datos TIME. La variable WORD se interpreta
como un valor S5TIME. En caso de que no fuera posible convertir una de las dos variables, la
comparación no se realizará y el resultado será FALSE. Si la conversión es correcta, la
comparación se realizará en función de la instrucción de comparación seleccionada.

1104

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Comparación de tipos de datos de hardware
Para poder comparar operandos del tipo de datos PORT, deberá seleccionar el tipo de datos
WORD en la lista desplegable del cuadro de la instrucción.
Si desea comparar los dos tipos de datos, primero deberá crear una variable del tipo HW_ANY
en la sección "Temp" de la interfaz del bloque y después copiar el LADDR (del tipo de datos
HW_DEVICE) a la variable. A continuación se pueden comparar HW_ANY y HW_IO.

Comparación de estructuras
Nota
Disponibilidad de la comparación de estructuras
La posibilidad de comparar estructuras está disponible en las CPU de la serie S7-1200 a partir
de la versión de firmware >= 4.2 y en las CPU de la serie S7-1500 a partir de la versión de
firmware >= 2.0.
Es posible comparar entre sí los valores de dos operandos estructurados cuando las dos
variables tienen el mismo tipo de datos de estructura. Si se comparan estructuras, los
operandos que comparar deben ser del mismo tipo de datos, independientemente del ajuste
de la verificación CEI. Esto no es aplicable a comparaciones en las que uno de los dos
operandos es un VARIANT o un ANY. Si el tipo de datos se desconoce en el momento de crear
el programa, puede emplearse VARIANT. En este caso, será posible también comparar el
operando con una variable estructurada de cualquier tipo de datos. También pueden
compararse entre sí dos variables del tipo de datos VARIANT o ANY.
Para comparar estructuras, seleccione el tipo de datos VARIANT en la lista desplegable del
cuadro de la instrucción. Son posibles variables de los siguientes tipos de datos:
● Tipo de datos PLC (UDT)
● STRUCT (la estructura del tipo de datos STRUCT debe estar contenida en un tipo de datos
PLC o las dos estructuras que van a compararse son dos elementos de un ARRAY of
STRUCT. No se permiten bloque de datos de instancia ni variables de estructuras
anónimas.)
● Bloques de datos que derivan de un tipo de datos PLC.
● Variable a la que apunta ANY.
● Variable a la que apunta VARIANT.
Para poder comparar entre sí dos variables del tipo de datos ARRAY cuando se selecciona
VARIANT, deben cumplirse los siguientes requisitos:
● Los elementos deben tener el mismo tipo de datos en cada caso.
● Los dos ARRAY deben tener la misma dimensión.
● Todas las dimensiones deben tener el mismo número de elementos. Los límites concretos
de ARRAY no tienen que coincidir necesariamente.

Programación del PLC
Manual de programación y manejo, 11/2019

1105

Instrucciones
4.1 Instrucciones

Nota
ARRAY of BOOL
Si se comparan entre sí dos operandos del tipo de datos ARRAY of BOOL, se ha seleccionado
el tipo de datos VARIANT en la lista desplegable y el número de elementos no es divisible entre
8, se comparan también los bits de relleno. Esto puede influir en el resultado de la comparación.
Si un elemento de las estructuras que desea comparar es un STRING/WSTRING no válido,
una indicación no válida de hora o fecha o bien un número en coma flotante no válido, el
resultado de la comparación devuelve el estado lógico "0" en RLO (resultado lógico).
La tabla siguiente muestra un ejemplo de comparación de estructuras:
<Operando1>
Variable del tipo de da‐
tos A <Tipo de datos
PLC>

<Operando2>
Valor de la va‐
riable

Variable del tipo de
datos A <Tipo de da‐
tos PLC>

Valor de la varia‐
ble

BOOL

FALSE

BOOL

FALSE

INT

2

INT

2

<Operando1>
Variable del tipo de da‐
tos A <Tipo de datos
PLC>

<Operando2>
Valor de la va‐
riable

Variable del tipo de
datos B <Tipo de da‐
tos PLC>

Valor de la varia‐
ble

FALSE

