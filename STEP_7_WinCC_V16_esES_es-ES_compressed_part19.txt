ea de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

WORD, DWORD

I, Q, M, D, L, P o
constante

Primer valor de la operación
lógica

Programación del PLC
Manual de programación y manejo, 11/2019

5169

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN2

Input

WORD, DWORD

I, Q, M, D, L, P o
constante

Segundo valor de la opera‐
ción lógica

OUT

Output

WORD, DWORD

I, Q, M, D, L, P

Resultado de la instrucción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
$1'
:25'
ಯ7DJ,Qಯ

(1

ಯ7DJB9DOXHಯ

,1

287

ಯ7DJB9DOXHಯ

,1

(12

ಯ7DJB5HVXOWಯ
ಯ7DJ2XWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN1

Tag_Value1

01010101 01010101

IN2

Tag_Value2

00000000 00001111

OUT

Tag_Result

00000000 00000101

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El valor del
operando "Tag_Value1" se combina mediante una Y lógica con el valor del operando
"Tag_Value2". El resultado se obtiene de bit en bit y se deposita en el operando "Tag_Result".
La salida de habilitación ENO y la salida "TagOut" adoptan el estado lógico "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar el bit de estado en operaciones lógicas con palabras (Página 194)
Principios básicos de la palabra de estado (Página 184)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

5170

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

OR: Operación lógica O
Descripción
La instrucción "Operación lógica O" permite combinar el valor de la entrada IN1 con el valor de
la entrada IN2 de bit en bit mediante una O lógica y consultar el resultado en la salida OUT.
Al ejecutar la instrucción, el bit 0 del valor de la entrada IN1 se combina mediante una O lógica
con el bit 0 del valor de la entrada IN2. El resultado se deposita en el bit 0 de la salida OUT. La
misma combinación lógica se realiza para todos los bits de la variable indicada.
El estado lógico del bit de resultado es "1" si el estado lógico de como mínimo uno de los dos
bits que deben combinarse lógicamente también es "1". Si el estado lógico de ambos bits que
deben combinarse lógicamente es "0", se desactivará el bit de resultado correspondiente.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica O":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

WORD, DWORD

I, Q, M, D, L, P o
constante

Primer valor de la operación
lógica

IN2

Input

WORD, DWORD

I, Q, M, D, L, P o
constante

Segundo valor de la opera‐
ción lógica

OUT

Output

WORD, DWORD

I, Q, M, D, L, P

Resultado de la instrucción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
25
:25'
ಯ7DJ,Qಯ

(1

ಯ7DJB9DOXHಯ

,1

287

ಯ7DJB9DOXHಯ

,1

(12

Programación del PLC
Manual de programación y manejo, 11/2019

ಯ7DJB5HVXOWಯ
ಯ7DJ2XWಯ

5171

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN1

Tag_Value1

01010101 01010101

IN2

Tag_Value2

00000000 00001111

OUT

Tag_Result

01010101 01011111

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El valor del
operando "Tag_Value1" se combina mediante una O lógica con el valor del operando
"Tag_Value2". El resultado se obtiene de bit en bit y se deposita en el operando "Tag_Result".
La salida de habilitación ENO y la salida "TagOut" adoptan el estado lógico "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar el bit de estado en operaciones lógicas con palabras (Página 194)
Principios básicos de la palabra de estado (Página 184)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

XOR: Operación lógica O-exclusiva
Descripción
La instrucción "Operación lógica O-exclusiva" permite combinar el valor de la entrada IN1 con
el valor de la entrada IN2 de bit en bit mediante una O-exclusiva lógica y consultar el resultado
en la salida OUT.
Al ejecutar la instrucción, el bit 0 del valor de la entrada IN1 se combina mediante una Oexclusiva lógica con el bit 0 del valor de la entrada IN2. El resultado se deposita en el bit 0 de
la salida OUT. La misma combinación lógica se realiza para todos los demás bits del valor
indicado.
El estado lógico del bit de resultado es "1" si el estado lógico de uno de los dos bits que deben
combinarse lógicamente también es "1". Si el estado lógico de ambos bits que deben
combinarse lógicamente es "1" o "0", se desactivará el bit de resultado correspondiente.

5172

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica O-exclusiva":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN1

Input

WORD, DWORD

I, Q, M, D, L, P o
constante

Primer valor de la operación
lógica

IN2

Input

WORD, DWORD

I, Q, M, D, L, P o
constante

Segundo valor de la opera‐
ción lógica

OUT

Output

WORD, DWORD

I, Q, M, D, L, P

Resultado de la instrucción

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
;25
:25'
ಯ7DJ,Qಯ

(1

ಯ7DJB9DOXHಯ

,1

287

ಯ7DJB9DOXHಯ

,1

(12

ಯ7DJB5HVXOWಯ
ಯ7DJ2XWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN1

Tag_Value1

01010101 01010101

IN2

Tag_Value2

00000000 00001111

OUT

Tag_Result

01010101 01011010

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El valor del
operando "Tag_Value1" se combina mediante una O-exclusiva lógica con el valor del
operando "Tag_Value2". El resultado se obtiene de bit en bit y se deposita en el operando
"Tag_Result". La salida de habilitación ENO y la salida "TagOut" adoptan el estado lógico "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar el bit de estado en operaciones lógicas con palabras (Página 194)
Principios básicos de la palabra de estado (Página 184)
Insertar elementos FUP (Página 8017)
Programación del PLC
Manual de programación y manejo, 11/2019

5173

Instrucciones
4.2 Instrucciones
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

INV: Complemento a 1
Descripción
La instrucción "Complemento a 1" permite invertir el estado lógico de los bits de la entrada IN.
Al ejecutar la instrucción, el valor de la entrada IN se combina con una operación lógica Oexclusiva utilizando una plantilla hexadecimal (W#16#FFFF para números de 16 bits o
DW#16#FFFF FFFF para números de 32 bits). Esto invierte el estado lógico de los distintos
bits y deposita el resultado en la salida OUT.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Complemento a 1":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

Enteros

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

Enteros

I, Q, M, D, L, P

Complemento a 1 del valor
de la entrada IN

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
,19
ಯ7DJ,Qಯ
ಯ7DJ,QB9DOXHಯ

,17
(1

287

,1

(12

ಯ7DJ2XWB9DOXHಯ
ಯ7DJ2XWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

5174

Operando

Valor

IN

TagIn_Value

W#16#000F

OUT

TagOut_Value

W#16#FFF0

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
invierte el estado lógico de los distintos bits de la entrada "TagIn_Value" y escribe el resultado
en la salida "TagOut_Value". La salida de habilitación ENO y la salida "TagOut" adoptan el
estado lógico "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

DECO: Descodificar
Descripción
La instrucción "Descodificar" permite activar un bit predeterminado por el valor de entrada en
el valor de salida.
La instrucción "Descodificar" lee el valor de la entrada IN y activa el bit del valor de salida, cuya
posición de bit equivale al valor leído. Los demás bits del valor de salida se rellenan con ceros.
Si el valor de la entrada IN es mayor que 31, se ejecuta una instrucción modulo 32.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Descodificar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

WORD

I, Q, M, D, L, P o
constante

Posición del bit que se activa
en el valor de salida.

OUT

Output

DWORD

I, Q, M, D, L, P

Valor de salida

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5175

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
'(&2
:25' WR

':25'

ಯ7DJ,Qಯ

(1

287

ಯ7DJ,QB9DOXHಯ

,1

(12

ಯ7DJ2XWB9DOXHಯ
ಯ7DJ2XWಯ

La figura siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
ಯ7DJ,QB9DOXHಯ 

ಯ7DJ2XWB9DOXHಯ

 



 

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
lee el número de bit "3" del valor del operando "TagIn_Value" de la entrada y activa el tercer bit
del valor del operando "TagOut_Value" de la salida.
Si no ocurren errores al ejecutar la instrucción, la salida de habilitación ENO devuelve el estado
lógico "1" y se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

ENCO: Codificar
Descripción
La instrucción "Codificar" lee el número del bit menos significativo en el valor de entrada y lo
emite en la salida OUT.
La instrucción "Codificar" selecciona el bit menos significativo del valor de la entrada IN y
escribe su número de bit en la variable de la salida OUT.

5176

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Codificar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

DWORD

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

INT

I, Q, M, D, L, P

Valor de salida

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
(1&2
':25'
ಯ7DJ,Qಯ
ಯ7DJ,QB9DOXHಯ

(1

287

,1

(12

ಯ7DJ2XWB9DOXHಯ
ಯ7DJ2XWಯ

La figura siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:

ಯ7DJ,QB9DOXHಯ
ಯ7DJ2XWB9DOXHಯ

 



 


Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. La instrucción
selecciona el bit menos significativo activado en la entrada "TagIn_Value" y escribe el bit "3" en
la variable de la salida "TagOut_Value".
Si no ocurren errores al ejecutar la instrucción, la salida de habilitación ENO devuelve el estado
lógico "1" y se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

Programación del PLC
Manual de programación y manejo, 11/2019

5177

Instrucciones
4.2 Instrucciones

SEL: Seleccionar
Descripción
La instrucción "Seleccionar" permite elegir, en función de un interruptor (entrada G), una de las
entradas IN0 o IN1 y copia su contenido en la salida OUT. Si la entrada G tiene el estado lógico
"0", se copia el valor de la entrada IN0. Si la entrada G tiene el estado lógico "1", se copia el
valor de la entrada IN1 en la salida OUT.
La instrucción solo se puede ejecutar si el estado lógico de la entrada de habilitación EN es "1"
y las variables de todos los parámetros son del mismo tipo de datos.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Seleccionar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

G

Input

BOOL

I, Q, M, D, L, T, C

IN0

Input

I, Q, M, D, L, P
Secuencias de
bits, enteros, nú‐
meros en coma flo‐
tante, temporiza‐
dores, CHAR,
TOD, DATE

Primer valor de entrada

IN1

Input

I, Q, M, D, L, P
Secuencias de
bits, enteros, nú‐
meros en coma flo‐
tante, temporiza‐
dores, CHAR,
TOD, DATE

Segundo valor de entrada

OUT

Output

I, Q, M, D, L, P
Secuencias de
bits, enteros, nú‐
meros en coma flo‐
tante, temporiza‐
dores, CHAR,
TOD, DATE

Resultado

Interruptor

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5178

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6(/
:25'
ಯ7DJ,Qಯ
ಯ7DJ,QB*ಯ

(1
*

ಯ7DJ2XWಯ

ಯ7DJ,QB9DOXHಯ

,1

(12

ಯ7DJ,QB9DOXHಯ

,1

287

ಯ7DJ2XWB9DOXHಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

G

TagIn_G

0

1

IN0

TagIn_Value0

W#16#0000

W#16#4C

IN1

TagIn_Value1

W#16#FFFF

W#16#5E

OUT

TagOut_Value

W#16#0000

W#16#5E

Si el operando "TagIn" tiene el estado lógico "1", se ejecuta la instrucción. Dependiendo del
estado lógico de la entrada "TagIn_G", se selecciona el valor de la entrada "TagIn_Value0" o
"TagIn_Value1" y se copia en la salida "TagOut_Value". Si no se producen errores al ejecutar
la instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y se activa la salida
"TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

Desplazamiento y rotación
SHR: Desplazar a la derecha
Descripción
La instrucción "Desplazar a la derecha" permite desplazar el contenido del operando de la
entrada IN de bit en bit hacia la derecha y consultar el resultado en la salida OUT. El parámetro
N determina el número de bits que debe desplazarse el valor indicado.

Programación del PLC
Manual de programación y manejo, 11/2019

5179

Instrucciones
4.2 Instrucciones
Si el valor del parámetro N es "0", el valor de la entrada IN se copia en el operando de la salida
OUT.
Si el valor del parámetro N es mayor que el número de bits disponibles, el valor del operando
de la entrada IN se desplaza hacia la derecha las posiciones de bit disponibles.
En los valores sin signo, se rellenan con ceros los bits que quedan libres en el área izquierda
del operando al realizar el desplazamiento. Si el valor indicado lleva signo, las posiciones libres
se ocupan con el estado lógico del bit de signo.
La figura siguiente muestra cómo el contenido de un operando del tipo de datos INT se
desplaza cuatro posiciones de bit hacia la derecha:


,1



1

%LW
GHVLJQR

287



 













































SRVLFLRQHV

























(VWRVFXDWURELWV
VHSLHUGHQ

/RVELWVTXHTXHGDQOLEUHV
VHUHOOHQDQFRQHOHVWDGROµJLFR
GHOELWGHVLJQR

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desplazar a la derecha":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

BYTE, WORD,
DWORD, INT,
DINT

I, Q, M, D, L, P o
constante

Valor que se desplaza

N

Input

BYTE, WORD, INT I, Q, M, D, L, P o
constante

Número de posiciones de bit
que se desplaza el valor

OUT

Output

BYTE, WORD,
DWORD, INT,
DINT

Resultado de la instrucción

I, Q, M, D, L

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5180

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6+5
:25'
ಯ7DJ,Qಯ

(1

ಯ7DJ,QB9DOXHಯ

,1

287

ಯ7DJB1XPEHUಯ

1

(12

ಯ7DJ2XWB9DOXHಯ
ಯ7DJ2XWಯ
6

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

0011 1111 1010 1111

N

Tag_Number

3

OUT

TagOut_Value

0000 0111 1111 0101

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El contenido del
operando "TagIn_Value" se desplaza tres posiciones de bit hacia la derecha. El resultado se
emite en la salida "TagOut_Value". Si no se producen errores al ejecutar la instrucción, la
salida de habilitación ENO devuelve el estado lógico "1" y se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar el bit de estado en instrucciones de desplazamiento y rotación (Página 194)
Principios básicos de la palabra de estado (Página 184)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

SHL: Desplazar a la izquierda
Descripción
La instrucción "Desplazar a la izquierda" permite desplazar el contenido del operando de la
entrada IN de bit en bit hacia la izquierda y consultar el resultado en la salida OUT. El
parámetro N determina el número de bits que debe desplazarse el valor indicado.
Si el valor del parámetro N es "0", el valor de la entrada IN se copia en el operando de la salida
OUT.

Programación del PLC
Manual de programación y manejo, 11/2019

5181

Instrucciones
4.2 Instrucciones
Si el valor del parámetro N es mayor que el número de bits disponibles, el valor del operando
de la entrada IN se desplaza hacia la izquierda las posiciones de bit disponibles.
Los bits que quedan libres en el área derecha del operando al realizar el desplazamiento se
rellenan con ceros.
La figura siguiente muestra cómo el contenido de un operando del tipo de datos WORD se
desplaza seis posiciones de bit hacia la izquierda:


,1



 








1

287
























SRVLFLRQHV

     

































/RVELWVTXHTXHGDQ
OLEUHVVHUHOOHQDQ
FRQFHURV

(VWRVVHLVELWV
VHSLHUGHQ

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desplazar a la izquierda":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

BYTE, WORD,
DWORD, INT,
DINT

I, Q, M, D, L, P o
constante

Valor que se desplaza

N

Input

BYTE, WORD, INT I, Q, M, D, L, P o
constante

Número de posiciones de bit
que se desplaza el valor

OUT

Output

BYTE, WORD,
DWORD, INT,
DINT

Resultado de la instrucción

I, Q, M, D, L

En la lista desplegable "???" del cuadro de la instrucción se puede seleccionar el tipo de datos
de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5182

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6+/
:25'
ಯ7DJ,Qಯ

(1

ಯ7DJ,QB9DOXHಯ

,1

ಯ7DJB1XPEHUಯ

1

287

ಯ7DJ2XWB9DOXHಯ
ಯ7DJ2XWಯ

(12

6

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

0011 1111 1010 1111

N

Tag_Number

4

OUT

TagOut_Value

1111 1010 1111 0000

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El contenido del
operando "TagIn_Value" se desplaza cuatro posiciones de bit hacia la izquierda. El resultado
se emite en la salida "TagOut_Value". Si no se producen errores al ejecutar la instrucción, la
salida de habilitación ENO devuelve el estado lógico "1" y se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar el bit de estado en instrucciones de desplazamiento y rotación (Página 194)
Principios básicos de la palabra de estado (Página 184)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

ROR: Rotar a la derecha
Descripción
La instrucción "Rotar a la derecha" permite rotar el contenido del operando de la entrada IN de
bit en bit hacia la derecha y consultar el resultado en la salida OUT. El parámetro N determina
el número de bits que debe rotarse el valor indicado. Los bits que quedan libres al realizar la
rotación se rellenan con los bits desplazados hacia fuera.
Si el valor del parámetro N es "0", el valor de la entrada IN se copia en el operando de la salida
OUT.

Programación del PLC
Manual de programación y manejo, 11/2019

5183

Instrucciones
4.2 Instrucciones
Si el valor del parámetro N es mayor que el número de bits disponibles, el valor del operando
en la entrada IN rota de todos modos el número indicado de posiciones de bit.
La figura siguiente muestra cómo el contenido de un operando del tipo de datos DWORD rota
tres posiciones hacia la derecha:


,1

 



       

1

SRVLFLRQHV

287

        
(OHVWDGROµJLFRGHORVWUHV
ELWVGHVSOD]DGRVVHLQVHUWD
HQODVSRVLFLRQHVTXHTXHGDQ
OLEUHV

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Rotar a la derecha":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

BYTE, WORD,
DWORD, DINT

I, Q, M, D, L, P o
constante

Valor que se rota

N

Input

BYTE, WORD, INT I, Q, M, D, L, P o
constante

Número de posiciones de bit
que rota el valor

OUT

Output

BYTE, WORD,
DWORD, DINT

Resultado de la instrucción

I, Q, M, D, L

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5184

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
525
:25'
ಯ7DJ,Qಯ

(1

ಯ7DJ,QB9DOXHಯ

,1

ಯ7DJB1XPEHUಯ

1

287

ಯ7DJ2XWB9DOXHಯ
ಯ7DJ2XWಯ

(12

6

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

1010 1010 0000 1111 0000
1111 0101 0101

N

Tag_Number

5

OUT

TagOut_Value

1010 1101 0101 0000 0111
1000 0111 1010

Si el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El contenido del
operando "TagIn_Value" se rota cinco posiciones de bit hacia la derecha. El resultado se emite
en la salida "TagOut_Value". Si no se producen errores al ejecutar la instrucción, la salida de
habilitación ENO devuelve el estado lógico "1" y se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar el bit de estado en instrucciones de desplazamiento y rotación (Página 194)
Principios básicos de la palabra de estado (Página 184)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

ROL: Rotar a la izquierda
Descripción
La instrucción "Rotar a la izquierda" permite rotar el contenido del operando de la entrada IN
de bit en bit hacia la izquierda y consultar el resultado en la salida OUT. El parámetro N
determina el número de bits que debe rotarse el valor indicado. Los bits que quedan libres al
realizar la rotación se rellenan con los bits desplazados hacia fuera.

Programación del PLC
Manual de programación y manejo, 11/2019

5185

Instrucciones
4.2 Instrucciones
Si el valor del parámetro N es "0", el valor de la entrada IN se copia en el operando de la salida
OUT.
Si el valor del parámetro N es mayor que el número de bits disponibles, el valor del operando
en la entrada IN rota de todos modos el número indicado de posiciones de bit.
La figura siguiente muestra cómo el contenido de un operando del tipo de datos DWORD rota
tres posiciones hacia la izquierda:


,1

 

       

1

287



G¯JLWRV

        
(OHVWDGROµJLFRGHORVWUHV
ELWVGHVSOD]DGRVVHLQWURGXFHHQODV
SRVLFLRQHVTXHKDQTXHGDGROLEUHV

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Rotar a la izquierda":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, T, C, D, L

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

BYTE, WORD,
DWORD, DINT

I, Q, M, D, L, P o
constante

Valor que se rota.

N

Input

BYTE, WORD, INT I, Q, M, D, L, P o
constante

Número de bits que rota el
valor.

OUT

Output

BYTE, WORD,
DWORD, DINT

Resultado de la instrucción

I, Q, M, D, L

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5186

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
52/
':25'
ಯ7DJ,Qಯ

(1

ಯ7DJ,QB9DOXHಯ

,1

ಯ7DJB1XPEHUಯ

1

287

ಯ7DJ2XWB9DOXHಯ
ಯ7DJ2XWಯ

(12

6

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

TagIn_Value

1111 0000 1010 1010 0000
1111 0000 1111

N

Tag_Number

5

OUT

TagOut_Value

0001 0101 0100 0001 1110
0001 1111 1110

Si la entrada "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción. El contenido del
operando "TagIn_Value" se rota cinco posiciones de bit hacia la izquierda. El resultado se
emite en la salida "TagOut_Value". Si no se producen errores al ejecutar la instrucción, la
salida de habilitación ENO devuelve el estado lógico "1" y se activa la salida "TagOut".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Activar el bit de estado en instrucciones de desplazamiento y rotación (Página 194)
Principios básicos de la palabra de estado (Página 184)
Insertar elementos FUP (Página 8017)
Seleccionar el tipo de datos de un elemento FUP (Página 8021)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

Programación del PLC
Manual de programación y manejo, 11/2019

5187

Instrucciones
4.2 Instrucciones

Otras instrucciones
---| |---: Consultar si el bit de estado es 1
Descripción
Con la instrucción "Consultar si el bit de estado es 1" es posible consultar el estado lógico de
los siguientes bits de estado:
● BR: Resultado binario
● OV: Rebase por exceso
● OS: Desbordamiento con memoria
● CC 0 y CC 1: Bits de visualización
Qué bits de estado se consultan se determina mediante la selección del símbolo
correspondiente en la lista desplegable de la instrucción. La siguiente tabla muestra las
posibilidades de consulta de los bits de estado:
Símbolo

Consulta

Explicación

==0

CC 0 = 0 y CC 1 = 0

La instrucción consulta si el re‐
sultado de una función matemá‐
tica es igual a 0.

<>0

CC 0 = 1 y CC 1 = 0

La instrucción consulta si el re‐
sultado de una función matemá‐
tica es diferente a 0.

o
CC 0 = 0 y CC 1 = 0

5188

>=0

CC 0 = 0

La instrucción consulta si el re‐
sultado de una función matemá‐
tica es mayor o igual que 0.

<=0

CC 1 = 0

La instrucción consulta si el re‐
sultado de una función matemá‐
tica es menor o igual que 0.

>0

CC 0 = 1 y CC 1 = 0

La instrucción consulta si el re‐
sultado de una función matemá‐
tica es mayor que 0.

<0

CC 1 = 0 y CC 1 = 0

La instrucción consulta si el re‐
sultado de una función matemá‐
tica es menor que 0.

UO

CC 1 = 1 y CC 1 = 0

La instrucción consulta si el re‐
sultado de una función matemá‐
tica no es válido. La causa de un
resultado inválido puede ser un
número en coma flotante no vá‐
lido o una división entre cero.

OV

OV = 1

La instrucción consulta si se ha
producido un desbordamiento
numérico.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Símbolo

Consulta

Explicación

OS

OS = 1

La instrucción consulta si se ha
producido un desbordamiento
numérico con memoria en una
instrucción.

BR

BR = 1

La instrucción consulta el estado
lógico del bit de estado BR.

Si la respuesta es afirmativa, la instrucción devuelve el estado lógico "1". Si no se cumple la
condición, la instrucción devuelve el estado lógico "0".
Se puede programar una consulta del bit de estado en "0" con ayuda de la instrucción "Invertir
RLO".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
08/
,17

ಯ7DJ,Qಯ

(1

ಯ7DJB9DOXHಯ

,1

287

ಯ7DJB9DOXHಯ

,1

(12

ಯ7DJB5HVXOWಯ
ಯ7DJ2XWಯ
6

6HJPHQWR
29

ಯ7DJ29ಯ
6

Cuando el operando "TagIn" devuelve el estado lógico "1", se ejecuta la instrucción
"Multiplicar" (MUL). Si se produce un desbordamiento durante la ejecución de la instrucción
"Multiplicar" se activa el bit de estado OV. Tras la consulta del bit de estado OV, se ejecuta la
instrucción "Activar salida" (S) en el segmento 2 y se activa el operando "TagOV".

Consulte también
Principios básicos de la palabra de estado (Página 184)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Activar el bit de estado (Página 186)

Programación del PLC
Manual de programación y manejo, 11/2019

5189

Instrucciones
4.2 Instrucciones

CALL: Llamar bloque
Descripción
La instrucción "Llamar bloque" llama una función (FC) sin parámetros. En función de la
operación lógica precedente, se puede tratar de una llamada absoluta o condicionada.
En la sección de instrucciones de una función (FC) no puede indicar como operando ningún
parámetro del tipo de datos BLOCK_FC en una llamada condicional. En un bloque de función
(FB) tampoco puede indiciar como operando un parámetro del tipo BLOCK_FC.
Sólo se ejecutará una llamada condicional cuando el resultado lógico (RLO) sea "1". Si no se
ejecuta una llamada condicionada, después de la operación de llamada el RLO es "0". Si se
ejecuta la operación, ésta trabaja del modo siguiente:
● Guarda la dirección de retorno del bloque que efectúa la llamada.
● Guarda los dos registros de bloque de datos (bloque de datos y bloque de datos de
instancia).
● Actualiza el área de datos locales para la FC o SFC llamada.
● Desplaza el bit MA (bit MCR activo) a la pila de bloques (pila BSTACK).

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Llamar bloque":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Bloque>

Output

BLOCK_FC

-

Función llamada

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
)&
&$//
ಯ7DJBಯ

Se llama la función "FC3" cuando el operando "Tag_1" tiene el estado lógico "1".

Consulte también
El MCR (Master Control Relay) (Página 203)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)

5190

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

SAVE: Guardar RLO en bit BR
Descripción
La instrucción "Guardar RLO en bit BR" permite guardar el resultado lógico (RLO) en el
resultado binario (BR). Durante la ejecución, la instrucción transfiere el estado lógico del
resultado lógico actual al bit de estado BR. La instrucción trabaja independientemente de las
condiciones y no influye en ningún otro bit de estado.
Nota
Tras aplicar la instrucción "Guardar RLO en bit BR", el bit BR puede ser modificado
nuevamente por instrucciones posteriores del mismo bloque o de bloques de nivel inferior.
La instrucción "Guardar RLO en bit BR" también se utiliza para controlar el estado de ejecución
de un bloque. Si, p. ej., la instrucción "Guardar RLO en bit BR" se programa al final de un
bloque, el bit BR se pone al estado lógico del resultado lógico actual del bloque. Si el bloque
se ejecuta sin fallos, tanto el bit BR como la salida de habilitación ENO se establecen como
resultado lógico "1" en el bloque que efectúa la llamada. El estado lógico "0" se asigna al bit BR
si se han producido errores durante el procesamiento del bloque. Mediante consulta del bit BR
es posible programar un tratamiento de errores.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
ಯ7DJ,QBಯ



ಯ7DJ,QBಯ

6$9(

El bit BR se ajusta en el estado lógico "1" si los operandos "TagIn_1" y "TagIn_2" devuelven el
estado lógico "1".

Consulte también
Principios básicos de la palabra de estado (Página 184)
Ejemplo del mecanismo EN/ENO en FUP (Página 161)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)

MCR<: Abrir áreas MCR
Descripción
La instrucción "Abrir áreas MCR" guarda el resultado lógico (RLO) en la pila MCR y cambia la
dependencia MCR dentro de un área MCR (MCR = Master Control Relay).

Programación del PLC
Manual de programación y manejo, 11/2019

5191

Instrucciones
4.2 Instrucciones
La pila MCR puede contener como máximo 8 entradas y funciona como una memoria
intermedia LIFO (Last In, First Out). Cuando la pila está llena, la instrucción genera un mensaje
de error (MCRF).
Nota
Observe la información contenida en el apartado "Indicaciones importantes sobre el uso de la
funcionalidad MCR", en "Consulte también".
El principio y el fin de un área MCR se definen mediante las instrucciones "Activar área MCR"
(MCRA) y "Desactivar área MCR" (MCRD). Dentro del área MCR definida es posible activar y
desactivar la dependencia MCR para una o varias partes del programa.
La dependencia MCR se activa si el RLO es "1" antes de procesar la instrucción. Si el RLO es
"0" antes de la instrucción, la dependencia MCR se desactiva. El final de la sección del
programa dependiente de MCR se programa mediante la instrucción "Cerrar áreas MCR". La
sección del programa que se encuentra entre las dos instrucciones se ve influenciada por el
MCR. Solo están afectadas las siguientes instrucciones dependientes de MCR:
● Asignación
● Activar salida (S)
● Desactivar salida (R)
● Flipflop de desactivación/activación (RS)
● Flipflop de activación/desactivación (SR)
● Copiar valor (MOVE)
También es posible anidar la activación y desactivación de la dependencia MCR programando
la instrucción "Abrir áreas MCR" en una sección del programa dependiente de MCR. Esta
instrucción se puede anidar hasta 8 niveles de profundidad. La dependencia MCR de la parte
del programa de nivel superior controla las dependencias MCR en todas las partes del
programa subordinadas. Si la dependencia MCR en la parte del programa de nivel superior
está desactivada, no es posible activarla en una parte subordinada del programa dependiente
de MCR.
Si dentro de un área MCR se llama un bloque, la dependencia MCR está desactivada en el
bloque llamado. Cuando se sale de un bloque, la dependencia MCR se ajusta igual que estaba
antes de llamarlo.
Las instrucciones "Abrir áreas MCR" y "Cerrar áreas MCR" deben programarse siempre de dos
en dos. Si una de las dos instrucciones no está programada, se dispara un error de pila MCR.

5192

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
0&5$
6HJPHQWR
ಯ7DJ,QBಯ

0&5

6HJPHQWR
ಯ7DJ,QBಯ
6HJPHQWR

0&5

ಯ7DJ2XWBಯ

|QLYHOGHO
£UHD0&5
HUQLYHOGHO
£UHD0&5

ಯ7DJ,QBಯ
6HJPHQWR
0&5!
6HJPHQWR

ಯ7DJ2XWBಯ

ಯ7DJ,QBಯ
6HJPHQWR
0&5!
6HJPHQWR
0&5'

En el segmento 1 se programa el inicio del área MCR. Si el operando "TagIn_1" devuelve el
estado lógico "1", se conecta la dependencia MCR en el primer nivel del área MCR. En ese
caso, el estado lógico del operando "TagIn_4" está asignado al operando "TagOut_2"
(segmento 6). Si el operando "TagIn_1" tiene el estado lógico "0", se desactiva la dependencia
MCR y se pone a "0" el operando "TagOut_2". En el segmento 7 se desconecta la dependencia
MCR del área MCR.
En el segmento 3 se activa la dependencia MCR en el segundo nivel del área MCR si el
operando "TagIn_2" devuelve el estado lógico "1" y el primer nivel del área MCR está activado.
En ese caso, el estado lógico del operando "TagIn_3" se asigna al operando "TagOut_1". Si el
operando "TagIn_2" tiene el estado lógico "0", se desactiva la dependencia MCR y se pone a
"0" el operando "TagOut_1". En el segmento 5 se desactiva la dependencia MCR en el
segundo nivel del área MCR. En el segmento 8 se programa el final del área MCR.

Programación del PLC
Manual de programación y manejo, 11/2019

5193

Instrucciones
4.2 Instrucciones

Consulte también
El MCR (Master Control Relay) (Página 203)
Indicaciones importantes sobre el uso de la función MCR (Página 204)
MCR>: Cerrar áreas MCR (Página 5194)
MCRA: Activar área MCR (Página 5196)
MCRD: Desactivar área MCR (Página 5198)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)

MCR>: Cerrar áreas MCR
Descripción
La instrucción "Cerrar áreas MCR" cierra una sección de programa dependiente de MCR
(MCR = Master Control Relay). También borra el resultado lógico (RLO) de la última entrada
de la pila MCR.
La pila MCR puede contener como máximo 8 entradas y funciona como una memoria
intermedia LIFO (Last In, First Out). Cuando la pila ya está vacía, la instrucción genera un
mensaje de error (MCRF).
Nota
Observe la información contenida en el apartado "Indicaciones importantes sobre el uso de la
funcionalidad MCR", en "Consulte también".
La dependencia MCR se programa con la instrucción "Abrir áreas MCR". Las instrucciones
"Abrir áreas MCR" y "Cerrar áreas MCR" deben programarse siempre de dos en dos. Si una
de las dos instrucciones no está programada, se dispara un error de pila MCR.

5194

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
0&5$
6HJPHQWR
ಯ7DJ,QBಯ

0&5

6HJPHQWR
ಯ7DJ,QBಯ
6HJPHQWR

0&5

ಯ7DJ2XWBಯ

|QLYHOGHO
£UHD0&5
HUQLYHOGHO
£UHD0&5

ಯ7DJ,QBಯ
6HJPHQWR
0&5!
6HJPHQWR

ಯ7DJ2XWBಯ

ಯ7DJ,QBಯ
6HJPHQWR
0&5!
6HJPHQWR
0&5'

En el segmento 1 se programa el inicio del área MCR. Si el operando "TagIn_1" devuelve el
estado lógico "1", se conecta la dependencia MCR en el primer nivel del área MCR. En ese
caso, el estado lógico del operando "TagIn_4" está asignado al operando "TagOut_2"
(segmento 6). Si el operando "TagIn_1" tiene el estado lógico "0", se desactiva la dependencia
MCR y se pone a "0" el operando "TagOut_2". En el segmento 7 se desconecta la dependencia
MCR del área MCR.
En el segmento 3 se activa la dependencia MCR en el segundo nivel del área MCR si el
operando "TagIn_2" devuelve el estado lógico "1". En ese caso, el estado lógico del operando
"TagIn_3" se asigna al operando "TagOut_1". Si el operando "TagIn_2" tiene el estado lógico
"0", se desactiva la dependencia MCR y se pone a "0" el operando "TagOut_1"
independientemente del estado lógico del operando "TagIn_3". En el segmento 5 se desactiva
la dependencia MCR en el segundo nivel del área MCR. En el segmento 8 se programa el final
del área MCR.

Programación del PLC
Manual de programación y manejo, 11/2019

5195

Instrucciones
4.2 Instrucciones

Consulte también
El MCR (Master Control Relay) (Página 203)
Indicaciones importantes sobre el uso de la función MCR (Página 204)
MCR<: Abrir áreas MCR (Página 5191)
MCRA: Activar área MCR (Página 5196)
MCRD: Desactivar área MCR (Página 5198)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)

MCRA: Activar área MCR
Descripción
La instrucción "Activar área MCR" permite definir el principio de un área MCR (MCR = Master
Control Relay). Dentro de dicha área es posible activar y desactivar la dependencia MCR con
la ayuda de las instrucciones siguientes:
● MCR<: Abrir áreas MCR
● MCR>: Cerrar áreas MCR
El fin del área MCR se define con la instrucción "Desactivar área MCR" (MCRD). Las
instrucciones para definir el principio y fin de un área MCR siempre deben utilizarse por parejas.
Nota
Observe la información contenida en el apartado "Indicaciones importantes sobre el uso de la
funcionalidad MCR", en "Consulte también".
Si dentro de un área MCR se llama un bloque, la dependencia MCR está desactivada en el
bloque llamado. Cuando se sale de un bloque, la dependencia MCR se ajusta igual que estaba
antes de llamarlo.
La instrucción se ejecuta sin considerar ni influir en los bits de estado.

5196

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
0&5$
6HJPHQWR
ಯ7DJ,QBಯ

0&5

6HJPHQWR
ಯ7DJ2XWಯ
ಯ7DJ,QBಯ
6HJPHQWR
0&5!
6HJPHQWR
0&5'

En el segmento 1 se programa el inicio del área MCR. Si el operando "TagIn_1" devuelve el
estado lógico "1", se activa la dependencia MCR. En ese caso, el estado lógico del operando
"TagIn_2" está asignado al operando "TagOut" (segmento 3). Si el operando "TagIn_1" tiene
el estado lógico "0", se desactiva la dependencia MCR y se pone a "0" el operando "TagOut"
independientemente del estado lógico del operando "TagIn_2". En el segmento 4 se
desconecta la dependencia MCR del área MCR. En el segmento 8 se programa el final del área
MCR.

Consulte también
El MCR (Master Control Relay) (Página 203)
Indicaciones importantes sobre el uso de la función MCR (Página 204)
MCR<: Abrir áreas MCR (Página 5191)
MCR>: Cerrar áreas MCR (Página 5194)
MCRD: Desactivar área MCR (Página 5198)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)

Programación del PLC
Manual de programación y manejo, 11/2019

5197

Instrucciones
4.2 Instrucciones

MCRD: Desactivar área MCR
Descripción
La instrucción "Desactivar área MCR" permite definir el fin de un área MCR (MCR = Master
Control Relay).
El principio de un área MCR se define con la instrucción "Activar área MCR" (MCRA). Las
instrucciones para definir el principio y fin de un área MCR siempre deben utilizarse por parejas.
Nota
Observe la información contenida en el apartado "Indicaciones importantes sobre el uso de la
funcionalidad MCR", en "Consulte también".
Dentro de un área MCR es posible programar la dependencia MCR con la ayuda de las
instrucciones siguientes:
● MCR<: Abrir áreas MCR
● MCR>: Cerrar áreas MCR
Si dentro de un área MCR se llama un bloque, la dependencia MCR está desactivada en el
bloque llamado. Cuando se sale de un bloque, la dependencia MCR se ajusta igual que estaba
antes de llamarlo.
La instrucción se ejecuta sin considerar ni influir en los bits de estado.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6HJPHQWR
0&5$
6HJPHQWR
ಯ7DJ,QBಯ

0&5

6HJPHQWR
ಯ7DJ2XWಯ
ಯ7DJ,QBಯ
6HJPHQWR
0&5!
6HJPHQWR
0&5'

5198

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
En el segmento 1 se programa el inicio del área MCR. Si el operando "TagIn_1" devuelve el
estado lógico "1", se activa la dependencia MCR. En ese caso, el estado lógico del operando
"TagIn_2" está asignado al operando "TagOut" (segmento 3). Si el operando "TagIn_1" tiene
el estado lógico "0", se desactiva la dependencia MCR y se pone a "0" el operando "TagOut".
En el segmento 4 se desconecta la dependencia MCR del área MCR. En el segmento 8 se
programa el final del área MCR.

Consulte también
El MCR (Master Control Relay) (Página 203)
Indicaciones importantes sobre el uso de la función MCR (Página 204)
MCR<: Abrir áreas MCR (Página 5191)
MCR>: Cerrar áreas MCR (Página 5194)
MCRA: Activar área MCR (Página 5196)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)

SET: Activar área por bits
Descripción
La instrucción "Activar área por bits" pone a "1" el estado lógico de los bits en un área definida.
El punto inicial del área se define mediante el puntero del parámetro S_BIT. Si el puntero
señala al área de memoria de la periferia externa (P), no se ejecuta la instrucción. El número
de bits que deben activarse en el área indicada se determina en el parámetro N de la
instrucción. Si el parámetro N tiene el valor "0", la llamada de la instrucción no tendrá efecto
alguno.
La instrucción se ejecuta sólo si el bit MCR está a "1". Si el bit MCR tiene el estado lógico "0",
no se modifican los bits en el área indicada.
Nota
Parámetro N
En el parámetro N también es posible interconectar un elemento de un bloque de datos.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Activar área por bits":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

Programación del PLC
Manual de programación y manejo, 11/2019

5199

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

S_BIT

Input

POINTER

I, Q, M, D

Apunta al primer bit del área
cuyos bits se activan
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

N

Input

INT

I, Q, M, D, L, P o
constante

Número de bits que deben
activarse

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6(7
ಯ7DJ,Qಯ
30


(1
6B%,7
1

(12

ಯ7DJ2XWಯ

Cuando el operando "TagIn" devuelve el estado lógico "1", la instrucción establece 10 bits en
el área de M0.0 a M1.2.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
El MCR (Master Control Relay) (Página 203)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

SETP: Activar mapa de bits en el área de periferia
Descripción
La instrucción "Activar mapa de bits en el área de periferia" pone los bits de un área de periferia
al estado lógico "1". Paralelamente a los bits de periferia, también se activan los bits
correspondientes en la memoria imagen de proceso de las salidas.

5200

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Los parámetros N y SA de la instrucción sirven para definir el mapa de bits que debe activarse.
Los bits del mapa deben encontrarse en aquella parte del área de periferia que tiene asignada
una memoria imagen de proceso.
Si no se ha conectado periferia para una parte del mapa de bits seleccionado, la instrucción
intentará activar el mapa de bits completo. En este caso se devuelve una información de error
en el parámetro RET_VAL.
El área de periferia se activa por bytes. Si el mapa de bits definido a través de los parámetros
N y SA no empieza ni termina en un límite de byte, la llamada de la instrucción tendrá el efecto
siguiente:
● Los bits contenidos en el primer o último byte que debe transferirse y que no pertenecen al
mapa de bits definido, obtienen el valor de los bits correspondientes en la memoria imagen
de proceso de las salidas.
ADVERTENCIA
Comportamiento involuntario
El ajuste de los bits al valor de los bits correspondientes en la memoria imagen de proceso
de las salidas puede ocasionar p. ej. el arranque accidental de motores o la desconexión
de sistemas de refrigeración.
● Los bits que pertenecen al mapa de bits definido se ponen al estado lógico "1".
La instrucción "Activar mapa de bits en el área de periferia" debe llamarse en un área MCR.
La llamada de la instrucción "Activar mapa de bits en el área de periferia" no tiene efecto alguno
y la salida de habilitación ENO se pone a "0" si se cumple una de las condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El parámetro N devuelve el valor "0"
● El bit MCR tiene el estado lógico "1".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Activar mapa de bits en el área de
periferia":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

N

Input

INT

I, Q, M, D, L o
constante

Número de bits que deben
activarse

RET_VAL

Output

INT

I, Q, M, D, L

Información de error

SA

Output

POINTER

P

Puntero hacia el primer bit
que debe activarse

Programación del PLC
Manual de programación y manejo, 11/2019

5201

Instrucciones
4.2 Instrucciones

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8xyy

Encontrará más información de error en "Consulte también".

*Los códigos de error que aparecen en el editor de programas se pueden representar como valores
enteros o hexadecimales. Encontrará más información sobre el cambio de los formatos de visualización
en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6(73
ಯ7DJ,Qಯ


(1
1

6$
5(7B9$/
(12

3
ಯ7DJB(UURUಯ
ಯ7DJ2XWಯ

Si el operando "TagIn" devuelve el estado lógico "1", la instrucción activa 8 bits en el área de
periferia de acuerdo con las salidas Q10.0 a Q10.7.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de FUP (Página 8005)

5202

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

SETI: Activar área por bytes
Descripción
La instrucción "Activar área por bytes" pone a "1" el estado lógico de los bits en un área definida
de bytes. El punto inicial del área se define en el parámetro S_BYTE. El tamaño del área se
define indicando el número de bits que deben activarse en el parámetro N de la instrucción.
Nota
El valor del parámetro N debe ser un múltiplo de 8 (p. ej. 8, 16, 24, etc.).
El puntero indicado en el parámetro S_BYTE debe señalar al área de memoria de la periferia
externa (P). Puesto que al área de memoria "P" se accede en formato de byte, palabra y
palabra doble, el puntero del parámetro S_BYTE debe señalar a un operando equivalente a un
valor límite de byte. Por tanto, el número de bit del puntero debe ser "0".
Nota
El estado lógico de los bits correspondientes en la memoria imagen de proceso de las salidas
(Q) se pone a "0".
La llamada de la instrucción "Activar área por bytes" no tiene efecto alguno y la salida de
habilitación ENO se pone a "0" si se cumple una de las condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El puntero del parámetro S_BYTE no señala al área de memoria de la periferia externa (P).
● El puntero del parámetro S_BYTE señala a un operando que no equivale a ningún valor
límite de byte.
● El valor del parámetro N no es un múltiplo de 8.
● El bit MCR tiene el estado lógico "0".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Activar área por bytes":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

Programación del PLC
Manual de programación y manejo, 11/2019

5203

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

S_BYTE

Input

POINTER

P o constante

Señala al primer byte del
área cuyos bits se activan
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

N

Input

INT

I, Q, M, D, L, P o
constante

Tamaño del área que debe
activarse
El área se indica mediante el
número de bits como múltiplo
de 8 (p. ej. 8, 16, 24, etc.).

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6(7,
ಯ7DJ,Qಯ
3


(1
6B%<7(
1

(12

ಯ7DJ2XWಯ

Si el operando "TagIn" devuelve el estado lógico "1", la instrucción activa 2 bytes (16 bits) en
el área de P2.0 a P3.7.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
El MCR (Master Control Relay) (Página 203)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

5204

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

RESET: Desactivar área por bits
Descripción
La instrucción "Desactivar área por bits" pone a "0" el estado lógico de los bits en un área
definida. El punto inicial del área se define mediante el puntero del parámetro S_BIT. Si el
puntero señala al área de memoria de la periferia externa (P), no se ejecuta la instrucción. El
número de bits que deben desactivarse en el área indicada se determina en el parámetro N de
la instrucción. Si el parámetro N tiene el valor "0", la llamada de la instrucción no tendrá efecto
alguno.
La instrucción se ejecuta sólo si el bit MCR está a "1". Si el bit MCR tiene el estado lógico "0",
no se modifican los bits en el área indicada.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desactivar área por bits":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

S_BIT

Input

POINTER

I, Q, M, D

Señala al primer bit del área
cuyos bits se desactivan
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

N

Input

INT

I, Q, M, D, L, P o
constante

Número de bits que deben
desactivarse

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
5(6(7
ಯ7DJ,Qಯ
30


(1
6B%,7
1

(12

ಯ7DJ2XWಯ

Cuando el operando "TagIn" devuelve el estado lógico "1", la instrucción desactiva 10 bits en
el área de M0.0 a M1.2.

Programación del PLC
Manual de programación y manejo, 11/2019

5205

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
El MCR (Master Control Relay) (Página 203)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

RESETP: Desactivar mapa de bits en el área de periferia
Descripción
La instrucción "Desactivar mapa de bits en el área de periferia" pone los bits de un área de
periferia al estado lógico "0". Simultáneamente con los bits de periferia se desactivan también
los bits correspondientes en la memoria imagen de proceso de las salidas.
Los parámetros N y SA de la instrucción sirven para definir el mapa de bits que debe
desactivarse. Los bits del mapa deben encontrarse en aquella parte del área de periferia que
tiene asignada una memoria imagen de proceso.
Si no hay periferia enchufada para una parte del mapa de bits seleccionado, la instrucción
intentará desactivar el mapa de bits completo. En este caso se devuelve una información de
error en el parámetro RET_VAL.
El área de periferia se desactiva por bytes. Si el mapa de bits definido a través de los
parámetros N y SA no empieza ni termina en un límite de byte, la llamada de la instrucción
tendrá el efecto siguiente:
● Los bits contenidos en el primer o último byte que debe transferirse y que no pertenecen al
mapa de bits definido, obtienen el valor de los bits correspondientes en la memoria imagen
de proceso de las salidas.
ADVERTENCIA
Comportamiento involuntario
El ajuste de los bits al valor de los bits correspondientes en la memoria imagen de proceso
de las salidas puede ocasionar p. ej. el arranque accidental de motores o la desconexión
de sistemas de refrigeración.
● Los bits que pertenecen al mapa de bits definido se ponen al estado lógico "0".
La instrucción "Desactivar mapa de bits en el área de periferia" debe llamarse en un área MCR.
La llamada de la instrucción "Desactivar mapa de bits en el área de periferia" no tiene efecto
alguno y la salida de habilitación ENO se pone a "0" si se cumple una de las condiciones
siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El parámetro N devuelve el valor "0"
● El bit MCR tiene el estado lógico "1".

5206

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desactivar mapa de bits en el área
de periferia":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

N

Input

INT

I, Q, M, D, L o
constante

Número de bits que deben
desactivarse.

RET_VAL

Output

INT

I, Q, M, D, L

Información de error

SA

Output

POINTER

P

Puntero al primer bit que de‐
be desactivarse.

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8xyy

Encontrará más información de error en "Consulte también".

*Los códigos de error que aparecen en el editor de programas se pueden representar como valores
enteros o hexadecimales. Encontrará más información sobre el cambio de los formatos de visualización
en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
5(6(73
ಯ7DJ,Qಯ


(1
1

6$
5(7B9$/
(12

3
ಯ7DJB(UURUಯ
ಯ7DJ2XWಯ

Si el operando "TagIn" devuelve el estado lógico "1", la instrucción desactiva 8 bits en el área
de periferia de acuerdo con las salidas Q10.0 a Q10.7.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)

Programación del PLC
Manual de programación y manejo, 11/2019

5207

Instrucciones
4.2 Instrucciones
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de FUP (Página 8005)

RESETI: Desactivar área por bytes
Descripción
La instrucción "Desactivar área por bytes" pone a "0" el estado lógico de los bits en un área
definida de bytes. El punto inicial del área se define mediante el puntero del parámetro
S_BYTE. El tamaño del área se define indicando el número de bits que deben desactivarse en
el parámetro N de la instrucción.
Nota
El valor del parámetro N debe ser un múltiplo de 8 (p. ej. 8, 16, 24, etc.).
El puntero indicado en el parámetro S_BYTE debe señalar al área de memoria de la periferia
externa (P). Puesto que al área de memoria "P" se accede en formato de byte, palabra y
palabra doble, el puntero del parámetro S_BYTE debe señalar a un operando equivalente a un
valor límite de byte. Por tanto, el número de bit del puntero debe ser "0".
Nota
El estado lógico de los bits correspondientes en la memoria imagen de proceso de las salidas
(Q) se pone a "0".
La llamada de la instrucción "Desactivar área por bytes" no tiene efecto alguno y la salida de
habilitación ENO se pone a "0" si se cumple una de las condiciones siguientes:
● La entrada de habilitación EN devuelve el estado lógico "0".
● El puntero del parámetro S_BYTE no señala al área de memoria de la periferia externa (P).
● El puntero del parámetro S_BYTE señala a un operando que no equivale a ningún valor
límite de byte.
● El valor del parámetro N no es un múltiplo de 8.
● El bit MCR tiene el estado lógico "0".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desactivar área por bytes":

5208

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

S_BYTE

Input

POINTER

P o constante

Señala al primer byte del
área cuyos bits se desactivan
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

N

Input

INT

I, Q, M, D, L, P o
constante

Tamaño del área cuyos bits
se desactivan.
El área se indica mediante el
número de bits como múltiplo
de 8 (p. ej. 8, 16, 24, etc.).

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
5(6(7,
ಯ7DJ,Qಯ
3


(1
6B%<7(
1

(12

ಯ7DJ2XWಯ

Si el operando "TagIn" devuelve el estado lógico "1", la instrucción desactiva 2 bytes (16 bits)
en el área de P2.0 a P3.7.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
El MCR (Master Control Relay) (Página 203)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

Programación del PLC
Manual de programación y manejo, 11/2019

5209

Instrucciones
4.2 Instrucciones

REPL_VAL: Introducir valor sustitutivo
Descripción
La instrucción "Introducir valor sustitutivo" introduce un valor sustitutivo en el acumulador 1
(ACU 1) desde un bloque de organización de error síncrono.
Nota
La instrucción "Introducir valor sustitutivo" sólo se puede llamar desde bloques de organización
de error síncrono (OB 121, OB 122).
La instrucción "Introducir valor sustitutivo" se utiliza si ya no es posible leer ningún valor de un
módulo. Tras cada acceso a dicho módulo se inicia el OB 122. Llamando la instrucción
"Introducir valor sustitutivo" es posible cargar un valor sustitutivo en el acumulador 1. La
ejecución del programa se prosigue entonces con este valor sustitutivo. La información
necesaria para seleccionar el valor sustitutivo puede consultarse en las variables locales del
OB 122.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Introducir valor sustitutivo":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

VAL

Input

DWORD

I, Q, M, D, L o
constante

Valor sustitutivo

RET_VAL

Output

INT

I, Q, M, D, L

Información de error

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de Descripción
error*
(W#16#....)
0000

Ningún error

8080

La instrucción no se ha llamado desde un OB de error síncrono.

8xyy

Encontrará más información de error en "Consulte también".

*Los códigos de error que aparecen en el editor de programas se pueden representar como valores
enteros o hexadecimales. Encontrará más información sobre el cambio de los formatos de visualización
en "Consulte también".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)

5210

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de FUP (Página 8005)

DRUM: Materializar circuito secuencial sucesivo
Descripción
La instrucción "Materializar circuito secuencial sucesivo" permite ocupar los bits de salida
programados (OUT1 a OUT16) y la palabra de salida (OUT_WORD) con los valores
programados del parámetro OUT_VAL del paso respectivo. El paso en cuestión debe cumplir
las condiciones de la máscara de habilitación programada en el parámetro S_MASK mientras
la instrucción permanece en dicho paso. La instrucción pasa al paso siguiente cuando el
evento de éste es verdadero y una vez transcurrido el tiempo programado para el paso actual,
o bien cuando el valor del parámetro JOG cambia de "0" a "1". La instrucción se desactiva
cuando el estado lógico del parámetro RESET cambia a "1". Con ello, el paso actual se iguala
al paso predeterminado (DSP).
El tiempo de permanencia en un paso se calcula multiplicando la base de tiempo
predeterminada (DTBP) por el valor de contaje predeterminado (S_PRESET) para cada paso.
Al comienzo de un nuevo paso, este valor calculado se carga en el parámetro DCC, que
contiene el tiempo restante para el paso actual. Por ejemplo, si el valor del parámetro DTBP es
"2" y el valor predeterminado para el primer paso es "100" (100 ms), el parámetro DCC
devolverá el valor "200" (200 ms).
Un paso puede programarse con un valor de tiempo, con un evento o con ambos. Los pasos
programados con un bit de evento y el valor de tiempo "0" pasan al siguiente paso en cuanto
el estado lógico del bit de evento es "1". Los pasos programados sólo con un valor de tiempo
empiezan a contar el tiempo inmediatamente. Los pasos programados con un bit de evento y
un valor de tiempo mayor que "0" empiezan a contar el tiempo en cuanto el estado lógico del
bit de evento es "1". Los bits de evento se inicializan con el estado lógico "1".
Si el circuito secuencial sucesivo se encuentra en el último paso programado (LST_STEP) y ha
transcurrido el tiempo para dicho paso, el estado lógico del parámetro Q se pone a "1". De lo
contrario, se pone a "0". Si está activado el parámetro Q, la instrucción permanece en el paso
hasta la desactivación.
En la máscara configurable (S_MASK) es posible seleccionar los distintos bits de la palabra de
salida (OUT_WORD) y activar o desactivar los bits de salida (OUT1 a OUT16) mediante los
valores de salida (OUT_VAL). Si un bit de la máscara configurable tiene el estado lógico "1",
el valor OUT_VAL activa o desactiva el bit respectivo. Si el estado lógico de un bit de la
máscara configurable es "0", no cambia el bit respectivo. Todos los bits de la máscara
configurable de todos los 16 pasos se inicializan con el estado lógico "1".
El bit de salida del parámetro OUT1 equivale al bit menos significativo de la palabra de salida
(OUT_WORD). El bit de salida del parámetro OUT16 equivale al bit más significativo de la
palabra de salida (OUT_WORD).
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en

Programación del PLC
Manual de programación y manejo, 11/2019

5211

Instrucciones
4.2 Instrucciones
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Materializar circuito secuencial
sucesivo":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

RESET

Input

BOOL

I, Q, M, D, L

El estado lógico "1" indica
una condición de desactiva‐
ción.

JOG

Input

BOOL

I, Q, M, D, L

Si el estado lógico cambia de
"0" a "1", la instrucción pasa
al siguiente paso.

DRUM_EN

Input

BOOL

I, Q, M, D, L

El estado lógico "1" permite
que el circuito secuencial su‐
cesivo siga contando según
el evento y los criterios de
tiempo.

LST_STEP

Input

BYTE

I, Q, M, D, L o
constante

Número del último paso pro‐
gramado

EVENT(i),

Input

BOOL

I, Q, M, D, L

Bit de evento (i);
el estado lógico inicial es "1".

1 ≤ i ≤ 16
Output

BOOL

I, Q, M, D, L

Bit de salida (j)

Q

Output

BOOL

I, Q, M, D, L

El estado lógico "1" indica
que ha transcurrido el tiempo
del último paso.

OUT_WORD

Output

WORD

I, Q, M, D, L, P

Dirección de palabra en la
que el circuito secuencial su‐
cesivo escribe los valores de
salida.

ERR_CODE

Output

WORD

I, Q, M, D, L, P

Información de error

JOG_HIS

Static

BOOL

I, Q, M, D, L

Bit de evolución del paráme‐
tro JOG

EOD

Static

BOOL

I, Q, M, D, L

El estado lógico "1" indica
que ha transcurrido el tiempo
del último paso.

DSP

Static

BYTE

I, Q, M, D, L, P

Paso predeterminado del cir‐
cuito secuencial sucesivo

DSC

Static

BYTE

I, Q, M, D, L, P

Paso actual del circuito se‐
cuencial sucesivo

DCC

Static

DWORD

I, Q, M, D, L, P

Valor de contaje actual del
circuito secuencial sucesivo

DTBP

Static

WORD

I, Q, M, D, L, P

Base de tiempo predetermi‐
nada del circuito secuencial
sucesivo

OUT(j),
1 ≤ j ≤ 16

5212

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

PrevTime

Static

TIME

I, Q, M, D, L o
constante

Hora de sistema anterior

S_PRESET

Static

ARRAY[1..16] of
WORD

I, Q, M, D, L

Valor de contaje predetermi‐
nado para cada paso [1 a 16];
1 ciclo de reloj = 1 ms.

OUT_VAL

Static

ARRAY[1..16,
0..15] of BOOL

I, Q, M, D, L

Valores de salida para cada
paso [1 a 16, 0 a 15].

S_MASK

Static

ARRAY[1..16,
0..15] of BOOL

I, Q, M, D, L

Máscara configurable para
cada paso [1 a 16, 0 a 15].
Los estados lógicos iniciales
son "1".

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
ERR_CODE*

Explicación

W#16#0000

Ningún error

W#16#000B

El valor del parámetro LST_STEP es menor que 1 o mayor que 16.

W#16#000C

El valor del parámetro DSC es menor que 1 o mayor que el valor del parámetro LST_STEP.

W#16#000D

El valor del parámetro DSP es menor que 1 o mayor que el valor de LST_STEP.

*Los códigos de error en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Resultado
En el ejemplo siguiente, la instrucción pasa del paso 1 al paso 2. Los bits de salida (OUT1 a
OUT16) y la palabra de salida (OUT_WORD) se activan según la máscara configurada para el
paso 2 y los valores del parámetro OUT_VAL.
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.
ಯ'580B'%ಯ
'580
ಯ7DJ,Qಯ
ಯ7DJB5HVHWಯ
ಯ7DJB,QSXWB-2*ಯ
ಯ7DJB'580B(1ಯ
ಯ/DVW6WHSಯ
ಯ0\(YHQWಯ

(1
5(6(7
-2*
'580B(1
/67B67(3
(9(17

(12
287
4
287B:25'
(55B&2'(

ಯ7DJ2XWಯ
ಯ0\2XWSXWಯ
ಯ7DJB2XWSXWB4ಯ
ಯ7DJB2XWSXWB:25'ಯ
ಯ7DJB(UURU&RGHಯ

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.

Programación del PLC
Manual de programación y manejo, 11/2019

5213

Instrucciones
4.2 Instrucciones

Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para asignar valores a los parámetros de
entrada:
Parámetro

Operando

Dirección

Valor

RESET

Tag_Reset

M0.0

FALSE

JOG

Tag_Input_JOG

M0.1

FALSE

DRUM_EN

Tag_Input_Drum_EN

M0.2

TRUE

LST_STEP

Tag_Number_LastStep

MB1

B#16#08

EVENT2

MyTag_Event_2

M20.0

FALSE

EVENT4

MyTag_Event_4

M20.1

FALSE

EVENT6

MyTag_Event_6

M20.2

FALSE

EVENT8

MyTag_Event_8

M20.3

FALSE

EVENT10

MyTag_Event_10

M20.4

FALSE

EVENT12

MyTag_Event_12

M20.5

FALSE

EVENT14

MyTag_Event_14

M20.6

FALSE

EVENT16

MyTag_Event_16

M20.7

FALSE

En el bloque de datos de instancia "DRUM_DB" de la instrucción están almacenados los
siguientes valores:
Parámetro

5214

Dirección

Valor

JOG_HIS

DBX12.0

FALSE

EOD

DBX12.1

FALSE

DSP

DBB13

W#16#0001

DSC

DBB14

W#16#0001

DCC

DBD16

DW#16#0000000A

DTBP

DBW20

W#16#0001

S_PRESET[1]

DBW26

W#16#0064

S_PRESET[2]

DBW28

W#16#00C8

OUT_VAL[1,0]

DBX58.0

TRUE

OUT_VAL[1,1]

DBX58.1

TRUE

OUT_VAL[1,2]

DBX58.2

TRUE

OUT_VAL[1,3]

DBX58.3

TRUE

OUT_VAL[1,4]

DBX58.4

TRUE

OUT_VAL[1,5]

DBX58.5

TRUE

OUT_VAL[1,6]

DBX58.6

TRUE

OUT_VAL[1,7]

DBX58.7

TRUE

OUT_VAL[1,8]

DBX59.0

TRUE

OUT_VAL[1,9]

DBX59.1

TRUE

OUT_VAL[1,10]

DBX59.2

TRUE

OUT_VAL[1,11]

DBX59.3

TRUE

OUT_VAL[1,12]

DBX59.4

TRUE

OUT_VAL[1,13]

DBX59.5

TRUE

OUT_VAL[1,14]

DBX59.6

TRUE

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Dirección

Valor

OUT_VAL[1,15]

DBX59.7

TRUE

OUT_VAL[2,0]

DBX60.0

FALSE

OUT_VAL[2,1]

DBX60.1

FALSE

OUT_VAL[2,2]

DBX60.2

FALSE

OUT_VAL[2,3]

DBX60.3

FALSE

OUT_VAL[2,4]

DBX60.4

FALSE

OUT_VAL[2,5]

DBX60.5

FALSE

OUT_VAL[2,6]

DBX60.6

FALSE

OUT_VAL[2,7]

DBX60.7

FALSE

OUT_VAL[2,8]

DBX61.0

FALSE

OUT_VAL[2,9]

DBX61.1

FALSE

OUT_VAL[2,10]

DBX61.2

FALSE

OUT_VAL[2,11]

DBX61.3

FALSE

OUT_VAL[2,12]

DBX61.4

FALSE

OUT_VAL[2,13]

DBX61.5

FALSE

OUT_VAL[2,14]

DBX61.6

FALSE

OUT_VAL[2,15]

DBX61.7

FALSE

S_MASK[2,0]

DBX92.0

FALSE

S_MASK[2,1]

DBX92.1

TRUE

S_MASK[2,2]

DBX92.2

TRUE

S_MASK[2,3]

DBX92.3

TRUE

S_MASK[2,4]

DBX92.4

TRUE

S_MASK[2,5]

DBX92.5

FALSE

S_MASK[2,6]

DBX92.6

TRUE

S_MASK[2,7]

DBX92.7

TRUE

S_MASK[2,8]

DBX93.0

FALSE

S_MASK[2,9]

DBX93.1

FALSE

S_MASK[2,10]

DBX93.2

TRUE

S_MASK[2,11]

DBX93.3

TRUE

S_MASK[2,12]

DBX93.4

TRUE

S_MASK[2,13]

DBX93.5

TRUE

S_MASK[2,14]

DBX93.6

FALSE

S_MASK[2,15]

DBX93.7

TRUE

Los parámetros de salida tienen los valores siguientes antes de ejecutarse la instrucción:
Parámetro

Operando

Dirección

Valor

Q

Tag_Output_Q

M6.0

FALSE

OUTWORD

Tag_OutputWord

MW8

W#16#FFFF

OUT1

MyTag_Output_1

M4.0

TRUE

OUT2

MyTag_Output_2

M4.1

TRUE

OUT3

MyTag_Output_3

M4.2

TRUE

OUT4

MyTag_Output_4

M4.3

TRUE

Programación del PLC
Manual de programación y manejo, 11/2019

5215

Instrucciones
4.2 Instrucciones
Parámetro

Operando

Dirección

Valor

OUT5

MyTag_Output_5

M4.4

TRUE

OUT6

MyTag_Output_6

M4.5

TRUE

OUT7

MyTag_Output_7

M4.6

TRUE

OUT8

MyTag_Output_8

M4.7

TRUE

OUT9

MyTag_Output_9

M5.0

TRUE

OUT10

MyTag_Output_10

M5.1

TRUE

OUT11

MyTag_Output_11

M5.2

TRUE

OUT12

MyTag_Output_12

M5.3

TRUE

OUT13

MyTag_Output_13

M5.4

TRUE

OUT14

MyTag_Output_14

M5.5

TRUE

OUT15

MyTag_Output_15

M5.6

TRUE

OUT16

MyTag_Output_16

M5.7

TRUE

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:

5216

Parámetro

Operando

Dirección

Valor

OUT1

MyTag_Output_1

M4.0

TRUE

OUT2

MyTag_Output_2

M4.1

FALSE

OUT3

MyTag_Output_3

M4.2

FALSE

OUT4

MyTag_Output_4

M4.3

FALSE

OUT5

MyTag_Output_5

M4.4

FALSE

OUT6

MyTag_Output_6

M4.5

TRUE

OUT7

MyTag_Output_7

M4.6

FALSE

OUT8

MyTag_Output_8

M4.7

FALSE

OUT9

MyTag_Output_9

M5.0

TRUE

OUT10

MyTag_Output_10

M5.1

TRUE

OUT11

MyTag_Output_11

M5.2

FALSE

OUT12

MyTag_Output_12

M5.3

FALSE

OUT13

MyTag_Output_13

M5.4

FALSE

OUT14

MyTag_Output_14

M5.5

FALSE

OUT15

MyTag_Output_15

M5.6

TRUE

OUT16

MyTag_Output_16

M5.7

FALSE

Q

Tag_Output_Q

M6.0

FALSE

OUTWORD

Tag_OutputWord

MW8

W#16#4321

ERR_CODE

Tag_ErrorCode

MW10

W#16#0000

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
En el bloque de datos de instancia "DRUM_DB" de la instrucción están almacenados los
siguientes valores:
Parámetro

Dirección

Valor

JOG_HIS

DBX12.0

FALSE

EOD

DBX12.1

FALSE

DSC

DBB14

W#16#0002

DCC

DBD16

DW#16#000000C8

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

DRUM_X: Materializar circuito secuencial sucesivo
Descripción
La instrucción "Materializar circuito secuencial sucesivo" permite materializar un circuito
secuencial sucesivo con 16 pasos como máximo. El número del primer paso se define con el
parámetro DSP. El número del último paso se predetermina con el parámetro LST_STEP.
En cada paso se escriben todos los 16 bits de salida OUT0 a OUT15 y el parámetro de salida
OUT_WORD (que contiene los bits de salida). A un bit de salida se asigna bien sea el bit
correspondiente del campo predefinido OUT_VAL, o bien el bit de salida del paso anterior. El
valor que se asigne dependerá de la ocupación de los bits de máscara en el parámetro
S_MASK.
Nota
El ajuste predeterminado de los bits de máscara es 0. Para modificar el ajuste actual de uno
o varios bits de máscara, realice el cambio en el bloque de datos de instancia.
La instrucción "Materializar circuito secuencial sucesivo" pasa al siguiente paso cuando se
produce un flanco ascendente en el parámetro JOG. Si la instrucción ya se encuentra en el
último paso y se produce un flanco ascendente en el parámetro JOG, se activan las variables
Q y EOD. En este caso, el parámetro DCC se pone al valor 0. La instrucción permanece en el
último paso hasta que el parámetro RESET se pone al valor "1".
Además, también se puede permitir la transición al paso siguiente en función del tiempo. Para
ello se debe poner al valor "1" el parámetro DRUM_EN. La transición al paso siguiente tiene
lugar si está activado el bit de evento (EVENTi) correspondiente al paso actual y si ha
transcurrido el tiempo predeterminado para el paso actual. El tiempo necesario para un paso

Programación del PLC
Manual de programación y manejo, 11/2019

5217

Instrucciones
4.2 Instrucciones
resulta de la multiplicación de la base de tiempo (DTBP por el factor de tiempo válido para el
paso actual (S_PRESET).
Nota
El tiempo de ejecución restante en el paso actual (DCC) se reduce únicamente si está activado
el bit de evento correspondiente (EVENTi).
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".
Si, al llamar la instrucción, el parámetro RESET tiene el valor "1", el circuito secuencial
sucesivo pasará al paso cuyo número se haya asignado al parámetro DSP.
Un paso puede programarse con un valor de tiempo, con un evento o con ambos. Los pasos
programados con un bit de evento y el valor de tiempo "0" pasan al siguiente paso en cuanto
el estado lógico del bit de evento es "1". Los pasos programados solo con un valor de tiempo
empiezan a contar el tiempo inmediatamente. Los pasos programados con un bit de evento y
un valor de tiempo mayor que "0" empiezan a contar el tiempo en cuanto el estado lógico del
bit de evento es "1".
El circuito secuencial sucesivo también se puede conmutar en progresión en todo momento a
través del valor del parámetro JOG.
En la primera llamada de la instrucción, el parámetro RESET se debe poner a 1.
Si el circuito secuencial se encuentra en el último paso y ha transcurrido el tiempo de ejecución
predefinido para este paso, se activan los parámetros Q y EOD. La instrucción permanece en
el último paso hasta que el parámetro RESET adopte el valor "1".
Esta instrucción se ejecuta solo en los estados operativos ARRANQUE y RUN.
El sistema operativo inicializa la instrucción "Materializar circuito secuencial sucesivo" cuando
se efectúa un arranque en frío. La instrucción no se inicializa en caso de un rearranque
completo (en caliente). Si la instrucción "Materializar circuito secuencial sucesivo" debe
inicializarse tras un rearranque completo (en caliente), es preciso llamarla en el OB 100 con el
valor "1" en el parámetro RESET.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Materializar circuito secuencial
sucesivo":

5218

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

RESET

Input

BOOL

I, Q, M, D, L

El estado lógico "1" desactiva
el circuito secuencial. En la
primera llamada de la instruc‐
ción, el parámetro RESET se
debe poner a "1".
En el parámetro RESET tam‐
bién se pueden indicar cons‐
tantes.

JOG

Input

BOOL

I, Q, M, D, L

Un flanco ascendente (con
respecto a la última llamada)
provoca la transición al paso
siguiente, siempre que el cir‐
cuito secuencial no se en‐
cuentre aún en el último pa‐
so. La transición tiene lugar
independientemente del va‐
lor asignado al parámetro
DRUM_EN.

DRUM_EN

Input

BOOL

I, Q, M, D, L

Parámetro de control que de‐
termina si se puede realizar
una transición al paso si‐
guiente en función del tiem‐
po. Si el valor es "1", es posi‐
ble una transición en función
del tiempo.

LST_STEP

Input

BYTE

I, Q, M, D, L o
constante

Número del último paso

EVENTi,

Los valores admisibles son 1
a 16.

Input

BOOL

I, Q, M, D, L

Bit de evento n.º i (pertenece
al paso i)

Output

BOOL

I, Q, M, D, L

Bit de salida j

Q

Output

BOOL

I, Q, M, D, L

Parámetro de estado que in‐
dica si ha transcurrido el tiem‐
po predefinido por el usuario
para la ejecución del último
paso.

OUT_WORD

Output

WORD

I, Q, M, D, L, P

Bits de salida resumidos en
una variable

ERR_CODE

Output

WORD

I, Q, M, D, L, P

Información de error

JOG_HIS

Static

BOOL

I, Q, M, D, L

Irrelevante para el usuario
(parámetro de entrada JOG
de la llamada anterior)

EOD

Static

BOOL

I, Q, M, D, L

Idéntico al parámetro de sali‐
da Q

DSP

Static

BYTE

I, Q, M, D, L, P o
constante

Número del primer paso

1 ≤ i ≤ 16
OUTj,
0 ≤ j ≤ 15

DSC

Static

Programación del PLC
Manual de programación y manejo, 11/2019

BYTE

I, Q, M, D, L, P o
constante

Los valores admisibles son 1
a 16.
Número del paso actual

5219

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

DCC

Static

DWORD

I, Q, M, D, L, P

Tiempo de ejecución restan‐
te del paso actual, indicado
en milisegundos (ms) (rele‐
vante solo si DRUM_EN = 1 y
el bit de evento correspon‐
diente = 1)

DTBP

Static

WORD

I, Q, M, D, L, P o
constante

Base de tiempo en milisegun‐
dos (ms) válida para todos
los pasos

PREV_TIME

Static

DWORD

I, Q, M, D, L o
constante

(Irrelevante para el usuario:
hora de sistema de la llama‐
da anterior)

S_PRESET

Static

ARRAY of WORD

I, Q, M, D, L o
constante

Campo unidimensional con
los factores de tiempo para
cada paso.
Selección recomendada de
índices: [1 a 16].
En este caso, S_PRESET [x]
contiene el factor de tiempo
del paso x.

OUT_VAL

Static

ARRAY of BOOL

I, Q, M, D, L

Campo bidimensional con
los valores que deben emitir‐
se en cada paso, a no ser
que se hayan inhibido vía
S_MASK.
Selección recomendada de
índices: [1 a 16, 0 a 15]. En
este caso, OUT_VAL [x, y]
contiene el valor asignado al
bit de salida OUTy en el paso
x.

S_MASK

Static

ARRAY of BOOL

I, Q, M, D, L

Campo bidimensional con
los bits de máscara para ca‐
da paso.
Selección recomendada de
índices: [1 a 16, 0 a 15]. En
este caso, S_MASK [x, y]
contiene el bit de máscara
para el valor "y"-ésimo que
debe emitirse en el paso x.
Significado de los bits de
máscara:
● 0: el valor
correspondiente del paso
anterior se asigna al
respectivo bit de salida
● 1: el valor
correspondiente de
OUT_VAL se asigna al
respectivo bit de salida.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5220

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
ERR_CO‐
DE*
(W#16#...)

Explicación

0000

Ningún error

8081

Valor no admisible en el parámetro LST_STEP

8082

Valor no admisible en DSC

8083

Valor no admisible en DSP

8084

El producto DCC = DTBP * S_PRESET[DSC] excede el valor 2**31-1 (aprox. 24,86 días).

*Los códigos de error en el editor de programas se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
En el ejemplo siguiente, la instrucción pasa del paso 1 al paso 2. Los bits de salida (OUT0 a
OUT15) y la palabra de salida (OUT_WORD) se activan según la máscara configurada para el
paso 2 y los valores del parámetro OUT_VAL.
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.
ಯ'580B;B'%ಯ
'580B;
ಯ7DJ,Qಯ
ಯ7DJB5HVHWಯ
ಯ7DJB,QSXWB-2*ಯ
ಯ7DJB'580B(1ಯ
ಯ/DVW6WHSಯ
ಯ0\(YHQWಯ

(12

(1
5(6(7
-2*
'580B(1
/67B67(3
(9(17

287
4
287B:25'
(55B&2'(

ಯ7DJ2XWಯ
ಯ0\2XWSXWಯ
ಯ7DJB2XWSXWB4ಯ
ಯ7DJB2XWSXWB:25'ಯ
ಯ7DJB(UURU&RGHಯ

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.

Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para asignar valores a los parámetros de
entrada:
Parámetro

Operando

Dirección

Valor

RESET

Tag_Reset

M0.0

FALSE

JOG

Tag_Input_JOG

M0.1

FALSE

DRUM_EN

Tag_Input_Drum_EN

M0.2

TRUE

LST_STEP

Tag_Number_LastStep

MB1

B#16#08

EVENT2

MyTag_Event_2

M20.0

FALSE

Programación del PLC
Manual de programación y manejo, 11/2019

5221

Instrucciones
4.2 Instrucciones
Parámetro

Operando

Dirección

Valor

EVENT4

MyTag_Event_4

M20.1

FALSE

EVENT6

MyTag_Event_6

M20.2

FALSE

EVENT8

MyTag_Event_8

M20.3

FALSE

EVENT10

MyTag_Event_10

M20.4

FALSE

EVENT12

MyTag_Event_12

M20.5

FALSE

EVENT14

MyTag_Event_14

M20.6

FALSE

EVENT16

MyTag_Event_16

M20.7

FALSE

En el bloque de datos de instancia "DRUM_X_DB" de la instrucción están almacenados los
siguientes valores:
Parámetro

5222

Dirección

Valor

JOG_HIS

DBX12.0

FALSE

EOD

DBX12.1

FALSE

DSP

DBB13

W#16#0001

DSC

DBB14

W#16#0001

DCC

DBD16

DW#16#0000000A

DTBP

DBW20

W#16#0001

S_PRESET[1]

DBW26

W#16#0064

S_PRESET[2]

DBW28

W#16#00C8

OUT_VAL[1,0]

DBX58.0

TRUE

OUT_VAL[1,1]

DBX58.1

TRUE

OUT_VAL[1,2]

DBX58.2

TRUE

OUT_VAL[1,3]

DBX58.3

TRUE

OUT_VAL[1,4]

DBX58.4

TRUE

OUT_VAL[1,5]

DBX58.5

TRUE

OUT_VAL[1,6]

DBX58.6

TRUE

OUT_VAL[1,7]

DBX58.7

TRUE

OUT_VAL[1,8]

DBX59.0

TRUE

OUT_VAL[1,9]

DBX59.1

TRUE

OUT_VAL[1,10]

DBX59.2

TRUE

OUT_VAL[1,11]

DBX59.3

TRUE

OUT_VAL[1,12]

DBX59.4

TRUE

OUT_VAL[1,13]

DBX59.5

TRUE

OUT_VAL[1,14]

DBX59.6

TRUE

OUT_VAL[1,15]

DBX59.7

TRUE

OUT_VAL[2,0]

DBX60.0

FALSE

OUT_VAL[2,1]

DBX60.1

FALSE

OUT_VAL[2,2]

DBX60.2

FALSE

OUT_VAL[2,3]

DBX60.3

FALSE

OUT_VAL[2,4]

DBX60.4

FALSE

OUT_VAL[2,5]

DBX60.5

FALSE

OUT_VAL[2,6]

DBX60.6

FALSE

OUT_VAL[2,7]

DBX60.7

FALSE

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Dirección

Valor

OUT_VAL[2,8]

DBX61.0

FALSE

OUT_VAL[2,9]

DBX61.1

FALSE

OUT_VAL[2,10]

DBX61.2

FALSE

OUT_VAL[2,11]

DBX61.3

FALSE

OUT_VAL[2,12]

DBX61.4

FALSE

OUT_VAL[2,13]

DBX61.5

FALSE

OUT_VAL[2,14]

DBX61.6

FALSE

OUT_VAL[2,15]

DBX61.7

FALSE

S_MASK[2,0]

DBX92.0

FALSE

S_MASK[2,1]

DBX92.1

TRUE

S_MASK[2,2]

DBX92.2

TRUE

S_MASK[2,3]

DBX92.3

TRUE

S_MASK[2,4]

DBX92.4

TRUE

S_MASK[2,5]

DBX92.5

FALSE

S_MASK[2,6]

DBX92.6

TRUE

S_MASK[2,7]

DBX92.7

TRUE

S_MASK[2,8]

DBX93.0

FALSE

S_MASK[2,9]

DBX93.1

FALSE

S_MASK[2,10]

DBX93.2

TRUE

S_MASK[2,11]

DBX93.3

TRUE

S_MASK[2,12]

DBX93.4

TRUE

S_MASK[2,13]

DBX93.5

TRUE

S_MASK[2,14]

DBX93.6

FALSE

S_MASK[2,15]

DBX93.7

TRUE

Los parámetros de salida tienen los valores siguientes antes de ejecutarse la instrucción:
Parámetro

Operando

Dirección

Valor

Q

Tag_Output_Q

M6.0

FALSE

OUTWORD

Tag_OutputWord

MW8

W#16#FFFF

OUT0

MyTag_Output_0

M4.0

TRUE

OUT1

MyTag_Output_1

M4.1

TRUE

OUT2

MyTag_Output_2

M4.2

TRUE

OUT3

MyTag_Output_3

M4.3

TRUE

OUT4

MyTag_Output_4

M4.4

TRUE

OUT5

MyTag_Output_5

M4.5

TRUE

OUT6

MyTag_Output_6

M4.6

TRUE

OUT7

MyTag_Output_7

M4.7

TRUE

OUT8

MyTag_Output_8

M5.0

TRUE

OUT9

MyTag_Output_9

M5.1

TRUE

OUT10

MyTag_Output_10

M5.2

TRUE

OUT11

MyTag_Output_11

M5.3

TRUE

OUT12

MyTag_Output_12

M5.4

TRUE

Programación del PLC
Manual de programación y manejo, 11/2019

5223

Instrucciones
4.2 Instrucciones
Parámetro

Operando

Dirección

Valor

OUT13

MyTag_Output_13

M5.5

TRUE

OUT14

MyTag_Output_14

M5.6

TRUE

OUT15

MyTag_Output_15

M5.7

TRUE

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Dirección

Valor

OUT0

MyTag_Output_0

M4.0

TRUE

OUT1

MyTag_Output_1

M4.1

FALSE

OUT2

MyTag_Output_2

M4.2

FALSE

OUT3

MyTag_Output_3

M4.3

FALSE

OUT4

MyTag_Output_4

M4.4

FALSE

OUT5

MyTag_Output_5

M4.5

TRUE

OUT6

MyTag_Output_6

M4.6

FALSE

OUT7

MyTag_Output_7

M4.7

FALSE

OUT8

MyTag_Output_8

M5.0

TRUE

OUT9

MyTag_Output_9

M5.1

TRUE

OUT10

MyTag_Output_10

M5.2

FALSE

OUT11

MyTag_Output_11

M5.3

FALSE

OUT12

MyTag_Output_12

M5.4

FALSE

OUT13

MyTag_Output_13

M5.5

FALSE

OUT14

MyTag_Output_14

M5.6

TRUE

OUT15

MyTag_Output_15

M5.7

FALSE

Q

Tag_Output_Q

M6.0

FALSE

OUTWORD

Tag_OutputWord

MW8

W#16#4321

ERR_CODE

Tag_ErrorCode

MW10

W#16#0000

En el bloque de datos de instancia "DRUM_X_DB" de la instrucción están almacenados los
siguientes valores:
Parámetro

Dirección

Valor

JOG_HIS

DBX12.0

FALSE

EOD

DBX12.1

FALSE

DSC

DBB14

W#16#0002

DCC

DBD16

DW#16#000000C8

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)

5224

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

DCAT: Alarma de tiempo para control discreto
Descripción
La instrucción "Alarma de tiempo para control discreto" acumula el tiempo desde el instante en
el que el parámetro CMD da la orden de abrir o cerrar. El tiempo se acumula hasta excederse
el tiempo predeterminado (PT) o hasta recibir la notificación de que el dispositivo se ha cerrado
o abierto dentro del tiempo prescrito (O_FB o C_FB). Si se excede el tiempo predeterminado
antes de recibirse la notificación de que se ha abierto o cerrado el dispositivo, se activa la
alarma correspondiente. Si el estado lógico de la entrada de la orden cambia antes del tiempo
predeterminado, se reinicia el tiempo.
Al insertar la instrucción en el programa se abre automáticamente el cuadro de diálogo
"Opciones de llamada" se abre automáticamente; en él se puede determinar si los parámetros
de bloque de la instrucción se depositan en un bloque de datos propio (instancia individual) o
bien como variable local (multiinstancia) en la interfaz del bloque. Si crea un bloque de datos
propio, lo encontrará en el árbol del proyecto, en la carpeta "Recursos de programa", en
"Bloques de programa > Bloques de sistema". Encontrará más información al respecto en
"Consulte también".
La instrucción "Alarma de tiempo para control discreto" tiene las reacciones siguientes en las
condiciones de entrada:
● Si el estado lógico del parámetro CMD cambia de "0" a "1", esto tiene los efectos siguientes
en los estados lógicos de los parámetros Q, CMD_HIS, ET, OA y CA:
– Los parámetros Q y CMD_HIS se ponen a "1"
– Los parámetros ET, OA y CA se ponen a "0"
● Si el estado lógico del parámetro CMD cambia de "1" a "0", los parámetros Q, ET, OA, CA
y CMD_HIS se ponen a "0".
● Si los parámetros CMD y CMD_HIS tienen el estado lógico "1" y el parámetro O_FB se pone
a "0", la diferencia de tiempo (ms) desde la última ejecución de la instrucción se suma al
valor del parámetro ET. Si el valor del parámetro ET excede el del parámetro PT, el estado
lógico del parámetro OA se pone a "1". Si el valor del parámetro ET no excede el del
parámetro PT, el estado lógico del parámetro OA se pone a "0". El valor del parámetro
CMD_HIS se pone al del parámetro CMD.
● Si los estados lógicos de los parámetros CMD, CMD_HIS y O_FB están a "1" y el parámetro
C_FB devuelve el valor "0", el estado lógico del parámetro OA se pone a "0". El valor del
parámetro ET se pone al del parámetro PT. Si el estado lógico del parámetro O_FB cambia
a "0", se activa la alarma en la siguiente ejecución de la instrucción. El valor del parámetro
CMD_HIS se pone al del parámetro CMD.

Programación del PLC
Manual de programación y manejo, 11/2019

5225

Instrucciones
4.2 Instrucciones
● Si los parámetros CMD, CMD_HIS y C_FB devuelven el estado lógico "0", la diferencia de
tiempo (ms) desde la última ejecución de la instrucción se suma al valor del parámetro ET.
Si el valor del parámetro ET excede el del parámetro PT, el estado lógico del parámetro CA
se pone a "1". Si no se excede el valor del parámetro PT, el parámetro CA devuelve el
estado lógico "0". El valor del parámetro CMD_HIS se pone al del parámetro CMD.
● Si los parámetros CMD, CMD_HIS y O_FB devuelven el estado lógico "0" y el parámetro
C_FB está a "1", el parámetro CA se pone a "0". El valor del parámetro ET se pone al del
parámetro PT. Si el estado lógico del parámetro C_FB cambia a "0", se activa la alarma en
la siguiente ejecución de la instrucción. El valor del parámetro CMD_HIS se pone al del
parámetro CMD.
● Si los parámetros O_FB y C_FB devuelven simultáneamente el estado lógico "1", los
estados lógicos de ambas salidas de alarma se ponen a "1".
La instrucción "Alarma de tiempo para control discreto" no devuelve información de error.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Alarma de tiempo para control
discreto":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

CMD

Input

BOOL

I, Q, M, D, L

El estado lógico "0" da la or‐
den de "Cerrar".
El estado lógico "1" da la or‐
den de "Abrir".

O_FB

Input

BOOL

I, Q, M, D, L

Entrada de realimentación al
abrir

C_FB

Input

BOOL

I, Q, M, D, L

Entrada de realimentación al
cerrar

Q

Output

BOOL

I, Q, M, D, L

Indica el estado del paráme‐
tro CMD

OA

Output

BOOL

I, Q, M, D, L

Salida de alarma al abrir

CA

Output

BOOL

I, Q, M, D, L

Salida de alarma al cerrar

ET

Static

DINT

I, Q, M, D, L

Tiempo actual transcurrido;
un ciclo de reloj = 1 ms.

PT

Static

DINT

I, Q, M, D, L

Valor de tiempo predetermi‐
nado; un ciclo de reloj = 1 ms.

PREV_TIME

Static

DWORD

I, Q, M, D, L

Hora de sistema anterior

CMD_HIS

Static

BOOL

I, Q, M, D, L

Bit de evolución de CMD

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5226

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
En el ejemplo siguiente, el parámetro CMD cambia de "0" a "1". Una vez ejecutada la
instrucción, el parámetro Q se pone a "1" y las dos salidas de alarma OA y CA se ponen a "0".
El parámetro CMD_HIS del bloque de datos de instancia se pone a "1" y el parámetro ET se
pone a "0".
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.
ಯ'&$7B'%ಯ
'&$7
ಯ7DJ,Qಯ

(1

4

ಯ7DJB2XWSXWB4ಯ

ಯ7DJB,QSXWB&0'ಯ

&0'

2$

ಯ7DJB2XWSXWB2$ಯ

ಯ7DJB,QSXWB2B)%ಯ

2B)%

&$

ಯ7DJB2XWSXWB&$ಯ

ಯ7DJB,QSXWB&B)%ಯ

&B)%

(12

ಯ7DJ2XWಯ

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.
Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada y salida:
Parámetro

Operando

Valor

CMD

Tag_Input_CMD

TRUE

O_FB

Tag_Input_O_FB

FALSE

C_FB

Tag_Input_C_FB

FALSE

Q

Tag_Output_Q

FALSE

OA

Tag_Output_OA

FALSE

CA

Tag_Output_CA

FALSE

En el bloque de datos de instancia "DCAT_DB" de la instrucción están almacenados los
siguientes valores:
Parámetro

Dirección

Valor

ET

DBD4

L#12

PT

DBD8

L#222

CMD_HIS

DBX16.0

FALSE

Después de la ejecución

Programación del PLC
Manual de programación y manejo, 11/2019

5227

Instrucciones
4.2 Instrucciones
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Valor

Q

Tag_Output_Q

TRUE

OA

Tag_Output_OA

FALSE

CA

Tag_Output_CA

FALSE

En el bloque de datos de instancia "DCAT_DB" de la instrucción están almacenados los
siguientes valores:
Parámetro

Dirección

Valor

ET

DBD4

L#0

CMD_HIS

DBX16.0

TRUE

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

MCAT: Alarma de tiempo para control del motor
Descripción
La instrucción "Alarma de tiempo para control del motor" permite acumular el tiempo desde el
instante en el que se activa una de las entradas de comando (abrir o cerrar). El tiempo se
acumula hasta que se excede el tiempo predeterminado o hasta que la entrada de
realimentación correspondiente indica que el dispositivo ha ejecutado la operación solicitada
dentro del tiempo prescrito. Si se excede el tiempo predeterminado antes de recibir la
realimentación, se dispara la alarma correspondiente.
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".
La instrucción "Alarma de tiempo para control del motor" no devuelve información de error.

5228

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejecución de la instrucción "Alarma de tiempo para control del motor"
La tabla siguiente muestra las reacciones de la instrucción "Alarma de tiempo para control del
motor" a las distintas condiciones de entrada:
Parámetros de entrada

Parámetros de salida

ET

O_H
IS

C_H
IS

O_C
MD

C_C
MD

S_C
MD

O_F
B

C_F
B

OO

CO

OA

CA

ET

O_H
IS

C_HI Q
S

Estado

X

1

1

X

X

X

X

X

0

0

1

1

PT

0

0

Alarma

X

X

X

X

X

X

1

1

0

0

1

1

PT

0

0

0

Alarma

X

X

X

X

X

1

X

X

0

0

0

0

X

0

0

1

Stop

X

X

X

1

1

X

X

X

0

0

0

0

X

0

0

1

Stop

X

0

X

1

0

0

X

X

1

0

0

0

0

1

0

1

Empezar a
abrir

<PT

1

0

X

0

0

0

X

1

0

0

0

INC

1

0

1

Abrir

X

1

0

X

0

0

1

0

0

0

0

0

PT

1

0

1

Abierto

>=
PT

1

0

X

0

0

0

X

0

0

1

0

PT

1

0

0

Abrir alarma

X

X

0

0

1

0

X

X

0

1

0

0

0

0

1

1

Empezar a
cerrar

< PT 0

1

0

X

0

X

0

0

1

0

0

INC

0

1

1

Cerrar

X

0

1

0

X

0

0

1

0

0

0

0

PT

0

1

1

Cerrado

>=
PT

0

1

0

X

0

X

0

0

0

0

1

PT

0

1

0

Cerrar alar‐
ma

X

0

0

0

0

0

X

X

0

0

0

0

X

0

0

1

Parado

0

Leyenda:
INC

Sumar a ET la diferencia de tiempo (en ms) desde la última ejecución del FB

PT

PT se pone al mismo valor que ET

X

No aplicable

< PT

ET < PT

>= PT

ET >= PT

Si los parámetros de entrada O_HIS y C_HIS tienen el estado lógico "1", se ponen inmediatamente al estado lógico "0". En
este caso se aplica la última fila de la tabla mencionada más arriba (X). Puesto que por este motivo no es posible comprobar
si los parámetros de entrada O_HIS y C_HIS tienen el estado lógico "1", en este caso se asigna el siguiente valor a los
parámetros de salida:
OO = FALSE
CO = FALSE
OA = FALSE
CA = FALSE
ET = PT
Q = TRUE

Programación del PLC
Manual de programación y manejo, 11/2019

5229

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Alarma de tiempo para control del
motor":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

O_CMD

Input

BOOL

I, Q, M, D, L

Entrada de la orden "Abrir"

C_CMD

Input

BOOL

I, Q, M, D, L

Entrada de la orden "Cerrar"

S_CMD

Input

BOOL

I, Q, M, D, L

Entrada de la orden "Parar"

O_FB

Input

BOOL

I, Q, M, D, L

Entrada de realimentación al
abrir

C_FB

Input

BOOL

I, Q, M, D, L

Entrada de realimentación al
cerrar

OO

Output

BOOL

I, Q, M, D, L

Salida "Abrir"

CO

Output

BOOL

I, Q, M, D, L

Salida "Cerrar"

OA

Output

BOOL

I, Q, M, D, L

Salida de alarma al abrir

CA

Output

BOOL

I, Q, M, D, L

Salida de alarma al cerrar

Q

Output

BOOL

I, Q, M, D, L

El estado lógico "0" indica
una condición de error.

ET

Static

DINT

I, Q, M, D, L

Tiempo actual transcurrido;
un ciclo de reloj = 1 ms

PT

Static

DINT

I, Q, M, D, L

Valor de tiempo predetermi‐
nado; un ciclo de reloj = 1 ms

PREV_TIME

Static

DWORD

I, Q, M, D, L

Hora de sistema anterior

O_HIS

Static

BOOL

I, Q, M, D, L

Bit de evolución "Abrir"

C_HIS

Static

BOOL

I, Q, M, D, L

Bit de evolución "Cerrar"

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.

5230

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
ಯ0&$7B'%ಯ
0&$7
(1

22

ಯ7DJB2XWSXW2SHQಯ

ಯ7DJB,QSXWB2B&0'ಯ

2B&0'

&2

ಯ7DJB2XWSXW&ORVHGಯ

ಯ7DJB,QSXWB&B&0'ಯ

&B&0'

2$

ಯ7DJB2XWSXWB2$ಯ

ಯ7DJB,QSXWB6B&0'ಯ

6B&0'

&$

ಯ7DJB2XWSXWB&$ಯ

4

ಯ7DJB2XWSXWB4ಯ

ಯ7DJ,Qಯ

ಯ7DJB,QSXWB2B)%ಯ

2B)%

ಯ7DJ2XWಯ
ಯ7DJB,QSXWB&B)%ಯ

&B)%

(12

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.
Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada y salida:
Parámetro

Operando

Valor

O_CMD

Tag_Input_O_CMD

TRUE

C_CMD

Tag_Input_C_CMD

FALSE

S_CMD

Tag_Input_S_CMD

FALSE

O_FB

Tag_Input_O_FB

FALSE

C_FB

Tag_Input_C_FB

FALSE

OO

Tag_OutputOpen

FALSE

CO

Tag_OutputClosed

FALSE

OA

Tag_Output_OA

FALSE

CA

Tag_Output_CA

FALSE

Q

Tag_Output_Q

FALSE

Los siguientes valores están almacenados en el bloque de datos de instancia "MCAT_DB" de
la instrucción:
Parámetro

Dirección

Valor

ET

DBD4

L#2

PT

DBD8

L#22

O_HIS

DBX16.0

TRUE

C_HIS

DBX16.1

FALSE

Después de la ejecución

Programación del PLC
Manual de programación y manejo, 11/2019

5231

Instrucciones
4.2 Instrucciones
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Valor

OO

Tag_OutputOpen

TRUE

CO

Tag_OutputClosed

FALSE

OA

Tag_Output_OA

FALSE

CA

Tag_Output_CA

FALSE

Q

Tag_Output_Q

TRUE

Los siguientes valores están almacenados en el bloque de datos de instancia "MCAT_DB" de
la instrucción:
Parámetro

Dirección

Valor

ET

DBD4

L#0

O_HIS

DBX16.0

TRUE

CMD_HIS

DBX16.1

FALSE

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

IMC: Comparar bits de entrada con bits de una máscara
Descripción
La instrucción "Comparar bits de entrada con bits de una máscara" compara el estado lógico
de hasta 16 bits de entrada programados (IN_BIT0 a IN_BIT15) con el bit correspondiente de
una máscara. Es posible programar como máximo 16 pasos con máscaras. El valor del
parámetro IN_BIT0 se compara con el valor de la máscara CMP_VAL[x,0], siendo "x" el
número del paso. El número del paso de la máscara utilizada para la comparación se define en
el parámetro CMP_STEP. De esta misma manera se comparan todos los valores
programados. Los bits de entrada no programados o los bits no programados de la máscara
tienen el estado lógico predeterminado FALSE.
Si se encuentra una coincidencia al realizar la comparación, el estado lógico del parámetro
OUT se pone a "1". De lo contrario, el parámetro OUT se pone a "0".
Si el valor del parámetro CMP_STEP es mayor que 15, no se ejecuta la instrucción. En el
parámetro ERR_CODE se emite un mensaje de error.
Al insertar la instrucción en el programa se abre automáticamente el cuadro de diálogo
"Opciones de llamada" se abre automáticamente; en él se puede determinar si los parámetros
de bloque de la instrucción se depositan en un bloque de datos propio (instancia individual) o

5232

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
bien como variable local (multiinstancia) en la interfaz del bloque. Si crea un bloque de datos
propio, lo encontrará en el árbol del proyecto, en la carpeta "Recursos de programa", en
"Bloques de programa > Bloques de sistema". Encontrará más información al respecto en
"Consulte también".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Comparar bits de entrada con bits
de una máscara":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN_BIT0

Input

BOOL

I, Q, M, D, L

El bit de entrada 0 se compa‐
ra con el bit 0 de la máscara.

IN_BIT1

Input

BOOL

I, Q, M, D, L

El bit de entrada 1 se compa‐
ra con el bit 1 de la máscara.

IN_BIT2

Input

BOOL

I, Q, M, D, L

El bit de entrada 2 se compa‐
ra con el bit 2 de la máscara.

IN_BIT3

Input

BOOL

I, Q, M, D, L

El bit de entrada 3 se compa‐
ra con el bit 3 de la máscara.

IN_BIT4

Input

BOOL

I, Q, M, D, L

El bit de entrada 4 se compa‐
ra con el bit 4 de la máscara.

IN_BIT5

Input

BOOL

I, Q, M, D, L

El bit de entrada 5 se compa‐
ra con el bit 5 de la máscara.

IN_BIT6

Input

BOOL

I, Q, M, D, L

El bit de entrada 6 se compa‐
ra con el bit 6 de la máscara.

IN_BIT7

Input

BOOL

I, Q, M, D, L

El bit de entrada 7 se compa‐
ra con el bit 7 de la máscara.

IN_BIT8

Input

BOOL

I, Q, M, D, L

El bit de entrada 8 se compa‐
ra con el bit 8 de la máscara.

IN_BIT9

Input

BOOL

I, Q, M, D, L

El bit de entrada 9 se compa‐
ra con el bit 9 de la máscara.

IN_BIT10

Input

BOOL

I, Q, M, D, L

El bit de entrada 10 se com‐
para con el bit 10 de la más‐
cara.

IN_BIT11

Input

BOOL

I, Q, M, D, L

El bit de entrada 11 se com‐
para con el bit 11 de la más‐
cara.

IN_BIT12

Input

BOOL

I, Q, M, D, L

El bit de entrada 12 se com‐
para con el bit 12 de la más‐
cara.

IN_BIT13

Input

BOOL

I, Q, M, D, L

El bit de entrada 13 se com‐
para con el bit 13 de la más‐
cara.

IN_BIT14

Input

BOOL

I, Q, M, D, L

El bit de entrada 14 se com‐
para con el bit 14 de la más‐
cara.

Programación del PLC
Manual de programación y manejo, 11/2019

5233

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN_BIT15

Input

BOOL

I, Q, M, D, L

El bit de entrada 15 se com‐
para con el bit 15 de la más‐
cara.

CMP_STEP

Input

BYTE

I, Q, M, D, L, P o
constante

Número de paso de la más‐
cara con la que se compara.

OUT

Output

BOOL

I, Q, M, D, L

El estado lógico "1" indica
que se ha encontrado una
coincidencia.
El estado lógico "0" indica
que no se ha encontrado nin‐
guna coincidencia.

ERR_CODE

Output

WORD

I, Q, M, D, L, P

Información de error

CMP_VAL

Static

ARRAY of BOOL

I, Q, M, D, L

Máscaras de comparación [0
a 15, 0 a 15]: El primer núme‐
ro del índice es el número del
paso y, el segundo, el núme‐
ro de bit de la máscara.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

000A

El valor del parámetro CMP_STEP es mayor que 15.

*Los códigos de error que aparecen en el editor de programas se pueden representar como valores
enteros o hexadecimales. Encontrará más información sobre el cambio de los formatos de visualización
en "Consulte también".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

5234

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

SMC: Barrido de matriz
Descripción
La instrucción "Barrido de matriz" compara el estado lógico de hasta 16 bits de entrada
programados (IN_BIT0 a IN_BIT15) con los bits correspondientes de las máscaras de
comparación de cada paso. La ejecución empieza por el paso 1 y continúa hasta el último paso
programado (LAST) o hasta que se encuentre una correspondencia. El bit de entrada del
parámetro IN_BIT0 se compara con el valor de la máscara CMP_VAL[x,0], siendo "x" el
número de paso. De esta misma manera se comparan todos los valores programados. Si se
encuentra una correspondencia, el estado lógico del parámetro OUT se pone a "1" y el número
de paso se escribe con la máscara correspondiente en el parámetro OUT_STEP. Los bits de
entrada no programados o los bits no programados de la máscara tienen el estado lógico
predeterminado FALSE. Si varios pasos tienen una máscara equivalente, se indica sólo la
primera correspondencia encontrada en el parámetro OUT_STEP. Si no se encuentra ninguna
correspondencia, el estado lógico del parámetro OUT se pone a "0". En este caso, el valor del
parámetro OUT_STEP excede en "1" el valor del parámetro LAST.
Al insertar la instrucción en el programa se abre automáticamente el cuadro de diálogo
"Opciones de llamada" se abre automáticamente; en él se puede determinar si los parámetros
de bloque de la instrucción se depositan en un bloque de datos propio (instancia individual) o
bien como variable local (multiinstancia) en la interfaz del bloque. Si crea un bloque de datos
propio, lo encontrará en el árbol del proyecto, en la carpeta "Recursos de programa", en
"Bloques de programa > Bloques de sistema". Encontrará más información al respecto en
"Consulte también".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Barrido de matriz":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN_BIT0

Input

BOOL

I, Q, M, D, L

El bit de entrada 0 se compa‐
ra con el bit 0 de la máscara.

IN_BIT1

Input

BOOL

I, Q, M, D, L

El bit de entrada 1 se compa‐
ra con el bit 1 de la máscara.

IN_BIT2

Input

BOOL

I, Q, M, D, L

El bit de entrada 2 se compa‐
ra con el bit 2 de la máscara.

IN_BIT3

Input

BOOL

I, Q, M, D, L

El bit de entrada 3 se compa‐
ra con el bit 3 de la máscara.

IN_BIT4

Input

BOOL

I, Q, M, D, L

El bit de entrada 4 se compa‐
ra con el bit 4 de la máscara.

IN_BIT5

Input

BOOL

I, Q, M, D, L

El bit de entrada 5 se compa‐
ra con el bit 5 de la máscara.

IN_BIT6

Input

BOOL

I, Q, M, D, L

El bit de entrada 6 se compa‐
ra con el bit 6 de la máscara.

IN_BIT7

Input

BOOL

I, Q, M, D, L

El bit de entrada 7 se compa‐
ra con el bit 7 de la máscara.

Programación del PLC
Manual de programación y manejo, 11/2019

5235

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN_BIT8

Input

BOOL

I, Q, M, D, L

El bit de entrada 8 se compa‐
ra con el bit 8 de la máscara.

IN_BIT9

Input

BOOL

I, Q, M, D, L

El bit de entrada 9 se compa‐
ra con el bit 9 de la máscara.

IN_BIT10

Input

BOOL

I, Q, M, D, L

El bit de entrada 10 se com‐
para con el bit 10 de la más‐
cara.

IN_BIT11

Input

BOOL

I, Q, M, D, L

El bit de entrada 11 se com‐
para con el bit 11 de la más‐
cara.

IN_BIT12

Input

BOOL

I, Q, M, D, L

El bit de entrada 12 se com‐
para con el bit 12 de la más‐
cara.

IN_BIT13

Input

BOOL

I, Q, M, D, L

El bit de entrada 13 se com‐
para con el bit 13 de la más‐
cara.

IN_BIT14

Input

BOOL

I, Q, M, D, L

El bit de entrada 14 se com‐
para con el bit 14 de la más‐
cara.

IN_BIT15

Input

BOOL

I, Q, M, D, L

El bit de entrada 15 se com‐
para con el bit 15 de la más‐
cara.

OUT

Output

BOOL

I, Q, M, D, L

El estado lógico "1" indica
que se ha encontrado una
coincidencia.
El estado lógico "0" indica
que no se ha encontrado nin‐
guna coincidencia.

ERR_CODE

Output

WORD

I, Q, M, D, L, P

Información de error

OUT_STEP

Output

BYTE

I, Q, M, D, L, P

Contiene el número de paso
con la máscara correspon‐
diente o el número de paso
que excede en "1" el valor del
parámetro LAST, si no se ha
encontrado ninguna corres‐
pondencia.

LAST

Static

BYTE

I, Q, M, D, L, P

Indica el número del último
paso en que se tiene que
buscar una máscara corres‐
pondiente.

CMP_VAL

Static

ARRAY of WORD

I, Q, M, D, L

Máscaras de comparación [0
a 15, 0 a 15]: El primer núme‐
ro del índice es el número del
paso y, el segundo, el núme‐
ro de bit de la máscara.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5236

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

000E

El valor del parámetro LAST es mayor que 15.

*Los códigos de error que aparecen en el editor de programas se pueden representar como valores
enteros o hexadecimales. Encontrará más información sobre el cambio de los formatos de visualización
en "Consulte también".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

LEAD_LAG: Algoritmo Lead y Lag
Descripción
La instrucción "Algoritmo Lead y Lag" procesa señales con una variable analógica. El valor
para la amplificación en el parámetro GAIN debe ser mayor que cero. El resultado de la
instrucción "Algoritmo Lead y Lag" se calcula con la siguiente ecuación:
287

/*B7,0(
/'B7,0(6$03/(B7
/'B7,0(
,1*$,1
35(9B287*$,1
/*B7,0(6$03/(B7
/*B7,0(6$03/(B7
/*B7,0(6$03/(B7

35(9B,1

La instrucción "Algoritmo Lead y Lag" solo devuelve resultados relevantes cuando se ejecuta
en ciclos de programa fijos. Deben indicarse las mismas unidades en los parámetros
LD_TIME, LG_TIME y SAMPLE_T. Si LG_TIME > 4 + SAMPLE_T, la instrucción se aproxima
a la siguiente función:
OUT = GAIN * ((1 + LD_TIME * s) / (1 + LG_TIME * s)) * IN
Si el valor del parámetro GAIN es menor o igual a cero, no se realiza el cálculo y el parámetro
ERR_CODE devuelve una información de error.
La instrucción "Algoritmo Lead y Lag" puede utilizarse junto con bucles para la compensación
en el control anticipativo dinámico. La instrucción comprende dos operaciones. La operación
"Lead" desplaza la fase de la salida OUT, anticipándose la salida a la entrada. En cambio, la
operación "Lag" desplaza la salida, de manera que la salida sigue a la entrada. Puesto que la
operación "Lag" equivale a una integración, puede utilizarse para suprimir perturbaciones o
como filtro pasa bajo. La operación "Lead" equivale a una acción diferencial, por lo que puede

Programación del PLC
Manual de programación y manejo, 11/2019

5237

Instrucciones
4.2 Instrucciones
utilizarse como un filtro de paso alto. La combinación de ambas operaciones (Lead y Lag) hace
que la fase de salida siga a la entrada a bajas frecuencias y se le anticipe a altas frecuencias.
Por este motivo, la instrucción "Algoritmo Lead y Lag" puede utilizarse como si fuera un filtro
de paso de banda.
Al insertar la instrucción en el programa se abre automáticamente el cuadro de diálogo
"Opciones de llamada" se abre automáticamente; en él se puede determinar si los parámetros
de bloque de la instrucción se depositan en un bloque de datos propio (instancia individual) o
bien como variable local (multiinstancia) en la interfaz del bloque. Si crea un bloque de datos
propio, lo encontrará en el árbol del proyecto, en la carpeta "Recursos de programa", en
"Bloques de programa > Bloques de sistema". Encontrará más información al respecto en
"Consulte también".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Algoritmo Lead y Lag":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

REAL

I, Q, M, D, L, P o
constante

Valor de entrada del tiempo
de muestreo actual (tiempo
de ciclo) que se procesa.

SAMPLE_T

Input

INT

I, Q, M, D, L, P o
constante

Tiempo de muestreo

OUT

Output

REAL

I, Q, M, D, L, P

Resultado de la instrucción

ERR_CODE

Output

WORD

I, Q, M, D, L, P

Información de error

LD_TIME

Static

REAL

I, Q, M, D, L, P o
constante

Tiempo de anticipación en la
misma unidad que el tiempo
de muestreo.

LG_TIME

Static

REAL

I, Q, M, D, L, P o
constante

Tiempo de seguimiento en la
misma unidad que el tiempo
de muestreo.

GAIN

Static

REAL

I, Q, M, D, L, P o
constante

Ganancia en % / % (relación
del cambio en la salida con
respecto al cambio en la en‐
trada como estado constan‐
te).

PREV_IN

Static

REAL

I, Q, M, D, L, P o
constante

Entrada anterior

PREV_OUT

Static

REAL

I, Q, M, D, L, P o
constante

Salida anterior

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5238

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

0009

El valor del parámetro GAIN es menor o igual a cero.

*Los códigos de error que aparecen en el editor de programas se pueden representar como valores
enteros o hexadecimales. Encontrará más información sobre el cambio de los formatos de visualización
en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.
ಯ/($'B/$*B'%ಯ
/($'B/$*
ಯ7DJ,Qಯ
ಯ7DJB,QSXWಯ
ಯ7DJB,QSXWB6$03/(B7ಯ

287

(1
,1

(55B&2'(

6$03/(B7

(12

ಯ7DJB2XWSXWB5HVXOWಯ
ಯ7DJB(UURU&RGHಯ
ಯ7DJ2XWಯ

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.
Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada:
Parámetro

Operando

Valor

IN

Tag_Input

2.0

SAMPLE_T

Tag_InputSampleTime

10

En el bloque de datos de instancia "LEAD_LAG_DB" de la instrucción están almacenados los
siguientes valores:
Parámetro

Dirección

Valor

LD_TIME

DBD12

2.0

LG_TIME

DBD16

2.0

GAIN

DBD20

1.0

PREV_IN

DBD24

6.0

PREV_OUT

DBD28

6.0

Programación del PLC
Manual de programación y manejo, 11/2019

5239

Instrucciones
4.2 Instrucciones
Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Valor

OUT

Tag_Output_Result

2.0

Los siguientes valores se almacenan en el bloque de datos de instancia LEAD_LAD_DB de la
instrucción:
Parámetro

Operando

Valor

PREV_IN

DBD24

2.0

PREV_OUT

DBD28

2.0

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

TONR_X: Acumulador de tiempo
Descripción
La instrucción "Acumulador de tiempo" acumula valores de tiempo dentro de un periodo
definido, que se indica con la entrada PV. La instrucción se ejecuta cuando el estado lógico de
la entrada de arranque TMR_EN cambia de "0" a "1". Al mismo tiempo, el temporizador cuenta
el tiempo programado en la entrada PV. Mientras la instrucción se ejecuta, suma el valor de
tiempo de la entrada DELTA_T al valor de tiempo de InOut ET.
Deben cumplirse las siguientes condiciones:
● La entrada de arranque TMR_EN devuelve el estado lógico "1".
● El valor de tiempo de InOut ET es menor que el del parámetro PV.
● La entrada RESET devuelve el estado lógico "0".
La instrucción se interrumpe cuando el estado lógico de la entrada de arranque TMR_EN
cambia de "1" a "0". En cuanto el estado lógico cambia de nuevo a "1", la instrucción prosigue.
La instrucción finaliza cuando el valor de tiempo de InOut ET alcanza el valor de tiempo de la
entrada PV. Entonces la salida Q devuelve el estado lógico "1".
Mientras la salida Q devuelva el estado lógico "1", el valor de tiempo de InOut ET no se
modifica. El valor de tiempo y la salida Q se vuelven a poner a "0" cuando la entrada RESET
adopta el estado lógico "1".

5240

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Puesto que la instrucción "Acumulador de tiempo" utiliza el tiempo de ciclo (DELTA_T) del
último ciclo del bloque de organización (OB), solo puede llamarse en bloques de organización
cíclicos.
Nota
El tiempo de ciclo del bloque de organización debe desplazarse desde la información de
arranque a la variable global del parámetro DELTA_T.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Acumulador de tiempo":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L, T, C

Salida de habilitación

TMR_EN (Ti‐
mer Enable)

Input

BOOL

I, Q, M, D, L, T, C

Entrada de arranque

RESET

Input

BOOL

I, Q, M, D, L, T, C

Entrada de reset

PV (Preset
Value)

Input

DINT

I, Q, M, D, L, P o
constante

Tiempo máximo de lectura
del tiempo

DELTA_T

Input

INT

I, Q, M, D, L o
constante

Tiempo de ciclo del bloque
de organización del ciclo an‐
terior

Q

Output

BOOL

I, Q, M, D, L

Salida que se activa al alcan‐
zar el valor de tiempo prede‐
terminado

ET (Elapsed
Time)

InOut

DINT

I, Q, M, D, L

Inicia la instrucción y la eje‐
cución del tiempo predetermi‐
nado de la entrada PV

Valor de tiempo acumulado
(valor de tiempo transcurrido
actualmente + valor de tiem‐
po de la entrada DELTA_T)

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5241

Instrucciones
4.2 Instrucciones

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Acumulador de
tiempo":
705B(1

5(6(7

4

39

(7

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
7215B;
ಯ7DJ,Qಯ
ಯ7DJB6WDUWಯ
ಯ7DJB5HVHWಯ


ಯ7DJB(ODSVHG
7LPHಯ

(1
705B(1

(12
4

ಯ7DJ2XWಯ
ಯ7DJB2XWSXWಯ

5(6(7
39
'(/7$B7
(7

La instrucción se inicia cuando los operandos "TagIn" y "Tag_Start" devuelven el estado lógico
"1". Con cada cambio de estado lógico de "0" a "1" en la entrada TMR_EN el tiempo de ciclo
"2" de la entrada DELTA_T se suma al valor de tiempo actual de InOut ET hasta que se alcanza
el valor de tiempo máximo "10" de la entrada PV. Si no se producen errores al ejecutar la
instrucción, la salida de habilitación ENO devuelve el estado lógico "1" y se activa la salida
"TagOut".

5242

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

WSR: Guardar datos en el registro de desplazamiento
Descripción
La instrucción "Guardar datos en el registro de desplazamiento" permite escribir datos en un
registro de desplazamiento desde el origen indicado. Todo elemento del registro se desplaza
a la siguiente dirección. Los datos contenidos en la última dirección del registro de
desplazamiento se pierden tras la operación de desplazamiento.
Cada vez que la instrucción se ejecuta con el valor "0" en el parámetro RESET, se leen datos
nuevos del origen (S_DATA) y se desplazan a la dirección inicial (START) del registro de
desplazamiento. El parámetro LENGTH indica el número de elementos que deben
desplazarse. El tipo de datos de los elementos se define en el parámetro E_TYPE. Si se indica
un tipo de datos no admisible en el parámetro E_TYPE, no se procesa la instrucción.
Si el parámetro RESET está a "1" al ejecutarse la instrucción, se borra el registro. El parámetro
Q se pone al estado lógico "1" si el registro de desplazamiento está ocupado con ceros o si se
borra.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Guardar datos en el registro de
desplazamiento":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

RESET

Input

BOOL

I, Q, M, D, L

Entrada de reset

S_DATA

Input

POINTER

I, Q, M, D

Apunta al elemento de origen
que se desplaza a la direc‐
ción inicial (START).
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

START

Input

POINTER

I, Q, M, D

Apunta a la dirección inicial
del registro.
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

Programación del PLC
Manual de programación y manejo, 11/2019

5243

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

LEN

Input

WORD

I, Q, M, D, L, P

Número de elementos que
deben desplazarse.

E_TYPE

Input

BYTE

I, Q, M, D, L, P

Indica el tipo de datos de los
elementos que deben despla‐
zarse. Los siguientes tipos
de datos son admisibles:
● W#16#04 = WORD
● B#16#05 = INT
● B#16#06 = DWORD
● B#16#07 = DINT
● B#16#08 = REAL

Q

Output

BOOL

Q, M, D, L

Indica "0" si el parámetro RE‐
SET está activado (1) o si to‐
dos los elementos que deben
desplazarse tienen el valor
"0".

Ejemplo
En el ejemplo siguiente se desplazan cuatro elementos del tipo de datos WORD a partir de la
dirección indicada en el parámetro START. Una vez desplazado el primer elemento del
registro a la siguiente dirección, la primera dirección se ocupará con los datos a los que señala
el puntero en el parámetro S_DATA. El valor del último elemento del registro se pierde
entonces.
:65
ಯ7DJ,Qಯ
ಯ7DJB,QSXWB5HVHWಯ
ಯ7DJB,QSXWB'DWD6RXUFHಯ
ಯ7DJB,QSXWB6WDUW$GGUHVVಯ
ಯ7DJB,QSXWB/HQJWKಯ
ಯ7DJB,QSXWB(OHPHQW7\SHಯ

(1
5(6(7
6B'$7$
67$57

4

/(1

ಯ7DJB2XWSXWB4ಯ
ಯ7DJ2XWಯ

(B7<3(

(12

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.
Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada y salida:
Parámetro

Operando

Valor

RESET

Tag_Input_Reset

0

S_DATA

Tag_Input_DataSource

P#DB2.DBX6.0
DW0 = W#16#1111
DW2 = W#16#2222
DW4 = W#16#3333
DW6 = W#16#4444

5244

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Operando

Valor

START

Tag_Input_StartAddress

P#DB1.DBX0.0
DW6 = W#16#1234

LEN

Tag_Input_Length

W#16#04

E_TYPE

Tag_Input_ElementType

B#16#04

Q

Tag_Output_Q

1

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Valor

RESET

Tag_Input_Reset

0

S_DATA

Tag_Input_DataSource

P#DB2.DBX6.0
DW0 = W#16#1234
DW2 = W#16#1111
DW4 = W#16#2222
DW6 = W#16#3333

START

Tag_Input_StartAddress

P#DB1.DBX0.0

LEN

Tag_Input_Length

W#16#04

E_TYPE

Tag_Input_ElementType

B#16#04

Q

Tag_Output_Q

1

DW6 = W#16#1234

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

SHRB: Desplazar bit al registro de desplazamiento
Descripción
La instrucción "Desplazar bit al registro de desplazamiento" escribe un bit en un registro de
desplazamiento desde el origen indicado (DATA). Cada vez que la instrucción se ejecuta con
el valor "0" en el parámetro RESET, se leen datos nuevos del origen y se desplazan a la
dirección inicial (S_BIT) del registro de desplazamiento. Los restantes bits se desplazan una
posición. El bit de la última dirección (S_BIT + N) se pierde tras el desplazamiento. Si el
parámetro RESET está a "1" mientras se ejecuta la instrucción, las direcciones del registro de
desplazamiento se ponen a "0" y no se desplazan.

Programación del PLC
Manual de programación y manejo, 11/2019

5245

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desplazar bit al registro de
desplazamiento":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

DATA

Input

BOOL

I, Q, M, D, L

Bit de origen

RESET

Input

BOOL

I, Q, M, D, L

Entrada de reset

S_BIT

Input

POINTER

I, Q, M, D

Apunta al bit inicial del regis‐
tro de desplazamiento
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

N

5246

Input

WORD

I, Q, M, D, L, P

Número de bits que deben
desplazarse.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
En el ejemplo siguiente, el parámetro N se pone al valor 14 ("E" en notación hexadecimal), con
lo que 14 bits se desplazan a partir de la dirección indicada en el parámetro S_BIT. Una vez
desplazados los bits, la primera dirección se ocupa con los datos del origen del parámetro
DATA. El último valor de bit se pierde.

Programación del PLC
Manual de programación y manejo, 11/2019

5247

Instrucciones
4.2 Instrucciones

5248

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.
Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada y salida:
Parámetro

Operando

Valor

RESET

Tag_Input_Reset

0

DATA

Tag_Input_Data

0

S_BIT

Tag_Input_BitSource

P#DB1.DBX1.4

N

Tag_Input_Number

B#16#0E

Antes de ejecutarse la instrucción, los siguientes estados lógicos están almacenados en los 14
bits del registro:


























6B%,7









































Después de la ejecución
Una vez ejecutada la instrucción, los siguientes estados lógicos se almacenan en los 14 bits
del registro:


























6B%,7









































Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

Programación del PLC
Manual de programación y manejo, 11/2019

5249

Instrucciones
4.2 Instrucciones

SEG: Generar patrón de bits para el display de 7 segmentos
Descripción
La instrucción "Generar patrón de bits para el display de 7 segmentos" convierte cada una de
las cuatro cifras hexadecimales de la palabra de origen indicada (IN) en un patrón de bits
equivalente para un display de 7 segmentos. El resultado de la instrucción se deposita en la
palabra doble del parámetro OUT.
Entre las cifras hexadecimales y la ocupación de los 7 segmentos (a, b, c, d, e, f, g) existe la
siguiente relación:
Cifra de en‐
trada
(binaria)
0000
0001
0010
0011
0100
0101
0110
0111
1000
1001
1010
1011
1100
1101
1110
1111

Ocupación de
los segmentos
‑gfedcba
00111111
00000110
01011011
01001111
01100110
01101101
01111101
00000111
01111111
01100111
01110111
01111100
00111001
01011110
01111001
01110001

Display
Display de siete segmentos
(hexadecimal)
0
1
2
3
4
5
6
7
8
9
A
B
C
D
E
F

D
I

E
J

H

F
G

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Generar patrón de bits para el
display de 7 segmentos":

5250

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

WORD

I, Q, M, D, L, P o
constante

Palabra de origen con cuatro
cifras hexadecimales

OUT

Output

DWORD

I, Q, M, D, L, P

Patrón de bits para el display
de 7 segmentos

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
6(*
ಯ7DJ,Qಯ
ಯ7DJB,QSXWಯ

(1

287

ಯ7DJB2XWSXWಯ

,1

(12

ಯ7DJ2XWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores concretos:
Parámetro

Operando

Valor

Hexadecimal

Binario

IN

Tag_Input

W#16#1234

0001 0010 0011 0100

OUT

Tag_Output

DW#16065B4F66

00000110 01011011 01001111
01100110
Visualización: 1234

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

BCDCPL: Generar complemento a diez
Descripción
La instrucción "Generar complemento a diez" crea el complemento a diez de un número BCD
de siete dígitos que se indica en el parámetro IN. La instrucción realiza el cálculo con la
siguiente fórmula matemática:
10000000 (como BCD)
– Valor BCD de 7 dígitos
---------------------------------------Complemento a diez (como BCD)

Programación del PLC
Manual de programación y manejo, 11/2019

5251

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Generar complemento a diez":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

DWORD

I, Q, M, D, L, P o
constante

Número BCD de 7 dígitos

ERR_CODE

Output

DWORD

I, Q, M, D, L, P

Resultado de la instrucción

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
%&'&3/
ಯ7DJ,Qಯ
ಯ7DJB,QSXWಯ

(1
,1

(55B&2'(
(12

ಯ7DJB2XWSXWಯ
ಯ7DJ2XWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores concretos:
Parámetro

Operando

Valor*

IN

Tag_Input

DW#16#01234567

ERR_CODE

Tag_Output

DW#16#08765433

*Los códigos de error que aparecen en el editor de programas se pueden representar como valores
enteros o hexadecimales. Encontrará más información sobre el cambio de los formatos de visualización
en "Consulte también".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Insertar elementos FUP (Página 8017)
Editar elementos FUP (Página 8034)
Cablear operandos en instrucciones FUP (Página 8041)

5252

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

BITSUM: Contar número de bits activados
Descripción
La instrucción "Contar número de bits activados" cuenta el número de bits de un operando que
están puestos al estado lógico "1". El operando cuyos bits se cuentan se especifica en el
parámetro IN. El resultado de la instrucción se devuelve en el parámetro RET_VAL.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contar número de bits activados":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN

Input

BOOL

I, Q, M, D, L, T, C

Entrada de habilitación

ENO

Output

BOOL

I, Q, M, D, L

Salida de habilitación

IN

Input

DWORD

I, Q, M, D, L, P o
constante

Operando cuyos bits activa‐
dos se cuentan

RET_VAL

Output

INT

I, Q, M, D, L, P

Número de bits activados

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
%,7680
ಯ7DJ,Qಯ
ಯ7DJB,QSXWಯ

(1
,1

5(7B9$/
(12

ಯ7DJB2XWSXWಯ
ಯ7DJ2XWಯ

La tabla siguiente muestra el funcionamiento de la instrucción con valores concretos:
Parámetro

Operando

Valor*

IN

Tag_Input

DW#16#12345678

RET_VAL

Tag_Output

W#16#000D (13 bits)

*Los códigos de error que aparecen en el editor de programas se pueden representar como valores
enteros o hexadecimales. Encontrará más información sobre el cambio de los formatos de visualización
en "Consulte también".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos del mecanismo EN/ENO (Página 152)
Principios básicos de FUP (Página 8005)

Programación del PLC
Manual de programación y manejo, 11/2019

5253

Instrucciones
4.2 Instrucciones

4.2.2.3

AWL

Temporizadores CEI
TP: Impulso
Descripción
La instrucción "Impulso" activa un operando por un tiempo programado. La instrucción se inicia
cuando el resultado lógico (RLO) del parámetro IN cambia de "0" a "1" (flanco de señal
ascendente). Al iniciar la instrucción empieza a contarse el periodo programado en el
parámetro (PT). El parámetro Q se activa por el tiempo PT, independientemente de cómo
evolucione la señal en el parámetro IN. La detección de un nuevo flanco de señal ascendente
tampoco influye en el estado lógico del parámetro Q mientras transcurre el tiempo PT.
El valor de tiempo actual se puede consultar en la salida ET. Este valor de tiempo empieza a
partir de T#0s y termina al alcanzarse el valor del tiempo PT. Una vez alcanzado este tiempo
PT y si el estado lógico de la entrada IN es "0", se desactiva la salida ET.
En el código del programa, la instrucción "Impulso" se debe llamar con la instrucción "Llamar
bloque" (CALL).
A cada llamada de la instrucción "Impulso" debe asignársele un temporizador CEI, en el que
se guardan los datos de la instrucción. Un temporizador CEI se puede declarar como se indica
a continuación:
● Declaración de un bloque de datos del tipo TP (p. ej., "TP_DB")
● Declaración como variable local del tipo TP en la sección "Static" de un bloque (p. ej.,
#MyTP_TIMER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el temporizador CEI se deposita en un bloque
de datos propio (instancia individual) o bien como variable local (multiinstancia) en la interfaz
del bloque. Si crea un bloque de datos propio, lo encontrará en el árbol del proyecto, en
"Bloques de programa > Bloques de sistema", carpeta "Recursos de programa", . Encontrará
más información al respecto en "Consulte también".
El sistema operativo inicializa las instancias de la instrucción "Impulso" cuando se efectúa un
arranque en frío. Si alguna instancia de la instrucción debe estar inicializada tras un rearranque
completo (en caliente), las instancias que se deben inicializar se deben llamar en un OB de
arranque con el valor "0" en el parámetro PT. Si un bloque diferente contiene instancias de la
instrucción "Impulso", estas pueden inicializarse p. ej. inicializando el bloque de nivel superior.
Nota
Ignorar instrucción
Si en el programa no se llama la instrucción porque, p. ej., esta es ignorada, la salida ET
devuelve un valor de constante en cuanto ha transcurrido este tiempo.

5254

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Nota
Actualización de los datos de la instrucción
Los datos de la instrucción se actualizan únicamente al llamar la instrucción. Al acceder a las
salidas Q o ET, no se actualizan los datos.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Impulso":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

BOOL

I, Q, M, D, L

Entrada de arranque

PT

Input

TIME

I, Q, M, D, L, P o
constante

Duración del impulso.
El valor indicado en el pará‐
metro PT debe ser positivo

Q

Output

BOOL

I, Q, M, D, L

Salida de impulso

ET

Output

TIME

I, Q, M, D, L

Valor de tiempo actual

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Cronograma de impulsos
La figura siguiente muestra el comportamiento de la instrucción "Impulso" tras el arranque:
,1

4

37

37

37

(7
37

Programación del PLC
Manual de programación y manejo, 11/2019

5255

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL TP, "TP_DB"

// Se llama la instrucción. El bloque de datos "TP_DB" se asigna
a la instrucción.

IN := "Tag_Start"

// Cuando se produce un flanco de señal ascendente en el operando, se ejecuta la instrucción.

PT := "Tag_PresetTIME"

// Duración del impulso

Q := "Tag_Output"

// El operando se activa durante el periodo determinado por el
operando "Tag_PresetTIME".

ET := "Tag_Elapsed"

// Valor de tiempo actual

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en instrucciones de temporización y contaje (Página 188)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Instancias (Página 61)

TON: Retardo al conectar
Descripción
La instrucción "Retardo al conectar" retarda un flanco de señal ascendente por el tiempo PT.
La instrucción se inicia cuando el resultado lógico (RLO) del parámetro IN cambia de "0" a "1"
(flanco de señal ascendente). Cuando se inicia la instrucción, se empieza a contar el tiempo
programado PT. Una vez transcurrido el tiempo PT, el parámetro Q lleva el estado lógico "1".
El operando del parámetro Q permanecerá activado mientras la entrada de arranque IN siga
a "1". Cuando el estado lógico de la entrada de arranque cambia de "1" a "0", se desactiva el
parámetro Q. La función de temporización se reinicia al detectarse un nuevo flanco de señal
ascendente en la entrada de arranque.
El valor de tiempo actual se puede consultar en la salida ET. Este valor de tiempo empieza a
partir de T#0s y termina al alcanzarse el valor del tiempo PT. Una vez alcanzado este tiempo
PT y si el estado lógico de la entrada IN es "0", se desactiva la salida ET.
En la lógica del programa, la instrucción "Retardo al conectar" se debe llamar con la instrucción
"Llamar bloque" (CALL).

5256

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
A cada llamada de la instrucción "Retardo al conectar" debe asignársele un temporizador CEI,
en el que se guarden los datos de la instrucción. Un temporizador CEI se puede declarar como
se indica a continuación:
● Declaración de un bloque de datos del tipo TON (p. ej., "TON_DB")
● Declaración como variable local del tipo TON en la sección "Static" de un bloque (p. ej.,
#MyTON_TIMER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el temporizador CEI se deposita en un bloque
de datos propio (instancia individual) o bien como variable local (multiinstancia) en la interfaz
del bloque. Si crea un bloque de datos propio, lo encontrará en el árbol del proyecto, en
"Bloques de programa > Bloques de sistema", carpeta "Recursos de programa", . Encontrará
más información al respecto en "Consulte también".
El sistema operativo inicializa las instancias de la instrucción "Retardo al conectar" cuando se
realiza un arranque en frío. Si alguna instancia de la instrucción debe estar inicializada tras un
rearranque completo (en caliente), las instancias que se deben inicializar se deben llamar en
un OB de arranque con el valor "0" en el parámetro PT. Si un bloque diferente contiene
instancias de la instrucción "Retardo al conectar", estas pueden inicializarse p. ej. inicializando
el bloque de nivel superior.
Nota
Ignorar instrucción
Si en el programa no se llama la instrucción porque, p. ej., esta es ignorada, la salida ET
devuelve un valor de constante en cuanto ha transcurrido este tiempo.
Nota
Actualización de los datos de la instrucción
Los datos de la instrucción se actualizan únicamente al llamar la instrucción. Al acceder a las
salidas Q o ET, no se actualizan los datos.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Retardo al conectar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

BOOL

I, Q, M, D, L

Entrada de arranque

PT

Input

TIME

I, Q, M, D, L, P o
constante

Tiempo del retardo al conec‐
tar
El valor indicado en el pará‐
metro PT debe ser positivo

Q

Output

BOOL

I, Q, M, D, L

Estado lógico que se retarda
por el tiempo PT

ET

Output

TIME

I, Q, M, D, L

Valor de tiempo actual

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5257

Instrucciones
4.2 Instrucciones

Cronograma de impulsos
La figura siguiente muestra el comportamiento de la instrucción "Retardo al conectar" tras el
arranque:
,1

4

37

37

(7
37

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL TON, "TON_DB"

// Se llama la instrucción. El bloque de datos
"TON_DB" se asigna a la instrucción.

IN := "Tag_Start"

// Cuando se produce un flanco de señal ascendente en
el operando, se ejecuta la instrucción.

PT := "Tag_PresetTIME"

// Indica el tiempo en el que se retarda el flanco de
señal ascendente en el parámetro IN.

Q := "Tag_Output"

// El operando se activa una vez transcurrido el tiempo PT predeterminado por la variable "Tag_PresetTIME".
// El parámetro Q permanecerá activado mientras la variable "Tag_Start" siga a "1".
// Cuando el estado lógico de la entrada de arranque
cambie de "1" a "0", se desactivará el operando en el
parámetro Q.

ET := "Tag_ElapsedTIME"

// Valor de tiempo actual

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en instrucciones de temporización y contaje (Página 188)
Añadir instrucciones AWL (Página 8079)

5258

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Procesar instrucciones AWL (Página 8098)
Instancias (Página 61)

TOF: Retardo al desconectar
Descripción
La instrucción "Retardo al desconectar" retarda un flanco de señal descendente por el tiempo
PT. El operando del parámetro Q se activa cuando el resultado lógico (RLO) del parámetro IN
cambia de "0" a "1" (flanco de señal ascendente). Cuando el estado lógico del parámetro IN
cambia nuevamente a "0", el tiempo programado PT deja de contar. El operando del parámetro
Q permanece activado mientras transcurre el tiempo PT. Una vez transcurrido el tiempo PT se
inicializa el parámetro Q. Si el estado lógico del parámetro IN cambia a "1" antes de que
transcurra el tiempo PT, se inicializa el temporizador. El estado lógico del parámetro Q
permanece a "1".
El valor actual de tiempo se puede consultar en el parámetro ET. Este valor de tiempo actual
empieza a contar a partir de T#0s y termina al alcanzarse el valor de tiempo PT. Una vez
transcurrido el tiempo PT, el parámetro ET permanece al valor actual hasta que el parámetro
IN vuelva a cambiar a "1".
En la lógica del programa, la instrucción "Retardo al desconectar" se debe llamar con la
instrucción "Llamar bloque" (CALL).
A cada llamada de la instrucción "Retardo al desconectar" debe asignársele un temporizador
CEI, en el que se guarden los datos de la instrucción. Un temporizador CEI se puede declarar
como se indica a continuación:
● Declaración de un bloque de datos del tipo TOF (p. ej., "TOF_DB")
● Declaración como variable local del tipo TOF en la sección "Static" de un bloque (p. ej.,
#MyTOF_TIMER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el temporizador CEI se deposita en un bloque
de datos propio (instancia individual) o bien como variable local (multiinstancia) en la interfaz
del bloque. Si crea un bloque de datos propio, lo encontrará en el árbol del proyecto, en
"Bloques de programa > Bloques de sistema", carpeta "Recursos de programa", . Encontrará
más información al respecto en "Consulte también".
El sistema operativo inicializa las instancias de la instrucción "Retardo al desconectar" cuando
se realiza un arranque en frío. Si alguna instancia de la instrucción debe estar inicializada tras
un rearranque completo (en caliente), las instancias que se deben inicializar se deben llamar
en un OB de arranque con el valor "0" en el parámetro PT. Si un bloque diferente contiene
instancias de la instrucción "Retardo al desconectar", estas pueden inicializarse p. ej.
inicializando el bloque de nivel superior.
Nota
Ignorar instrucción
Si en el programa no se llama la instrucción porque, p. ej., esta es ignorada, la salida ET
devuelve un valor de constante en cuanto ha transcurrido este tiempo.

Programación del PLC
Manual de programación y manejo, 11/2019

5259

Instrucciones
4.2 Instrucciones
Nota
Actualización de los datos de la instrucción
Los datos de la instrucción se actualizan únicamente al llamar la instrucción. Al acceder a las
salidas Q o ET, no se actualizan los datos.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Retardo al desconectar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

BOOL

I, Q, M, D, L

Entrada de arranque

PT

Input

TIME

I, Q, M, D, L, P o
constante

Tiempo del retardo al desco‐
nectar
El valor indicado en el pará‐
metro PT debe ser positivo

Q

Output

BOOL

I, Q, M, D, L

Estado lógico que se retarda
por el tiempo PT

ET

Output

TIME

I, Q, M, D, L

Valor de tiempo actual

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Cronograma de impulsos
La figura siguiente muestra el comportamiento de la instrucción "Retardo al desconectar" tras
el arranque:
,1

4
37

37

(7
37

5260

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL TOF, "TOF_DB"

// Se llama la instrucción. El bloque de datos
"TOF_DB" se asigna a la instrucción.

IN := "Tag_Start"

// Cuando se produce un flanco de señal ascendente en
el operando, se ejecuta la instrucción.

PT := "Tag_PresetTIME"

// Indica el tiempo en el que se retarda el flanco de
señal descendente en el parámetro IN.

Q := "Tag_Output"

// El operando se activa cuando la instrucción se inicia debido a un flanco de señal ascendente en el parámetro IN.
// Si el estado lógico del parámetro IN cambia de "1"
a "0", el operando "Tag_Output" permanecerá activado
mientras transcurra el tiempo predeterminado por la
variable "Tag_PresetTIME".
// Una vez transcurrido el tiempo del parámetro PT, se
desactiva el operando.

ET := "Tag_ElapsedTIME"

// Valor de tiempo actual

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en instrucciones de temporización y contaje (Página 188)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Instancias (Página 61)

Contadores CEI
CTU: Contador ascendente
Descripción
La instrucción "Contador ascendente" incrementa el valor de contaje del parámetro CV.
Cuando el estado lógico del parámetro CU cambia de "0" a "1" (flanco de señal ascendente),
se ejecuta la instrucción y el valor de contaje actual del parámetro CV se incrementa en uno.
El valor de contaje se incrementa cada vez que se detecta un flanco de señal ascendente,
hasta alcanzar el valor límite superior del tipo de datos INT. Cuando se alcanza el valor límite
superior, el estado lógico del parámetro CU deja de tener efecto en la instrucción.
El estado del contador se puede consultar en el parámetro Q. El estado lógico del parámetro
Q es determinado por el parámetro PV. Si el valor de contaje actual es mayor o igual al valor
del parámetro PV, el parámetro Q adopta el estado lógico "1". En los restantes casos, el estado
lógico del parámetro Q es "0". En el parámetro PV también se puede indicar una constante.

Programación del PLC
Manual de programación y manejo, 11/2019

5261

Instrucciones
4.2 Instrucciones
El valor del parámetro CV se pone a cero cuando el estado lógico del parámetro R cambia a
"1". Mientras el parámetro R tenga el estado lógico "1", el estado lógico del parámetro CU no
tendrá efecto alguno en la instrucción.
En la lógica del programa, la instrucción "Contador ascendente" se debe llamar con la
instrucción "Llamar bloque" (CALL).
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
A cada llamada de la instrucción "Contador ascendente" debe asignársele un contador CEI, en
el que se guarden los datos de la instrucción. Un contador CEI se declara del siguiente modo:
● Declaración de un bloque de datos del tipo CTU (p. ej., "CTU_DB")
● Declaración como variable local del tipo CTU en la sección "Static" de un bloque (p. ej.,
#MyCTU_COUNTER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el contador CEI se deposita en un bloque de
datos propio (instancia individual), o bien como variable local (multiinstancia) en la interfaz del
bloque. Si crea un bloque de datos propio, lo encontrará en el árbol del proyecto, en "Bloques
de programa > Bloques de sistema", carpeta "Recursos de programa", . Encontrará más
información al respecto en "Consulte también".
El sistema operativo inicializa las instancias de la instrucción "Contador ascendente" cuando
se realiza un arranque en frío. Si deben inicializarse instancias de la instrucción tras un
rearranque completo (en caliente), las instancias por inicializar deben llamarse en un OB de
arranque con el valor "1" en el parámetro R de la instrucción. Si un bloque diferente contiene
instancias de la instrucción "Contador ascendente", estas pueden resetearse p. ej.
inicializando el bloque de nivel superior.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contador ascendente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CU

Input

BOOL

I, Q, M, D, L

Entrada de contaje

R

Input

BOOL

I, Q, M, D, L, P

Entrada de reset

PV

Input

INT

I, Q, M, D, L, P o
constante

Valor con el que se activa la
salida Q

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

CV

Output

INT

I, Q, M, D, L, P

Valor de contaje actual

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

5262

AWL

Explicación

CALL CTU, "CTU_DB"

// Se llama la instrucción. El bloque de datos
"CTU_DB" se asigna a la instrucción.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
AWL

Explicación

CU := "Tag_StartCTU"

// Cuando el estado lógico del operando "Tag_StartCTU"
cambia de "0" a "1", se ejecuta la instrucción y el
valor actual del operando "Tag_CounterValue" se incrementa en uno.
// El valor de contaje sigue incrementando hasta alcanzar el valor límite superior de INT = 32767.

R := "Tag_ResetCounter"

// Cuando el estado lógico del operando "Tag_ResetCounter" cambia a "1", el operando "Tag_CounterValue"
se pone a "0".

PV := "Tag_PresetValue"

// El operando determina a partir de qué valor debe
activarse el operando del parámetro Q.

Q := "Tag_CounterStatus"

// El operando permanece activado mientras el valor de
contaje actual sea mayor o igual al valor del parámetro PV.

CV := "Tag_CounterValue"

// Valor de contaje actual

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en instrucciones de temporización y contaje (Página 188)
Procesar instrucciones AWL (Página 8098)
Añadir instrucciones AWL (Página 8079)
Instancias (Página 61)

CTD: Contador descendente
Descripción
La instrucción "Contador descendente" decrementa el valor de contaje del parámetro CV.
Cuando el estado lógico del parámetro CD cambia de "0" a "1" (flanco de señal ascendente),
se ejecuta la instrucción y el valor de contaje actual del parámetro CV se decrementa en uno.
Cada vez que se detecta un flanco de señal ascendente, el valor de contaje se decrementa
hasta alcanzar el valor límite inferior del tipo de datos INT indicado. Cuando se alcanza el valor
límite inferior, el estado lógico del parámetro CD deja de tener efecto en la instrucción.
El estado del contador se puede consultar en el parámetro Q. Si el valor de contaje actual es
menor o igual a cero, el parámetro Q adopta el estado lógico "1". En los restantes casos, el
estado lógico del parámetro Q es "0".
El valor del parámetro CV se pone al valor del parámetro PV cuando el estado lógico del
parámetro LD cambia a "1". Mientras el parámetro LD tenga el estado lógico "1", el estado
lógico del parámetro CD no tendrá efecto alguno en la instrucción.

Programación del PLC
Manual de programación y manejo, 11/2019

5263

Instrucciones
4.2 Instrucciones
En la lógica del programa, la instrucción "Contador descendente" se debe llamar con la
instrucción "Llamar bloque" (CALL).
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
A cada llamada de la instrucción "Contador descendente" debe asignársele un contador CEI,
en el que se guarden los datos de la instrucción. Un contador CEI se declara del siguiente
modo:
● Declaración de un bloque de datos del tipo CTD (p. ej., "CTD_DB")
● Declaración como variable local del tipo CTD en la sección "Static" de un bloque (p. ej.,
#MyCTD_COUNTER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el contador CEI se deposita en un bloque de
datos propio (instancia individual), o bien como variable local (multiinstancia) en la interfaz del
bloque. Si crea un bloque de datos propio, lo encontrará en el árbol del proyecto, en "Bloques
de programa > Bloques de sistema", carpeta "Recursos de programa", . Encontrará más
información al respecto en "Consulte también".
El sistema operativo inicializa las instancias de la instrucción "Contador descendente" cuando
se realiza un arranque en frío. Si deben inicializarse instancias de la instrucción tras un
rearranque completo (en caliente), las instancias por inicializar deben llamarse en un OB de
arranque con el valor "1" en el parámetro LD de la instrucción. En el parámetro PV se indica en
este caso el valor inicial deseado para el parámetro CV. Si un bloque diferente contiene
instancias de la instrucción "Contador descendente", estas pueden resetearse p. ej.
inicializando el bloque de nivel superior.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contador descendente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CD

Input

BOOL

I, Q, M, D, L

Entrada de contaje

LD

Input

BOOL

I, Q, M, D, L, P

Entrada de carga

PV

Input

INT

I, Q, M, D, L, P o
constante

Valor al que se pone la salida
CV cuando LD = 1.

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

CV

Output

INT

I, Q, M, D, L, P

Valor de contaje actual

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

5264

AWL

Explicación

CALL CTD, "CTD_DB"

// Se llama la instrucción. El bloque de datos
"CTD_DB" se asigna a la instrucción.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
AWL

Explicación

CD := "Tag_StartCTD"

// Cuando el estado lógico del operando "Tag_StartCTD"
cambia de "0" a "1", se ejecuta la instrucción y el
valor actual del operando "Tag_CounterValue" se decrementa en uno.
// El valor de contaje del parámetro CV se sigue decrementando hasta alcanzar el valor límite inferior de
INT = -32768.

LD := "Tag_LoadPV"

// Cuando el estado lógico del operando "Tag_LoadPV"
cambia a "1", el operando "Tag_CounterValue" se pone
al valor del operando "Tag_PresetValue".

PV := "Tag_PresetValue"

// Indica el valor al que se pone el contador cuando
el estado lógico del parámetro LD es "1".

Q := "Tag_CounterStatus"

// El operando se activa si el valor de contaje actual
es menor o igual a cero.

CV := "Tag_CounterValue"

// Valor de contaje actual

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en instrucciones de temporización y contaje (Página 188)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Instancias (Página 61)

CTUD: Contador ascendente - descendente
Descripción
La instrucción "Contador ascendente - descendente" incrementa y decrementa el valor de
contaje del parámetro CV. Cuando el estado lógico del parámetro CU cambia de "0" a "1"
(flanco de señal ascendente), el valor de contaje actual del parámetro CV se incrementa en
uno. Cuando el estado lógico del parámetro CD cambia de "0" a "1" (flanco de señal
ascendente), el valor de contaje del parámetro CV se decrementa en uno. Si en un ciclo del
programa se detecta un flanco de señal ascendente en las entradas CU y CD, el valor de
contaje actual no cambia en el parámetro CV.
El valor de contaje se puede seguir incrementando hasta alcanzar el valor límite superior del
tipo de datos indicado INT. Una vez alcanzado el valor límite superior, el valor de contaje ya no
se incrementa al detectarse un flanco de señal ascendente. Cuando se alcanza el valor límite
inferior del tipo de datos indicado INT, ya no se decrementa el valor de contaje.
Cuando el estado lógico del parámetro LD cambia a "1", el valor de contaje del parámetro CV
se pone al valor del parámetro PV. Mientras el parámetro LD tenga el estado lógico "1", el
estado lógico de las entradas CU y CD no tendrá efecto alguno en la instrucción.
El valor de contaje se pone a cero cuando el estado lógico del parámetro R cambia a "1".
Mientras el parámetro R tenga el estado lógico "1", un cambio del estado lógico de los

Programación del PLC
Manual de programación y manejo, 11/2019

5265

Instrucciones
4.2 Instrucciones
parámetros CU, CD y LD no tendrá efecto alguno en la instrucción "Contador ascendente descendente".
El estado del contador ascendente se puede consultar en el parámetro QU. Si el valor de
contaje actual es mayor o igual al valor del parámetro PV, el parámetro QU adopta el estado
lógico "1". En los restantes casos, el estado lógico del parámetro QU es "0". En el parámetro
PV también se puede indicar una constante.
El estado del contador descendente se puede consultar en el parámetro QD. Si el valor de
contaje actual es menor o igual a cero, el parámetro QD adopta el estado lógico "1". En los
restantes casos, el estado lógico del parámetro QD es "0".
En la lógica del programa, la instrucción "Contador ascendente - descendente" se debe llamar
con la instrucción "Llamar bloque" (CALL).
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
A cada llamada de la instrucción "Contador ascendente - descendente" debe asignársele un
contador CEI en el que se guarden los datos de la instrucción. Un contador CEI se declara del
siguiente modo:
● Declaración de un bloque de datos del tipo CTUD (p. ej., "CTUD_DB")
● Declaración como variable local del tipo CTUD en la sección "Static" de un bloque (p. ej.,
#MyCTUD_COUNTER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el contador CEI se deposita en un bloque de
datos propio (instancia individual), o bien como variable local (multiinstancia) en la interfaz del
bloque. Si crea un bloque de datos propio, lo encontrará en el árbol del proyecto, en "Bloques
de programa > Bloques de sistema", carpeta "Recursos de programa", . Encontrará más
información al respecto en "Consulte también".
El sistema operativo inicializa las instancias de la instrucción "Contador ascendente descendente" cuando se realiza un arranque en frío. Si deben inicializarse instancias tras un
rearranque completo (en caliente), las instancias por inicializar deben llamarse en un OB de
arranque con los siguientes valores de parámetros:
● Si se utiliza como contador ascendente, el valor del parámetro R debe ponerse a "1".
● Si se utiliza como contador descendente, el valor del parámetro LD debe ponerse a "1". En
el parámetro PV debe indicarse en este caso el valor inicial deseado del parámetro CV.
Si un bloque diferente contiene instancias de la instrucción "Contador ascendente descendente", estas pueden resetearse p. ej. inicializando el bloque de nivel superior.

5266

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contador ascendente descendente":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CU

Input

BOOL

I, Q, M, D, L

Entrada de contaje ascen‐
dente

CD

Input

BOOL

I, Q, M, D, L

Entrada de contaje descen‐
dente

R

Input

BOOL

I, Q, M, D, L, P

Entrada de reset

LD

Input

BOOL

I, Q, M, D, L, P

Entrada de carga

PV

Input

INT

I, Q, M, D, L, P o
constante

Valor con el que se activa la
salida QU. / Valor al que se
pone la salida CV cuando LD
= 1. Valor con el que se acti‐
va la salida QU. / Valor al que
se pone la salida CV cuando
LD = 1.

QU

Output

BOOL

I, Q, M, D, L

Estado del contador ascen‐
dente

QD

Output

BOOL

I, Q, M, D, L

Estado del contador descen‐
dente

CV

Output

INT

I, Q, M, D, L, P

Valor de contaje actual

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL CTUD, "CTUD_DB"

// Se llama la instrucción. El bloque de datos
"CTUD_DB" se asigna a la instrucción.

CU := "Tag_StartCTU"

// Cuando el estado lógico del operando "Tag_StartCTU"
cambia de "0" a "1", se ejecuta la instrucción y el
valor actual del operando "Tag_CounterValue" se incrementa en uno.
// Si se detecta un flanco ascendente en el parámetro
CU, el valor de contaje se sigue incrementando hasta
alcanzar el valor límite superior de INT = 32767.

CD := "Tag_StartCTD"

// Cuando el estado lógico del operando "Tag_StartCTD"
cambia de "0" a "1", se ejecuta la instrucción y el
valor actual del operando "Tag_CounterValue" se decrementa en uno.
// El valor de contaje del parámetro CV se sigue decrementando hasta alcanzar el valor límite inferior de
-32768.

R := "Tag_ResetCounter"

Programación del PLC
Manual de programación y manejo, 11/2019

// Cuando el estado lógico del operando "Tag_ResetCounter" cambia a "1", el operando "Tag_CounterValue"
se pone a "0".

5267

Instrucciones
4.2 Instrucciones
AWL

Explicación

LD := "Tag_LoadPV"

// Cuando el estado lógico del operando "Tag_LoadPV"
cambia a "1", el operando "Tag_CounterValue" se pone
al valor del operando "Tag_PresetValue".

PV := "Tag_PresetValue"

// Indica el valor al que se pone el contador cuando
el estado lógico del parámetro LD es "1".

QU := "Tag_CounterStatus"

// El operando permanece activado mientras el valor de
contaje actual sea mayor o igual al valor del parámetro PV.

QD := "Tag_CounterStatus"

// El operando se activa si el valor de contaje actual
es menor o igual a cero.

CV := "Tag_CounterValue"

// Valor de contaje actual

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en instrucciones de temporización y contaje (Página 188)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Instancias (Página 61)

Funciones matemáticas
MIN: Determinar mínimo
Descripción
La instrucción "Determinar mínimo" compara los valores de las entradas IN1, IN2 e IN3 y
escribe el valor menor en la salida OUT. Para poder ejecutar la instrucción, es imprescindible
que las variables de todas las entradas sean del mismo tipo de datos.
El valor del parámetro OUT no es válido si se cumple una de las siguientes condiciones:
● Los operandos indicados no son del mismo tipo de datos.
● Un número en coma flotante tiene un valor no válido.
Nota
Aun estando desactivada la verificación CEI, en los parámetros de entrada únicamente están
permitidos los tipos de datos INT, DINT y REAL. Si utiliza los tipos de datos WORD o DWORD
en los parámetros de entrada, la instrucción devolverá un resultado no definido.

5268

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Determinar mínimo":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Primer valor de entrada

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Segundo valor de entrada

IN3

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Tercer valor de entrada

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Resultado

En la lista desplegable "???" puede seleccionar el tipo de datos de los parámetros INn y OUT.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL MIN

// Se llama la instrucción.
// Seleccione el tipo de datos deseado de la lista
desplegable "???".

IN1 := "TagIn_Value1"

// Primer valor de entrada que se compara.

IN2 := "TagIn_Value2"

// Segundo valor de entrada que se compara.

IN3 := "TagIn_Value3"

// Tercer valor de entrada que se compara.

OUT := "Tag_Minimum"

// El operando "Tag_Minimum" se describe con el valor
del operando "TagIn_Value1", ya que este tiene el valor más bajo.

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN1

TagIn_Value1

12222

IN2

TagIn_Value2

14444

IN3

TagIn_Value3

13333

OUT

Tag_Minimum

12222

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Programación del PLC
Manual de programación y manejo, 11/2019

5269

Instrucciones
4.2 Instrucciones

MAX: Determinar máximo
Descripción
La instrucción "Determinar máximo" compara los valores de las entradas IN1, IN2 e IN3 y
escribe el valor mayor en la salida OUT. Para poder ejecutar la instrucción, es imprescindible
que las variables de todas las entradas sean del mismo tipo de datos.
El valor de la salida OUT no es válido si se cumple una de las siguientes condiciones:
● Los operandos indicados no son del mismo tipo de datos.
● Un operando tiene un valor no válido.
Nota
Aun estando desactivada la verificación CEI, en los parámetros de entrada únicamente están
permitidos los tipos de datos INT, DINT y REAL. Si utiliza los tipos de datos WORD o DWORD
en los parámetros de entrada, la instrucción devolverá un resultado no definido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Determinar máximo":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Primer valor de entrada

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Segundo valor de entrada

IN3

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Tercer valor de entrada

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Resultado

En la lista desplegable "???" puede seleccionar el tipo de datos de los parámetros INn y OUT.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL MAX

// Se llama la instrucción.
// Seleccione el tipo de datos deseado de la lista
desplegable "???".

5270

value_type := Int

// Tipo de datos de los parámetros IN y OUT

IN1 := "TagIn_Value1"

// Primer valor de entrada que se compara.

IN2 := "TagIn_Value2"

// Segundo valor de entrada que se compara.

IN3 := "TagIn_Value3"

// Tercer valor de entrada que se compara.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
AWL

Explicación

OUT := "Tag_Maximum"

// El operando "Tag_Maximum" se describe con el valor
del operando "TagIn_Value2", ya que este tiene el valor más grande.

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN1

TagIn_Value1

12222

IN2

TagIn_Value2

14444

IN3

TagIn_Value3

13333

OUT

Tag_Maximum

14444

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

LIMIT: Ajustar valor límite
Descripción
La instrucción "Ajustar valor límite" limita el valor de la entrada IN a los valores de las entradas
MN y MX. Si el valor de la entrada IN cumple la condición MN <= IN <= MX, se copia en la salida
OUT. Si no se cumple la condición y el valor de entrada IN es menor que el límite inferior MN,
la salida OUT adopta el valor de la entrada MN. Si el límite superior MX se rebasa por exceso,
la salida OUT adopta el valor de la entrada MX.
Para poder ejecutar la instrucción, todas las variables de las entradas deben ser del mismo tipo
de datos.
El valor de la salida OUT no es válido si se cumple una de las siguientes condiciones:
● Las variables indicadas no son del mismo tipo de datos.
● Un operando tiene un valor no válido.
● El valor del parámetro MN es mayor que el valor del parámetro MX.
Nota
Aun estando desactivada la verificación CEI, en los parámetros de entrada únicamente están
permitidos los tipos de datos INT, DINT y REAL. Si utiliza los tipos de datos WORD o DWORD
en los parámetros de entrada, la instrucción devolverá un resultado no definido.

Programación del PLC
Manual de programación y manejo, 11/2019

5271

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Ajustar valor límite":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

MN

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Límite inferior

IN

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Valor de entrada

MX

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Límite superior

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Resultado

En la lista desplegable "???" puede seleccionar el tipo de datos de los parámetros MN, IN, MX
y OUT.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL LIMIT

// Se llama la instrucción.
// Seleccione el tipo de datos deseado de la lista
desplegable "???".

MN := "Tag_LowLimit"

// Límite inferior

IN := "Tag_InputValue"

// Valor de entrada

MX := "Tag_HighLimit"

// Límite superior

OUT := "Tag_Result"

// El operando "Tag_Result" se describe con el valor
del operando "Tag_LowLimit", ya que el valor del operando "Tag_InputValue" se encuentra fuera del área límite definida.

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

MN

Tag_LowLimit

12000

IN

Tag_InputValue

8000

MX

Tag_HighLimit

16000

OUT

Tag_Result

12000

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)

5272

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Transferencia
BLKMOV: Copiar área
Descripción
La instrucción "Copiar área" copia los contenidos de un área de memoria (área de origen) en
un área de memoria diferente (área de destino). La operación de copia se realiza por orden
ascendente de direcciones. Las áreas de origen y destino se definen mediante punteros ANY.
Nota
En esta instrucción solo se pueden utilizar tipos de datos que sean válidos en una CPU de la
serie S7-300/400.
La figura siguiente muestra el principio de la operación de copia:

'%'%:

$

%

'%'%:

&

'

'%'%:

(

)

'%'%:

*

+

&RSLDU
/DFRSLDVHHIHFW¼DHQ
VHQWLGRDVFHQGHQWHGH
ODVGLUHFFLRQHV

0:

$

%

0:

&

'

0:

(

)

0:

*

+

UHDGHPHPRULD

Coherencia de los datos de origen y destino
Tenga en cuenta que al ejecutar la instrucción "Copiar área" no se modifican los datos de
origen. De lo contrario no está garantizada la coherencia de los datos de destino.

Programación del PLC
Manual de programación y manejo, 11/2019

5273

Instrucciones
4.2 Instrucciones

Posibilidad de interrupción
Mientras el área de origen no forme parte de un bloque de datos que solo figura en la memoria
de carga, no hay limitaciones en cuanto a la profundidad de anidamiento.
Por el contrario, en caso de interrumpirse la ejecución de BLKMOV, en la que se copia desde
un DB no relevante para la ejecución, no puede anidarse más la ejecución de la BLKMOV.

Áreas de memoria
La instrucción "Copiar área" copia las siguientes áreas de memoria:
● Áreas de un bloque de datos
● Marcas
● Memoria imagen de proceso de las entradas
● Memoria imagen de proceso de las salidas
● Bloques de datos no relevantes para la ejecución

Reglas generales para copiar
Las áreas de origen y destino no deben solaparse. Si las áreas de origen y destino son de
diferente longitud, se copia solo hasta la longitud del área más pequeña.
Si el área de origen es más pequeña que el área de destino, el área de origen se copiará por
completo en el área de destino. Los restantes bytes del área de destino permanecen
inalterados.
Si el área de destino es más pequeña que el área de origen, se escribirá en toda el área de
destino. Los restantes bytes del área de origen se ignoran.
Al copiar un área del tipo de datos BOOL, la longitud indicada del área debe ser un múltiplo de
8, pues de lo contrario no se ejecutará la instrucción.
Nota
Si el área de origen o destino realmente existente es menor que el área de origen o destino
indicada en el parámetro SRCBLK o DSTBLK, el comportamiento dependerá del tipo de CPU:
● Para las CPU S7-300 rige lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#837F. Este código de error debe evaluarse en el programa de usuario.
● Para las CPU V4 del S7-400 (V4, CPU H V4 y CPU H V4.5 se aplica lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#8122 o W#16#8323. Este código de error debe evaluarse en el programa de usuario.
● Para las restantes CPU S7-400 rige:
Se transfieren datos. En el parámetro RET_VAL se devuelve el código de error W#16#8122
o W#16#8323. Este código de error debe evaluarse en el programa de usuario.

5274

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Reglas para copiar cadenas de caracteres
La instrucción "Copiar área" copia asimismo áreas de origen y destino del tipo de datos
STRING. Si solo el área de origen es del tipo de datos STRING, se copiarán los caracteres
realmente contenidos en la cadena de caracteres. La información sobre la longitud real y
máxima también se escribe en el área de destino. Si tanto el área de origen como el área de
destino son del tipo de datos STRING, la longitud actual de la cadena de caracteres en el área
de destino se pone al número de caracteres realmente copiados.
Si se desea copiar información sobre la longitud máxima y real de una cadena de caracteres,
las áreas de los parámetros SRCBLK y DSTBLK deben indicarse en bytes.

Reglas para copiar bloques de datos no relevantes para la ejecución
El área de origen también puede encontrarse en un bloque de datos no relevante para la
ejecución en la memoria de carga. Los bloques de datos no relevantes para la ejecución se
identifican con la palabra clave UNLINKED.
Si en la memoria de trabajo se copia un bloque de datos no relevante para la ejecución con la
instrucción "Copiar área" y, al mismo tiempo, este se vuelve a cargar p. ej. desde la
programadora, la ejecución de la instrucción puede retardarse varios milisegundos. Esto
prolonga el ciclo del OB y puede activar la vigilancia del tiempo de ciclo.
Si un bloque de datos no relevante para la ejecución se copia con la instrucción "Copiar área"
y la operación de copia se interrumpe, la instrucción no se podrá seguir ejecutando.
Si en la CPU existe la instrucción "Leer de un bloque de datos de la memoria de carga", debe
utilizarse dicha instrucción para leer los bloques de datos no relevantes para la ejecución en
la memoria de carga. Si se utiliza la instrucción "Copiar área" se emite el error W#16#8092.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Copiar área":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

SRCBLK

Input

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria que se copia (área de ori‐
gen).

RET_VAL

Output

INT

I, Q, M, D, L, P

Información de error:
El parámetro RET_VAL de‐
vuelve un código de error
cuando ocurre un error du‐
rante la ejecución de la ins‐
trucción.

DSTBLK

Output 1)

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria en la que se copia (área
de destino).

1) El parámetro DSTBLK se declara como Output, pero en la interfaz del bloque debe declararse como
InOut.

Programación del PLC
Manual de programación y manejo, 11/2019

5275

Instrucciones
4.2 Instrucciones

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8092

El área de origen o destino está solo en la memoria de carga.

8xyy

Encontrará más información de error aquí: Evaluación de errores con el parámetro de
salida RET_VAL (Página 174)

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización aquí: Cambiar
formatos de visualización en el estado del programa (Página 8529)

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL BLKMOV

// Se llama a la instrucción.

SRCBLK := P#M100.0 BYTE 10

// Se copian 10 bytes a partir de MB100.

RET_VAL := "Tag_ErrorCode"

// Si ocurre un error durante la operación de copia,
el respectivo código de error se deposita en la variable "Tag_ErrorCode".

DSTBLK := P#M200.0 BYTE 10

// Los bytes copiados se escriben en los 10 bytes a
partir de MB200.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Bases de AWL (Página 8065)

UBLKMOV: Copiar área sin interrupciones
Descripción
La instrucción "Copiar área sin interrupciones" copia los contenidos de un área de memoria
(área de origen) en un área de memoria diferente (área de destino). La operación de copia se
realiza por orden ascendente de direcciones. Las áreas de origen y destino se definen
mediante punteros ANY.

5276

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La operación de copia no debe ser interrumpida por otras actividades del sistema operativo.
Ello puede aumentar el tiempo de reacción a alarmas de la CPU durante la ejecución de la
instrucción "Copiar área sin interrupciones".
Nota
En esta instrucción solo se pueden utilizar tipos de datos que sean válidos en una CPU de la
serie S7-300/400.

Áreas de memoria
La instrucción "Copiar área sin interrupciones" permite copiar las siguientes áreas de memoria:
● Áreas de un bloque de datos
● Marcas
● Memoria imagen de proceso de las entradas
● Memoria imagen de proceso de las salidas

Reglas generales para copiar
Al ejecutar la instrucción "Copiar área sin interrupciones" no pueden solaparse las áreas de
origen y destino. Si el área de origen es más pequeña que el área de destino, el área de origen
se copiará por completo en el área de destino. Los restantes bytes del área de destino
permanecen inalterados.
Si el área de destino es más pequeña que el área de origen, se escribirá en toda el área de
destino. Los restantes bytes del área de origen se ignoran.
Si un área de origen o destino definida como parámetro formal es menor que un área de origen
o destino indicada en los parámetros SRCBLK o DSTBLK, no se transferirán datos.
Al copiar un área del tipo de datos BOOL, la longitud indicada del área debe ser un múltiplo de
8, pues de lo contrario no se ejecutará la instrucción.
La instrucción "Copiar área sin interrupciones" permite copiar 512 bytes como máximo. A este
respecto deben tenerse en cuenta las limitaciones específicas de la CPU.
Nota
Si el área de origen o destino realmente existente es menor que el área de origen o destino
indicada en el parámetro SRCBLK o DSTBLK, el comportamiento dependerá del tipo de CPU:
● Para las CPU S7-300 rige lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#837F. Este código de error debe evaluarse en el programa de usuario.
● Para las CPU V4 del S7-400 (V4, CPU H V4 y CPU H V4.5 se aplica lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#8122 o W#16#8323. Este código de error debe evaluarse en el programa de usuario.
● Para las restantes CPU S7-400 rige:
Se transfieren datos. En el parámetro RET_VAL se devuelve el código de error W#16#8122
o W#16#8323. Este código de error debe evaluarse en el programa de usuario.

Programación del PLC
Manual de programación y manejo, 11/2019

5277

Instrucciones
4.2 Instrucciones

Reglas para copiar cadenas de caracteres
La instrucción "Copiar área sin interrupciones" permite copiar asimismo áreas de origen y
destino del tipo de datos STRING. Si solo el área de origen es del tipo de datos STRING, se
copiarán los caracteres realmente contenidos en la cadena de caracteres. La información
sobre la longitud real y máxima no se escribe en el área de destino. Si tanto el área de origen
como el área de destino son del tipo de datos STRING, la longitud actual de la cadena de
caracteres en el área de destino se pone al número de caracteres realmente copiados. Si se
copian áreas del tipo de datos STRING, debe indicarse "1" como longitud del área.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Copiar área sin interrupciones":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

SRCBLK

Input

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria que se copia (área de ori‐
gen).

RET_VAL

Output

INT

I, Q, M, D, L, P

Información de error:
El parámetro RET_VAL de‐
vuelve un código de error
cuando ocurre un error du‐
rante la ejecución de la ins‐
trucción.

DSTBLK

Output 1)

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria en la que se copia (área
de destino).

1) El parámetro DSTBLK se declara como Output, pero en la interfaz del bloque debe declararse como
InOut.

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8091

El área de origen o destino está solo en la memoria de carga.

8xyy

Encontrará más información de error aquí: Evaluación de errores con el parámetro de
salida RET_VAL (Página 174)

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización aquí: Cambiar
formatos de visualización en el estado del programa (Página 8529)

5278

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL UBLKMOV

// Se llama la instrucción.

SRCBLK := P#M100.0 BYTE 10

// Se copian 10 bytes a partir de MB100.

RET_VAL := "Tag_ErrorCode"

// Si ocurre un error durante la operación de copia,
el respectivo código de error se deposita en la variable "Tag_ErrorCode".

DSTBLK := P#M200.0 BYTE 10

// Los bytes copiados se escriben en los 10 bytes a
partir de MB200.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Bases de AWL (Página 8065)

FILL: Rellenar área
Descripción
La instrucción "Rellenar área" rellena un área de memoria (área de destino) con el contenido
de un área de memoria diferente (área de origen). La instrucción "Rellenar área" copia el
contenido del área de origen en el área de destino hasta que el área de destino quede escrita
por completo. La operación de copia se realiza por orden ascendente de direcciones. Las
áreas de origen y destino se definen mediante punteros ANY.
Nota
En esta instrucción solo se pueden utilizar tipos de datos que sean válidos en una CPU de la
serie S7-300/400.
La figura siguiente muestra el principio de la operación de copia:

Programación del PLC
Manual de programación y manejo, 11/2019

5279

Instrucciones
4.2 Instrucciones
),//

%9$/

$

%

0:

$

%

0:

&

'

0:

&

'

0:

(

)

0:

(

)

0:

*

+

0:

*

+

0:

$

%

0:

&

'

0:

(

)

0:

*

+

0:

$

%

0:

&

'

0:

%/.

Ejemplo: el contenido del área MW100 a MW118 debe inicializarse con el contenido de las
palabras de marcas MW14 a MW20.

Coherencia de los datos de origen y destino
Tenga en cuenta que al ejecutar la instrucción "Rellenar área" no se modifican los datos de
origen, pues de lo contrario no se podría garantizar la coherencia de los datos de destino.

Áreas de memoria
La instrucción "Rellenar área" permite copiar las siguientes áreas de memoria:
● Áreas de un bloque de datos
● Marcas
● Memoria imagen de proceso de las entradas
● Memoria imagen de proceso de las salidas

Reglas generales para copiar
Las áreas de origen y destino no deben solaparse. Aunque el área de destino que se debe
inicializar no sea múltiplo entero de la longitud del parámetro de entrada BVAL, el área de
destino se rellenará igualmente hasta el último byte.
Si el área de destino que se debe preasignar es menor que el área de origen, solo se copian
los datos que caben en el área de destino.
Si el área de origen o destino realmente existente es menor que el tamaño del área de memoria
parametrizada para el área de origen o destino (parámetros BVAL, BLK), los datos no se
transfieren.

5280

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Si el puntero ANY (origen o destino) es del tipo BOOL, la longitud indicada debe ser divisible
por 8. De lo contrario, la instrucción no se ejecutará.
Si el área de destino es del tipo de datos STRING, la instrucción escribe la cadena de
caracteres completa, incluida la información de administración.
Nota
Si el área de origen o destino realmente existente es menor que el área de origen o destino
indicada en el parámetro BVAL o BLK, el comportamiento dependerá del tipo de CPU:
● Para las CPU S7-300 rige lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#837F. Este código de error debe evaluarse en el programa de usuario.
● Para las CPU V4 del S7-400 (V4, CPU H V4 y CPU H V4.5 se aplica lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#8122 o W#16#8323. Este código de error debe evaluarse en el programa de usuario.
● Para las restantes CPU S7-400 rige:
Se transfieren datos. En el parámetro RET_VAL se devuelve el código de error W#16#8122
o W#16#8323. Este código de error debe evaluarse en el programa de usuario.

Reglas para copiar estructuras
Al indicar una estructura a modo de parámetro de entrada, tenga en cuenta que la longitud de
una estructura se rige siempre por un número entero de bytes. Si se declara una estructura con
un número impar de bytes, esta estructura necesita un byte adicional de espacio en memoria.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Rellenar área":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

BVAL

Input

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria (área de origen) con cuyo
contenido se rellena el área
de destino en el parámetro
BLK.

RET_VAL

Output

INT

I, Q, M, D, L, P

Información de error:
El parámetro RET_VAL de‐
vuelve un código de error
cuando ocurre un error du‐
rante la ejecución de la ins‐
trucción.

BLK

Output 1)

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria que se rellena con el con‐
tenido del área de origen.

1) El parámetro BLK se declara como Output, pero en la interfaz del bloque debe declararse como
InOut.

Programación del PLC
Manual de programación y manejo, 11/2019

5281

Instrucciones
4.2 Instrucciones

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8092

El área de origen o destino está solo en la memoria de carga.

8xyy

Encontrará más información de error aquí: Evaluación de errores con el parámetro de
salida RET_VAL (Página 174)

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización aquí: Cambiar
formatos de visualización en el estado del programa (Página 8529)

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL FILL

// Se llama la instrucción "Rellenar área".

BVAL := P#M14.0 WORD 4

// Se copia el área de MW14 a MW20.

RET_VAL := "Tag_ErrorCode"

// Información de error

BLK := P#M100.0 WORD 10

// El área de memoria de MW100 a MW118 se rellena con
el contenido de las 4 palabras contenidas en el área
de memoria del parámetro BVAL.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Bases de AWL (Página 8065)

Conversión
SCALE: Escalar
Descripción
La instrucción "Escalar" convierte el entero del parámetro IN en un número en coma flotante
que se escala en unidades físicas entre un límite inferior y uno superior. Los límites inferior y
superior del rango de valores en el que se escala el valor de entrada se definen mediante los
parámetros LO_LIM y HI_LIM. El resultado de la instrucción se devuelve en el parámetro OUT.
La instrucción "Escalar" utiliza la siguiente ecuación:
OUT = [((FLOAT (IN) – K1)/(K2–K1)) ∗ (HI_LIM–LO_LIM)] + LO_LIM

5282

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
El estado lógico del parámetro BIPOLAR determina los valores de las constantes "K1" y "K2".
El parámetro BIPOLAR puede tener los siguientes estados lógicos:
● Estado lógico "1": se presupone que el valor del parámetro IN es bipolar y está comprendido
en un rango de valores entre -27648 y 27648. En este caso, la constante "K1" tiene el valor
"-27648,0" y la constante "K2", el valor "+27648,0".
● Estado lógico "0": se presupone que el valor del parámetro IN es unipolar y está
comprendido en un rango de valores entre 0 y 27648. En este caso, la constante "K1" tiene
el valor "0,0" y la constante "K2", el valor "+27648,0".
Si el valor del parámetro IN es mayor que el de la constante "K2", el resultado de la instrucción
se pone al valor del límite superior (HI_LIM) y se emite un error.
Si el valor del parámetro IN es menor que el de la constante "K1", el resultado de la instrucción
se pone al valor del límite inferior (LO_LIM) y se emite un error.
Si el límite inferior indicado es mayor que el límite superior (LO_LIM > HI_LIM), el resultado se
escala de forma inversamente proporcional al valor de entrada.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Escalar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

INT

I, Q, M, D, L, P o
constante

Valor de entrada que se es‐
cala

HI_LIM

Input

REAL

I, Q, M, D, L, P o
constante

Valor límite superior

LO_LIM

Input

REAL

I, Q, M, D, L, P o
constante

Valor límite inferior

BIPOLAR

Input

BOOL

I, Q, M, D, L o
constante

Indica si el valor del paráme‐
tro IN se interpreta como bi‐
polar o unipolar. El paráme‐
tro puede adoptar los valores
siguientes:
1: Bipolar
0: Unipolar

RET_VAL

Output

WORD

I, Q, M, D, L, P

Información de error

OUT

Output

REAL

I, Q, M, D, L, P

Resultado de la instrucción

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

0008

El valor del parámetro IN es mayor que el de la constante "K2" o menor que el de la
constante "K1"

Programación del PLC
Manual de programación y manejo, 11/2019

5283

Instrucciones
4.2 Instrucciones
Código de
error*
(W#16#...)

Explicación

8xyy

Encontrará más información de error aquí: Evaluación de errores con el parámetro de
salida RET_VAL (Página 174)

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización aquí: Cambiar
formatos de visualización en el estado del programa (Página 8529)

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL SCALE

// Se llama la instrucción.

IN := "Tag_InputValue"

// Indica el valor que se convierte y escala.

HI_LIM := "Tag_HighLimit"

// Valor límite superior

LO_LIM := "Tag_LowLimit"

// Valor límite inferior

BIPOLAR := "Tag_Bipolar"

// Indica si el valor del parámetro IN se interpreta
como bipolar o unipolar.

RET_VAL := "Tag_ErrorCode"

// Información de error

OUT := "Tag_OutputValue"

// Resultado de la instrucción

La tabla siguiente muestra los valores de los distintos operandos antes de ejecutar la
instrucción:
Parámetro

Operando

Valor

IN

Tag_InputValue

22

HI_LIM

Tag_HighLimit

100.0

LO_LIM

Tag_LowLimit

0.0

BIPOLAR

Tag_Bipolar

1

RET_VAL

Tag_ErrorCode

W#16#0000

OUT

Tag_OutputValue

0.0

La tabla siguiente muestra los valores de los distintos operandos después de ejecutar la
instrucción:
Parámetro

5284

Operando

Valor

IN

Tag_InputValue

22

HI_LIM

Tag_HighLimit

100.0

LO_LIM

Tag_LowLimit

0.0

BIPOLAR

Tag_Bipolar

1

RET_VAL

Tag_ErrorCode

W#16#0000

OUT

Tag_OutputValue

50.03978588

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Bases de AWL (Página 8065)

UNSCALE: Desescalar
Descripción
La instrucción "Desescalar" desescala el número en coma flotante del parámetro IN en
unidades físicas entre un valor límite inferior y un valor límite superior y lo convierte en un
número entero. Los límites inferior y superior del rango de valores en el que se desescala el
valor de entrada se definen mediante los parámetros LO_LIM y HI_LIM. El resultado de la
instrucción se devuelve en el parámetro OUT.
La instrucción "Desescalar" utiliza la siguiente ecuación:
OUT = [((IN–LO_LIM)/(HI_LIM–LO_LIM)) ∗ (K2–K1) ] + K1
El estado lógico del parámetro BIPOLAR determina los valores de las constantes "K1" y "K2".
El parámetro BIPOLAR puede tener los siguientes estados lógicos:
● Estado lógico "1": se presupone que el valor del parámetro IN es bipolar y está comprendido
en un rango de valores entre -27648 y 27648. En este caso, la constante "K1" tiene el valor
"-27648,0" y la constante "K2", el valor "+27648,0".
● Estado lógico "0": se presupone que el valor del parámetro IN es unipolar y está
comprendido en un rango de valores entre 0 y 27648. En este caso, la constante "K1" tiene
el valor "0,0" y la constante "K2", el valor "+27648,0".
Si el valor del parámetro IN no se encuentra dentro de los límites definidos por HI_LIM y
LO_LIM, se emite un error. El resultado se ajusta al límite más próximo.
Si el límite inferior indicado es mayor que el límite superior (LO_LIM > HI_LIM), el resultado se
escala de forma inversamente proporcional al valor de entrada.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desescalar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

REAL

I, Q, M, D, L, P o
constante

Valor de entrada que se de‐
sescala en un valor entero

HI_LIM

Input

REAL

I, Q, M, D, L, P o
constante

Valor límite superior

LO_LIM

Input

REAL

I, Q, M, D, L, P o
constante

Valor límite inferior

Programación del PLC
Manual de programación y manejo, 11/2019

5285

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

BIPOLAR

Input

BOOL

I, Q, M, D, L o
constante

Indica si el valor del paráme‐
tro IN se interpreta como bi‐
polar o unipolar. El paráme‐
tro puede adoptar los valores
siguientes:
1: Bipolar
0: Unipolar

RET_VAL

Output

WORD

I, Q, M, D, L, P

Información de error

OUT

Output

INT

I, Q, M, D, L, P

Resultado de la instrucción

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

0008

El valor del parámetro IN es mayor que el del límite superior (HI_LIM) o menor que el del
límite inferior (LO_LIM).

8xyy

Encontrará más información de error aquí: Evaluación de errores con el parámetro de
salida RET_VAL (Página 174)

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización aquí: Cambiar
formatos de visualización en el estado del programa (Página 8529)

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL UNSCALE

// Se llama la instrucción.

IN := "Tag_InputValue"

// Indica el valor que se desescala.

HI_LIM := "Tag_HighLimit"

// Valor límite superior

LO_LIM := "Tag_LowLimit"

// Valor límite inferior

BIPOLAR := "Tag_Bipolar"

// Indica si el valor del parámetro IN se interpreta
como bipolar o unipolar.

RET_VAL := "Tag_ErrorCode"

// Información de error

OUT := "Tag_OutputValue"

// Resultado de la instrucción

La tabla siguiente muestra los valores de los distintos operandos antes de ejecutar la
instrucción:

5286

Parámetro

Operando

Valor

IN

Tag_InputValue

50.03978588

HI_LIM

Tag_HighLimit

100.0

LO_LIM

Tag_LowLimit

0.0

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Operando

Valor

BIPOLAR

Tag_Bipolar

1

RET_VAL

Tag_ErrorCode

W#16#0000

OUT

Tag_OutputValue

0.0

La tabla siguiente muestra los valores de los distintos operandos después de ejecutar la
instrucción:
Parámetro

Operando

Valor

IN

Tag_InputValue

50.03978588

HI_LIM

Tag_HighLimit

100.0

LO_LIM

Tag_LowLimit

0.0

BIPOLAR

Tag_Bipolar

1

RET_VAL

Tag_ErrorCode

W#16#0000

OUT

Tag_OutputValue

22

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Bases de AWL (Página 8065)

Control del programa
Control del tiempo de ejecución
COMPRESS: Comprimir la memoria de la CPU
Descripción
La instrucción "Comprimir la memoria de la CPU" comprime la memoria de trabajo de la CPU
o la memoria de carga RAM. Los huecos creados por haber borrado o cargado bloques, se
rellenan juntando los bloques existentes.
Con la llamada de la instrucción "Comprimir la memoria de la CPU" se lanza el proceso de
compresión. El proceso de compresión se reparte entre varios ciclos del programa. La
vigilancia del proceso de compresión se realiza mediante los valores de los distintos
parámetros. Si el parámetro BUSY de la instrucción tiene el valor "1", significa que el proceso
de compresión se está ejecutando todavía. El valor "1" del parámetro DONE indica que ha
finalizado el proceso de compresión. La información de error puede consultarse en el
parámetro RET_VAL.
Si se está ejecutando un proceso de compresión lanzado externamente, la llamada de la
instrucción "Comprimir la memoria de la CPU" origina un error.

Programación del PLC
Manual de programación y manejo, 11/2019

5287

Instrucciones
4.2 Instrucciones

Control del proceso de compresión
Con la llamada única de la instrucción "Comprimir la memoria de la CPU" se lanza el proceso
de compresión. No obstante, no puede controlar si la compresión se ha realizado
satisfactoriamente.
Si desea realizar esta comprobación debe proceder de la siguiente manera:
La instrucción "Comprimir la memoria de la CPU" se debe llamar en el ciclo. Una vez realizada
la llamada se debe evaluar a continuación el parámetro RET_VAL. Si este es igual a "0" se
deben evaluar los parámetros BUSY y DONE. Si BUSY = "1" y DONE = "0", ello indica que el
proceso de compresión aún permanece activo. En cuanto BUSY adopta valor "0" y DONE el
valor "1", ello será un indicador de que el proceso de compresión ha concluido
satisfactoriamente. Si a continuación se vuelve a llamar la instrucción "Comprimir la memoria
de la CPU", se iniciará un nuevo proceso de compresión.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Comprimir la memoria de la CPU":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

RET_VAL

Output

INT

I, Q, M, D, L

Información de error:
El parámetro RET_VAL de‐
vuelve un código de error
cuando ocurre un error du‐
rante la ejecución de la ins‐
trucción.

BUSY

Output

BOOL

I, Q, M, D, L

Información de si está activo
el proceso de compresión

DONE

Output

BOOL

I, Q, M, D, L

Información de si ha finaliza‐
do el proceso de compresión

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error
El estado del proceso de compresión puede consultarse en los parámetros BUSY y DO‐
NE.

8091

Ya se está ejecutando un proceso de compresión lanzado externamente.

8092

La instrucción no se puede ejecutar porque se cumple una de las condiciones siguientes:
● La función "Borrar bloque" está activa.
● Una función de PG está accediendo a uno de los bloques que se deben desplazar.
● Ya se está ejecutando un proceso de compresión lanzado externamente.
● La CPU H se encuentra en un proceso de acoplamiento o actualización.

5288

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Código de
error*
(W#16#...)

Explicación

8xyy

Encontrará más información de error aquí: Evaluación de errores con el parámetro de
salida RET_VAL (Página 174)

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización aquí: Cambiar
formatos de visualización en el estado del programa (Página 8529)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en instrucciones de control del programa (Página 192)
Bases de AWL (Página 8065)

RE_TRIGR: Reiniciar tiempo de vigilancia del ciclo
Descripción
La instrucción "Reiniciar tiempo de vigilancia del ciclo" reinicia el tiempo de vigilancia del ciclo
de la CPU. El tiempo de vigilancia del ciclo se reinicia entonces con la duración ajustada en la
configuración de la CPU.
La instrucción "Reiniciar tiempo de vigilancia del ciclo" se puede llamar en todos los bloques
independientemente de la prioridad.
Si se llama la instrucción en un bloque de prioridad superior, p. ej. en una alarma de proceso
o una alarma de diagnóstico, la instrucción no se ejecuta.
La instrucción "Reiniciar tiempo de vigilancia del ciclo" se ejecuta correctamente en un espacio
de tiempo (10 veces el ciclo máximo del programa), independientemente del número de
llamadas. Transcurrido ese tiempo, el ciclo del programa ya no puede prolongarse.

Parámetros
La instrucción "Reiniciar tiempo de vigilancia del ciclo" no tiene parámetros y no devuelve
información de error.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en instrucciones de control del programa (Página 192)
Bases de AWL (Página 8065)

Programación del PLC
Manual de programación y manejo, 11/2019

5289

Instrucciones
4.2 Instrucciones

STP: Finalizar programa
Descripción
La instrucción "Finalizar programa" conmuta la CPU al estado operativo STOP, con lo que se
finaliza la ejecución del programa. Los efectos al conmutar de RUN a STOP dependen de la
configuración de la CPU.

Parámetros
La instrucción "Finalizar programa" no tiene parámetros y no devuelve información de error.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en instrucciones de control del programa (Página 192)
Bases de AWL (Página 8065)

WAIT: Programar retardo
Descripción
La instrucción "Programar retardo" detiene la ejecución del programa durante un periodo
parametrizado. El periodo se indica en microsegundos en el parámetro WT de la instrucción.
Es posible parametrizar tiempos de retardo de -32768 a 32767 microsegundos (μs). El tiempo
de retardo mínimo depende de la CPU utilizada y equivale al tiempo de ejecución de la
instrucción.
La ejecución de la instrucción puede verse interrumpida por eventos de prioridad superior y no
arrojará información de error.
Válido para CPU S7-300:
En las CPU S7-300 (a excepción de S7-318), el tiempo de retardo programado con la
instrucción es un tiempo mínimo. Se prolonga con el tiempo de ejecución de las clases de
prioridad que intervienen y con las cargas del sistema.
Nota
Tiempo de retardo negativo
Si indica un tiempo de retardo negativo en el parámetro WT, la salida de habilitación ENO, o
el RLO y el bit BR arrojan el estado lógico FALSE. Un tiempo de retardo negativo no afecta para
nada a la CPU. En KOP y FUP no se ejecutan las siguientes instrucciones vinculadas a la
salida de habilitación ENO.

5290

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Programar retardo":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

WT

Input

INT

I, Q, M, D, L, P o
constante

Tiempo de retardo en micro‐
segundos (μs)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en instrucciones de control del programa (Página 192)
Bases de AWL (Página 8065)

PROTECT: Cambiar nivel de protección
Descripción
La instrucción "Cambiar nivel de protección" permite modificar el nivel de protección "1"
configurado para la CPU.
El nivel de protección "1" parametrizado con la opción activada "Eliminable por contraseña"
hace que sea necesario parametrizar una contraseña. Esta contraseña permite acceder en
escritura a la CPU protegida contra escritura mediante la instrucción "Cambiar nivel de
protección" durante el funcionamiento (p. ej. cargar).
El nivel de protección se especifica en el parámetro MODE de la instrucción. El nivel de
protección actual de la CPU se visualiza en la ventana de inspección en "Propiedades >
Protección".
La tabla siguiente muestra una explicación de los niveles de protección:
Nivel
de pro‐
tección

Explicación

1

Se permiten todas las funciones de PG. En el caso que exista un bloqueo de la legitimación de la contraseña, este
se elimina llamando la instrucción "Cambiar nivel de protección".

2

● El programa y la configuración de la CPU no se pueden modificar. El programa contenido en la CPU se puede
leer.
● Se permiten las funciones de control, observación y comunicación del proceso.
● Se permiten todas las funciones de información.
● Si conoce la contraseña válida, podrá desactivar la protección contra escritura ajustada.
● En el caso que exista un bloqueo de la legitimación de la contraseña, este se elimina llamando la instrucción
"Cambiar nivel de protección".

3

● Aun conociendo la contraseña válida, no podrá desactivar la protección contra lectura y escritura ajustada.
● Si al llamar la instrucción "Cambiar nivel de protección" existe una conexión legitimada, la llamada de la
instrucción no tendrá ningún efecto en esta conexión.

Programación del PLC
Manual de programación y manejo, 11/2019

5291

Instrucciones
4.2 Instrucciones
Si se ha configurado el nivel de protección "2" o "3" para la CPU, la llamada de la instrucción
"Cambiar nivel de protección" no tiene efecto alguno.
El efecto del nivel de protección "2" o "3" una vez ejecutada la instrucción "Cambiar nivel de
protección" puede consultarse en la lista parcial SZL con la ID de SZL W#16#0232 y el índice
W#16#0004.
Nota
La instrucción "Cambiar nivel de protección" permite ajustar un nivel de protección más bajo
que aquel ajustado con "Configurar hardware" de STEP 7. Supongamos que se ha configurado
el nivel de protección 3 y a continuación se llama la instrucción "Cambiar nivel de protección"
con el parámetro MODE = 12. Esto bloqueará la legitimación de la contraseña. Si la instrucción
se llama nuevamente con el parámetro MODE = 0 o 1, el nivel de protección 3 se mantiene y
será posible desactivar la protección de lectura y escritura introduciendo la contraseña válida.

Efectos de las transiciones de estado operativo en el nivel de protección
La tabla siguiente muestra qué efectos tienen las transiciones de estado operativo en el nivel
de protección ajustado con la instrucción "Cambiar nivel de protección".
Acción

Efectos en el nivel de protección

● Selector de modo en STOP

El nivel de protección se pone a "1". Se permiten todas las
funciones de PG.

● Conexión (POWER ON) sin respaldo
● Borrado total mediante el selector de modo
● Cambios de configuración y/o del programa en el estado
operativo STOP de la CPU S7-400
● Arranque en frío
● Rearranque (en caliente)

Conexión (POWER ON) respaldada

El sistema operativo pone el nivel de protección a "1". Se
permiten todas las funciones de PG.
En caso necesario, llamando la instrucción "Cambiar nivel de
protección" en el programa es posible ajustar el nivel de pro‐
tección en "2" o "3".
No cambia

Transición de estado operativo RUN/ARRANQUE/PARADA - No cambia
> STOP (debida a la llamada de la instrucción "Finalizar pro‐
grama" (STP), a errores del programa sin el correspondiente
OB de error o a una acción del usuario).
S7-400: Rearranque por acción del usuario o automática‐
mente tras conexión (POWER ON)

5292

No cambia

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Cambiar nivel de protección":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

MODE

Input

WORD

I, Q, M, D, L o
constante

Nivel de protección
Valores posibles:
● W#16#0000: Ajuste del
nivel de protección "1"
● W#16#0001: Ajuste del
nivel de protección "2"
con legitimación de la
contraseña
● W#16#000C: Ajuste del
nivel de protección "3" sin
legitimación de la
contraseña
En el parámetro MODE tam‐
bién se pueden indicar cons‐
tantes.

RET_VAL

Output

INT

I, Q, M, D, L

Si ocurre un error durante la
ejecución, se emite una infor‐
mación de error.

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

La petición se ha ejecutado sin errores.

8090

Valor no admisible en el parámetro MODE.

80C3

En este momento los recursos necesarios están ocupados.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización aquí: Cambiar
formatos de visualización en el estado del programa (Página 8529)

Ejemplo
Por principio, la CPU debe protegerse contra accesos en el estado operativo RUN. La
protección se debe suprimir únicamente si se conmuta el selector de modo a STOP. Esto se
logra llamando la instrucción "Cambiar nivel de protección" en un OB de arranque y
ejecutándola con el valor W#16#0001 (nivel de protección "2") en el parámetro MODE. De esta
manera, el nivel de protección "2" permanece ajustado aún tras un rearranque completo (en
caliente).
AWL

Explicación

CALL PROTECT

// Se llama la instrucción.

Programación del PLC
Manual de programación y manejo, 11/2019

5293

Instrucciones
4.2 Instrucciones
AWL

Explicación

MODE := "Tag_ProtectionLevel" // Ajustar el nivel de protección
RET_VAL := "Tag_ErrorCode"

// Información de error

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en instrucciones de control del programa (Página 192)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Bases de AWL (Página 8065)

CiR: Controlar proceso CiR
Descripción
La instrucción "Controlar proceso CiR" permite influir en el proceso CiR en el programa de
usuario como se indica a continuación:
● Bloquear el proceso CiR. En este caso, se rechazará siempre la carga de una configuración
modificada desde la programadora en la CPU. El bloqueo se aplica hasta que se elimina
con la instrucción "Controlar proceso CiR".
● El proceso CiR se puede bloquear de forma condicionada, indicando un límite superior para
el tiempo de sincronización CiR en el parámetro FRZ_TIME. En este caso, solo se permitirá
cargar una configuración modificada desde la programadora en la CPU si el tiempo de
sincronización CiR calculado en la CPU no excede el límite superior definido.
● Habilitar el proceso CiR. El límite superior del tiempo de sincronización CiR se establece al
valor predeterminado de 1000 ms.
● Determina si el proceso CiR está habilitado o no. Si el proceso CiR está habilitado o lo está
condicionadamente, el límite superior actual del tiempo de sincronización CiR se indica en
el parámetro A_FT de la instrucción.
Nota
Durante el tiempo de sincronización CiR, las salidas están congeladas y las entradas no se
evalúan.

5294

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Controlar proceso CiR":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

MODE

Input

BYTE

I, Q, M, D, L o
constante

ID de la petición
Los valores admisibles del
parámetro MODE son:
● 0: Función de información
● 1: Habilitar proceso CiR
● 2: Bloquear proceso CiR
● 3: Bloquear proceso CiR
de forma condicionada.
El límite superior del
tiempo de sincronización
CiR se define en
FRZ_TIME.

FRZ_TIME

Input

TIME

I, Q, M, D, L o
constante

Límite superior del tiempo de
sincronización CiR en milise‐
gundos.
Rango de valores admisible:
60 ... 2500 ms (valor prede‐
terminado: 1000 ms)
El parámetro FRZ_TIME sólo
es relevante si el parámetro
MODE está al valor "3".

RET_VAL

Output

INT

I, Q, M, D, L

Información de error
Si el parámetro MODE está a
"0", el parámetro RET_VAL
indica si el proceso CiR está
habilitado o no.

A_FT

Output

TIME

I, Q, M, D, L

Límite superior válido actual‐
mente del tiempo de sincro‐
nización CiR

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

La petición se ha ejecutado sin errores.
Este código de error solo se puede emitir si el parámetro MODE está ajustado al valor 1,
2 ó 3.

0001

El proceso CiR está habilitado.
Este código de error solo se puede emitir si el parámetro MODE está puesto al valor "0".

0002

El proceso CiR está bloqueado.
Este código de error solo se puede emitir si el parámetro MODE está puesto al valor "0".

Programación del PLC
Manual de programación y manejo, 11/2019

5295

Instrucciones
4.2 Instrucciones
Código de
error*
(W#16#...)

Explicación

0003

El proceso CiR está bloqueado de forma condicionada.
Este código de error solo se puede emitir si el parámetro MODE está puesto al valor "0".

8001

La CPU no está lista para un proceso CiR. Se está utilizando una CPU H en el sistema H
(modo "Individual") o una CPU estándar en modo multiprocesador.

8002

El valor del parámetro MODE no es admisible.

8003

El valor del parámetro FRZ_TIME no es admisible.

8xyy

Encontrará más información de error aquí: Evaluación de errores con el parámetro de
salida RET_VAL (Página 174)

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización aquí: Cambiar
formatos de visualización en el estado del programa (Página 8529)

Ejemplo
La instrucción "Controlar proceso CiR" permite programar p. ej. que no se lance ningún
proceso CiR en periodos en los que se requiera la capacidad máxima de la CPU para el
procesamiento.
En este caso, la instrucción "Controlar proceso CiR" debe llamarse en el programa antes de
comenzar el periodo de actividad aumentada del proceso y ejecutarse con el valor "2"
(bloquear proceso CiR) en el parámetro MODE. Con ello se bloquea el proceso CiR.
Para volver a habilitar el proceso CiR tras finalizar el periodo de actividad aumentada del
proceso, la instrucción "Controlar proceso CiR" debe llamarse de nuevo y ejecutarse con el
valor "1" en el parámetro MODE. Como alternativa, el parámetro MODE se puede poner al
valor "3", con lo que el proceso CiR se bloquea de forma condicionada.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en instrucciones de control del programa (Página 192)
Bases de AWL (Página 8065)

Operaciones lógicas con palabras
DECO: Descodificar
Descripción
La instrucción "Descodificar" activa un bit predeterminado por el valor de entrada en el valor de
salida.
La instrucción "Descodificar" lee el valor del parámetro IN y activa el bit del parámetro OUT
cuya posición de bit equivale al valor leído. Los demás bits del valor de salida se rellenan con
ceros. Si el valor del parámetro IN es mayor que 31, se ejecuta una operación modulo 32.

5296

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Descodificar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

WORD, INT

I, Q, M, D, L, P o
constante

Posición del bit que se activa
en el valor de salida

OUT

Output

DWORD

I, Q, M, D, L, P

Valor de salida

En la lista desplegable "???" puede seleccionar el tipo de datos del parámetro IN.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL DECO

// Se llama la instrucción.
// Seleccione el tipo de datos deseado de la lista
desplegable "???".

IN := "Tag_Input"

// Valor de entrada que predetermina el bit que debe
activarse en el valor de salida.

OUT := "Tag_Output"

// Resultado

La figura siguiente muestra el funcionamiento de la instrucción con valores concretos:
7DJB,QSXW




7DJB2XWSXW

 



 

La instrucción lee el número de bit "3" del valor del operando "Tag_Input" de la entrada y activa
el tercer bit del valor del operando "Tag_Output" de la salida.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con palabras (Página 194)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

ENCO: Codificar
Descripción
La instrucción "Codificar" lee el número del bit menos significativo que está activado en el valor
de entrada y devolverlo en el parámetro OUT.

Programación del PLC
Manual de programación y manejo, 11/2019

5297

Instrucciones
4.2 Instrucciones
La instrucción "Codificar" selecciona el bit menos significativo del valor del parámetro IN y
escribe su número de bit en el operando del parámetro OUT. Si el parámetro IN devuelve el
valor DW#16#00000001 o DW#16#00000000, en el parámetro OUT se deposita el valor "0".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Codificar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

DWORD

I, Q, M, D, L, P o
constante

Valor de entrada

OUT

Output

INT

I, Q, M, D, L, P

Valor de salida

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL ENCO

// Se llama la instrucción.

IN := "Tag_Input"

// Valor de entrada cuyo bit activado menos significativo se lee.

OUT := "Tag_Output"

// Número del bit menos significativo que está activado en el valor de entrada

La figura siguiente muestra el funcionamiento de la instrucción con valores concretos:


 



ಯ7DJB,QSXWಯ  
ಯ7DJB2XWSXWಯ 

La instrucción selecciona el bit menos significativo que está activado en la variable "Tag_Input"
y escribe su bit "3" en la variable "Tag_Output".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con palabras (Página 194)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

5298

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

SEL: Seleccionar
Descripción
La instrucción "Seleccionar" permite elegir, en función de un interruptor (entrada G), una de las
entradas IN0 o IN1 y copiar su contenido en la salida OUT. Si la entrada G tiene el estado lógico
"0", se copia el valor de la entrada IN0. Si la entrada G tiene el estado lógico "1", se copia el
valor de la entrada IN1 en la salida OUT.
Para poder procesar la instrucción, las variables de todos los parámetros deben ser del mismo
tipo de datos.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Seleccionar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

G

Input

BOOL

I, Q, M, D, L

Interruptor

IN0

Input

I, Q, M, D, L, P
Secuencias de
bits, enteros, nú‐
meros en coma flo‐
tante, temporiza‐
dores, CHAR,
TOD, DATE

Primer valor de entrada

IN1

Input

I, Q, M, D, L, P
Secuencias de
bits, enteros, nú‐
meros en coma flo‐
tante, temporiza‐
dores, CHAR,
TOD, DATE

Segundo valor de entrada

OUT

Output

I, Q, M, D, L, P
Secuencias de
bits, enteros, nú‐
meros en coma flo‐
tante, temporiza‐
dores, CHAR,
TOD, DATE

Resultado

En la lista desplegable "???" puede seleccionar el tipo de datos de los parámetros IN0, IN1 y
OUT.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL SEL

// Se llama la instrucción.
// Seleccione el tipo de datos deseado de la lista
desplegable "???".

G := "Tag_Input_G"

// Estado lógico del interruptor

IN0 := "Tag_Input0"

// Primer valor de entrada

IN1 := "Tag_Input1"

// Segundo valor de entrada

Programación del PLC
Manual de programación y manejo, 11/2019

5299

Instrucciones
4.2 Instrucciones
AWL

Explicación

OUT := "Tag_Output"

// Valor de la entrada seleccionada

La tabla siguiente muestra el funcionamiento de la instrucción con valores concretos:
Parámetro

Operando

Valor

G

Tag_Input_G

1

IN0

Tag_Input0

W#16#0000

IN1

Tag_Input1

W#16#FFFF

OUT

Tag_Output

W#16#FFFF

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con palabras (Página 194)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Otras instrucciones
SET: Activar área por bits
Descripción
La instrucción "Activar área por bits" pone a "1" el estado lógico de los bits de un área indicada.
El punto inicial del área se define mediante el puntero del parámetro S_BIT. Si el puntero
señala al área de memoria de la periferia externa (P), no se ejecuta la instrucción. El número
de bits que deben activarse en el área indicada se determina en el parámetro N de la
instrucción. Si el parámetro N tiene el valor "0", la llamada de la instrucción no tendrá efecto
alguno.
La instrucción se ejecuta solo si el bit MCR está a "1". Si el bit MCR tiene el estado lógico "0",
no se modifican los bits en el área indicada.
Nota
Parámetro N
En el parámetro N también es posible interconectar un elemento de un bloque de datos.

5300

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Activar área por bits":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

S_BIT

Input

POINTER

I, Q, M, D

Apunta al primer
bit del área cuyos
bits se activan.
En el direcciona‐
miento indirecto
por registro interá‐
rea, el puntero de‐
be indicarse en for‐
mato de palabra
doble.

N

Input

INT

I, Q, M, D, L, P o
constante

Número de bits
que deben activar‐
se.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL SET

// Se llama la instrucción "Activar área por bits".

S_BIT := P#M0.0

// Puntero hacia el primer bit que debe activarse
(M0.0)

N := 10

// Número de bits que deben activarse

En el ejemplo, la instrucción activa 10 bits en el área de M0.0 a M1.2.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado (Página 186)
Bases de AWL (Página 8065)
Master Control Relay (Página 203)

SETP: Activar mapa de bits en el área de periferia
Descripción
La instrucción "Activar mapa de bits en el área de periferia" permite poner los bits de un área
de periferia al estado lógico "1". Paralelamente a los bits de periferia, también se activan los
bits correspondientes en la memoria imagen de proceso de las salidas.
Los parámetros N y SA de la instrucción sirven para definir el mapa de bits que debe activarse.
Los bits del mapa deben encontrarse en aquella parte del área de periferia que tiene asignada
una memoria imagen de proceso.

Programación del PLC
Manual de programación y manejo, 11/2019

5301

Instrucciones
4.2 Instrucciones
Si no se ha conectado periferia para una parte del mapa de bits seleccionado, la instrucción
intentará activar el mapa de bits completo. En este caso se devuelve una información de error
en el parámetro RET_VAL.
El área de periferia se activa por bytes. Si el mapa de bits definido a través de los parámetros
N y SA no empieza ni termina en un límite de byte, la llamada de la instrucción tendrá el efecto
siguiente:
● Los bits contenidos en el primer o último byte que debe transferirse y que no pertenecen al
mapa de bits definido, obtienen el valor de los bits correspondientes en la memoria imagen
de proceso de las salidas.
ADVERTENCIA
Comportamiento involuntario
El ajuste de los bits al valor de los bits correspondientes en la memoria imagen de proceso
de las salidas puede ocasionar, p. ej., el arranque accidental de motores o la desconexión
de sistemas de refrigeración.
● Los bits que pertenecen al mapa de bits definido se ponen al estado lógico "1".
La instrucción "Activar mapa de bits en el área de periferia" debe llamarse en un área MCR.
La llamada de la instrucción "Activar mapa de bits en el área de periferia" no tiene efecto alguno
si se cumple una de las condiciones siguientes:
● El parámetro N devuelve el valor "0".
● El bit MCR tiene el estado lógico "0".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Activar mapa de bits en el área de
periferia":

5302

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

N

Input

INT

I, Q, M, D, L o
constante

Número de bits que deben
activarse

RET_VAL

Output

INT

I, Q, M, D, L

Información de error

SA

Output

POINTER

P

Puntero hacia el primer bit
que debe activarse

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8xyy

Encontrará más información de error aquí: Evaluación de errores con el parámetro de
salida RET_VAL (Página 174)

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización aquí: Cambiar
formatos de visualización en el estado del programa (Página 8529)

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL SETP

// Se llama la instrucción.

N := 8

// Número de bits que deben activarse

RET_VAL := "Tag_ErrorCode"

// Información de error

SA := P#10.0

// Puntero hacia el primer bit que debe activarse
(Q10.0)

En el ejemplo, la instrucción activa 8 bits en el área de periferia conforme a las salidas Q10.0
a Q10.7.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado (Página 186)
Bases de AWL (Página 8065)
Master Control Relay (Página 203)

SETI: Activar área por bytes
Descripción
La instrucción "Activar área por bytes" pone a "1" el estado lógico de los bits de un área definida
de bytes. El punto inicial del área se define en el parámetro S_BYTE. El tamaño del área se
define indicando el número de bits que deben activarse en el parámetro N de la instrucción.
Nota
El valor del parámetro N debe ser un múltiplo de 8 (p. ej. 8, 16, 24, etc.).

Programación del PLC
Manual de programación y manejo, 11/2019

5303

Instrucciones
4.2 Instrucciones
El puntero indicado en el parámetro S_BYTE debe señalar al área de memoria de la periferia
externa (P). Puesto que al área de memoria "P" se accede en formato de byte, palabra y
palabra doble, el puntero del parámetro S_BYTE debe señalar a un operando equivalente a un
valor límite de byte; por tanto, el número de bit del puntero debe ser "0".
Nota
El estado lógico de los bits correspondientes en la memoria imagen de proceso de las salidas
(Q) se pone a "0".
La llamada de la instrucción "Activar área por bytes" no tiene efecto alguno si se cumple una
de las condiciones siguientes:
● El puntero del parámetro S_BYTE no señala al área de memoria de la periferia externa (P).
● El puntero del parámetro S_BYTE señala a un operando que no equivale a ningún valor
límite de byte.
● El valor del parámetro N no es un múltiplo de 8.
● El bit MCR tiene el estado lógico "0".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Activar área por bytes":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

S_BYTE

Input

POINTER

P o constante

Señala al primer byte del
área cuyos bits se activan.
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

N

Input

INT

I, Q, M, D, L, P o
constante

Tamaño del área que debe
activarse
El área se indica mediante el
número de bits como múltiplo
de 8 (p. ej. 8, 16, 24, etc.).

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL SETI

// Se llama la instrucción.

S_BYTE := P#2.0

// Puntero hacia el primer byte del área (P2.0)

N := 16

// Número de bits que deben activarse

En el ejemplo, la instrucción activa 2 bytes (16 bits) en el área de P2.0 a P3.7 (salidas
periféricas).

5304

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado (Página 186)
Bases de AWL (Página 8065)
Master Control Relay (Página 203)

RESET: Desactivar área por bits
Descripción
La instrucción "Desactivar área por bits" pone a "0" el estado lógico de los bits de un área
definida. El punto inicial del área se define mediante el puntero del parámetro S_BIT. Si el
puntero señala al área de memoria de la periferia externa (P), no se ejecuta la instrucción. El
número de bits que deben desactivarse en el área indicada se determina en el parámetro N de
la instrucción. Si el parámetro N tiene el valor "0", la llamada de la instrucción no tendrá efecto
alguno.
La instrucción se ejecuta solo si el bit MCR está a "1". Si el bit MCR tiene el estado lógico "0",
no se modifican los bits en el área indicada.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desactivar área por bits":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

S_BIT

Input

POINTER

I, Q, M, D

Señala al primer bit del área
cuyos bits se desactivan.
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

N

Input

INT

I, Q, M, D, L, P o
constante

Número de bits que deben
desactivarse.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL RESET

// Se llama la instrucción.

S_BIT := P#M0.0

// Puntero al primer bit (M0.0) que debe desactivarse.

N := 10

// Número de bits que deben desactivarse

En el ejemplo, la instrucción desactiva 10 bits en el área de M0.0 a M1.2.

Programación del PLC
Manual de programación y manejo, 11/2019

5305

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado (Página 186)
Bases de AWL (Página 8065)
Master Control Relay (Página 203)

RESETP: Desactivar mapa de bits en el área de periferia
Descripción
La instrucción "Desactivar mapa de bits en el área de periferia" pone los bits de un área de
periferia al estado lógico "0". Simultáneamente con los bits de periferia se desactivan también
los bits correspondientes en la memoria imagen de proceso de las salidas.
Los parámetros N y SA de la instrucción sirven para definir el mapa de bits que debe
desactivarse. Los bits del mapa deben encontrarse en aquella parte del área de periferia que
tiene asignada una memoria imagen de proceso.
Si no hay periferia enchufada para una parte del mapa de bits seleccionado, la instrucción
intentará desactivar el mapa de bits completo. En este caso se devuelve una información de
error en el parámetro RET_VAL.
El área de periferia se desactiva por bytes. Si el mapa de bits definido a través de los
parámetros N y SA no empieza ni termina en un límite de byte, la llamada de la instrucción
tendrá el efecto siguiente:
● Los bits contenidos en el primer o último byte que debe transferirse y que no pertenecen al
mapa de bits definido, obtienen el valor de los bits correspondientes en la memoria imagen
de proceso de las salidas.
ADVERTENCIA
Comportamiento involuntario
El ajuste de los bits al valor de los bits correspondientes en la memoria imagen de proceso
de las salidas puede ocasionar, p. ej., el arranque accidental de motores o la desconexión
de sistemas de refrigeración.
● Los bits que pertenecen al mapa de bits definido se ponen al estado lógico "0".
La instrucción "Desactivar mapa de bits en el área de periferia" debe llamarse en un área MCR.
La llamada de la instrucción "Desactivar mapa de bits en el área de periferia" no tiene efecto
alguno si se cumple una de las condiciones siguientes:
● El parámetro N devuelve el valor "0".
● El bit MCR tiene el estado lógico "0".

5306

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desactivar mapa de bits en el área
de periferia":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

N

Input

INT

I, Q, M, D, L o
constante

Número de bits que deben
desactivarse.

RET_VAL

Output

INT

I, Q, M, D, L

Información de error

SA

Output

POINTER

P

Puntero al primer bit que de‐
be desactivarse.

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8xyy

Encontrará más información de error aquí: Evaluación de errores con el parámetro de
salida RET_VAL (Página 174)

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización aquí: Cambiar
formatos de visualización en el estado del programa (Página 8529)

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL RESETP

// Se llama la instrucción.

N := 8

// Número de bits que deben desactivarse.

RET_VAL := "Tag_ErrorCode"

// Información de error

SA := P#10.0

// Puntero hacia el primer bit (Q10.0) que debe desactivarse.

En el ejemplo, la instrucción desactiva 8 bits del área de periferia correspondientes a las
salidas Q10.0 a Q10.7.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado (Página 186)
Bases de AWL (Página 8065)
Master Control Relay (Página 203)

Programación del PLC
Manual de programación y manejo, 11/2019

5307

Instrucciones
4.2 Instrucciones

RESETI: Desactivar área por bytes
Descripción
La instrucción "Desactivar área por bytes" pone a "0" el estado lógico de los bits de un área
definida de bytes. El punto inicial del área se define mediante el puntero del parámetro
S_BYTE. El tamaño del área se define indicando el número de bits que deben desactivarse en
el parámetro N de la instrucción.
Nota
El valor del parámetro N debe ser un múltiplo de 8 (p. ej. 8, 16, 24, etc.).
El puntero indicado en el parámetro S_BYTE debe señalar al área de memoria de la periferia
externa (P). Puesto que al área de memoria "P" se accede en formato de byte, palabra y
palabra doble, el puntero del parámetro S_BYTE debe señalar a un operando equivalente a un
valor límite de byte; por tanto, el número de bit del puntero debe ser "0".
Nota
El estado lógico de los bits correspondientes en la memoria imagen de proceso de las salidas
(Q) se pone a "0".
La llamada de la instrucción "Desactivar área por bytes" no tiene efecto alguno si se cumple
una de las condiciones siguientes:
● El puntero del parámetro S_BYTE no señala al área de memoria de la periferia externa (P).
● El puntero del parámetro S_BYTE señala a un operando que no equivale a ningún valor
límite de byte.
● El valor del parámetro N no es un múltiplo de 8.
● El bit MCR tiene el estado lógico "0".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desactivar área por bytes":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

S_BYTE

Input

POINTER

P o constante

Señala al primer byte del
área cuyos bits se desacti‐
van.
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

N

Input

INT

I, Q, M, D, L, P o
constante

Tamaño del área cuyos bits
se desactivan.
El área se indica mediante el
número de bits como múltiplo
de 8 (p. ej. 8, 16, 24, etc.).

5308

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL RESETI

// Se llama la instrucción.

S_BYTE := P#2.0

// Puntero hacia el primer byte del área (P2.0)

N := 16

// Número de bits que deben desactivarse.

En el ejemplo, la instrucción desactiva 2 bytes (16 bits) en el área de P2.0 a P3.7 (salidas
periféricas).

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado (Página 186)
Bases de AWL (Página 8065)
Master Control Relay (Página 203)

REPL_VAL: Introducir valor sustitutivo
Descripción
La instrucción "Introducir valor sustitutivo" introduce un valor sustitutivo en el acumulador 1
(ACU 1) desde un bloque de organización de error síncrono.
Nota
La instrucción "Introducir valor sustitutivo" solo se puede llamar desde bloques de organización
de error síncrono (OB 121, OB 122).
La instrucción "Introducir valor sustitutivo" se utiliza si ya no es posible leer ningún valor de un
módulo. Tras cada acceso a dicho módulo se inicia el OB 122. Llamando la instrucción
"Introducir valor sustitutivo" es posible cargar un valor sustitutivo en el acumulador 1. La
ejecución del programa se prosigue entonces con este valor sustitutivo. La información
necesaria para seleccionar el valor sustitutivo puede consultarse en las variables locales del
OB 122.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Introducir valor sustitutivo":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

VAL

Input

DWORD

I, Q, M, D, L o
constante

Valor sustitutivo

RET_VAL

Output

INT

I, Q, M, D, L

Información de error

Programación del PLC
Manual de programación y manejo, 11/2019

5309

Instrucciones
4.2 Instrucciones

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de Descripción
error*
(W#16#....)
0000

Ningún error

8080

La instrucción no se ha llamado desde un OB de error síncrono.

8xyy

Encontrará más información de error aquí: Evaluación de errores con el parámetro de
salida RET_VAL (Página 174)

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización aquí: Cambiar
formatos de visualización en el estado del programa (Página 8529)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado (Página 186)
Bases de AWL (Página 8065)
Master Control Relay (Página 203)

DRUM: Materializar circuito secuencial sucesivo
Descripción
La instrucción "Materializar circuito secuencial sucesivo" ocupa los bits de salida programados
(OUT1 a OUT16) y la palabra de salida (OUT_WORD) con los valores programados del
parámetro OUT_VAL del paso respectivo. El paso en cuestión debe cumplir las condiciones de
la máscara de habilitación programada en el parámetro S_MASK mientras la instrucción
permanece en dicho paso. La instrucción pasa al paso siguiente cuando el evento de éste es
verdadero y una vez transcurrido el tiempo programado para el paso actual, o bien cuando el
valor del parámetro JOG cambia de "0" a "1". La instrucción se desactiva cuando el estado
lógico del parámetro RESET cambia a "1". Con ello, el paso actual se iguala al paso
predeterminado (DSP).
El tiempo de permanencia en un paso se calcula multiplicando la base de tiempo
predeterminada (DTBP) por el valor de contaje predeterminado (S_PRESET) para cada paso.
Al comienzo de un nuevo paso, este valor calculado se carga en el parámetro DCC, que
contiene el tiempo restante para el paso actual. Por ejemplo, si el valor del parámetro DTBP es
"2" y el valor predeterminado para el primer paso es "100" (100 ms), el parámetro DCC
devolverá el valor "200" (200 ms).
Un paso puede programarse con un valor de tiempo, con un evento o con ambos. Los pasos
programados con un bit de evento y el valor de tiempo "0" pasan al siguiente paso en cuanto
el estado lógico del bit de evento es "1". Los pasos programados solo con un valor de tiempo
empiezan a contar el tiempo inmediatamente. Los pasos programados con un bit de evento y
un valor de tiempo mayor que "0" empiezan a contar el tiempo en cuanto el estado lógico del
bit de evento es "1". Los bits de evento se inicializan con el estado lógico "1".

5310

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Si el circuito secuencial sucesivo se encuentra en el último paso programado (LST_STEP) y ha
transcurrido el tiempo para dicho paso, el estado lógico del parámetro Q se pone a "1". De lo
contrario, se pone a "0". Si está activado el parámetro Q, la instrucción permanece en el paso
hasta la desactivación.
En la máscara configurable (S_MASK) es posible seleccionar los distintos bits de la palabra de
salida (OUT_WORD) y activar o desactivar los bits de salida (OUT1 a OUT16) mediante los
valores de salida (OUT_VAL). Si un bit de la máscara configurable tiene el estado lógico "1",
el valor OUT_VAL activa o desactiva el bit correspondiente. Si el estado lógico de un bit de la
máscara configurable es "0", no cambia el bit respectivo. Todos los bits de la máscara
configurable de todos los 16 pasos se inicializan con el estado lógico "1".
El bit de salida del parámetro OUT1 equivale al bit menos significativo de la palabra de salida
(OUT_WORD). El bit de salida del parámetro OUT16 equivale al bit más significativo de la
palabra de salida (OUT_WORD).
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Materializar circuito secuencial
sucesivo":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

RESET

Input

BOOL

I, Q, M, D, L

El estado lógico "1" indica
una condición de desactiva‐
ción

JOG

Input

BOOL

I, Q, M, D, L

Si el estado lógico cambia de
"0" a "1", la instrucción pasa
al siguiente paso.

DRUM_EN

Input

BOOL

I, Q, M, D, L

El estado lógico "1" permite
que el circuito secuencial su‐
cesivo siga contando según
el evento y los criterios de
tiempo.

LST_STEP

Input

BYTE

I, Q, M, D, L o
constante

Número del último paso pro‐
gramado.

EVENT(i),

Input

BOOL

I, Q, M, D, L

Bit de evento (i);

Output

BOOL

I, Q, M, D, L

Bit de salida (j)

Output

BOOL

I, Q, M, D, L

El estado lógico "1" indica
que ha transcurrido el tiempo
del último paso.

El estado lógico inicial es "1".

1<= i <=16
OUT(j),
1 ≤ j ≤ 16
Q

Programación del PLC
Manual de programación y manejo, 11/2019

5311

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

OUT_WORD

Output

WORD

I, Q, M, D, L, P

Dirección de palabra en la
que el circuito secuencial su‐
cesivo escribe los valores de
salida.

ERR_CODE

Output

WORD

I, Q, M, D, L, P

Información de error

JOG_HIS

Static

BOOL

I, Q, M, D, L

Bit de evolución del paráme‐
tro JOG

EOD

Static

BOOL

I, Q, M, D, L

El estado lógico "1" indica
que ha transcurrido el tiempo
del último paso.

DSP

Static

BYTE

I, Q, M, D, L, P

Primer paso predeterminado
del circuito secuencial suce‐
sivo (1 a 16)

DSC

Static

BYTE

I, Q, M, D, L, P

Paso actual del circuito se‐
cuencial sucesivo

DCC

Static

DWORD

I, Q, M, D, L, P

Tiempo de ejecución restan‐
te para el paso actual

DTBP

Static

WORD

I, Q, M, D, L, P

Base de tiempo predetermi‐
nada del circuito secuencial
sucesivo

PrevTime

Static

TIME

I, Q, M, D, L o
constante

hora de sistema de la llama‐
da anterior

S_PRESET

Static

ARRAY[1..16] of
WORD

I, Q, M, D, L

Valor de contaje predetermi‐
nado para cada paso [1 a 16];
1 ciclo de reloj = 1 ms.

OUT_VAL

Static

ARRAY[1..16,
0..15] of BOOL

I, Q, M, D, L

Valores de salida para cada
paso [1 a 16, 0 a 15].

S_MASK

Static

ARRAY[1..16,
0..15] of BOOL

I, Q, M, D, L

Máscara configurable para
cada paso [1 a 16, 0 a 15].
Los estados lógicos iniciales
son "1".

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
ERR_CO‐
DE*

Explicación

W#16#000
0

Ningún error

W#16#000
B

El valor del parámetro LST_STEP es menor que 1 o mayor que 16.

W#16#000
C

El valor del parámetro DSC es menor que 1 o mayor que el valor del parámetro
LST_STEP.

W#16#000
D

El valor del parámetro DSP es menor que 1 o mayor que el valor de LST_STEP.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización aquí: Cambiar
formatos de visualización en el estado del programa (Página 8529)

5312

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
En el ejemplo siguiente, la instrucción pasa del paso 1 al paso 2. Los bits de salida (OUT1 a
OUT16) y la palabra de salida (OUT_WORD) se activan según la máscara configurada para el
paso 2 y los valores del parámetro OUT_VAL.
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.

AWL

Explicación

CALL DRUM, "DRUM_DB"

// Se llama la instrucción y se crea el bloque de datos de instancia "DRUM_DB".

RESET := "Tag_Reset"

// Entrada de inicialización

JOG := "Tag_Input_Jog"

// Si se produce un flanco ascendente, la instrucción
pasa al paso siguiente.

DRUM_EN := "Tag_Input_DrumEN" // El estado lógico "1" permite que el circuito secuencial sucesivo siga contando según el evento y los
criterios de tiempo.
LST_STEP := "Tag_Number_LastStep"

// Número del último paso programado

EVENT1 := "MyTag_Event_1"

// Bit de evento 1

EVENT2 := "MyTag_Event_2"

// Bit de evento 2

EVENT3 := "MyTag_Event_3"

// Bit de evento 3

EVENT4 := "MyTag_Event_4"

// Bit de evento 4

EVENT5 := "MyTag_Event_5"

// Bit de evento 5

EVENT6 := "MyTag_Event_6"

// Bit de evento 6

EVENT7 := "MyTag_Event_7"

// Bit de evento 7

EVENT8 := "MyTag_Event_8"

// Bit de evento 8

EVENT9 := "MyTag_Event_9"

// Bit de evento 9

EVENT10 := "MyTag_Event_10"

// Bit de evento 10

EVENT11 := "MyTag_Event_11"

// Bit de evento 11

EVENT12 := "MyTag_Event_12"

// Bit de evento 12

EVENT13 := "MyTag_Event_13"

// Bit de evento 13

EVENT14 := "MyTag_Event_14"

// Bit de evento 14

EVENT15 := "MyTag_Event_15"

// Bit de evento 15

EVENT16 := "MyTag_Event_16"

// Bit de evento 16

OUT1 := "MyTag_Output_1"

// Bit de salida 1

OUT2 := "MyTag_Output_2"

// Bit de salida 2

OUT3 := "MyTag_Output_3"

// Bit de salida 3

OUT4 := "MyTag_Output_4"

// Bit de salida 4

OUT5 := "MyTag_Output_5"

// Bit de salida 5

OUT6 := "MyTag_Output_6"

// Bit de salida 6

OUT7 := "MyTag_Output_7"

// Bit de salida 7

OUT8 := "MyTag_Output_8"

// Bit de salida 8

OUT9 := "MyTag_Output_9"

// Bit de salida 9

OUT10 := "MyTag_Output_10"

// Bit de salida 10

Programación del PLC
Manual de programación y manejo, 11/2019

5313

Instrucciones
4.2 Instrucciones
AWL

Explicación

OUT11 := "MyTag_Output_11"

// Bit de salida 11

OUT12 := "MyTag_Output_12"

// Bit de salida 12

OUT13 := "MyTag_Output_13"

// Bit de salida 13

OUT14 := "MyTag_Output_14"

// Bit de salida 14

OUT15 := "MyTag_Output_15"

// Bit de salida 15

OUT16 := "MyTag_Output_16"

// Bit de salida 16

Q := "Tag_Output_Q"

// El estado lógico "1" indica que ha transcurrido el
tiempo del último paso.

OUT_WORD := "Tag_OutputWord"

// Dirección de palabra en la que el circuito secuencial sucesivo escribe los valores de salida

ERR_CODE := "Tag_ErrorCode"

// Información de error

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.

Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para asignar valores a los parámetros de
entrada:
Parámetro

Operando

Dirección

Valor

RESET

Tag_Reset

M0.0

FALSE

JOG

Tag_Input_JOG

M0.1

FALSE

DRUM_EN

Tag_Input_DrumEN

M0.2

TRUE

LST_STEP

Tag_Number_LastStep

MB1

B#16#08

EVENT2

MyTag_Event_2

M20.0

FALSE

EVENT4

MyTag_Event_4

M20.1

FALSE

EVENT6

MyTag_Event_6

M20.2

FALSE

EVENT8

MyTag_Event_8

M20.3

FALSE

EVENT10

MyTag_Event_10

M20.4

FALSE

EVENT12

MyTag_Event_12

M20.5

FALSE

EVENT14

MyTag_Event_14

M20.6

FALSE

EVENT16

MyTag_Event_16

M20.7

FALSE

Los siguientes valores se almacenan en el bloque de datos de instancia "DRUM_DB" de la
instrucción:

5314

Parámetro

Dirección

Valor

JOG_HIS

DBX12.0

FALSE

EOD

DBX12.1

FALSE

DSP

DBB13

W#16#0001

DSC

DBB14

W#16#0001

DCC

DBD16

DW#16#0000000A

DTBP

DBW20

W#16#0001

S_PRESET[1]

DBW26

W#16#0064

S_PRESET[2]

DBW28

W#16#00C8

OUT_VAL[1,0]

DBX58.0

TRUE

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Dirección

Valor

OUT_VAL[1,1]

DBX58.1

TRUE

OUT_VAL[1,2]

DBX58.2

TRUE

OUT_VAL[1,3]

DBX58.3

TRUE

OUT_VAL[1,4]

DBX58.4

TRUE

OUT_VAL[1,5]

DBX58.5

TRUE

OUT_VAL[1,6]

DBX58.6

TRUE

OUT_VAL[1,7]

DBX58.7

TRUE

OUT_VAL[1,8]

DBX59.0

TRUE

OUT_VAL[1,9]

DBX59.1

TRUE

OUT_VAL[1,10]

DBX59.2

TRUE

OUT_VAL[1,11]

DBX59.3

TRUE

OUT_VAL[1,12]

DBX59.4

TRUE

OUT_VAL[1,13]

DBX59.5

TRUE

OUT_VAL[1,14]

DBX59.6

TRUE

OUT_VAL[1,15]

DBX59.7

TRUE

OUT_VAL[2,0]

DBX60.0

FALSE

OUT_VAL[2,1]

DBX60.1

FALSE

OUT_VAL[2,2]

DBX60.2

FALSE

OUT_VAL[2,3]

DBX60.3

FALSE

OUT_VAL[2,4]

DBX60.4

FALSE

OUT_VAL[2,5]

DBX60.5

FALSE

OUT_VAL[2,6]

DBX60.6

FALSE

OUT_VAL[2,7]

DBX60.7

FALSE

OUT_VAL[2,8]

DBX61.0

FALSE

OUT_VAL[2,9]

DBX61.1

FALSE

OUT_VAL[2,10]

DBX61.2

FALSE

OUT_VAL[2,11]

DBX61.3

FALSE

OUT_VAL[2,12]

DBX61.4

FALSE

OUT_VAL[2,13]

DBX61.5

FALSE

OUT_VAL[2,14]

DBX61.6

FALSE

OUT_VAL[2,15]

DBX61.7

FALSE

S_MASK[2,0]

DBX92.0

FALSE

S_MASK[2,1]

DBX92.1

TRUE

S_MASK[2,2]

DBX92.2

TRUE

S_MASK[2,3]

DBX92.3

TRUE

S_MASK[2,4]

DBX92.4

TRUE

S_MASK[2,5]

DBX92.5

FALSE

S_MASK[2,6]

DBX92.6

TRUE

S_MASK[2,7]

DBX92.7

TRUE

S_MASK[2,8]

DBX93.0

FALSE

S_MASK[2,9]

DBX93.1

FALSE

S_MASK[2,10]

DBX93.2

TRUE

S_MASK[2,11]

DBX93.3

TRUE

Programación del PLC
Manual de programación y manejo, 11/2019

5315

Instrucciones
4.2 Instrucciones
Parámetro

Dirección

Valor

S_MASK[2,12]

DBX93.4

TRUE

S_MASK[2,13]

DBX93.5

TRUE

S_MASK[2,14]

DBX93.6

FALSE

S_MASK[2,15]

DBX93.7

TRUE

Los parámetros de salida tienen los valores siguientes antes de ejecutarse la instrucción:
Parámetro

Operando

Dirección

Valor

Q

Tag_Output_Q

M6.0

FALSE

OUTWORD

Tag_OutputWord

MW8

W#16#FFFF

OUT1

MyTag_Output_1

M4.0

TRUE

OUT2

MyTag_Output_2

M4.1

TRUE

OUT3

MyTag_Output_3

M4.2

TRUE

OUT4

MyTag_Output_4

M4.3

TRUE

OUT5

MyTag_Output_5

M4.4

TRUE

OUT6

MyTag_Output_6

M4.5

TRUE

OUT7

MyTag_Output_7

M4.6

TRUE

OUT8

MyTag_Output_8

M4.7

TRUE

OUT9

MyTag_Output_9

M5.0

TRUE

OUT10

MyTag_Output_10

M5.1

TRUE

OUT11

MyTag_Output_11

M5.2

TRUE

OUT12

MyTag_Output_12

M5.3

TRUE

OUT13

MyTag_Output_13

M5.4

TRUE

OUT14

MyTag_Output_14

M5.5

TRUE

OUT15

MyTag_Output_15

M5.6

TRUE

OUT16

MyTag_Output_16

M5.7

TRUE

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:

5316

Parámetro

Operando

Dirección

Valor

OUT1

MyTag_Output_1

M4.0

TRUE

OUT2

MyTag_Output_2

M4.1

FALSE

OUT3

MyTag_Output_3

M4.2

FALSE

OUT4

MyTag_Output_4

M4.3

FALSE

OUT5

MyTag_Output_5

M4.4

FALSE

OUT6

MyTag_Output_6

M4.5

TRUE

OUT7

MyTag_Output_7

M4.6

FALSE

OUT8

MyTag_Output_8

M4.7

FALSE

OUT9

MyTag_Output_9

M5.0

TRUE

OUT10

MyTag_Output_10

M5.1

TRUE

OUT11

MyTag_Output_11

M5.2

FALSE

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Operando

Dirección

Valor

OUT12

MyTag_Output_12

M5.3

FALSE

OUT13

MyTag_Output_13

M5.4

FALSE

OUT14

MyTag_Output_14

M5.5

FALSE

OUT15

MyTag_Output_15

M5.6

TRUE

OUT16

MyTag_Output_16

M5.7

FALSE

Q

Tag_Output_Q

M6.0

FALSE

OUTWORD

Tag_OutputWord

MW8

W#16#4321

ERR_CODE

Tag_ErrorCode

MW10

W#16#0000

Los siguientes valores se modifican en el bloque de datos de instancia "DRUM_DB" de la
instrucción después de su ejecución:
Parámetro

Dirección

Valor

JOG_HIS

DBX12.0

FALSE

EOD

DBX12.1

FALSE

DSC

DBB14

W#16#0002

DCC

DBD16

DW#16#000000C8

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado (Página 186)
Bases de AWL (Página 8065)
Master Control Relay (Página 203)

DRUM_X: Materializar circuito secuencial sucesivo
Descripción
La instrucción "Materializar circuito secuencial sucesivo" permite materializar un circuito
secuencial sucesivo con 16 pasos como máximo. El número del primer paso se define con el
parámetro DSP. El número del último paso se predetermina con el parámetro LST_STEP.
En cada paso se escriben todos los 16 bits de salida OUT0 a OUT15 y el parámetro de salida
OUT_WORD (que contiene los bits de salida). A un bit de salida se asigna bien sea el bit
correspondiente del campo predefinido OUT_VAL, o bien el bit de salida del paso anterior. El
valor que se asigne dependerá de la ocupación de los bits de máscara en el parámetro
S_MASK.
Nota
El ajuste predeterminado de los bits de máscara es 0. Para modificar el ajuste actual de uno
o varios bits de máscara, realice el cambio en el bloque de datos de instancia.
La instrucción "Materializar circuito secuencial sucesivo" pasa al siguiente paso cuando se
produce un flanco de señal ascendente en el parámetro JOG. Si la instrucción ya se encuentra
Programación del PLC
Manual de programación y manejo, 11/2019

5317

Instrucciones
4.2 Instrucciones
en el último paso y se produce un flanco de señal ascendente en el parámetro JOG, se activan
las variables Q y EOD. En este caso, el parámetro DCC se pone al valor 0. La instrucción
permanece en el último paso hasta que el parámetro RESET se pone al valor "1".
Además, también se puede permitir la transición al paso siguiente en función del tiempo. Para
ello se debe poner al valor "1" el parámetro DRUM_EN. La transición al paso siguiente tiene
lugar si está activado el bit de evento (EVENTi) correspondiente al paso actual y si ha
transcurrido el tiempo predeterminado para el paso actual. El tiempo necesario para un paso
resulta de la multiplicación de la base de tiempo (DTBP) por el factor de tiempo válido para el
paso actual (S_PRESET).
Nota
El tiempo de ejecución restante en el paso actual (DCC) se reduce únicamente si está activado
el bit de evento correspondiente (EVENTi).
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".
Si, al llamar la instrucción, el parámetro RESET tiene el valor "1", el circuito secuencial
sucesivo pasará al paso cuyo número se ha asignado al parámetro DSP.
Un paso puede programarse con un valor de tiempo, con un evento o con ambos. Los pasos
programados con un bit de evento y el valor de tiempo "0" pasan al siguiente paso en cuanto
el estado lógico del bit de evento es "1". Los pasos programados solo con un valor de tiempo
empiezan a contar el tiempo inmediatamente. Los pasos programados con un bit de evento y
un valor de tiempo mayor que "0" empiezan a contar el tiempo en cuanto el estado lógico del
bit de evento es "1".
El circuito secuencial sucesivo también se puede conmutar en progresión en todo momento a
través del valor del parámetro JOG.
En la primera llamada de la instrucción, el parámetro RESET se debe poner a "1".
Si el circuito secuencial se encuentra en el último paso y ha transcurrido el tiempo de ejecución
predefinido para este paso, se activan los parámetros Q y EOD. La instrucción permanece en
el último paso hasta que el parámetro RESET adopte el valor "1".
Esta instrucción se ejecuta solo en los estados operativos ARRANQUE y RUN.
El sistema operativo inicializa la instrucción "Materializar circuito secuencial sucesivo" cuando
se efectúa un arranque en frío. La instrucción no se inicializa en caso de un rearranque
completo (en caliente). Si la instrucción "Materializar circuito secuencial sucesivo" debe
inicializarse tras un rearranque completo (en caliente), es preciso llamarla en el OB 100 con el
valor "1" en el parámetro RESET.

5318

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Materializar circuito secuencial
sucesivo":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

RESET

Input

BOOL

I, Q, M, D, L

El estado lógico "1" desactiva
el circuito secuencial. En la
primera llamada de la instruc‐
ción, el parámetro RESET se
debe poner a "1".

JOG

Input

BOOL

I, Q, M, D, L

Un flanco ascendente (con
respecto a la última llamada)
provoca la transición al paso
siguiente, siempre que el cir‐
cuito secuencial no se en‐
cuentre aún en el último pa‐
so. La transición tiene lugar
independientemente del va‐
lor asignado al parámetro
DRUM_EN.

DRUM_EN

Input

BOOL

I, Q, M, D, L

Parámetro de control que de‐
termina si se puede realizar
una transición al paso si‐
guiente en función del tiem‐
po. Si el valor es "1", es posi‐
ble una transición en función
del tiempo.

LST_STEP

Input

BYTE

I, Q, M, D, L o
constante

Número del último paso

EVENT(i),

Los valores admisibles son 1
a 16.

Input

BOOL

I, Q, M, D, L

Bit de evento (i) (pertenece al
paso i)

Output

BOOL

I, Q, M, D, L

Bit de salida (j)
(idéntico al bit n.º j de
OUT_WORD)

Q

Output

BOOL

I, Q, M, D, L

Parámetro de estado que in‐
dica si ha transcurrido el tiem‐
po predefinido por el usuario
para la ejecución del último
paso.

OUT_WORD

Output

WORD

I, Q, M, D, L, P

Bits de salida resumidos en
una variable

ERR_CODE

Output

WORD

I, Q, M, D, L, P

Información de error

JOG_HIS

Static

BOOL

I, Q, M, D, L

Irrelevante para el usuario
(parámetro de entrada JOG
de la llamada anterior)

EOD

Static

BOOL

I, Q, M, D, L

Idéntico al parámetro de sali‐
da Q

DSP

Static

BYTE

I, Q, M, D, L, P o
constante

Número del primer paso

1 ≤ i ≤ 16
OUTj,
0 ≤ j ≤ 15

Programación del PLC
Manual de programación y manejo, 11/2019

Los valores admisibles son 1
a 16.

5319

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

DSC

Static

BYTE

I, Q, M, D, L, P o
constante

Número del paso actual

DCC

Static

DWORD

I, Q, M, D, L, P

Tiempo de ejecución restan‐
te del paso actual, indicado
en milisegundos (ms) (rele‐
vante solo si DRUM_EN = 1 y
el bit de evento correspon‐
diente = 1)

DTBP

Static

WORD

I, Q, M, D, L, P o
constante

Base de tiempo en milisegun‐
dos (ms) válida para todos
los pasos

PREV_TIME

Static

DWORD

I, Q, M, D, L o
constante

(Irrelevante para el usuario:
hora de sistema de la llama‐
da anterior)

S_PRESET

Static

ARRAY of WORD

I, Q, M, D, L o
constante

Campo unidimensional con
los factores de tiempo para
cada paso.
Selección recomendada de
índices: [1 a 16].
En este caso, S_PRESET [x]
contiene el factor de tiempo
del paso x.

5320

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

OUT_VAL

Static

ARRAY of BOOL

I, Q, M, D, L

Campo bidimensional con
los valores que deben emitir‐
se en cada paso, a no ser
que se hayan inhibido vía
S_MASK.
Selección recomendada de
índices: [1 a 16, 0 a 15]. En
este caso, OUT_VAL [x, y]
contiene el valor asignado al
bit de salida OUTy en el paso
x.

S_MASK

Static

ARRAY of BOOL

I, Q, M, D, L

Campo bidimensional con
los bits de máscara para ca‐
da paso.
Selección recomendada de
índices: [1 a 16, 0 a 15]. En
este caso, S_MASK [x, y]
contiene el bit de máscara
para el valor "y"-ésimo que
debe emitirse en el paso x.
Significado de los bits de
máscara:
● 0: el valor
correspondiente del paso
anterior se asigna al
respectivo bit de salida
● 1: el valor
correspondiente de
OUT_VAL se asigna al
respectivo bit de salida.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
ERR_CO‐
DE*
(W#16#...)

Explicación

0000

Ningún error

8081

Valor no admisible en el parámetro LST_STEP

8082

Valor no admisible en DSC

8083

Valor no admisible en DSP

8084

El producto DCC = DTBP * S_PRESET[DSC] excede el valor 2**31-1 (aprox. 24,86 días).

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización aquí: Cambiar
formatos de visualización en el estado del programa (Página 8529)

Programación del PLC
Manual de programación y manejo, 11/2019

5321

Instrucciones
4.2 Instrucciones

Ejemplo
En el ejemplo siguiente, la instrucción pasa del paso 1 al paso 2. Los bits de salida (OUT0 a
OUT15) y la palabra de salida (OUT_WORD) se activan según la máscara configurada para el
paso 2 y los valores del parámetro OUT_VAL.
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.

AWL

Explicación

CALL DRUM_X, "DRUM_X_DB"

// Se llama la instrucción y se crea el bloque de datos de instancia "DRUM_DB".

RESET := "Tag_Reset"

// Entrada de inicialización

JOG := "Tag_Input_Jog"

// Si se produce un flanco ascendente, la instrucción
pasa al paso siguiente.

DRUM_EN := "Tag_Input_DrumEN" // El estado lógico "1" permite que el circuito secuencial sucesivo siga contando según el evento y los
criterios de tiempo.

5322

LST_STEP := "Tag_Number_LastStep"

// Número del último paso programado

EVENT1 := "MyTag_Event_1"

// Bit de evento 1

EVENT2 := "MyTag_Event_2"

// Bit de evento 2

EVENT3 := "MyTag_Event_3"

// Bit de evento 3

EVENT4 := "MyTag_Event_4"

// Bit de evento 4

EVENT5 := "MyTag_Event_5"

// Bit de evento 5

EVENT6 := "MyTag_Event_6"

// Bit de evento 6

EVENT7 := "MyTag_Event_7"

// Bit de evento 7

EVENT8 := "MyTag_Event_8"

// Bit de evento 8

EVENT9 := "MyTag_Event_9"

// Bit de evento 9

EVENT10 := "MyTag_Event_10"

// Bit de evento 10

EVENT11 := "MyTag_Event_11"

// Bit de evento 11

EVENT12 := "MyTag_Event_12"

// Bit de evento 12

EVENT13 := "MyTag_Event_13"

// Bit de evento 13

EVENT14 := "MyTag_Event_14"

// Bit de evento 14

EVENT15 := "MyTag_Event_15"

// Bit de evento 15

EVENT16 := "MyTag_Event_16"

// Bit de evento 16

OUT0 := "MyTag_Output_0"

// Bit de salida 0

OUT1 := "MyTag_Output_1"

// Bit de salida 1

OUT2 := "MyTag_Output_2"

// Bit de salida 2

OUT3 := "MyTag_Output_3"

// Bit de salida 3

OUT4 := "MyTag_Output_4"

// Bit de salida 4

OUT5 := "MyTag_Output_5"

// Bit de salida 5

OUT6 := "MyTag_Output_6"

// Bit de salida 6

OUT7 := "MyTag_Output_7"

// Bit de salida 7

OUT8 := "MyTag_Output_8"

// Bit de salida 8

OUT9 := "MyTag_Output_9"

// Bit de salida 9

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
AWL

Explicación

OUT10 := "MyTag_Output_10"

// Bit de salida 10

OUT11 := "MyTag_Output_11"

// Bit de salida 11

OUT12 := "MyTag_Output_12"

// Bit de salida 12

OUT13 := "MyTag_Output_13"

// Bit de salida 13

OUT14 := "MyTag_Output_14"

// Bit de salida 14

OUT15 := "MyTag_Output_15"

// Bit de salida 15

Q := "Tag_Output_Q"

// El estado lógico "1" indica que ha transcurrido el
tiempo del último paso.

OUT_WORD := "Tag_OutputWord"

// Dirección de palabra en la que el circuito secuencial sucesivo escribe los valores de salida

ERR_CODE := "Tag_ErrorCode"

// Información de error

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.

Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para asignar valores a los parámetros de
entrada:
Parámetro

Operando

Dirección

Valor

RESET

Tag_Reset

M0.0

FALSE

JOG

Tag_Input_JOG

M0.1

FALSE

DRUM_EN

Tag_Input_Drum_EN

M0.2

TRUE

LST_STEP

Tag_Number_LastStep

MB1

B#16#08

EVENT2

MyTag_Event_2

M20.0

FALSE

EVENT4

MyTag_Event_4

M20.1

FALSE

EVENT6

MyTag_Event_6

M20.2

FALSE

EVENT8

MyTag_Event_8

M20.3

FALSE

EVENT10

MyTag_Event_10

M20.4

FALSE

EVENT12

MyTag_Event_12

M20.5

FALSE

EVENT14

MyTag_Event_14

M20.6

FALSE

EVENT16

MyTag_Event_16

M20.7

FALSE

Los siguientes valores se almacenan en el bloque de datos de instancia "DRUM_X_DB" de la
instrucción:
Parámetro

Dirección

Valor

JOG_HIS

DBX12.0

FALSE

EOD

DBX12.1

FALSE

DSP

DBB13

W#16#0001

DSC

DBB14

W#16#0001

DCC

DBD16

DW#16#0000000A

DTBP

DBW20

W#16#0001

S_PRESET[1]

DBW26

W#16#0064

S_PRESET[2]

DBW28

W#16#00C8

OUT_VAL[1,0]

DBX58.0

TRUE

Programación del PLC
Manual de programación y manejo, 11/2019

5323

Instrucciones
4.2 Instrucciones

5324

Parámetro

Dirección

Valor

OUT_VAL[1,1]

DBX58.1

TRUE

OUT_VAL[1,2]

DBX58.2

TRUE

OUT_VAL[1,3]

DBX58.3

TRUE

OUT_VAL[1,4]

DBX58.4

TRUE

OUT_VAL[1,5]

DBX58.5

TRUE

OUT_VAL[1,6]

DBX58.6

TRUE

OUT_VAL[1,7]

DBX58.7

TRUE

OUT_VAL[1,8]

DBX59.0

TRUE

OUT_VAL[1,9]

DBX59.1

TRUE

OUT_VAL[1,10]

DBX59.2

TRUE

OUT_VAL[1,11]

DBX59.3

TRUE

OUT_VAL[1,12]

DBX59.4

TRUE

OUT_VAL[1,13]

DBX59.5

TRUE

OUT_VAL[1,14]

DBX59.6

TRUE

OUT_VAL[1,15]

DBX59.7

TRUE

OUT_VAL[2,0]

DBX60.0

FALSE

OUT_VAL[2,1]

DBX60.1

FALSE

OUT_VAL[2,2]

DBX60.2

FALSE

OUT_VAL[2,3]

DBX60.3

FALSE

OUT_VAL[2,4]

DBX60.4

FALSE

OUT_VAL[2,5]

DBX60.5

FALSE

OUT_VAL[2,6]

DBX60.6

FALSE

OUT_VAL[2,7]

DBX60.7

FALSE

OUT_VAL[2,8]

DBX61.0

FALSE

OUT_VAL[2,9]

DBX61.1

FALSE

OUT_VAL[2,10]

DBX61.2

FALSE

OUT_VAL[2,11]

DBX61.3

FALSE

OUT_VAL[2,12]

DBX61.4

FALSE

OUT_VAL[2,13]

DBX61.5

FALSE

OUT_VAL[2,14]

DBX61.6

FALSE

OUT_VAL[2,15]

DBX61.7

FALSE

S_MASK[2,0]

DBX92.0

FALSE

S_MASK[2,1]

DBX92.1

TRUE

S_MASK[2,2]

DBX92.2

TRUE

S_MASK[2,3]

DBX92.3

TRUE

S_MASK[2,4]

DBX92.4

TRUE

S_MASK[2,5]

DBX92.5

FALSE

S_MASK[2,6]

DBX92.6

TRUE

S_MASK[2,7]

DBX92.7

TRUE

S_MASK[2,8]

DBX93.0

FALSE

S_MASK[2,9]

DBX93.1

FALSE

S_MASK[2,10]

DBX93.2

TRUE

S_MASK[2,11]

DBX93.3

TRUE

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Dirección

Valor

S_MASK[2,12]

DBX93.4

TRUE

S_MASK[2,13]

DBX93.5

TRUE

S_MASK[2,14]

DBX93.6

FALSE

S_MASK[2,15]

DBX93.7

TRUE

Los parámetros de salida tienen los valores siguientes antes de ejecutarse la instrucción:
Parámetro

Operando

Dirección

Valor

Q

Tag_Output_Q

M6.0

FALSE

OUTWORD

Tag_OutputWord

MW8

W#16#FFFF

OUT0

MyTag_Output_0

M4.0

TRUE

OUT1

MyTag_Output_1

M4.1

TRUE

OUT2

MyTag_Output_2

M4.2

TRUE

OUT3

MyTag_Output_3

M4.3

TRUE

OUT4

MyTag_Output_4

M4.4

TRUE

OUT5

MyTag_Output_5

M4.5

TRUE

OUT6

MyTag_Output_6

M4.6

TRUE

OUT7

MyTag_Output_7

M4.7

TRUE

OUT8

MyTag_Output_8

M5.0

TRUE

OUT9

MyTag_Output_9

M5.1

TRUE

OUT10

MyTag_Output_10

M5.2

TRUE

OUT11

MyTag_Output_11

M5.3

TRUE

OUT12

MyTag_Output_12

M5.4

TRUE

OUT13

MyTag_Output_13

M5.5

TRUE

OUT14

MyTag_Output_14

M5.6

TRUE

OUT15

MyTag_Output_15

M5.7

TRUE

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Dirección

Valor

OUT0

MyTag_Output_0

M4.0

TRUE

OUT1

MyTag_Output_1

M4.1

FALSE

OUT2

MyTag_Output_2

M4.2

FALSE

OUT3

MyTag_Output_3

M4.3

FALSE

OUT4

MyTag_Output_4

M4.4

FALSE

OUT5

MyTag_Output_5

M4.5

TRUE

OUT6

MyTag_Output_6

M4.6

FALSE

OUT7

MyTag_Output_7

M4.7

FALSE

OUT8

MyTag_Output_8

M5.0

TRUE

OUT9

MyTag_Output_9

M5.1

TRUE

OUT10

MyTag_Output_10

M5.2

FALSE

Programación del PLC
Manual de programación y manejo, 11/2019

5325

Instrucciones
4.2 Instrucciones
Parámetro

Operando

Dirección

Valor

OUT11

MyTag_Output_11

M5.3

FALSE

OUT12

MyTag_Output_12

M5.4

FALSE

OUT13

MyTag_Output_13

M5.5

FALSE

OUT14

MyTag_Output_14

M5.6

TRUE

OUT15

MyTag_Output_15

M5.7

FALSE

Q

Tag_Output_Q

M6.0

FALSE

OUTWORD

Tag_OutputWord

MW8

W#16#4321

ERR_CODE

Tag_ErrorCode

MW10

W#16#0000

Los siguientes valores se almacenan en el bloque de datos de instancia "DRUM_X_DB" de la
instrucción:
Parámetro

Dirección

Valor

JOG_HIS

DBX12.0

FALSE

EOD

DBX12.1

FALSE

DSC

DBB14

W#16#0002

DCC

DBD16

DW#16#000000C8

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado (Página 186)
Bases de AWL (Página 8065)
Master Control Relay (Página 203)

DCAT: Alarma de tiempo para control discreto
Descripción
La instrucción "Alarma de tiempo para control discreto" acumula el tiempo desde el instante en
el que el parámetro CMD da la orden de abrir o cerrar. El tiempo se acumula hasta excederse
el tiempo predeterminado (PT) o hasta recibir la notificación de que el dispositivo se ha cerrado
o abierto dentro del tiempo prescrito (O_FB o C_FB). Si se excede el tiempo predeterminado
antes de recibirse la notificación de que se ha abierto o cerrado el dispositivo, se activa la
alarma correspondiente. Si el estado lógico de la entrada de la orden cambia antes del tiempo
predeterminado, se reinicia el tiempo.
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".

5326

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La instrucción "Alarma de tiempo para control discreto" tiene los efectos siguientes en las
condiciones de entrada:
● Si el estado lógico del parámetro CMD cambia de "0" a "1", esto tiene los efectos siguientes
en los estados lógicos de los parámetros Q, CMD_HIS, ET, OA y CA:
– Los parámetros Q y CMD_HIS se ponen a "1".
– Los parámetros ET, OA y CA se ponen a "0".
● Si el estado lógico del parámetro CMD cambia de "1" a "0", los parámetros Q, ET, OA, CA
y CMD_HIS se ponen a "0".
● Si los parámetros CMD y CMD_HIS tienen el estado lógico "1" y el parámetro O_FB se pone
a "0", la diferencia de tiempo (ms) desde la última ejecución de la instrucción se suma al
valor del parámetro ET. Si el valor del parámetro ET excede el del parámetro PT, el estado
lógico del parámetro OA se pone a "1". Si el valor del parámetro ET no excede el del
parámetro PT, el estado lógico del parámetro OA se pone a "0". El valor del parámetro
CMD_HIS se pone al del parámetro CMD.
● Si los estados lógicos de los parámetros CMD, CMD_HIS y O_FB están a "1" y el parámetro
C_FB devuelve el valor "0", el estado lógico del parámetro OA se pone a "0". El valor del
parámetro ET se pone al del parámetro PT. Si el estado lógico del parámetro O_FB cambia
a "0", se activa la alarma en la siguiente ejecución de la instrucción. El valor del parámetro
CMD_HIS se pone al del parámetro CMD.
● Si los parámetros CMD, CMD_HIS y C_FB devuelven "0", la diferencia de tiempo (ms)
desde la última ejecución de la instrucción se suma al valor del parámetro ET. Si el valor del
parámetro ET excede el del parámetro PT, el estado lógico del parámetro CA se pone a "1".
Si no se excede el valor del parámetro PT, el parámetro CA devuelve el estado lógico "0".
El valor del parámetro CMD_HIS se pone al del parámetro CMD.
● Si los parámetros CMD, CMD_HIS y O_FB devuelven el estado lógico "0" y el parámetro
C_FB está a "1", el parámetro CA se pone a "0". El valor del parámetro ET se pone al del
parámetro PT. Si el estado lógico del parámetro C_FB cambia a "0", se activa la alarma en
la siguiente ejecución de la instrucción. El valor del parámetro CMD_HIS se pone al del
parámetro CMD.
● Si los parámetros O_FB y C_FB devuelven simultáneamente el estado lógico "1", los
estados lógicos de ambas salidas de alarma se ponen a "1".
La instrucción "Alarma de tiempo para control discreto" no devuelve información de error.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Alarma de tiempo para control
discreto":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CMD

Input

BOOL

I, Q, M, D, L

El estado lógico "0" da la or‐
den de "Cerrar".
El estado lógico "1" da la or‐
den de "Abrir".

O_FB

Input

Programación del PLC
Manual de programación y manejo, 11/2019

BOOL

I, Q, M, D, L

Entrada de realimentación al
abrir

5327

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

C_FB

Input

BOOL

I, Q, M, D, L

Entrada de realimentación al
cerrar

Q

Output

BOOL

I, Q, M, D, L

Indica el estado del paráme‐
tro CMD

OA

Output

BOOL

I, Q, M, D, L

Salida de alarma al abrir

CA

Output

BOOL

I, Q, M, D, L

Salida de alarma al cerrar

ET

Static

DINT

I, Q, M, D, L

Tiempo actual transcurrido;
un ciclo de reloj = 1 ms.

PT

Static

DINT

I, Q, M, D, L

Valor de tiempo predetermi‐
nado; un ciclo de reloj = 1 ms.

PREV_TIME

Static

DWORD

I, Q, M, D, L

Hora de sistema anterior

CMD_HIS

Static

BOOL

I, Q, M, D, L

Bit de evolución de CMD

Ejemplo
En el ejemplo siguiente, el parámetro CMD cambia de "0" a "1". Una vez ejecutada la
instrucción, el parámetro Q se pone a "1" y las dos salidas de alarma OA y CA se ponen a "0".
El parámetro CMD_HIS del bloque de datos de instancia se pone a "1" y el parámetro ET se
pone a "0".
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.

AWL

Explicación

CALL DCAT, "DCAT_DB"

// Se llama la instrucción y se crea el bloque de datos de instancia "DCAT_DB".

CMD := "Tag_Input_CMD"

// Abrir o cerrar el dispositivo

O_FB := "Tag_Input_O_FB"

// Realimentación al abrir

C_FB := "Tag_Input_C_FB"

// Realimentación al cerrar

Q := "Tag_Output_Q"

// Indica el estado del parámetro CMD

OA := "Tag_Output_OA"

// Salida de alarma al abrir

CA := "Tag_Output_CA"

// Salida de alarma al cerrar

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.

Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada y salida:
Parámetro

5328

Operando

Valor

CMD

Tag_Input_CMD

TRUE

O_FB

Tag_Input_O_FB

FALSE

C_FB

Tag_Input_C_FB

FALSE

Q

Tag_Output_Q

FALSE

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Operando

Valor

OA

Tag_Output_OA

FALSE

CA

Tag_Output_CA

FALSE

Los siguientes valores se almacenan en el bloque de datos de instancia "DCAT_DB" de la
instrucción:
Parámetro

Dirección

Valor

ET

DBD4

L#12

PT

DBD8

L#222

CMD_HIS

DBX16.0

FALSE

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Valor

Q

Tag_Output_Q

TRUE

OA

Tag_Output_OA

FALSE

CA

Tag_Output_CA

FALSE

Los siguientes valores se almacenan en el bloque de datos de instancia "DCAT_DB" de la
instrucción:
Parámetro

Dirección

Valor

ET

DBD4

L#0

CMD_HIS

DBX16.0

TRUE

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado (Página 186)
Bases de AWL (Página 8065)
Master Control Relay (Página 203)

MCAT: Alarma de tiempo para control del motor
Descripción
La instrucción "Alarma de tiempo para control del motor" acumula el tiempo desde el instante
en el que se activa una de las entradas de comando (abrir o cerrar). El tiempo se acumula hasta
que se excede el tiempo predeterminado o hasta que la entrada de realimentación
correspondiente indica que el dispositivo ha ejecutado la operación solicitada dentro del
tiempo prescrito. Si se excede el tiempo predeterminado antes de recibir realimentación, se
activa la alarma correspondiente.

Programación del PLC
Manual de programación y manejo, 11/2019

5329

Instrucciones
4.2 Instrucciones
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".

Ejecución de la instrucción "Alarma de tiempo para control del motor"
La tabla siguiente muestra las reacciones de la instrucción "Alarma de tiempo para control del
motor" a las distintas condiciones de entrada:
Parámetros de entrada

Parámetros de salida

ET

O_H
IS

C_H
IS

O_C
MD

C_C
MD

S_C
MD

O_F
B

C_F
B

OO

CO

OA

CA

ET

O_H
IS

C_HI Q
S

Estado

X

1

1

X

X

X

X

X

0

0

1

1

PT

0

0

0

Alarma

X

X

X

X

X

X

1

1

0

0

1

1

PT

0

0

0

Alarma

X

X

X

X

X

1

X

X

0

0

0

0

X

0

0

1

Stop

X

X

X

1

1

X

X

X

0

0

0

0

X

0

0

1

Stop

X

0

X

1

0

0

X

X

1

0

0

0

0

1

0

1

Empezar a
abrir

<PT

1

0

X

0

0

0

X

1

0

0

0

INC

1

0

1

Abrir

X

1

0

X

0

0

1

0

0

0

0

0

PT

1

0

1

Abierto

>=
PT

1

0

X

0

0

0

X

0

0

1

0

PT

1

0

0

Abrir alarma

X

X

0

0

1

0

X

X

0

1

0

0

0

0

1

1

Empezar a
cerrar

< PT 0

1

0

X

0

X

0

0

1

0

0

INC

0

1

1

Cerrar

X

0

1

0

X

0

0

1

0

0

0

0

PT

0

1

1

Cerrado

>=
PT

0

1

0

X

0

X

0

0

0

0

1

PT

0

1

0

Cerrar alar‐
ma

X

0

0

0

0

0

X

X

0

0

0

0

X

0

0

1

Parado

Leyenda:
INC

Sumar a ET la diferencia de tiempo (en ms) desde la última ejecución del FB

PT

PT se pone al mismo valor que ET

X

No aplicable

< PT

ET < PT

5330

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetros de entrada
>= PT

Parámetros de salida

ET >= PT

Si los parámetros de entrada O_HIS y C_HIS tienen el estado lógico "1", se ponen inmediatamente al estado lógico "0". En
este caso se aplica la última fila de la tabla mencionada más arriba (X). Puesto que por este motivo no es posible comprobar
si los parámetros de entrada O_HIS y C_HIS tienen el estado lógico "1", en este caso se asigna el siguiente valor a los
parámetros de salida:
OO = FALSE
CO = FALSE
OA = FALSE
CA = FALSE
ET = PT
Q = TRUE

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Alarma de tiempo para control del
motor":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

O_CMD

Input

BOOL

I, Q, M, D, L

Entrada de la orden "Abrir"

C_CMD

Input

BOOL

I, Q, M, D, L

Entrada de la orden "Cerrar"

S_CMD

Input

BOOL

I, Q, M, D, L

Entrada de la orden "Parar"

O_FB

Input

BOOL

I, Q, M, D, L

Entrada de realimentación al
abrir

C_FB

Input

BOOL

I, Q, M, D, L

Entrada de realimentación al
cerrar

OO

Output

BOOL

I, Q, M, D, L

Salida "Abrir"

CO

Output

BOOL

I, Q, M, D, L

Salida "Cerrar"

OA

Output

BOOL

I, Q, M, D, L

Salida de alarma al abrir

CA

Output

BOOL

I, Q, M, D, L

Salida de alarma al cerrar

Q

Output

BOOL

I, Q, M, D, L

El estado lógico "0" indica
una condición de error

ET

Static

DINT

I, Q, M, D, L

Tiempo actual transcurrido;
un ciclo de reloj = 1 ms

PT

Static

DINT

I, Q, M, D, L

Valor de tiempo predetermi‐
nado; un ciclo de reloj = 1 ms

PREV_TIME

Static

DWORD

I, Q, M, D, L

Hora de sistema anterior

O_HIS

Static

BOOL

I, Q, M, D, L

Bit de evolución "Abrir"

C_HIS

Static

BOOL

I, Q, M, D, L

Bit de evolución "Cerrar"

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5331

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.

AWL

Explicación

CALL MCAT, "MCAT_DB"

// Se llama la instrucción y se crea el bloque de datos de instancia "MCAT_DB".

O_CMD := "Tag_Input_O_CMD"

// Entrada de la orden "Abrir"

C_CMD := "Tag_Input_C_CMD"

// Entrada de la orden "Cerrar"

S_CMD := "Tag_Input_S_CMD"

// Entrada de la orden "Parar"

O_FB := "Tag_Input_O_FB"

// Realimentación al abrir

C_FB := "Tag_Input_C_FB"

// Realimentación al cerrar

OO := "Tag_OutputOpen"

// Salida "Abrir"

CO := "Tag_OutputClosed"

// Salida "Cerrar"

OA := "Tag_Output_OA"

// Salida de alarma al abrir

CA := "Tag_Output_CA"

// Salida de alarma al cerrar

Q := "Tag_Output_Q"

// Información de error

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.

Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada y salida:
Parámetro

Operando

Valor

O_CMD

Tag_Input_O_CMD

TRUE

C_CMD

Tag_Input_C_CMD

FALSE

S_CMD

Tag_Input_S_CMD

FALSE

O_FB

Tag_Input_O_FB

FALSE

C_FB

Tag_Input_C_FB

FALSE

OO

Tag_OutputOpen

FALSE

CO

Tag_OutputClosed

FALSE

OA

Tag_Output_OA

FALSE

CA

Tag_Output_CA

FALSE

Q

Tag_Output_Q

FALSE

Los siguientes valores se almacenan en el bloque de datos de instancia "MCAT_DB" de la
instrucción:

5332

Parámetro

Dirección

Valor

ET

DBD4

L#2

PT

DBD8

L#22

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Dirección

Valor

O_HIS

DBX16.0

TRUE

C_HIS

DBX16.1

FALSE

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Valor

OO

Tag_OutputOpen

TRUE

CO

Tag_OutputClosed

FALSE

OA

Tag_Output_OA

FALSE

CA

Tag_Output_CA

FALSE

Q

Tag_Output_Q

TRUE

Los siguientes valores se almacenan en el bloque de datos de instancia "MCAT_DB" de la
instrucción:
Parámetro

Dirección

Valor

ET

DBD4

L#0

O_HIS

DBX16.0

TRUE

CMD_HIS

DBX16.1

FALSE

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado (Página 186)
Bases de AWL (Página 8065)
Master Control Relay (Página 203)

IMC: Comparar bits de entrada con bits de una máscara
Descripción
La instrucción "Comparar bits de entrada con bits de una máscara" compara el estado lógico
de hasta 16 bits de entrada programados (IN_BIT0 a IN_BIT15) con el bit correspondiente de
una máscara. Es posible programar como máximo 16 pasos con máscaras. El valor del
parámetro IN_BIT0 se compara con el valor de la máscara CMP_VAL[x,0], siendo "x" el
número del paso. El número del paso de la máscara utilizada para la comparación se define en
el parámetro CMP_STEP. De esta misma manera se comparan todos los valores
programados. Los bits de entrada no programados o los bits no programados de la máscara
tienen el estado lógico predeterminado FALSE.
Si se encuentra una correspondencia al realizar la comparación, el estado lógico del parámetro
OUT se pone a "1". De lo contrario, el parámetro OUT se pone a "0".

Programación del PLC
Manual de programación y manejo, 11/2019

5333

Instrucciones
4.2 Instrucciones
Si el valor del parámetro CMP_STEP es mayor que 15, no se ejecuta la instrucción. En el
parámetro ERR_CODE se emite un mensaje de error.
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Comparar bits de entrada con bits
de una máscara":

5334

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN_BIT0

Input

BOOL

I, Q, M, D, L

El bit de entrada 0 se compa‐
ra con el bit 0 de la máscara.

IN_BIT1

Input

BOOL

I, Q, M, D, L

El bit de entrada 1 se compa‐
ra con el bit 1 de la máscara.

IN_BIT2

Input

BOOL

I, Q, M, D, L

El bit de entrada 2 se compa‐
ra con el bit 2 de la máscara.

IN_BIT3

Input

BOOL

I, Q, M, D, L

El bit de entrada 3 se compa‐
ra con el bit 3 de la máscara.

IN_BIT4

Input

BOOL

I, Q, M, D, L

El bit de entrada 4 se compa‐
ra con el bit 4 de la máscara.

IN_BIT5

Input

BOOL

I, Q, M, D, L

El bit de entrada 5 se compa‐
ra con el bit 5 de la máscara.

IN_BIT6

Input

BOOL

I, Q, M, D, L

El bit de entrada 6 se compa‐
ra con el bit 6 de la máscara.

IN_BIT7

Input

BOOL

I, Q, M, D, L

El bit de entrada 7 se compa‐
ra con el bit 7 de la máscara.

IN_BIT8

Input

BOOL

I, Q, M, D, L

El bit de entrada 8 se compa‐
ra con el bit 8 de la máscara.

IN_BIT9

Input

BOOL

I, Q, M, D, L

El bit de entrada 9 se compa‐
ra con el bit 9 de la máscara.

IN_BIT10

Input

BOOL

I, Q, M, D, L

El bit de entrada 10 se com‐
para con el bit 10 de la más‐
cara.

IN_BIT11

Input

BOOL

I, Q, M, D, L

El bit de entrada 11 se com‐
para con el bit 11 de la más‐
cara.

IN_BIT12

Input

BOOL

I, Q, M, D, L

El bit de entrada 12 se com‐
para con el bit 12 de la más‐
cara.

IN_BIT13

Input

BOOL

I, Q, M, D, L

El bit de entrada 13 se com‐
para con el bit 13 de la más‐
cara.

IN_BIT14

Input

BOOL

I, Q, M, D, L

El bit de entrada 14 se com‐
para con el bit 14 de la más‐
cara.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN_BIT15

Input

BOOL

I, Q, M, D, L

El bit de entrada 15 se com‐
para con el bit 15 de la más‐
cara.

CMP_STEP

Input

BYTE

I, Q, M, D, L, P o
constante

Número de paso de la más‐
cara con la que se compara.

OUT

Output

BOOL

I, Q, M, D, L

El estado lógico "1" indica
que se ha encontrado una
correspondencia.
El estado lógico "0" indica
que no se ha encontrado nin‐
guna correspondencia.

ERR_CODE

Output

WORD

I, Q, M, D, L, P

Información de error

CMP_VAL

Static

ARRAY of BOOL

I, Q, M, D, L

Máscaras de comparación [0
a 15, 0 a 15]: El primer núme‐
ro del índice es el número del
paso y, el segundo, el núme‐
ro de bit de la máscara.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

000A

El valor del parámetro CMP_STEP es mayor que 15.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización aquí: Cambiar
formatos de visualización en el estado del programa (Página 8529)

Ejemplo
En el ejemplo siguiente se comparan todos los 16 bits de entrada con la máscara para el paso
2. El estado lógico del parámetro OUT se pone a TRUE porque los bits de entrada concuerdan
con la máscara para el paso 2.
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.

AWL

Explicación

CALL IMC, "IMC_DB"

// Se llama la instrucción y se crea el bloque de datos de instancia "IMC_DB".

IN_BIT0 := "Tag_Input_BIT0"

// Bit de entrada 0

IN_BIT1 := "Tag_Input_BIT1"

// Bit de entrada 1

Programación del PLC
Manual de programación y manejo, 11/2019

5335

Instrucciones
4.2 Instrucciones
AWL

Explicación

IN_BIT2 := "Tag_Input_BIT2"

// Bit de entrada 2

IN_BIT3 := "Tag_Input_BIT3"

// Bit de entrada 3

IN_BIT4 := "Tag_Input_BIT4"

// Bit de entrada 4

IN_BIT5 := "Tag_Input_BIT5"

// Bit de entrada 5

IN_BIT6 := "Tag_Input_BIT6"

// Bit de entrada 6

IN_BIT7 := "Tag_Input_BIT7"

// Bit de entrada 7

IN_BIT8 := "Tag_Input_BIT8"

// Bit de entrada 8

IN_BIT9 := "Tag_Input_BIT9"

// Bit de entrada 9

IN_BIT10 := "Tag_Input_BIT10" // Bit de entrada 10
IN_BIT11 := "Tag_Input_BIT11" // Bit de entrada 11
IN_BIT12 := "Tag_Input_BIT12" // Bit de entrada 12
IN_BIT13 := "Tag_Input_BIT13" // Bit de entrada 13
IN_BIT14 := "Tag_Input_BIT14" // Bit de entrada 14
IN_BIT15 := "Tag_Input_BIT15" // Bit de entrada 15
CMP_STEP := "Tag_CMP_STEP"

// Número de paso de la máscara

OUT := "Tag_Output"

// Indica si se ha encontrado una correspondencia

ERR_CODE := "Tag_ErrorCode"

// Información de error

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.

Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada y salida:
Parámetro

5336

Operando

Valor

IN_BIT0

Tag_Input_BIT0

TRUE

IN_BIT1

Tag_Input_BIT1

TRUE

IN_BIT2

Tag_Input_BIT2

FALSE

IN_BIT3

Tag_Input_BIT3

TRUE

IN_BIT4

Tag_Input_BIT4

TRUE

IN_BIT5

Tag_Input_BIT5

FALSE

IN_BIT6

Tag_Input_BIT6

TRUE

IN_BIT7

Tag_Input_BIT7

TRUE

IN_BIT8

Tag_Input_BIT8

FALSE

IN_BIT9

Tag_Input_BIT9

TRUE

IN_BIT10

Tag_Input_BIT10

TRUE

IN_BIT11

Tag_Input_BIT11

FALSE

IN_BIT12

Tag_Input_BIT12

TRUE

IN_BIT13

Tag_Input_BIT13

TRUE

IN_BIT14

Tag_Input_BIT14

FALSE

IN_BIT15

Tag_Input_BIT15

TRUE

CMP_STEP

Tag_CMP_STEP

B#16#02

OUT

Tag_Output

FALSE

ERR_CODE

Tag_ErrorCode

W#16#0000

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
En el bloque de datos de instancia "IMC_DB" de la instrucción están almacenados los
siguientes valores para la máscara del paso 2:
Parámetro

Dirección

Valor

CMP_VAL [2,0]

DBX12.0

TRUE

CMP_VAL [2,1]

DBX12.1

TRUE

CMP_VAL [2,2]

DBX12.2

FALSE

CMP_VAL [2,3]

DBX12.3

TRUE

CMP_VAL [2,4]

DBX12.4

TRUE

CMP_VAL [2,5]

DBX12.5

FALSE

CMP_VAL [2,6]

DBX12.6

TRUE

CMP_VAL [2,7]

DBX12.7

TRUE

CMP_VAL [2,8]

DBX13.0

FALSE

CMP_VAL [2,0]

DBX13.1

TRUE

CMP_VAL [2,10]

DBX13.2

TRUE

CMP_VAL [2,11]

DBX13.3

FALSE

CMP_VAL [2,12]

DBX13.4

TRUE

CMP_VAL [2,13]

DBX13.5

TRUE

CMP_VAL [2,14]

DBX13.6

FALSE

CMP_VAL [2,15]

DBX13.7

TRUE

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Valor

OUT

Tag_Output

TRUE

ERR_CODE

Tag_ErrorCode

W#16#0000

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado (Página 186)
Bases de AWL (Página 8065)
Master Control Relay (Página 203)

Programación del PLC
Manual de programación y manejo, 11/2019

5337

Instrucciones
4.2 Instrucciones

SMC: Barrido de matriz
Descripción
La instrucción "Barrido de matriz" compara el estado lógico de hasta 16 bits de entrada
programados (IN_BIT0 a IN_BIT15) con los bits correspondientes de las máscaras de
comparación de cada paso. La ejecución empieza por el paso 1 y continúa hasta el último paso
programado (LAST) o hasta que se encuentre una correspondencia. El bit de entrada del
parámetro IN_BIT0 se compara con el valor de la máscara CMP_VAL[x,0], siendo "x" el
número de paso. De esta misma manera se comparan todos los valores programados. Si se
encuentra una correspondencia, el estado lógico del parámetro OUT se pone a "1" y el número
de paso se escribe con la máscara correspondiente en el parámetro OUT_STEP. Los bits de
entrada no programados o los bits no programados de la máscara tienen el estado lógico
predeterminado FALSE. Si varios pasos tienen una máscara equivalente, se indica solo la
primera correspondencia encontrada en el parámetro OUT_STEP. Si no se encuentra ninguna
correspondencia, el estado lógico del parámetro OUT se pone a "0". En este caso, el valor del
parámetro OUT_STEP excede en "1" el valor del parámetro LAST.
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Barrido de matriz":

5338

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN_BIT0

Input

BOOL

I, Q, M, D, L

El bit de entrada 0 se compa‐
ra con el bit 0 de la máscara.

IN_BIT1

Input

BOOL

I, Q, M, D, L

El bit de entrada 1 se compa‐
ra con el bit 1 de la máscara.

IN_BIT2

Input

BOOL

I, Q, M, D, L

El bit de entrada 2 se compa‐
ra con el bit 2 de la máscara.

IN_BIT3

Input

BOOL

I, Q, M, D, L

El bit de entrada 3 se compa‐
ra con el bit 3 de la máscara.

IN_BIT4

Input

BOOL

I, Q, M, D, L

El bit de entrada 4 se compa‐
ra con el bit 4 de la máscara.

IN_BIT5

Input

BOOL

I, Q, M, D, L

El bit de entrada 5 se compa‐
ra con el bit 5 de la máscara.

IN_BIT6

Input

BOOL

I, Q, M, D, L

El bit de entrada 6 se compa‐
ra con el bit 6 de la máscara.

IN_BIT7

Input

BOOL

I, Q, M, D, L

El bit de entrada 7 se compa‐
ra con el bit 7 de la máscara.

IN_BIT8

Input

BOOL

I, Q, M, D, L

El bit de entrada 8 se compa‐
ra con el bit 8 de la máscara.

IN_BIT9

Input

BOOL

I, Q, M, D, L

El bit de entrada 9 se compa‐
ra con el bit 9 de la máscara.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN_BIT10

Input

BOOL

I, Q, M, D, L

El bit de entrada 10 se com‐
para con el bit 10 de la más‐
cara.

IN_BIT11

Input

BOOL

I, Q, M, D, L

El bit de entrada 11 se com‐
para con el bit 11 de la más‐
cara.

IN_BIT12

Input

BOOL

I, Q, M, D, L

El bit de entrada 12 se com‐
para con el bit 12 de la más‐
cara.

IN_BIT13

Input

BOOL

I, Q, M, D, L

El bit de entrada 13 se com‐
para con el bit 13 de la más‐
cara.

IN_BIT14

Input

BOOL

I, Q, M, D, L

El bit de entrada 14 se com‐
para con el bit 14 de la más‐
cara.

IN_BIT15

Input

BOOL

I, Q, M, D, L

El bit de entrada 15 se com‐
para con el bit 15 de la más‐
cara.

OUT

Output

BOOL

I, Q, M, D, L

El estado lógico "1" indica
que se ha encontrado una
correspondencia.
El estado lógico "0" indica
que no se ha encontrado nin‐
guna correspondencia.

ERR_CODE

Output

WORD

I, Q, M, D, L, P

Información de error

OUT_STEP

Output

BYTE

I, Q, M, D, L, P

Contiene el número de paso
con la máscara correspon‐
diente o el número de paso
que excede en "1" el valor del
parámetro LAST, si no se ha
encontrado ninguna corres‐
pondencia.

LAST

Static

BYTE

I, Q, M, D, L, P

Indica el número del último
paso en que se tiene que
buscar una máscara corres‐
pondiente.

CMP_VAL

Static

ARRAY of WORD

I, Q, M, D, L

Máscaras de comparación [0
a 15, 0 a 15]: El primer núme‐
ro del índice es el número del
paso y, el segundo, el núme‐
ro de bit de la máscara.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5339

Instrucciones
4.2 Instrucciones

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

000E

El valor del parámetro LAST es mayor que 15.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización aquí: Cambiar
formatos de visualización en el estado del programa (Página 8529)

Ejemplo
En el ejemplo siguiente, todos los 16 bits de entrada se comparan con la máscara para los
pasos 0 a 5 hasta que se encuentre una correspondencia. Se consultan únicamente las
máscaras para los pasos 0 a 2, ya que la máscara para el paso 2 se corresponde con el bit de
entrada.
Nota
Los parámetros estáticos pueden inicializarse en el bloque.

AWL

Explicación

CALL SMC, "SMC_DB"

// Se llama la instrucción y se crea el bloque de datos de instancia "SMC_DB".

IN_BIT0 := "Tag_Input_BIT0"

// Bit de entrada 0

IN_BIT1 := "Tag_Input_BIT1"

// Bit de entrada 1

IN_BIT2 := "Tag_Input_BIT2"

// Bit de entrada 2

IN_BIT3 := "Tag_Input_BIT3"

// Bit de entrada 3

IN_BIT4 := "Tag_Input_BIT4"

// Bit de entrada 4

IN_BIT5 := "Tag_Input_BIT5"

// Bit de entrada 5

IN_BIT6 := "Tag_Input_BIT6"

// Bit de entrada 6

IN_BIT7 := "Tag_Input_BIT7"

// Bit de entrada 7

IN_BIT8 := "Tag_Input_BIT8"

// Bit de entrada 8

IN_BIT9 := "Tag_Input_BIT9"

// Bit de entrada 9

IN_BIT10 := "Tag_Input_BIT10" // Bit de entrada 10
IN_BIT11 := "Tag_Input_BIT11" // Bit de entrada 11
IN_BIT12 := "Tag_Input_BIT12" // Bit de entrada 12
IN_BIT13 := "Tag_Input_BIT13" // Bit de entrada 13
IN_BIT14 := "Tag_Input_BIT14" // Bit de entrada 14
IN_BIT15 := "Tag_Input_BIT15" // Bit de entrada 15
OUT := "Tag_Output"

// Indica si se ha encontrado una correspondencia.

OUT_STEP := "Tag_Output_STEP" // Contiene el número de paso con la máscara correspondiente.
ERR_CODE := "Tag_ErrorCode"

5340

// Información de error

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.

Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada y salida:
Parámetro

Operando

Valor

IN_BIT0

Tag_Input_BIT0

TRUE

IN_BIT1

Tag_Input_BIT1

TRUE

IN_BIT2

Tag_Input_BIT2

FALSE

IN_BIT3

Tag_Input_BIT3

TRUE

IN_BIT4

Tag_Input_BIT4

TRUE

IN_BIT5

Tag_Input_BIT5

FALSE

IN_BIT6

Tag_Input_BIT6

TRUE

IN_BIT7

Tag_Input_BIT7

TRUE

IN_BIT8

Tag_Input_BIT8

FALSE

IN_BIT9

Tag_Input_BIT9

TRUE

IN_BIT10

Tag_Input_BIT10

TRUE

IN_BIT11

Tag_Input_BIT11

FALSE

IN_BIT12

Tag_Input_BIT12

TRUE

IN_BIT13

Tag_Input_BIT13

TRUE

IN_BIT14

Tag_Input_BIT14

FALSE

IN_BIT15

Tag_Input_BIT15

TRUE

OUT

Tag_Output

FALSE

OUT_STEP

Tag_Output_STEP

B#16#00

ERR_CODE

Tag_ErrorCode

W#16#0000

En el bloque de datos de instancia "SMC_DB" de la instrucción están almacenados los
siguientes valores para la máscara del paso 2:
Parámetro

Dirección

Valor

CMP_VAL [2,0]

DBX12.0

TRUE

CMP_VAL [2,1]

DBX12.1

TRUE

CMP_VAL [2,2]

DBX12.2

FALSE

CMP_VAL [2,3]

DBX12.3

TRUE

CMP_VAL [2,4]

DBX12.4

TRUE

CMP_VAL [2,5]

DBX12.5

FALSE

CMP_VAL [2,6]

DBX12.6

TRUE

CMP_VAL [2,7]

DBX12.7

TRUE

CMP_VAL [2,8]

DBX13.0

FALSE

CMP_VAL [2,0]

DBX13.1

TRUE

CMP_VAL [2,10]

DBX13.2

TRUE

CMP_VAL [2,11]

DBX13.3

FALSE

CMP_VAL [2,12]

DBX13.4

TRUE

CMP_VAL [2,13]

DBX13.5

TRUE

Programación del PLC
Manual de programación y manejo, 11/2019

5341

Instrucciones
4.2 Instrucciones
Parámetro

Dirección

Valor

CMP_VAL [2,14]

DBX13.6

FALSE

CMP_VAL [2,15]

DBX13.7

TRUE

LAST

DB84

B#16#05

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Valor

OUT

Tag_Output

TRUE

OUT_STEP

Tag_Output_STEP

B#16#02

ERR_CODE

Tag_ErrorCode

W#16#0000

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado (Página 186)
Bases de AWL (Página 8065)
Master Control Relay (Página 203)

LEAD_LAG: Algoritmo Lead y Lag
Descripción
La instrucción "Algoritmo Lead y Lag" procesa señales con una variable analógica. El valor de
la ganancia en el parámetro GAIN debe ser mayor que cero. El resultado de la instrucción
"Algoritmo Lead y Lag" se calcula con la siguiente ecuación:
287

/*B7,0(
/'B7,0(6$03/(B7
/'B7,0(
,1*$,1
35(9B287*$,1
/*B7,0(6$03/(B7
/*B7,0(6$03/(B7
/*B7,0(6$03/(B7

35(9B,1

La instrucción "Algoritmo Lead y Lag" solo devuelve resultados relevantes cuando se ejecuta
en ciclos de programa fijos. Deben indicarse las mismas unidades en los parámetros
LD_TIME, LG_TIME y SAMPLE_T. Si LG_TIME > 4 + SAMPLE_T, la instrucción se aproxima
a la siguiente función:
OUT = GAIN * ((1 + LD_TIME * s) / (1 + LG_TIME * s)) * IN
Si el valor del parámetro GAIN es menor o igual a cero, no se realiza el cálculo y el parámetro
ERR_CODE devuelve una información de error.
La instrucción "Algoritmo Lead y Lag" puede utilizarse junto con bucles para la compensación
en el control anticipativo. La instrucción comprende dos operaciones. La operación "Lead"
desplaza la fase de la salida OUT, anticipándose la salida a la entrada. En cambio, la operación
"Lag" desplaza la salida, de manera que la salida sigue a la entrada. Puesto que la operación
"Lag" equivale a una integración, puede utilizarse como supresor de perturbaciones o filtro de

5342

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
paso bajo. La operación "Lead" equivale a una acción diferencial, por lo que puede utilizarse
como un filtro de paso alto. La combinación de ambas operaciones (Lead y Lag) hace que la
fase de salida siga a la entrada a bajas frecuencias y se le anticipe a altas frecuencias. Por este
motivo, la instrucción "Algoritmo Lead y Lag" puede utilizarse como si fuera un filtro de paso de
banda.
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Algoritmo Lead y Lag":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

REAL

I, Q, M, D, L, P o
constante

Valor de entrada del tiempo
de muestreo actual (tiempo
de ciclo) que se procesa.

SAMPLE_T

Input

INT

I, Q, M, D, L, P o
constante

Tiempo de muestreo

OUT

Output

REAL

I, Q, M, D, L, P

Resultado de la instrucción

ERR_CODE

Output

WORD

I, Q, M, D, L, P

Información de error

LD_TIME

Static

REAL

I, Q, M, D, L, P o
constante

Tiempo de anticipación en la
misma unidad que el tiempo
de muestreo.

LG_TIME

Static

REAL

I, Q, M, D, L, P o
constante

Tiempo de seguimiento en la
misma unidad que el tiempo
de muestreo.

GAIN

Static

REAL

I, Q, M, D, L, P o
constante

Ganancia en % / % (relación
del cambio en la salida con
respecto al cambio en la en‐
trada como estado constan‐
te).

PREV_IN

Static

REAL

I, Q, M, D, L, P o
constante

Entrada anterior

PREV_OUT

Static

REAL

I, Q, M, D, L, P o
constante

Salida anterior

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5343

Instrucciones
4.2 Instrucciones

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

0009

El valor del parámetro GAIN es menor o igual a cero.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización aquí: Cambiar
formatos de visualización en el estado del programa (Página 8529)

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.

AWL

Explicación

CALL LEAD_LAG, "LEAD_LAG_DB"

// Se llama la instrucción y se crea el bloque de datos de instancia "LEAD_LAG_DB".

IN := "Tag_Input"

// Valor de entrada del tiempo de muestreo actual
(tiempo de ciclo) que se procesa.

SAMPLE_T := "Tag_Input_SAMPE_T"

// Tiempo de muestreo

OUT := "Tag_Output_Result"

// Resultado de la instrucción

ERR_CODE := "Tag_ErrorCode"

// Información de error

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.

Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada:
Parámetro

Operando

Valor

IN

Tag_Input

2.0

SAMPLE_T

Tag_InputSampleTime

10

Los siguientes valores se almacenan en el bloque de datos de instancia "LEAD_LAG_DB" de
la instrucción:

5344

Parámetro

Dirección

Valor

LD_TIME

DBD12

2.0

LG_TIME

DBD16

2.0

GAIN

DBD20

1.0

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Dirección

Valor

PREV_IN

DBD24

6.0

PREV_OUT

DBD28

6.0

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Valor

OUT

Tag_Output_Result

2.0

Los siguientes valores se guardan en el bloque de datos de instancia "LEAD_LAD_DB" de la
instrucción:
Parámetro

Operando

Valor

PREV_IN

DBD24

2.0

PREV_OUT

DBD28

2.0

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado (Página 186)
Bases de AWL (Página 8065)
Master Control Relay (Página 203)

TONR_X: Acumulador de tiempo
Descripción
La instrucción "Acumulador de tiempo" acumula valores de tiempo dentro de un periodo
definido con ayuda de la entrada PV. La instrucción se ejecuta cuando el estado lógico de la
entrada de arranque TMR_EN cambia de "0" a "1". Simultáneamente, el temporizador cuenta
el tiempo programado en la entrada PV. Mientras se ejecuta la instrucción, añade el valor de
tiempo de la entrada DELTA_T al valor de tiempo de InOut ET.
Además, deben cumplirse las siguientes condiciones:
● La entrada de arranque TMR_EN devuelve el estado lógico "1".
● El valor de tiempo de InOut ET es menor que el valor de tiempo del parámetro PV.
● La entrada RESET devuelve el estado lógico "0".
La instrucción se interrumpe cuando el estado lógico de la entrada de arranque TMR_EN
cambia de "1" a "0". En cuanto el estado lógico cambia de nuevo a "1", la instrucción sigue
ejecutándose.
La instrucción finaliza cuando el valor de tiempo de InOut ET alcanza el valor de tiempo de la
entrada PV. Entonces, la salida Q devuelve el estado lógico "1".

Programación del PLC
Manual de programación y manejo, 11/2019

5345

Instrucciones
4.2 Instrucciones
Mientras la salida Q devuelva el estado lógico "1", el valor de tiempo de InOut ET no se
modificará. El valor de tiempo y la salida Q vuelven a ponerse a "0" solo cuando la entrada
RESET se pone al estado lógico "1".
Puesto que la instrucción "Acumulador de tiempo" utiliza el tiempo de ciclo (DELTA_T) del
último ciclo del bloque de organización (OB), la instrucción solo puede llamarse en bloques de
organización cíclicos.
Nota
El tiempo de ciclo del bloque de organización debe desplazarse desde la información de
arranque a la variable global del parámetro DELTA_T.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Acumulador de tiempo":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

TMR_EN (Ti‐
mer Enable)

Input

BOOL

I, Q, M, D, L

RESET

Input

BOOL

I, Q, M, D, L

Entrada de reset

PV (Preset
Value)

Input

DINT

I, Q, M, D, L, P o
constante

Tiempo máximo de lectura
del tiempo

DELTA_T

Input

INT

I, Q, M, D, L o
constante

Tiempo de ciclo del bloque
de organización del ciclo an‐
terior

Q

Output

BOOL

I, Q, M, D, L

Salida que se establece al al‐
canzar el valor de tiempo pre‐
determinado

ET (Elapsed
Time)

InOut

DINT

I, Q, M, D, L

Valor de tiempo acumulado

Entrada de arranque
Arranca la instrucción y la
temporización predetermina‐
da en la entrada PV

(Valor de tiempo transcurrido
actualmente + valor de tiem‐
po de la entrada DELTA_T)

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5346

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Acumulador de
tiempo":
705B(1

5(6(7

4

39

(7

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL TONR_X

// Se llama la instrucción.

TMR_EN := "Tag_Start"

// Entrada de arranque

RESET := "Tag_Reset"

// Entrada de inicialización

PV := 10

// Duración máxima del cronometraje

DELTA_T := 2

// Tiempo de ciclo del bloque de organización del ciclo anterior

ET := "Tag_Elapsed_Time"

// Tiempo acumulado

Q := "Tag_Output"

// Indica si se ha alcanzado el tiempo del parámetro
PV.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Añadir instrucciones AWL (Página 8079)

Programación del PLC
Manual de programación y manejo, 11/2019

5347

Instrucciones
4.2 Instrucciones
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

WSR: Guardar datos en el registro de desplazamiento
Descripción
La instrucción "Guardar datos en el registro de desplazamiento" escribe datos en un registro
de desplazamiento desde el origen indicado. Todo elemento del registro se desplaza a la
siguiente dirección. Los datos contenidos en la última dirección del registro de desplazamiento
se pierden tras la operación de desplazamiento.
Cada vez que la instrucción se ejecuta con el valor "0" en el parámetro RESET, se leen datos
nuevos del origen (S_DATA) y se desplazan a la dirección inicial (START) del registro de
desplazamiento. El parámetro LEN indica el número de elementos que deben desplazarse. El
tipo de datos de los elementos se define en el parámetro E_TYPE. Si se indica un tipo de datos
no admisible en el parámetro E_TYPE, no se procesa la instrucción.
Si el parámetro RESET está a "1" al ejecutarse la instrucción, se borra el registro. El parámetro
Q se pone al estado lógico "1" si el registro de desplazamiento está ocupado con ceros o si se
borra.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Guardar datos en el registro de
desplazamiento":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

RESET

Input

BOOL

I, Q, M, D, L

Entrada de reset

S_DATA

Input

POINTER

I, Q, M, D

Apunta al elemento de origen
que se desplaza a la direc‐
ción inicial (START).
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

START

Input

POINTER

I, Q, M, D

Apunta a la dirección inicial
del registro.
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

LEN

5348

Input

WORD

I, Q, M, D, L, P

Número de elementos que
deben desplazarse.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

E_TYPE

Input

BYTE

I, Q, M, D, L, P

Indica el tipo de datos de los
elementos que deben despla‐
zarse. Los siguientes tipos
de datos son admisibles:
● W#16#04 = WORD
● B#16#05 = INT
● B#16#06 = DWORD
● B#16#07 = DINT
● B#16#08 = REAL

Q

Output

BOOL

Q, M, D, L

Indica "1" si el parámetro RE‐
SET está activado (1) o si to‐
dos los elementos que deben
desplazarse tienen el valor
"0".

Ejemplo
En el ejemplo siguiente se desplazan cuatro elementos del tipo de datos WORD a partir de la
dirección indicada en el parámetro START. Una vez desplazado el primer elemento del
registro a la siguiente dirección, la primera dirección se ocupará con los datos a los que señala
el puntero en el parámetro S_DATA. El valor del último elemento del registro se pierde
entonces.
AWL

Explicación

CALL WSR

// Se llama la instrucción.

RESET := "Tag_Input_Reset"

// Entrada de inicialización

S_DATA := "Tag_Input_DataSource"

// Elemento de origen que se desplaza a la dirección
inicial.

START := "Tag_Input_StartAddress"

// Dirección inicial

LEN := "Tag_Input_LEN"

// Número de elementos que deben desplazarse

E_TYPE := "Tag_Input_ElementType"

// Tipo de datos de los elementos

Q := "Tag_Output_Q"

// Estado del registro

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.

Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada y salida:
Parámetro

Operando

Valor

RESET

Tag_Input_Reset

0

S_DATA

Tag_Input_SourceData

P#DB2.DBX6.0
DW6 = W#16#1234

Programación del PLC
Manual de programación y manejo, 11/2019

5349

Instrucciones
4.2 Instrucciones
Parámetro

Operando

Valor

START

Tag_Input_StartAddress

P#DB1.DBX0.0
DW0 = W#16#1111
DW2 = W#16#2222
DW4 = W#16#3333
DW6 = W#16#4444

LEN

Tag_Input_LEN

W#16#04

E_TYPE

Tag_Input_ElementType

W#16#04

Q

Tag_Output_Q

1

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Valor

RESET

Tag_Input_Reset

0

S_DATA

Tag_Input_SourceData

P#DB2.DBX6.0
DW6 = W#16#1234

START

Tag_Input_StartAddress

P#DB1.DBX0.0
DW0 = W#16#1234
DW2 = W#16#1111
DW4 = W#16#2222
DW6 = W#16#3333

LEN

Tag_Input_LEN

W#16#04

E_TYPE

Tag_Input_ElementType

B#16#04

Q

Tag_Output_Q

1

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

5350

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

SHRB: Desplazar bit al registro de desplazamiento
Descripción
La instrucción "Desplazar bit al registro de desplazamiento" escribe un bit en un registro de
desplazamiento desde el origen indicado (DATA). Cada vez que la instrucción se ejecuta con
el valor "0" en el parámetro RESET, se leen datos nuevos del origen y se desplazan a la
dirección inicial (S_BIT) del registro de desplazamiento. Los restantes bits se desplazan una
posición. El bit de la última dirección (S_BIT + N) se pierde tras el desplazamiento. Si el
parámetro RESET está a "1" mientras se ejecuta la instrucción, las direcciones del registro de
desplazamiento se ponen a "0" y no se desplazan.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desplazar bit al registro de
desplazamiento":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

DATA

Input

BOOL

I, Q, M, D, L

Bit de origen

RESET

Input

BOOL

I, Q, M, D, L

Entrada de reset

S_BIT

Input

POINTER

I, Q, M, D

Apunta al primer bit del regis‐
tro de desplazamiento.
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

N

Input

WORD

I, Q, M, D, L, P

Número de bits que deben
desplazarse.

Ejemplo
En el ejemplo siguiente, el parámetro N se pone al valor 14 ("E" en notación hexadecimal), con
lo que 14 bits se desplazan a partir de la dirección indicada en el parámetro S_BIT. Una vez
desplazados los bits, la primera dirección se ocupa con los datos del origen del parámetro
DATA. El último valor de bit se pierde.
AWL

Explicación

CALL SHRB

// Se llama la instrucción.

DATA := "Tag_Input_Data"

// Bit de origen que se desplaza a la dirección inicial.

RESET := "Tag_Input_Reset"

// Entrada de inicialización

S_BIT := "Tag_Input_BitSource"

// Dirección inicial

N := "Tag_Input_Number"

// Número de bits que deben desplazarse

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.

Programación del PLC
Manual de programación y manejo, 11/2019

5351

Instrucciones
4.2 Instrucciones

Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada y salida:
Parámetro

Operando

Valor

RESET

Tag_Input_Reset

0

DATA

Tag_Input_Data

0

S_BIT

Tag_Input_BitSource

P#DB1.DBX1.4

N

Tag_Input_Number

B#16#0E

Antes de ejecutarse la instrucción, los siguientes estados lógicos están almacenados en los 14
bits del registro:


























6B%,7







































Después de la ejecución
Una vez ejecutada la instrucción, los siguientes estados lógicos se almacenan en los 14 bits
del registro:


























6B%,7







































Consulte también
Vista general de los tipos de datos válidos (Página 241)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

5352

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

SEG: Generar patrón de bits para el display de 7 segmentos
Descripción
La instrucción "Generar patrón de bits para el display de 7 segmentos" convierte cada una de
las cuatro cifras hexadecimales de la palabra de origen indicada (IN) en un patrón de bits
equivalente para un display de 7 segmentos. El resultado de la instrucción se deposita en la
palabra doble del parámetro OUT.
Entre las cifras hexadecimales y la ocupación de los 7 segmentos (a, b, c, d, e, f, g) existe la
siguiente relación:
Cifra de en‐
trada
(binaria)
0000
0001
0010
0011
0100
0101
0110
0111
1000
1001
1010
1011
1100
1101
1110
1111

Ocupación de
los segmentos
‑gfedcba
00111111
00000110
01011011
01001111
01100110
01101101
01111101
00000111
01111111
01100111
01110111
01111100
00111001
01011110
01111001
01110001

Display
Display de siete segmentos
(hexadecimal)
0
1
2
3
4
5
6
7
8
9
A
B
C
D
E
F

D
I

E
J

H

F
G

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Generar patrón de bits para el
display de 7 segmentos":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

WORD

I, Q, M, D, L, P o
constante

Palabra de origen con cuatro
cifras hexadecimales

OUT

Output

DWORD

I, Q, M, D, L, P

Patrón de bits para el display
de 7 segmentos

Programación del PLC
Manual de programación y manejo, 11/2019

5353

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL SEG

// Se llama la instrucción.

IN := "Tag_Input"

// Palabra de origen

OUT := "Tag_Output"

// Patrón de bits para el display de 7 segmentos

La tabla siguiente muestra el funcionamiento de la instrucción con valores concretos:
Parámetro

Operando

Valor

Hexadecimal

Binario

IN

Tag_Input

W#16#1234

0001 0010 0011 0100

OUT

Tag_Output

DW#16#065B4F66

00000110 01011011 01001111
01100110
Visualización: 1234

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

BCDCPL: Generar complemento a diez
Descripción
La instrucción "Generar complemento a diez" crea el complemento a diez de un número BCD
de siete dígitos que se indica en el parámetro IN. La instrucción realiza el cálculo con la
siguiente fórmula matemática:
10000000 (como BCD)
– Valor BCD de 7 dígitos
---------------------------------------Complemento a diez (como BCD)

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Generar complemento a diez":

5354

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

DWORD

I, Q, M, D, L, P o
constante

Número BCD de 7 dígitos

ERR_CODE

Output

DWORD

I, Q, M, D, L, P

Resultado de la instrucción

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL BCDCPL

// Se llama la instrucción.

IN := "Tag_Input"

// Número BCD de 7 dígitos

ERR_CODE := "Tag_Output"

// Complemento a diez del número BCD indicado

La tabla siguiente muestra el funcionamiento de la instrucción con valores concretos:
Parámetro

Operando

Valor*

IN

Tag_Input

DW#16#01234567

ERR_CODE

Tag_Output

DW#16#08765433

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización aquí: Cambiar
formatos de visualización en el estado del programa (Página 8529)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado (Página 186)

BITSUM: Contar número de bits activados
Descripción
La instrucción "Contar número de bits activados" cuenta el número de bits de un operando que
están puestos al estado lógico "1". El operando cuyos bits se cuentan se especifica en el
parámetro IN. El resultado de la instrucción se devuelve en el parámetro RET_VAL.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contar número de bits activados":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

DWORD

I, Q, M, D, L, P o
constante

Operando cuyos bits activa‐
dos se cuentan.

RET_VAL

Output

INT

I, Q, M, D, L, P

Número de bits activados

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL BITSUM

// Se llama la instrucción.

IN := "Tag_Input"

// Operando cuyos bits activados se cuentan.

Programación del PLC
Manual de programación y manejo, 11/2019

5355

Instrucciones
4.2 Instrucciones
AWL

Explicación

RET_VAL := "Tag_Output"

// Número de bits activados del operando "Tag_Input"

La tabla siguiente muestra el funcionamiento de la instrucción con valores concretos:
Parámetro

Operando

Valor*

IN

Tag_Input

DW#16#12345678

RET_VAL

Tag_Output

W#16#000D (13 bits)

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización aquí: Cambiar
formatos de visualización en el estado del programa (Página 8529)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado (Página 186)
Bases de AWL (Página 8065)

AWL Mnemónica
Operaciones lógicas con bits
A: Operación lógica Y
Descripción
La instrucción "Operación lógica Y" consulta si el estado lógico de un operando binario es "1"
y combina el resultado lógicamente con Y con el estado lógico del resultado lógico (RLO). En
este caso, el resultado de la consulta es idéntico al estado lógico del operando consultado.
Una vez ejecutada la instrucción, el RLO es "1" si los dos estados lógicos combinados también
son "1". Si uno de los estados lógicos combinados es "0", el RLO será "0" tras ejecutar la
instrucción.
Si se aplica la instrucción varias veces consecutivas, todos los resultados de las consultas
deben ser "1" para que el resultado lógico común también sea "1".
Con la instrucción "Operación lógica Y" también es posible consultar el estado lógico de la
palabra de estado. Para ello se debe indicar el bit de estado en cuestión (==0, <>0, >0, <0, >=0,
<=0, OV, OS, UO, BR) como parámetro de la instrucción.

5356

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica Y":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, D, L, T, C

Operando cuyo estado lógico
se consulta.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
3URJUDPD$:/

(VTXHPDGHFRQH[LRQHVGHUHO«
%DUUDGHDOLPHQWDFLµQ

$

ಯ7DJB,QSXWBಯ

(VWDGROµJLFR

&RQWDFWR1$

$

ಯ7DJB,QSXWBಯ

(VWDGROµJLFR

&RQWDFWR1$

ಯ7DJB2XWSXWಯ

(VWDGROµJLFR

%RELQD

,QGLFDXQLQWHUUXSWRUFHUUDGR

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Consultar el bit de estado con instrucciones de operaciones lógicas con bits (Página 195)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Ejemplos de programación AWL (Página 8102)

AN: Operación lógica Y negada
Descripción
La instrucción "Operación lógica Y negada" consulta si el estado lógico de un operando binario
es "0" y combinar el resultado lógicamente con Y con el estado lógico del resultado lógico
(RLO). En este caso, el resultado de la consulta es el estado lógico negado del operando
consultado. Si el estado lógico del operando es "0", el resultado de la consulta es "1". Si el
estado lógico del operando es "1", el resultado de la consulta es "0".

Programación del PLC
Manual de programación y manejo, 11/2019

5357

Instrucciones
4.2 Instrucciones
Una vez ejecutada la instrucción, el RLO es "1" si el resultado de la consulta y el RLO antes de
ejecutar la instrucción devuelven el estado lógico "1".
Una vez ejecutada la instrucción, el RLO es "0" si el resultado de la consulta o el RLO antes de
ejecutar la instrucción devuelven el estado lógico "0".
Con la instrucción "Operación lógica Y negada" también es posible consultar el estado lógico
de la palabra de estado. Para ello se debe indicar el bit de estado en cuestión (==0, <>0, >0,
<0, >=0, <=0, OV, OS, UO, BR) como parámetro de la instrucción.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica Y negada":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, D, L, T, C

Operando cuyo estado lógico
se consulta.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
3URJUDPD$:/

(VTXHPDGHFRQH[LRQHVGHUHO«
%DUUDGHDOLPHQWDFLµQ

$

ಯ7DJB,QSXWBಯ

(VWDGROµJLFR

&RQWDFWR1$

$1

ಯ7DJB,QSXWBಯ

(VWDGROµJLFR

&RQWDFWR1&

ಯ7DJB2XWSXWಯ

(VWDGROµJLFR

%RELQD

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Consultar el bit de estado con instrucciones de operaciones lógicas con bits (Página 195)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Ejemplos de programación AWL (Página 8102)

5358

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

O: Operación lógica O
Descripción
La instrucción "Operación lógica O" consulta si el estado lógico de un operando binario es "1"
y combina el resultado lógicamente con O con el estado lógico del resultado lógico (RLO). En
este caso, el resultado de la consulta es idéntico al estado lógico del operando consultado.
Una vez ejecutada la instrucción, el RLO es "1" si uno de los estados lógicos combinados
también es "1". Si los dos estados lógicos combinados son "0", el RLO será "0" tras ejecutar la
instrucción.
Si se aplica la instrucción varias veces consecutivas, basta con que uno de los resultados de
las consultas sea "1" para que el resultado lógico común también sea "1".
Con la instrucción "Operación lógica O" también es posible consultar el estado lógico de la
palabra de estado. Para ello se debe indicar el bit de estado en cuestión (==0, <>0, >0, <0, >=0,
<=0, OV, OS, UO, BR) como parámetro de la instrucción.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica O":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, D, L, T, C

Operando cuyo estado lógico
se consulta.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
3URJUDPD$:/

(VTXHPDGHFRQH[LRQHVGHUHO«
%DUUDGHDOLPHQWDFLµQ

2

ಯ7DJB,QSXWBಯ

2

ಯ7DJB,QSXWBಯ

ಯ7DJB2XWSXWಯ

(VWDGROµJLFRFRQWDFWR1$
ಯ7DJB,QSXWBಯ

(VWDFROµJLFRFRQWDFWR1$
ಯ7DJB,QSXWBಯ

(VWDGROµJLFR

%RELQD

,QGLFDXQLQWHUUXSWRUFHUUDGR

Programación del PLC
Manual de programación y manejo, 11/2019

5359

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Consultar el bit de estado con instrucciones de operaciones lógicas con bits (Página 195)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Ejemplos de programación AWL (Página 8102)

ON: Operación lógica O negada
Descripción
La instrucción "Operación lógica O negada" consulta si el estado lógico de un operando binario
es "0" y combina el resultado lógicamente con O con el estado lógico del resultado lógico
(RLO). En este caso, el resultado de la consulta es el estado lógico negado del operando
consultado. Si el estado lógico del operando es "0", el resultado de la consulta es "1". Si el
estado lógico del operando es "1", el resultado de la consulta es "0".
Una vez ejecutada la instrucción, el RLO es "1" si el resultado de la consulta o el RLO antes de
ejecutar la instrucción devuelven el estado lógico "1". Si los dos estados lógicos combinados
son "0", el RLO también será "0" tras ejecutar la instrucción.
Si se aplica la instrucción varias veces consecutivas, basta con que uno de los resultados de
las consultas sea "1" para que el resultado lógico común también sea "1".
Con la instrucción "Operación lógica O negada" también es posible consultar el estado lógico
de la palabra de estado. Para ello se debe indicar el bit de estado en cuestión (==0, <>0, >0,
<0, >=0, <=0, OV, OS, UO, BR) como parámetro de la instrucción.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica O negada":

5360

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, D, L, T, C

Operando cuyo estado lógico
se consulta

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
3URJUDPD$:/

(VTXHPDGHFRQH[LRQHVGHUHO«V
%DUUDGHDOLPHQWDFLµQ

2

ಯ7DJB,QSXWBಯ

(VWDGROµJLFR

21

ಯ7DJB,QSXWBಯ

(VWDGROµJLFR

&RQWDFWR
QRUPDOPHQWH
FHUUDGR

(VWDGROµJLFR

%RELQD

ಯ7DJB2XWSXWಯ

&RQWDFWRQRUPDO
PHQWHDELHUWR

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Consultar el bit de estado con instrucciones de operaciones lógicas con bits (Página 195)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

X: Operación lógica O-exclusiva
Descripción
La instrucción "Operación lógica O-exclusiva" consulta si el estado lógico de un operando
binario es "1" y combinar el resultado lógicamente con O-exclusiva con el estado lógico del
resultado lógico (RLO). En este caso, el resultado de la consulta es idéntico al estado lógico del
operando consultado. Una vez ejecutada la instrucción, el RLO es "1" si los estados lógicos
combinados entre sí son distintos. El RLO es "0" si ambos estados lógicos son idénticos.
Si, p. ej., el RLO antes de ejecutar la instrucción es "1" y el operando consultado devuelve "1",
el RLO se pone a "0". Si el RLO es "1" y el operando devuelve el estado lógico "0", el RLO tras
ejecutar la instrucción se pondrá a "1".
Si se aplica la instrucción varias veces consecutivas, basta con que uno de los resultados de
las consultas sea "1" para que el RLO común también sea "1". Si todos los resultados son "1"
o "0", el RLO se pone a "0".
Con la instrucción "Operación lógica O-exclusiva" también es posible consultar el estado lógico
de la palabra de estado. Para ello se debe indicar el bit de estado en cuestión (==0, <>0, >0,
<0, >=0, <=0, OV, OS, UO, BR) como parámetro de la instrucción.
Programación del PLC
Manual de programación y manejo, 11/2019

5361

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica O-exclusiva":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, D, L, T, C

Operando cuyo estado lógico
se consulta.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
3URJUDPD$:/

(VTXHPDGHFRQH[LRQHVGHUHO«
%DUUDGHDOLPHQWDFLµQ

;

ಯ7DJB,QSXWBಯ

&RQWDFWR

;

ಯ7DJB,QSXWBಯ

&RQWDFWR

ಯ7DJB2XWSXWಯ

%RELQD

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Consultar el bit de estado con instrucciones de operaciones lógicas con bits (Página 195)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

XN: Operación lógica O-exclusiva negada
Descripción
La instrucción "Operación lógica O-exclusiva negada" consulta si el estado lógico de un
operando binario es "0" y combinar el resultado lógicamente con O con el estado lógico del
resultado lógico (RLO). En este caso, el resultado de la consulta es el estado lógico negado del
operando consultado. Una vez ejecutada la instrucción, el RLO es "1" si los estados lógicos
combinados entre sí son distintos. El RLO es "0" si ambos estados lógicos son idénticos.

5362

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Si, p. ej., el estado lógico del operando consultado es "0", el resultado de la consulta es "1". La
combinación lógica con O-exclusiva del resultado de la consulta y un RLO "1" devuelve el
estado lógico "0". La combinación con un RLO "0" devuelve el estado lógico "1".
Con la instrucción "Operación lógica O-exclusiva negada" también es posible consultar el
estado lógico de la palabra de estado. Para ello se debe indicar el bit de estado en cuestión
(==0, <>0, >0, <0, >=0, <=0, OV, OS, UO, BR) como parámetro de la instrucción.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica O-exclusiva
negada":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

BOOL

I, Q, M, D, L, T, C

Operando cuyo estado lógico
se consulta.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
3URJUDPD$:/

(VTXHPDGHFRQH[LRQHVGHUHO«
%DUUDGHDOLPHQWDFLµQ

;

ಯ7DJB,QSXWBಯ

&RQWDFWR

;1

ಯ7DJB,QSXWBಯ

&RQWDFWR

ಯ7DJB2XWSXWಯ

%RELQD

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Consultar el bit de estado con instrucciones de operaciones lógicas con bits (Página 195)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Programación del PLC
Manual de programación y manejo, 11/2019

5363

Instrucciones
4.2 Instrucciones

O: Operación lógica O de funciones Y
Descripción
La instrucción "Operación lógica O de funciones Y" ejecuta varias operaciones lógicas Y antes
de una operación lógica O. El resultado global de las operaciones lógicas Y se guarda y se
combina lógicamente con O con el resultado lógico (RLO) actual así como con otras posibles
consultas.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
3URJUDPD$:/

(VTXHPDGHFRQH[LRQHVGHUHO«
%DUUDGHDOLPHQWDFLµQ

$
$

ಯ7DJB,QSXWBಯ
ಯ7DJB,QSXWBಯ

2
$
$

ಯ7DJB,QSXWBಯ
ಯ7DJB,QSXWBಯ

2

ಯ7DJB,QSXWBಯ

ಯ7DJB,QSXWBಯ

ಯ7DJB,QSXWBಯ

ಯ7DJB,QSXWBಯ

ಯ7DJB,QSXWBಯ

ಯ7DJB2XWSXWಯ

ಯ7DJB,QSXWBಯ

ಯ7DJB2XWSXWಯ

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Consultar el bit de estado con instrucciones de operaciones lógicas con bits (Página 195)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

A(: Operación lógica Y con abrir paréntesis
Descripción
La instrucción "Operación lógica Y con abrir paréntesis" procesa las instrucciones de una
expresión entre paréntesis antes de una operación lógica Y.

5364

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Al ejecutar la instrucción, la CPU guarda el resultado lógico (RLO) actual así como el resultado
binario BR y el bit de estado OR. El RLO guardado se combina lógicamente con Y con el
resultado lógico de toda la expresión entre paréntesis. Si a la expresión entre paréntesis le
siguen otras consultas, también se combinan con la función Y.
Las expresiones entre paréntesis se anidan programando en ellas una instrucción que también
contenga una expresión entre paréntesis. La profundidad de anidamiento está limitada a 7
niveles.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
3URJUDPD$:/

(VTXHPDGHFRQH[LRQHVGHUHO«
%DUUDGHDOLPHQWDFLµQ

$
2
2

ಯ7DJB,QSXWBಯ
ಯ7DJB,QSXWBಯ

$
2
2

ಯ7DJB,QSXWBಯ
ಯ7DJB,QSXWBಯ

$

ಯ7DJB,QSXWBಯ

ಯ7DJB,QSXWBಯ

ಯ7DJB,QSXWBಯ

ಯ7DJB,QSXWBಯ

ಯ7DJB,QSXWBಯ

ಯ7DJB,QSXWBಯ

ಯ7DJB2XWSXWಯ

ಯ7DJB2XWSXWಯ

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Consultar el bit de estado con instrucciones de operaciones lógicas con bits (Página 195)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

AN(: Operación lógica Y negada con abrir paréntesis
Descripción
La instrucción "Operación lógica Y negada con abrir paréntesis" procesa las instrucciones de
una expresión entre paréntesis antes de una operación lógica Y y negar el resultado global de
la expresión entre paréntesis.

Programación del PLC
Manual de programación y manejo, 11/2019

5365

Instrucciones
4.2 Instrucciones
Al ejecutar la instrucción, la CPU guarda el resultado lógico (RLO) actual así como el resultado
binario BR y el bit de estado OR. Después de procesar las instrucciones que están en la
expresión entre paréntesis, el RLO de toda la expresión entre paréntesis se niega y se combina
lógicamente con Y con el RLO guardado. Si a la expresión entre paréntesis le siguen otras
consultas, también se combinan con la instrucción Y.
Las expresiones entre paréntesis se anidan programando en ellas una instrucción que también
contenga una expresión entre paréntesis. La profundidad de anidamiento está limitada a 7
niveles.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

AN(

// Principio de la expresión entre paréntesis
// Combinar lógicamente con Y el RLO de la expresión
entre paréntesis y negar el resultado global.

O "Tag_Input_1"

// Consultar si el estado lógico del operando es "1" y
combinar el resultado lógicamente con O con el RLO actual.

O "Tag_Input_2"

// Consultar si el estado lógico del operando es "1" y
combinar el resultado lógicamente con O con el RLO actual.

)

// Fin de la expresión entre paréntesis

AN "Tag_Input_3"

// Consultar si el estado lógico del operando es "0" y
combinar el resultado lógicamente con Y con el RLO actual.

= "Tag_Output"

// Asignar el estado lógico del RLO al operando.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Consultar el bit de estado con instrucciones de operaciones lógicas con bits (Página 195)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

O(: Operación lógica O con abrir paréntesis
Descripción
La instrucción "Operación lógica O con abrir paréntesis" procesa las instrucciones de una
expresión entre paréntesis antes de una operación lógica O.
Al ejecutar la instrucción, la CPU guarda el resultado lógico (RLO) actual así como el resultado
binario BR y el bit de estado OR. Después de procesar las instrucciones que están en la

5366

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
expresión entre paréntesis, el RLO guardado se combina lógicamente con O con el RLO de
toda la expresión entre paréntesis. Si a la expresión entre paréntesis le siguen otras consultas,
también se combinan con la instrucción O.
Las expresiones entre paréntesis se anidan programando en ellas una instrucción que también
contenga una expresión entre paréntesis. La profundidad de anidamiento está limitada a 7
niveles.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

A "Tag_Input_1"

// Consultar si el estado lógico del operando es "1" y
combinar el resultado lógicamente con Y con el RLO actual.

O(

// Principio de la expresión entre paréntesis
// Combinar lógicamente con O el RLO de la expresión
entre paréntesis.

A "Tag_Input_2"

// Consultar si el estado lógico del operando es "1" y
combinar el resultado lógicamente con Y con el RLO actual.

A "Tag_Input_3"

// Consultar si el estado lógico del operando es "1" y
combinar el resultado lógicamente con Y con el RLO actual.

)

// Fin de la expresión entre paréntesis

= "Tag_Output"

// Asignar el estado lógico del RLO al operando.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Consultar el bit de estado con instrucciones de operaciones lógicas con bits (Página 195)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

ON(: Operación lógica O negada con abrir paréntesis
Descripción
La instrucción "Operación lógica O negada con abrir paréntesis" procesa las instrucciones de
una expresión entre paréntesis antes de una operación lógica O y negar el resultado global de
la expresión entre paréntesis.
Al ejecutar la instrucción, la CPU guarda el resultado lógico (RLO) actual así como el resultado
binario BR y el bit de estado OR. Después de procesar las instrucciones que están en la
expresión entre paréntesis, el RLO de la expresión entre paréntesis se niega y se combina
Programación del PLC
Manual de programación y manejo, 11/2019

5367

Instrucciones
4.2 Instrucciones
lógicamente con O con el RLO guardado. Si a la expresión entre paréntesis le siguen otras
consultas, también se combinan con la instrucción O.
Las expresiones entre paréntesis se anidan programando en ellas una instrucción que también
contenga una expresión entre paréntesis. La profundidad de anidamiento está limitada a 7
niveles.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

A "Tag_Input_1"

// Consultar si el estado lógico del operando es "1" y
combinar el resultado lógicamente con Y con el RLO actual.

ON(

// Principio de la expresión entre paréntesis
// Combinar lógicamente con O el RLO de la expresión
entre paréntesis y negar el resultado global.

A "Tag_Input_2"

// Consultar si el estado lógico del operando es "1" y
combinar el resultado lógicamente con Y con el RLO actual.

A "Tag_Input_3"

// Consultar si el estado lógico del operando es "1" y
combinar el resultado lógicamente con Y con el RLO actual.

)

// Fin de la expresión entre paréntesis

= "Tag_Output"

// Asignar el estado lógico del RLO al operando.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Consultar el bit de estado con instrucciones de operaciones lógicas con bits (Página 195)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

X(: Operación lógica O-exclusiva con abrir paréntesis
Descripción
La instrucción "Operación lógica O-exclusiva con abrir paréntesis" procesa las instrucciones
de una expresión entre paréntesis antes de una operación lógica O-exclusiva.
Al ejecutar la instrucción, la CPU guarda el resultado lógico (RLO) actual así como el resultado
binario BR y el bit de estado OR. Después de procesar las instrucciones que están en la
expresión entre paréntesis, el RLO guardado se combina lógicamente con O-exclusiva con el
RLO de toda la expresión entre paréntesis. Si a la expresión entre paréntesis le siguen otras
consultas, también se combinan con la función O-exclusiva.

5368

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Las expresiones entre paréntesis se anidan programando en ellas una instrucción que también
contenga una expresión entre paréntesis. La profundidad de anidamiento está limitada a 7
niveles.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

X(

// Principio de la expresión entre paréntesis
// Combinar lógicamente con O-exclusiva el RLO de la
expresión entre paréntesis.

A "Tag_Input_1"

// Consultar si el estado lógico del operando es "1" y
combinar el resultado lógicamente con Y con el RLO actual.

A "Tag_Input_2"

// Consultar si el estado lógico del operando es "1" y
combinar el resultado lógicamente con Y con el RLO actual.

)

// Fin de la expresión entre paréntesis

X "Tag_Input_3"

// Consultar si el estado lógico del operando es "1" y
combinar el resultado lógicamente con Y con el RLO actual.

= "Tag_Output"

// Asignar el estado lógico del RLO al operando.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Consultar el bit de estado con instrucciones de operaciones lógicas con bits (Página 195)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

XN(: Operación lógica O-exclusiva negada con abrir paréntesis
Descripción
La instrucción "Operación lógica O-exclusiva negada con abrir paréntesis" procesa las
instrucciones de una expresión entre paréntesis antes de una operación lógica O-exclusiva y
negar el resultado global de la expresión entre paréntesis.
Al ejecutar la instrucción, la CPU guarda el resultado lógico (RLO) actual así como el resultado
binario BR y el bit de estado OR. Después de procesar las instrucciones que están en la
expresión entre paréntesis, el RLO de la expresión entre paréntesis se niega y se combina
lógicamente con O-exclusiva con el RLO guardado. Si a la expresión entre paréntesis le siguen
otras consultas, también se combinan con la función O-exclusiva.

Programación del PLC
Manual de programación y manejo, 11/2019

5369

Instrucciones
4.2 Instrucciones
Las expresiones entre paréntesis se anidan programando en ellas una instrucción que también
contenga una expresión entre paréntesis. La profundidad de anidamiento está limitada a 7
niveles.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

XN(

// Principio de la expresión entre paréntesis
// Combinar lógicamente con O-exclusiva el RLO de la
expresión entre paréntesis y negar el resultado global.

A "Tag_Input_1"

// Consultar si el estado lógico del operando es "1" y
combinar el resultado lógicamente con Y con el RLO actual.

A "Tag_Input_2"

// Consultar si el estado lógico del operando es "1" y
combinar el resultado lógicamente con Y con el RLO actual.

)

// Fin de la expresión entre paréntesis

XN "Tag_Input_3"

// Consultar si el estado lógico del operando es "1" y
combinar el resultado lógicamente con Y con el RLO actual.

= "Tag_Output"

// Asignar el estado lógico del RLO al operando.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Consultar el bit de estado con instrucciones de operaciones lógicas con bits (Página 195)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

): Cerrar paréntesis
Descripción
La instrucción "Cerrar paréntesis" determina el final de una expresión entre paréntesis. Tras
ejecutar la instrucción, el resultado global de la expresión entre paréntesis se combina
lógicamente con la instrucción que se ha utilizado para abrir la expresión entre paréntesis.
Para abrir una expresión entre paréntesis se utilizan las instrucciones siguientes:
● A(: Operación lógica Y con abrir paréntesis
● AN(: Operación lógica Y negada con abrir paréntesis
● O(: Operación lógica O con abrir paréntesis

5370

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
● ON(: Operación lógica O negada con abrir paréntesis
● X(: Operación lógica O-exclusiva con abrir paréntesis
● XN(: Operación lógica O-exclusiva negada con abrir paréntesis
Después de la instrucción "Cerrar paréntesis", la CPU pone el resultado binario BR al estado
lógico que tenía antes de la expresión entre paréntesis.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
3URJUDPD$:/

(VTXHPDGHFRQH[LRQHVGHUHO«
%DUUDGHDOLPHQWDFLµQ

$
2
2

ಯ7DJB,QSXWBಯ
ಯ7DJB,QSXWBಯ

$
2
2

ಯ7DJB,QSXWBಯ
ಯ7DJB,QSXWBಯ

$

ಯ7DJB,QSXWBಯ

ಯ7DJB,QSXWBಯ

ಯ7DJB,QSXWBಯ

ಯ7DJB,QSXWBಯ

ಯ7DJB,QSXWBಯ

ಯ7DJB,QSXWBಯ

ಯ7DJB2XWSXWಯ

ಯ7DJB2XWSXWಯ

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Consultar el bit de estado en AWL (Página 195)

=: Asignación
Descripción
La instrucción "Asignación" asigna a un operando concreto el estado lógico del resultado
lógico (RLO) guardado en la CPU. Si el RLO tiene el estado lógico "1", se activa el operando.
Si el estado lógico de la entrada es "0", el operando se pone a "0".

Programación del PLC
Manual de programación y manejo, 11/2019

5371

Instrucciones
4.2 Instrucciones
La ejecución de la instrucción "Asignación" se ve influida por el Master Control Relay (MCR).
Si el bit MCR se pone a "0", el operando indicado adopta el valor "0".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Asignación":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Output

BOOL

I, Q, M, D, L

Operando al que se asigna el
RLO actual.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
3URJUDPD$:/
$

(VTXHPDGHFRQH[LRQHVGHUHO«
%DUUDGHDOLPHQWDFLµQ

ಯ7DJB,QSXWಯ
ಱ7DJB2XWSXWಯ

ಯ7DJB,QSXWಯ

'LDJUDPDVGHHVWDGRVOµJLFRV
ಯ7DJB,QSXWಯ




ಯ7DJB2XWSXWಯ






ಯ7DJB2XWSXWಯ

Consulte también
Vista general de los tipos de datos válidos (Página 241)
El MCR (Master Control Relay) (Página 203)
Indicaciones importantes sobre el uso de la función MCR (Página 204)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Ejemplos de programación AWL (Página 8102)

R: Desactivar
Descripción
La instrucción "Desactivar" pone a "0" el estado lógico de un operando concreto.

5372

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La instrucción solo se ejecuta si el resultado lógico (RLO) actual es "1". Tras ejecutar la
instrucción, el operando indicado se pone a "0". Si el RLO actual es "0", el estado lógico del
operando indicado no cambia.
La ejecución de la instrucción "Desactivar" se ve influida por el Master Control Relay (MCR).
Si el bit MCR está puesto a "0", el estado lógico del operando indicado no cambia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desactivar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Output

BOOL

I, Q, M, D, L

Operando que se desactiva
si el RLO = "1".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

A "Tag_Input_1"

// Consultar si el estado lógico del operando es "1" y
combinar el resultado lógicamente con Y con el RLO actual.

A "Tag_Input_2"

// Consultar si el estado lógico del operando es "1" y
combinar el resultado lógicamente con Y con el RLO actual.

R "Tag_Output"

// Poner el operando a "0" si el RLO = "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
El MCR (Master Control Relay) (Página 203)
Indicaciones importantes sobre el uso de la función MCR (Página 204)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Ejemplos de programación AWL (Página 8102)

S: Activar
Descripción
La instrucción "Activar" pone a "1" el estado lógico de un operando concreto.

Programación del PLC
Manual de programación y manejo, 11/2019

5373

Instrucciones
4.2 Instrucciones
La instrucción solo se ejecuta si el resultado lógico (RLO) actual es "1". Tras ejecutar la
instrucción, el operando indicado se pone a "1". Si el RLO actual es "0", el estado lógico del
operando indicado no cambia.
La ejecución de la instrucción "Activar" se ve influida por el Master Control Relay (MCR). Si el
bit MCR está puesto a "0", el estado lógico del operando indicado no cambia.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Activar":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Output

BOOL

I, Q, M, D, L

Operando que se activa si el
RLO = "1".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

A "Tag_Input_1"

// Consultar si el estado lógico del operando es "1" y
combinar el resultado lógicamente con Y con el RLO actual.

A "Tag_Input_2"

// Consultar si el estado lógico del operando es "1" y
combinar el resultado lógicamente con Y con el RLO actual.

S "Tag_Output"

// Poner el operando a "1" si el RLO = "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
El MCR (Master Control Relay) (Página 203)
Indicaciones importantes sobre el uso de la función MCR (Página 204)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Ejemplos de programación AWL (Página 8102)

NOT: Invertir RLO
Descripción
La instrucción "Invertir RLO" invierte el estado lógico del resultado lógico (RLO). La instrucción
"Invertir RLO" puede aplicarse en cualquier posición, incluso dentro de una operación lógica.

5374

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

A "Tag_Input_1"

// Consultar si el estado lógico del operando "Tag_Input_1" es "1" y combinar el resultado lógicamente con
Y con el RLO actual.

A "Tag_Input_2"

// Consultar si el estado lógico del operando "Tag_Input_2" es "1" y combinar el resultado lógicamente con
Y con el RLO actual.

A "Tag_Input_3"

// Consultar si el estado lógico del operando "Tag_Input_3" es "1" y combinar el resultado lógicamente con
Y con el RLO actual.

NOT

// Invertir el estado lógico del RLO

= "Tag_Output"

// Asignar el estado lógico del RLO al operando
"Tag_Output".

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Input_1

1

1

1

0

0

0

1

0

Tag_Input_2

0

1

1

0

1

1

0

1

Tag_Input_3

0

0

1

0

0

1

1

1

Tag_Output

1

1

0

1

1

1

1

1

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

SET: Poner RLO a 1
Descripción
La instrucción "Poner RLO a 1" pone el resultado lógico (RLO) actual al estado lógico "1".

Programación del PLC
Manual de programación y manejo, 11/2019

5375

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
3URJUDPD$:/

(VWDGROµJLFR

5HVXOWDGROµJLFR 5/2

6(7

ಯ7DJB2XWSXWBಯ
ಯ7DJB2XWSXWBಯ
ಯ7DJB2XWSXWBಯ







&/5

ಯ7DJB2XWSXWBಯ
ಯ7DJB2XWSXWBಯ






Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en operaciones lógicas con bits (Página 186)

CLR: Poner RLO a 0
Descripción
La instrucción "Poner RLO a 0" pone el resultado lógico (RLO) actual al estado lógico "0".

5376

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
3URJUDPD$:/

(VWDGROµJLFR

5HVXOWDGROµJLFR 5/2

6(7

ಯ7DJB2XWSXWBಯ
ಯ7DJB2XWSXWBಯ
ಯ7DJB2XWSXWBಯ







&/5

ಯ7DJB2XWSXWBಯ
ಯ7DJB2XWSXWBಯ






Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

SAVE: Guardar RLO en bit BR
Descripción
La instrucción "Guardar RLO en bit BR" guarda el resultado lógico (RLO) en el resultado binario
(BR). Durante la ejecución, la instrucción transfiere el estado lógico del resultado lógico actual
al bit de estado BR. La instrucción trabaja independientemente de las condiciones y no influye
en ningún otro bit de estado.
Nota
Tras aplicar la instrucción "Guardar RLO en bit BR", el bit BR puede ser modificado
nuevamente por instrucciones posteriores del mismo bloque o de bloques de nivel inferior.
La instrucción "Guardar RLO en bit BR" también se utiliza para controlar el estado de ejecución
de un bloque. Si, p. ej., la instrucción "Guardar RLO en bit BR" se aplica al final de un bloque,
el bit BR se pone al estado lógico del resultado lógico actual del bloque.
El bit BR ayuda a la realización del mecanismo EN/ENO en llamadas de bloques. Encontrará
más información al respecto en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5377

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

A "Tag_Input"

// Consultar si el estado lógico del operando "Tag_Input" es "1".

SAVE

// Transferir el estado lógico del RLO al bit BR.

BEC

// Si el RLO = "1", finalizar el bloque.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Ejemplo de la emulación del mecanismo EN/ENO en AWL (Página 165)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

FN: Consultar flanco de señal descendente del RLO
Descripción
La instrucción "Consultar flanco de señal descendente del RLO" permite detectar si el estado
lógico del resultado lógico (RLO) ha cambiado de "1" a "0". La instrucción compara el estado
lógico actual del RLO con el estado lógico de la consulta anterior, que está guardado en la
marca de flancos <Operando>. Si la instrucción detecta un cambio del RLO de "1" a "0",
significa que hay un flanco de señal descendente.
La figura siguiente muestra el cambio del RLO en caso de flanco de señal descendente y
ascendente:
)ODQFRGHVH³DODVFHQGHQWH

)ODQFRGHVH³DOGHVFHQGHQWH

5/2



7HPSRUL]DGRU

El flanco de señal descendente se consulta cada vez que se ejecuta la instrucción. Si se
detecta un flanco de señal descendente, tras la evaluación del flanco el RLO adopta el estado

5378

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
lógico "1" durante un ciclo del programa. En todos los demás casos, el estado lógico del RLO
es "0".
Nota
Uso de la dirección de la marca de flancos
La dirección de la marca de flancos no se puede utilizar más de una vez en el programa, puesto
que, de lo contrario, se sobrescribe el bit de marcas. Esto influye negativamente en la
evaluación de flancos, de manera que el resultado deja de ser unívoco. El área de memoria de
la marca de flancos debe estar en un bloque de datos (área 'Static' de FB) o en el área de
marcas.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar flanco de señal
descendente del RLO":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Output

BOOL

I, Q, M, D, L

Marca de flancos en la que
se almacena el RLO de la
consulta anterior.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
3URJUDPD$:/

'LDJUDPDVGHHVWDGRVOµJLFRV

ಯ7DJB,QSXWಯ

ಯ7DJB,QSXWಯ




)1 ಯ7DJB(GJHಯ

ಯ7DJB(GJHಯ




ಯ7DJB2XWSXWಯ




$

ಯ7DJB2XWSXWಯ
1|GHFLFORGHO2%



















Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en operaciones lógicas con bits (Página 186)

Programación del PLC
Manual de programación y manejo, 11/2019

5379

Instrucciones
4.2 Instrucciones
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

FP: Consultar flanco de señal ascendente del RLO
Descripción
La instrucción "Consultar flanco de señal ascendente del RLO" permite detectar si el estado
lógico del resultado lógico (RLO) ha cambiado de "0" a "1". La instrucción compara el estado
lógico actual del RLO con el estado lógico de la consulta anterior, que está guardado en la
marca de flancos <Operando>. Si la instrucción detecta un cambio del RLO de "0" a "1",
significa que hay un flanco de señal ascendente.
La figura siguiente muestra el cambio del RLO en caso de flanco de señal descendente y
ascendente:
)ODQFRGHVH³DODVFHQGHQWH

)ODQFRGHVH³DOGHVFHQGHQWH

5/2



7HPSRUL]DGRU

El flanco de señal ascendente se consulta cada vez que se ejecuta la instrucción. Si se detecta
un flanco de señal ascendente, tras la evaluación del flanco el RLO adopta el estado lógico "1"
durante un ciclo del programa. En todos los demás casos, el estado lógico del RLO es "0".
Nota
Uso de la dirección de la marca de flancos
La dirección de la marca de flancos no se puede utilizar más de una vez en el programa, puesto
que, de lo contrario, se sobrescribe el bit de marcas. Esto influye negativamente en la
evaluación de flancos, de manera que el resultado deja de ser unívoco. El área de memoria de
la marca de flancos debe estar en un bloque de datos (área 'Static' de FB) o en el área de
marcas.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Consultar flanco de señal
ascendente del RLO":

5380

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Output

BOOL

I, Q, M, D, L

Marca de flancos en la que
se almacena el RLO de la
consulta anterior.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
3URJUDPD$:/

'LDJUDPDVGHHVWDGRVOµJLFRV

ಯ7DJB,QSXWಯ

ಯ7DJB,QSXWಯ




)3 ಯ7DJB(GJHಯ

ಯ7DJB(GJHಯ




ಯ7DJB2XWSXWಯ




$

ಯ7DJB2XWSXWಯ
1|GHFLFORGHO2%



















Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en operaciones lógicas con bits (Página 186)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Ejemplos de programación AWL (Página 8102)

Temporizadores
FR: Habilitar temporizador
Descripción
La instrucción "Habilitar temporizador" provoca el rearranque de un temporizador. La
instrucción se ejecuta con un flanco de señal ascendente y desactiva la marca de flancos
interna para arrancar un temporizador. Al procesar una instrucción para arrancar el
temporizador con un resultado lógico "1", el temporizador arranca de nuevo, aunque no haya
ningún flanco de señal ascendente antes de la instrucción de arranque. Si el resultado lógico
es "0" antes de una instrucción de arranque, la desactivación de la marca de flancos interna no
influye en el temporizador.
Un cambio del resultado lógico a "0" antes de la instrucción "Habilitar temporizador" no tiene
repercusión una vez rearrancado el temporizador.

Programación del PLC
Manual de programación y manejo, 11/2019

5381

Instrucciones
4.2 Instrucciones
En el acumulador 1 debe haber un valor de tiempo válido en formato S5TIME, aunque al
procesar una función de arranque no se inicie el temporizador.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Habilitar temporizador":
Operando

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

Input

TIMER

T

Temporizador que se habilita

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

5382

AWL

Explicación

A "Tag_EnableInput"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

FR "MyTimer"

// Habilitar temporizador con un flanco de señal ascendente.

A "Tag_StartInput"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

L S5T#10s

// Cargar tiempo (10 s)

SP "MyTimer"

// Arrancar temporizador como impulso cuando haya un
flanco de señal ascendente en el operando "Tag_StartInput" o en el operando "Tag_EnableInput" y el operando "Tag_StartInput" devuelva el estado lógico "1".

A "Tag_Reset"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

R "MyTimer"

// Si el RLO es "1", inicializar temporizador.

A "MyTimer"

// Consultar si el estado del temporizador es "1".

= "Tag_TimerStatus"

// Asignar el estado del temporizador al operando.

L "MyTimer"

// Cargar el valor actual del temporizador en el acumulador 1.

T "Tag_TimerValue"

// Transferir el valor actual del temporizador al operando "Tag_TimerValue".

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Activar el bit de estado en instrucciones de temporización y contaje (Página 188)
Principios básicos de la palabra de estado (Página 184)
L: Cargar valor del temporizador (Página 5383)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

L: Cargar valor del temporizador
Descripción
La instrucción "Cargar valor del temporizador" carga el valor de un temporizador concreto en
el acumulador 1. El valor del temporizador en código dual se carga sin base de tiempo. En lugar
de la base de tiempo se escriben ceros en el acumulador 1.
Después de la carga, el valor que está en el acumulador 1 equivale a un número positivo del
tipo de datos INT.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
La figura siguiente muestra, a modo de ejemplo, cómo se carga en valor del temporizador en
el acumulador:
3DODEUDGH
WHPSRUL]DGRUSDUD
HOWHPSRUL]DGRU7
HQODPHPRULD

&RQWHQLGRGHOD
SDODEUDGHUHFKD
GHO
DFXPXODGRU
GHVSX«VGHOD
LQVWUXFFLµQ /7

Programación del PLC
Manual de programación y manejo, 11/2019

   

%DVHGHWLHPSR
 PV
 PV
 V
 V

9DORUGHWLHPSR D 
FRGLILFDGRHQELQDULR
/7

   
7RGRVಯಯ





9DORUGHWLHPSR D FRGLILFDGRHQ
ELQDULR

5383

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Cargar valor del temporizador":
Operando

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

Input

TIMER

T

Temporizador cuyo valor ac‐
tual se carga

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

A "Tag_EnableInput"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

FR "MyTimer"

// Habilitar temporizador con un flanco de señal ascendente.

A "Tag_StartInput"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

L S5T#10s

// Cargar tiempo (10 s)

SP "MyTimer"

// Arrancar temporizador como impulso cuando haya un
flanco de señal ascendente en el operando "Tag_StartInput" o en el operando "Tag_EnableInput" y el operando "Tag_StartInput" devuelva el estado lógico "1".

A "Tag_Reset"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

R "MyTimer"

// Si el RLO es "1", inicializar temporizador.

A "MyTimer"

// Consultar si el estado del temporizador es "1".

= "Tag_TimerStatus"

// Asignar el estado del temporizador al operando.

L "MyTimer"

// Cargar el valor actual del temporizador en el acumulador 1.

T "Tag_TimerValue"

// Transferir el valor actual del temporizador al operando "Tag_TimerValue".

Consulte también
Activar el bit de estado en instrucciones de temporización y contaje (Página 188)
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

5384

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

LC: Cargar valor del temporizador codificado en BCD
Descripción
La instrucción "Cargar valor del temporizador codificado en BCD" carga el valor de un
temporizador concreto en código dual en el acumulador 1 en formato BCD. Durante la carga
también se transfiere la base de tiempo al acumulador 1.
Después de la carga, el valor que está en el acumulador 1 equivale a una duración en formato
S5TIME. La palabra izquierda del acumulador 1 se rellena con ceros.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
La figura siguiente muestra cómo se carga en valor del temporizador en el acumulador:
3DODEUDGHWHPSRUL]
DGRUSDUDHO
WHPSRUL]DGRU7
HQODPHPRULD

   

%DVHGHWLHPSR
 PV
 PV
 V
 V



9DORUGHWLHPSR  
HQFRGLILFDFLµQELQDULD
/&7
%LQDULRHQ%&'

&RQWHQLGRGHOD
SDODEUDGHUHFKDGHO  
DFXPXODGRU
   
GHVSX«VGHOD
LQVWUXFFLµQ
 FHQWHQDV
GHFHQDV
/&7


 XQLGDGHV

9DORUGHWLHPSRHQIRUPDWR%&'

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Cargar valor del temporizador
codificado en BCD":
Operando

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

Input

TIMER

T

Temporizador cuyo valor ac‐
tual se carga codificado en
BCD

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5385

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

A "Tag_EnableInput"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

FR "MyTimer"

// Habilitar temporizador con un flanco de señal ascendente.

A "Tag_StartInput"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

L S5T#10s

// Cargar tiempo (10 s)

SP "MyTimer"

// Arrancar temporizador como impulso cuando haya un
flanco de señal ascendente en el operando "Tag_StartInput" o en el operando "Tag_EnableInput" y el operando "Tag_StartInput" devuelva el estado lógico "1".

A "Tag_Reset"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

R "MyTimer"

// Si el RLO es "1", inicializar temporizador.

A "MyTimer"

// Consultar si el estado del temporizador es "1".

= "Tag_TimerStatus"

// Asignar el estado del temporizador al operando.

LC "MyTimer"

// Cargar el valor actual del temporizador codificado
en BCD en el acumulador 1.

T "Tag_TimerValue"

// Transferir el valor actual del temporizador al operando "Tag_TimerValue".

Consulte también
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en instrucciones de temporización y contaje (Página 188)
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 5383)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

5386

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

R: Inicializar temporizador
Descripción
La instrucción "Inicializar temporizador" pone a "0" un temporizador concreto. La instrucción se
ejecuta si el resultado lógico (RLO) actual es "1". Mientras el RLO "1" esté pendiente antes de
la instrucción, el temporizador indicado dará el valor "0". La instrucción también pone a "0" el
valor del temporizador y la base de tiempo de la duración programada.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Nota
La instrucción "Inicializar temporizador" no desactiva la marca de flancos interna. Para
desactivar la marca de flancos interna debe programarse la instrucción "Habilitar
temporizador" o ejecutarse una instrucción para arrancar el temporizador con el estado lógico
"0".
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Inicializar temporizador":
Operando

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

Input

TIMER

T

Temporizador que se iniciali‐
za

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

A "Tag_Reset"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

R "MyTimer"

// Si el RLO es "1", inicializar temporizador.

A "MyTimer"

// Consultar si el estado del temporizador es "1".

= "Tag_TimerStatus"

// Asignar el estado del temporizador al operando.

L "MyTimer"

// Cargar el valor actual del temporizador en el acumulador 1.

Programación del PLC
Manual de programación y manejo, 11/2019

5387

Instrucciones
4.2 Instrucciones
AWL

Explicación

T "Tag_TimerValue"

// Transferir el valor actual del temporizador al operando "Tag_TimerValue".

Consulte también
Activar el bit de estado en instrucciones de temporización y contaje (Página 188)
Principios básicos de la palabra de estado (Página 184)
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 5383)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

SP: Arrancar temporizador como impulso
Descripción
La instrucción "Arrancar temporizador como impulso" arranca un temporizador concreto con
un flanco de señal ascendente. Cuando se registra un flanco de señal ascendente, la
instrucción se ejecuta y el temporizador arranca. El temporizador termina con la duración que
figura en el acumulador 1, mientras el resultado lógico (RLO) antes de la instrucción siga
siendo "1". Si el RLO cambia a "0" antes de finalizar el temporizador, este se detiene. Las
consultas de si el estado del temporizador es "1" dan como resultado "1" mientras el
temporizador está en marcha.
Es posible rearrancar el temporizador con un flanco de señal ascendente antes de la
instrucción "Arrancar temporizador como impulso" o con la ayuda de la instrucción "Habilitar
temporizador". Para ello, es imprescindible que el temporizador no esté desactivado.
La duración en el acumulador 1 se compone de un valor de tiempo y una base de tiempo. Si
se arranca un temporizador concreto con la instrucción "Arrancar temporizador como impulso",
el valor del temporizador se reduce de acuerdo con la base de tiempo. El temporizador cuenta
el tiempo hasta que el valor de contaje decrementa hasta cero.
En el acumulador 1 debe haber una duración válida en formato S5TIME, aunque al procesar
la instrucción no arranque el temporizador. Si el acumulador 1 no tiene ningún valor BCD
válido, se ejecuta el tratamiento de errores síncronos (STOP u OB122). El bit de estado OV no
se ve afectado.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

5388

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
impulso":
Operando

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

Input

TIMER

T

Temporizador que arranca
como impulso

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

A "Tag_StartInput"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

L S5T#10s

// Cargar tiempo (10 s)

SP "MyTimer"

// Arrancar temporizador como impulso cuando haya un
flanco de señal ascendente en el operando "Tag_StartInput" o en el operando "Tag_EnableInput" y el operando "Tag_StartInput" devuelva el estado lógico "1".

A "Tag_Reset"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

R "MyTimer"

// Inicializar el temporizador si el RLO es "1" y detener el tiempo.

A "MyTimer"

// Consultar si el estado del temporizador es "1".

= "Tag_TimerStatus"

// Asignar el estado del temporizador al operando.

L "MyTimer"

// Cargar el valor actual del temporizador en el acumulador 1.

T "Tag_TimerValue"

// Transferir el valor actual del temporizador al operando "Tag_TimerValue".

LC "MyTimer"

// Cargar el valor actual del temporizador codificado
en BCD en el acumulador 1.

T "Tag_TimerValue_BCD"

// Transferir el valor del temporizador codificado en
BCD al operando "Tag_TimerValue_BCD".

La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJB6WDUW,QSXWಯ

'HVDFWLYDU

ಯ7DJB5HVHWಯ

7HPSRUL]DGRU
6DOLGD

W
ಯ7DJB7LPHU6WDWXVಯ

&DUJDUWHPSRUL]DGRU
//&
W WLHPSRSURJUDPDGR

Programación del PLC
Manual de programación y manejo, 11/2019

5389

Instrucciones
4.2 Instrucciones

Consulte también
Activar el bit de estado en instrucciones de temporización y contaje (Página 188)
Principios básicos de la palabra de estado (Página 184)
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 5383)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

SE: Arrancar temporizador como impulso prolongado
Descripción
La instrucción "Arrancar temporizador como impulso prolongado" arranca un temporizador
concreto con un flanco de señal ascendente. Cuando se registra un flanco de señal
ascendente, la instrucción se ejecuta y el temporizador arranca. El temporizador termina con
el tiempo que figura en el acumulador 1, aunque el resultado lógico antes de la instrucción
cambie a "0". Las consultas de si el estado del temporizador es "1" dan como resultado "1"
mientras el temporizador está en marcha.
Con cada flanco de señal ascendente, la instrucción rearranca el temporizador con la duración
programada, aunque este todavía no haya terminado.
La duración en el acumulador 1 se compone de un valor de tiempo y una base de tiempo. Si
se arranca un temporizador concreto con la instrucción "Arrancar temporizador como impulso
prolongado", el valor del temporizador decrementa de acuerdo con la base de tiempo. El
temporizador cuenta el tiempo hasta que el valor de contaje decrementa hasta cero.
En el acumulador 1 debe haber una duración válida en formato S5TIME, aunque al procesar
la instrucción no arranque el temporizador. Si el acumulador 1 no tiene ningún valor BCD
válido, se ejecuta el tratamiento de errores síncronos (STOP u OB 122). El bit de estado OV
no se ve afectado.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización aquí: L: Cargar valor del
temporizador (Página 5383)

5390

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
impulso prolongado":
Operando

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

Input

TIMER

T

Temporizador que arranca
como impulso prolongado

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

A "Tag_StartInput"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

L S5T#10s

// Cargar tiempo (10 s)

SE "MyTimer"

// Arrancar temporizador como impulso prolongado cuando haya un flanco de señal ascendente en el operando
"Tag_StartInput" o en el operando "Tag_EnableInput" y
el operando "Tag_StartInput" devuelva el estado lógico "1".

A "Tag_Reset"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

R "MyTimer"

// Inicializar el temporizador si el RLO es "1" y detener el tiempo.

A "MyTimer"

// Consultar si el estado del temporizador es "1".

= "Tag_TimerStatus"

// Asignar el estado del temporizador al operando

L "MyTimer"

// Cargar el valor actual del temporizador en el acumulador 1.

T "Tag_TimerValue"

// Transferir el valor actual del temporizador al operando "Tag_TimerValue".

LC "MyTimer"

// Cargar el valor actual del temporizador codificado
en BCD en el acumulador 1.

T "Tag_TimerValue_BCD"

// Transferir el valor del temporizador codificado en
BCD al operando "Tag_TimerValue_BCD".

La figura siguiente muestra el cronograma del ejemplo:

Programación del PLC
Manual de programación y manejo, 11/2019

5391

Instrucciones
4.2 Instrucciones
$UUDQFDU

ಯ7DJB6WDUW,QSXWಯ

'HVDFWLYDU

ಯ7DJB5HVHWಯ

7HPSRUL]DGRU
6DOLGD

W
ಯ7DJB7LPHU6WDWXVಯ

&DUJDUWHPSRUL]DGRU
//&
W WLHPSRSURJUDPDGR

Consulte también
Activar el bit de estado en instrucciones de temporización y contaje (Página 188)
Principios básicos de la palabra de estado (Página 184)
Vista general de los tipos de datos válidos (Página 241)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Ejemplos de programación AWL (Página 8102)

SD: Arrancar temporizador como retardo a la conexión
Descripción
La instrucción "Arrancar temporizador como retardo a la conexión" arranca un temporizador
programado al detectarse el estado lógico "1" en la entrada de arranque. Mientras se
mantenga el estado lógico "1", el temporizador contará el tiempo indicado en el acumulador 1.
Una vez transcurrido el tiempo y si el estado lógico en la entrada de arranque sigue siendo "1",
la consulta del estado del temporizador también dará como resultado "1". Si la señal de la
entrada de arranque es "0", el temporizador se inicializa. En ese caso, la consulta del estado
del temporizador devuelve el estado lógico "0". En cuanto la señal en la entrada de arranque
vuelve a cambiar a "1", el temporizador vuelve a contar el tiempo.
El estado lógico de la salida del temporizador es idéntico al de la entrada de arranque. La
entrada de arranque está interconectada directamente con la salida y no tiene relación con el
temporizador.
El tiempo en el acumulador 1 se compone internamente de un valor de tiempo y una base de
tiempo. Cuando se inicia la instrucción, el valor de tiempo programado se cuenta hacia atrás
hasta cero.
En el acumulador 1 debe haber una duración válida en formato S5TIME, aunque al procesar
la instrucción no arranque el temporizador. Si el acumulador 1 no tiene ningún valor BCD válido
y el RLO de la operación lógica precedente devuelve el valor "0", el bit de estado OV se

5392

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
ajustará a "1". No se inicia ningún tratamiento de errores síncrono. Si el acumulador 1 tiene un
valor BCD válido, el bit de estado OV se ajusta a "0".
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización aquí: L: Cargar valor del
temporizador (Página 5383)

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
retardo a la conexión":
Operando

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

Input

TIMER

T

Temporizador que arranca
como retardo a la conexión

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

A "Tag_StartInput"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

L S5T#10s

// Cargar tiempo (10 s)

SD "MyTimer"

// Arrancar temporizador como retardo a la conexión
cuando haya un flanco de señal ascendente en el operando "Tag_StartInput" o en el operando "Tag_EnableInput" y el operando "Tag_StartInput" devuelva el estado
lógico "1".

A "Tag_Reset"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

R "MyTimer"

// Inicializar el temporizador si el RLO es "1" y detener el tiempo.

A "MyTimer"

// Consultar si el estado del temporizador es "1"

= "Tag_TimerStatus"

// Asignar el estado del temporizador al operando.

L "MyTimer"

// Cargar el valor actual del temporizador en el acumulador 1.

T "Tag_TimerValue"

// Transferir el valor actual del temporizador al operando "Tag_TimerValue".

LC "MyTimer"

// Cargar el valor actual del temporizador codificado
en BCD en el acumulador 1.

Programación del PLC
Manual de programación y manejo, 11/2019

5393

Instrucciones
4.2 Instrucciones
AWL

Explicación

T "Tag_TimerValue_BCD"

// Transferir el valor del temporizador codificado en
BCD al operando "Tag_TimerValue_BCD".

La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJB6WDUW,QSXWಯ

'HVDFWLYDU

ಯ7DJB5HVHWಯ

7HPSRUL]DGRU
6DOLGD

W

W

ಯ7DJB7LPHU6WDWXVಯ
W WLHPSRSURJUDPDGR

Consulte también
Activar el bit de estado en instrucciones de temporización y contaje (Página 188)
Principios básicos de la palabra de estado (Página 184)
Vista general de los tipos de datos válidos (Página 241)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

SS: Arrancar temporizador como retardo a la conexión con memoria
Descripción
La instrucción "Arrancar temporizador como retardo a la conexión con memoria" arranca un
temporizador concreto con un flanco de señal ascendente. Cuando se registra un flanco de
señal ascendente, la instrucción se ejecuta y el temporizador arranca. El temporizador termina
con la duración que figura en el acumulador 1, aunque el resultado lógico (RLO) antes de la
instrucción cambie a "0". Cuando el tiempo ha transcurrido, las consultas de si el estado del
temporizador es "1" dan como resultado "1". El estado lógico del resultado lógico actual antes
de la instrucción no influye en el resultado de la consulta.
Con cada flanco de señal ascendente, la instrucción rearranca el temporizador con la duración
programada, aunque este todavía no haya terminado.
La duración en el acumulador 1 se compone de un valor de tiempo y una base de tiempo. Si
se arranca un temporizador concreto con la instrucción "Arrancar temporizador como retardo
a la conexión con memoria", el valor del temporizador se reduce de acuerdo con la base de
tiempo. El temporizador cuenta el tiempo hasta que el valor de contaje decrementa hasta cero.
En el acumulador 1 debe haber una duración válida en formato S5TIME, aunque al procesar
la instrucción no arranque el temporizador. Si el acumulador 1 no tiene ningún valor BCD

5394

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
válido, se ejecuta el tratamiento de errores síncronos (STOP u OB 122). El bit de estado OV
no se ve afectado.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización aquí: L: Cargar valor del
temporizador (Página 5383)

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
retardo a la conexión con memoria":
Operando

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

Input

TIMER

T

Temporizador que arranca
como retardo a la conexión
con memoria

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

A "Tag_StartInput"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

L S5T#10s

// Cargar tiempo (10 s)

SS "MyTimer"

// Arrancar temporizador como retardo a la conexión
con memoria cuando haya un flanco de señal ascendente
en el operando "Tag_StartInput" o en el operando
"Tag_EnableInput" y el operando "Tag_StartInput" devuelva el estado lógico "1".

A "Tag_Reset"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

R "MyTimer"

// Inicializar el temporizador si el RLO es "1" y detener el tiempo.

A "MyTimer"

// Consultar si el estado del temporizador es "1".

= "Tag_TimerStatus"

// Asignar el estado del temporizador al operando.

L "MyTimer"

// Cargar el valor actual del temporizador en el acumulador 1.

T "Tag_TimerValue"

// Transferir el valor actual del temporizador al operando "Tag_TimerValue".

Programación del PLC
Manual de programación y manejo, 11/2019

5395

Instrucciones
4.2 Instrucciones
AWL

Explicación

LC "MyTimer"

// Cargar el valor actual del temporizador codificado
en BCD en el acumulador 1.

T "Tag_TimerValue_BCD"

// Transferir el valor del temporizador codificado en
BCD al operando "Tag_TimerValue_BCD".

La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJB6WDUW,QSXWಯ

'HVDFWLYDU

ಯ7DJB5HVHWಯ

7HPSRUL]DGRU
6DOLGD

W
ಯ7DJB7LPHU6WDWXVಯ
W WLHPSRSURJUDPDGR

Consulte también
Activar el bit de estado en instrucciones de temporización y contaje (Página 188)
Principios básicos de la palabra de estado (Página 184)
Vista general de los tipos de datos válidos (Página 241)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

SF: Arrancar temporizador como retardo a la desconexión
Descripción
La instrucción "Arrancar temporizador como retardo a la desconexión" arranca un
temporizador concreto con un flanco de señal descendente. Cuando se registra un flanco de
señal descendente, la instrucción se ejecuta y el temporizador arranca. El temporizador
termina con la duración que figura en el acumulador 1. Si el resultado lógico (RLO) cambia a
"1" antes de finalizar el tiempo, el temporizador se inicializa. El temporizador solo arranca de
nuevo cuando se registra un flanco de señal descendente al ejecutar la instrucción.
Las consultas del estado del temporizador en "1" dan como resultado "1" si el estado del
resultado lógico al ejecutar la instrucción es "1" o si el temporizador programado está en
marcha. Si el temporizador no cuenta o el RLO está a "0", las consultas de si el estado del
temporizador es "1" dan como resultado "0".
La duración en el acumulador 1 se compone de un valor de tiempo y una base de tiempo. Si
se arranca un temporizador concreto con la instrucción "Arrancar temporizador como retardo
a la desconexión", el valor del temporizador decrementa de acuerdo con la base de tiempo. El
temporizador cuenta el tiempo hasta que el valor de contaje decrementa hasta cero.

5396

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
En el acumulador 1 debe haber una duración válida en formato S5TIME, aunque al procesar
la instrucción no arranque el temporizador. Si el acumulador 1 no tiene ningún valor BCD
válido, se ejecuta el tratamiento de errores síncronos (STOP u OB 122). El bit de estado OV
no se ve afectado.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización aquí: L: Cargar valor del
temporizador (Página 5383)

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Arrancar temporizador como
retardo a la desconexión":
Operando

Declaración

Tipo de datos

Área de memoria

Descripción

<Temporiza‐
dor>

Input

TIMER

T

Temporizador que arranca
como retardo a la descone‐
xión

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

A "Tag_StartInput"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

L S5T#10s

// Cargar tiempo (10 s)

SF "MyTimer"

// Arrancar temporizador como retardo a la desconexión
cuando haya un flanco de señal descendente en el operando "Tag_StartInput" o en el operando "Tag_EnableInput" y el operando "Tag_StartInput" devuelva el estado
lógico "1".

A "Tag_Reset"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

R "MyTimer"

// Inicializar el temporizador si el RLO es "1" y detener el tiempo.

A "MyTimer"

// Consultar si el estado del temporizador es "1".

= "Tag_TimerStatus"

// Asignar el estado del temporizador al operando.

L "MyTimer"

// Cargar el valor actual del temporizador en el acumulador 1.

Programación del PLC
Manual de programación y manejo, 11/2019

5397

Instrucciones
4.2 Instrucciones
AWL

Explicación

T "Tag_TimerValue"

// Transferir el valor actual del temporizador al operando "Tag_TimerValue".

LC "MyTimer"

// Cargar el valor actual del temporizador codificado
en BCD en el acumulador 1.

T "Tag_TimerValue_BCD"

// Transferir el valor del temporizador codificado en
BCD al operando "Tag_TimerValue_BCD".

La figura siguiente muestra el cronograma del ejemplo:
$UUDQFDU

ಯ7DJB6WDUW,QSXWಯ

'HVDFWLYDU

ಯ7DJB5HVHWಯ

7HPSRUL]DGRU
W
6DOLGD

W

ಯ7DJB7LPHU6WDWXVಯ
W WLHPSRSURJUDPDGR

Consulte también
Activar el bit de estado en instrucciones de temporización y contaje (Página 188)
Principios básicos de la palabra de estado (Página 184)
Vista general de los tipos de datos válidos (Página 241)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Contadores
FR: Habilitar contador
Descripción
La instrucción "Habilitar contador" ejecuta las instrucciones "Inicializar contador", "Contador
ascendente" y "Contador descendente" sin que exista actualmente un flanco de señal
ascendente. Durante la ejecución, la instrucción pone la marca de flancos interna al estado
lógico "0". La consulta anterior a la instrucción de contaje correspondiente debe seguir
teniendo el estado lógico "1".
La instrucción "Habilitar contador" se ejecuta si el resultado lógico (RLO) cambia de "0" a "1"
antes de la instrucción.
Para ejecutar una instrucción de contaje no es necesario habilitar un contador.

5398

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Habilitar contador":
Operando

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

COUNTER

C

Contador que se habilita.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

A "Tag_Input_1"

// Consultar si el estado lógico es "1" y combinar el
resultado lógicamente con Y con el RLO actual.

FR "MyCounter"

// Habilitar contador

A "Tag_Input_2"

// Consultar si el estado lógico es "1" y combinar el
resultado lógicamente con Y con el RLO actual.

CD "MyCounter"

// Decrementar contador

A "MyCounter"

// Consultar estado del contador

= "Tag_Output"

// Asignar el resultado de la consulta al operando.

En el ejemplo, el contador "MyCounter" se habilita cuando el estado lógico del operando
"Tag_Input_1" cambia de "0" a "1". Si el operando "Tag_Input_2" tiene el estado lógico "1", el
valor de contaje decrementa en uno al habilitar el contador. Si el estado lógico del operando
"Tag_Input_2" es "0", el valor de contaje no cambia. El valor de contaje también decrementa
en uno, independientemente de la habilitación del contador, cuando el estado lógico del
operando "Tag_Input_2" cambia de "0" a "1".
La consulta del estado del contador da como resultado "1" si el estado del contador es mayor
que cero. Si el estado del contador es igual a cero, el resultado de la consulta es "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en instrucciones de temporización y contaje (Página 188)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

L: Cargar valor de contaje
Descripción
La instrucción "Cargar valor de contaje" transfiere el valor actual de un contador concreto a la
palabra derecha del acumulador 1 en código dual. A continuación, el valor de contaje cargado
está disponible como entero de 16 bits para su posterior procesamiento.

Programación del PLC
Manual de programación y manejo, 11/2019

5399

Instrucciones
4.2 Instrucciones
La figura siguiente muestra el funcionamiento de la instrucción:
3DODEUDGHFRQWDMH
SDUD
FRQWDGRU&GHOD
PHPRULD

   



9DORUGHFRQWDMH D FRGLILFDGRHQ
ELQDULR
/&

&RQWHQLGRGHOD
SDODEUDGHUHFKD
GHO
DFXPXODGRU
GHVSX«VGHOD
LQVWUXFFLµQGH
FDUJD /&

   
7RGRVಯಯ



9DORUGHFRQWDMH D FRGLILFDGRHQ
ELQDULR

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Cargar valor de contaje":
Operando

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

COUNTER

C

Contador cuyo valor actual
se carga.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "MyCounter"

// Cargar el valor de contaje actual en el acumulador
1 en código binario.

L "Tag_Value"

// Desplazar el valor de contaje al acumulador 2.
// Cargar el valor del operando "Tag_Value" en el acumulador 1.

>=I

// Consulta sobre si el valor de contaje es mayor o
igual al valor del operando "Tag_Value".

= "Tag_Output"

// Asignar el resultado de la consulta al operando.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en instrucciones de temporización y contaje (Página 188)

5400

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

LC: Cargar valor de contaje codificado en BCD
Descripción
La instrucción "Cargar valor de contaje codificado en BCD" transfiere el valor actual de un
contador concreto en formato BCD a la palabra derecha del acumulador 1. Después, el valor
de contaje cargado está disponible en BCD para su posterior procesamiento.
La figura siguiente muestra el funcionamiento de la instrucción "Cargar valor de contaje
codificado en BCD":
3DODEUDGHFRQWDMH
SDUD
FRQWDGRU&HQOD
PHPRULD

   



9DORUGHFRQWDMH D FRGLILFDGRHQ
ELQDULR
/&&

&RQWHQLGRGHOD
SDODEUDGHUHFKDGHO 
DFXPXODGRU
   
GHVSX«VGHOD
LQVWUXFFLµQGHFDUJD
 &HQWHQDV
'HFHQDV
/&&


 8QLGDGHV

9DORUGHFRQWDMHHQ%&'

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Cargar valor de contaje codificado
en BCD":
Operando

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

COUNTER

C

Contador cuyo valor actual
se carga.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5401

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

LC "MyCounter"

// Cargar el valor de contaje actual en el acumulador
1 codificado en BCD.

T "Tag_Output"

// Transferir el valor de contaje actual al operando
"Tag_Output" y guardarlo.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en instrucciones de temporización y contaje (Página 188)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

R: Inicializar contador
Descripción
La instrucción "Poner contador a 0" pone a "0" el valor de contaje actual de un contador
concreto.
La instrucción solo se ejecuta si el resultado lógico (RLO) previo a la instrucción tiene el estado
lógico "1". Mientras el RLO antes de la instrucción "Poner contador a 0" esté a "1", las consultas
de si el estado del contador es "1" darán como resultado "0".
Al poner un contador a 0, la marca de flancos interna para las instrucciones "Inicializar
contador", "Contador ascendente" y "Contador descendente" no se desactiva.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Poner contador a 0":
Operando

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

COUNTER

C

Contador cuyo valor de con‐
taje se pone a "0".

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

5402

AWL

Explicación

A "Tag_Input"

// Consultar si el estado lógico es "1" y combinar el
resultado lógicamente con Y con el RLO actual.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
AWL

Explicación

R "MyCounter"

// Poner contador a 0

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en instrucciones de temporización y contaje (Página 188)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

S: Inicializar contador
Descripción
La instrucción "Inicializar contador" pone un contador concreto al valor que se encuentra en el
acumulador 1 en el momento de la consulta.
La instrucción "Inicializar contador" se ejecuta solamente cuando el resultado lógico cambia de
"0" a "1" antes de la instrucción. El flanco de señal ascendente también puede obtenerse
mediante la instrucción "Habilitar contador", que pone a "0" la marca de flancos interna.
Para inicializar un contador debe haber un valor de contaje válido en el acumulador 1. Se
consideran valores de contaje válidos los valores codificados en BCD con tres décadas. Sólo
se admiten valores de contaje positivos, la instrucción de contaje no puede procesar valores
negativos. Si el acumulador 1 no tiene ningún valor BCD válido, se ejecuta el tratamiento de
errores síncronos (STOP u OB122). El bit de estado OV no se ve afectado.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Inicializar contador":
Operando

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

COUNTER

C

Contador que se inicializa.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

A "Tag_Input"

// Consultar si el estado lógico es "1" y combinar el
resultado lógicamente con Y con el RLO actual.

L "Tag_CountValue"

// Cargar el valor de contaje en el acumulador 1.

S "MyCounter"

// Poner el contador al valor que se encuentra en el
acumulador 1.

Programación del PLC
Manual de programación y manejo, 11/2019

5403

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en instrucciones de temporización y contaje (Página 188)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

CU: Contador ascendente
Descripción
La instrucción "Contador ascendente" incrementa en uno el valor de contaje actual cuando el
resultado lógico (RLO) antes de la instrucción cambie de "0" a "1". En cada flanco de señal
ascendente, el valor de contaje se sigue incrementando hasta alcanzar el límite superior "999".
Una vez alcanzado el valor límite, el RLO antes de la instrucción ya no influye en el valor de
contaje.
Para ejecutar la instrucción "Contador ascendente" se requiere siempre un flanco de señal
ascendente. El flanco de señal ascendente también puede obtenerse mediante la instrucción
"Habilitar contador", que pone a "0" la marca de flancos interna.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contador ascendente":
Operando

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

COUNTER

C

Contador cuyo valor de con‐
taje se incrementa en uno
con un flanco ascendente.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

A "Tag_Input"

// Consultar si el estado lógico es "1" y combinar el
resultado lógicamente con Y con el RLO actual.

CU "MyCounter"

// Incrementar el valor de contaje en uno con un flanco ascendente.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en instrucciones de temporización y contaje (Página 188)

5404

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Ejemplos de programación AWL (Página 8102)

CD: Contador descendente
Descripción
La instrucción "Contador descendente" decrementa en uno el valor de contaje actual cuando
el resultado lógico (RLO) antes de la instrucción cambie de "0" a "1". En cada flanco de señal
ascendente, el valor de contaje sigue decrementando hasta alcanzar el límite inferior "0". Una
vez alcanzado el valor límite, el RLO antes de la instrucción ya no influye en el valor de contaje.
No se cuenta con valores negativos.
Para ejecutar la instrucción "Contador descendente" se requiere siempre un flanco de señal
ascendente. El flanco de señal ascendente también puede obtenerse mediante la instrucción
"Habilitar contador", que pone a "0" la marca de flancos interna.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Contador descendente":
Operando

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

COUNTER

C

Contador cuyo valor de con‐
taje se decrementa en uno
con un flanco ascendente.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

A "Tag_Input"

// Consultar si el estado lógico es "1" y combinar el
resultado lógicamente con Y con el RLO actual.

CD "MyCounter"

// Decrementar el valor de contaje en uno con un flanco ascendente.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en instrucciones de temporización y contaje (Página 188)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)

Programación del PLC
Manual de programación y manejo, 11/2019

5405

Instrucciones
4.2 Instrucciones
Procesar instrucciones AWL (Página 8098)
Ejemplos de programación AWL (Página 8102)

Comparación
? I: Comparación de enteros
Descripción
La instrucción "Comparación de enteros" (16 bits) compara el contenido de la palabra derecha
del acumulador 2 con el contenido de la palabra derecha del acumulador 1. Los contenidos de
los acumuladores 1 y 2 se interpretan como enteros (de 16 bits). La instrucción ejecuta la
comparación en función de la función de comparación indicada.
La tabla siguiente muestra las funciones de comparación disponibles y su significado:
Función de comparación

Significado

==I

Comparación de igualdad de enteros

<>I

Comparación de desigualdad de enteros

>I

Comparación de superioridad de enteros

<I

Comparación de inferioridad de enteros

>=I

Comparación de superioridad o igualdad de enteros

<=I

Comparación de inferioridad o igualdad de enteros

El resultado de la comparación influye en el resultado lógico (RLO) así como en los bits de
estado CC 1 y CC 0. Si se cumple la condición de la comparación, el RLO se pone al estado
lógico "1". Si no se cumple la condición de la comparación, el RLO se pone a "0".
La tabla siguiente muestra cómo las distintas funciones de comparación influyen en el RLO:
Función de compara‐
ción

RLO si
ACU 2 > ACU 1

RLO si
ACU 2 = ACU 1

RLO si
ACU 2 < ACU 1

==I

0

1

0

<>I

1

0

1

>I

1

0

0

<I

0

0

1

>=I

1

1

0

<=I

0

1

1

La activación de los bits de estado CC 1 y CC 0 depende de la relación de los dos valores que
intervienen en la comparación.
Los contenidos de los acumuladores 1 y 2 no cambian debido a la ejecución de las funciones
de comparación. Tras ejecutar una función de comparación, es posible evaluar el resultado
lógico con funciones de asignación y salto.

5406

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Input_1"

// Cargar el valor del operando "Tag_Input_1" en el
acumulador 1.

L "Tag_Input_2"

// Desplazar el contenido del acumulador 1 (Tag_Input_1) al acumulador 2.
// Cargar el valor del operando "Tag_Input_2" en el
acumulador 1.

>I

// Comparar si el valor del operando "Tag_Input_1" es
mayor que el valor del operando "Tag_Input_2".

= "Tag_Output"

// Asignar el resultado de la comparación al operando
"Tag_Output".

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valores

Tag_Input_1

10

10

5

Tag_Input_2

5

10

10

Tag_Output

1

0

0

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones de comparación (Página 192)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Ejemplos de programación AWL (Página 8102)

? D: Comparación de enteros dobles
Descripción
La instrucción "Comparación de enteros dobles" (32 bits) compara el contenido del
acumulador 2 (ACU 2) con el contenido del acumulador 1 (ACU 1). Los contenidos de los
acumuladores 1 y 2 se interpretan como enteros dobles (de 32 bits). La instrucción ejecuta la
comparación en función de la función de comparación indicada.
La tabla siguiente muestra las funciones de comparación disponibles y su significado:
Función de comparación

Significado

==D

Comparación de igualdad de enteros dobles

<>D

Comparación de desigualdad de enteros dobles

Programación del PLC
Manual de programación y manejo, 11/2019

5407

Instrucciones
4.2 Instrucciones
Función de comparación

Significado

>D

Comparación de superioridad de enteros dobles

<D

Comparación de inferioridad de enteros dobles

>=D

Comparación de superioridad o igualdad de enteros dobles

<=D

Comparación de inferioridad o igualdad de enteros dobles

El resultado de la comparación influye en el resultado lógico (RLO) así como en los bits de
estado CC 1 y CC 0. Si se cumple la condición de la comparación, el RLO se pone al estado
lógico "1". Si no se cumple la condición de la comparación, el RLO se pone al estado lógico "0".
La tabla siguiente muestra cómo las distintas funciones de comparación influyen en el RLO:
Función de compara‐
ción

RLO si
ACU 2 > ACU 1

RLO si
ACU 2 = ACU 1

RLO si
ACU 2 < ACU 1

==D

0

1

0

<>D

1

0

1

>D

1

0

0

<D

0

0

1

>=D

1

1

0

<=D

0

1

1

La activación de los bits de estado CC 1 y CC 0 depende de la relación de los dos valores que
intervienen en la comparación.
Los contenidos de los acumuladores 1 y 2 no cambian debido a la ejecución de las funciones
de comparación. Tras ejecutar una función de comparación, es posible evaluar el resultado
lógico con funciones de asignación y salto.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Input_1"

// Cargar el valor del operando "Tag_Input_1" en el
acumulador 1.

L "Tag_Input_2"

// Desplazar el contenido del acumulador 1 (Tag_Input_1) al acumulador 2.
// Cargar el valor del operando "Tag_Input_2" en el
acumulador 1.

>D

// Comparar si el valor del operando "Tag_Input_1" es
mayor que el valor del operando "Tag_Input_2".

= "Tag_Output"

// Asignar el resultado de la comparación al operando
"Tag_Output".

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:

5408

Operando

Valores

Tag_Input_1

150 000

150 000

100 000

Tag_Input_2

100 000

150 000

150 000

Tag_Output

1

0

0

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones de comparación (Página 192)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

? R: Comparación de números en coma flotante
Descripción
La instrucción "Comparación de números en coma flotante" compara el contenido del
acumulador 2 (ACU 2) con el contenido del acumulador 1 (ACU 1). Los contenidos de los
acumuladores 1 y 2 se interpretan como números en coma flotante. Para ejecutar la
comparación debe haber números en coma flotante válidos en los acumuladores 1 y 2. La
instrucción ejecuta la comparación en función de la función de comparación indicada.
La tabla siguiente muestra las funciones de comparación disponibles y su significado:
Función de comparación

Significado

==R

Comparación de igualdad de números en coma flotante

<>R

Comparación de desigualdad de números en coma flotante

>R

Comparación de superioridad de números en coma flotante

<R

Comparación de inferioridad de números en coma flotante

>=R

Comparación de superioridad o igualdad de números en coma flotante

<=R

Comparación de inferioridad o igualdad de números en coma flotante

El resultado de la comparación influye en el resultado lógico (RLO) así como en los bits de
estado CC 1 y CC 0. Si se cumple la condición de la comparación, el RLO se pone al estado
lógico "1". Si no se cumple la condición de la comparación, el RLO se pone al estado lógico "0".
La tabla siguiente muestra cómo las distintas funciones de comparación influyen en el RLO:
Función de compara‐
ción

RLO si
ACU 2 > ACU 1

RLO si
ACU 2 = ACU 1

RLO si
ACU 2 < ACU 1

==R

0

1

0

<>R

1

0

1

>R

1

0

0

<R

0

0

1

>=R

1

1

0

<=R

0

1

1

Programación del PLC
Manual de programación y manejo, 11/2019

5409

Instrucciones
4.2 Instrucciones
La activación de los bits de estado CC 1 y CC 0 depende de la relación de los dos valores que
intervienen en la comparación.
Nota
Si se comparan números en coma flotante no válidos, la CPU pone el resultado lógico a "0" y
los bits de estado CC 0, CC 1, OV y OS a "1".
Los contenidos de los acumuladores 1 y 2 no cambian debido a la ejecución de las funciones
de comparación. Tras ejecutar una función de comparación, es posible evaluar el resultado
lógico con funciones de asignación y salto.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Input_1"

// Cargar el valor del operando "Tag_Input_1" en el
acumulador 1.

L "Tag_Input_2"

// Desplazar el contenido del acumulador 1 (Tag_Input_1) al acumulador 2.
// Cargar el valor del operando "Tag_Input_2" en el
acumulador 1.

>R

// Comparar si el valor del operando "Tag_Input_1" es
mayor que el valor del operando "Tag_Input_2".

= "Tag_Output"

// Asignar el resultado de la comparación al operando
"Tag_Output".

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valores

Tag_Input_1

10 515

10 515

5 232

Tag_Input_2

5 232

10 515

10 515

Tag_Output

1

0

0

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones de comparación (Página 192)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

5410

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Funciones matemáticas
Enteros
+I: Sumar enteros (16 bits)
Descripción
La instrucción "Sumar enteros (16 bits)" suma los valores que se encuentran en las palabras
derechas de los acumuladores 1 y 2. La instrucción interpreta dichos valores como enteros de
16 bits.
La instrucción guarda la suma en la palabra derecha del acumulador 1. La palabra izquierda
del acumulador 1 no cambia.
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si la suma es negativa, cero
o positiva. Si el resultado está fuera del rango numérico admisible, los bits de estado OV y OS
se ponen a "1".
En los controladores con dos acumuladores, el contenido del acumulador 2 no cambia
después de ejecutar la instrucción.
En los controladores con cuatro acumuladores, el contenido del acumulador 3 se copia en el
acumulador 2 y el contenido del acumulador 4 se copia en el acumulador 3. El contenido del
acumulador 4 no cambia después de ejecutar la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el primer sumando.

L "Tag_Value_2"

// Cargar el segundo sumando.

+I

// Sumar valores

T "Tag_Result"

// Transferir la suma al operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Ejemplos de programación AWL (Página 8102)

Programación del PLC
Manual de programación y manejo, 11/2019

5411

Instrucciones
4.2 Instrucciones

-I: Restar enteros (16 bits)
Descripción
La instrucción "Restar enteros (16 bits)" resta el valor de la palabra derecha del acumulador 1
del valor de la palabra derecha del acumulador 2. La instrucción interpreta los valores de los
acumuladores 1 y 2 como enteros de 16 bits.
La instrucción guarda la diferencia en la palabra derecha del acumulador 1. La palabra
izquierda del acumulador 1 no cambia.
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si la diferencia es negativa,
cero o positiva. Si el resultado está fuera del rango numérico admisible, los bits de estado OV
y OS se ponen a "1".
En los controladores con dos acumuladores, el contenido del acumulador 2 no cambia
después de ejecutar la instrucción.
En los controladores con cuatro acumuladores, el contenido del acumulador 3 se copia en el
acumulador 2 y el contenido del acumulador 4 se copia en el acumulador 3. El contenido del
acumulador 4 no cambia después de ejecutar la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el primer valor de la resta en el acumulador
1.

L "Tag_Value_2"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el segundo valor de la suma en el acumulador
1.

-I

// Restar el valor del acumulador 1 del valor del acumulador 2.

T "Tag_Result"

// Transferir la diferencia al operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Ejemplos de programación AWL (Página 8102)

5412

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

*I: Multiplicar enteros (16 bits)
Descripción
La instrucción "Multiplicar enteros (16 bits)" multiplica los valores que se encuentran en las
palabras derechas de los acumuladores 1 y 2. La instrucción interpreta dichos valores como
enteros de 16 bits.
La instrucción guarda el producto en el acumulador 1 como entero de 32 bits (DINT).
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si el producto es negativo,
cero o positivo. Si el resultado está fuera del rango numérico admisible, los bits de estado OV
y OS se ponen a "1".
En los controladores con dos acumuladores, el contenido del acumulador 2 no cambia
después de ejecutar la instrucción.
En los controladores con cuatro acumuladores, el contenido del acumulador 3 se copia en el
acumulador 2 y el contenido del acumulador 4 se copia en el acumulador 3. El contenido del
acumulador 4 no cambia después de ejecutar la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el multiplicando.

L "Tag_Value_2"

// Cargar el multiplicador.

*I

// Multiplicar valores

T "Tag_Result"

// Transferir el producto al operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Ejemplos de programación AWL (Página 8102)

/I: Dividir enteros (16 bits)
Descripción
La instrucción "Dividir enteros (16 bits)" divide el valor de la palabra derecha del acumulador
2 por el valor de la palabra derecha del acumulador 1. La instrucción interpreta los valores de
los acumuladores como enteros de 16 bits.

Programación del PLC
Manual de programación y manejo, 11/2019

5413

Instrucciones
4.2 Instrucciones
La instrucción da dos resultados: el cociente y el resto de la división. El cociente es el resultado
entero de la división. La instrucción lo guarda en la palabra derecha del acumulador 1. El resto
de la división lo guarda en la palabra izquierda del acumulador 1. Si el dividendo es negativo,
el resto de la división también lo será.
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si el cociente es negativo,
cero o positivo. Si el resultado está fuera del rango numérico admisible, los bits de estado OV
y OS se ponen a "1".
En caso de dividir entre cero, la instrucción da cero tanto para el cociente como para el resto.
En este caso, los bits de estado CC 0, CC 1, OV y OS se ponen al estado lógico "1".
En los controladores con dos acumuladores, el contenido del acumulador 2 no cambia
después de ejecutar la instrucción.
En los controladores con cuatro acumuladores, el contenido del acumulador 3 se copia en el
acumulador 2 y el contenido del acumulador 4 se copia en el acumulador 3. El contenido del
acumulador 4 no cambia después de ejecutar la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el dividendo en el acumulador 1.

L "Tag_Value_2"

// Desplazar el dividendo al acumulador 2.
// Cargar el divisor en el acumulador 1.

/I

// Dividir el valor del acumulador 2 entre el valor
del acumulador 1.

T "Tag_Result"

// Transferir el resultado al operando "Tag_Result".

Antes de la ejecución
La tabla siguiente muestra los contenidos de las palabras derechas de los acumuladores 1 y
2 antes de ejecutar la instrucción "Dividir enteros (16 bits)":
Acumulador

Valor

Acumulador 2

13

Acumulador 1

4

Después de la ejecución
La tabla siguiente muestra el contenido del acumulador 1 después de ejecutar la instrucción
"Dividir enteros (16 bits)":

5414

Acumulador 1

Valor

Bits 0 a 15
(palabra derecha)

3

Bits 16 a 31
(palabra izquierda)

1

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Ejemplos de programación AWL (Página 8102)

+D: Sumar enteros dobles (32 bits)
Descripción
La instrucción "Sumar enteros dobles (32 bits)" suma los valores que se encuentran en los
acumuladores 1 y 2. La instrucción interpreta dichos valores como enteros de 32 bits. La
instrucción guarda la suma en el acumulador 1.
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si la suma es negativa, cero
o positiva. Si el resultado está fuera del rango numérico admisible, los bits de estado OV y OS
se ponen a "1".
En los controladores con dos acumuladores, el contenido del acumulador 2 no cambia
después de ejecutar la instrucción.
En los controladores con cuatro acumuladores, el contenido del acumulador 3 se copia en el
acumulador 2 y el contenido del acumulador 4 se copia en el acumulador 3. El contenido del
acumulador 4 no cambia después de ejecutar la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el primer sumando.

L "Tag_Value_2"

// Cargar el segundo sumando.

+D

// Sumar valores

T "Tag_Result"

// Transferir la suma al operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Programación del PLC
Manual de programación y manejo, 11/2019

5415

Instrucciones
4.2 Instrucciones

-D: Restar enteros dobles (32 bits)
Descripción
La instrucción "Restar enteros dobles (32 bits)" resta el valor del acumulador 1 del valor del
acumulador 2. La instrucción interpreta los valores de los acumuladores 1 y 2 como enteros
dobles (32 bits). La instrucción guarda el resultado de la resta en el acumulador 1.
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si la diferencia es negativa,
cero o positiva. Si el resultado está fuera del rango numérico admisible, los bits de estado OV
y OS se ponen a "1".
En los controladores con dos acumuladores, el contenido del acumulador 2 no cambia
después de ejecutar la instrucción.
En los controladores con cuatro acumuladores, el contenido del acumulador 3 se copia en el
acumulador 2 y el contenido del acumulador 4 se copia en el acumulador 3. El contenido del
acumulador 4 no cambia después de ejecutar la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el primer valor de la resta en el acumulador
1.

L "Tag_Value_2"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el segundo valor de la resta en el acumulador 1.

-D

// Restar el valor del acumulador 1 del valor del acumulador 2.

T "Tag_Result"

// Transferir la diferencia al operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

5416

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

*D: Multiplicar enteros dobles (32 bits)
Descripción
La instrucción "Multiplicar enteros dobles (32 bits)" multiplica los valores que se encuentran en
los acumuladores 1 y 2. La instrucción interpreta dichos valores como enteros de 32 bits. La
instrucción guarda el producto en el acumulador 1.
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si el producto es negativo,
cero o positivo. Si el resultado está fuera del rango numérico admisible, los bits de estado OV
y OS se ponen a "1".
En los controladores con dos acumuladores, el contenido del acumulador 2 no cambia
después de ejecutar la instrucción.
En los controladores con cuatro acumuladores, el contenido del acumulador 3 se copia en el
acumulador 2 y el contenido del acumulador 4 se copia en el acumulador 3. El contenido del
acumulador 4 no cambia después de ejecutar la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el multiplicando.

L "Tag_Value_2"

// Cargar el multiplicador.

*D

// Multiplicar valores

T "Tag_Result"

// Transferir el producto al operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

/D: Dividir enteros dobles (32 bits)
Descripción
La instrucción "Dividir enteros dobles (32 bits)" divide el valor del acumulador 2 por el valor del
acumulador 1. La instrucción interpreta los valores de los acumuladores 1 y 2 como enteros
dobles (32 bits). La instrucción guarda el resultado entero de la división (cociente) en el
acumulador 1.
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si el cociente es negativo,
cero o positivo. Si el resultado está fuera del rango numérico admisible, los bits de estado OV
y OS se ponen a "1".
Programación del PLC
Manual de programación y manejo, 11/2019

5417

Instrucciones
4.2 Instrucciones
En caso de dividir entre cero, la instrucción da cero para el cociente. En este caso, los bits de
estado CC 0, CC 1, OV y OS se ponen al estado lógico "1".
En los controladores con dos acumuladores, el contenido del acumulador 2 no cambia
después de ejecutar la instrucción.
En los controladores con cuatro acumuladores, el contenido del acumulador 3 se copia en el
acumulador 2 y el contenido del acumulador 4 se copia en el acumulador 3. El contenido del
acumulador 4 no cambia después de ejecutar la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el dividendo en el acumulador 1.

L "Tag_Value_2"

// Desplazar el dividendo al acumulador 2.
// Cargar el divisor en el acumulador 1.

/D

// Dividir el valor del acumulador 2 entre el valor
del acumulador 1.

T "Tag_Result"

// Transferir el cociente al operando "Tag_Result".

Antes de la ejecución
La tabla siguiente muestra los contenidos de los acumuladores 1 y 2 antes de ejecutar la
instrucción "Dividir enteros dobles (32 bits)":
Acumulador

Valor

Acumulador 2

13

Acumulador 1

4

Después de la ejecución
La tabla siguiente muestra el contenido del acumulador 1 después de ejecutar la instrucción
"Dividir enteros dobles (32 bits)":
Acumulador

Valor

Acumulador 1

3

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

5418

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

+: Sumar constantes
Descripción
La instrucción "Sumar constantes" suma el valor de una constante concreta al contenido del
acumulador 1. El valor de la constante puede indicarse como entero (16 bits) o entero doble (32
bits). La instrucción guarda el resultado en el acumulador 1. Cuando se suman enteros de 16
bits, la instrucción influye solo en la palabra derecha del acumulador 1.
Para ejecutar la suma de un entero de 16 bits como operación DINT, antes de la constante hay
que introducir "L#". La instrucción "Sumar constantes" utiliza números negativos.
La instrucción no influye en los bits de estado.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Sumar constantes":
Parámetro

Tipo de datos

Descripción

<Constante>

INT, DINT

Constante que se suma.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1".

+ 25

// Aumentar en 25 el valor del acumulador 1.

T "Tag_Result_1"

// Transferir el contenido del acumulador 1 al operando "Tag_Result_1".

L "Tag_Value_2"

// Cargar el valor del operando "Tag_Value_2" en el
acumulador 1.

L "Tag_Value_3"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_3" en el
acumulador 1.

+ -100

// Reducir en 100 el valor del acumulador 1.

<I

// Consultar si el valor del acumulador 2 es menor que
el valor del acumulador 1.

JC NEXT

// Si el resultado de la consulta es "1", saltar a la
etiqueta NEXT .
// Si el resultado de la consulta es "0", procesar la
instrucción siguiente.

T "Tag_Result_2"

Transferir el contenido del acumulador 1 al operando
"Tag_Result_2".

L "Tag_Value_4"

// Cargar el valor del operando "Tag_Value_4".

+ L#20

// Incrementar en 20 el contenido del acumulador 1.
// La suma se efectúa conforme a un cálculo DINT

T "Tag_Result_3"

Programación del PLC
Manual de programación y manejo, 11/2019

// Transferir el contenido del acumulador 1 al operando "Tag_Result_3".

5419

Instrucciones
4.2 Instrucciones
AWL

Explicación

NEXT: L "Tag_Value_5"

// Etiqueta "NEXT"
// Cargar el valor del operando "Tag_Value_5".

+D

// Sumar los valores de los acumuladores 1 y 2.

T "Tag_Result_4"

// Transferir la suma al operando "Tag_Result_4".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

INC: Incrementar
Descripción
La instrucción "Incrementar" aumenta el valor que se encuentra en el acumulador 1 en el valor
que se indica como parámetro de la instrucción. El valor indicado puede estar comprendido en
un rango de valores de 0 a 255. El incremento solo se realiza en el byte derecho del
acumulador 1. No se lleva a cabo ningún traslado a los bytes que están a la izquierda.
La CPU ejecuta la instrucción independientemente del resultado lógico y los bits de estado. La
instrucción no influye ni en el resultado lógico ni en los bits de estado.
Los contenidos de los acumuladores 2, 3 y 4 no cambian.
Si el valor del parámetro está fuera del rango de valores, el resultado quedará falsificado o bien
se generará un mensaje de error.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Incrementar":
Parámetro

Formato

Descripción

<Constante>

Entero de 8 bits

Valor que se aumenta.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

5420

AWL

Explicación

L "Tag_Value"

// Cargar el valor del operando en el acumulador 1.

INC 5

// Aumentar en 5 el valor del acumulador 1.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
AWL

Explicación

T "Tag_Result"

// Transferir el contenido del acumulador 1 al operando.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

DEC: Decrementar
Descripción
La instrucción "Decrementar" reduce el valor que se encuentra en el acumulador 1 en el valor
que se indica como parámetro de la instrucción. El valor indicado puede estar comprendido en
un rango de valores de 0 a 255. El valor solo se reduce en el byte derecho del acumulador 1.
No se lleva a cabo ningún traslado a los bytes que están a la izquierda.
La CPU ejecuta la instrucción independientemente del resultado lógico y los bits de estado. La
instrucción no influye ni en el resultado lógico ni en los bits de estado.
Los contenidos de los acumuladores 2, 3 y 4 no cambian.
Si el valor del parámetro está fuera del rango de valores, el resultado quedará falsificado o bien
se generará un mensaje de error.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Decrementar":
Parámetro

Formato

Descripción

<Constante>

Entero de 8 bits

Valor que se decrementa.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value"

// Cargar el valor del operando en el acumulador 1.

DEC 5

// Decrementar en 5 el valor del acumulador 1.

T "Tag_Result"

// Transferir el contenido del acumulador 1 al operando.

Programación del PLC
Manual de programación y manejo, 11/2019

5421

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

MOD: Obtener resto de división
Descripción
La instrucción "Obtener resto de división" divide el valor del acumulador 2 entre el valor del
acumulador 1 y guardar el resto de la división.
La instrucción interpreta los valores de los acumuladores 1 y 2 como enteros de 32 bits. La
instrucción guarda el resto de la división en el acumulador 1.
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si el resto de la división es
negativo, cero o positivo. Si el resultado está fuera del rango numérico admisible, los bits de
estado OV y OS se ponen a "1".
En caso de dividir entre cero, la instrucción da cero para el resultado. En este caso, los bits de
estado CC 0, CC 1, OV y OS se ponen al estado lógico "1".
En los controladores con dos acumuladores, el contenido del acumulador 2 no cambia
después de ejecutar la instrucción.
En los controladores con cuatro acumuladores, el contenido del acumulador 3 se copia en el
acumulador 2 y el contenido del acumulador 4 se copia en el acumulador 3. El contenido del
acumulador 4 no cambia después de ejecutar la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el dividendo en el acumulador 1.

L "Tag_Value_2"

// Desplazar el dividendo al acumulador 2.
// Cargar el divisor en el acumulador 1.

5422

MOD

// Dividir el valor del acumulador 2 entre el valor
del acumulador 1.

T "Tag_Result"

// Transferir el resto de la división al operando
"Tag_Result".

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Antes de la ejecución
La tabla siguiente muestra los contenidos de los acumuladores 1 y 2 antes de ejecutar la
instrucción "Obtener resto de división":
Acumulador

Valor

Acumulador 2

13

Acumulador 1

4

Después de la ejecución
La tabla siguiente muestra el contenido del acumulador 1 después de ejecutar la instrucción
"Obtener resto de división":
Acumulador

Valor

Acumulador 1

1

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Números en coma flotante
+R: Sumar números en coma flotante
Descripción
La instrucción "Sumar números en coma flotante" suma los valores que se encuentran en los
acumuladores 1 y 2. La instrucción interpreta dichos valores como números en coma flotante.
La instrucción guarda la suma en el acumulador 1.
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si la suma es negativa, cero
o positiva. Si el resultado está fuera del rango numérico admisible, los bits de estado OV y OS
se ponen a "1".
Si se introduce un número en coma flotante no válido o el carácter de infinito (+/- ∞), la
instrucción escribe un valor no válido en el acumulador 1 y pone los bits de estado CC 0, CC
1, OV y OS a "1".
En los controladores con dos acumuladores, el contenido del acumulador 2 no cambia
después de ejecutar la instrucción.

Programación del PLC
Manual de programación y manejo, 11/2019

5423

Instrucciones
4.2 Instrucciones
En los controladores con cuatro acumuladores, el contenido del acumulador 3 se copia en el
acumulador 2 y el contenido del acumulador 4 se copia en el acumulador 3. El contenido del
acumulador 4 no cambia después de ejecutar la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el primer sumando.

L "Tag_Value_2"

// Cargar el segundo sumando.

+R

// Sumar valores

T "Tag_Result"

// Transferir la suma al operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

-R: Restar números en coma flotante
Descripción
La instrucción "Restar números en coma flotante" resta el valor del acumulador 1 del valor del
acumulador 2. La instrucción interpreta los valores de los acumuladores 1 y 2 como números
en coma flotante. La instrucción guarda la diferencia en el acumulador 1.
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si la diferencia es negativa,
cero o positiva. Si el resultado está fuera del rango numérico admisible, los bits de estado OV
y OS se ponen a "1".
Si se introduce un número en coma flotante no válido o el carácter de infinito (+/- ∞), la
instrucción escribe un valor no válido en el acumulador 1 y pone los bits de estado CC 0, CC
1, OV y OS a "1".
En los controladores con dos acumuladores, el contenido del acumulador 2 no cambia
después de ejecutar la instrucción.
En los controladores con cuatro acumuladores, el contenido del acumulador 3 se copia en el
acumulador 2 y el contenido del acumulador 4 se copia en el acumulador 3. El contenido del
acumulador 4 no cambia después de ejecutar la instrucción.

5424

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el primer valor de la resta en el acumulador
1.

L "Tag_Value_2"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el segundo valor de la resta en el acumulador 1.

-R

// Restar el valor del acumulador 1 del valor del acumulador 2.

T "Tag_Result"

// Transferir la diferencia al operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

*R: Multiplicar números en coma flotante
Descripción
La instrucción "Multiplicar números en coma flotante" multiplica los valores que se encuentran
en los acumuladores 1 y 2. La instrucción interpreta dichos valores como números en coma
flotante. La instrucción guarda el producto en el acumulador 1.
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si el producto es negativo,
cero o positivo. Si el resultado está fuera del rango numérico admisible, los bits de estado OV
y OS se ponen a "1".
Si se introduce un número en coma flotante no válido o el carácter de infinito (+/- ∞), la
instrucción escribe un valor no válido en el acumulador 1 y pone los bits de estado CC 0, CC
1, OV y OS a "1".
En los controladores con dos acumuladores, el contenido del acumulador 2 no cambia
después de ejecutar la instrucción.
En los controladores con cuatro acumuladores, el contenido del acumulador 3 se copia en el
acumulador 2 y el contenido del acumulador 4 se copia en el acumulador 3. El contenido del
acumulador 4 no cambia después de ejecutar la instrucción.

Programación del PLC
Manual de programación y manejo, 11/2019

5425

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el multiplicando.

L "Tag_Value_2"

// Cargar el multiplicador.

*R

// Multiplicar valores

T "Tag_Result"

// Transferir el producto al operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

/R: Dividir números en coma flotante
Descripción
La instrucción "Dividir números en coma flotante" divide el valor del acumulador 2 por el valor
del acumulador 1. La instrucción interpreta los valores de los acumuladores 1 y 2 como
números en coma flotante. La instrucción guarda el resultado entero de la división (cociente)
en el acumulador 1.
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si el cociente es negativo,
cero o positivo. Si el resultado está fuera del rango numérico admisible, los bits de estado OV
y OS se ponen a "1".
En caso de dividir entre cero, la instrucción da cero para el cociente. En este caso, los bits de
estado CC 0, CC 1, OV y OS se ponen al estado lógico "1".
Si se introduce un número en coma flotante no válido o el carácter de infinito (+/- ∞), la
instrucción escribe un valor no válido en el acumulador 1 y pone los bits de estado CC 0, CC
1, OV y OS a "1".
En los controladores con dos acumuladores, el contenido del acumulador 2 no cambia
después de ejecutar la instrucción.
En los controladores con cuatro acumuladores, el contenido del acumulador 3 se copia en el
acumulador 2 y el contenido del acumulador 4 se copia en el acumulador 3. El contenido del
acumulador 4 no cambia después de ejecutar la instrucción.

5426

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el dividendo en el acumulador 1.

L "Tag_Value_2"

// Desplazar el dividendo al acumulador 2.
// Cargar el divisor en el acumulador 1.

/R

// Dividir el valor del acumulador 2 entre el valor
del acumulador 1.

T "Tag_Result"

// Transferir el cociente al operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

ABS: Calcular valor absoluto
Descripción
La instrucción "Calcular valor absoluto" calcula el valor absoluto del valor que se encuentra en
el acumulador 1. La instrucción interpreta el contenido del acumulador 1 como número en
coma flotante y pone el signo de la mantisa a "0". El resultado se guarda en el acumulador 1.
La instrucción "Calcular valor absoluto" no influye en los bits de estado.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value"

// Cargar el número en coma flotante en el acumulador
1.

ABS

// Calcular el valor absoluto

T "Tag_Result"

// Transferir el resultado al operando "Tag_Result".

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value

-1.5E+02

Tag_Result

1.5E+02

Programación del PLC
Manual de programación y manejo, 11/2019

5427

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Números en coma flotante, avanzado
SQR: Calcular cuadrado
Descripción
La instrucción "Calcular cuadrado" calcula el cuadrado de un número en coma flotante que se
encuentra en el acumulador 1. El resultado se guarda en el acumulador 1.
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si el resultado es negativo,
cero o positivo. Si el resultado está fuera del rango numérico admisible, los bits de estado OV
y OS se ponen a "1".
Si los números en coma flotante no son válidos, la instrucción pone los bits de estado CC 0, CC
1, OV y OS a "1".
La instrucción solo influye en el contenido del acumulador 1. Los contenidos de los
acumuladores restantes no cambian.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1" en el
acumulador 1.

SQR

// Calcular el cuadrado
// Guardar el resultado en el acumulador 1.

L "Tag_Value_2"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_2" en el
acumulador 1.

*R

// Multiplicar los valores de los acumuladores 1 y 2.
// Guardar el producto en el acumulador 1.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de la palabra de estado (Página 184)

5428

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

SQRT: Calcular raíz cuadrada
Descripción
La instrucción "Calcular raíz cuadrada" calcula la raíz cuadrada del número en coma flotante
que se encuentra en el acumulador 1. El resultado se guarda en el acumulador 1.
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si el resultado es negativo,
cero o positivo. Si el resultado está fuera del rango numérico admisible, los bits de estado OV
y OS se ponen a "1".
Si en el acumulador 1 se introduce un valor inferior a cero o un número en coma flotante no
válido, la instrucción escribe un valor no válido en el acumulador 1 y pone los bits de estado CC
0, CC 1, OV y OS a "1".
Si en el acumulador 1 se encuentra el valor "0", la instrucción devuelve el valor "0".
La instrucción solo influye en el contenido del acumulador 1. Los contenidos de los
acumuladores restantes no cambian.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1" en el
acumulador 1.

L "Tag_Value_2"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_2" en el
acumulador 1.

+R

// Sumar los valores de los acumuladores 1 y 2.
// Guardar la suma en el acumulador 1.

SQRT

// Calcular la raíz cuadrada

T "Tag_Result"

// Transferir el resultado (contenido del acumulador
1) al operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Programación del PLC
Manual de programación y manejo, 11/2019

5429

Instrucciones
4.2 Instrucciones

EXP: Calcular valor exponencial
Descripción
La instrucción "Calcular valor exponencial" calcula la potencia en base e (e = 2.718282) del
número en coma flotante que se encuentra en el acumulador 1. La instrucción guarda el
resultado en el acumulador 1.
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si el resultado es negativo,
cero o positivo. Si el resultado está fuera del rango numérico admisible, los bits de estado OV
y OS se ponen a "1".
Si los números en coma flotante no son válidos, la instrucción pone los bits de estado CC 0, CC
1, OV y OS a "1".
La instrucción solo influye en el contenido del acumulador 1. Los contenidos de los
acumuladores restantes no cambian.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1" en el
acumulador 1.

EXP

// Calcular el valor exponencial
// Guardar el resultado en el acumulador 1.

T "Tag_Result"

// Transferir el resultado (contenido del acumulador
1) al operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

LN: Calcular el logaritmo natural
Descripción
La instrucción "Calcular logaritmo natural" calcula el logaritmo natural en base e (e = 2.718282)
a partir del número en coma flotante que se encuentra en el acumulador 1.
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si el resultado es negativo,
cero o positivo. Si el resultado está fuera del rango numérico admisible, los bits de estado OV
y OS se ponen a "1".

5430

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Si en el acumulador 1 hay un valor inferior o igual a cero, la instrucción escribe un valor no
válido en el acumulador 1 y pone los bits de estado CC 0, CC 1, OV y OS a "1". Si los números
en coma flotante no son válidos, la instrucción pone los bits de estado CC 0, CC 1, OV y OS
también a "1".
La instrucción solo influye en el contenido del acumulador 1. Los contenidos de los
acumuladores restantes no cambian.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1" en el
acumulador 1.

LN

// Calcular el logaritmo natural
// Guardar el resultado en el acumulador 1.

T "Tag_Result"

// Transferir el resultado (contenido del acumulador
1) al operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

SIN: Calcular valor de seno
Descripción
La instrucción "Calcular valor de seno" calcula el seno del ángulo que se encuentra en el
acumulador 1. El ángulo debe indicarse en radianes y encontrarse en el acumulador 1 en forma
de número en coma flotante. La instrucción guarda el resultado en el acumulador 1.
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si el resultado es negativo,
cero o positivo. Si el resultado está fuera del rango numérico admisible, los bits de estado OV
y OS se ponen a "1". Si los números en coma flotante no son válidos, la instrucción pone los
bits de estado CC 0, CC 1, OV y OS a "1".
La instrucción solo influye en el contenido del acumulador 1. Los contenidos de los
acumuladores restantes no cambian.

Programación del PLC
Manual de programación y manejo, 11/2019

5431

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1" en el
acumulador 1.

SIN

// Calcular el seno
// Guardar el resultado en el acumulador 1.

L "Tag_Value_2"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_2" en el
acumulador 1.

*R

// Multiplicar los valores de los acumuladores 1 y 2.
// Guardar el producto en el acumulador 1.

T "Tag_Result"

// Transferir el resultado (contenido del acumulador
1) al operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

ASIN: Calcular arcoseno
Descripción
La instrucción "Calcular valor de arcoseno" calcula, a partir del valor que se encuentra en el
acumulador 1, el tamaño del ángulo que corresponde a dicho valor. El valor del acumulador 1
debe encontrarse en forma de número en coma flotante en un rango de valores de "-1" a "1".
El resultado de la instrucción se devuelve en radianes y se guarda en el acumulador 1. Según
sea el valor del acumulador 1, el resultado puede encontrarse en un rango de valores de -π/2
a +π/2 (π = 3,14159).
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si el resultado es negativo,
cero o positivo. Si el resultado está fuera del rango numérico admisible, los bits de estado OV
y OS se ponen a "1".
Si el valor que está en el acumulador 1 rebasa por exceso el rango admisible, la instrucción
escribe un número en coma flotante no válido en el acumulador 1 y pone los bits de estado CC
0, CC 1, OV y OS a "1". Si los números en coma flotante no son válidos, la instrucción pone los
bits de estado CC 0, CC 1, OV y OS también a "1".
La instrucción solo influye en el contenido del acumulador 1. Los contenidos de los
acumuladores restantes no cambian.

5432

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1" en el
acumulador 1.

ASIN

// Calcular el arcoseno
// Guardar el resultado en el acumulador 1.

L "Tag_Value_2"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_2" en el
acumulador 1.

*R

// Multiplicar los valores de los acumuladores 1 y 2.
// Guardar el producto en el acumulador 1.

T "Tag_Result"

// Transferir el resultado (contenido del acumulador
1) al operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

COS: Calcular valor de coseno
Descripción
La instrucción "Calcular valor de coseno" calcula el coseno del ángulo que se encuentra en el
acumulador 1. El tamaño del ángulo debe indicarse en radianes y encontrarse en el
acumulador 1 en forma de número en coma flotante. La instrucción guarda el resultado en el
acumulador 1.
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si el resultado es negativo,
cero o positivo. Si el resultado está fuera del rango numérico admisible, los bits de estado OV
y OS se ponen a "1". Si los números en coma flotante no son válidos, la instrucción pone los
bits de estado CC 0, CC 1, OV y OS a "1".
La instrucción solo influye en el contenido del acumulador 1. Los contenidos de los
acumuladores restantes no cambian.

Programación del PLC
Manual de programación y manejo, 11/2019

5433

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1" en el
acumulador 1.

COS

// Calcular el coseno
// Guardar el resultado en el acumulador 1.

L "Tag_Value_2"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_2" en el
acumulador 1.

*R

// Multiplicar los valores de los acumuladores 1 y 2.
// Guardar el producto en el acumulador 1.

T "Tag_Result"

// Transferir el resultado (contenido del acumulador
1) al operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

ACOS: Calcular valor de arcocoseno
Descripción
La instrucción "Calcular valor de arcocoseno" calcula, a partir del valor que se encuentra en el
acumulador 1, el tamaño del ángulo que corresponde a dicho valor. El valor del acumulador 1
debe encontrarse en forma de número en coma flotante en un rango de valores de "-1" a "1".
El resultado de la instrucción se devuelve en radianes y se guarda en el acumulador 1. Según
sea el valor del acumulador 1, el resultado puede encontrarse en un rango de valores de "0"
a "π" (π = 3,14159).
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si el resultado es negativo,
cero o positivo. Si el resultado está fuera del rango numérico admisible, los bits de estado OV
y OS se ponen a "1".
Si el valor que está en el acumulador 1 rebasa por exceso el rango admisible, la instrucción
escribe un número en coma flotante no válido en el acumulador 1 y pone los bits de estado CC
0, CC 1, OV y OS a "1". Si los números en coma flotante no son válidos, la instrucción pone los
bits de estado CC 0, CC 1, OV y OS también a "1".
La instrucción solo influye en el contenido del acumulador 1. Los contenidos de los
acumuladores restantes no cambian.

5434

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1" en el
acumulador 1.

ACOS

// Calcular el arcocoseno
// Guardar el resultado en el acumulador 1.

L "Tag_Value_2"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_2" en el
acumulador 1.

*R

// Multiplicar los valores de los acumuladores 1 y 2.
// Guardar el producto en el acumulador 1.

T "Tag_Result"

// Transferir el resultado (contenido del acumulador
1) al operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

TAN: Calcular valor de tangente
Descripción
La instrucción "Calcular valor de tangente" calcula la tangente del ángulo que se encuentra en
el acumulador 1. El tamaño del ángulo debe indicarse en radianes y encontrarse en el
acumulador 1 en forma de número en coma flotante. La instrucción guarda el resultado en el
acumulador 1.
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si el resultado es negativo,
cero o positivo. Si el resultado está fuera del rango numérico admisible, los bits de estado OV
y OS se ponen a "1". Si los números en coma flotante no son válidos, la instrucción pone los
bits de estado CC 0, CC 1, OV y OS a "1".
La instrucción solo influye en el contenido del acumulador 1. Los contenidos de los
acumuladores restantes no cambian.

Programación del PLC
Manual de programación y manejo, 11/2019

5435

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1" en el
acumulador 1.

TAN

// Calcular la tangente
// Guardar el resultado en el acumulador 1.

L "Tag_Value_2"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_2" en el
acumulador 1.

*R

// Multiplicar los valores de los acumuladores 1 y 2.
// Guardar el producto en el acumulador 1.

T "Tag_Result"

// Transferir el resultado (contenido del acumulador
1) al operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

ATAN: Calcular valor de arcotangente
Descripción
La instrucción "Calcular valor de arcotangente" calcula, a partir del valor que se encuentra en
el acumulador 1, el tamaño del ángulo que corresponde a dicho valor. El valor del acumulador
1 debe encontrarse en forma de número en coma flotante.
El resultado de la instrucción se devuelve en radianes y se guarda en el acumulador 1. Según
sea el valor del acumulador 1, el resultado puede encontrarse en un rango de valores de -π/2
a +π/2 (π = 3,14159).
Tras ejecutar la instrucción, los bits de estado CC 0 y CC 1 indican si el resultado es negativo,
cero o positivo. Si el resultado está fuera del rango numérico admisible, los bits de estado OV
y OS se ponen a "1".
Si el valor que está en el acumulador 1 rebasa por exceso el rango admisible, la instrucción
escribe un número en coma flotante no válido en el acumulador 1 y pone los bits de estado CC
0, CC 1, OV y OS a "1". Si los números en coma flotante no son válidos, la instrucción pone los
bits de estado CC 0, CC 1, OV y OS también a "1".
La instrucción solo influye en el contenido del acumulador 1. Los contenidos de los
acumuladores restantes no cambian.

5436

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1" en el
acumulador 1.

ATAN

// Calcular la arcotangente
// Guardar el resultado en el acumulador 1.

L "Tag_Value_2"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_2" en el
acumulador 1.

*R

// Multiplicar los valores de los acumuladores 1 y 2.
// Guardar el producto en el acumulador 1.

T "Tag_Result"

// Transferir el resultado (contenido del acumulador
1) al operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Carga y transferencia
Carga
L: Cargar
Descripción
La instrucción "Cargar" carga el contenido de un operando concreto en el acumulador 1. El
operando que debe cargarse puede estar direccionado en una de las áreas de memoria
siguientes en forma de byte, palabra o palabra doble:
● Memoria imagen de proceso de las entradas y salidas (I, Q)
● Marcas (M)
● Datos locales temporales (L)
● Bloques de datos (DB, DI)
● Punteros
● Periferia (P)

Programación del PLC
Manual de programación y manejo, 11/2019

5437

Instrucciones
4.2 Instrucciones
● Temporizador (T)
● Contador (C)
El área de memoria del acumulador 1 está organizada por bytes y tiene 32 bits de ancho.
La instrucción escribe el contenido de un operando que se cargará en formato de byte alineado
a la derecha en el acumulador 1. Los bytes restantes del acumulador 1 se rellenan con "0".
La instrucción escribe el contenido de un operando que se cargará en formato de palabra en
la palabra derecha del acumulador 1. El byte con un direccionamiento más alto se transfiere al
byte derecho (bits 0 a 7) del acumulador 1. El byte con un direccionamiento más bajo se
escribe a su izquierda. Los bytes restantes de la palabra izquierda del acumulador 1 se
rellenan con "0".
La instrucción escribe el contenido de un operando que se cargará en formato de palabra doble
en los 32 bits del acumulador 1. El byte con un direccionamiento más alto se transfiere al byte
derecho (bits 0 a 7) del acumulador 1. El byte con el direccionamiento más bajo se escribe en
los bits 24 y 31.
La tabla siguiente muestra a modo de ejemplo cómo el contenido del acumulador 1 se
transforma en formato de byte, palabra y palabra doble al cargar operandos:
Instrucción

Acumulador 1
31 . . .

. . . 24

23 . . .

. . . 16

15 . . .

...8

7...

Cargar un
byte:
L MB10

0000

0000

0000

0000

0000

0000

<MB10>

Cargar una
palabra:
L MW10

0000

0000

0000

0000

<MB10>

<MB11>

Cargar una
palabra do‐
ble:
L MD10

<MB10>

<MB12>

<MB13>

<MB11>

...0

Al cargar el operando indicado, el contenido previo del acumulador 1 se desplaza al
acumulador 2. La instrucción "Cargar" transfiere todo el contenido del acumulador 1 al
acumulador 2. El contenido previo del acumulador 2 se pierde.
En los controladores con cuatro acumuladores, los contenidos de los acumuladores 3 y 4 no
se ven influidos por esta instrucción.
La CPU ejecuta la instrucción independientemente del resultado lógico y los bits de estado. La
instrucción no influye ni en el resultado lógico ni en los bits de estado.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Cargar":

5438

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

Secuencias de
bits, enteros, tem‐
porizadores,
REAL, DATE,
TOD, CHAR.

I, Q, PI, M, L, DB,
DI, T, C, puntero,
parámetro

Operando cuyo contenido se
carga.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1" en el
acumulador 1.

L "Tag_Value_2"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_2" en el
acumulador 1.

*R

// Multiplicar los valores de los acumuladores 1 y 2.
// Guardar el producto en el acumulador 1.

L "Tag_Value_3"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_3" en el
acumulador 1.

+R

// Sumar los valores de los acumuladores 1 y 2.
// Guardar la suma en el acumulador 1.

T "Tag_Result"

// Transferir el resultado (contenido del acumulador
1) al operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)
Ejemplos de programación AWL (Página 8102)

L STW: Cargar palabra de estado en acumulador 1
Descripción
La instrucción "Cargar palabra de estado en acumulador 1" carga la palabra de estado en el
acumulador 1. Al ejecutarse, la instrucción escribe los bits de estado en la palabra derecha del
acumulador 1. Los bits restantes del acumulador 1 se rellenan con "0".
La tabla siguiente muestra el contenido del acumulador después de ejecutar la instrucción
"Cargar palabra de estado en acumulador 1":
Acumulador 1
Número de bit

31-9

8

7

6

5

4

3

2

1

0

Contenido

0

BR

CC 1

CC 0

OV

OS

OR

STA

RLO

/FC

Programación del PLC
Manual de programación y manejo, 11/2019

5439

Instrucciones
4.2 Instrucciones
Esta instrucción se ejecuta independientemente del estado lógico del bit de estado.
Nota
Los controladores de la serie S7-300 (excepto el S7-318) no cargan los bits de estado /FC, STA
y OR en el acumulador 1. Estas posiciones se rellenan con "0".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L STW

// Cargar palabra de estado en acumulador 1.

T "Tag_STW"

// Transferir el contenido del acumulador 1 (bits de
estado) al operando "Tag_STW".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

LAR1: Cargar contenido del acumulador 1 en AR1
Descripción
La instrucción "Cargar contenido del acumulador 1 en AR1" carga el contenido del acumulador
1 en el registro de direcciones 1 (AR1). El valor del acumulador 1 debe equivaler al formato de
un puntero de área (POINTER).
La CPU ejecuta la instrucción independientemente del resultado lógico y los bits de estado. La
instrucción no influye ni en el resultado lógico ni en los bits de estado.
Los contenidos de los acumuladores no cambian debido a la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

5440

AWL

Explicación

L P#10.0

// Cargar el puntero (P#10.0) en el acumulador 1.

LAR1

// Cargar el contenido del acumulador 1 en el registro
de direcciones 1.

L MW [AR1,P#4.0]

// Cargar MW14 en acumulador 1.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
AWL

Explicación

L "Tag_Value"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el contenido del operando "Tag_Value" en el
acumulador 1.

>I

// Comparar si el valor del acumulador 2 es mayor que
el valor del acumulador 1.

A I [AR1,P#2.1]

// Consultar si el estado lógico del bit I12.1 es "1"
y combinar el resultado lógicamente con Y con el RLO
actual.

= "Tag_Output"

// Si la condición se cumple (RLO = "1"), poner el
operando "Tag_Output" a "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

LAR1 <D>: Cargar palabra doble o puntero de área en AR1
Descripción
La instrucción "Cargar palabra doble o puntero de área en AR1" carga el contenido de una
palabra doble o de un puntero intraárea o interárea en el registro de direcciones 1 (AR1). El
contenido de la palabra doble debe equivaler al formato de un puntero de área.
El puntero y la palabra doble pueden estar direccionados en una de las áreas de memoria
siguientes:
● Marcas (M)
● Datos locales temporales (L)
● Bloques de datos (DB, DI)
La CPU ejecuta la instrucción independientemente del resultado lógico y los bits de estado. La
instrucción no influye ni en el resultado lógico ni en los bits de estado.
Los contenidos de los acumuladores no cambian debido a la instrucción.

Programación del PLC
Manual de programación y manejo, 11/2019

5441

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Cargar palabra doble o puntero de
área en AR1":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<D>

Input

DWORD, POIN‐
TER

D, M, L

Operando cuyo contenido se
carga.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

LAR1 P#10.0

// Cargar el contenido del puntero intraárea P#10.0 en
el registro de direcciones 1.

L MW [AR1,P#4.0]

// Cargar MW14 en el acumulador 1.

L "Tag_Value"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el contenido del operando "Tag_Value" en el
acumulador 1.

>I

// Comparar si el valor del acumulador 2 es mayor que
el valor del acumulador 1.

A I [AR1,P#2.1]

// Consultar si el estado lógico del bit I12.1 es "1"
y combinar el resultado lógicamente con Y con el RLO
actual.

= "Tag_Output"

// Si la condición se cumple (RLO= "1"), poner el operando "Tag_Output" a "1".

LAR1 MD20

// Cargar el contenido de MD20 (MD20 = P#30.0) en el
registro de direcciones 1.

A I [AR1,P#2.1]

// Consultar si el estado lógico del bit I32.1 es "1"
y combinar el resultado lógicamente con Y con el RLO
actual.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

5442

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

LAR1 AR2: Cargar contenido del AR2 en AR1
Descripción
La instrucción "Cargar contenido del AR2 en AR1" carga el contenido del registro de
direcciones 2 (AR2) en el registro de direcciones 1 (AR1).
La CPU ejecuta la instrucción independientemente del resultado lógico y los bits de estado. La
instrucción no influye ni en el resultado lógico ni en los bits de estado.
Los contenidos de los acumuladores no cambian debido a la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

LAR2 P#20.0

// Cargar el contenido del puntero intraárea P#20.0 en
el registro de direcciones 2.

LAR1 AR2

// Copiar el contenido del registro de direcciones 2
en el registro de direcciones 1.

L MW [AR1,P#4.0]

// Cargar MW24 en el acumulador 1.

T "Tag_2"

// Transferir el acumulador 1 a "Tag_2".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

LAR2: Cargar contenido del acumulador 1 en AR2
Descripción
La instrucción "Cargar contenido del acumulador 1 en AR2" carga el contenido del acumulador
1 en el registro de direcciones 2 (AR2). El valor del acumulador 1 debe equivaler al formato de
un puntero de área (POINTER).
La CPU ejecuta la instrucción independientemente del resultado lógico y los bits de estado. La
instrucción no influye ni en el resultado lógico ni en los bits de estado.
Los contenidos de los acumuladores no cambian debido a la instrucción.

Programación del PLC
Manual de programación y manejo, 11/2019

5443

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L P#10.0

// Cargar el puntero (P#10.0) en el acumulador 1.

LAR2

// Cargar el contenido del acumulador 1 en el registro
de direcciones 2.

L MW [AR2,P#4.0]

// Cargar MW14 en el acumulador 1.

L "Tag_Value"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el contenido del operando "Tag_Value" en el
acumulador 1.

>I

// Comparar si el valor del acumulador 2 es mayor que
el valor del acumulador 1.

A I [AR2,P#2.1]

// Consultar si el estado lógico del bit I12.1 es "1"
y combinar el resultado lógicamente con Y con el RLO
actual.

= "Tag_Output"

// Si la condición se cumple (RLO = "1"), poner el
operando "Tag_Output" a "1".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

LAR2 <D>: Cargar palabra doble o puntero de área en AR2
Descripción
La instrucción "Cargar palabra doble o puntero de área en AR2" carga el contenido de una
palabra doble o de un puntero intraárea o interárea en el registro de direcciones 2 (AR2). El
contenido de la palabra doble debe equivaler al formato de un puntero de área (POINTER).
El puntero y la palabra doble pueden estar direccionados en una de las áreas de memoria
siguientes:
● Marcas (M)
● Datos locales temporales (L)
● Bloques de datos (DB, DI)
La CPU ejecuta la instrucción independientemente del resultado lógico y los bits de estado. La
instrucción no influye ni en el resultado lógico ni en los bits de estado.
Los contenidos de los acumuladores no cambian debido a la instrucción.

5444

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Sintaxis
Para la instrucción "Cargar palabra doble o puntero de área en AR2" se utiliza la siguiente
sintaxis:

LAR2 <D>

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Cargar palabra doble o puntero de
área en AR2":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<D>

Input

DWORD, POIN‐
TER

D, M, L

Operando cuyo contenido se
carga.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

LAR2 P#10.0

// Cargar el contenido del puntero intraárea P#10.0 en
el registro de direcciones 2.

L MW [AR2,P#4.0]

// Cargar MW14 en el acumulador 1.

L "Tag_Value"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el contenido del operando "Tag_Value" en el
acumulador 1.

>I

// Comparar si el valor del acumulador 2 es mayor que
el valor del acumulador 1.

A I [AR2,P#2.1]

// Consultar si el estado lógico del bit I12.1 es "1"
y combinar el resultado lógicamente con Y con el RLO
actual.

= "Tag_Output"

// Si la condición se cumple (RLO = "1"), poner el
operando "Tag_Output" a "1".

LAR2 MD20

// Cargar el contenido de MD20 (MD20 = P#30.0) en el
registro de direcciones 2.

A I [AR2,P#2.1]

// Consultar si el estado lógico del bit I32.1 es "1"
y combinar el resultado lógicamente con Y con el RLO
actual.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)

Programación del PLC
Manual de programación y manejo, 11/2019

5445

Instrucciones
4.2 Instrucciones
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

Transferir
T: Transferir
Descripción
La instrucción "Transferir" transfiere el contenido del acumulador 1 a un operando concreto por
bytes, palabras o palabras dobles. El contenido del acumulador 1 no cambia. El operando
indicado debe estar direccionado en una de las áreas de memoria siguientes:
● Memoria imagen de proceso de las entradas y salidas (I, Q)
● Marcas (M)
● Datos locales temporales (L)
● Bloques de datos (DB, DI)
● Periferia (PQ)
El número de bytes que se transferirán depende del formato del operando indicado. Si el
operando está en formato de byte, la instrucción transfiere el contenido de los bits 0 a 7 del
acumulador 1.
Si el operando indicado está en formato de palabra, la instrucción transfiere el contenido de la
palabra que está alineada a la derecha en el acumulador 1. El byte derecho del acumulador 1
se transfiere al byte con un direccionamiento más alto en el operando. Al byte con un
direccionamiento más bajo del operando se transfieren los bits de 8 a 15 del acumulador 1.
Si el operando indicado está en formato de palabra doble, la instrucción transfiere todo el
contenido del acumulador 1. El byte derecho del acumulador 1 se transfiere al byte con el
direccionamiento más alto del operando. Al byte con un direccionamiento más bajo del
operando se transfieren los bits 24 a 31 del acumulador 1.
La tabla siguiente muestra un ejemplo de cómo se transfiere el contenido del acumulador 1 por
bytes, palabras o palabras dobles:
Instrucción

Acumulador 1

Bits

31 . . ... . 24

23 . . . . . . 16

15 . . .. . . 8

7......0

Contenido del acu‐
mulador 1

Byte (n)

Byte (n+1)

Byte (n+2)

Byte (n+3)

Byte (n+2)

Byte (n+3)

Byte (n+2)

Byte (n+3)

Transferir un byte

Byte (n+3)

Transferir una pala‐
bra
Transferir una pala‐
bra doble

Byte (n)

Byte (n+1)

La CPU ejecuta la instrucción independientemente del resultado lógico y los bits de estado. La
instrucción no influye ni en el resultado lógico ni en los bits de estado.

5446

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La ejecución de la instrucción "Transferir" se ve influida por el Master Control Relay (MCR). Si
el bit MCR se pone a "0", se transfiere el valor "0" al operando indicado.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Transferir":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Output

Secuencias de
bits, enteros, tem‐
porizadores,
REAL, DATE,
TOD, CHAR

I, Q, PQ, M, L, DB,
DI

Operando al que se transfie‐
re el contenido del acumula‐
dor 1.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1" en el
acumulador 1.

L "Tag_Value_2"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_2" en el
acumulador 1.

*R

// Multiplicar los valores de los acumuladores 1 y 2.
// Guardar el producto en el acumulador 1.

T "Tag_Result_1"

// Transferir el producto (contenido del acumulador 1)
al operando "Tag_Result_1".

L "Tag_Value_3"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_3" en el
acumulador 1.

+R

// Sumar los valores de los acumuladores 1 y 2.
// Guardar la suma en el acumulador 1.

T "Tag_Result_2"

// Transferir la suma (contenido del acumulador 1) al
operando "Tag_Result_2".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
El MCR (Master Control Relay) (Página 203)
Indicaciones importantes sobre el uso de la función MCR (Página 204)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Programación del PLC
Manual de programación y manejo, 11/2019

5447

Instrucciones
4.2 Instrucciones
Activar el bit de estado (Página 186)
Ejemplos de programación AWL (Página 8102)

T STW: Transferir acumulador 1 a palabra de estado
Descripción
La instrucción "Transferir acumulador 1 a palabra de estado" transfiere los bits 0 a 8 del
acumulador 1 a la palabra de estado.
La tabla siguiente muestra los bits del acumulador 1 con los que se sobrescriben los bits de
estado después de ejecutar la instrucción:
Acumulador 1
Número de bit

8

7

6

5

4

3

2

1

0

Bits de estado

BR

CC 1

CC 0

OV

OS

OR

STA

RLO

/FC

Esta instrucción se ejecuta independientemente del estado lógico del bit de estado.
Nota
Los bits de la palabra de estado /FC, STA y OR no se cargan con la instrucción "Transferir
acumulador 1 a palabra de estado". Únicamente los bits 1, 4, 5, 6, 7 y 8 se cargan en las
posiciones de bit respectivas de la palabra significativamente baja del acumulador 1.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_STW"

// Cargar el valor del operando "Tag_STW" en el acumulador 1.

T STW

// Transferir los bits 0 a 8 del acumulador 1 a la palabra de estado.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

5448

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

CAR: Intercambiar AR1 y AR2
Descripción
La instrucción "Intercambiar AR1 y AR2" intercambia los contenidos de los registros de
direcciones 1 (AR1) y 2 (AR2).
La CPU ejecuta la instrucción independientemente del resultado lógico y los bits de estado. La
instrucción no influye ni en el resultado lógico ni en los bits de estado.
Los contenidos de los acumuladores no cambian debido a la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

LAR1 P#10.0

// Cargar el contenido del puntero intraárea P#10.0 en
el registro de direcciones 1.

LAR2 P#20.0

// Cargar el contenido del puntero intraárea P#20.0 en
el registro de direcciones 2.

CAR

// Intercambiar el contenido de los registros de direcciones.

L MD [AR1,P#2.0]

// Cargar MD22 en el acumulador 1.

T MD [AR2,P#2.0]

// Transferir MD12 al acumulador 2.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

TAR1: Transferir AR1 a acumulador 1
Descripción
La instrucción "Transferir AR1 a acumulador 1" transfiere el contenido del registro de
direcciones 1 (AR1) al acumulador 1. El contenido del acumulador 1 se desplaza al
acumulador 2.
La CPU ejecuta la instrucción independientemente del resultado lógico y los bits de estado. La
instrucción no influye ni en el resultado lógico ni en los bits de estado.

Programación del PLC
Manual de programación y manejo, 11/2019

5449

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

LAR1 P#15.0

// Cargar el contenido del puntero intraárea P#15.0 en
el registro de direcciones 1.

TAR1

// Transferir el contenido del registro de direcciones
1 (P#15.0) al acumulador 1.

T "Tag_Pointer"

// Transferir el contenido del acumulador 1 al operando "Tag_Pointer".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

TAR1 <D>: Transferir AR1 a palabra doble
Descripción
La instrucción "Transferir AR1 a palabra doble" transfiere el contenido del registro de
direcciones 1 (AR1) a una palabra doble. La palabra doble debe estar direccionada en una de
las áreas de memoria siguientes:
● Marcas (M)
● Datos locales temporales (L)
● Bloques de datos (DB, DI)
La CPU ejecuta la instrucción independientemente del resultado lógico y los bits de estado. La
instrucción no influye ni en el resultado lógico ni en los bits de estado.
Los contenidos de los acumuladores no cambian debido a la instrucción.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Transferir AR1 a palabra doble":

5450

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<D>

Output

DWORD

D, M, L

Operando al que se transfie‐
re el contenido del registro de
direcciones 1.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

TAR1 %DBD20

// Transferir el contenido del registro de direcciones
1 a la doble palabra de datos DBD20.

TAR1 %DID30

// Transferir el contenido del registro de direcciones
1 a la doble palabra de instancia DID30.

TAR1 %LD18

// Transferir el contenido del registro de direcciones
1 a la doble palabra de datos locales LD18.

TAR1 %MD24

// Transferir el contenido del registro de direcciones
1 a la doble palabra de marcas MD24.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

TAR1 AR2: Transferir AR1 a AR2
Descripción
La instrucción "Transferir AR1 a AR2" copia el contenido del registro de direcciones 1 (AR1) en
el registro de direcciones 2 (AR2).
La CPU ejecuta la instrucción independientemente del resultado lógico y los bits de estado. La
instrucción no influye ni en el resultado lógico ni en los bits de estado.
Los contenidos de los acumuladores no cambian debido a la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

LAR1 P#10.4

// Cargar el contenido del puntero intraárea P#10.4 en
el registro de direcciones 1.

TAR1 AR2

// Transferir el contenido del registro de direcciones
1 al registro de direcciones 2.

A I [AR2,P#3.2]

// Consultar si el estado lógico del bit I13.6 es "1"
y combinar el resultado lógicamente con Y con el RLO
actual.

= "Tag1"

// Poner el operando "Tag_1" a "1".

Programación del PLC
Manual de programación y manejo, 11/2019

5451

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

TAR2: Transferir AR2 a acumulador 1
Descripción
La instrucción "Transferir AR2 a acumulador 1" transfiere el contenido del registro de
direcciones 2 (AR2) al acumulador 1. El contenido del acumulador 1 se desplaza al
acumulador 2.
La CPU ejecuta la instrucción independientemente del resultado lógico y los bits de estado. La
instrucción no influye ni en el resultado lógico ni en los bits de estado.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

LAR2 P#20.0

// Cargar el contenido del puntero intraárea P#20.0 al
registro de direcciones 2.

TAR2

// Transferir el contenido del registro de direcciones
2 (P#20.0) al acumulador 1.

T "Tag_Pointer"

// Transferir el contenido del acumulador 1 al operando "Tag_Pointer".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

5452

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

TAR2 <D>: Transferir AR2 a palabra doble
Descripción
La instrucción "Transferir AR2 a palabra doble" transfiere el contenido del registro de
direcciones 2 (AR2) a una palabra doble. La palabra doble debe estar direccionada en una de
las áreas de memoria siguientes:
● Marcas (M)
● Datos locales temporales (L)
● Bloques de datos (DB, DI)
La CPU ejecuta la instrucción independientemente del resultado lógico y los bits de estado. La
instrucción no influye ni en el resultado lógico ni en los bits de estado.
Los contenidos de los acumuladores no cambian debido a la instrucción.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "Transferir AR2 a palabra doble":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<D>

Output

DWORD

D, M, L

Operando al que se transfie‐
re el contenido del registro de
direcciones 2.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

TAR2 %DBD20

// Transferir el contenido del registro de direcciones
2 a la doble palabra de datos DBD20.

TAR2 %DID30

// Transferir el contenido del registro de direcciones
2 a la doble palabra de instancia DID30.

TAR2 %LD18

// Transferir el contenido del registro de direcciones
2 a la doble palabra de datos locales LD18.

TAR2 %MD24

// Transferir el contenido del registro de direcciones
2 a la doble palabra de marcas MD24.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

Programación del PLC
Manual de programación y manejo, 11/2019

5453

Instrucciones
4.2 Instrucciones

Conversión
BTI: Convertir BCD en entero (16 bits)
Descripción
La instrucción "Convertir BCD en entero (16 bits)" convierte el valor que está en la palabra
derecha del acumulador 1 en un entero (de 16 bits). La instrucción interpreta el valor que debe
convertirse como número decimal codificado en binario de tres dígitos (BCD).
Los bits 1 a 11 del acumulador 1 indican el valor que se convertirá. Se admiten valores dentro
del rango "-999" a "+999".
El signo del valor del resultado se lee del bit 15 del acumulador 1. Si el estado lógico del bit es
"0", el signo es positivo. Si el estado lógico del bit es "1", el signo es negativo. Los bits 12 a 14
no se utilizan en la conversión.
Si el código BCD contiene un error de BCD, la CPU notifica un error de programación y llama
el bloque de organización "OB121". Si el bloque de organización OB121 no existe, la CPU
pasa a STOP.
El resultado de la conversión se guarda en la palabra derecha del acumulador 1. El contenido
de la palabra izquierda del acumulador 1 no se ve influido por la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Input"

// Cargar BCD en el acumulador 1.

BTI

// Convertir BCD en entero de 16 bits.

T "Tag_Output"

// Transferir el resultado al operando "Tag_Output".

La figura siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
ಯಯ

ಯಯ



ಯ7DJB,QSXWಯ
%7,
ಯ7DJB2XWSXWಯ

ಯಯ








ಯಯ



ಯಯ%&'



ಯಯHQWHUR

&RQYHUWLU%&'HQHQWHUR ELWV






Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)

5454

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

ITB: Convertir entero en BCD (16 bits)
Descripción
La instrucción "Convertir entero en BCD (16 bits)" convierte el valor que se encuentra en la
palabra derecha del acumulador 1 en un número decimal en código binario de tres dígitos
(BCD). La instrucción interpreta el valor que debe convertirse como un entero de 16 bits.
Los bits 0 a 11 del acumulador 1 indican el valor que se convertirá. Se admiten valores dentro
del rango "-999" a "+999". Si el valor que debe convertirse está fuera de este rango, los bits OV
y OS se ponen al estado lógico "1". En este caso no se lleva a cabo la conversión.
El signo del valor del resultado se lee de los bits 12 a 15 del acumulador 1. Si el estado lógico
de los bits es "0", el signo es positivo. Si el estado lógico de los cuatro bits es "1", el signo es
negativo.
El resultado de la conversión se guarda en la palabra derecha del acumulador 1. El contenido
de la palabra izquierda del acumulador 1 no se ve influido por la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Input"

// Cargar entero (16 bits) en el acumulador 1.

ITB

// Convertir entero en BCD.

T "Tag_Output"

// Transferir el resultado al operando "Tag_Output".

La figura siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:



ಯ7DJB,QSXWಯ



,7%
ಯ7DJB2XWSXWಯ











ಯಯHQWHUR



ಯಯ%&'

&RQYHUWLUHQWHURHQ%&' ELWV




ಯಯ

ಯಯ


ಯಯ

ಯಯ

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números enteros (Página 190)

Programación del PLC
Manual de programación y manejo, 11/2019

5455

Instrucciones
4.2 Instrucciones
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

BTD: Convertir BCD en entero doble (32 bits)
Descripción
La instrucción "Convertir BCD en entero doble (32 bits)" convierte el valor que está en el
acumulador 1 en un entero doble (de 32 bits). La instrucción interpreta el valor que debe
convertirse como número decimal codificado en binario de siete dígitos (BCD).
Los bits 0 a 27 del acumulador 1 indican el valor que se convertirá. Se admiten valores dentro
del rango "-9999999" a "+9999999".
El signo del valor del resultado se lee del bit 31 del acumulador 1. Si el estado lógico del bit es
"0", el signo es positivo. Si el estado lógico del bit es "1", el signo es negativo. Los bits 28 a 30
no se utilizan en la conversión.
El resultado de la instrucción se guarda en el acumulador 1. El contenido del acumulador 2 no
cambia.
Si el código BCD contiene una pseudotétrada, la CPU notifica un error de programación y llama
el bloque de organización "OB121". Si el bloque de organización OB121 no existe, la CPU
pasa al estado "STOP".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Input"

// Cargar BCD en el acumulador 1.

BTD

// Convertir BCD en un entero de 32 bits.

T "Tag_Output"

// Transferir el resultado al operando "Tag_Output".

La figura siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
ಯಯ

ಯಯ

ಯಯ

%7'
ಯ7DJB2XWSXWಯ

5456

ಯಯ

 


ಯ7DJB,QSXWಯ

ಯಯ

ಯಯ

ಯಯ

ಯಯ


        ಯಯ
&RQYHUWLU%&'HQHQWHUR ELWV
        ಯಯ

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

ITD: Convertir entero (16 bits) en entero doble (32 bits)
Descripción
La instrucción "Convertir entero (16 bits) en entero doble (32 bits)" convierte el valor que se
encuentra en la palabra derecha del acumulador 1 en un entero doble (de 32 bits). La
instrucción interpreta el valor que debe convertirse como un entero de 16 bits.
Los bits 0 a 15 se aplican sin cambios en la conversión. Los bits 16 a 31 del valor del resultado
se rellenan con el estado lógico del bit 15.
El valor del resultado se guarda en el acumulador 1. El contenido del acumulador 2 no cambia.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Input"

// Cargar entero (16 bits) en el acumulador 1.

ITD

// Convertir entero de 16 bits en entero doble de 32
bits.

T "Tag_Output"

// Transferir el resultado al operando "Tag_Output".

La tabla siguiente muestra el contenido del acumulador 1 antes y después de ejecutar la
instrucción:
Estado

Acumulador 1
31 . . .

....

....

. . . 16

15 . . .

....

....

...0

Antes de la
ejecución

XXXX

XXXX

XXXX

XXXX

1111

1111

1111

0110

Después de
la ejecución

1111

1111

1111

1111

1111

1111

1111

0110

X : el estado lógico de los bits no es relevante para la conversión

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)

Programación del PLC
Manual de programación y manejo, 11/2019

5457

Instrucciones
4.2 Instrucciones
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

DTB: Convertir entero doble (32 bits) en BCD
Descripción
La instrucción "Convertir entero doble (32 bits) en BCD" convierte el valor que está en el
acumulador 1 en un número decimal en código binario de siete dígitos (BCD). La instrucción
interpreta el valor que debe convertirse como un entero de 32 bits.
Los bits 0 a 27 del acumulador 1 indican el valor que se convertirá. Se admiten valores dentro
del rango "-9999999" a "+9999999". Si el valor que debe convertirse está fuera de este rango,
los bits OV y OS se ponen al estado lógico "1". En este caso no se lleva a cabo la conversión.
El signo del valor del resultado se lee de los bits 28 a 31 del acumulador 1. Si el estado lógico
de los bits es "0", el signo es positivo. Si el estado lógico de los cuatro bits es "1", el signo es
negativo.
El resultado de la instrucción se guarda en el acumulador 1. El contenido del acumulador 2 no
cambia.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Input"

// Cargar entero de 32 bits en el acumulador 1.

DTB

// Convertir entero de 32 bits en BCD

T "Tag_Output"

// Transferir el resultado al operando "Tag_Output".

La figura siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
 


ಯ7DJB,QSXWಯ

       

'7%
ಯ7DJB2XWSXWಯ



ಯಯHQWHUR

&RQYHUWLUHQWHURHQ%&' ELWV

       
ಯಯ

ಯಯ

ಯಯ

ಯಯ

ಯಯ

ಯಯ

ಯಯ
ಯಯ
ಯಯ%&'

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números enteros (Página 190)

5458

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

DTR: Convertir entero doble (32 bits) en número en coma flotante
Descripción
La instrucción "Convertir entero doble (32 bits) en número en coma flotante" convierte el valor
que está en el acumulador 1 en un número en coma flotante. La instrucción interpreta el valor
que debe convertirse como un entero de 32 bits.
Puesto que un entero de 32 bits es más exacto que un número en coma flotante, el resultado
de la conversión se redondea al entero superior.
El resultado de la instrucción se guarda en el acumulador 1. El contenido del acumulador 2 no
cambia.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Input"

// Cargar entero de 32 bits en el acumulador 1.

DTR

// Convertir entero de 32 bits en número en coma flotante.

T "Tag_Output"

// Transferir el resultado al operando "Tag_Output".

La figura siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
ಯ7DJB,QSXWಯ
'75

       
&RQYHUWLUHQWHURGREOH ELWV HQQ¼PHURHQFRPDIORWDQWH


7DJB2XWSXW

ಯಯHQWHUR




       
([SRQHQWHELWV

0DQWLVDELWV

ELW
6LJQRGHODPDQWLVD

ಯಯ,((()3

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)

Programación del PLC
Manual de programación y manejo, 11/2019

5459

Instrucciones
4.2 Instrucciones
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

INVI: Generar complemento a uno de un entero (16 bits)
Descripción
La instrucción "Generar complemento a uno de un entero (16 bits)" niega bit por bit el valor que
se encuentra en la palabra derecha del acumulador 1.
Al ejecutarse, la instrucción invierte el estado lógico de cada uno de los bits de la palabra
derecha del acumulador 1. Los unos son sustituidos por ceros y viceversa.
El resultado se guarda en la palabra derecha del acumulador 1. El contenido de la palabra
izquierda del acumulador 1 no se ve influido por la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Input"

// Cargar el valor en el acumulador 1.

INVI

// Generar un complemento a 1

T "Tag_Output"

// Transferir el resultado al operando "Tag_Output".

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor
15 . . .

....

....

...0

Tag_Input

0110

0011

1010

1110

Tag_Output

1001

1100

0101

0001

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

5460

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

INVD: Generar complemento a uno de un entero doble (32 bits)
Descripción
La instrucción "Generar complemento a uno de un entero doble (32 bits)" niega bit por bit el
valor que se encuentra en el acumulador 1.
Al ejecutarse, la instrucción invierte el estado lógico de cada uno de los bits del acumulador 1.
Los unos son sustituidos por ceros y viceversa.
El resultado de la instrucción se guarda en el acumulador 1. El contenido del acumulador 2 no
cambia.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Input"

// Cargar el valor en el acumulador 1.

INVD

// Generar un complemento a 1

T "Tag_Output"

// Transferir el resultado al operando "Tag_Output".

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor
31 . . .

....

....

. . . 16

15 . . .

....

....

...0

Tag_Input

0110

1111

1000

1100

0110

0011

1010

1110

Tag_Output

1001

0000

0111

0011

1001

1100

0101

0001

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

NEGI: Negar entero (16 bits)
Descripción
La instrucción "Negar entero (16 bits)" invierte el signo del valor que está en la palabra derecha
del acumulador 1 por una formación de complemento a dos. La instrucción interpreta el valor
del acumulador 1 como un entero de 16 bits.

Programación del PLC
Manual de programación y manejo, 11/2019

5461

Instrucciones
4.2 Instrucciones
La ejecución de la instrucción es equivalente a una multiplicación por "-1". El resultado de la
instrucción se guarda en la palabra derecha del acumulador 1. El contenido de la palabra
izquierda del acumulador 1 no se ve influido por la instrucción.
La instrucción "Negar entero (16 bits)" influye en los bits de estado CC 0, CC 1, OV y OS. La
tabla siguiente muestra cómo la instrucción influye en los bits de estado en función del
resultado:
Resultado:

CC 1

CC 0

OV

OS

de +1 a +32767

1

0

0

-

0

0

0

0

-

de -1 a -32767

0

1

0

-

(-) 32768

0

1

1

1

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Input"

// Cargar el valor en el acumulador 1.

NEGI

// Negar entero de 16 bits

T "Tag_Output"

// Transferir el resultado al operando "Tag_Output".

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor
15 . . .

....

....

...0

Tag_Input

0101

1101

0011

1000

Tag_Output

1010

0010

1100

1000

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

NEGD: Negar entero doble (32 bits)
Descripción
La instrucción "Negar entero doble (32 bits)" invierte el signo del valor que se encuentra en el
acumulador 1 por una formación de complemento a dos. La instrucción interpreta el valor del
acumulador 1 como un entero de 32 bits.

5462

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La ejecución de la instrucción es equivalente a una multiplicación por "-1". El resultado de la
instrucción se guarda en el acumulador 1. El contenido del acumulador 2 no cambia.
La instrucción "Negar entero doble (32 bits)" influye en los bits de estado CC 0, CC 1, OV y OS.
La tabla siguiente muestra cómo la instrucción influye en los bits de estado en función del
resultado:
Resultado

CC 1

CC 0

OV

OS

de +1 a +2147483647

1

0

0

-

0

0

0

0

-

de -1 a -2147483647

0

1

0

-

(-) 2147483648

0

1

1

1

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Input"

// Cargar el valor en el acumulador 1.

NEGD

// Negar entero doble de 32 bits.

T "Tag_Output"

// Transferir el resultado al operando "Tag_Output".

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Estado

Valor
31 . . .

....

....

. . . 16

15 . . .

....

....

...0

Tag_Input

0101

1111

0110

0100

0101

1101

0011

1000

Tag_Output

1010

0000

1001

1011

1010

0010

1100

1000

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Activar los bits de estado en instrucciones con números enteros (Página 190)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

NEGR: Negar número en coma flotante
Descripción
La instrucción "Negar número en coma flotante" invierte el estado lógico del bit 31 en el
acumulador 1. La instrucción interpreta el valor del acumulador 1 como un número en coma
flotante. El bit 31 del número en coma flotante contiene el signo de la mantisa.

Programación del PLC
Manual de programación y manejo, 11/2019

5463

Instrucciones
4.2 Instrucciones
La ejecución de la instrucción es equivalente a una multiplicación por "-1". Tras ejecutar la
instrucción se invierte el signo de la mantisa.
El resultado de la instrucción se guarda en el acumulador 1. El contenido del acumulador 2 no
cambia.
La instrucción no influye en los bits de estado.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Input"

// Cargar el número en coma flotante en el acumulador
1.

NEGR

// Negar número en coma flotante.

T "Tag_Output"

// Transferir el resultado al operando "Tag_Output".

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Input

1.5E+02

Tag_Output

-1.5E+02

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

CAW: Invertir orden de los bytes en la palabra derecha del acumulador 1
Descripción
La instrucción "Invertir orden de los bytes en la palabra derecha del acumulador 1" invierte el
orden de los dos bytes derechos en la palabra derecha del acumulador 1.
La tabla siguiente muestra el contenido del acumulador 1 antes y después de ejecutar la
instrucción:
Estado

Bytes del acumulador 1

Antes de la ejecución

Valor A

Valor B

Valor C

Valor D

Después de la ejecución

Valor A

Valor B

Valor D

Valor C

El resultado de la instrucción se guarda en la palabra derecha del acumulador 1. Los bytes de
la palabra izquierda del acumulador 1 no se ven influidos por la instrucción y no cambian.

5464

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Input"

// Cargar el valor en el acumulador.

CAW

// Invertir orden de los bytes en la palabra derecha
del acumulador 1.

T "Tag_Output"

// Transferir el resultado al operando "Tag_Output".

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Input

0000

1111

0000

1111

Tag_Output

0000

1111

1111

0000

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

CAD: Invertir orden de los bytes en todo el acumulador 1
Descripción
La instrucción "Invertir orden de los bytes en todo el acumulador 1" invierte el orden de los
bytes en el acumulador 1.
La tabla siguiente muestra el contenido del acumulador 1 antes y después de ejecutar la
instrucción:
Estado

Bytes del acumulador 1

Antes de la ejecución

Valor A

Valor B

Valor C

Valor D

Después de la ejecución

Valor D

Valor C

Valor B

Valor A

El resultado de la instrucción se guarda en el acumulador 1. El contenido del acumulador 2 no
cambia.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Input"

// Cargar el valor del operando en el acumulador 1.

Programación del PLC
Manual de programación y manejo, 11/2019

5465

Instrucciones
4.2 Instrucciones
AWL

Explicación

CAD

// Invertir orden de los bytes del acumulador 1.

T "Tag_Output"

// Transferir el resultado al operando "Tag_Output".

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Input

1111

0000

0000

1111

0000

0000

1111

1111

Tag_Output

1111

1111

0000

0000

0000

1111

1111

0000

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

RND: Redondear número
Descripción
La instrucción "Redondear número" convierte el valor que se encuentra en el acumulador 1 en
un entero doble (de 32 bits). La instrucción interpreta el valor que debe convertirse como un
número en coma flotante y lo redondea al siguiente entero.
Si el número en coma flotante se encuentra exactamente entre un número par y uno impar, se
selecciona el número par como resultado.
El resultado de la instrucción se guarda en el acumulador 1. El contenido del acumulador 2 no
cambia.
La conversión no se ejecuta y los bits de estado OV y OS se activan si se cumple una de las
condiciones siguientes:
● El valor que se encuentra en el acumulador 1 no es un número en coma flotante válido.
● El resultado está fuera del rango permitido para un entero del tipo de datos DINT.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

5466

AWL

Explicación

L "Tag_Input"

// Cargar el número en coma flotante en el acumulador
1.

RND

// Redondear un número en coma flotante a un entero.

T "Tag_Output"

// Transferir el resultado al operando "Tag_Output".

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valores

Tag_Input

101.5

-101.5

Tag_Output

102

-102

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

TRUNC: Truncar a entero
Descripción
La instrucción "Truncar a entero" convierte el valor que se encuentra en el acumulador 1 en un
entero doble (de 32 bits). La instrucción interpreta el valor que debe convertirse como número
en coma flotante y devuelve como resultado su parte entera.
El resultado de la instrucción se guarda en el acumulador 1. El contenido del acumulador 2 no
cambia.
La conversión no se ejecuta y los bits de estado OV y OS se activan si se cumple una de las
condiciones siguientes:
● El valor que se encuentra en el acumulador 1 no es un número en coma flotante válido.
● El resultado está fuera del rango permitido para un entero del tipo de datos DINT.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Input"

// Cargar el número en coma flotante en el acumulador
1.

TRUNC

// Convertir el número en coma flotante en un entero
del tipo de datos DINT.

T "Tag_Output"

// Transferir el resultado al operando "Tag_Output".

Programación del PLC
Manual de programación y manejo, 11/2019

5467

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valores

Tag_Input

101.5

-101.5

Tag_Output

101

-101

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

RND+: Redondear número en coma flotante al siguiente entero superior
Descripción
La instrucción "Redondear un número en coma flotante al siguiente entero superior" convierte
el valor que se encuentra en el acumulador 1 en un entero doble (de 32 bits). La instrucción
interpreta el valor que debe convertirse como número en coma flotante y lo redondea al
siguiente entero superior. El resultado de la instrucción es un número del tipo de datos DINT,
mayor o igual al número en coma flotante que se ha convertido.
El resultado de la instrucción se guarda en el acumulador 1. El contenido del acumulador 2 no
cambia.
La conversión no se ejecuta y los bits de estado OV y OS se activan si se cumple una de las
condiciones siguientes:
● El valor que se encuentra en el acumulador 1 no es un número en coma flotante válido.
● El resultado está fuera del rango permitido para un entero del tipo de datos DINT.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

5468

AWL

Explicación

L "Tag_Input"

// Cargar el número en coma flotante en el acumulador
1.

RND+

// Redondear el número en coma flotante al siguiente
entero superior.

T "Tag_Output"

// Transferir el resultado al operando "Tag_Output".

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valores

Tag_Input

100.5

-100.5

Tag_Output

101

-100

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

RND-: Redondear número en coma flotante al siguiente entero inferior
Descripción
La instrucción "Redondear un número en coma flotante al siguiente entero inferior" convierte
el valor que se encuentra en el acumulador 1 en un entero doble (de 32 bits). La instrucción
interpreta el valor que debe convertirse como número en coma flotante y lo redondea al
siguiente entero inferior. El resultado de la instrucción es un número del tipo de datos DINT,
menor o igual al número en coma flotante que se ha convertido.
El resultado de la instrucción se guarda en el acumulador 1. El contenido del acumulador 2 no
cambia.
La conversión no se ejecuta y los bits de estado OV y OS se activan si se cumple una de las
condiciones siguientes:
● El valor que se encuentra en el acumulador 1 no es un número en coma flotante válido.
● El resultado está fuera del rango permitido para un entero del tipo de datos DINT.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Input"

// Cargar el número en coma flotante en el acumulador
1.

RND-

// Redondear el número en coma flotante al siguiente
entero inferior.

T "Tag_Output"

// Transferir el resultado al operando "Tag_Output".

Programación del PLC
Manual de programación y manejo, 11/2019

5469

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valores

Tag_Input

100.5

-100.5

Tag_Output

100

-101

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar los bits de estado en instrucciones con números en coma flotante (Página 191)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Control del programa
Operaciones de salto
Etiqueta
Descripción
Una etiqueta sirve para identificar el punto del programa en el que debe continuar la ejecución
tras un salto. El nombre de la etiqueta puede comprender un máximo de 128 letras, cifras o
caracteres de subrayado.
La etiqueta y la instrucción en la que se indica la etiqueta como destino del salto deben
encontrarse en el mismo bloque. El nombre de una etiqueta debe ser único en el bloque. A toda
etiqueta se puede acceder desde distintas posiciones.
Es posible saltar hacia delante y hacia atrás. La distancia máxima de salto es de -32768 o
+32767 palabras de la lógica del programa. El número máximo real de instrucciones que
pueden saltarse depende de la combinación de instrucciones dentro del programa
(instrucciones de una, dos o tres palabras).
Si se utiliza la funcionalidad MCR, la etiqueta debe encontrase en el mismo rango de MCR que
la instrucción de salto.
Para la etiqueta deben observarse las siguientes reglas gramaticales:
● Letras (a - z, A - Z)
● Una combinación de letras y números. Es importante observar el orden, es decir, primero
las letras y después los números (a - z, A - Z, 0 - 9).
● No pueden utilizarse caracteres especiales o una combinación de letras y números en
orden inverso, es decir, primero los números y después las letras (0 - 9, a - z, A - Z).

5470

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Input_1"

// Cargar el primer valor de comparación.

L "Tag_Input_2"

// Cargar el segundo valor de comparación.

>I

// Consultar si el valor del operando "Tag_Input_1" es
mayor que el valor del operando "Tag_Input_2".

JC MyLABEL

// Si el resultado de la consulta es "1", saltar a la
etiqueta "MyLABEL" y continuar allí el procesamiento
del programa
// Si el resultado de la consulta es "0", procesar la
instrucción siguiente.

L "Tag_Input_3"

// Cargar el contenido del operando "Tag_Input_3" en
el acumulador 1.

T "Tag_Output"

// Cargar el contenido del acumulador 1 en el operando
"Tag_Output".

MyLABEL: A "Tag_Input_4"

// Continuar la ejecución del programa en este punto
en caso de haberse ejecutado un salto.
// Consultar si el operando "Tag_Input_4" está a "1".

Consulte también
Principios básicos de la palabra de estado (Página 184)
Vista general de los tipos de datos válidos (Página 241)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

JU: Salto incondicional
Descripción
La instrucción "Salto incondicional" interrumpe la ejecución lineal del programa y continuarla
en el punto marcado por la etiqueta indicada. Esta instrucción se ejecuta siempre,
independientemente de las condiciones.
La instrucción "Salto incondicional" no influye en los bits de estado.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Salto incondicional":
Parámetro

Descripción

<Etiqueta>

Nombre simbólico del destino del salto

Programación del PLC
Manual de programación y manejo, 11/2019

5471

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Input_1"

// Cargar el primer valor de comparación.

L "Tag_Input_2"

// Cargar el segundo valor de comparación.

>I

// Consultar si el valor del operando "Tag_Input_1" es
mayor que el valor del operando "Tag_Input_2".

JC MyLABEL_1

// Si el resultado de la consulta es "1", saltar a la
etiqueta "MyLABEL_1" y continuar allí el procesamiento del programa
// Si el resultado de la consulta es "0", continuar
con la ejecución lineal del programa.

L "Tag_Input_3"

// Cargar el contenido del operando "Tag_Input_3" en
el acumulador 1.

T "Tag_Output_1"

// Cargar el contenido del acumulador 1 en el operando
"Tag_Output_1".

JU MyLABEL_2

// Saltar a la etiqueta "MyLABEL_2" y continuar allí
con la ejecución del programa.

MyLABEL_1: L "Tag_Input_4"

// Etiqueta
// Cargar el contenido del operando "Tag_Input_4" en
el acumulador 1.

T "Tag_Output_2"
MyLABEL_2: A "Tag_Input_5"

// Cargar el contenido del acumulador 1 en el operando
"Tag_Output_2".
// Etiqueta "MyLABEL_2"
// Consultar si el operando "Tag_Input_5" está a "1".

Consulte también
Activar el bit de estado en instrucciones de control del programa (Página 192)
Consultar el bit de estado con instrucciones de salto (Página 196)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Ejemplos de programación AWL (Página 8102)

JC: Saltar si RLO = 1
Descripción
La instrucción "Saltar si RLO = 1" interrumpe la ejecución lineal del programa en función del
resultado lógico y continuarla en el punto marcado por la etiqueta indicada.
El salto a la etiqueta indicada se ejecuta solo si el RLO actual es "1". Si el RLO actual antes de
la instrucción es "0", el salto no se ejecuta y la ejecución del programa continúa con la
instrucción siguiente.

5472

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La instrucción "Saltar si RLO = 1" pone el RLO y el bit de estado STA a "1" y los bits de estado
OR y /FC a "0", tanto si la condición se cumple como si no.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Saltar si RLO = 1":
Parámetro

Descripción

<Etiqueta>

Nombre simbólico del destino del salto

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Input_1"

// Cargar el primer valor de comparación.

L "Tag_Input_2"

// Cargar el segundo valor de comparación.

>I

// Consultar si el valor del operando "Tag_Input_1" es
mayor que el valor del operando "Tag_Input_2".

JC MyLABEL

// Si el RLO = "1", saltar a la etiqueta "MyLABEL" y
continuar allí la ejecución del programa.
// Si el RLO = "0", procesar la instrucción siguiente.

L "Tag_Input_3"

// Cargar el contenido del operando "Tag_Input_3" en
el acumulador 1.

T "Tag_Output_1"

// Cargar el contenido del acumulador 1 en el operando
"Tag_Output_1".

MyLABEL: L "Tag_Input_4"

// Continuar la ejecución del programa en este punto
en caso de haberse ejecutado un salto.
// Cargar el contenido del operando "Tag_Input_4" en
el acumulador 1.

T "Tag_Output_2"

// Transferir el contenido del acumulador 1 al operando "Tag_Output_2".

Consulte también
Activar el bit de estado en instrucciones de control del programa (Página 192)
Consultar el bit de estado con instrucciones de salto (Página 196)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Ejemplos de programación AWL (Página 8102)

Programación del PLC
Manual de programación y manejo, 11/2019

5473

Instrucciones
4.2 Instrucciones

JCN: Saltar si RLO = 0
Descripción
La instrucción "Saltar si RLO = 0" interrumpe la ejecución lineal del programa en función del
resultado lógico (RLO) y continuarla en el punto marcado por la etiqueta indicada.
El salto a la etiqueta indicada se ejecuta solo si el RLO actual es "0". Si el RLO actual antes de
la instrucción es "1", el salto no se ejecuta y la ejecución del programa continúa con la
instrucción siguiente.
La instrucción "Saltar si RLO = 0" pone el RLO y el bit de estado STA a "1" y los bits de estado
OR y /FC a "0", tanto si la condición se cumple como si no.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Saltar si RLO = 0":
Parámetro

Descripción

<Etiqueta>

Nombre simbólico del destino del salto

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

A "Tag_Input_1"

// Consultar si el operando "Tag_Input_1" es "1" y
combinar el resultado lógicamente con Y.

A "Tag_Input_2"

// Consultar si el operando "Tag_Input_2" es "1" y
combinar el resultado lógicamente con Y.

JCN MyLABEL

// Si el RLO ="0", saltar a la etiqueta "MyLABEL" y
continuar allí la ejecución del programa.

L "Tag_Input_3"

// Cargar el contenido del operando "Tag_Input_3" en
el acumulador 1.

T "Tag_Output"

// Cargar el contenido del acumulador 1 en el operando
"Tag_Output".

MyLABEL: A "Tag_Input_4"

// Continuar la ejecución del programa en este punto
en caso de haberse ejecutado un salto.

// Si el RLO = "1", procesar la instrucción siguiente.

// Consultar si el operando "Tag_Input_4" es "1" y
combinar el resultado lógicamente con Y con el RLO.

Consulte también
Activar el bit de estado en instrucciones de control del programa (Página 192)
Consultar el bit de estado con instrucciones de salto (Página 196)
Añadir instrucciones AWL (Página 8079)

5474

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Procesar instrucciones AWL (Página 8098)
Ejemplos de programación AWL (Página 8102)

JCB: Saltar si RLO = 1 y guardar RLO
Descripción
La instrucción "Saltar si RLO = 1 y guardar RLO" interrumpe la ejecución lineal del programa
en función del resultado lógico (RLO) y continuarla en el punto marcado por la etiqueta
indicada. Paralelamente, el estado lógico del RLO actual se copia en el resultado binario (BR).
El salto a la etiqueta indicada se ejecuta solo si el RLO actual es "1". En este caso, la
instrucción pone el resultado binario a "1".
Si el RLO actual antes de la instrucción es "0", el salto no se ejecuta y la ejecución del programa
continúa con la instrucción siguiente. En tal caso, la instrucción asigna el estado lógico "0" al
resultado binario.
La instrucción "Saltar si RLO = 1 y guardar RLO" pone el RLO y el bit de estado STA a "1" y los
bits de estado OR y /FC a "0", tanto si la condición se cumple como si no.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Saltar si RLO = 1 y guardar RLO":
Parámetro

Descripción

<Etiqueta>

Nombre simbólico del destino del salto

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Input_1"

// Cargar el primer valor de comparación.

L "Tag_Input_2"

// Cargar el segundo valor de comparación.

>I

// Consultar si el valor del operando "Tag_Input_1" es
mayor que el valor del operando "Tag_Input_2".

JCB MyLABEL

// Copiar RLO actual en BR.
// Si el RLO ="1", saltar a la etiqueta "MyLABEL" y
continuar allí la ejecución del programa.
// Si el RLO es "0", procesar la instrucción siguiente.

L "Tag_Input_3"

// Cargar el contenido del operando "Tag_Input_3" en
el acumulador 1.

T "Tag_Output_1"

// Cargar el contenido del acumulador 1 en el operando
"Tag_Output_1".

MyLABEL: L "Tag_Input_4"

// Continuar la ejecución del programa en este punto
en caso de haberse ejecutado un salto.
// Cargar el contenido del operando "Tag_Input_4" en
el acumulador 1.

Programación del PLC
Manual de programación y manejo, 11/2019

5475

Instrucciones
4.2 Instrucciones
AWL

Explicación

T "Tag_Output_2"

// Cargar el contenido del acumulador 1 en el operando
"Tag_Output_2".

Consulte también
Activar el bit de estado en instrucciones de control del programa (Página 192)
Consultar el bit de estado con instrucciones de salto (Página 196)
Vista general de los tipos de datos válidos (Página 241)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

JNB: Saltar si RLO = 0 y guardar RLO
Descripción
La instrucción "Saltar si RLO = 0 y guardar RLO" interrumpe la ejecución lineal del programa
en función del resultado lógico (RLO) y continuarla en el punto marcado por la etiqueta
indicada. Paralelamente, el estado del resultado lógico actual se copia en el resultado binario
(BR).
El salto a la etiqueta indicada se ejecuta solo si el RLO actual es "0". En tal caso, la instrucción
pone el resultado binario a "0".
Si el RLO actual antes de la instrucción es "1", el salto no se ejecuta y la ejecución del programa
continúa con la instrucción siguiente. En tal caso, la instrucción asigna el estado lógico "1" al
resultado binario.
La instrucción "Saltar si RLO = 0 y guardar RLO" pone el RLO y el bit de estado STA a "1" y los
bits de estado OR y /FC a "0", tanto si la condición se cumple como si no.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Saltar si RLO = 0 y guardar RLO":
Parámetro

Descripción

<Etiqueta>

Nombre simbólico del destino del salto

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

5476

AWL

Explicación

A "Tag_Input_1"

// Consultar si el operando "Tag_Input_1" es "1" y
combinar el resultado lógicamente con Y.

A "Tag_Input_2"

// Consultar si el operando "Tag_Input_2" es "1" y
combinar el resultado lógicamente con Y.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
AWL

Explicación

JNB MyLABEL

// Copiar RLO actual en BR.
// Si el RLO = "0", saltar a la etiqueta "MyLABEL" y
continuar allí la ejecución del programa.
// Si el RLO = "1", procesar la instrucción siguiente.

L "Tag_Input_3"

// Cargar el contenido del operando "Tag_Input_3" en
el acumulador 1.

T "Tag_Output"

// Transferir el contenido del acumulador 1 al operando "Tag_Output".

MyLABEL: A "Tag_Input_4"

// Continuar la ejecución del programa en este punto
en caso de haberse ejecutado un salto.
// Consultar si el operando "Tag_Input_4" es "1" y
combinar el resultado lógicamente con Y con el RLO.

Consulte también
Activar el bit de estado en instrucciones de control del programa (Página 192)
Consultar el bit de estado con instrucciones de salto (Página 196)
Vista general de los tipos de datos válidos (Página 241)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

JBI: Saltar si BR = 1
Descripción
La instrucción "Saltar si BR = 1" interrumpe la ejecución lineal del programa en función del
resultado binario y continuarla en el punto marcado por la etiqueta indicada.
El salto a la etiqueta se ejecuta solo si el bit de estado BR es "1". Si el bit de estado BR es "0",
el salto no se ejecuta y la ejecución del programa continúa con la instrucción siguiente.
La instrucción "Saltar si BR = 1" pone el bit de estado STA a "1" y los bits de estado OR y /FC
a "0", tanto si la condición se cumple como si no.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Saltar si BR = 1":
Parámetro

Descripción

<Etiqueta>

Nombre simbólico del destino del salto

Programación del PLC
Manual de programación y manejo, 11/2019

5477

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

SET

// Poner el RLO a "1" al principio del bloque.

SAVE

// Transferir el estado lógico del RLO al bit BR.

....

// Cualquier programa

AN OV

// Consultar el bit OV al final del bloque.

SAVE

// En caso de desbordamiento, poner el bit BR a "0".
// Poner BR a "1" si no se produce desbordamiento.

JBI END

// Si BR = "1", saltar a la etiqueta END.
// Si BR = "0", procesar la instrucción siguiente.

R "Tag_Output_1"

// Poner el operando "Tag_Output_1" a "0".

END: S "Tag_Output_2"

// Poner el operando "Tag_Output_2" a "1".

Consulte también
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en instrucciones de control del programa (Página 192)
Consultar el bit de estado con instrucciones de salto (Página 196)
Vista general de los tipos de datos válidos (Página 241)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

JNBI: Saltar si BR = 0
Descripción
La instrucción "Saltar si BR = 0" interrumpe la ejecución lineal del programa en función del
resultado binario (BR) y la continúa en el punto marcado por la etiqueta indicada.
El salto a la etiqueta se ejecuta solo si el bit de estado BR es "0". Si el bit de estado BR antes
de la instrucción es "1", el salto no se ejecuta y la ejecución del programa continúa con la
instrucción siguiente.
La instrucción "Saltar si BR = 0" pone el bit de estado STA a "1" y los bits de estado OR y /FC
a "0", tanto si la condición se cumple como si no.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Saltar si BR = 0":

5478

Parámetro

Descripción

<Etiqueta>

Nombre simbólico del destino del salto

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

SET

// Poner el RLO a "1" al principio del bloque.

SAVE

// Transferir el estado lógico del RLO al bit BR.

....

// Cualquier programa

AN OV

// Consultar el bit OV al final del bloque.

SAVE

// En caso de desbordamiento, poner el bit BR a "0".
// Poner BR a "1" si no se produce desbordamiento.

JNBI END

// Si BR = "0", saltar a la etiqueta END.
// Si BR = "1", procesar la instrucción siguiente.

S "Tag_Output"

// Poner el operando "Tag_Output" a "1".

END: BE

// Finalizar bloque

Consulte también
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en instrucciones de control del programa (Página 192)
Consultar el bit de estado con instrucciones de salto (Página 196)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

JO: Saltar si OV = 1
Descripción
La instrucción "Saltar si OV = 1" interrumpe la ejecución lineal del programa en función del bit
de estado OV y la continúa en el punto marcado por la etiqueta indicada.
El salto a la etiqueta se ejecuta solo si el bit de estado OV es "1". El bit de estado OV se activa
si, p. ej., el resultado de un cálculo está fuera del rango permitido o si al comparar números en
coma flotante hay un valor no válido.
Si el bit de estado OV es "0", el salto no se ejecuta y la ejecución del programa continúa con
la instrucción siguiente.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Saltar si OV = 1":
Parámetro

Descripción

<Etiqueta>

Nombre simbólico del destino del salto

Programación del PLC
Manual de programación y manejo, 11/2019

5479

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar valor

L "Tag_Value_2"

// Cargar valor

*I

// Multiplicar valores

JO OVER

// Si el estado lógico del bit de estado OV es "1",
saltar a la etiqueta "OVER" y continuar allí la ejecución del programa.
// Si el estado lógico del bit de estado OV es "0",
procesar la instrucción siguiente.

T "Tag_Result"

// Transferir el resultado de la multiplicación al
operando "Tag_Result".

JU NEXT

// Saltar a la etiqueta "NEXT" y continuar allí con la
ejecución del programa.

OVER: SET

// Continuar la ejecución del programa en este punto
si se cumple la condición (OV = "1").
// Poner el RLO al estado lógico "1".

R "Tag_Output"

// Poner el operando "Tag_Output" a "0".

NEXT: A "MyTag_1"

// Etiqueta "NEXT"
// Consultar si el operando "MyTag_1" es "1" y combinar el resultado lógicamente con Y.

A "MyTag_2"

// Consultar si el operando "MyTag_2" es "1" y combinar el resultado lógicamente con Y.

S "Tag_Output_2"

// Si el RLO = 1, poner el operando "Tag_Output_2" a
"1".

Consulte también
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en instrucciones de control del programa (Página 192)
Consultar el bit de estado con instrucciones de salto (Página 196)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

JOS: Saltar si OS = 1
Descripción
La instrucción "Saltar si OS = 1" interrumpe la ejecución lineal del programa en función del bit
de estado OS y la continúa en el punto marcado por la etiqueta indicada.
El salto a la etiqueta se ejecuta solo si el bit de estado OS es "1". El bit de estado OS se activa
siempre que un desbordamiento del rango numérico pone el bit de estado OV a "1". Al contrario

5480

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
que el bit de estado OV, el bit OS se mantiene activado aunque posteriormente haya un
resultado que esté dentro del rango numérico permitido.
Si el bit de estado OS es "0", el salto no se ejecuta y la ejecución del programa continúa con
la instrucción siguiente.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Saltar si OS = 1":
Parámetro

Descripción

<Etiqueta>

Nombre simbólico del destino del salto

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar valor

L "Tag_Value_2"

// Cargar valor

*I

// Multiplicar valores cargados.
// Guardar el producto en el acumulador 1.

L "Tag_Value_3"

// Cargar valor

+I

// Sumar el valor cargado al producto.
// Guardar el producto en el acumulador 1.

L "Tag_Value_4"

// Cargar valor

-I

// Restar el valor cargado de la suma calculada.
// Guardar el producto en el acumulador 1.

JOS OVER

// En caso de desbordamiento en una de las tres instrucciones precedentes, el bit de estado OS se pone a
"1".
// Si el estado lógico del bit de estado OS es "1" la
ejecución del programa continúa en la posición de la
etiqueta "OVER".
// Si el estado lógico del bit de estado OS es "0",
procesar la instrucción siguiente.

T "Tag_Result"

// Transferir el resultado de todo el cálculo al operando "Tag_Result".

JU NEXT

// Saltar a la etiqueta "NEXT" y continuar allí con la
ejecución del programa.

OVER: SET

// Continuar la ejecución del programa en este punto
si se cumple la condición (OV = "1").
// Poner el RLO al estado lógico "1".

R "Tag_Output"

// Poner el operando "Tag_Output" a "0".

NEXT: A "MyTag_1"

// Etiqueta "NEXT"
// Consultar si el operando "MyTag_1" es "1" y combinar el resultado lógicamente con Y.

A "MyTag_2"

Programación del PLC
Manual de programación y manejo, 11/2019

// Consultar si el operando "MyTag_2" es "1" y combinar el resultado lógicamente con Y.

5481

Instrucciones
4.2 Instrucciones
AWL

Explicación

S "Tag_Output_2"

// Si el RLO = 1, poner el operando "Tag_Output_2" a
"1".

Consulte también
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en instrucciones de control del programa (Página 192)
Consultar el bit de estado con instrucciones de salto (Página 196)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

JZ: Saltar si el resultado es cero
Descripción
La instrucción "Saltar si el resultado es cero" interrumpe la ejecución lineal del programa en
función de los bits de estado CC 0 y CC 1 y continuarla en el punto marcado por la etiqueta
indicada.
El salto a la etiqueta indicada se ejecuta solo si el estado lógico de los bits de estado CC 0 y
CC 1 es "0". Esto sucede cuando se cumple una de las condiciones siguientes:
● Después de ejecutar una instrucción aritmética sin desbordamiento, el acumulador 1 tiene
el valor "0".
● Al ejecutar la instrucción "Sumar enteros (16 bits)" (+I) o "Sumar enteros dobles (32 bits)"
(+D) se produce un desbordamiento en el rango negativo.
● Al ejecutar una instrucción aritmética (aritmética de punto flotante) con desbordamiento se
produce un rebasamiento inferior gradual del rango permitido.
● El contenido del acumulador 2 es igual al contenido del acumulador 1 después de ejecutar
una instrucción de comparación.
● El contenido del acumulador 1 es cero después de ejecutar una operación lógica con
palabras.
● Tras ejecutar una instrucción de desplazamiento, el valor del último bit desplazado es "0".
En los restantes casos, el salto no se ejecuta y la ejecución del programa continúa con la
instrucción siguiente.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Saltar si el resultado es cero":

5482

Parámetro

Descripción

<Etiqueta>

Nombre simbólico del destino del salto

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value"

// Cargar el valor del operando "Tag_Value".

SRW 1

// Desplazar el contenido de la palabra derecha del
acumulador 1 una posición a la derecha.

JZ ZERO

// Si el estado lógico del último bit desplazado hacia
fuera es "0", saltar a la etiqueta "OVER" y continuar
allí el procesamiento del programa
// Si el estado lógico del último bit desplazado hacia
fuera es "1", procesar la instrucción siguiente.

L "MyTag_1"

// Cargar el valor del operando "MyTag_1" en el acumulador 1.

INC 1

// Sumar el valor "1" al byte derecho del acumulador 1.

T "Tag_Result_1"

// Transferir el resultado al operando "Tag_Result_1".

JU NEXT

// Saltar a la etiqueta "NEXT" y continuar allí con la
ejecución del programa.

ZERO: L "MyTag_2"

// Etiqueta "ZERO"
// Cargar el valor del operando "MyTag_2" en el acumulador 1.

INC 1

// Sumar el valor "1" al byte derecho del acumulador 1.

T "Tag_Result_2"

// Transferir el resultado al operando "Tag_Result_2".

NEXT: A "MyTag_3"

// Etiqueta "NEXT"
// Consultar si el operando "MyTag_3" es "1" y combinar el resultado lógicamente con Y.

A "MyTag_4"

// Consultar si el operando "MyTag_4" es "1" y combinar el resultado lógicamente con Y.

Consulte también
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en instrucciones de control del programa (Página 192)
Consultar el bit de estado con instrucciones de salto (Página 196)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

JN: Saltar si el resultado no es cero
Descripción
La instrucción "Saltar si el resultado no es cero" interrumpe la ejecución lineal del programa en
función de los bits de estado CC 0 y CC 1 y la continúa en el punto marcado por la etiqueta
indicada.

Programación del PLC
Manual de programación y manejo, 11/2019

5483

Instrucciones
4.2 Instrucciones
El salto a la etiqueta indicada se ejecuta solo si el estado lógico de los bits de estado CC 0 y
CC 1 es distinto. Esto sucede cuando se cumple una de las condiciones siguientes:
● Después de ejecutar una instrucción aritmética sin desbordamiento, el valor del
acumulador 1 es distinto de cero.
● Al ejecutar una instrucción aritmética con enteros (+I, -I, *I, +D, -D, *D) se produce un
desbordamiento en el rango negativo.
● Al ejecutar una instrucción aritmética con enteros (+I, -I, *I, /I, +D, -D, *D, /D, NEGI, NEGD)
se produce un desbordamiento en el rango positivo.
● Al ejecutar una instrucción aritmética con números en coma flotante se produce un
desbordamiento en el rango positivo o negativo.
● El contenido del acumulador 2 es distinto al contenido del acumulador 1 después de
ejecutar una instrucción de comparación.
● El contenido del acumulador 1 no es cero después de ejecutar una operación lógica con
palabras.
● Tras ejecutar una instrucción de desplazamiento, el valor del último bit desplazado es "1".
En los restantes casos, el salto no se ejecuta y la ejecución del programa continúa con la
instrucción siguiente.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Saltar si el resultado no es cero":
Parámetro

Descripción

<Etiqueta>

Nombre simbólico del destino del salto

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Valu_1".

L "Tag_Value_2"

// Cargar el valor del operando "Tag_Value_2".

XOW

// Combinar lógicamente con O-exclusiva

JN NOZERO

// Cuando el valor del acumulador 1 no es cero, se
salta a la etiqueta "NOZERO" donde se continúa ejecutando el programa.
// Cuando el valor en el acumulador 1 es igual a cero
se ejecuta la siguiente instrucción.

5484

AN "MyTag_1"

// Consultar si el operando "MyTag_1" es "0" y combinar el resultado lógicamente con Y.

S "Tag_Output_1"

// Si el RLO = "1", poner el operando "Tag_Output_1" a
"1"

JU NEXT

// Saltar a la etiqueta "NEXT" y continuar allí con la
ejecución del programa.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
AWL

Explicación

NOZERO: AN "MyTag_2"

// Etiqueta "NOZERO"
// Consultar si el operando "MyTag_2" es "0" y combinar el resultado lógicamente con Y.

S "Tag_Output_2"

// Si el RLO es "1", poner el operando "Tag_Output_2"
a "1".

NEXT: A "MyTag_3"

// Etiqueta "NEXT"
// Consultar si el operando "MyTag_3" es "1" y combinar el resultado lógicamente con Y.

A "MyTag_4"

// Consultar si el operando "MyTag_4" es "1" y combinar el resultado lógicamente con Y.

Consulte también
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en instrucciones de control del programa (Página 192)
Consultar el bit de estado con instrucciones de salto (Página 196)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

JP: Saltar si el resultado es mayor que cero
Descripción
La instrucción "Saltar si el resultado es mayor que cero" interrumpe la ejecución lineal del
programa en función de los bits de estado CC 0 y CC 1 y la continúa en el punto marcado por
la etiqueta indicada.
El salto a la etiqueta indicada se ejecuta solo si el estado lógico del bit de estado CC 0 es "0"
y el del bit de estado CC 1 es "1". Esto sucede cuando se cumple una de las condiciones
siguientes:
● Después de ejecutar una instrucción aritmética sin desbordamiento, el valor del
acumulador 1 es mayor que cero.
● Al ejecutar una instrucción aritmética con enteros (+I, -I, +D, -D) se produce un
desbordamiento en el rango negativo.
● Al ejecutar una instrucción aritmética con enteros (*I, /I, *D, /D) se produce un
desbordamiento en el rango positivo.
● Al ejecutar una instrucción aritmética con números en coma flotante se produce un
desbordamiento en el rango positivo.
● Tras ejecutar una instrucción de comparación, el contenido del acumulador 2 es mayor que
el contenido del acumulador 1.
● Tras ejecutar una operación lógica con palabras, el contenido del acumulador 1 no es cero.
● Tras ejecutar una instrucción de desplazamiento, el valor del último bit desplazado es "1".

Programación del PLC
Manual de programación y manejo, 11/2019

5485

Instrucciones
4.2 Instrucciones
En los restantes casos, el salto no se ejecuta y la ejecución del programa continúa con la
instrucción siguiente.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Saltar si el resultado es mayor que
cero":
Parámetro

Descripción

<Etiqueta>

Nombre simbólico del destino del salto

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1".

L "Tag_Value_2"

// Cargar el valor del operando "Tag_Value_2".

-I

// Restar el valor del operando "Tag_Value_2" del valor del operando "Tag_Value_1".

JP POSITIVE

// Si el valor del resultado en el acumulador 1 es positivo, saltar a la etiqueta "POSITIVE" y continuar
allí el procesamiento del programa
// Si el valor del resultado en el acumulador 1 es negativo, procesar la instrucción siguiente.

AN "MyTag_1"

// Consultar si el operando "MyTag_1" es "0" y combinar el resultado lógicamente con Y.

S "Tag_Output_1"

// Si el RLO = "1", poner el operando "Tag_Output_1" a
"1"

JU NEXT

// Saltar a la etiqueta "NEXT" y continuar allí con la
ejecución del programa.

POSITIVE: AN "MyTag_2"

// Etiqueta "POSITIVE"
// Consultar si el operando "MyTag_2" es "0" y combinar el resultado lógicamente con Y.

S "Tag_Output_2"

// Si el RLO ="1", poner el operando "Tag_Output_2" a
"1"

NEXT: A "MyTag_3"

// Etiqueta "NEXT"
// Consultar si el operando "MyTag_3" es "1" y combinar el resultado lógicamente con Y.

A "MyTag_4"

// Consultar si el operando "MyTag_4" es "1" y combinar el resultado lógicamente con Y.

Consulte también
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en instrucciones de control del programa (Página 192)
Consultar el bit de estado con instrucciones de salto (Página 196)

5486

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

JM: Saltar si el resultado es menor que cero
Descripción
La instrucción "Saltar si el resultado es menor que cero" interrumpe la ejecución lineal del
programa en función de los bits de estado CC 0 y CC 1 y la continúa en el punto marcado por
la etiqueta indicada.
El salto a la etiqueta indicada se ejecuta solo si el estado lógico del bit de estado CC 0 es "1"
y el del bit de estado CC 1 es "0". Esto sucede cuando se cumple una de las condiciones
siguientes:
● Después de ejecutar una instrucción aritmética sin desbordamiento, el valor del
acumulador 1 es menor que cero.
● Al ejecutar una instrucción aritmética con enteros (*I, *D) se produce un desbordamiento en
el rango negativo.
● Al ejecutar una instrucción aritmética con enteros (+I, -I, +D, -D, NEGI, NEGD) se produce
un desbordamiento en el rango positivo.
● Al ejecutar una instrucción aritmética con números en coma flotante se produce un
desbordamiento en el rango negativo.
● Tras ejecutar una instrucción de comparación, el contenido del acumulador 2 es menor que
el contenido del acumulador 1.
En los restantes casos, el salto no se ejecuta y la ejecución del programa continúa con la
instrucción siguiente.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Saltar si el resultado es menor que
cero":
Parámetro

Descripción

<Etiqueta>

Nombre simbólico del destino del salto

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1".

L "Tag_Value_2"

// Cargar el valor del operando "Tag_Value_2".

-I

// Restar el valor del operando "Tag_Value_2" del valor del operando "Tag_Value_1".

Programación del PLC
Manual de programación y manejo, 11/2019

5487

Instrucciones
4.2 Instrucciones
AWL

Explicación

JM NEGATIVE

// Si el valor del resultado en el acumulador 1 es negativo, saltar a la etiqueta "NEGATIVE" y continuar
allí el procesamiento del programa
// Si el valor del resultado en el acumulador 1 es positivo, procesar la instrucción siguiente.

AN "MyTag_1"

// Consultar si el operando "MyTag_1" es "0" y combinar el resultado lógicamente con Y.

S "Tag_Output_1"

// Si el RLO = "1", poner el operando "Tag_Output_1" a
"1"

JU NEXT

// Saltar a la etiqueta "NEXT" y continuar allí con la
ejecución del programa.

NEGATIVE: AN "MyTag_2"

// Etiqueta "NEGATIVE"
// Consultar si el operando "MyTag_2" es "0" y combinar el resultado lógicamente con Y.

S "Tag_Output_2"

// Si el RLO = "1", poner el operando "Tag_Output_2" a
"1"

NEXT: A "MyTag_3"

// Etiqueta "NEXT"
// Consultar si el operando "MyTag_3" es "1" y combinar el resultado lógicamente con Y.

A "MyTag_4"

// Consultar si el operando "MyTag_4" es "1" y combinar el resultado lógicamente con Y.

Consulte también
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en instrucciones de control del programa (Página 192)
Consultar el bit de estado con instrucciones de salto (Página 196)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

JPZ: Saltar si el resultado es mayor o igual a cero
Descripción
La instrucción "Saltar si el resultado es mayor o igual a cero" interrumpe la ejecución lineal del
programa en función del bit de estado CC 0 y la continúa en el punto marcado por la etiqueta
indicada.
El salto a la etiqueta indicada se ejecuta solo si el estado lógico del bit de estado CC 0 es "0".
Esto sucede cuando se cumple una de las condiciones siguientes:
● Después de ejecutar una instrucción aritmética sin desbordamiento, el valor del
acumulador 1 es mayor o igual que cero.
● Al ejecutar una instrucción aritmética con enteros (+I, -I, +D, -D) se produce un
desbordamiento en el rango negativo.

5488

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
● Al ejecutar una instrucción aritmética con enteros (*I, /I, *D, /D) se produce un
desbordamiento en el rango positivo.
● Al ejecutar una instrucción aritmética con números en coma flotante se produce un
desbordamiento en el rango positivo.
● Al ejecutar una instrucción aritmética (aritmética de punto flotante) con desbordamiento se
produce un rebasamiento inferior gradual del rango permitido.
● Tras ejecutar una instrucción de comparación, el contenido del acumulador 2 es mayor o
igual al contenido del acumulador 1.
● Se ha ejecutado una instrucción de operación lógica por palabras.
● Se ha ejecutado una instrucción de desplazamiento.
En los restantes casos, el salto no se ejecuta y la ejecución del programa continúa con la
instrucción siguiente.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Saltar si el resultado es mayor o
igual a cero":
Parámetro

Descripción

<Etiqueta>

Nombre simbólico del destino del salto

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1".

L "Tag_Value_2"

// Cargar el valor del operando "Tag_Value_2".

-I

// Restar el valor del operando "Tag_Value_2" del valor del operando "Tag_Value_1".

JPZ REGULAR

// Si el valor del resultado en el acumulador 1 es positivo, saltar a la etiqueta "REGULAR" y continuar
allí el procesamiento del programa
// Si el valor del resultado en el acumulador 1 es negativo, procesar la instrucción siguiente.

AN "MyTag_1"

// Consultar si el operando "MyTag_1" es "0" y combinar el resultado lógicamente con Y.

S "Tag_Output_1"

// Si el RLO = "1", poner el operando "Tag_Output_1" a
"1"

JU NEXT

// Saltar a la etiqueta "NEXT" y continuar allí con la
ejecución del programa.

REGULAR: AN "MyTag_2"

// Etiqueta "REGULAR"
// Consultar si el operando "MyTag_2" es "0" y combinar el resultado lógicamente con Y.

S "Tag_Output_2"

Programación del PLC
Manual de programación y manejo, 11/2019

// Si el RLO = "1", poner el operando "Tag_Output_2" a
"1"

5489

Instrucciones
4.2 Instrucciones
AWL

Explicación

NEXT: A "MyTag_3"

// Etiqueta "NEXT"
// Consultar si el operando "MyTag_3" es "1" y combinar el resultado lógicamente con Y.

A "MyTag_4"

// Consultar si el operando "MyTag_4" es "1" y combinar el resultado lógicamente con Y.

Consulte también
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en instrucciones de control del programa (Página 192)
Consultar el bit de estado con instrucciones de salto (Página 196)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

JMZ: Saltar si el resultado es menor o igual a cero
Descripción
La instrucción "Saltar si el resultado es menor o igual a cero" interrumpe la ejecución lineal del
programa en función del bit de estado CC 1 y la continúa en el punto marcado por la etiqueta
indicada.
El salto a la etiqueta indicada se ejecuta solo si el estado lógico del bit de estado CC 1 es "0".
Esto sucede cuando se cumple una de las condiciones siguientes:
● Después de ejecutar una instrucción aritmética sin desbordamiento, el valor del
acumulador 1 es menor o igual que cero.
● Al ejecutar una instrucción aritmética con enteros (+I, *I, +D, *D) se produce un
desbordamiento en el rango negativo.
● Al ejecutar una instrucción aritmética con enteros (+I, -I, +D, -D, NEGI, NEGD) se produce
un desbordamiento en el rango positivo.
● Al ejecutar una instrucción aritmética con números en coma flotante se produce un
desbordamiento en el rango negativo.
● Al ejecutar una instrucción aritmética (aritmética de punto flotante) con desbordamiento se
produce un rebasamiento inferior gradual del rango permitido.
● Tras ejecutar una instrucción de comparación, el contenido del acumulador 2 es menor o
igual al contenido del acumulador 1.
● Tras ejecutar una operación lógica con palabras, el valor del acumulador 1 es cero.
● Tras ejecutar una instrucción de desplazamiento, el valor del último bit desplazado es cero.
En los restantes casos, el salto no se ejecuta y la ejecución del programa continúa con la
instrucción siguiente.

5490

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Saltar si el resultado es menor o
igual a cero":
Parámetro

Descripción

<Etiqueta>

Nombre simbólico del destino del salto

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1".

L "Tag_Value_2"

// Cargar el valor del operando "Tag_Value_2".

-I

// Restar el valor del operando "Tag_Value_2" del valor del operando "Tag_Value_1".

JMZ MyLABEL

// Si el valor del resultado en el acumulador 1 es negativo, saltar a la etiqueta "MyLABEL" y continuar
allí el procesamiento del programa
// Si el valor del resultado en el acumulador 1 es positivo, procesar la instrucción siguiente.

AN "MyTag_1"

// Consultar si el operando "MyTag_1" es "0" y combinar el resultado lógicamente con Y.

S "Tag_Output_1"

// Si el RLO = "1", poner el operando "Tag_Output_1" a
"1"

JU NEXT

// Saltar a la etiqueta "NEXT" y continuar allí con la
ejecución del programa.

MyLABEL: AN "MyTag_2"

// Etiqueta "MyLABEL"
// Consultar si el operando "MyTag_2" es "0" y combinar el resultado lógicamente con Y.

S "Tag_Output_2"

// Si RLO="1", poner el operando "Tag_Output_2" a "1"

NEXT: A "MyTag_3"

// Etiqueta "NEXT"
// Consultar si el operando "MyTag_3" es "1" y combinar el resultado lógicamente con Y.

A "MyTag_4"

// Consultar si el operando "MyTag_4" es "1" y combinar el resultado lógicamente con Y.

Consulte también
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en instrucciones de control del programa (Página 192)
Consultar el bit de estado con instrucciones de salto (Página 196)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

Programación del PLC
Manual de programación y manejo, 11/2019

5491

Instrucciones
4.2 Instrucciones

JUO: Saltar si el resultado no es válido
Descripción
La instrucción "Saltar si el resultado no es válido" interrumpe la ejecución lineal del programa
en función de los bits de estado CC 0 y CC 1 y la continúa en el punto marcado por la etiqueta
indicada.
El salto a la etiqueta indicada se ejecuta solo si el estado lógico de los bits de estado CC 0 y
CC 1 es "1". Esto sucede cuando se cumple una de las condiciones siguientes:
● En una instrucción matemática (/I, /D, MOD) se divide entre cero.
● En la ejecución de una instrucción matemática con números en coma flotante se produce
un desbordamiento y el resultado es un número en coma flotante no válido.
● En la ejecución de una instrucción de comparación con números en coma flotante se ha
empleado un número en coma flotante no válido o ha dado como resultado.
En los restantes casos, el salto no se ejecuta y la ejecución del programa continúa con la
instrucción siguiente.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Saltar si el resultado no es válido":
Parámetro

Descripción

<Etiqueta>

Nombre simbólico del destino del salto

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1".

L "Tag_Value_2"

// Cargar el valor del operando "Tag_Value_2".

/I

// Dividir el valor del operando "Tag_Value_1" por el
valor del operando "Tag_Value_2".

JUO ERROR

// En una división por cero, saltar a la etiqueta
"ERROR" y continuar allí el procesamiento del programa
// En otro caso, procesar la instrucción siguiente.

T "Tag_Result"

// Transferir el contenido del acumulador 1 al operando "Tag_Result".

A "MyTag_1"

// Consultar si el operando "MyTag_1" es "1" y combinar el resultado lógicamente con Y.

R "MyTag_1"

// Si el RLO = "1", poner el operando "MyTag_1" a "0".

JU NEXT

// Saltar a la etiqueta "NEXT" y continuar allí con la
ejecución del programa.

ERROR: AN "MyTag_1"

// Etiqueta "ERROR"
// Consultar si el operando "MyTag_1" es "0" y combinar el resultado lógicamente con Y.

5492

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
AWL

Explicación

S "MyTag_1"

// Si el RLO = "1", poner el operando "MyTag_1" a "1"

NEXT: A "MyTag_3"

// Etiqueta "NEXT"
// Consultar si el operando "MyTag_3" es "1" y combinar el resultado lógicamente con Y.

A "MyTag_4"

// Consultar si el operando "MyTag_4" es "1" y combinar el resultado lógicamente con Y.

Consulte también
Principios básicos de la palabra de estado (Página 184)
Activar el bit de estado en instrucciones de control del programa (Página 192)
Consultar el bit de estado con instrucciones de salto (Página 196)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Activar el bit de estado (Página 186)

JL: Definir lista de saltos
Descripción
La instrucción "Definir lista de saltos" permite programar una lista compuesta por varias
entradas de la instrucción "Salto incondicional" (JU). La lista empieza inmediatamente
después de la instrucción "Definir lista de saltos" y puede contener un máximo de 255
entradas. La numeración de las funciones de salto de la lista empieza por cero. La lista de
saltos debe programarse sin huecos. El final de la lista de saltos se marca con una etiqueta que
se indica en la instrucción "Definir lista de saltos".
La función de salto de la lista que se ejecutará depende del valor del byte derecho del
acumulador 1. Si, p. ej., en el acumulador 1 hay el valor "0", se ejecutará la primera función de
salto. Si el valor del acumulador 1 es "1", se ejecutará la segunda función de salto. Si el valor
del acumulador "1" es mayor que el número de entradas de la lista, la instrucción "Definir lista
de saltos" remite al final de la lista.
La instrucción "Distribuidor de saltos" se ejecuta independientemente de las condiciones y no
influye en los bits de estado.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value"

// Cargar el número de salto en el acumulador 1.

JL END

// Principio de la lista de saltos

JU MyLABEL_1

// Si el valor del acumulador 1 es "0", ejecutar y
saltar a la etiqueta "MyLABEL_1".

Programación del PLC
Manual de programación y manejo, 11/2019

5493

Instrucciones
4.2 Instrucciones
AWL

Explicación

JU MyLABEL_2

// Si el valor del acumulador 1 es "1", ejecutar y
saltar a la etiqueta "MyLABEL_2".

JU MyLABEL_3

// Si el valor del acumulador 1 es "2", ejecutar y
saltar a la etiqueta "MyLABEL_3".

END: L "MyTag_1"

// Fin de la lista de saltos
// Cargar el contenido del operando "MyTag_1" en el
acumulador 1.

L "MyTag_2"

// Cargar el contenido del operando "MyTag_2" en el
acumulador 1.

+I

// Sumar valores

T "Tag_Output_2"

// Cargar el contenido del acumulador 1 en el operando
"Tag_Output_2".

MyLABEL_1: ...

// Etiqueta "MyLABEL_1"

....

// Cualquier programa

JU NEXT

// Saltar a la etiqueta "NEXT" y continuar allí con la
ejecución del programa.

MyLABEL_2: ...

// Etiqueta "MyLABEL_2"

....

// Cualquier programa

JU NEXT

// Saltar a la etiqueta "NEXT" y continuar allí con la
ejecución del programa.

MyLABEL_3: ...

// Etiqueta "MyLABEL_3"

....

// Cualquier programa

JU NEXT

// Saltar a la etiqueta "NEXT" y continuar allí con la
ejecución del programa.

NEXT: ...

// Etiqueta "NEXT"

Consulte también
Activar el bit de estado en instrucciones de control del programa (Página 192)
Consultar el bit de estado con instrucciones de salto (Página 196)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Ejemplos de programación AWL (Página 8102)

LOOP: Bucle
Descripción
La instrucción "Bucle" permite programar bucles.
La instrucción interpreta la palabra derecha del acumulador 1 como un entero de 16 bits sin
signo en el rango de 0 a 65535. Al ejecutarse, la instrucción reduce primero en uno el contenido
del acumulador 1. Si el valor del acumulador 1 no es cero después de decrementar, se ejecuta
el salto hasta la etiqueta indicada. Si el valor es cero, el salto no se ejecuta y la ejecución del

5494

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
programa continúa con la instrucción siguiente. Por consiguiente, el valor del acumulador 1
determina el número de bucles que se ejecutarán. Dicho número debe guardarse en un
contador de bucles.
El operando <Número> contiene el número de bucles ejecutados. El operando <Contador de
bucles> contiene el número de bucles pendientes de ser ejecutados. Al final del bucle, el
contenido del contador de bucles se carga en el acumulador 1 y es decrementado en uno por
la instrucción. El salto hasta la etiqueta al principio del bucle se ejecuta si el valor del
acumulador no es cero después de decrementar.
La instrucción "Bucle" no influye en los bits de estado.
Nota
Si al contador de bucles no se le ha asignado ningún valor inicial o se le ha asignado el valor
inicial "0", se va reduciendo hacia el negativo, lo que resulta en un bucle sin fin que puede
provocar el estado operativo STOP de la CPU.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value"

// Cargar el número de ejecuciones de bucle pendientes
en la palabra derecha del acumulador 1.

START: T "Tag_Counter"

// Principio de la lista de saltos
// Transferir el contenido del acumulador 1 al contador de bucles.

L "MyTag_1"

// Cargar el valor del operando "MyTag_1".

L "MyTag_2"

// Cargar el valor del operando "MyTag_2".

*D

// Multiplicar valores

T "MyTag_1"

// Transferir el resultado de la multiplicación al
operando "MyTag_1".

L "Tag_Counter"

// Cargar el contenido del contador de bucles en el
acumulador 1.

LOOP START

// Decrementar en uno el valor del acumulador 1.
// Si el valor es distinto de cero, saltar al principio del bucle.
// Si el valor es cero, procesar la instrucción siguiente.

L "MyTag_2"

// Cargar el valor del operando "MyTag_2".

L 100

// Cargar el valor 100.

>I

// Comparar si el valor del operando "MyTag_2" es mayor que 200.

= "MyTag_3"

// Escribir el resultado de la comparación en el operando "MyTag_3".

Programación del PLC
Manual de programación y manejo, 11/2019

5495

Instrucciones
4.2 Instrucciones

Consulte también
Activar el bit de estado en instrucciones de control del programa (Página 192)
Consultar el bit de estado con instrucciones de salto (Página 196)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Bloques de datos
OPN: Abrir bloque de datos global
Descripción
La instrucción "Abrir bloque de datos global" abre un bloque de datos (DB) global. El número
del bloque de datos se transmite al registro del DB. Los siguientes comandos de DB acceden
a los bloques correspondientes en función de los contenidos del registro.
La instrucción "Abrir bloque de datos global" se ejecuta independientemente de las
condiciones y no influye ni en el resultado lógico ni en los contenidos de los acumuladores.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Abrir bloque de datos global":
Operando

Declaración

Tipo del bloque de da‐
tos

Descripción

<Bloque de datos>

-

DB

Bloque de datos que se
abrirá.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

OPN "GlobalDataBlock"

// Abrir el bloque de datos global.

L %DBW0

// Cargar palabra de datos DBW0 del bloque de
datos global abierto en acumulador 1.

T "MyTag"

// Transferir el contenido del acumulador 1 al
operando "MyTag_1".

Consulte también
Activar el bit de estado en instrucciones de control del programa (Página 192)
Principios básicos de la palabra de estado (Página 184)

5496

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

OPNDI: Abrir el bloque de datos de instancia
Descripción
La instrucción "Abrir bloque de datos de instancia" abre un bloque de datos de instancia (DI).
El número del bloque de datos se transmite al registro del DI. Los siguientes comandos del DI
acceden a los bloques correspondientes en función de los contenidos del registro.
La instrucción "Abrir bloque de datos de instancia" se ejecuta independientemente de las
condiciones y no influye ni en el resultado lógico ni en los contenidos de los acumuladores.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Abrir bloque de datos de
instancia":
Operando

Declaración

Tipo del bloque de da‐
tos

Descripción

<Bloque de datos>

-

DI

Bloque de datos que se
abrirá.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

OPNDI "InstanceDataBlock"

// Abrir el bloque de datos de instancia

L %DIW0

// Cargar palabra de datos DIW0 del bloque de
datos de instancia abierto en acumulador 1.

T "MyTag"

// Transferir el contenido del acumulador 1 al
operando "MyTag".

Consulte también
Activar el bit de estado en instrucciones de control del programa (Página 192)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Programación del PLC
Manual de programación y manejo, 11/2019

5497

Instrucciones
4.2 Instrucciones

CDB: Intercambiar registros de bloques de datos
Descripción
La instrucción "Intercambiar registros de bloques de datos" cambia los contenidos de los
registros de los bloques de datos. La instrucción se ejecuta independientemente de las
condiciones y no influye en los bits de estado.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

OPN "GlobalDataBlock"

// Abrir bloque de datos global

OPNDI "InstanceDataBlock"

// Abrir el bloque de datos de instancia

CDB

// Intercambiar registros de bloques de datos
// El registro DB remite a "InstanceDataBlock"
y el registro DI remite a "GlobalDataBlock".

L %DIW0

// Cargar DW0 de "GlobalDataBlock" en el acumulador 1.

Consulte también
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

L DBLG: Cargar longitud de un bloque de datos global en acumulador 1
Descripción
La instrucción "Cargar longitud del bloque de datos global en acumulador 1" carga en el
acumulador 1 la longitud de un bloque de datos global abierto mediante el registro del bloque
de datos. El contenido anterior del acumulador 1 se desplaza al acumulador 2.
Si antes de ejecutar la instrucción no se ha abierto ningún bloque de datos global mediante el
registro del bloque de datos, se carga el valor "0" en el acumulador 1. La longitud del bloque
de datos es equivalente al número de bytes de datos.
La instrucción no modifica los bits de estado.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

5498

AWL

Explicación

OPN "GlobalDataBlock"

// Abrir bloque de datos global

L DBLG

// Cargar la longitud de un bloque de datos
abierto en el acumulador 1.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
AWL

Explicación

L "MyTag_1"

// Cargar el valor de comparación

<D

// Comparar si la longitud del bloque de datos
es menor que el valor del operando "MyTag_1".

= "MyTag_2"

// Escribir el resultado de la consulta en el
operando "MyTag_2".

Consulte también
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

L DBNO: Cargar número de un bloque de datos global en acumulador 1
Descripción
La instrucción "Cargar número del bloque de datos global en acumulador 1" carga en el
acumulador 1 el número de un bloque de datos global abierto mediante el registro del bloque
de datos. El contenido anterior del acumulador 1 se desplaza al acumulador 2.
Si antes de ejecutar la instrucción no se ha abierto ningún bloque de datos global mediante el
registro del bloque de datos, se carga el valor "0" en el acumulador 1.
La instrucción no modifica los bits de estado.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

OPN "GlobalDataBlock"

// Abrir bloque de datos global

L DBNO

// Cargar número de un bloque de datos abierto
en acumulador 1.

L "MyTag_1"

// Cargar el valor de comparación

==I

// Comparar si el número del bloque de datos
es igual al valor del operando "MyTag_1".

= "MyTag_2"

// Escribir el resultado de la consulta en el
operando "MyTag_2".

Consulte también
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Programación del PLC
Manual de programación y manejo, 11/2019

5499

Instrucciones
4.2 Instrucciones

L DILG: Cargar longitud de un bloque de datos de instancia en acumulador 1
Descripción
La instrucción "Cargar longitud del bloque de datos de instancia en acumulador 1" carga en el
acumulador 1 la longitud de un bloque de datos de instancia abierto mediante el registro del
bloque de datos. El contenido anterior del acumulador 1 se desplaza al acumulador 2.
Si antes de ejecutar la instrucción no se ha abierto ningún bloque de datos de instancia
mediante el registro del bloque de datos, se carga el valor "0" en el acumulador 1. La longitud
del bloque de datos es equivalente al número de bytes de datos.
La instrucción no modifica los bits de estado.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

OPNDI "InstanceDataBlock"

// Abrir el bloque de datos de instancia

L DILG

// Cargar la longitud de un bloque de datos
abierto en el acumulador 1.

L "MyTag_1"

// Cargar el valor de comparación

<I

// Comparar si la longitud del bloque de datos
es menor que el valor del operando "MyTag_1".

= "MyTag_2"

// Escribir el resultado de la consulta en el
operando "MyTag_2".

Consulte también
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

L DINO: Cargar número de un bloque de datos de instancia en acumulador 1
Descripción
La instrucción "Cargar número del bloque de datos de instancia en acumulador 1" carga en el
acumulador 1 el número de un bloque de datos de instancia abierto mediante el registro del
bloque de datos. El contenido anterior del acumulador 1 se desplaza al acumulador 2.
Si antes de ejecutar la instrucción no se ha abierto ningún bloque de datos de instancia
mediante el registro del bloque de datos, se carga el valor "0" en el acumulador 1.
La instrucción no modifica los bits de estado.

5500

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

OPNDI "InstanceDataBlock"

// Abrir el bloque de datos de instancia

L DINO

// Cargar número de un bloque de datos abierto
en acumulador 1.

L "MyTag_1"

// Cargar el valor de comparación

==I

// Comparar si el número del bloque de datos
es igual al valor del operando "MyTag_1".

= "MyTag_2"

// Asignar el resultado de la consulta al operando "MyTag_2".

Consulte también
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Bloques lógicos
BE: Fin de bloque
Descripción
La instrucción "Fin de bloque" finaliza el procesamiento del bloque actual y pasa al punto del
programa en el que se llama el bloque. El procesamiento del programa continúa con la
instrucción que se encuentra justo después de la llamada del bloque.
Al finalizar el bloque, el resultado lógico actual se transfiere al bloque que efectúa la llamada.
La instrucción "Fin de bloque" se ejecuta siempre, independientemente de las condiciones. Si
el procesamiento de la instrucción se salta debido a una instrucción de salto, la ejecución
actual del programa no finaliza, sino que continúa en el destino del salto dentro del bloque.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1" en el
acumulador 1.

SIN

// Calcular el seno
// Guardar el resultado en el acumulador 1.

L "Tag_Value_2"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_2" en el
acumulador 1.

Programación del PLC
Manual de programación y manejo, 11/2019

5501

Instrucciones
4.2 Instrucciones
AWL

Explicación

*R

// Multiplicar los valores de los acumuladores 1 y 2.
// Guardar el producto en el acumulador 1.

L "Tag_Value_3"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_3" en el
acumulador 1.

*R

// Multiplicar los valores de los acumuladores 1 y 2.
// Guardar el producto en el acumulador 1.

T "Tag_Result"

// Transferir el contenido del acumulador 1 al operando "Tag_Result".

BE

// Finalizar bloque

Consulte también
Activar el bit de estado en instrucciones de control del programa (Página 192)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

BEC: Fin de bloque condicional
Descripción
La instrucción "Fin de bloque condicional" finaliza el procesamiento del bloque actual en
función del resultado lógico (RLO) y pasa al punto del programa en el que se llama el bloque.
Si el RLO es "1", se ejecuta la instrucción. El bloque actual se finaliza y la ejecución del
programa continúa en el bloque que efectúa la llamada. El procesamiento del programa
continúa con la instrucción que se encuentra justo después de la llamada del bloque.
Al finalizar el bloque, el resultado lógico actual se transfiere al bloque que efectúa la llamada.
En el bloque que efectúa la llamada, la dependencia de MCR se ajusta igual que estaba antes
de llamar el bloque. Los bloques de datos que estaban abiertos en el momento de llamar el
bloque vuelven a abrirse.
Si el RLO es "0" al procesar la instrucción, esta no se ejecuta. En este caso, la CPU pone el
RLO a "1" y procesa la instrucción siguiente.
Si el procesamiento de la instrucción se salta debido a una instrucción de salto, la ejecución
actual del programa no finaliza, sino que continúa en el destino del salto dentro del bloque.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

5502

AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1" en el
acumulador 1.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
AWL

Explicación

L "Tag_Value_2"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_2" en el
acumulador 1.

>I

// Comparar si el valor del acumulador 2 es mayor que
el valor del acumulador 1.

A "Tag_Input"

// Consultar si el operando "Tag_Input" es "1" y combinar el resultado lógicamente con Y con el RLO.

BEC

// Si la condición se cumple (RLO = "1"), finalizar el
bloque.
// Si la condición no se cumple (RLO = "0"), procesar
la instrucción siguiente.

T "Tag_Result"

// Transferir el contenido del acumulador 1 al operando "Tag_Result".

Consulte también
Activar el bit de estado en instrucciones de control del programa (Página 192)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

BEU: Fin de bloque incondicional
Descripción
La instrucción "Fin de bloque incondicional" finaliza el procesamiento del bloque actual y pasa
al punto del programa en el que se llama el bloque. El procesamiento del programa continúa
con la instrucción que se encuentra justo después de la llamada del bloque.
Al finalizar el bloque, el resultado lógico actual se transfiere al bloque que efectúa la llamada.
En el bloque que efectúa la llamada, la dependencia de MCR se ajusta igual que estaba antes
de llamar el bloque. Los bloques de datos que estaban abiertos en el momento de llamar el
bloque vuelven a abrirse.
La instrucción "Fin de bloque incondicional" se ejecuta siempre, independientemente de las
condiciones. Al contrario que la instrucción "Fin de bloque", es posible programar la instrucción
"Fin de bloque incondicional" varias veces dentro de un bloque. Si el procesamiento de la
instrucción se salta debido a una instrucción de salto, la ejecución actual del programa no
finaliza, sino que continúa en el destino del salto dentro del bloque.

Programación del PLC
Manual de programación y manejo, 11/2019

5503

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1" en el
acumulador 1.

L "Tag_Value_2"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_2" en el
acumulador 1.

>I

// Comparar si el valor del acumulador 2 es mayor que
el valor del acumulador 1.

A "Tag_Input"

// Consultar si el operando "Tag_Input" es "1" y combinar el resultado lógicamente con Y con el RLO.

JC NEXT

// Si la condición se cumple (RLO = "1"), continuar el
procesamiento del programa a partir de la etiqueta
"NEXT".
// Si la condición no se cumple (RLO = "0"), procesar
la instrucción siguiente.

BEU

// Finalizar bloque

NEXT: T "Tag_Result"

// Etiqueta "NEXT"
// Transferir el contenido del acumulador 1 al operando "Tag_Result".

Consulte también
Activar el bit de estado en instrucciones de control del programa (Página 192)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Ejemplos de programación AWL (Página 8102)

CALL: Llamar bloque
Descripción
La instrucción "Llamar bloque" llama los siguientes tipos de bloque en el programa:
● Funciones
● Bloques de función
La instrucción "Llamar bloque" se ejecuta siempre, independientemente de las condiciones.
Tras ejecutar la instrucción, el procesamiento del programa continúa en el bloque llamado.
Existe la posibilidad de suministrar datos a un bloque llamado. Los datos se transfieren
mediante los parámetros del bloque. Los parámetros del bloque llamado se listan en el bloque
que efectúa la llamada después de la instrucción de llamada. Es posible asignarles los
parámetros actuales necesarios. Al ejecutar la instrucción "Llamar bloque", los datos se

5504

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
transfieren al bloque llamado. Con la transmisión de los datos se modifican los contenidos
tanto de la palabra de estado como del registro de direcciones y del de los bloques de datos.
Los parámetros de un bloque de función que no reciben valores nuevos conservan su valor
actual. Al llamar funciones deben suministrarse valores a todos los parámetros. Si un bloque
llamado no tiene parámetros, no se muestra la lista de parámetros.
Si el bloque llamado requiere un bloque de datos de instancia, éste debe indicarse en la
llamada, separado por una coma. El bloque de datos indicado debe haberse creado antes de
la llamada.
Una vez procesado el bloque llamado, la CPU vuelve al bloque que efectúa la llamada y
continúa con el procesamiento de dicho bloque después de la instrucción de llamada.
En el bloque que efectúa la llamada, la dependencia de MCR se ajusta igual que estaba antes
de llamar el bloque. Los bloques de datos que estaban abiertos en el momento de llamar el
bloque vuelven a abrirse.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

CALL "MyFunction"
Input_1 := "Tag_Input_1",

// Llamar la función "MyFunction"
// Asignar parámetros actuales

Input_2 := "Tag_Input_2"
Output_1 := "Tag_Output_1"
Output_2 := "Tag_Output_1"
CALL "MyFunctionBlock", "MyFB_DB"
Value_1 := "Tag_Value_1"

// Llamar el bloque de función "MyFunctionBlock"

Value_2 := "Tag_Value_2"

// Asignar parámetros actuales

Output := "Tag_Output"
CALL "LIMIT"
MN := "Tag_LowLimit"

// Llamar la instrucción "Ajustar valor límite"

IN := "Tag_InputValue"

// Asignar parámetros actuales

MX := "Tag_HighLimit"
OUT := "Tag_Output"
CALL "CTU", "CTU_DB"
CU := "Tag_StartCTU"

// Llamar el contador "Contador ascendente"
// Asignar parámetros actuales

R := "Tag_ResetCounter"
PV := "Tag_PresetValue"
Q := "Tag_CounterStatus"
CV := "Tag_CounterValue"

Consulte también
Activar el bit de estado en instrucciones de control del programa (Página 192)
Principios básicos de la palabra de estado (Página 184)

Programación del PLC
Manual de programación y manejo, 11/2019

5505

Instrucciones
4.2 Instrucciones
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

CC: Llamada condicional
Descripción
La instrucción "Llamada condicional" llama en función del resultado lógico (RLO) funciones
(FC) y bloques de función (FB) que no tienen parámetros ni bloques de datos de instancia.
La instrucción solo se ejecuta si el resultado lógico (RLO) actual antes de procesar la
instrucción es "1". Tras ejecutar la instrucción, el procesamiento del programa continúa en el
bloque llamado. Una vez procesado el bloque llamado, la CPU vuelve al bloque que efectúa la
llamada y continúa con el procesamiento de dicho bloque después de la instrucción de llamada.
Al cambiar el bloque, los bits de estado OS y /FC se ponen a "0". Los bits de estado CC 0, CC
1 y OV no se ven influidos.
En el bloque que efectúa la llamada, la dependencia de MCR se ajusta igual que estaba antes
de llamar el bloque. Los bloques de datos que estaban abiertos en el momento de llamar el
bloque vuelven a abrirse.
La instrucción "Llamada condicional" no modifica el contenido de los acumuladores ni los
registros de direcciones.
Si el RLO actual es "0", la instrucción y, por consiguiente, la llamada de bloque no se ejecutan
y el RLO se pone a "1".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

A "Tag_Input_1"

// Consultar si el operando "Tag_Input_1" es
"1" y combinar el resultado lógicamente con Y
con el RLO actual.

CC "MyFunction"

// Si la condición se cumple (RLO = "1"), llamar la función "MyFunction".
// Si la condición no se cumple (RLO = "0"),
procesar la instrucción siguiente.

A "Tag_Input_2"

// Consultar si el operando "Tag_Input_2" es
"1" y combinar el resultado lógicamente con Y
con el RLO actual.

CC "MyFunctionBlock"

// Si la condición se cumple (RLO = "1"), llamar el bloque de función "MyFunctionBlock".
// Si la condición no se cumple (RLO = "0"),
procesar la instrucción siguiente.

5506

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Activar el bit de estado en instrucciones de control del programa (Página 192)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

UC: Llamada incondicional
Descripción
La instrucción "Llamada incondicional" llama funciones (FC) y bloques de función (FB) que no
tienen parámetros ni bloques de datos de instancia.
Esta instrucción se ejecuta independientemente de las condiciones. Tras ejecutar la
instrucción, el procesamiento del programa continúa en el bloque llamado. Una vez procesado
el bloque llamado, la CPU vuelve al bloque que efectúa la llamada y continúa con el
procesamiento de dicho bloque después de la instrucción de llamada.
Al cambiar el bloque, los bits de estado OS y /FC se ponen a "0". Los bits de estado CC 0, CC
1 y OV no se ven influidos.
En el bloque que efectúa la llamada, la dependencia de MCR se ajusta igual que estaba antes
de llamar el bloque. Los bloques de datos que estaban abiertos en el momento de llamar el
bloque vuelven a abrirse.
La instrucción "Llamada incondicional" no modifica el contenido de los acumuladores ni los
registros de direcciones.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

A "Tag_Input_1"

// Consultar si el operando "Tag_Input_1" es
"1" y combinar el resultado lógicamente con Y
con el RLO actual.

UC "MyFunction"

// Llamar la función "MyFunction".

A "Tag_Input_2"

// Consultar si el operando "Tag_Input_2" es
"1" y combinar el resultado lógicamente con Y
con el RLO actual.

UC "MyFunctionBlock"

// Llamar el bloque de función "MyFunctionBlock".

Consulte también
Activar el bit de estado en instrucciones de control del programa (Página 192)
Principios básicos de la palabra de estado (Página 184)

Programación del PLC
Manual de programación y manejo, 11/2019

5507

Instrucciones
4.2 Instrucciones
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Operaciones lógicas con palabras
AW: Operación lógica Y por palabras
Descripción
La instrucción "Operación lógica Y por palabras" combina lógicamente con Y por bits el valor
de la palabra derecha del acumulador 1 con el valor de la palabra derecha del acumulador 2
o una constante concreta. El resultado se guarda en la palabra derecha del acumulador 1. El
contenido de la palabra izquierda del acumulador 1 no cambia.
La instrucción combina el bit 0 del acumulador 1 con el bit 0 del acumulador 2 o una constante
y guarda el resultado en el bit 0 del acumulador 1. Los bits 1 a 15 se combinan del mismo modo.
El estado lógico del bit de resultado es "1" si el estado lógico de los dos bits que deben
combinarse lógicamente también es "1". Si el estado lógico de uno de los bits que deben
combinarse lógicamente es "0", se desactivará el bit de resultado correspondiente.
La tabla siguiente muestra cómo se forma el resultado en una operación lógica Y por palabras:
Acumulador 2 /
constante

0

0

1

1

Acumulador 1

0

1

0

1

Resultado

0

0

0

1

La instrucción se ejecuta independientemente de las condiciones y no influye en el resultado
lógico.
La instrucción influye en los bits de estado CC 0, CC 1 y OV.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica Y por palabras":
Parámetro

Tipo de datos

Descripción

<Constante>

WORD

Valor que se combina lógica‐
mente con Y con el valor que se
encuentra en la palabra derecha
del acumulador 1.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

5508

AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando en la palabra derecha
del acumulador 1.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
AWL

Explicación

AW W#16#F6B5

// Combinar lógicamente con Y el valor de la palabra
derecha del acumulador 1 con la constante (W#16#F6B5).
// El resultado se guarda en la palabra derecha del
acumulador 1.

T "Tag_Result_1"

// Transferir el resultado al operando "Tag_Result_1".

L "Tag_Value_2"

// Cargar el valor del operando en la palabra derecha
del acumulador 1.

L "Tag_Value_3"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_3" en la
palabra derecha del acumulador 1.

AW

// Combinar lógicamente con Y el valor de la palabra
derecha del acumulador 2 ("Tag_Value_2") con el valor
de la palabra derecha del acumulador 1 ("Tag_Value_3").
// El resultado se guarda en la palabra derecha del
acumulador 1.

T "Tag_Result_2"

// Transferir el resultado al operando "Tag_Result_2".

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando
Tag_Value_1

Valor
0101

1001

0011

1011

Constante (W#16#F6B5) 1111

0110

1011

0101

Tag_Result_1

0000

0011

0001

0101

Tag_Value_2

0110

1100

0010

1010

Tag_Value_3

1101

1010

1001

0011

Tag_Result_2

0100

1000

0000

0010

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con palabras (Página 194)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Ejemplos de programación AWL (Página 8102)

Programación del PLC
Manual de programación y manejo, 11/2019

5509

Instrucciones
4.2 Instrucciones

OW: Operación lógica O por palabras
Descripción
La instrucción "Operación lógica O por palabras" combina lógicamente con O por bits el valor
de la palabra derecha del acumulador 1 con el valor de la palabra derecha del acumulador 2
o una constante concreta. El resultado se guarda en la palabra derecha del acumulador 1. El
contenido de la palabra izquierda del acumulador 1 no cambia.
La instrucción combina el bit 0 del acumulador 1 con el bit 0 del acumulador 2 o una constante
y guarda el resultado en el bit 0 del acumulador 1. Los bits 1 a 15 se combinan del mismo modo.
El estado lógico del bit de resultado es "1" si el estado lógico de como mínimo uno de los dos
bits que deben combinarse lógicamente también es "1". Si el estado lógico de los dos bits que
deben combinarse lógicamente es "0", el bit de resultado correspondiente se pondrá a "0".
La tabla siguiente muestra cómo se forma el resultado en una operación lógica O por palabras:
Acumulador 2 /
constante

0

0

1

1

Acumulador 1

0

1

0

1

Resultado

0

1

1

1

La instrucción se ejecuta independientemente de las condiciones y no influye en el resultado
lógico.
La instrucción influye en los bits de estado CC 0, CC 1 y OV.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica O por palabras":
Parámetro

Tipo de datos

Descripción

<Constante>

WORD

Valor que se combina lógica‐
mente con O con el valor que se
encuentra en la palabra derecha
del acumulador 1.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando en la palabra derecha
del acumulador 1.

OW W#16#F6B5

// Combinar lógicamente con O el valor de la palabra
derecha del acumulador 1 con la constante (W#16#F6B5).
// El resultado se guarda en la palabra derecha del
acumulador 1.

5510

T "Tag_Result_1"

// Transferir el resultado al operando "Tag_Result_1".

L "Tag_Value_2"

// Cargar el valor del operando en la palabra derecha
del acumulador 1.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
AWL

Explicación

L "Tag_Value_3"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_3" en la
palabra derecha del acumulador 1.

OW

// Combinar lógicamente con O el valor de la palabra
derecha del acumulador 2 ("Tag_Value_2") con el valor
de la palabra derecha del acumulador 1 ("Tag_Value_3").
// El resultado se guarda en la palabra derecha del
acumulador 1.

T "Tag_Result_2"

// Transferir el resultado al operando "Tag_Result_2".

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando
Tag_Value_1

Valor
0101

1001

0011

1011

Constante (W#16#F6B5) 1111

0110

1011

0101

Tag_Result_1

1111

1111

1011

1111

Tag_Value_2

0110

1100

0010

1010

Tag_Value_3

1101

1010

1001

0011

Tag_Result_2

1111

1110

1011

1011

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con palabras (Página 194)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)
Ejemplos de programación AWL (Página 8102)

XOW: Operación lógica O-exclusiva por palabras
Descripción
La instrucción "Operación lógica O-exclusiva por palabras" combina lógicamente con Oexclusiva por bits el valor de la palabra derecha del acumulador 1 con el valor de la palabra
derecha del acumulador 2 o una constante concreta. El resultado se guarda en la palabra
derecha del acumulador 1. El contenido de la palabra izquierda del acumulador 1 no cambia.
La instrucción combina el bit 0 del acumulador 1 con el bit 0 del acumulador 2 o una constante
y guarda el resultado en el bit 0 del acumulador 1. Los bits 1 a 15 se combinan del mismo modo.

Programación del PLC
Manual de programación y manejo, 11/2019

5511

Instrucciones
4.2 Instrucciones
El estado lógico del bit de resultado es "1" si el estado lógico de los dos bits que deben
combinarse lógicamente es diferente. Si el estado lógico de los dos bits que deben combinarse
lógicamente es el mismo, el bit de resultado correspondiente se pondrá a "0".
La tabla siguiente muestra cómo se forma el resultado en una operación lógica O-exclusiva por
palabras:
Acumulador 2 /
constante

0

0

1

1

Acumulador 1

0

1

0

1

Resultado

0

1

1

0

La instrucción se ejecuta independientemente de las condiciones y no influye en el resultado
lógico.
La instrucción influye en los bits de estado CC 0, CC 1 y OV.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica O-exclusiva por
palabras":
Parámetro

Tipo de datos

Descripción

<Constante>

WORD

Valor que se combina lógica‐
mente con O-exclusiva con el va‐
lor que se encuentra en la pala‐
bra derecha del acumulador 1.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando en la palabra derecha
del acumulador 1.

XOW W#16#F6B5

// Combinar lógicamente con O-exclusiva el valor de la
palabra derecha del acumulador 1 con la constante
(W#16#F6B5).
// El resultado se guarda en la palabra derecha del
acumulador 1.

T "Tag_Result_1"

// Transferir el resultado al operando "Tag_Result_1".

L "Tag_Value_2"

// Cargar el valor del operando en la palabra derecha
del acumulador 1.

L "Tag_Value_3"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_3" en la
palabra derecha del acumulador 1.

5512

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
AWL

Explicación

XOW

// Combinar lógicamente con O-exclusiva el valor de la
palabra derecha del acumulador 2 ("Tag_Value_2") con
el valor de la palabra derecha del acumulador 1
("Tag_Value_3").
// El resultado se guarda en la palabra derecha del
acumulador 1.

T "Tag_Result_2"

// Transferir el resultado al operando "Tag_Result_2".

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando
Tag_Value_1

Valor
0101

1001

0011

1011

Constante (W#16#F6B5) 1111

0110

1011

0101

Tag_Result_1

1010

1111

1000

1110

Tag_Value_2

0110

1100

0010

1010

Tag_Value_3

1101

1010

1001

0011

Tag_Result_2

1011

0110

1011

1001

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con palabras (Página 194)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

AD: Operación lógica Y por palabras dobles
Descripción
La instrucción "Operación lógica Y por palabras dobles" combina lógicamente con Y por bits el
contenido del acumulador 1 con el contenido del acumulador 2 o el valor de una constante
concreta. El resultado se guarda en el acumulador 1.
La instrucción combina el bit 0 del acumulador 1 con el bit 0 del acumulador 2 o una constante
y guarda el resultado en el bit 0 del acumulador 1. Los bits 1 a 31 se combinan del mismo modo.
El estado lógico del bit de resultado es "1" si el estado lógico de los dos bits que deben
combinarse lógicamente también es "1". Si el estado lógico de uno de los bits que deben
combinarse lógicamente es "0", se desactivará el bit de resultado correspondiente.

Programación del PLC
Manual de programación y manejo, 11/2019

5513

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra cómo se forma el resultado en una operación lógica Y por palabras:
Acumulador 2 /
constante

0

0

1

1

Acumulador 1

0

1

0

1

Resultado

0

0

0

1

La instrucción se ejecuta independientemente de las condiciones y no influye en el resultado
lógico.
La instrucción influye en los bits de estado CC 0, CC 1 y OV.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica Y por palabras
dobles":
Parámetro

Tipo de datos

Descripción

<Constante>

DWORD

Valor que se combina lógica‐
mente con Y con el valor que es‐
tá en el acumulador 1.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando en el acumulador 1.

AD DW#16#39C657AC

// Combinar lógicamente con Y el valor del acumulador
1 con la constante (DW#16#39C657AC).
// Guardar el resultado en el acumulador 1.

T "Tag_Result_1"

// Transferir el resultado al operando "Tag_Result_1".

L "Tag_Value_2"

// Cargar el valor del operando en el acumulador 1.

L "Tag_Value_3"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_3" en el
acumulador 1.

AD

// Combinar lógicamente con Y el valor del acumulador
2 ("Tag_Value_2") con el valor del acumulador 1
("Tag_Value_3").
// Guardar el resultado en el acumulador 1.

T "Tag_Result_2"

5514

// Transferir el resultado al operando "Tag_Result_2".

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value_1

0101

1111

0110

0100

1001

1101

0011

1011

Constante
(DW#16#39C65
7AC)

0011

1001

1100

0110

0101

0111

1010

1100

Tag_Result_1

0001

1001

0100

0100

0001

0101

0010

1000

Tag_Value_2

0110

0101

0100

0011

0101

1101

0010

1011

Tag_Value_3

0011

1001

1100

0110

0101

0111

1010

1100

Tag_Result_2

0010

0001

0100

0010

0101

0101

0010

1010

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con palabras (Página 194)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

OD: Operación lógica O por palabras dobles
Descripción
La instrucción "Operación lógica O por palabras dobles" combina lógicamente con O por bits
el contenido del acumulador 1 con el contenido del acumulador 2 o el valor de una constante
concreta. El resultado se guarda en el acumulador 1.
La instrucción combina el bit 0 del acumulador 1 con el bit 0 del acumulador 2 o una constante
y guarda el resultado en el bit 0 del acumulador 1. Los bits 1 a 31 se combinan del mismo modo.
El estado lógico del bit de resultado es "1" si el estado lógico de como mínimo uno de los dos
bits que deben combinarse lógicamente también es "1". Si el estado lógico de los dos bits que
deben combinarse lógicamente es "0", el bit de resultado correspondiente se pondrá a "0".
La tabla siguiente muestra cómo se forma el resultado en una operación lógica O por palabras:
Acumulador 2 /
constante

0

0

1

1

Acumulador 1

0

1

0

1

Resultado

0

1

1

1

La instrucción se ejecuta independientemente de las condiciones y no influye en el resultado
lógico.
La instrucción influye en los bits de estado CC 0, CC 1 y OV.

Programación del PLC
Manual de programación y manejo, 11/2019

5515

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica O por palabras
dobles":
Parámetro

Tipo de datos

Descripción

<Constante>

DWORD

Valor que se combina lógica‐
mente con O con el valor que es‐
tá en el acumulador 1.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando en el acumulador 1.

OD DW#16#39C657AC

// Combinar lógicamente con O el valor del acumulador
1 con la constante (DW#16#39C657AC).
// Guardar el resultado en el acumulador 1.

T "Tag_Result_1"

// Transferir el resultado al operando "Tag_Result_1".

L "Tag_Value_2"

// Cargar el valor del operando en el acumulador 1.

L "Tag_Value_3"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_3" en el
acumulador 1.

OD

// Combinar lógicamente con O el valor del acumulador
2 ("Tag_Value_2") con el valor del acumulador 1
("Tag_Value_3").
// Guardar el resultado en el acumulador 1

T "Tag_Result_2"

// Transferir el resultado al operando "Tag_Result_2".

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

5516

Valor

Tag_Value_1 0101

1111

0110

0100

1001

1101

0011

1011

Constante
(DW#16#39
C657AC)

0011

1001

1100

0110

0101

0111

1010

1100

Tag_Re‐
sult_1

0111

1111

1110

0110

1101

1111

1011

1111

Tag_Value_2 0110

0101

0100

0011

0101

1101

0010

1011

Tag_Value_3 0011

1001

1100

0110

0101

0111

1010

1100

Tag_Re‐
sult_2

1101

1100

0111

0101

1111

1110

1111

0111

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con palabras (Página 194)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

XOD: Operación lógica O-exclusiva por palabras dobles
Descripción
La instrucción "Operación lógica O-exclusiva por palabras dobles" combina lógicamente con
O-exclusiva por bits el contenido del acumulador 1 con el contenido del acumulador 2 o el valor
de una constante concreta. El resultado se guarda en el acumulador 1.
La instrucción combina el bit 0 del acumulador 1 con el bit 0 del acumulador 2 o una constante
y guarda el resultado en el bit 0 del acumulador 1. Los bits 1 a 31 se combinan del mismo modo.
El estado lógico del bit de resultado es "1" si el estado lógico de los dos bits que deben
combinarse lógicamente es diferente. Si el estado lógico de los dos bits que deben combinarse
lógicamente es el mismo, el bit de resultado correspondiente se pondrá a "0".
La tabla siguiente muestra cómo se forma el resultado en una operación lógica O-exclusiva por
palabras:
Acumulador 2 /
constante

0

0

1

1

Acumulador 1

0

1

0

1

Resultado

0

1

1

0

La instrucción se ejecuta independientemente de las condiciones y no influye en el resultado
lógico.
La instrucción influye en los bits de estado CC 0, CC 1 y OV.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Operación lógica O-exclusiva por
palabras dobles":
Parámetro

Tipo de datos

Descripción

<Constante>

DWORD

Valor que se combina lógica‐
mente con O-exclusiva con el va‐
lor que está en el acumulador 1.

Programación del PLC
Manual de programación y manejo, 11/2019

5517

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando en el acumulador 1.

XOD DW#16#39C657AC

// Combinar lógicamente con O-exclusiva el valor del
acumulador 1 con la constante (DW#16#39C657AC).
// Guardar el resultado en el acumulador 1.

T "Tag_Result_1"

// Transferir el resultado al operando "Tag_Result_1".

L "Tag_Value_2"

// Cargar el valor del operando en el acumulador 1.

L "Tag_Value_3"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_3" en el
acumulador 1.

XOD

// Combinar lógicamente con O-exclusiva el valor del
acumulador 2 ("Tag_Value_2") con el valor del acumulador 1 ("Tag_Value_3").
// Guardar el resultado en el acumulador 1.

T "Tag_Result_2"

// Transferir el resultado al operando "Tag_Result_2".

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value_1 0101

1111

0110

0100

1001

1101

0011

1011

Constante
(DW#16#39
C657AC)

0011

1001

1100

0110

0101

0111

1010

1100

Tag_Re‐
sult_1

0110

0110

1010

0010

1100

1010

1001

0111

Tag_Value_2 0110

0101

0100

0011

0101

1101

0010

1011

Tag_Value_3 0011

1001

1100

0110

0101

0111

1010

1100

Tag_Re‐
sult_2

1100

1000

0101

0000

1010

1000

0111

0101

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Activar el bit de estado en operaciones lógicas con palabras (Página 194)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

5518

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Desplazamiento y rotación
Desplazar
SSI: Desplazar con signo por palabras
Descripción
La instrucción "Desplazar con signo por palabras" desplaza bit por bit la palabra derecha (bits
de 0 a 15) del acumulador 1 hacia la derecha. Las posiciones que quedan libres al desplazar
se rellenan con el estado lógico del bit 15 (bit de signo en números INT). Los bits 16 a 31 del
acumulador 1 no cambian. Esta instrucción se ejecuta independientemente del RLO. El bit de
estado CC1 se ajusta al estado lógico del último bit desplazado.
Para indicar el número de posiciones de bit que se desplazarán existen las posibilidades
siguientes:
● Indicación de un entero positivo como parámetro de la instrucción. (<Número>)
● Indicación mediante el valor del byte derecho del acumulador 2. El byte se interpreta en
forma de entero positivo.
Se pueden utilizar los siguientes formatos:
● SSI <Número>: El operando <Número> indica el número de desplazamiento. Se admiten
valores entre 0 y 15. Los bits de estado CC0 y OV se ponen a "0" si <Número> es mayor que
cero.
● SSI: El valor del acumulador 2 indica el número de desplazamiento. Se admiten valores
entre 0 y 255. Los bits de estado CC0 y OV se ponen a "0" si el contenido del acumulador
2 es mayor que cero.
Si el número de desplazamiento indicado es mayor que 15, todos los bits de la palabra
derecha del acumulador 1 se rellenarán con el estado lógico del bit 15.
La instrucción se ejecuta aunque el número de desplazamiento indicado sea cero. El bit de
estado CC 1 se pone a "0".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Formato

Descripción

<Número>

Enteros positivos:

Número de posiciones de bit que
se desplazarán.

SINT, INT, UINT, USINT

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando en el acumulador 1.

Programación del PLC
Manual de programación y manejo, 11/2019

5519

Instrucciones
4.2 Instrucciones
AWL

Explicación

SSI 6

// Desplazar los bits 0 a 15 del acumulador 1 seis posiciones a la derecha.
// Rellenar las posiciones liberadas con el estado del
bit 15.

T "Tag_Result_1"

// Transferir el contenido del acumulador 1 al operando.

L 3

// Cargar el número de desplazamiento en el acumulador
1.

L "Tag_Value_2"

// Desplazar el número de desplazamiento al byte derecho del acumulador 2.
// Cargar el valor del operando en el acumulador 1.

SSI

// Desplazar los bits 0 a 15 del acumulador 1 tres posiciones a la derecha.
// Rellenar las posiciones liberadas con el estado del
bit 15.

T "Tag_Result_2"

// Transferir el contenido del acumulador 1 al operando.

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value_1 0101

1111

0110

0100

1001

1101

0011

1011

Tag_Re‐
sult_1

0101

1111

0110

0100

1111

1110

0111

0100

Tag_Value_2 0101

1111

0110

0100

0101

1101

0010

1011

Tag_Re‐
sult_2

1111

0110

0100

0000

1011

1010

0101

0101

Consulte también
Activar el bit de estado en instrucciones de desplazamiento y rotación (Página 194)
Principios básicos de la palabra de estado (Página 184)
Vista general de los tipos de datos válidos (Página 241)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

SSD: Desplazar con signo por palabras dobles
Descripción
La instrucción "Desplazar con signo por palabras dobles" desplaza bit por bit todo el contenido
del acumulador 1 hacia la derecha. Las posiciones que quedan libres al desplazar se rellenan
con el estado lógico del bit 31 (bit de signo en números DINT). Esta instrucción se ejecuta
independientemente del RLO. El bit de estado CC1 se ajusta al estado lógico del último bit
desplazado.

5520

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Para indicar el número de posiciones de bit que se desplazarán existen las posibilidades
siguientes:
● Indicación de un entero positivo como parámetro de la instrucción. (<Número>)
● Indicación mediante el valor del byte derecho del acumulador 2. El byte se interpreta en
forma de entero positivo.
Se pueden utilizar los siguientes formatos:
● SSD <Número>: El operando <Número> indica el número de desplazamiento. Se admiten
valores entre 0 y 31. Los bits de estado CC0 y OV se ponen a "0" si <Número> es mayor que
cero.
● SSD: El valor del acumulador 2 indica el número de desplazamiento. Se admiten valores
entre 0 y 255. Los bits de estado CC0 y OV se ponen a "0" si el contenido del acumulador
2 es mayor que cero.
Con valores mayores que 31, todos los bits del acumulador 1 se rellenan con el estado
lógico del bit 31.
La instrucción se ejecuta aunque el número de desplazamiento indicado sea cero. El bit de
estado CC 1 se pone a "0".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Formato

Descripción

<Número>

Enteros positivos:

Número de posiciones de bit que
se desplazarán.

SINT, INT, UINT, USINT

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando en el acumulador 1.

SSD 7

// Desplazar los bits 0 a 31 del acumulador 1 siete
posiciones a la derecha.
// Rellenar las posiciones liberadas con el estado del
bit 31.

T "Tag_Result_1"

// Transferir el contenido del acumulador 1 al operando.

L 4

// Cargar el número de desplazamiento en el acumulador
1.

L "Tag_Value_2"

// Desplazar el número de desplazamiento al byte derecho del acumulador 2.
// Cargar el valor del operando en el acumulador 1.

SSD

// Desplazar los bits 0 a 31 del acumulador 1 cuatro
posiciones a la derecha.
// Rellenar las posiciones liberadas con el estado del
bit 31.

Programación del PLC
Manual de programación y manejo, 11/2019

5521

Instrucciones
4.2 Instrucciones
AWL

Explicación

T "Tag_Result_2"

// Transferir el contenido del acumulador 1 al operando.

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value_1 1000

1111

0110

0100

0101

1101

0011

1011

Tag_Re‐
sult_1

1111

1111

0001

1110

1100

1000

1011

1010

Tag_Value_2 0010

1000

1010

0010

1001

1011

1100

1101

Tag_Re‐
sult_2

0010

1000

1010

0010

1001

1011

1100

0000

Consulte también
Activar el bit de estado en instrucciones de desplazamiento y rotación (Página 194)
Principios básicos de la palabra de estado (Página 184)
Vista general de los tipos de datos válidos (Página 241)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

SLW: Desplazar a la izquierda por palabras
Descripción
La instrucción "Desplazar a la izquierda por palabras" desplaza bit por bit la palabra derecha
(bits 0 a 15) del acumulador 1 hacia la izquierda. Las posiciones que quedan libres al desplazar
se rellenan con ceros. Los bits 16 a 31 del acumulador 1 no cambian. Esta instrucción se
ejecuta independientemente del RLO. El bit de estado CC1 se ajusta al estado lógico del último
bit desplazado.
Para indicar el número de posiciones de bit que se desplazarán existen las posibilidades
siguientes:
● Indicación de un entero positivo como parámetro de la instrucción. (<Número>)
● Indicación mediante el valor del byte derecho del acumulador 2. El byte se interpreta en
forma de entero positivo.
Se pueden utilizar los siguientes formatos:
● SLW <Número>: El operando <Número> indica el número de desplazamiento. Se admiten
valores entre 0 y 15. Los bits de estado CC0 y OV se ponen a "0" si <Número> es mayor que
cero.
● SLW: El valor del acumulador 2 indica el número de desplazamiento. Se admiten valores
entre 0 y 255. Los bits de estado CC0 y OV se ponen a "0" si el contenido del acumulador
2 es mayor que cero.

5522

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Si el número de desplazamiento indicado es mayor que 15, todos los bits de la palabra derecha
del acumulador 1 se rellenarán con ceros.
La instrucción se ejecuta aunque el número de desplazamiento indicado sea cero. El bit de
estado CC 1 se pone a "0".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desplazar a la izquierda por
palabras":
Parámetro

Formato

Descripción

<Número>

Enteros positivos:

Número de posiciones de bit que
se desplazarán.

SINT, INT, UINT, USINT

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando en el acumulador 1.

SLW 5

// Desplazar los bits 0 a 15 del acumulador 1 cinco
posiciones a la izquierda.
// Rellenar las posiciones liberadas con ceros.

T "Tag_Result_1"

// Transferir el contenido del acumulador 1 al operando.

L 4

// Cargar el número de desplazamiento en el acumulador
1.

L "Tag_Value_2"

// Desplazar el número de desplazamiento al byte derecho del acumulador 2.
// Cargar el valor del operando en el acumulador 1.

SLW

// Desplazar los bits 0 a 15 del acumulador 1 cuatro
posiciones a la izquierda.
// Rellenar las posiciones liberadas con ceros.

T "Tag_Result_2"

// Transferir el contenido del acumulador 1 al operando.

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value_1 0101

1111

0110

0100

0101

1101

0011

1011

Tag_Re‐
sult_1

0101

1111

0110

0100

1010

0111

0110

0000

Tag_Value_2 0101

1111

0110

0100

0101

1101

0010

1011

Tag_Re‐
sult_2

1111

0110

0100

1101

0010

1011

0000

0101

Programación del PLC
Manual de programación y manejo, 11/2019

5523

Instrucciones
4.2 Instrucciones

Consulte también
Activar el bit de estado en instrucciones de desplazamiento y rotación (Página 194)
Principios básicos de la palabra de estado (Página 184)
Vista general de los tipos de datos válidos (Página 241)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

SRW: Desplazar a la derecha por palabras
Descripción
La instrucción "Desplazar a la derecha por palabras" desplaza bit por bit la palabra derecha
(bits 0 a 15) del acumulador 1 hacia la derecha. Las posiciones que quedan libres al desplazar
se rellenan con ceros. Los bits 16 a 31 del acumulador 1 no cambian. Esta instrucción se
ejecuta independientemente del RLO. El bit de estado CC1 se ajusta al estado lógico del último
bit desplazado.
Para indicar el número de posiciones de bit que se desplazarán existen las posibilidades
siguientes:
● Indicación de un entero positivo como parámetro de la instrucción. (<Número>)
● Indicación mediante el valor del byte derecho del acumulador 2. El byte se interpreta en
forma de entero positivo.
Se pueden utilizar los siguientes formatos:
● SRW <Número>: El operando <Número> indica el número de desplazamiento. Se admiten
valores entre 0 y 15. Los bits de estado CC0 y OV se ponen a "0" si <Número> es mayor que
cero.
● SRW: El valor del acumulador 2 indica el número de desplazamiento. Se admiten valores
entre 0 y 255. Los bits de estado CC0 y OV se ponen a "0" si el contenido del acumulador
2 es mayor que cero.
Si el número de desplazamiento indicado es mayor que 15, todos los bits de la palabra
derecha del acumulador 1 se rellenarán con ceros.
La instrucción se ejecuta aunque el número de desplazamiento indicado sea cero. El bit de
estado CC 1 se pone a "0".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desplazar a la derecha por
palabras":
Parámetro

Formato

Descripción

<Número>

Enteros positivos:

Número de posiciones de bit que
se desplazarán.

SINT, INT, UINT, USINT

5524

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando en el acumulador 1.

SRW 6

// Desplazar los bits 0 a 15 del acumulador 1 seis posiciones a la derecha.
// Rellenar las posiciones liberadas con ceros.

T "Tag_Result_1"

// Transferir el contenido del acumulador 1 al operando.

L 4

// Cargar el número de desplazamiento en el acumulador
1.

L "Tag_Value_2"

// Desplazar el número de desplazamiento al byte derecho del acumulador 2.
// Cargar el valor del operando en el acumulador 1.

SRW

// Desplazar los bits 0 a 15 del acumulador 1 cuatro
posiciones a la derecha.
// Rellenar las posiciones liberadas con ceros.

T "Tag_Result_2"

// Transferir el contenido del acumulador 1 al operando.

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value_1 0101

1111

0110

0100

0101

1101

0011

1011

Tag_Re‐
sult_1

0101

1111

0110

0100

0000

0001

0111

0100

Tag_Value_2 0101

1111

0110

0100

0101

1101

0010

1011

Tag_Re‐
sult_2

1111

0110

0100

0000

0101

1101

0010

0101

Consulte también
Activar el bit de estado en instrucciones de desplazamiento y rotación (Página 194)
Principios básicos de la palabra de estado (Página 184)
Vista general de los tipos de datos válidos (Página 241)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Programación del PLC
Manual de programación y manejo, 11/2019

5525

Instrucciones
4.2 Instrucciones

SLD: Desplazar a la izquierda por palabras dobles
Descripción
La instrucción "Desplazar a la izquierda por palabras dobles" desplaza bit por bit todo el
contenido del acumulador 1 hacia la izquierda. Las posiciones que quedan libres al desplazar
se rellenan con ceros. Esta instrucción se ejecuta independientemente del RLO. El bit de
estado CC1 se ajusta al estado lógico del último bit desplazado.
Para indicar el número de posiciones de bit que se desplazarán existen las posibilidades
siguientes:
● Indicación de un entero positivo como parámetro de la instrucción. (<Número>)
● Indicación mediante el valor del byte derecho del acumulador 2. El byte se interpreta en
forma de entero positivo.
Se pueden utilizar los siguientes formatos:
● SLD <Número>: El operando <Número> indica el número de desplazamiento. Se admiten
valores entre 0 y 31. Los bits de estado CC0 y OV se ponen a "0" si <Número> es mayor que
cero.
● SLD: El valor del acumulador 2 indica el número de desplazamiento. Se admiten valores
entre 0 y 255. Los bits de estado CC0 y OV se ponen a "0" si el contenido del acumulador
2 es mayor que cero.
Con valores mayores que 31, todos los bits del acumulador 1 se rellenan con ceros.
La instrucción se ejecuta aunque el número de desplazamiento indicado sea cero. El bit de
estado CC 1 se pone a "0".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desplazar a la izquierda por
palabras dobles":
Parámetro

Formato

Descripción

<Número>

Enteros positivos:

Número de posiciones de bit que
se desplazarán.

SINT, INT, UINT, USINT

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando en el acumulador 1.

SLD 5

// Desplazar los bits 0 a 31 del acumulador 1 cinco
posiciones a la izquierda.
// Rellenar las posiciones liberadas con ceros.

5526

T "Tag_Result_1"

// Transferir el contenido del acumulador 1 al operando.

L 4

// Cargar el número de desplazamiento en el acumulador
1.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
AWL

Explicación

L "Tag_Value_2"

// Desplazar el número de desplazamiento al byte derecho del acumulador 2.
// Cargar el valor del operando en el acumulador 1.

SLD

// Desplazar los bits 0 a 31 del acumulador 1 cuatro
posiciones a la izquierda.
// Rellenar las posiciones liberadas con ceros.

T "Tag_Result_2"

// Transferir el contenido del acumulador 1 al operando.

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value_1 0101

1111

0110

0100

0101

1101

0011

1011

Tag_Re‐
sult_1

1110

1100

1000

1011

1010

0111

0110

0000

Tag_Value_2 1010

1000

1010

0010

1001

1011

1100

1101

Tag_Re‐
sult_2

1010

0010

1001

1011

1100

1101

0000

1000

Consulte también
Activar el bit de estado en instrucciones de desplazamiento y rotación (Página 194)
Principios básicos de la palabra de estado (Página 184)
Vista general de los tipos de datos válidos (Página 241)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

SRD: Desplazar a la derecha por palabras dobles
Descripción
La instrucción "Desplazar a la derecha por palabras dobles" desplaza bit por bit todo el
contenido del acumulador 1 hacia la derecha. Las posiciones que quedan libres al desplazar
se rellenan con ceros. Esta instrucción se ejecuta independientemente del RLO. El bit de
estado CC1 se ajusta al estado lógico del último bit desplazado.
Para indicar el número de posiciones de bit que se desplazarán existen las posibilidades
siguientes:
● Indicación de un entero positivo como parámetro de la instrucción. (<Número>)
● Indicación mediante el valor del byte derecho del acumulador 2. El byte se interpreta en
forma de entero positivo.

Programación del PLC
Manual de programación y manejo, 11/2019

5527

Instrucciones
4.2 Instrucciones
Se pueden utilizar los siguientes formatos:
● SRD <Número>: El operando <Número> indica el número de desplazamiento. Se admiten
valores entre 0 y 31. Los bits de estado CC0 y OV se ponen a "0" si <Número> es mayor que
cero.
● SRD: El valor del acumulador 2 indica el número de desplazamiento. Se admiten valores
entre 0 y 255. Los bits de estado CC0 y OV se ponen a "0" si el contenido del acumulador
2 es mayor que cero.
Con valores mayores que 31, todos los bits del acumulador 1 se rellenan con ceros.
La instrucción se ejecuta aunque el número de desplazamiento indicado sea cero. El bit de
estado CC 1 se pone a "0".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Desplazar a la derecha por
palabras dobles":
Parámetro

Formato

Descripción

<Número>

Enteros positivos:

Número de posiciones de bit que
se desplazarán.

SINT, INT, UINT, USINT

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando en el acumulador 1.

SRD 7

// Desplazar los bits 0 a 31 del acumulador 1 siete
posiciones a la derecha.
// Rellenar las posiciones liberadas con ceros.

T "Tag_Result_1"

// Transferir el contenido del acumulador 1 al operando.

L 4

// Cargar el número de desplazamiento en el acumulador
1.

L "Tag_Value_2"

// Desplazar el número de desplazamiento al byte derecho del acumulador 2.
// Cargar el valor del operando en el acumulador 1.

SRD

// Desplazar los bits 0 a 31 del acumulador 1 cuatro
posiciones a la derecha.
// Rellenar las posiciones liberadas con ceros.

T "Tag_Result_2"

5528

// Transferir el contenido del acumulador 1 al operando.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value_1 0101

1111

0110

0100

0101

1101

0011

1011

Tag_Re‐
sult_1

0000

0000

1011

1110

1100

1000

1011

1010

Tag_Value_2 1010

1000

1010

0010

1001

1011

1100

1101

Tag_Re‐
sult_2

1010

1000

1010

0010

1001

1011

1100

0000

Consulte también
Activar el bit de estado en instrucciones de desplazamiento y rotación (Página 194)
Principios básicos de la palabra de estado (Página 184)
Vista general de los tipos de datos válidos (Página 241)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Rotación
RLD: Rotar a la izquierda por palabras dobles
Descripción
La instrucción "Rotar a la izquierda por palabras dobles" rota bit por bit todo el contenido del
acumulador 1 hacia la izquierda. Durante la ejecución, la instrucción desplaza por bits los bits
de 0 a 31 del acumulador 1 hacia la izquierda y rellena las posiciones que han quedado libres
al desplazar con las posiciones de bit desplazadas. Esta instrucción se ejecuta
independientemente del RLO. El bit de estado CC1 se ajusta al estado lógico del último bit
desplazado.
Para indicar el número de posiciones de bit que se rotarán existen las posibilidades siguientes:
● Indicación de un entero positivo como parámetro de la instrucción. (<Número>)
● Indicación mediante el valor del byte derecho del acumulador 2. El byte se interpreta en
forma de entero positivo.

Programación del PLC
Manual de programación y manejo, 11/2019

5529

Instrucciones
4.2 Instrucciones
Se pueden utilizar los siguientes formatos:
● RLD <Número>: El operando <Número> indica el número de rotación. Se admiten valores
entre 0 y 32. Los bits de estado CC0 y OV se ponen a "0" si <Número> es mayor que cero.
● RLD: El valor del acumulador 2 indica el número de rotación. Se admiten valores entre 0 y
255. Los bits de estado CC0 y OV se ponen a "0" si el contenido del acumulador 2 es mayor
que cero.
Si el valor es mayor que 32, el número de rotación se calcula con una división módulo entre
32. Si, p. ej., el número de rotación es 34, los bits del acumulador 1 se rotarán 2 posiciones
de bit.
Si el número de rotación indicado es 32, el contenido del acumulador 1 no cambia.
Aunque el número de rotación indicado sea cero, la instrucción se ejecuta. El bit de estado CC
1 se pone a "0".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Formato

Descripción

<Número>

Enteros positivos:

Número de posiciones de bit que
se rotarán.

SINT, INT, UINT, USINT

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando en el acumulador 1.

RLD 4

// Rotar los bits 0 a 31 del acumulador 1 cuatro posiciones a la izquierda.

T "Tag_Result_1"

// Transferir el contenido del acumulador 1 al operando.

L 6

// Cargar el número de rotación en el acumulador 1.

L "Tag_Value_2"

// Desplazar el número de rotación al byte derecho del
acumulador 2.
// Cargar el valor del operando en el acumulador 1.

RLD

// Rotar los bits 0 a 31 del acumulador 1 seis posiciones a la izquierda.

T "Tag_Result_2"

// Transferir el contenido del acumulador 1 al operando.

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

5530

Valor

Tag_Value_1 0101

1111

0110

0100

0101

1101

0011

1011

Tag_Re‐
sult_1

0110

0100

0101

1101

0011

1011

0101

1111

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Operando

Valor

Tag_Value_2 1010

1000

1010

0010

1001

1011

1100

1101

Tag_Re‐
sult_2

1000

1010

0110

1111

0011

0110

1010

0010

Consulte también
Activar el bit de estado en instrucciones de desplazamiento y rotación (Página 194)
Principios básicos de la palabra de estado (Página 184)
Vista general de los tipos de datos válidos (Página 241)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

RRD: Rotar a la derecha por palabras dobles
Descripción
La instrucción "Rotar a la derecha por palabras dobles" rota bit por bit todo el contenido del
acumulador 1 hacia la derecha. Durante la ejecución, la instrucción desplaza por bits los bits
0 a 31 del acumulador 1 hacia la derecha y rellena las posiciones que han quedado libres al
desplazar con las posiciones de bit desplazadas. Esta instrucción se ejecuta
independientemente del RLO. El bit de estado CC1 se ajusta al estado lógico del último bit
desplazado.
Para indicar el número de posiciones de bit que se rotarán existen las posibilidades siguientes:
● Indicación de un entero positivo como parámetro de la instrucción. (<Número>)
● Indicación mediante el valor del byte derecho del acumulador 2. El byte se interpreta en
forma de entero positivo.
Se pueden utilizar los siguientes formatos:
● RRD <Número>: El operando <Número> indica el número de rotación. Se admiten valores
entre 0 y 32. Los bits de estado CC0 y OV se ponen a "0" si <Número> es mayor que cero.
● RRD: El valor del acumulador 2 indica el número de rotación. Se admiten valores entre 0 y
255. Los bits de estado CC0 y OV se ponen a "0" si el contenido del acumulador 2 es mayor
que cero.
Si el valor es mayor que 32, el número de rotación se calcula con una división módulo entre
32. Si, p. ej., el número de rotación es 34, los bits del acumulador 1 se rotarán 2 posiciones
de bit.
Si el número de rotación indicado es 32, el contenido del acumulador 1 no cambia.
Aunque el número de rotación indicado sea cero, la instrucción se ejecuta. El bit de estado CC
1 se pone a "0".

Programación del PLC
Manual de programación y manejo, 11/2019

5531

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Formato

Descripción

<Número>

Enteros positivos:

Número de posiciones de bit que
se rotarán.

SINT, INT, UINT, USINT

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando en el acumulador 1.

RRD 4

// Rotar los bits 0 a 31 del acumulador 1 cuatro posiciones a la derecha.

T "Tag_Result_1"

// Transferir el contenido del acumulador 1 al operando.

L 6

// Cargar el número de rotación en el acumulador 1.

L "Tag_Value_2"

// Desplazar el número de rotación al byte derecho del
acumulador 2.
// Cargar el valor del operando en el acumulador 1.

RRD

// Rotar los bits 0 a 31 del acumulador 1 seis posiciones a la derecha.

T "Tag_Result_2"

// Transferir el contenido del acumulador 1 al operando.

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value_1 0101

1111

0110

0100

0101

1101

0011

1011

Tag_Re‐
sult_1

1011

0101

1111

0110

0100

0101

1101

0011

Tag_Value_2 1010

1000

1010

0010

1001

1011

1100

1101

Tag_Re‐
sult_2

0110

1010

0010

1000

1010

0110

1111

0011

Consulte también
Activar el bit de estado en instrucciones de desplazamiento y rotación (Página 194)
Principios básicos de la palabra de estado (Página 184)
Vista general de los tipos de datos válidos (Página 241)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

5532

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

RLDA: Rotar a la izquierda vía bit de estado CC 1
Descripción
La instrucción "Rotar a la izquierda vía bit de estado CC 1" desplaza el contenido del
acumulador 1 un bit a la izquierda. La posición de bit que ha quedado libre al desplazar (0) se
rellena con el estado lógico del bit de estado CC 1. El bit de estado CC 1 obtiene el estado
lógico del bit desplazado (31).
Esta instrucción se ejecuta independientemente del RLO. Pone el bit de estado CC 0 a "0".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value"

// Cargar el valor del operando en el acumulador 1.

RLDA

// Rotar los bits 0 a 31 del acumulador 1 una posición
a la izquierda.
// Rellenar el bit 1 con el estado lógico del bit de
estado CC 1.
// Escribir el bit desplazado en el bit de estado CC 1.

T "Tag_Result"

// Transferir el contenido del acumulador 1 al operando.

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

CC 1

Valor

Tag_Value 1

0101

1111

0110

0100

0101

1101

0011

1011

Tag_Re‐
sult

1011

1110

1100

1000

1011

1010

0111

0111

0

Consulte también
Activar el bit de estado en instrucciones de desplazamiento y rotación (Página 194)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

RRDA: Rotar a la derecha vía bit de estado CC 1
Descripción
La instrucción "Rotar a la derecha vía bit de estado CC 1" desplaza el contenido del
acumulador 1 un bit a la derecha. La posición de bit que ha quedado libre al desplazar (31) se
rellena con el estado lógico del bit de estado CC 1. El bit de estado CC 1 obtiene el estado
lógico del bit desplazado (0).
Programación del PLC
Manual de programación y manejo, 11/2019

5533

Instrucciones
4.2 Instrucciones
Esta instrucción se ejecuta independientemente del RLO. Pone el bit de estado CC 0 a "0".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value"

// Cargar el valor del operando en el acumulador 1.

RRDA

// Rotar los bits 0 a 31 del acumulador 1 una posición
a la derecha.
// Rellenar el bit 31 con el estado lógico del bit de
estado CC 1.
// Escribir el bit desplazado en el bit de estado CC 1.

T "Tag_Result"

// Transferir el contenido del acumulador 1 al operando.

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

CC 1

Valor

Tag_Value

1

0101

1111

0110

0100

0101

1101

0011

1011

Tag_Result

0

1010

1111

1011

0010

0010

1110

1001

1101

El bit de estado CC 1 tiene el valor "1", ya que el bit 0 del operando "Tag_Value" también tiene
el valor "1".

Consulte también
Activar el bit de estado en instrucciones de desplazamiento y rotación (Página 194)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Otras instrucciones
Acumulador
TAK: Intercambiar contenido de los acumuladores 1 y 2
Descripción
La instrucción "Intercambiar contenido de los acumuladores 1 y 2" intercambia el contenido del
acumulador 1 con el contenido del acumulador 2. En los controladores con cuatro
acumuladores, los contenidos de los acumuladores 3 y 4 no se ven influidos por esta
instrucción.

5534

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La CPU ejecuta la instrucción independientemente del resultado lógico y los bits de estado. La
instrucción no influye ni en el resultado lógico ni en los bits de estado.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1" en el
acumulador 1.

L "Tag_Value_2"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_2" en el
acumulador 1.

>I

// Comparar si el valor del acumulador 2 es mayor que
el valor del acumulador 1.

JC NEXT

// Si la condición se cumple (RLO = "1"), saltar a la
etiqueta "NEXT".
// Si la condición no se cumple (RLO = "0"), procesar
la instrucción siguiente.

TAK

// Intercambiar contenido de los acumuladores 1 y 2.

NEXT: -I

// Etiqueta "NEXT"
// Restar el valor del acumulador 1 del valor del acumulador 2.

T "Tag_Output"

// Transferir el contenido del acumulador 1 al operando "Tag_Output".

Consulte también
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

PUSH: Desplazar contenido al siguiente acumulador superior
Descripción
La instrucción "Desplazar contenido al siguiente acumulador superior" desplaza los
contenidos de los acumuladores 1 a 3 al siguiente acumulador superior en cada caso.
En los controladores con 2 acumuladores solo se copia el contenido del acumulador 1 en el
acumulador 2.
En los controladores con 4 acumuladores se desplaza el contenido del acumulador 1 al
acumulador 2, el contenido del acumulador 2 al acumulador 3 y el contenido del acumulador
3 al acumulador 4. El contenido del acumulador 4 se pierde.
El contenido del acumulador 1 no se ve influido por la instrucción y permanece invariable una
vez ejecutada la misma.

Programación del PLC
Manual de programación y manejo, 11/2019

5535

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra el contenido de los acumuladores 1 a 4 antes y después de ejecutar
la instrucción:
Estado

Acumulador
1

2

3

4

Antes de la ejecución

Valor A

Valor B

Valor C

Valor D

Después de la ejecución

Valor A

Valor A

Valor B

Valor C

La CPU ejecuta la instrucción independientemente del resultado lógico y los bits de estado. La
instrucción no influye ni en el resultado lógico ni en los bits de estado.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando en el acumulador 1.

PUSH

// Desplazar el contenido de los acumuladores 1 a 3 al
siguiente acumulador superior en cada caso.

L "Tag_Value_2"

// Cargar el valor del operando en el acumulador 1.

Consulte también
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

POP: Desplazar contenido al siguiente acumulador inferior
Descripción
La instrucción "Desplazar contenido al siguiente acumulador inferior" desplaza los contenidos
de los acumuladores 4 a 2 al siguiente acumulador inferior en cada caso.
En los controladores con 2 acumuladores se copia el contenido del acumulador 2 en el
acumulador 1.
En los controladores con 4 acumuladores se desplaza el contenido del acumulador 4 al
acumulador 3, el contenido del acumulador 3 al acumulador 2 y el contenido del acumulador
2 al acumulador 1. El contenido del acumulador 1 se pierde.
El contenido del acumulador 4 no se ve influido por la instrucción y permanece invariable una
vez ejecutada la misma.
La tabla siguiente muestra el contenido de los acumuladores 1 a 4 antes y después de ejecutar
la instrucción:
Estado

Acumulador
1

5536

2

3

4

Antes de la ejecución

Valor A

Valor B

Valor C

Valor D

Después de la ejecución

Valor B

Valor C

Valor D

Valor D

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La CPU ejecuta la instrucción independientemente del resultado lógico y los bits de estado. La
instrucción no influye ni en el resultado lógico ni en los bits de estado.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

T "Tag_Value_1"

// Transferir el contenido del acumulador 1 al operando "Tag_Value_1".

POP

// Desplazar el contenido de los acumuladores 4 a 2 al
siguiente acumulador inferior en cada caso.

T "Tag_Value_2"

// Transferir el contenido del acumulador 1 al operando "Tag_Value_2".

Consulte también
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

ENT: Desplazar los acumuladores 2 y 3 al siguiente acumulador superior
Descripción
La instrucción "Desplazar los acumuladores 2 y 3 al siguiente acumulador superior" desplaza
el contenido del acumulador 3 al acumulador 4 y el contenido del acumulador 2 al acumulador
3. Los contenidos de los acumuladores 1 y 2 no cambian.
La tabla siguiente muestra el contenido de los acumuladores 1 a 4 antes y después de ejecutar
la instrucción:
Estado

Acumulador
1

2

3

4

Antes de la ejecución

Valor A

Valor B

Valor C

Valor D

Después de la ejecución

Valor A

Valor B

Valor B

Valor C

La CPU ejecuta la instrucción independientemente del resultado lógico y los bits de estado. La
instrucción no influye ni en el resultado lógico ni en los bits de estado.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1" en el
acumulador 1.

Programación del PLC
Manual de programación y manejo, 11/2019

5537

Instrucciones
4.2 Instrucciones
AWL

Explicación

L "Tag_Value_2"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_2" en el
acumulador 1.

*R

// Multiplicar los valores de los acumuladores 1 y 2.
// Guardar el producto (resultado parcial) en el acumulador 1.

L "Tag_Value_3"

// Desplazar el contenido del acumulador 1 (resultado
parcial) al acumulador 2.
// Cargar el valor del operando "Tag_Value_3" en el
acumulador 1.

ENT

// Copiar el contenido del acumulador 2 (resultado
parcial) en el acumulador 3.
// Copiar el contenido del acumulador 3 en el acumulador 4.

L "Tag_Value_4"

// Desplazar el contenido del acumulador 1 ("Tag_Value_3") al acumulador 2.
// Cargar el valor del operando "Tag_Value_4" en el
acumulador 1.

+R

// Sumar los valores de los acumuladores 1 y 2.
// Guardar la suma en el acumulador 1.
// Transferir el valor del acumulador 3 (resultado
parcial) al acumulador 2.

LEAVE

// Desplazar el contenido del acumulador 3 (resultado
parcial) al acumulador 2.
// Desplazar el contenido del acumulador 4 al acumulador 3.

/R

// Dividir los valores de los acumuladores 1 y 2.
// Guardar el resultado en el acumulador 1.

T "Tag_Result"

// Transferir el resultado (contenido del acumulador
1) al operando "Tag_Result".

Consulte también
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

LEAVE: Desplazar los acumuladores 3 y 4 al siguiente acumulador inferior
Descripción
La instrucción "Desplazar los acumuladores 3 y 4 al siguiente acumulador inferior" desplaza el
contenido del acumulador 3 al acumulador 2 y el contenido del acumulador 4 al acumulador 3.
Los contenidos de los acumuladores 1 y 4 no cambian.
Las instrucciones de cálculos aritméticos incluyen la funcionalidad de la instrucción "Desplazar
los acumuladores 3 y 4 al siguiente acumulador inferior".

5538

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra el contenido de los acumuladores 1 a 4 antes y después de ejecutar
la instrucción:
Estado

Acumulador
1

2

3

4

Antes de la ejecución

Valor A

Valor B

Valor C

Valor D

Después de la ejecución

Valor A

Valor C

Valor D

Valor D

La CPU ejecuta la instrucción independientemente del resultado lógico y los bits de estado. La
instrucción no influye ni en el resultado lógico ni en los bits de estado.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1" en el
acumulador 1.

L "Tag_Value_2"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_2" en el
acumulador 1.

AD

// Combinar lógicamente con Y el valor del acumulador
2 ("Tag_Value_1") con el valor del acumulador 1
("Tag_Value_2").
// Guardar el resultado en el acumulador 1.

L "Tag_Value_3"

// Desplazar el contenido del acumulador 1 (resultado
parcial) al acumulador 2.
// Cargar el valor del operando "Tag_Value_3" en el
acumulador 1.

ENT

// Copiar el contenido del acumulador 2 (resultado
parcial) en el acumulador 3.
// Copiar el contenido del acumulador 3 en el acumulador 4.

L "Tag_Value_4"

// Desplazar el contenido del acumulador 1 ("Tag_Value_3") al acumulador 2.
// Cargar el valor del operando "Tag_Value_4" en el
acumulador 1.

AD

// Combinar lógicamente con Y el valor del acumulador
2 ("Tag_Value_3") con el valor del acumulador 1
("Tag_Value_4").
// Guardar el resultado en el acumulador 1.

LEAVE

// Desplazar el contenido del acumulador 3 (resultado
parcial) al acumulador 2.
// Desplazar el contenido del acumulador 4 al acumulador 3.

OD

// Combinar lógicamente con O el valor del acumulador
2 con el valor del acumulador 1.
// Guardar el resultado en el acumulador 1.

T "Tag_Result"

Programación del PLC
Manual de programación y manejo, 11/2019

// Transferir el resultado al operando "Tag_Result".

5539

Instrucciones
4.2 Instrucciones

Consulte también
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Registro de direcciones
+AR1: Sumar acumulador 1 a AR1
Descripción
La instrucción "Sumar acumulador 1 a AR1" suma un valor al contenido del registro de
direcciones 1. El tipo de puntero que está en el registro de direcciones 1 y el área de operandos
se conservan.
Para indicar el valor que debe sumarse existen las posibilidades siguientes:
● Indicación mediante una constante: La instrucción suma el valor de la constante al registro
de direcciones 1. El valor de la constante debe equivaler al formato de un puntero interno
del área (POINTER).
● Indicación mediante el valor de la palabra derecha del acumulador 1: la instrucción
interpreta el valor de la palabra derecha del acumulador 1 como un entero de 16 bits y lo
amplía a 24 bits con el signo correcto. Seguidamente, la instrucción suma el valor del
acumulador 1 al registro de direcciones 1. Se admiten valores de -32768 a +32767.
La CPU ejecuta la instrucción independientemente del resultado lógico y los bits de estado. La
instrucción no influye ni en el resultado lógico ni en los bits de estado.
Los contenidos de los acumuladores no cambian debido a la instrucción.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Sumar acumulador 1 a AR1":
Parámetro

Tipo de datos

Descripción

<Constante>

POINTER

Valor que se suma al registro de
direcciones 1.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

5540

AWL

Explicación

+AR1 P#10.0

// Sumar el puntero al registro de direcciones 1.

L "Tag_Value"

// Cargar el valor del operando "Tag_Value" en la palabra derecha del acumulador 1.

+AR1

// Sumar el valor del acumulador 1 al registro de direcciones 1.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
AWL

Explicación

TAR1 %MD24

// Transferir el contenido del registro de direcciones
1 a la palabra doble MD24.

Consulte también
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

+AR2: Sumar acumulador 1 a AR2
Descripción
La instrucción "Sumar acumulador 1 a AR2" suma un valor al contenido del registro de
direcciones 2. El tipo de puntero que está en el registro de direcciones 2 y el área de operandos
se conservan.
Para indicar el valor que debe sumarse existen las posibilidades siguientes:
● Indicación mediante una constante: La instrucción suma el valor de la constante al registro
de direcciones 2. El valor de la constante debe equivaler al formato de un puntero interno
del área (POINTER).
● Indicación mediante el valor de la palabra derecha del acumulador 1: la instrucción
interpreta el valor de la palabra derecha del acumulador 1 como un entero de 16 bits y lo
amplía a 24 bits con el signo correcto. Seguidamente, la instrucción suma el valor del
acumulador 1 al registro de direcciones 2. Se admiten valores de -32 768 a +32 767.
La CPU ejecuta la instrucción independientemente del resultado lógico y los bits de estado. La
instrucción no influye ni en el resultado lógico ni en los bits de estado.
Los contenidos de los acumuladores no cambian debido a la instrucción.
Nota
El registro de direcciones AR2 se utiiza para procesar multiinstancias. Si se programa la
instrucción "Sumar acumulador 1 a AR2", primero debe "salvarse" el contenido del registro de
direcciones 2 y volver a cargarlo después.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Sumar acumulador 1 a AR2":
Parámetro

Tipo de datos

Descripción

<Constante>

POINTER

Valor que se suma al registro de
direcciones 1.

Programación del PLC
Manual de programación y manejo, 11/2019

5541

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

+AR2 P#10.0

// Sumar el puntero al registro de direcciones 2.

L "Tag_Value"

// Cargar el valor del operando "Tag_Value" en la palabra derecha del acumulador 1.

+AR2

// Sumar el valor del acumulador 1 al registro de direcciones 2.

TAR2 %MD24

// Transferir el contenido del registro de direcciones
1 a la palabra doble MD24.

Consulte también
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Master Control Relay
MCR(: Abrir áreas MCR
Descripción
La instrucción "Abrir áreas MCR" activa y desactiva la dependencia MCR dentro de un área
MCR en función del resultado lógico (RLO).
El principio y el fin de un área MCR se definen mediante las instrucciones "Activar área MCR"
(MCRA) y "Desactivar área MCR" (MCRD). Dentro del área MCR definida es posible activar y
desactivar la dependencia MCR para una o varias partes del programa.
Nota
Observe la información contenida en el apartado "Indicaciones importantes sobre el uso de la
funcionalidad MCR", en "Consulte también".
La dependencia MCR se activa si el RLO es "1" antes de procesar la instrucción. Si el RLO es
"0" antes de la instrucción, la dependencia MCR se desactiva. El final de la sección del
programa dependiente de MCR se programa mediante la instrucción "Cerrar áreas MCR". La
sección del programa que se encuentra entre las dos instrucciones se ve influenciada por el
MCR. Solo se ven afectadas las instrucciones dependientes de MCR (p. ej. la instrucción
"Transferir" (T)).
También es posible anidar la activación y desactivación de la dependencia MCR programando
la instrucción "Abrir áreas MCR" en una sección del programa dependiente de MCR. Esta
instrucción se puede anidar hasta 8 niveles de profundidad. La dependencia MCR de la parte
del programa de nivel superior controla las dependencias MCR en todas las partes del
programa subordinadas. Si la dependencia MCR en la parte del programa de nivel superior

5542

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
está desactivada, no es posible activarla en una parte subordinada del programa dependiente
de MCR.
Si dentro de un área MCR se llama un bloque, la dependencia MCR está desactivada en el
bloque llamado. Cuando se sale de un bloque, la dependencia MCR se ajusta igual que estaba
antes de llamarlo.
Las instrucciones "Abrir áreas MCR" y "Cerrar áreas MCR" deben programarse siempre de dos
en dos. Si una de las dos instrucciones no está programada, se dispara un error de pila MCR.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

MCRA

// Comienzo del área MCR

A "Tag_Input_1"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

MCR(

// Comienzo de la dependencia MCR
// Si el estado lógico del RLO es "1", activar la dependencia MCR.
// Si el estado lógico del RLO es "0", desactivar la
dependencia MCR.

A "Tag_Input_2"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

= "Tag_Output_1"

// Si la dependencia MCR está desactivada, poner el
operando a "0".
// Si la dependencia MCR está activada, poner el operando a "1" o "0" en función del RLO.

A "Tag_Input_3"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

MCR(

// Anidamiento de la dependencia MCR

A "Tag_Input_4"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

A "Tag_Input_5"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

= "Tag_Output_2"

// Si la dependencia MCR está desactivada, poner el
operando a "0".
// Si la dependencia MCR está activada, poner el operando a "1" o "0" en función del RLO.

)MCR

// Fin del anidamiento

L "Tag_InputValue_1"

// Cargar el valor del operando en el acumulador 1.

T "Tag_OutputValue_1"

// Si la dependencia MCR está desactivada, escribir el
valor "0" en el operando.
// Si la dependencia MCR está activada, transferir el
contenido del acumulador 1 al operando.

)MCR

// Fin de la dependencia MCR

A "Tag_Input_6"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

Programación del PLC
Manual de programación y manejo, 11/2019

5543

Instrucciones
4.2 Instrucciones
AWL

Explicación

MCR(

// Comienzo de la dependencia MCR
// Si el estado lógico del RLO es "1", activar la dependencia MCR.
// Si el estado lógico del RLO es "0", desactivar la
dependencia MCR.

L "Tag_InputValue_2"

// Cargar el valor del operando en el acumulador 1.

T "Tag_OutputValue_2"

// Si la dependencia MCR está desactivada, escribir el
valor "0" en el operando.
// Si la dependencia MCR está activada, transferir el
contenido del acumulador 1 al operando.

)MCR

// Fin de la dependencia MCR

MCRD

// Fin del área MCR

A "Tag_Input_7"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

= "Tag_Output_3"

// Poner el operando a "1" o "0" en función del RLO.

Consulte también
Indicaciones importantes sobre el uso de la función MCR (Página 204)
Activar el bit de estado en instrucciones de control del programa (Página 192)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

)MCR: Cerrar áreas MCR
Descripción
La instrucción "Cerrar áreas MCR" cierra una sección del programa dependiente de MCR.
También borra el RLO de la última entrada de la pila MCR.
Nota
Observe la información contenida en el apartado "Indicaciones importantes sobre el uso de la
funcionalidad MCR", en "Consulte también".
La dependencia MCR se programa con la instrucción "Abrir áreas MCR". Las instrucciones
"Abrir áreas MCR" y "Cerrar áreas MCR" deben programarse siempre de dos en dos. Si una
de las dos instrucciones no está programada, se dispara un error de pila MCR.

5544

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

MCRA

// Comienzo del área MCR

A "Tag_Input_1"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

MCR(

// Comienzo de la dependencia MCR
// Si el estado lógico del RLO es "1", activar la dependencia MCR.
// Si el estado lógico del RLO es "0", desactivar la
dependencia MCR.

A "Tag_Input_2"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

= "Tag_Output_1"

// Si la dependencia MCR está desactivada, poner el
operando a "0".
// Si la dependencia MCR está activada, poner el operando a "1" o "0" en función del RLO.

L "Tag_InputValue"

// Cargar el valor del operando en el acumulador 1.

T "Tag_OutputValue"

// Si la dependencia MCR está desactivada, escribir el
valor "0" en el operando.
// Si la dependencia MCR está activada, transferir el
contenido del acumulador 1 al operando.

)MCR

// Fin de la dependencia MCR

MCRD

// Fin del área MCR

A "Tag_Input_3"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

= "Tag_Output_2"

// Poner el operando a "1" o "0" en función del RLO.

Consulte también
Indicaciones importantes sobre el uso de la función MCR (Página 204)
Activar el bit de estado en instrucciones de control del programa (Página 192)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

MCRA: Activar área MCR
Descripción
La instrucción "Activar área MCR" define el principio de un área MCR. Dentro de dicha área es
posible activar y desactivar la dependencia MCR con la ayuda de las instrucciones siguientes:
● MCR(: Abrir áreas MCR
● )MCR: Cerrar áreas MCR

Programación del PLC
Manual de programación y manejo, 11/2019

5545

Instrucciones
4.2 Instrucciones
El fin del área MCR se define con la instrucción "Desactivar área MCR" (MCRD). Las
instrucciones para definir el principio y fin de un área MCR siempre deben utilizarse por parejas.
Nota
Observe la información contenida en el apartado "Indicaciones importantes sobre el uso de la
funcionalidad MCR", en "Consulte también".
Si dentro de un área MCR se llama un bloque, la dependencia MCR está desactivada en el
bloque llamado. Cuando se sale de un bloque, la dependencia MCR se ajusta igual que estaba
antes de llamarlo.
La instrucción se ejecuta sin considerar ni influir en los bits de estado.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

MCRA

// Comienzo del área MCR

A "Tag_Input_1"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

MCR(

// Comienzo de la dependencia MCR
// Si el estado lógico del RLO es "1", activar la dependencia MCR.
// Si el estado lógico del RLO es "0", desactivar la
dependencia MCR.

A "Tag_Input_2"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

= "Tag_Output_1"

// Si la dependencia MCR está desactivada, poner el
operando a "0".
// Si la dependencia MCR está activada, poner el operando a "1" o "0" en función del RLO.

L "Tag_InputValue"

// Cargar el valor del operando en el acumulador 1.

T "Tag_OutputValue"

// Si la dependencia MCR está desactivada, escribir el
valor "0" en el operando.
// Si la dependencia MCR está activada, transferir el
contenido del acumulador 1 al operando.

)MCR

// Fin de la dependencia MCR

MCRD

// Fin del área MCR

A "Tag_Input_3"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

= "Tag_Output_2"

// Poner el operando a "1" o "0" en función del RLO.

Consulte también
Indicaciones importantes sobre el uso de la función MCR (Página 204)
Activar el bit de estado en instrucciones de control del programa (Página 192)
Principios básicos de la palabra de estado (Página 184)

5546

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

MCRD: Desactivar área MCR
Descripción
La instrucción "Desactivar área MCR" define el final de un área MCR.
El principio de un área MCR se define con la instrucción "Activar área MCR" (MCRA). Las
instrucciones para definir el principio y fin de un área MCR siempre deben utilizarse por parejas.
Nota
Observe la información contenida en el apartado "Indicaciones importantes sobre el uso de la
funcionalidad MCR", en "Consulte también".
Dentro de un área MCR es posible programar la dependencia MCR con la ayuda de las
instrucciones siguientes:
● MCR(: Abrir áreas MCR
● )MCR: Cerrar áreas MCR
Si dentro de un área MCR se llama un bloque, la dependencia MCR está desactivada en el
bloque llamado. Cuando se sale de un bloque, la dependencia MCR se ajusta igual que estaba
antes de llamarlo.
La instrucción se ejecuta sin considerar ni influir en los bits de estado.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

MCRA

// Comienzo del área MCR

A "Tag_Input_1"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

MCR(

// Comienzo de la dependencia MCR
// Si el estado lógico del RLO es "1", activar la dependencia MCR.
// Si el estado lógico del RLO es "0", desactivar la
dependencia MCR.

A "Tag_Input_2"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

= "Tag_Output_1"

// Si la dependencia MCR está desactivada, poner el
operando a "0".
// Si la dependencia MCR está activada, poner el operando a "1" o "0" en función del RLO.

L "Tag_InputValue"

Programación del PLC
Manual de programación y manejo, 11/2019

// Cargar el valor del operando en el acumulador 1.

5547

Instrucciones
4.2 Instrucciones
AWL

Explicación

T "Tag_OutputValue"

// Si la dependencia MCR está desactivada, escribir el
valor "0" en el operando.
// Si la dependencia MCR está activada, transferir el
contenido del acumulador 1 al operando.

)MCR

// Fin de la dependencia MCR

MCRD

// Fin del área MCR

A "Tag_Input_3"

// Consultar si el operando es "1" y combinar el resultado lógicamente con Y con el RLO actual.

= "Tag_Output_2"

// Poner el operando a "1" o "0" en función del RLO.

Consulte también
Indicaciones importantes sobre el uso de la función MCR (Página 204)
Activar el bit de estado en instrucciones de control del programa (Página 192)
Principios básicos de la palabra de estado (Página 184)
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

Instrucciones nulas
BLD: Refresco de imagen (instrucción nula)
Descripción
La instrucción "Refresco de imagen (instrucción nula)" no ejecuta ninguna función y no influye
en los bits de estado. La instrucción sirve para reconocer secuencias de códigos en la
transferencia de parámetros o en los segmentos KOP/FUP. Se genera automáticamente
cuando se visualiza un programa KOP o FUP en AWL. El valor de parámetro es el número de
identificación de la instrucción y es generado por la programadora.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Refresco de imagen (instrucción
nula)":
Parámetro

Tipo de datos

Descripción

<número de identificación>

WORD

Número de identificación de la
instrucción

Consulte también
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

5548

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

NOP 0: Instrucción nula
Descripción
La instrucción "Instrucción nula" con un parámetro 0 no ejecuta ninguna función y no influye en
los bits de estado. El código de la instrucción contiene un patrón de bits con 16 ceros. La
instrucción solo es importante para la programadora cuando se visualiza un programa.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
AWL

Explicación

L "Tag_Value_1"

// Cargar el valor del operando "Tag_Value_1" en el
acumulador 1.

L "Tag_Value_2"

// Desplazar el contenido del acumulador 1 al acumulador 2.
// Cargar el valor del operando "Tag_Value_2" en el
acumulador 1.

>I

// Comparar si el valor del acumulador 2 es mayor que
el valor del acumulador 1.

A

// Consultar si el estado lógico del operando es "1" y
combinar el resultado lógicamente con Y con el RLO actual.

JC NEXT

// Si la condición se cumple (RLO = "1"), saltar a la
etiqueta "NEXT".
// Si la condición no se cumple (RLO = "0"), procesar
la instrucción siguiente.

TAK

// Intercambiar contenido de los acumuladores 1 y 2.

NEXT: NOP 0

// Etiqueta "NEXT"

Consulte también
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

NOP 1: Instrucción nula
Descripción
La instrucción "Instrucción nula" con un parámetro 1 no ejecuta ninguna función y no influye en
los bits de estado. El código de la instrucción contiene un patrón de bits con 16 unos. La
instrucción solo es importante para la programadora cuando se visualiza un programa.

Programación del PLC
Manual de programación y manejo, 11/2019

5549

Instrucciones
4.2 Instrucciones

Consulte también
Añadir instrucciones AWL (Página 8079)
Procesar instrucciones AWL (Página 8098)

4.2.2.4

SCL

Temporizadores
Temporizadores CEI
TP: Impulso
Descripción
La instrucción "Impulso" permite activar el parámetro Q durante el tiempo PT. La instrucción se
inicia cuando el resultado lógico (RLO) del parámetro IN cambia de "0" a "1" (flanco de señal
ascendente). El tiempo programado PT empieza a contar al iniciar la instrucción. El parámetro
Q se activa por el tiempo PT, independientemente de cómo evolucione la señal en el parámetro
IN. La detección de un nuevo flanco de señal ascendente tampoco influye en el estado lógico
del parámetro Q mientras transcurre el tiempo PT.
El valor actual de tiempo se puede consultar en el parámetro ET. Este valor de tiempo empieza
a partir de T#0s y termina al alcanzarse el valor del tiempo PT. Si cuando se alcanza el tiempo
PT el estado lógico del parámetro IN es "0", se resetea el parámetro ET.
A cada llamada de la instrucción "Impulso" debe asignársele un temporizador CEI, en el que
se guardan los datos de la instrucción. Un temporizador CEI se puede declarar como se indica
a continuación:
● Declaración de un bloque de datos del tipo TP (p. ej. "TP_DB")
● Declaración como variable local del tipo TP en la sección "Static" de un bloque (p. ej.,
#MyTP_TIMER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el temporizador CEI se deposita en un bloque
de datos propio (instancia individual) o bien como variable local (multiinstancia) en la interfaz
del bloque. Si crea un bloque de datos propio, lo encontrará en el árbol del proyecto, en
"Bloques de programa > Bloques de sistema", carpeta "Recursos de programa", . Encontrará
más información al respecto en "Consulte también".
El sistema operativo inicializa las instancias de la instrucción "Impulso" cuando se efectúa un
arranque en frío. Si alguna instancia de la instrucción debe estar inicializada tras un rearranque
completo (en caliente), las instancias que se deben inicializar se deben llamar en un OB de

5550

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
arranque con el valor "0" en el parámetro PT. Si un bloque diferente contiene instancias de la
instrucción "Impulso", estas pueden inicializarse p. ej. inicializando el bloque de nivel superior.
Nota
Ignorar instrucción
Si en el programa no se llama la instrucción porque, p. ej., esta es ignorada, la salida ET
devuelve un valor de constante en cuanto ha transcurrido este tiempo.
Nota
Actualización de los datos de la instrucción
Los datos de la instrucción se actualizan únicamente al llamar la instrucción. Al acceder a las
salidas Q o ET, no se actualizan los datos.

Temporizador CEI como bloque de datos de instancia del tipo de datos de sistema
<Temporizador_CEI> (Shared DB)
Un temporizador CEI se puede declarar como bloque de datos del modo siguiente:
<DB_temporizador_CEI>.TP();

Temporizador CEI como variable local de la interfaz del bloque (multiinstancia)
El temporizador CEI se puede declarar como variable local del modo siguiente:
#myLocal_Timer();

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

BOOL

I, Q, M, D, L

Entrada de arranque

PT

Input

TIME

I, Q, M, D, L, P

Duración del impulso.
El valor del parámetro PT de‐
be ser positivo.

Q

Output

BOOL

I, Q, M, D, L

Operando que se activa por
el tiempo PT.

ET

Output

TIME

I, Q, M, D, L

Valor de tiempo actual

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5551

Instrucciones
4.2 Instrucciones

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Impulso":
,1

4

37

37

37

(7
37

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"TP_DB".TP(IN := "Tag_Start",
PT := "Tag_PresetTime",
Q => "Tag_Status",
ET => "Tag_ElapsedTime");

Cuando el estado lógico del operando "Tag_Start" cambia de "0" a "1", el tiempo programado
en el parámetro PT empieza a contar y el operando "Tag_Status" pasa a "1". El valor de tiempo
actual se guarda en el operando "Tag_ElapsedTime".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de SCL (Página 8115)

5552

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

TON: Retardo al conectar
Descripción
La instrucción "Retardo al conectar" permite retardar la activación del parámetro Q por el
tiempo programado PT. La instrucción se inicia cuando el resultado lógico (RLO) del parámetro
IN cambia de "0" a "1" (flanco de señal ascendente). Cuando se inicia la instrucción, se
empieza a contar el tiempo programado PT. Una vez transcurrido el tiempo PT, el parámetro
Q devuelve el estado lógico "1". El parámetro Q permanecerá activado mientras la entrada de
arranque esté puesta a "1". Cuando el estado lógico del parámetro IN cambia de "1" a "0", se
resetea el parámetro Q. La función de temporización se reinicia al detectarse un nuevo flanco
ascendente en el parámetro IN.
El valor actual de tiempo se puede consultar en el parámetro ET. Este valor de tiempo empieza
a partir de T#0s y termina al alcanzarse el valor del tiempo PT. El parámetro ET se resetea en
cuanto el estado lógico del parámetro IN cambia a "0".
A cada llamada de la instrucción "Retardo al conectar" debe asignársele un temporizador CEI,
en el que se guarden los datos de la instrucción. Un temporizador CEI se puede declarar como
se indica a continuación:
● Declaración de un bloque de datos del tipo TON (p. ej., "TON_DB")
● Declaración como variable local del tipo TON en la sección "Static" de un bloque (p. ej.,
#MyTON_TIMER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el temporizador CEI se deposita en un bloque
de datos propio (instancia individual) o bien como variable local (multiinstancia) en la interfaz
del bloque. Si crea un bloque de datos propio, lo encontrará en el árbol del proyecto, en
"Bloques de programa > Bloques de sistema", carpeta "Recursos de programa", . Encontrará
más información al respecto en "Consulte también".
El sistema operativo inicializa las instancias de la instrucción "Retardo al conectar" cuando se
realiza un arranque en frío. Si alguna instancia de la instrucción debe estar inicializada tras un
rearranque completo (en caliente), las instancias que se deben inicializar se deben llamar en
un OB de arranque con el valor "0" en el parámetro PT. Si un bloque diferente contiene
instancias de la instrucción "Retardo al conectar", estas pueden inicializarse p. ej. inicializando
el bloque de nivel superior.
Nota
Ignorar instrucción
Si en el programa no se llama la instrucción porque, p. ej., esta es ignorada, la salida ET
devuelve un valor de constante en cuanto ha transcurrido este tiempo.
Nota
Actualización de los datos de la instrucción
Los datos de la instrucción se actualizan únicamente al llamar la instrucción. Al acceder a las
salidas Q o ET, no se actualizan los datos.

Programación del PLC
Manual de programación y manejo, 11/2019

5553

Instrucciones
4.2 Instrucciones

Temporizador CEI como bloque de datos de instancia del tipo de datos de sistema
<Temporizador_CEI> (Shared DB)
Un temporizador CEI se puede declarar como bloque de datos del modo siguiente:
<DB_temporizador_CEI>.TON();

Temporizador CEI como variable local de la interfaz del bloque (multiinstancia)
El temporizador CEI se puede declarar como variable local del modo siguiente:
#myLocal_Timer();

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

BOOL

I, Q, M, D, L

Entrada de arranque

PT

Input

TIME

I, Q, M, D, L, P

Tiempo de retardo al conec‐
tar.
El valor del parámetro PT de‐
be ser positivo.

Q

Output

BOOL

I, Q, M, D, L

Operando que se activa una
vez transcurrido el tiempo PT.

ET

Output

TIME

I, Q, M, D, L

Valor de tiempo actual

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5554

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Retardo al conectar":
,1

4

37

37

(7
37

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"TON_DB".TON(IN := "Tag_Start",
PT := "Tag_PresetTime",
Q => "Tag_Status",
ET => "Tag_ElapsedTime");

Cuando el estado lógico del operando "Tag_Start" cambia de "0" a "1", el tiempo programado
en el parámetro PT empieza a contar. Una vez transcurrido el tiempo, el operando "Tag_Start"
se pone a "1" si el operando "Tag_Status" tiene el estado lógico "1". Una vez transcurrido el
tiempo, el operando "Tag_Status" adopta el estado lógico "1" mientras el operando "Tag_Start"
tenga el estado lógico "1". El valor de tiempo actual se guarda en el operando
"Tag_ElapsedTime".

Programación del PLC
Manual de programación y manejo, 11/2019

5555

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de SCL (Página 8115)

TOF: Retardo al desconectar
Descripción
La instrucción "Retardo al desconectar" permite retardar el reset del parámetro Q por el tiempo
programado PT. El parámetro Q se activa cuando el resultado lógico (RLO) del parámetro IN
cambia de "0" a "1" (flanco de señal ascendente). Cuando el estado lógico del parámetro IN
cambia nuevamente a "0", el tiempo programado PT deja de contar. El parámetro Q
permanecerá activado mientras transcurra el tiempo PT. Una vez transcurrido el tiempo PT se
inicializa el parámetro Q. Si el estado lógico del parámetro IN cambia a "1" antes de que
transcurra el tiempo PT, se inicializa el temporizador. El estado lógico del parámetro Q
permanece a "1".
El valor actual de tiempo se puede consultar en el parámetro ET. Este valor de tiempo actual
empieza a contar a partir de T#0s y termina al alcanzarse el valor de tiempo PT. Una vez
transcurrido el tiempo PT, el parámetro ET permanece al valor actual hasta que el parámetro
IN vuelva a cambiar a "1". Si el parámetro IN cambia a "1" antes de transcurrir el tiempo PT, el
parámetro ET se restablece al valor T#0s.
A cada llamada de la instrucción "Retardo al desconectar" debe asignársele un temporizador
CEI, en el que se guarden los datos de la instrucción. Un temporizador CEI se puede declarar
como se indica a continuación:
● Declaración de un bloque de datos del tipo TOF (p. ej., "TOF_DB")
● Declaración como variable local del tipo TOF en la sección "Static" de un bloque (p. ej.,
#MyTOF_TIMER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el temporizador CEI se deposita en un bloque
de datos propio (instancia individual) o bien como variable local (multiinstancia) en la interfaz
del bloque. Si crea un bloque de datos propio, lo encontrará en el árbol del proyecto, en
"Bloques de programa > Bloques de sistema", carpeta "Recursos de programa", . Encontrará
más información al respecto en "Consulte también".
El sistema operativo inicializa las instancias de la instrucción "Retardo al desconectar" cuando
se realiza un arranque en frío. Si alguna instancia de la instrucción debe estar inicializada tras
un rearranque completo (en caliente), las instancias que se deben inicializar se deben llamar
en un OB de arranque con el valor "0" en el parámetro PT. Si un bloque diferente contiene

5556

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
instancias de la instrucción "Retardo al desconectar", estas pueden inicializarse p. ej.
inicializando el bloque de nivel superior.
Nota
Ignorar instrucción
Si en el programa no se llama la instrucción porque, p. ej., esta es ignorada, la salida ET
devuelve un valor de constante en cuanto ha transcurrido este tiempo.
Nota
Actualización de los datos de la instrucción
Los datos de la instrucción se actualizan únicamente al llamar la instrucción. Al acceder a las
salidas Q o ET, no se actualizan los datos.

Temporizador CEI como bloque de datos de instancia del tipo de datos de sistema
<Temporizador_CEI> (Shared DB)
Un temporizador CEI se puede declarar como bloque de datos del modo siguiente:
<DB_temporizador_CEI.TOF();

Temporizador CEI como variable local de la interfaz del bloque (multiinstancia)
El temporizador CEI se puede declarar como variable local del modo siguiente:
#myLocal_Timer();

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

BOOL

I, Q, M, D, L

Entrada de arranque

PT

Input

TIME

I, Q, M, D, L, P

Tiempo del retardo al desco‐
nectar
El valor del parámetro PT de‐
be ser positivo.

Q

Output

BOOL

I, Q, M, D, L

Operando que se desactiva
una vez transcurrido el tiem‐
po PT.

ET

Output

TIME

I, Q, M, D, L

Valor de tiempo actual

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5557

Instrucciones
4.2 Instrucciones

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Retardo al
desconectar":
,1

4
37

37

(7
37

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"TOF_DB".TOF(IN := "Tag_Start",
PT := "Tag_PresetTime",
Q => "Tag_Status",
ET => "Tag_ElapsedTime");

Si se produce un cambio del estado lógico del operando "Tag_Start" de "0" a "1", el operando
se pone a "Tag_Status". Cuando el estado lógico del operando "Tag_Start" cambia de "1" a "0",
el tiempo programado en el parámetro PT empieza a contar. Mientras transcurra el tiempo,
permanecerá activado el operando "Tag_Status". Una vez transcurrido el tiempo, el operando
"Tag_Status" se desactiva. El valor de tiempo actual se guarda en el operando
"Tag_ElapsedTime".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de SCL (Página 8115)

5558

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Temporizadores SIMATIC
S_PULSE: Parametrizar y arrancar temporizador como impulso
Descripción
La instrucción "Parametrizar y arrancar temporizador como impulso" arranca el temporizador
programado en el parámetro T_NO cuando se detecta un cambio del resultado lógico (RLO) de
"0" a "1" (flanco de señal ascendente) en el parámetro S. El temporizador cuenta el tiempo
programado TV mientras el estado lógico del parámetro S sea "1".
Si el estado lógico del parámetro S cambia a "0" antes de que transcurra el tiempo programado,
el temporizador se detiene y el parámetro "Q" adopta el estado lógico "0".
El tiempo se compone internamente de un valor de tiempo y una base de tiempo y se programa
en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado se cuenta
hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se modifica el valor
de tiempo. El valor actual de tiempo se deposita en el parámetro BI.
Si el temporizador está contando y el estado lógico de la entrada R cambia a "1", el valor actual
de tiempo y la base de tiempo también se ponen a cero. Si el temporizador no está en marcha,
el estado lógico "1" de la entrada R no provoca ningún efecto.
El parámetro Q devuelve el estado lógico "1" mientras el temporizador está contando y el
estado lógico del parámetro S es "1". Si el estado lógico del parámetro S cambia a "0" antes
de que transcurra el tiempo programado, el parámetro Q devuelve el estado lógico "0". Si el
parámetro R resetea el temporizador o si el tiempo ha transcurrido, el parámetro Q también
devuelve el estado lógico "0".
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

Programación del PLC
Manual de programación y manejo, 11/2019

5559

Instrucciones
4.2 Instrucciones

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

T_NO

Input

TIMER, INT

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, D, L

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L

Valor de tiempo predetermi‐
nado

R

Input

BOOL

I, Q, M, D, L, P

Entrada de reset

Q

Output

BOOL

I, Q, M, D, L, P

Estado del temporizador

BI

Output

WORD

I, Q, M, D, L, P

Valor actual de tiempo en có‐
digo dual

S5TIME

I, Q, M, D, L

Valor de tiempo actual

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5560

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como impulso":
W

W

W

5/2HQODHQWUDGD6

5/2HQODHQWUDGD5

(OWLHPSRWUDQVFXUUH

&RQVXOWDಯಯ

&RQVXOWDಯಯ

W WLHPSRSURJUDPDGR

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := S_PULSE(T_NO := "Timer_1",
S := "Tag_1",
TV := "Tag_Number",
R := "Tag_Reset",
Q := "Tag_Status",
BI := "Tag_Value");

Cuando el estado lógico del operando "Tag_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador empieza a contar con el valor de tiempo del operando
"Tag_Number" y sigue contando mientras el operando "Tag_1" devuelva el estado lógico "1".
Si el estado lógico del parámetro S cambia a "0" antes de que transcurra el tiempo programado,
el operando "Tag_Status" adopta el estado lógico "0". Si el parámetro R resetea el
temporizador o si el tiempo ha transcurrido, el operando "Tag_Status" también devuelve el
estado lógico "0".
Programación del PLC
Manual de programación y manejo, 11/2019

5561

Instrucciones
4.2 Instrucciones
El valor actual de tiempo se guarda en código dual en el operando "Tag_Value" y se devuelve
como valor de función.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 5383)
Principios básicos de SCL (Página 8115)

S_PEXT: Parametrizar y arrancar temporizador como impulso prolongado
Descripción
La instrucción "Parametrizar y arrancar temporizador como impulso prolongado" arranca el
temporizador programado cuando se detecta un flanco de señal ascendente en el parámetro
S. El temporizador deja de contar el tiempo programado TV aunque el estado lógico del
parámetro S cambie a "0". Mientras el temporizador está contando, el parámetro Q devuelve
el estado lógico "1".
Una vez transcurrido el tiempo, el parámetro Q adopta el valor lógico "0". Si el estado lógico del
parámetro S cambia de "0" a "1" mientras el temporizador está contando, el temporizador se
inicia de nuevo con el tiempo programado en el parámetro TV.
El tiempo se compone internamente de un valor de tiempo y una base de tiempo y se programa
en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado se cuenta
hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se modifica el valor
de tiempo. El valor actual de tiempo se deposita en el parámetro BI.
Si el temporizador está contando y el estado lógico del parámetro R cambia a "1", el valor
actual de tiempo y la base de tiempo también se ponen a cero. Si el temporizador no está
contando, el estado lógico "1" en el parámetro R no tiene ningún efecto.
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

5562

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

T_NO

Input

TIMER, INT

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, D, L

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L

Valor de tiempo predetermi‐
nado

R

Input

BOOL

I, Q, M, D, L, P

Entrada de reset

Q

Output

BOOL

I, Q, M, D, L, P

Estado del temporizador

BI

Output

WORD

I, Q, M, D, L, P

Valor actual de tiempo en có‐
digo dual

S5TIME

I, Q, M, D, L

Valor de tiempo actual

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como impulso prolongado":
W

W

W

W

5/2HQODHQWUDGD6

5/2HQODHQWUDGD5

7HPSRUL]DGRUHQPDUFKD

&RQVXOWD

&RQVXOWD
W WLHPSRSURJUDPDGR

Programación del PLC
Manual de programación y manejo, 11/2019

5563

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := S_PEXT(T_NO := "Timer_1",
S := "Tag_1",
TV := "Tag_Number",
R := "Tag_Reset",
Q := "Tag_Status",
BI := "Tag_Value");

Cuando el estado lógico del operando "Tag_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. Mientras el temporizador está en marcha, el operando "Tag_Status"
devuelve el estado lógico "1". Una vez transcurrido el tiempo, el operando "Tag_Status" adopta
el valor lógico "0". Si el estado lógico de la entrada S cambia de "0" a "1" mientras el
temporizador está contando, el temporizador se inicia de nuevo con el tiempo "Tag_Number".
El valor actual de tiempo se guarda en código dual en el operando "Tag_Value" y se devuelve
como valor de función.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 5383)
Principios básicos de SCL (Página 8115)

S_ODT: Parametrizar y arrancar temporizador como retardo a la conexión
Descripción
La instrucción "Parametrizar y arrancar temporizador como retardo a la conexión" arranca el
temporizador programado como retardo a la conexión cuando se detecta un flanco de señal
ascendente en el parámetro S. El temporizador cuenta el tiempo programado TV mientras el
estado lógico del parámetro S sea "1".
Si el tiempo ha transcurrido correctamente y el parámetro S sigue presentando el estado lógico
"1", el parámetro Q devuelve el estado lógico "1". Si el estado lógico del parámetro S cambia
de "1" a "0" mientras el temporizador está contando, este se detiene. En este caso, la salida Q
adopta el estado lógico "0".
El tiempo se compone internamente de un valor de tiempo y una base de tiempo y se programa
en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado se cuenta
hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se modifica el valor
de tiempo. El valor actual de tiempo se deposita en el parámetro BI.
Si el temporizador está contando y el estado lógico de la entrada R cambia de "0" a "1", el valor
actual de tiempo y la base de tiempo también se ponen a cero. En este caso, el estado lógico
del parámetro Q es "0". El temporizador se resetea si el parámetro R presenta el estado lógico
"1", aunque el temporizador no esté en marcha y el resultado lógico (RLO) del parámetro S sea
"1".

5564

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

T_NO

Input

TIMER, INT

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, D, L

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L

Valor de tiempo predetermi‐
nado

R

Input

BOOL

I, Q, M, D, L, P

Entrada de reset

Q

Output

BOOL

I, Q, M, D, L, P

Estado del temporizador

BI

Output

WORD

I, Q, M, D, L, P

Valor actual de tiempo en có‐
digo dual

S5TIME

I, Q, M, D, L

Valor de tiempo actual

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5565

Instrucciones
4.2 Instrucciones

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como retardo a la conexión":
W

W

W

5/2HQODHQWUDGD6

5/2HQODHQWUDGD5

(OWLHPSRWUDQVFXUUH

&RQVXOWDಯಯ

&RQVXOWDಯಯ
W WLHPSRSURJUDPDGR

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := S_ODT(T_NO := "Timer_1",
S := "Tag_1",
TV := "Tag_Number",
R := "Tag_Reset",
Q := "Tag_Status",
BI := "Tag_Value");

Cuando el estado lógico del operando "Tag_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador cuenta el tiempo "Tag_Number" mientras el estado lógico
del operando "Tag_1" sea "1".
Si el tiempo ha transcurrido correctamente y el operando "Tag_Status" presenta el estado
lógico "1", el operando "Tag_Status" se pone a "1". Si el estado lógico del operando "Tag_1"
cambia de "1" a "0" mientras el temporizador está contando, este se detiene. El operando
"Tag_Status" devuelve en ese caso el estado lógico "0".
El valor actual de tiempo se guarda en código dual en el operando "Tag_Value" y se devuelve
como valor de función.

5566

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 5383)
Principios básicos de SCL (Página 8115)

S_ODTS: Parametrizar y arrancar temporizador como retardo a la conexión con memoria
Descripción
La instrucción "Parametrizar y arrancar temporizador como retardo a la conexión con
memoria" arranca el temporizador programado cuando se detecta un flanco de señal
ascendente en el parámetro S. El temporizador deja de contar el tiempo programado TV
aunque el estado lógico del parámetro S cambie a "0".
Una vez transcurrido el tiempo, el parámetro Q devuelve el estado lógico "1"
independientemente del estado lógico del parámetro S. Si el estado lógico del parámetro S
cambia de "0" a "1" mientras el temporizador está contando, el temporizador se inicia de nuevo
con el tiempo programado TV.
El tiempo se compone internamente de un valor de tiempo y una base de tiempo y se programa
en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado se cuenta
hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se modifica el valor
de tiempo. El valor actual de tiempo se deposita en el parámetro BI.
El estado lógico "1" del parámetro R pone a "0" el valor actual de tiempo y la base de tiempo,
independientemente del estado lógico del parámetro S. En este caso, el estado lógico del
parámetro Q es "0".
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

Programación del PLC
Manual de programación y manejo, 11/2019

5567

Instrucciones
4.2 Instrucciones

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

T_NO

Input

TIMER, INT

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, D, L

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L

Valor de tiempo predetermi‐
nado

R

Input

BOOL

I, Q, M, D, L, P

Entrada de reset

Q

Output

BOOL

I, Q, M, D, L, P

Estado del temporizador

BI

Output

WORD

I, Q, M, D, L, P

Valor actual de tiempo en có‐
digo dual

S5TIME

I, Q, M, D, L

Valor de tiempo actual

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como retardo a la conexión con memoria":
W

W

W

W

5/2HQODHQWUDGD6

5/2HQODHQWUDGD5

(OWLHPSRWUDQVFXUUH

&RQVXOWDಯಯ
&RQVXOWDಯಯ
W WLHPSRSURJUDPDGR

5568

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := S_ODTS(T_NO := "Timer_1",
S := "Tag_1",
TV := "Tag_Number",
R := "Tag_Reset",
Q := "Tag_Status",
BI := "Tag_Value");

Cuando el estado lógico del operando "Tag_1" cambia de "0" a "1", el temporizador "Timer_1"
se pone en marcha. El temporizador cuenta el tiempo "Tag_Number".
Una vez transcurrido el tiempo, el operando "Tag_Status" devuelve el estado lógico "1"
independientemente del estado lógico del operando "Tag_1". Si el estado lógico del operando
"Tag_1" cambia de "0" a "1" mientras el temporizador está contando, el temporizador se inicia
de nuevo con el tiempo "Tag_Number".
El valor actual de tiempo se guarda en código dual en el operando "Tag_Value" y se devuelve
como valor de función.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 5383)
Principios básicos de SCL (Página 8115)

S_OFFDT: Parametrizar y arrancar temporizador como retardo a la desconexión
Descripción
La instrucción "Parametrizar y arrancar temporizador como retardo a la desconexión" arranca
el temporizador programado cuando se detecta un flanco de señal descendente en el
parámetro S. El temporizador cuenta el tiempo programado TV. Mientras el temporizador está
contando o el parámetro S devuelve el estado lógico "1", el parámetro Q presenta el estado
lógico "1".
Si el tiempo ha transcurrido y el estado lógico es "0", el parámetro Q adopta el valor lógico "0".
Si el estado lógico del parámetro S cambia de "0" a "1" mientras el temporizador está en
marcha, este se detiene. El temporizador solo arranca de nuevo cuando se detecta un flanco
de señal descendente en el parámetro S.
El tiempo se compone internamente de un valor de tiempo y una base de tiempo y se programa
en el parámetro TV. Cuando se inicia la instrucción, el valor de tiempo programado se cuenta
hacia atrás hasta cero. La base de tiempo indica con qué periodo de tiempo se modifica el valor
de tiempo. El valor actual de tiempo se deposita en el parámetro BI.
El estado lógico "1" del parámetro R pone a "0" el valor actual de tiempo y la base de tiempo.
En este caso, el estado lógico del parámetro Q es "0".

Programación del PLC
Manual de programación y manejo, 11/2019

5569

Instrucciones
4.2 Instrucciones
Los datos de la instrucción se actualizan con cada acceso. Por este motivo es posible que una
consulta de datos al principio del ciclo devuelva valores diferentes en comparación con el fin
del ciclo.
Nota
En la célula de temporización, el sistema operativo reduce el valor de tiempo en una unidad
respectivamente, y en un intervalo definido por la base de tiempo, hasta que el valor de tiempo
sea "0". La reducción se realiza de modo asíncrono respecto al programa de usuario. De este
modo el tiempo resultante es menor que el valor de tiempo deseado, como máximo hasta un
intervalo de la base de tiempo.
Encontrará un ejemplo de la estructura de una célula de temporización en: Consulte también
"L: Cargar valor del temporizador".

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

T_NO

Input

TIMER, INT

T

Temporizador que arranca.
El número de temporizado‐
res depende de la CPU.

S

Input

BOOL

I, Q, M, D, L

Entrada de arranque

TV

Input

S5TIME, WORD

I, Q, M, D, L

Valor de tiempo predetermi‐
nado

R

Input

BOOL

I, Q, M, D, L, P

Entrada de reset

Q

Output

BOOL

I, Q, M, D, L, P

Estado del temporizador

BI

Output

WORD

I, Q, M, D, L, P

Valor actual de tiempo en có‐
digo dual

S5TIME

I, Q, M, D, L

Valor de tiempo actual

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5570

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Cronograma de impulsos
La imagen siguiente muestra el cronograma de impulsos de la instrucción "Parametrizar y
arrancar temporizador como retardo a la desconexión":
W

W

W

W

5/2HQODHQWUDGD6

5/2HQODHQWUDGD5

7HPSRUL]DGRUHQPDUFKD

&RQVXOWD

&RQVXOWD
W WLHPSRSURJUDPDGR

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := S_OFFDT(T_NO := "Timer_1",
S := "Tag_1",
TV := "Tag_Number",
R := "Tag_Reset",
Q := "Tag_Status",
BI := "Tag_Value");

Cuando el estado lógico del operando "Tag_1" cambia de "1" a "0", el temporizador "Timer_1"
arranca. El temporizador cuenta el tiempo "Tag_Number". Mientras el temporizador está
contando o el operando "Tag_1" devuelve el estado lógico "1", el operando "Tag_Status"
presenta el estado lógico "1".
Si el tiempo ha transcurrido y el estado lógico del operando "Tag_1" es "0", el operando
"Tag_Status" adopta el valor lógico "0". Si el estado lógico del operando "Tag_1" cambia de "0"
a "1" mientras el temporizador está en marcha, el temporizador se reinicia. El temporizador
solo arranca de nuevo cuando se detecta un flanco descendente en el parámetro S.
El valor actual de tiempo se guarda en código dual en el operando "Tag_Value" y se devuelve
como valor de función.

Programación del PLC
Manual de programación y manejo, 11/2019

5571

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
L: Cargar valor del temporizador (Página 5383)
Principios básicos de SCL (Página 8115)

Contadores
Contadores CEI
CTU: Contador ascendente
Descripción
La instrucción "Contador ascendente" incrementa el valor del parámetro CV. Cuando el estado
lógico del parámetro CU cambia de "0" a "1" (flanco de señal ascendente), se ejecuta la
instrucción y el valor de contaje actual del parámetro CV se incrementa en uno. El valor de
contaje se incrementa cada vez que se detecta un flanco de señal ascendente, hasta alcanzar
el valor límite superior del tipo de datos (INT). Cuando se alcanza el valor límite superior, el
estado lógico del parámetro CU deja de tener efecto en la instrucción.
El estado del contador se puede consultar en el parámetro Q. El estado lógico del parámetro
Q es determinado por el parámetro PV. Si el valor de contaje actual es mayor o igual al valor
del parámetro PV, el parámetro Q adopta el estado lógico "1". En los restantes casos, el estado
lógico del parámetro Q es "0". En el parámetro PV también se puede indicar una constante.
El valor del parámetro CV se pone a cero cuando el estado lógico del parámetro R cambia a
"1". Mientras el parámetro R tenga el estado lógico "1", el estado lógico del parámetro CU no
tendrá efecto alguno en la instrucción.
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
A cada llamada de la instrucción "Contador ascendente" debe asignársele un contador CEI, en
el que se guarden los datos de la instrucción. Un contador CEI se declara del siguiente modo:
● Declaración de un bloque de datos del tipo CTU (p. ej., "CTU_DB")
● Declaración como variable local del tipo CTU en la sección "Static" de un bloque (p. ej.,
#MyCTU_COUNTER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el contador CEI se deposita en un bloque de
datos propio (instancia individual), o bien como variable local (multiinstancia) en la interfaz del
bloque. Si crea un bloque de datos propio, lo encontrará en el árbol del proyecto, en "Bloques
de programa > Bloques de sistema", carpeta "Recursos de programa", . Encontrará más
información al respecto en "Consulte también".
El sistema operativo inicializa las instancias de la instrucción "Contador ascendente" cuando
se realiza un arranque en frío. Si deben inicializarse instancias de la instrucción tras un

5572

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
rearranque completo (en caliente), las instancias por inicializar deben llamarse en un OB de
arranque con el valor "1" en el parámetro R de la instrucción. Si un bloque diferente contiene
instancias de la instrucción "Contador ascendente", estas pueden resetearse p. ej.
inicializando el bloque de nivel superior.

Contador CEI como bloque de datos del tipo de datos de sistema IEC_<Nombre_del_contador> (Shared
DB)
Un contador CEI se puede declarar como bloque de datos del modo siguiente:
<IEC_contador_DB>.CTU();

Contador CEI como variable local de la interfaz del bloque (multiinstancia)
El contador CEI se puede declarar como variable local del modo siguiente:
#myLocal_Counter();

Sintaxis
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CU

Input

BOOL

I, Q, M, D, L

Entrada de contaje

R

Input

BOOL

I, Q, M, D, L, P

Entrada de reset

PV

Input

INT

I, Q, M, D, L, P

Valor con el que se activa la
salida Q.

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

CV

Output

INT

I, Q, M, D, L, P

Valor de contaje actual

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"CTU_DB".CTU(CU := "Tag_Start",
R := "Tag_Reset",
PV := "Tag_PresetValue",
Q => "Tag_Status",
CV => "Tag_CounterValue");

Cuando el estado lógico del operando "Tag_Start" cambia de "0" a "1", se ejecuta la instrucción
"Contador ascendente" y el valor de contaje actual del operando "Tag_CounterValue" se
incrementa en uno. Con cada flanco de señal ascendente posterior, el valor de contaje irá
incrementando hasta alcanzar el valor límite superior del tipo de datos (INT = 32767).
La salida "Tag_Status" devuelve el estado lógico "1" mientras el valor de contaje actual sea
mayor o igual que el valor del operando "Tag_PresetValue". En todos los demás casos, la
salida "Tag_Status" devuelve el estado lógico "0". El valor de contaje actual se guarda en el
operando "Tag_CounterValue".

Programación del PLC
Manual de programación y manejo, 11/2019

5573

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de SCL (Página 8115)

CTD: Contador descendente
Descripción
La instrucción "Contador descendente" decrementa el valor del parámetro CV. Cuando el
estado lógico del parámetro CD cambia de "0" a "1" (flanco de señal ascendente), se ejecuta
la instrucción y el valor de contaje actual del parámetro CV se decrementa en uno. Cada vez
que se detecta un flanco de señal ascendente, el valor de contaje se decrementa hasta
alcanzar el valor límite inferior del tipo de datos (INT) indicado. Cuando se alcanza el valor
límite inferior, el estado lógico del parámetro CD deja de tener efecto en la instrucción.
El estado del contador se puede consultar en el parámetro Q. Si el valor de contaje actual es
menor o igual a cero, el parámetro Q adopta el estado lógico "1". En los restantes casos, el
estado lógico del parámetro Q es "0".
El valor del parámetro CV se pone al valor del parámetro PV cuando el estado lógico del
parámetro LD cambia a "1". Mientras el parámetro LD tenga el estado lógico "1", el estado
lógico del parámetro CD no tendrá efecto alguno en la instrucción.
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
A cada llamada de la instrucción "Contador descendente" debe asignársele un contador CEI,
en el que se guarden los datos de la instrucción. Un contador CEI se declara del siguiente
modo:
● Declaración de un bloque de datos del tipo CTD (p. ej., "CTD_DB")
● Declaración como variable local del tipo CTD en la sección "Static" de un bloque (p. ej.,
#MyCTD_COUNTER)
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el contador CEI se deposita en un bloque de
datos propio (instancia individual), o bien como variable local (multiinstancia) en la interfaz del
bloque. Si crea un bloque de datos propio, lo encontrará en el árbol del proyecto, en "Bloques
de programa > Bloques de sistema", carpeta "Recursos de programa", . Encontrará más
información al respecto en "Consulte también".
El sistema operativo inicializa las instancias de la instrucción "Contador descendente" cuando
se realiza un arranque en frío. Si deben inicializarse instancias de la instrucción tras un
rearranque completo (en caliente), las instancias por inicializar deben llamarse en un OB de
arranque con el valor "1" en el parámetro LD de la instrucción. En el parámetro PV se indica en
este caso el valor inicial deseado para el parámetro CV. Si un bloque diferente contiene
instancias de la instrucción "Contador descendente", estas pueden resetearse p. ej.
inicializando el bloque de nivel superior.

5574

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Contador CEI como bloque de datos del tipo de datos de sistema IEC_<Nombre_del_contador> (Shared
DB)
Un contador CEI se puede declarar como bloque de datos del modo siguiente:
<IEC_Nombre_del_contador_DB>.CTD();

Contador CEI como variable local de la interfaz del bloque (multiinstancia)
El contador CEI se puede declarar como variable local del modo siguiente:
#myLocal_Counter();

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CD

Input

BOOL

I, Q, M, D, L

Entrada de contaje

LD

Input

BOOL

I, Q, M, D, L, P

Entrada de carga

PV

Input

INT

I, Q, M, D, L, P

Valor al que se pone la salida
CV cuando LD = 1.

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

CV

Output

INT

I, Q, M, D, L, P

Valor de contaje actual

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"CTD_DB".CTD(CD := "Tag_Start",
LD := "Tag_Load",
PV := "Tag_PresetValue",
Q => "Tag_Status",
CV => "Tag_CounterValue");

Cuando el estado lógico del operando "Tag_Start" cambia de "0" a "1", la instrucción "Contador
descendente" se ejecuta y el valor del operando "Tag_CounterValue" se decrementa en uno.
Con cada flanco de señal ascendente posterior, el valor de contaje irá decrementando hasta
alcanzar el valor límite inferior del tipo de datos (INT = -32768).
El operando "Tag_Status" devuelve el estado lógico "1" mientras el valor del contador actual
sea menor o igual a cero. En todos los demás casos, la salida "Tag_Status" devuelve el estado
lógico "0". El valor de contaje actual se guarda en el operando "Tag_CounterValue".

Programación del PLC
Manual de programación y manejo, 11/2019

5575

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de SCL (Página 8115)

CTUD: Contador ascendente - descendente
Descripción
La instrucción "Contador ascendente - descendente" incrementa y decrementa el valor de
contaje del parámetro CV. Cuando el estado lógico del parámetro CU cambia de "0" a "1"
(flanco de señal ascendente), el valor de contaje actual del parámetro CV se incrementa en
uno. Cuando el estado lógico del parámetro CD cambia de "0" a "1" (flanco de señal
ascendente), el valor de contaje del parámetro CV se decrementa en uno. Si en un ciclo del
programa se detecta un flanco de señal ascendente en las entradas CU y CD, el valor de
contaje actual no cambia en el parámetro CV.
El valor de contaje se puede seguir incrementando hasta alcanzar el valor límite superior del
tipo de datos indicado (INT). Una vez alcanzado el valor límite superior, el valor de contaje ya
no se incrementa al detectarse un flanco de señal ascendente. Cuando se alcanza el valor
límite inferior del tipo de datos indicado (INT), ya no se decrementa el valor de contaje.
Cuando el estado lógico del parámetro LD cambia a "1", el valor de contaje del parámetro CV
se pone al valor del parámetro PV. Mientras el parámetro LD tenga el estado lógico "1", el
estado lógico de los parámetros CU y CD no tendrá efecto alguno en la instrucción.
El valor de contaje se pone a cero cuando el estado lógico del parámetro R cambia a "1".
Mientras el parámetro R tenga el estado lógico "1", un cambio del estado lógico de los
parámetros CU, CD y LD no tendrá efecto alguno en la instrucción "Contador ascendente descendente".
El estado del contador ascendente se puede consultar en el parámetro QU. Si el valor de
contaje actual es mayor o igual al valor del parámetro PV, el parámetro QU adopta el estado
lógico "1". En los restantes casos, el estado lógico del parámetro QU es "0". En el parámetro
PV también se puede indicar una constante.
El estado del contador descendente se puede consultar en el parámetro QD. Si el valor de
contaje actual es menor o igual a cero, el parámetro QD adopta el estado lógico "1". En los
restantes casos, el estado lógico del parámetro QD es "0".
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
A cada llamada de la instrucción "Contador ascendente - descendente" debe asignársele un
contador CEI en el que se guarden los datos de la instrucción. Un contador CEI se declara del
siguiente modo:
● Declaración de un bloque de datos del tipo CTUD (p. ej., "CTUD_DB")
● Declaración como variable local del tipo CTUD en la sección "Static" de un bloque (p. ej.,
#MyCTUD_COUNTER)

5576

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si el contador CEI se deposita en un bloque de
datos propio (instancia individual), o bien como variable local (multiinstancia) en la interfaz del
bloque. Si crea un bloque de datos propio, lo encontrará en el árbol del proyecto, en "Bloques
de programa > Bloques de sistema", carpeta "Recursos de programa", . Encontrará más
información al respecto en "Consulte también".
El sistema operativo inicializa las instancias de la instrucción "Contador ascendente descendente" cuando se realiza un arranque en frío. Si deben inicializarse instancias tras un
rearranque completo (en caliente), las instancias por inicializar deben llamarse en un OB de
arranque con los siguientes valores de parámetros:
● Si se utiliza como contador ascendente, el valor del parámetro R debe ponerse a "1".
● Si se utiliza como contador descendente, el valor del parámetro LD debe ponerse a "1". En
el parámetro PV debe indicarse en este caso el valor inicial deseado del parámetro CV.
Si un bloque diferente contiene instancias de la instrucción "Contador ascendente descendente", estas pueden resetearse p. ej. inicializando el bloque de nivel superior.

Contador CEI como bloque de datos del tipo de datos de sistema IEC_<Nombre_del_contador> (Shared
DB)
Un contador CEI se puede declarar como bloque de datos del modo siguiente:
<IEC_Nombre_del_contador_DB>.CTUD();

Contador CEI como variable local de la interfaz del bloque (multiinstancia)
El contador CEI se puede declarar como variable local del modo siguiente:
#myLocal_Counter();

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CU

Input

BOOL

I, Q, M, D, L

Entrada de contaje ascen‐
dente

CD

Input

BOOL

I, Q, M, D, L

Entrada de contaje descen‐
dente

R

Input

BOOL

I, Q, M, D, L, P

Entrada de reset

LD

Input

BOOL

I, Q, M, D, L, P

Entrada de carga

PV

Input

INT

I, Q, M, D, L, P

Valor con el que se activa la
salida QU. / Valor al que se
pone la salida CV cuando LD
= 1.

QU

Output

BOOL

I, Q, M, D, L

Estado del contador ascen‐
dente

QD

Output

BOOL

I, Q, M, D, L

Estado del contador descen‐
dente

CV

Output

INT

I, Q, M, D, L, P

Valor de contaje actual

Programación del PLC
Manual de programación y manejo, 11/2019

5577

Instrucciones
4.2 Instrucciones
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"CTUD_DB".CTUD(CU := "Tag_Start1",
CD := "Tag_Start2",
LD := "Tag_Load",
R := "Tag_Reset",
PV := "Tag_PresetValue",
QU => "Tag_CU_Status",
QD => "Tag_CD_Status",
CV => "Tag_CounterValue");

Cuando se detecta un flanco de señal ascendente en el estado lógico del operando
"Tag_Start1", el valor actual del contador se incrementa en uno y se deposita en el operando
"Tag_CounterValue". Cuando se detecta un flanco de señal ascendente en el estado lógico del
operando "Tag_Start2", el valor del contador se decrementa en uno y se deposita también en
el operando "Tag_CounterValue". Cuando se detecta un flanco de señal ascendente en el
parámetro CU el valor del contador va incrementando hasta alcanzar el valor límite superior
hasta alcanzar el valor límite de 32 767. Cuando se detecta un flanco de señal ascendente en
el parámetro CD el valor de contaje se sigue decrementando hasta alcanzar el valor límite
inferior de INT = -32 768.
El operando "Tag_CU_Status" devuelve el estado lógico "1" mientras el valor de contaje actual
sea mayor o igual al valor del operando "Tag_PresetValue". En todos los demás casos, la
salida "Tag_CU_Status" devuelve el estado lógico "0".
El operando "Tag_CD_Status" devuelve el estado lógico "1" mientras el valor del contador
actual sea menor o igual a cero. En todos los demás casos, la salida "Tag_CD_Status"
devuelve el estado lógico "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Instancias (Página 61)
Principios básicos de SCL (Página 8115)

5578

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Contadores SIMATIC
S_CU: Parametrizar e incrementar contador
Descripción
La instrucción "Parametrizar e incrementar contador" permite incrementar el valor de un
contador. Si el estado lógico del parámetro CU cambia de "0" a "1" (flanco de señal
ascendente), el valor de contaje actual se incrementa en uno. El valor de contaje actual se
deposita en el parámetro CV. El valor de contaje sigue incrementando hasta alcanzar el límite
de "999". Una vez alcanzado el valor límite, el valor de contaje no se incrementa más aunque
se detecte un flanco de señal ascendente.
Cuando el estado lógico del parámetro S cambia de "0" a "1", el valor de contaje adopta el valor
del parámetro PV. Si el contador se activa y el resultado lógico (RLO) de la entrada CU es "1",
el contador cuenta una única vez en el ciclo siguiente aunque no se detecte ningún cambio de
flanco.
El valor de contaje se pone a cero cuando el estado lógico del parámetro R cambia a "1".
Mientras el estado lógico del parámetro R sea "1", un cambio en el estado lógico de los
parámetros CU y S no tiene ningún efecto sobre el valor de contaje.
El estado lógico del parámetro Q es "1" si el valor de contaje es mayor que cero. Si el valor de
contaje es igual a cero, el parámetro Q devuelve el estado lógico "0".
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

C_NO

Input

COUNTER, INT

C

Contadores
La cantidad de contadores
depende de la CPU

CU

Input

BOOL

I, Q, M, D, L

Entrada de contaje ascen‐
dente

S

Input

BOOL

I, Q, M, D, L

Entrada para preajustar el
contador

PV

Input

WORD

I, Q, M, D, L, P

Valor de contaje predetermi‐
nado (C#0 a C#999) en for‐
mato BCD

R

Input

BOOL

I, Q, M, D, L

Entrada de reset

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

CV

Output

WORD

I, Q, M, D, L, P

Valor de contaje actual

WORD

I, Q, M, D, L, P

Valor de contaje actual en
formato BCD

Valor de función

Programación del PLC
Manual de programación y manejo, 11/2019

5579

Instrucciones
4.2 Instrucciones
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := S_CU(C_NO := "Counter_1",
CU := "Tag_Start",
S := "Tag_1",
PV := "Tag_PresetValue",
R := "Tag_Reset",
Q => "Tag_Status",
CV => "Tag_Value");

Cuando el estado lógico del parámetro "Tag_Start" cambia de "0" a "1" (flanco de señal
ascendente) y el valor de contaje actual es menor que "999", este valor se incrementará en
uno. Si el estado lógico de la entrada "Tag_1" cambia de "0" a "1", el valor de contaje en formato
BCD se pone al valor del operando "Tag_PresetValue". El valor de contaje se pone a "0" si el
operando "Tag_Reset" tiene el estado lógico "1".
El valor de contaje actual se almacena en formato hexadecimal en el operando "Tag_Value".
La salida "Tag_Status" devuelve el estado lógico "1" mientras el valor de contaje actual sea
diferente a "0". El valor actual de contaje se guarda en el operando "Tag_Value" y se devuelve
como valor de función.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

S_CD: Parametrizar y decrementar contador
Descripción
La instrucción "Parametrizar y decrementar contador" permite decrementar el valor de un
contador. Si el estado lógico del parámetro CD cambia de "0" a "1" (flanco de señal
ascendente), el valor de contaje se decrementa en uno. El valor de contaje actual se deposita
en el parámetro CV. El valor de contaje sigue decrementando hasta alcanzar el límite inferior
"0". Una vez alcanzado el valor límite, el valor de contaje no se decrementa más al detectarse
un flanco de señal ascendente.
Cuando el estado lógico del parámetro S cambia de "0" a "1", el valor de contaje adopta el valor
del parámetro PV. Si el contador se activa y el resultado lógico (RLO) del parámetro CD es "1",
el contador cuenta una única vez en el ciclo siguiente aunque no se detecte ningún cambio de
flanco.
El valor de contaje se pone a cero cuando el estado lógico del parámetro R cambia a "1".
Mientras el estado lógico del parámetro R sea "1", un cambio en el estado lógico de los
parámetros CD y S no tiene ningún efecto sobre el valor de contaje.

5580

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
El estado lógico del parámetro Q es "1" si el valor de contaje es mayor que cero. Si el valor de
contaje es igual a cero, el parámetro Q devuelve el estado lógico "0".
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

C_NO

Input

COUNTER, INT

C

Contadores
El número de contadores de‐
pende de la CPU.

CD

Input

BOOL

I, Q, M, D, L

Entrada de contaje descen‐
dente

S

Input

BOOL

I, Q, M, D, L

Entrada para preajustar el
contador

PV

Input

WORD

I, Q, M, D, L, P

Valor de contaje predetermi‐
nado (C#0 a C#999) en for‐
mato BCD

R

Input

BOOL

I, Q, M, D, L

Entrada de reset

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

CV

Output

WORD

I, Q, M, D, L, P

Valor de contaje actual

WORD

I, Q, M, D, L, P

Valor de contaje actual en
formato BCD

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := S_CD(C_NO := "Counter_1",
CD := "Tag_Start",
S := "Tag_1",
PV := "Tag_PresetValue",
R := "Tag_Reset",
Q => "Tag_Status",
CV => "Tag_Value");

Cuando el estado lógico del operando "Tag_Start" cambia de "0" a "1" (flanco de señal
ascendente) y el valor de contaje actual es superior a "0", el valor de contaje se decrementa en
uno. Cuando el estado lógico del operando "Tag_1" cambia de "0" a "1", el valor de contaje
adopta el valor del operando "Tag_PresetValue" en formato BCD. El valor de contaje se pone
a "0" si el operando "Tag_Reset" tiene el estado lógico "1".

Programación del PLC
Manual de programación y manejo, 11/2019

5581

Instrucciones
4.2 Instrucciones
El valor de contaje actual se almacena en el operando "Tag_Value".
El operando "Tag_Status" devuelve el estado lógico "1" mientras el valor de contaje actual sea
distinto de "0". El valor actual de contaje se guarda en el operando "Tag_Value" y se devuelve
como valor de función.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

S_CUD: Parametrizar e incrementar/decrementar contador
Descripción
La instrucción "Parametrizar e incrementar/decrementar contador" permite incrementar y
decrementar el valor de un contador. Si el estado lógico del parámetro CU cambia de "0" a "1"
(flanco de señal ascendente), el valor de contaje actual se incrementa en uno. Si el estado
lógico del parámetro CD cambia de "0" a "1" (flanco de señal ascendente), el valor de contaje
se decrementa en uno. El valor de contaje actual se deposita en el parámetro CV. Si en un ciclo
del programa se detecta un flanco de señal ascendente en los parámetros CU y CD el valor de
contaje permanece invariable.
El valor de contaje sigue incrementando hasta alcanzar el límite superior "999". Una vez
alcanzado el valor límite superior, el valor de contaje no se incrementa más aunque se detecte
un flanco de señal ascendente. Cuando se alcanza el valor límite inferior "0", no se decrementa
más el valor de contaje.
Cuando el estado lógico del parámetro S cambia de "0" a "1", el valor de contaje adopta el valor
del parámetro PV. Si el contador se activa y el resultado lógico (RLO) de los parámetros CU y
CD es "1", el contador cuenta una única vez en el ciclo siguiente aunque no se detecte ningún
cambio de flanco.
El valor de contaje se pone a cero cuando el estado lógico del parámetro R cambia a "1".
Mientras el parámetro R tenga el estado lógico "1", el estado lógico de los parámetros CU, CD
y S no tiene ningún efecto sobre el valor de contaje.
El estado lógico del parámetro Q es "1" si el valor de contaje es mayor que cero. Si el valor de
contaje es igual a cero, el parámetro Q devuelve el estado lógico "0".
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.

5582

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

C_NO

Input

COUNTER, INT

C

Contadores
La cantidad de contadores
depende de la CPU

CU

Input

BOOL

I, Q, M, D, L

Entrada de contaje ascen‐
dente

CD

Input

BOOL

I, Q, M, D, L

Entrada de contaje descen‐
dente

S

Input

BOOL

I, Q, M, D, L

Entrada para preajustar el
contador

PV

Input

WORD

I, Q, M, D, L, P

Valor de contaje predetermi‐
nado (C#0 a C#999) en for‐
mato BCD

R

Input

BOOL

I, Q, M, D, L

Entrada de reset

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

CV

Output

WORD

I, Q, M, D, L, P

Valor de contaje actual (he‐
xadecimal)

WORD

I, Q, M, D, L, P

Valor de contaje actual en
formato BCD

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := S_CUD(C_NO := "Counter_1",
CU := "Tag_CU",
CD := "Tag_CD",
S := "Tag_1",
PV := "Tag_PresetValue",
R := "Tag_Reset",
Q => "Tag_Status",
CV => "Tag_Value");

Cuando se detecta un flanco de señal ascendente en el estado lógico del operando "Tag_CU"
y el valor de contaje actual es menor que "999", el valor de contaje se incrementa en uno.
Cuando se detecta un flanco de señal ascendente en el estado lógico del operando "Tag_CD"
y el valor de contaje actual es mayor que "0", el valor de contaje se decrementa en uno.
Cuando el estado lógico del operando "Tag_1" cambia de "0" a "1", el valor de contaje adopta
el valor del operando "Tag_PresetValue" en formato BCD. El valor de contaje se pone a "0" si
el operando "Tag_Reset" tiene el estado lógico "1".
El valor de contaje actual se almacena en el operando "Tag_Value".

Programación del PLC
Manual de programación y manejo, 11/2019

5583

Instrucciones
4.2 Instrucciones
El operando "Tag_Status" devuelve el estado lógico "1" mientras el valor de contaje actual sea
distinto de "0". El valor actual de contaje se guarda en el operando "Tag_Value" y se devuelve
como valor de función.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

Funciones matemáticas
ABS: Calcular valor absoluto
Descripción
La instrucción "Calcular valor absoluto" permite calcular el valor absoluto de un valor de
entrada y guardar el resultado en el operando indicado.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

<Expresión>

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Valor de entrada

Enteros, números
en coma flotante

I, Q, M, D, L, P

Valor absoluto del valor de
entrada

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result1" := ABS("Tag_Value");
"Tag_Result2" := ABS("Tag_Value1"*"Tag_Value2");

El valor absoluto del valor de entrada se devuelve en el formato del valor de entrada como valor
de función.
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:

5584

Operando

Valor

Tag_Value

-2

Tag_Result1

2

Tag_Value1

4

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Operando

Valor

Tag_Value2

-1

Tag_Result2

4

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

MIN: Determinar mínimo
Descripción
Con la instrucción "Determinar mínimo" se comparan los valores de las entradas indicadas y
se devuelve el menor como resultado. Para poder ejecutar la instrucción, es imprescindible
que las variables de todas las entradas sean del mismo tipo de datos.
Para la ejecución de la instrucción se pueden indicar como mínimo dos y como máximo 32
entradas.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

IN1

Input

Enteros, números
en coma flotante,
TIME, DATE, DT

I, Q, M, D, L, P

Primer valor de entrada

IN2

Input

Enteros, números
en coma flotante,
TIME, DATE, DT

I, Q, M, D, L, P

Segundo valor de entrada

INn

Input

Enteros, números
en coma flotante,
TIME, DATE, DT

I, Q, M, D, L, P

Entradas insertadas adicio‐
nalmente cuyos valores se
comparan

Enteros, números
en coma flotante,
TIME, DATE, DT

I, Q, M, D, L, P

Resultado de la instrucción

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := MIN(IN1 := "Tag_Value1",
IN2 := "Tag_Value2",
IN3 := "Tag_Value3");

Programación del PLC
Manual de programación y manejo, 11/2019

5585

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN1

Tag_Value1

12222

IN2

Tag_Value2

14444

IN3

Tag_Value3

13333

Valor de función

Tag_Result

12222

La instrucción compara los valores de los operandos indicados y copia el valor menor
("Tag_Value1") en el operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

MAX: Determinar máximo
Descripción
Con la instrucción "Determinar máximo" se comparan los valores de las entradas indicadas y
se devuelve el mayor como resultado. Para poder ejecutar la instrucción, es imprescindible
que las variables de todas las entradas sean del mismo tipo de datos.
Para la ejecución de la instrucción se pueden indicar como mínimo dos y como máximo 32
entradas.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

IN1

Input

Enteros, números
en coma flotante,
TIME, DATE, DT

I, Q, M, D, L, P

Primer valor de entrada

IN2

Input

Enteros, números
en coma flotante,
TIME, DATE, DT

I, Q, M, D, L, P

Segundo valor de entrada

INn

Input

Enteros, números
en coma flotante,
TIME, DATE, DT

I, Q, M, D, L, P

Entradas insertadas adicio‐
nalmente cuyos valores se
comparan

Enteros, números
en coma flotante,
TIME, DATE, DT

I, Q, M, D, L, P

Resultado de la instrucción

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5586

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := MAX(IN1 := "Tag_Value1",
IN2 := "Tag_Value2",
IN3 := "Tag_Value3");

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN1

Tag_Value1

12222

IN2

Tag_Value2

14444

IN3

Tag_Value3

13333

Valor de función

Tag_Result

14444

La instrucción compara los valores de los operandos indicados y copia el valor mayor
("Tag_Value2") en el operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

LIMIT: Ajustar valor límite
Descripción
La instrucción "Ajustar valor límite" limita el valor del parámetro IN a los valores de los
parámetros MN y MX. Para ello, el valor del parámetro MN no puede ser mayor que el valor del
parámetro MX.
Si el valor del parámetro IN cumple la condición MN <= IN <= MX, se devuelve como resultado
de la instrucción. Si no se cumple la condición y el valor de entrada IN rebasa por defecto el
límite inferior MN, se devuelve como resultado el valor del parámetro MN. Si se rebasa por
exceso el límite superior MX se devuelve como resultado el valor del parámetro MX.
Si el valor de la entrada MN es mayor que el de la entrada MX, el resultado no está definido.
Para poder ejecutar la instrucción, es imprescindible que los operandos de todos los
parámetros sean del mismo tipo de datos.

Programación del PLC
Manual de programación y manejo, 11/2019

5587

Instrucciones
4.2 Instrucciones

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

MN

Input

Enteros, números
en coma flotante,
TIME, DATE, DT

I, Q, M, D, L, P

Límite inferior

IN

Input

Enteros, números
en coma flotante,
TIME, DATE, DT

I, Q, M, D, L, P

Valor de entrada

MX

Input

Enteros, números
en coma flotante,
TIME, DATE, DT

I, Q, M, D, L, P

Límite superior

Enteros, números
en coma flotante,
TIME, DATE, DT

I, Q, M, D, L, P

Resultado de la instrucción

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := LIMIT(MN := "Tag_Minimum",
IN := "Tag_Value",
MX := "Tag_Maximum");

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

MN

Tag_Minimum

12000

IN

Tag_Value

8000

MX

Tag_Maximum

16000

Valor de función

Tag_Result

12000

El valor del operando "Tag_Value" se compara con los valores de los operandos
"Tag_Minimum" y "Tag_Maximum". Puesto que el valor del operando "Tag_Value" es menor
que el valor límite inferior, el valor del operando "Tag_Minimum" se copia en el operando
"Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

5588

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

SQR: Calcular cuadrado
Descripción
La instrucción "Calcular cuadrado" permite elevar al cuadrado el valor de entrada y guardar el
resultado en el operando indicado.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

<Expresión>

Input

Números en coma
flotante

I, Q, M, D, L, P

Valor de entrada

Números en coma
flotante

I, Q, M, D, L, P

Cuadrado del valor de entra‐
da

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result1" := SQR("Tag_Value");
"Tag_Result2" := SQR((SQR("Tag_Value1"))*"Tag_Value2");

El cuadrado del valor de entrada se devuelve en el operando "Tag_Resultxy" como valor de
función.
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value

2.5

Tag_Result1

6.25

Tag_Value1

6.0

Tag_Value2

2.0

Tag_Result2

5184.0

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

Programación del PLC
Manual de programación y manejo, 11/2019

5589

Instrucciones
4.2 Instrucciones

SQRT: Calcular raíz cuadrada
Descripción
La instrucción "Calcular raíz cuadrada" permite extraer la raíz cuadrada del valor de entrada y
guardar el resultado en el operando indicado. La instrucción da un resultado positivo si el valor
de entrada es mayor que cero. En los valores de entrada menores que cero, la instrucción
devuelve un número en coma flotante no válido. Si el valor de entrada es "0", el resultado
también es "0".

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

<Expresión>

Input

Números en coma
flotante

I, Q, M, D, L, P

Valor de entrada

Números en coma
flotante

I, Q, M, D, L, P

Raíz cuadrada del valor de
entrada

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result1" := SQRT("Tag_Value");
"Tag_Result2" := SQRT((SQR("Tag_Value1"))+"Tag_Value2");

La raíz cuadrada del valor de entrada se devuelve en el operando "Tag_Resultxy" como valor
de función.
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value

4.0

Tag_Result1

2.0

Tag_Value1

3.0

Tag_Value2

16.0

Tag_Result2

5.0

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

5590

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

LN: Calcular logaritmo natural
Descripción
La instrucción "Calcular logaritmo natural" permite calcular el logaritmo natural en base e (e =
2,718282) a partir del valor de entrada. La instrucción da un resultado positivo si el valor de
entrada es mayor que cero. En los valores de entrada menores que cero, la instrucción
devuelve un número en coma flotante no válido.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

<Expresión>

Input

Números en coma
flotante

I, Q, M, D, L, P

Valor de entrada

Números en coma
flotante

I, Q, M, D, L, P

Logaritmo natural del valor
de entrada

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result1" := LN("Tag_Value");
"Tag_Result2" := LN("Tag_Value1"+"Tag_Value2");

El resultado de la instrucción se devuelve en el operando "Tag_Resultxy" como valor de
función.
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value

2.5

Tag_Result1

0.916

Tag_Value1

1.5

Tag_Value2

3.2

Tag_Result2

1.548

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

Programación del PLC
Manual de programación y manejo, 11/2019

5591

Instrucciones
4.2 Instrucciones

EXP: Calcular valor exponencial
Descripción
La instrucción "Calcular valor exponencial" permite calcular la potencia en base e (e =
2,718282) a partir del valor de entrada y guardar el resultado en el operando indicado.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

<Expresión>

Input

Números en coma
flotante

I, Q, M, D, L, P

Valor de entrada

Números en coma
flotante

I, Q, M, D, L, P

Valor exponencial del valor
de entrada

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result1" := EXP("Tag_Value");
"Tag_Result2" := EXP("Tag_Value1"/"Tag_Value2");

El resultado de la instrucción se devuelve en el operando "Tag_Resultxy" como valor de
función.
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value

20.5

Tag_Result1

799 902 200

Tag_Value1

15.5

Tag_Value2

30.2

Tag_Result2

1.671

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

5592

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

SIN: Calcular valor de seno
Descripción
La instrucción "Calcular valor de seno" permite calcular el seno del valor de entrada. El valor
de entrada se ha de indicar en radianes.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

<Expresión>

Input

Números en coma
flotante

I, Q, M, D, L, P

Valor de entrada (tamaño de
un ángulo en radianes)

Números en coma
flotante

I, Q, M, D, L, P

Resultado de la instrucción

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := SIN("Tag_Value");

El resultado de la instrucción se devuelve en el operando "Tag_Result" como valor de función.
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value

+1.570796 (π/2)

Tag_Result

1.0

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

COS: Calcular valor de coseno
Descripción
La instrucción "Calcular valor de coseno" permite calcular el coseno del valor de entrada. El
valor de entrada se ha de indicar en radianes.

Programación del PLC
Manual de programación y manejo, 11/2019

5593

Instrucciones
4.2 Instrucciones

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

<Expresión>

Input

Números en coma
flotante

I, Q, M, D, L, P

Valor de entrada (tamaño de
un ángulo en radianes)

Números en coma
flotante

I, Q, M, D, L, P

Resultado de la instrucción

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := COS("Tag_Value");

El resultado de la instrucción se devuelve en el operando "Tag_Result" como valor de función.
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value

+1.570796 (π/2)

Tag_Result

0

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

TAN: Calcular valor de tangente
Descripción
La instrucción "Calcular valor de tangente" permite calcular la tangente del valor de entrada. El
valor de entrada se ha de indicar en radianes.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

<Expresión>

Input

Números en coma
flotante

I, Q, M, D, L, P

Valor de entrada (tamaño de
un ángulo en radianes)

Números en coma
flotante

I, Q, M, D, L, P

Resultado de la instrucción

Valor de función

5594

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := TAN("Tag_Value");

El resultado de la instrucción se devuelve en el operando "Tag_Result" como valor de función.
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value

+3.141593 (π)

Tag_Result

0

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

ASIN: Calcular valor de arcoseno
Descripción
La instrucción "Calcular valor de arcoseno" permite calcular a partir del valor de seno el tamaño
del ángulo que equivale a este valor. Como valores de entrada solo se pueden indicar números
en coma flotante válidos, comprendidos en un rango de valores entre -1 y +1. El tamaño del
ángulo calculado se devuelve en radianes y puede estar comprendido entre -π/2 y +π/2.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

<Expresión>

Input

Números en coma
flotante

I, Q, M, D, L, P

Valor de seno

Números en coma
flotante

I, Q, M, D, L, P

Tamaño del ángulo en radia‐
nes

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5595

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := ASIN("Tag_Value");

El resultado de la instrucción se devuelve en el operando "Tag_Result" como valor de función.
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value

1.0

Tag_Result

+1.570796 (π/2)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

ACOS: Calcular valor de arcocoseno
Descripción
La instrucción "Calcular valor de arcocoseno" permite calcular a partir del valor de coseno el
tamaño del ángulo que equivale a este valor. Como valores de entrada solo se pueden indicar
números en coma flotante válidos, comprendidos en un rango de valores entre -1 y +1. El
tamaño del ángulo calculado se devuelve en radianes y puede estar comprendido entre 0 y +π.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

<Expresión>

Input

Números en coma
flotante

I, Q, M, D, L, P

Valor de coseno

Números en coma
flotante

I, Q, M, D, L, P

Tamaño del ángulo en radia‐
nes

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := ACOS("Tag_Value");

El resultado de la instrucción se devuelve en el operando "Tag_Result" como valor de función.

5596

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value

0

Tag_Result

+1.570796 (π/2)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

ATAN: Calcular valor de arcotangente
Descripción
La instrucción "Calcular valor de arcotangente" permite calcular a partir del valor de tangente
el tamaño del ángulo que equivale a este valor. Solo se pueden indicar valores de entrada que
sean números en coma flotante válidos (o -NaN/+NaN). El tamaño del ángulo calculado se
devuelve en radianes y puede estar comprendido entre -π/2 y +π/2.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

<Expresión>

Input

Números en coma
flotante

I, Q, M, D, L, P

Valor de tangente

Números en coma
flotante

I, Q, M, D, L, P

Tamaño del ángulo en radia‐
nes

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := ATAN("Tag_Value");

El resultado de la instrucción se devuelve en el operando "Tag_Result" como valor de función.
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value

1,0

Tag_Result

+0,785398 (π/4)

Programación del PLC
Manual de programación y manejo, 11/2019

5597

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Números en coma flotante no válidos (Página 263)
Principios básicos de SCL (Página 8115)

Transferencia
BLKMOV: Copiar área
Descripción
La instrucción "Copiar área" copia los contenidos de un área de memoria (área de origen) en
un área de memoria diferente (área de destino). La operación de copia se realiza por orden
ascendente de direcciones. Las áreas de origen y destino se definen mediante punteros ANY.
Nota
En esta instrucción solo se pueden utilizar tipos de datos que sean válidos en una CPU de la
serie S7-300/400.
La figura siguiente muestra el principio de la operación de copia:

'%'%:

$

%

'%'%:

&

'

'%'%:

(

)

'%'%:

*

+

0:

$

%

0:

&

'

0:

(

)

0:

*

+

&RSLD
/DRSHUDFLµQGHFRSLDVH
UHDOL]DSRURUGHQ
DVFHQGHQWHGH
GLUHFFLRQHV

UHDGHPHPRULD

5598

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Coherencia de los datos de origen y destino
Tenga en cuenta que durante la ejecución de la instrucción "Copiar área" no se modifican los
datos de origen pues, de lo contrario, no se podría garantizar la coherencia de los datos de
destino.

Posibilidad de interrupción
Mientras el área de origen no forme parte de un bloque de datos que solo figura en la memoria
de carga, no hay limitaciones en cuanto a la profundidad de anidamiento.
Por el contrario, en caso de interrumpirse la ejecución de BLKMOV, en la que se copia desde
un DB no relevante para la ejecución, no puede anidarse más la ejecución de la BLKMOV.

Áreas de memoria
La instrucción "Copiar área" copia las siguientes áreas de memoria:
● Áreas de un bloque de datos
● Marcas
● Memoria imagen de proceso de las entradas
● Memoria imagen de proceso de las salidas
● Bloques de datos no relevantes para la ejecución

Reglas generales para copiar
Las áreas de origen y destino no deben solaparse. Si las áreas de origen y destino son de
diferente longitud, se copia solo hasta la longitud del área más pequeña.
Si el área de origen es más pequeña que el área de destino, el área de origen se copiará por
completo en el área de destino. Los restantes bytes del área de destino permanecen
inalterados.
Si el área de destino es más pequeña que el área de origen, se escribirá en toda el área de
destino. Los restantes bytes del área de origen se ignoran.

Programación del PLC
Manual de programación y manejo, 11/2019

5599

Instrucciones
4.2 Instrucciones
Al copiar un área del tipo de datos BOOL, la longitud indicada del área debe ser un múltiplo de
8, pues de lo contrario no se ejecutará la instrucción.
Nota
Si el área de origen o destino realmente existente es menor que el área de origen o destino
indicada en el parámetro SRCBLK o DSTBLK, el comportamiento dependerá del tipo de CPU:
● Para las CPU S7-300 rige lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#837F. Este código de error debe evaluarse en el programa de usuario.
● Para las CPU V4 del S7-400 (V4, CPU H V4 y CPU H V4.5 se aplica lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#8122 o W#16#8323. Este código de error debe evaluarse en el programa de usuario.
● Para las restantes CPU S7-400 rige:
Se transfieren datos. En el parámetro RET_VAL se devuelve el código de error W#16#8122
o W#16#8323. Este código de error debe evaluarse en el programa de usuario.

Reglas para copiar cadenas de caracteres
La instrucción "Copiar área" copia asimismo áreas de origen y destino del tipo de datos
STRING. Si solo el área de origen es del tipo de datos STRING, se copiarán los caracteres
realmente contenidos en la cadena de caracteres. La información sobre la longitud real y
máxima también se escribe en el área de destino. Si tanto el área de origen como el área de
destino son del tipo de datos STRING, la longitud actual de la cadena de caracteres en el área
de destino se pone al número de caracteres realmente copiados.
Si se desea copiar información sobre la longitud máxima y real de una cadena de caracteres,
las áreas de los parámetros SRCBLK y DSTBLK deben indicarse en bytes.

Reglas para copiar bloques de datos no relevantes para la ejecución
El área de origen también puede encontrarse en un bloque de datos no relevante para la
ejecución en la memoria de carga. Los bloques de datos no relevantes para la ejecución se
identifican con la palabra clave UNLINKED.
Si en la memoria de trabajo se copia un bloque de datos no relevante para la ejecución con la
instrucción "Copiar área" y, al mismo tiempo, este se vuelve a cargar p. ej. desde la
programadora, la ejecución de la instrucción puede retardarse varios milisegundos. Esto
prolonga el ciclo del OB y puede activar la vigilancia del tiempo de ciclo.
Si un bloque de datos no relevante para la ejecución se copia con la instrucción "Copiar área"
y la operación de copia se interrumpe, la instrucción no se podrá seguir ejecutando.
Si en la CPU existe la instrucción "Leer de un bloque de datos de la memoria de carga", debe
utilizarse dicha instrucción para leer los bloques de datos no relevantes para la ejecución en
la memoria de carga. Si se utiliza la instrucción "Copiar área" se emite el error W#16#8092.

5600

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "Copiar área":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

SRCBLK

Input

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria que se copia (área de ori‐
gen).

DSTBLK

Output 1)

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria en la que se copia (área
de destino).

INT

I, Q, M, D, L, P

Información de error

Valor de función (RET_VAL)

1) El parámetro DSTBLK se declara como Output, pero en la interfaz del bloque debe declararse como
InOut.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8092

El área de origen o destino está solo en la memoria de carga.

8xyy

Encontrará más información de error en "Consulte también".

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_RetVal" := BLKMOV(SRCBLK := P#M100.0 BYTE 10,
DSTBLK => P#DB1.DBX0.0 BYTE 10);

La instrucción copia 10 bytes a partir de MB100 y los escribe en el DB1. Si ocurre un error
durante la operación de copia, el respectivo código de error se indica en la variable
"Tag_RetVal".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de SCL (Página 8115)

Programación del PLC
Manual de programación y manejo, 11/2019

5601

Instrucciones
4.2 Instrucciones

UBLKMOV: Copiar área sin interrupciones
Descripción
La instrucción "Copiar área sin interrupciones" copia los contenidos de un área de memoria
(área de origen) en un área de memoria diferente (área de destino). La operación de copia se
realiza por orden ascendente de direcciones. Las áreas de origen y destino se definen
mediante punteros ANY.
La operación de copia no debe ser interrumpida por otras actividades del sistema operativo.
Ello puede aumentar el tiempo de reacción a alarmas de la CPU durante la ejecución de la
instrucción "Copiar área sin interrupciones".
Nota
En esta instrucción solo se pueden utilizar tipos de datos que sean válidos en una CPU de la
serie S7-300/400.

Áreas de memoria
La instrucción "Copiar área sin interrupciones" permite copiar las siguientes áreas de memoria:
● Áreas de un bloque de datos
● Marcas
● Memoria imagen de proceso de las entradas
● Memoria imagen de proceso de las salidas

Reglas generales para copiar
Al ejecutar la instrucción "Copiar área sin interrupciones" no pueden solaparse las áreas de
origen y destino. Si el área de origen es más pequeña que el área de destino, el área de origen
se copiará por completo en el área de destino. Los restantes bytes del área de destino
permanecen inalterados.
Si el área de destino es más pequeña que el área de origen, se escribirá en toda el área de
destino. Los restantes bytes del área de origen se ignoran.
Si un área de origen o destino definida como parámetro formal es menor que un área de origen
o destino indicada en los parámetros SRCBLK o DSTBLK, no se transferirán datos.
Al copiar un área del tipo de datos BOOL, la longitud indicada del área debe ser un múltiplo de
8, pues de lo contrario no se ejecutará la instrucción.

5602

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La instrucción "Copiar área sin interrupciones" permite copiar 512 bytes como máximo. A este
respecto deben tenerse en cuenta las limitaciones específicas de la CPU.
Nota
Si el área de origen o destino realmente existente es menor que el área de origen o destino
indicada en el parámetro BVAL o BLK, el comportamiento dependerá del tipo de CPU:
● Para las CPU S7-300 rige lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#837F. Este código de error debe evaluarse en el programa de usuario.
● Para las CPU V4 del S7-400 (V4, CPU H V4 y CPU H V4.5 se aplica lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#8122 o W#16#8323. Este código de error debe evaluarse en el programa de usuario.
● Para las restantes CPU S7-400 rige:
Se transfieren datos. En el parámetro RET_VAL se devuelve el código de error W#16#8122
o W#16#8323. Este código de error debe evaluarse en el programa de usuario.

Reglas para copiar cadenas de caracteres
La instrucción "Copiar área sin interrupciones" permite copiar asimismo áreas de origen y
destino del tipo de datos STRING. Si solo el área de origen es del tipo de datos STRING, se
copiarán los caracteres realmente contenidos en la cadena de caracteres. La información
sobre la longitud real y máxima no se escribe en el área de destino. Si tanto el área de origen
como el área de destino son del tipo de datos STRING, la longitud actual de la cadena de
caracteres en el área de destino se pone al número de caracteres realmente copiados. Si se
copian áreas del tipo de datos STRING, debe indicarse "1" como longitud del área.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

SRCBLK

Input

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria que se copia (área de ori‐
gen).

DSTBLK

Output 1)

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria en la que se copia (área
de destino).

INT

I, Q, M, D, L, P

Información de error

Valor de función (RET_VAL)

1) El parámetro DSTBLK se declara como Output, pero en la interfaz del bloque debe declararse como
InOut.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5603

Instrucciones
4.2 Instrucciones

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8091

El área de origen o destino está solo en la memoria de carga.

8xyy

Encontrará más información de error en "Consulte también".

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_RetVal" := UBLKMOV(SRCBLK := P#M100.0 BYTE 10,
DSTBLK => P#DB1.DBX0.0 BYTE 10);

La instrucción copia 10 bytes a partir de MB100 y los escribe en el DB1. Si ocurre un error
durante la operación de copia, el respectivo código de error se indica en la variable
"Tag_RetVal".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de SCL (Página 8115)

FILL: Rellenar área
Descripción
La instrucción "Rellenar área" rellena un área de memoria (área de destino) con el contenido
de un área de memoria diferente (área de origen). La instrucción "Rellenar área" copia el
contenido del área de origen en el área de destino hasta que el área de destino quede escrita
por completo. La operación de copia se realiza por orden ascendente de direcciones. Las
áreas de origen y destino se definen mediante punteros ANY.
Nota
En esta instrucción solo se pueden utilizar tipos de datos que sean válidos en una CPU de la
serie S7-300/400.

5604

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La figura siguiente muestra el principio de la operación de copia:
),//

%9$/

$

%

0:

$

%

0:

&

'

0:

&

'

0:

(

)

0:

(

)

0:

*

+

0:

*

+

0:

$

%

0:

&

'

0:

(

)

0:

*

+

0:

$

%

0:

&

'

0:

%/.

Ejemplo: el contenido del área MW100 a MW118 debe inicializarse con el contenido de las
palabras de marcas MW14 a MW20.

Coherencia de los datos de origen y destino
Tenga en cuenta que al ejecutar la instrucción "Rellenar área" no se modifican los datos de
origen, pues de lo contrario no se podría garantizar la coherencia de los datos de destino.

Áreas de memoria
La instrucción "Rellenar área" permite copiar las siguientes áreas de memoria:
● Áreas de un bloque de datos
● Marcas
● Memoria imagen de proceso de las entradas
● Memoria imagen de proceso de las salidas

Reglas generales para copiar
Las áreas de origen y destino no deben solaparse. Aunque el área de destino que se debe
inicializar no sea múltiplo entero de la longitud del parámetro de entrada BVAL, el área de
destino se rellenará igualmente hasta el último byte.
Si el área de destino que se debe preasignar es menor que el área de origen, solo se copian
los datos que caben en el área de destino.

Programación del PLC
Manual de programación y manejo, 11/2019

5605

Instrucciones
4.2 Instrucciones
Si el área de origen o destino realmente existente es menor que el tamaño del área de memoria
parametrizada para el área de origen o destino (parámetros BVAL, BLK), los datos no se
transfieren.
Si el puntero ANY (origen o destino) es del tipo BOOL, la longitud indicada debe ser divisible
por 8. De lo contrario, la instrucción no se ejecutará.
Si el área de destino es del tipo de datos STRING, la instrucción escribe la cadena de
caracteres completa, incluida la información de administración.
Nota
Si el área de origen o destino realmente existente es menor que el área de origen o destino
indicada en el parámetro BVAL o BLK, el comportamiento dependerá del tipo de CPU:
● Para las CPU S7-300 rige lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#837F. Este código de error debe evaluarse en el programa de usuario.
● Para las CPU V4 del S7-400 (V4, CPU H V4 y CPU H V4.5 se aplica lo siguiente:
No se transfieren datos. En el parámetro RET_VAL se devuelve el código de error
W#16#8122 o W#16#8323. Este código de error debe evaluarse en el programa de usuario.
● Para las restantes CPU S7-400 rige:
Se transfieren datos. En el parámetro RET_VAL se devuelve el código de error W#16#8122
o W#16#8323. Este código de error debe evaluarse en el programa de usuario.

Reglas para copiar estructuras
Al indicar una estructura a modo de parámetro de entrada, tenga en cuenta que la longitud de
una estructura se rige siempre por un número entero de bytes. Si se declara una estructura con
un número impar de bytes, esta estructura necesita un byte adicional de espacio en memoria.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

BVAL

Input

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria (área de origen) con cuyo
contenido se rellena el área
de destino en el parámetro
BLK.

BLK

Output 1)

ANY

I, Q, M, D, L, P

Indicación del área de memo‐
ria que se rellena con el con‐
tenido del área de origen.

INT

I, Q, M, D, L, P

Información de error

Valor de función (RET_VAL)

1) El parámetro BLK se declara como Output, pero en la interfaz del bloque debe declararse como
InOut.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5606

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetro BVAL
Al indicar una estructura a modo de parámetro de entrada, tenga en cuenta que la longitud de
una estructura se adapta siempre a un número entero de bytes. Si se declara una estructura
con un número impar de bytes, esta estructura necesita un byte adicional de espacio en
memoria.

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8092

El área de origen o destino está solo en la memoria de carga.

8xyy

Encontrará más información de error en "Consulte también".

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_RetVal" := FILL(BVAL := P#M14.0 WORD 4,
BLK => P#M100.0 WORD 10);

La instrucción copia el área de origen de MW14 a MW20 y rellena el área de destino de MW100
a MW118 con el contenido de las 4 palabras contenidas en el área de memoria del parámetro
BVAL.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de SCL (Página 8115)

Programación del PLC
Manual de programación y manejo, 11/2019

5607

Instrucciones
4.2 Instrucciones

Conversión
CONVERT: Convertir valor
Descripción
La instrucción "Convertir valor" permite programar conversiones explícitas. Los tipos de datos
que se han de convertir se especifican en un cuadro de diálogo que se abre automáticamente
al insertar la instrucción. Durante la ejecución, la instrucción lee el valor de origen y lo convierte
al valor de destino indicado.
Encontrará más información relacionada con las conversiones posibles en el apartado
"Conversión explícita" de "Consulte también".

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

<Tipo de ori‐
gen>

Input

Secuencias de
I, Q, M, D, L, P o
bits, enteros, nú‐
constante
meros en coma flo‐
tante, temporiza‐
dores, fecha y ho‐
ra, secuencias de
caracteres

Valor que se convierte.

I, Q, M, D, L, P
Secuencias de
bits, enteros, nú‐
meros en coma flo‐
tante, temporiza‐
dores, fecha y ho‐
ra, secuencias de
caracteres

Resultado de la conversión

<Tipo de des‐ Output
tino>

Área de memoria

Descripción

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_INT" := REAL_TO_INT("Tag_REAL");

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:

5608

Operando

Tipo de datos

Valor

Tag_REAL

REAL

20.56

Tag_INT

INT

21

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
En la conversión, el valor del operando "Tag_REAL" se redondea al siguiente entero y se
deposita en el operando "Tag_INT".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Conversiones explícitas (Página 590)
Principios básicos de SCL (Página 8115)

ROUND: Redondear número
Descripción
La instrucción "Redondear número" permite redondear el valor de la entrada IN al siguiente
número entero. La instrucción interpreta el valor de la entrada IN como número en coma
flotante y lo convierte a un número entero o a un número en coma flotante. Si el valor de
entrada se encuentra entre un número par y uno impar, se selecciona el número par.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

<Expresión>

Input

REAL

I, Q, M, D, L, P

Valor de entrada que se debe
redondear.

DINT

I, Q, M, D, L, P

Resultado del redondeo

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := ROUND("Tag_Value");

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value

1.50000000

-1.50000000

Tag_Result

2

-2

El resultado de la instrucción se devuelve en el operando "Tag_Result" como valor de función.

Programación del PLC
Manual de programación y manejo, 11/2019

5609

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

CEIL: Redondear un número en coma flotante al siguiente entero superior
Descripción
La instrucción "Redondear un número en coma flotante al siguiente entero superior" permite
redondear el valor al siguiente número entero superior. La instrucción interpreta el valor de
entrada como número en coma flotante y lo convierte al número entero superior más próximo.
El valor de la función puede ser mayor o igual al valor de entrada.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

<Expresión>

Input

REAL

I, Q, M, D, L, P

Valor de entrada

DINT

I, Q, M, D, L, P

Valor de entrada redondeado

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := CEIL("Tag_Value");

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value

0,5

-0,5

Tag_Result

1

0

El resultado de la instrucción se devuelve en el operando "Tag_Result" como valor de función.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

5610

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

FLOOR: Redondear un número en coma flotante al siguiente entero inferior
Descripción
La instrucción "Redondear un número en coma flotante al siguiente entero inferior" permite
redondear el valor al siguiente número entero inferior. La instrucción interpreta el valor de
entrada como número en coma flotante y lo convierte al número entero inferior más próximo.
El valor de función puede ser menor o igual al valor de entrada.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

<Expresión>

Input

REAL

I, Q, M, D, L, P

Valor de entrada

DINT

I, Q, M, D, L, P

Valor de entrada redondeado

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := FLOOR("Tag_Value");

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_Value

0.5

-0.5

Tag_Result

0

-1

El resultado de la instrucción se devuelve en el operando "Tag_Result" como valor de función.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

TRUNC: Truncar a entero
Descripción
La instrucción "Truncar a entero" permite generar un valor entero no redondeado a partir del
valor de entrada. La instrucción selecciona solo la parte entera del valor de entrada y la
devuelve sin decimales como valor de función.
Para modificar el tipo de datos de la instrucción, utilice la sintaxis siguiente:

Programación del PLC
Manual de programación y manejo, 11/2019

5611

Instrucciones
4.2 Instrucciones
TRUNC_<Tipo de datos>();

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

<Expresión>

Input

REAL

I, Q, M, D, L, P

_<tipo de datos>

Enteros
Valor predetermi‐
nado: DINT

Descripción
Valor de entrada
Tipo de datos del valor de
función:
● Si desea utilizar el tipo de
datos predeterminado,
no es necesario indicar
nada.
● Si desea utilizar otro tipo
de datos admisible, hay
que indicarlo
explícitamente.

Valor de función

Enteros

I, Q, M, D, L

Parte entera del valor de en‐
trada

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result1" := TRUNC("Tag_Value1");
"Tag_Result2" := TRUNC("Tag_Value2"+"Tag_Value3");
"Tag_Result3" := TRUNC_REAL("Tag_Value4");

El resultado de la instrucción se devuelve en el operando "Tag_Result" como valor de función.
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:

5612

Operando

Valor

Tag_Value1

-1.5

Tag_Result1

-1

Tag_Value2

2.1

Tag_Value3

3.2

Tag_Result2

5

Tag_Result3

2.0

Tag_Value4

2.4

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

SCALE: Escalar
Descripción
La instrucción "Escalar" convierte el entero del parámetro IN en un número en coma flotante
que se escala en unidades físicas entre un límite inferior y uno superior. Los límites inferior y
superior del rango de valores en el que se escala el valor de entrada se definen mediante los
parámetros LO_LIM y HI_LIM. El resultado de la instrucción se devuelve en el parámetro OUT.
La instrucción "Escalar" utiliza la siguiente ecuación:
OUT = [((FLOAT (IN) – K1)/(K2–K1)) ∗ (HI_LIM–LO_LIM)] + LO_LIM
El estado lógico del parámetro BIPOLAR determina los valores de las constantes "K1" y "K2".
El parámetro BIPOLAR puede tener los siguientes estados lógicos:
● Estado lógico "1": se presupone que el valor del parámetro IN es bipolar y está comprendido
en un rango de valores entre -27648 y 27648. En este caso, la constante "K1" tiene el valor
"-27648,0" y la constante "K2", el valor "+27648,0".
● Estado lógico "0": se presupone que el valor del parámetro IN es unipolar y está
comprendido en un rango de valores entre 0 y 27648. En este caso, la constante "K1" tiene
el valor "0,0" y la constante "K2", el valor "+27648,0".
Si el valor del parámetro IN es mayor que el de la constante "K2", el resultado de la instrucción
se pone al valor del límite superior (HI_LIM) y se emite un error.
Si el valor del parámetro IN es menor que el de la constante "K1", el resultado de la instrucción
se pone al valor del límite inferior (LO_LIM) y se emite un error.
Si el límite inferior indicado es mayor que el límite superior (LO_LIM > HI_LIM), el resultado se
escala de forma inversamente proporcional al valor de entrada.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

INT

I, Q, M, D, L, P

Valor de entrada que se es‐
cala.

HI_LIM

Input

REAL

I, Q, M, D, L, P

Valor límite superior

LO_LIM

Input

REAL

I, Q, M, D, L, P

Valor límite inferior

Programación del PLC
Manual de programación y manejo, 11/2019

5613

Instrucciones
4.2 Instrucciones
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

BIPOLAR

Input

BOOL

I, Q, M, D, L

Indica si el valor del paráme‐
tro IN se interpreta como bi‐
polar o unipolar. El paráme‐
tro puede adoptar los valores
siguientes:
1: Bipolar
0: Unipolar

OUT

Output

Valor de función (RET_VAL)

REAL

I, Q, M, D, L, P

Resultado de la instrucción

WORD

I, Q, M, D, L, P

Información de error

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

0008

El valor del parámetro IN es mayor que 27 648 o menor que 0 (unipolar) o -27 648 (bipolar).

8xyy

Encontrará más información de error en "Consulte también".

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:

"Tag_ErrorCode" := SCALE(IN := "Tag_InputValue",
HI_LIM := "Tag_HighLimit"
LO_LIM := "Tag_LowLimit"
BIPOLAR := "Tag_Bipolar",
OUT => "Tag_Result");

La información de error de la instrucción se devuelve en el operando "Tag_ErrorCode" como
valor de función.
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

5614

Operando

Valor

IN

Tag_InputValue

22

HI_LIM

Tag_HighLimit

100.0

LO_LIM

Tag_LowLimit

0.0

BIPOLAR

Tag_Bipolar

1

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Operando

Valor

OUT

Tag_Result

50.03978588

RET_VAL

Tag_ErrorCode

W#16#0000

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de SCL (Página 8115)

UNSCALE: Desescalar
Descripción
La instrucción "Desescalar" permite desescalar el número en coma flotante del parámetro IN
en unidades físicas comprendidas entre un límite inferior y uno superior y convertirlo en un
número entero. Los límites inferior y superior del rango de valores en el que se desescala el
valor de entrada se definen mediante los parámetros LO_LIM y HI_LIM. El resultado de la
instrucción se devuelve en el parámetro OUT.
La instrucción "Desescalar" utiliza la siguiente ecuación:
OUT = [((IN–LO_LIM)/(HI_LIM–LO_LIM)) ∗ (K2–K1)] + K1
El estado lógico del parámetro BIPOLAR determina los valores de las constantes "K1" y "K2".
El parámetro BIPOLAR puede tener los siguientes estados lógicos:
● Estado lógico "1": se presupone que el valor del parámetro IN es bipolar y está comprendido
en un rango de valores entre -27648 y 27648. En este caso, la constante "K1" tiene el valor
"-27648,0" y la constante "K2", el valor "+27648,0".
● Estado lógico "0": se presupone que el valor del parámetro IN es unipolar y está
comprendido en un rango de valores entre 0 y 27648. En este caso, la constante "K1" tiene
el valor "0,0" y la constante "K2", el valor "+27648,0".
Si el valor del parámetro IN no se encuentra dentro de los límites definidos por HI_LIM y
LO_LIM, se emite un error. El resultado se ajusta al límite más próximo.
Si el límite inferior indicado es mayor que el límite superior (LO_LIM > HI_LIM), el resultado se
escala de forma inversamente proporcional al valor de entrada.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

REAL

I, Q, M, D, L, P

Valor de entrada que se de‐
sescala en un valor entero.

HI_LIM

Input

REAL

I, Q, M, D, L, P

Valor límite superior

Programación del PLC
Manual de programación y manejo, 11/2019

5615

Instrucciones
4.2 Instrucciones
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

LO_LIM

Input

REAL

I, Q, M, D, L, P

Valor límite inferior

BIPOLAR

Input

BOOL

I, Q, M, D, L

Indica si el valor del paráme‐
tro IN se interpreta como bi‐
polar o unipolar. El paráme‐
tro puede adoptar los valores
siguientes:
1: Bipolar
0: Unipolar

OUT

Output

Valor de función (RET_VAL)

INT

I, Q, M, D, L, P

Resultado de la instrucción

WORD

I, Q, M, D, L, P

Información de error

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

0008

El valor del parámetro IN es mayor que el del límite superior (HI_LIM) o menor que el del
límite inferior (LO_LIM).

8xyy

Encontrará más información de error en "Consulte también".

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización aquí: Cambiar
formatos de visualización en el estado del programa (Página 8529)

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_ErrorCode" := UNSCALE(IN := "Tag_InputValue",
HI_LIM := "Tag_HighLimit"
LO_LIM := "Tag_LowLimit"
BIPOLAR := "Tag_Bipolar",
OUT => "Tag_Result");

La información de error de la instrucción se devuelve en el operando "Tag_ErrorCode" como
valor de función.
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:

5616

Parámetro

Operando

Valor

IN

Tag_InputValue

50.03978588

HI_LIM

Tag_HighLimit

100.0

LO_LIM

Tag_LowLimit

0.0

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Operando

Valor

BIPOLAR

Tag_Bipolar

1

OUT

Tag_Result

22

RET_VAL

Tag_ErrorCode

W#16#0000

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de SCL (Página 8115)

Control del programa
IF: Ejecución condicional
Descripción
La instrucción "Ejecución condicional" permite ramificar el flujo del programa en función de una
condición. La condición es una expresión con un valor booleano (TRUE o FALSE). Como
condición se pueden indicar expresiones lógicas o expresiones de comparación.
Al ejecutar la instrucción, se evalúan las expresiones indicadas. Si el valor de una expresión
es TRUE, la condición se considera cumplida; en el caso de FALSE se considera que la
condición no se cumple.

Parámetros
Dependiendo del tipo de ramificación se pueden programar las siguientes formas de la
instrucción:
● Ramificación con IF:
IF <condición> THEN <instrucciones>
END_IF;
Si se cumple la condición, se ejecutan las instrucciones que están programadas después de
THEN. Si la condición no se cumple, el procesamiento del programa continúa con la siguiente
instrucción después de END_IF.
● Ramificación con IF y ELSE:
IF <condición> THEN <instrucciones1>
ELSE <Instrucciones0>
END_IF;
Si se cumple la condición, se ejecutan las instrucciones que están programadas después de
THEN. Si no se cumple la condición, se ejecutan las instrucciones que están programadas

Programación del PLC
Manual de programación y manejo, 11/2019

5617

Instrucciones
4.2 Instrucciones
después de ELSE. Después, el procesamiento del programa continúa con la siguiente
instrucción después de END_IF.
● Ramificación con IF, ELSIF y ELSE:
IF <condición1> THEN <instrucciones1>
IF <condición2> THEN <instrucciones2>
ELSE <Instrucciones0>
END_IF;
Si se cumple la primera condición (<condición1>), se ejecutan las instrucciones
(<instrucciones1>) después de THEN. Después de ejecutar las instrucciones, el
procesamiento del programa continúa después de END_IF.
Si no se cumple la primera condición, se comprueba la segunda (<condición2>). Si se cumple
la segunda condición (<condición2>), se ejecutan las instrucciones (<instrucciones2>)
después de THEN. Después de ejecutar las instrucciones, el procesamiento del programa
continúa después de END_IF.
Si no se cumple ninguna condición, se ejecutan las instrucciones (<instrucciones0> después
de ELSE y, a continuación, continúa el procesamiento del programa después de END_IF.
En una instrucción IF se pueden anidar tantas combinaciones de ELSIF y THEN como se
desee. La programación de una rama ELSE es opcional.
La sintaxis de la instrucción IF se compone de las siguientes partes:
Parámetro

Tipo de datos Área de memoria

Descripción

<Condición>

BOOL

Expresión que se evalúa.

<Instruccio‐
nes>

-

I, Q, M, D, L

Instrucciones que se ejecutan si se cumple la con‐
dición. Una excepción son las instrucciones que
están programadas después de ELSE. Estas se
ejecutan si no se cumple ninguna condición dentro
del bucle.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
IF "Tag_1" = 1
THEN "Tag_Value" :=
ELSIF "Tag_2" = 1
THEN "Tag_Value" :=
ELSIF "Tag_3" = 1
THEN "Tag_Value" :=
ELSE "Tag_Value" :=
END_IF;

5618

10;
20;
30;
0;

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

Tag_1

1

0

0

0

Tag_2

0

1

0

0

Tag_3

0

0

1

0

Tag_Value

10

20

30

0

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

CASE: Estructura selectiva múltiple
Descripción
La instrucción "Estructura selectiva múltiple" permite procesar una de varias secuencias de
instrucciones en función del valor de una expresión.
El valor de la expresión puede ser un número entero o una secuencia de bits. Al ejecutar la
instrucción CASE se compara el valor de la expresión (variable) con los valores de varias
constantes. Si el valor de la expresión (variable) coincide con el de una constante, se cumple
la condición y se ejecutan las instrucciones que están programadas directamente después de
esta constante. Al hacerlo, las constantes pueden adoptar distintos valores.
La instrucción se puede declarar del siguiente modo:
CASE <Variable> OF
<Constante1>: <Instrucciones1>;
<Constante2>: <Instrucciones2>;
<ConstanteX>: <InstruccionesX>; // X >= 3
ELSE <Instrucciones0>;
END_CASE;

Programación del PLC
Manual de programación y manejo, 11/2019

5619

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Tipo de datos Área de memoria

Descripción

<Variable>

Secuencias
de bits, ente‐
ros

I, Q, M, D, L

Valor que se compara con los valores de constan‐
tes programados.

<Constante>

Secuencias
de bits

-

En el caso de una secuencia de bits, las constan‐
tes pueden adoptar los siguientes valores:

Pueden pro‐
gramarse
constantes
locales y glo‐
bales.

● Número binario (p. ej., 2#10)
● Número octal (p. ej., 8#77)
● Número hexadecimal (p. ej., 16#AD)
● Constante sin tipo (p. ej., 1000)
En caso de una variable Byte tipificada, deben
programarse constantes Byte (p. ej., BYTE#2).
En caso de una variable Word tipificada, pueden
programarse constantes Byte o Word (p. ej.,
BYTE#2, WORD#2).
En caso de una variable DWord tipificada, pueden
programarse constantes Byte, Word o DWord
(p. ej., BYTE#2, WORD#2, DWORD#2).
En caso de una variable LWord tipificada, pueden
programarse constantes Byte, Word, DWord o
LWord (p. ej., BYTE#2, WORD#2, DWORD#2,
LWORD#2).
Enteros

En el caso de un número entero, las constantes
pueden adoptar los siguientes valores:
● un número entero (p. ej., 5)
● un rango de enteros (p. ej., 15 a 20)
● una enumeración de números enteros y
rangos (p. ej., 10, 11, 15..20)

<Instrucción> -

-

Cualquier instrucción que se ejecuta si el valor de
la expresión coincide con el valor de una constan‐
te. Una excepción son las instrucciones que están
programadas después de ELSE. Estas se ejecu‐
tan cuando los valores no coinciden.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".
Si el valor de la expresión coincide con el valor de la primera constante (<Constante1>), se
ejecutan las instrucciones (<instrucciones1>) que están programadas directamente después
de la primera constante. Luego, el procesamiento del programa continúa después de
END_CASE.
Si el valor de la expresión no coindice con el valor de la primera constante (<Constante1), este
se compara con el valor de la constante que está programada a continuación. De esta manera
la instrucción CASE se ejecuta hasta que coincidan los valores. Si el valor de la expresión no
se corresponde con ninguno de los valores programados de las constantes, se ejecutan las
instrucciones (<instrucciones0>) que están programadas después de ELSE. ELSE es una
parte opcional de la sintaxis y se puede omitir.

5620

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La instrucción CASE también se puede anidar sustituyendo un bloque de instrucciones por
CASE. END_CASE cierra la instrucción CASE.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
CASE "Tag_Value" OF
0 :
"Tag_1" :=
1,3,5 :
"Tag_2" :=
6..10 :
"Tag_3" :=
16,17,20..25 :
"Tag_4" :=
ELSE
"Tag_5" :=
END_CASE;

1;
1;
1;
1;
1;

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valores

Tag_Value

0

1, 3 , 5

6, 7, 8, 9, 10

16,17, 20, 21,
22, 23, 24, 25

2

Tag_1

1

-

-

-

-

Tag_2

-

1

-

-

-

Tag_3

-

-

1

-

-

Tag_4

-

-

-

1

-

Tag_5

-

-

-

-

1

1: El operando se pone al estado lógico "1".
-: El estado lógico del operando permanece sin cambios.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

FOR: Ejecutar en bucle contador
Descripción
La instrucción "Ejecutar en bucle contador" permite procesar un bucle mientras la variable de
contaje se encuentre dentro del rango de valores indicado.
Los bucles también se pueden anidar. Dentro de un bucle se pueden programar otros bucles
con otras variables de contaje.

Programación del PLC
Manual de programación y manejo, 11/2019

5621

Instrucciones
4.2 Instrucciones
La ejecución actual de un bucle se puede finalizar con la instrucción "Verificar condición de
bucle" (CONTINUE). La instrucción "Abandonar el bucle inmediatamente" (EXIT) permite
finalizar el procesamiento de todo el bucle. Encontrará más información al respecto en
"Consulte también".
Nota
Información sobre el número de ejecuciones y sobre la variable de control
El número de ejecuciones no puede modificarse durante la ejecución del programa.
Por motivos de rendimiento, la variable de control debe declararse en la sección "Temp" de la
interfaz del bloque. Del mismo modo, la variable de control no debe modificarse durante le
ejecución del programa, ya que de lo contrario la instrucción puede devolver un resultado
indefinido en función de la implementación.

Valores límite para instrucciones FOR
Para programar instrucciones FOR "seguras" que no se ejecuten de manera infinita, tenga en
cuenta las siguientes reglas y los siguientes valores límite:
FOR <variable de contaje> := <valor inicial> TO <valor final> BY <incremento> DO
<instrucciones>;
END_FOR;
Si...

... entonces

Observación

Valor inicial < valor final

Valor final < (PMAX - paso)

La variable de contaje cuenta en
sentido positivo

Valor inicial > valor final AND va‐ Valor final > (NMAX - paso)
lor de paso < O

La variable de contaje cuenta en
sentido negativo

Valores límite
Para los tipos de datos posibles son válidos diferentes valores límite:
Tipo de datos

PMAX

Variable de contaje del tipo INT

32767

NMAX
-32768

Variable de contaje del tipo DINT 2147483647

-2147483648

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:

5622

Parámetros

Tipo de datos Área de memoria

Descripción

<Variable de
contaje>

INT, DINT

I, Q, M, D, L

Operando, cuyo valor se evalúa durante el proce‐
samiento del bucle. El tipo de datos de la variable
de contaje determina el tipo de datos de los pará‐
metros restantes.

<Valor ini‐
cial>

INT, DINT

I, Q, M, D, L

Expresión, cuyo valor se asigna a la variable de
contaje al comienzo del procesamiento del bucle.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetros

Tipo de datos Área de memoria

Descripción

<Valor final>

INT, DINT

Expresión, cuyo valor determina la última ejecu‐
ción del bucle. Antes de cada ejecución del bucle
se comprueba qué valor tiene la variable de con‐
taje:

I, Q, M, D, L

● Valor final no alcanzado:
Se ejecutarán las instrucciones según DO
● Valor final alcanzado:
El bucle FOR se ejecuta por última vez
● Valor final sobrepasado:
El bucle FOR finaliza
No se puede modificar el valor final durante la eje‐
cución de la instrucción.
<Incremen‐
to>

INT, DINT

I, Q, M, D, L

Expresión, en cuyo valor aumenta (incremento po‐
sitivo) o disminuye (incremento negativo) la varia‐
ble de contaje después de cada ejecución del bu‐
cle. La indicación del incremento es opcional. Si
no se ha indicado ningún incremento, el valor de la
variable de contaje aumenta en 1 después de ca‐
da ejecución del bucle.
No se puede modificar el incremento durante la
ejecución de la instrucción.

<Instruccio‐
nes>

-

Instrucciones que se ejecutan durante cada eje‐
cución del bucle mientras el valor de la variable de
control se encuentre en el rango de valores. El
rango de valores se especifica mediante los valo‐
res inicial y final.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
FOR i := 2 TO 8 BY 2
DO "a_array[i] := "Tag_Value"*"b_array[i]";
END_FOR;

El operando "Tag_Value" se multiplica por los elementos (2, 4, 6, 8) de las variables ARRAY
"b_array". El resultado se lee en los elementos (2, 4, 6, 8) de las variables ARRAY "a_array".

Consulte también
CONTINUE: Verificar condición de bucle (Página 1965)
EXIT: Abandonar el bucle inmediatamente (Página 1966)
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

Programación del PLC
Manual de programación y manejo, 11/2019

5623

Instrucciones
4.2 Instrucciones

WHILE: Ejecutar cuando se cumpla la condición
Descripción
La instrucción "Ejecutar cuando se cumpla la condición" permite procesar un bucle mientras se
cumpla una condición de ejecución. La condición es una expresión con un valor booleano
(TRUE o FALSE). Como condición se pueden indicar expresiones lógicas o expresiones de
comparación.
Al ejecutar la instrucción, se evalúan las expresiones indicadas. Si el valor de una expresión
es TRUE, la condición se considera cumplida; en el caso de FALSE se considera que la
condición no se cumple.
Los bucles también se pueden anidar. Dentro de un bucle se pueden programar otros bucles
con otras variables de contaje.
La ejecución actual de un bucle se puede finalizar con la instrucción "Verificar condición de
bucle" (CONTINUE). La instrucción "Abandonar el bucle inmediatamente" (EXIT) permite
finalizar el procesamiento de todo el bucle. Encontrará más información al respecto en
"Consulte también".
La instrucción se puede declarar del siguiente modo:
WHILE <condición> DO <instrucciones>;
END_WHILE;

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Tipo de datos Área de memoria

Descripción

<Condición>

BOOL

Expresión que se evalúa antes de cada ejecución
del bucle.

<Instruccio‐
nes>

-

I, Q, M, D, L

Instrucciones que se ejecutan si se cumple la con‐
dición. Si no se cumple la condición, el procesa‐
miento del programa continúa después de
END_WHILE.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
WHILE
"Tag_Value1" <> "Tag_Value2"
DO "Tag_Result"
:= "Tag_Input";
END_WHILE:

Mientras difieran los valores de los operandos "Tag_Value1" y "Tag_Value2", al operando
"Tag_Result" se le asignará el valor del operando "Tag_Input".

5624

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
CONTINUE: Verificar condición de bucle (Página 5626)
EXIT: Abandonar el bucle inmediatamente (Página 5627)
Principios básicos de SCL (Página 8115)

REPEAT: Ejecutar cuando no se cumpla la condición
Descripción
La instrucción "Ejecutar cuando no se cumpla la condición" permite procesar un bucle mientras
no se cumpla una condición de interrupción. La condición es una expresión con un valor
booleano (TRUE o FALSE). Como condición se pueden indicar expresiones lógicas o
expresiones de comparación.
Al ejecutar la instrucción, se evalúan las expresiones indicadas. Si el valor de una expresión
es TRUE, la condición se considera cumplida; en el caso de FALSE se considera que la
condición no se cumple.
Las instrucciones se ejecutan una vez aunque se cumpla la condición de interrupción.
Los bucles también se pueden anidar. Dentro de un bucle se pueden programar otros bucles
con otras variables de contaje.
La ejecución actual de un bucle se puede finalizar con la instrucción "Verificar condición de
bucle" (CONTINUE). La instrucción "Abandonar el bucle inmediatamente" (EXIT) permite
finalizar el procesamiento de todo el bucle. Encontrará más información al respecto en
"Consulte también".
La instrucción se puede declarar del siguiente modo:
REPEAT <instrucciones>;
UNTIL <condición> END_REPEAT;

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Tipo de datos Área de memoria

Descripción

<Instruccio‐
nes>

-

Instrucciones que se ejecutan mientras la condi‐
ción programada tenga el valor FALSE. Las ins‐
trucciones se ejecutan una vez aunque se cumpla
la condición de interrupción.

<Condición>

BOOL

I, Q, M, D, L

Expresión que se evalúa después de cada ejecu‐
ción del bucle. Si la expresión tiene el valor FAL‐
SE, el bucle se procesa de nuevo. Si la expresión
tiene el valor TRUE, el procesamiento del progra‐
ma continúa después de END_REPEAT.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5625

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
REPEAT "Tag_Result"
:= "Tag_Value";
UNTIL "Tag_Error"
END_REPEAT;

Mientras el valor del operando "Tag_Error" tenga el estado lógico "0", se le asignará al
operando "Tag_Result" el valor del operando "Tag_Value".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

CONTINUE: Verificar condición de bucle
Descripción
La instrucción "Verificar condición de bucle" permite finalizar la ejecución actual de un bucle
FOR, WHILE o REPEAT.
Después de ejecutar la instrucción, se evalúan de nuevo las condiciones para continuar el
bucle. La instrucción tiene efecto sobre el bucle que incluye directamente la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
FOR i
:= 1 TO 15 BY 2 DO
IF (i < 5) THEN
CONTINUE;
END_IF;
"DB10".Test[i] := 1;
END_FOR;

Encontrará más información sobre los tipos de datos válidos en "Consulte también".
Si se cumple la condición i < 5, no se ejecuta la siguiente asignación de valor
("DB10".Test[i] :=1). La variable de contaje (i) se incrementa en "2" y se comprueba si su valor
actual se encuentra en el rango de valores programados. Si la variable de contaje se encuentra
en el rango de valores, se evalúa de nuevo una condición IF.
Si no se cumple la condición i < 5, se ejecuta la siguiente asignación de valor ("DB10".Test[i] :=
1) y se inicia una nueva ejecución del bucle. La variable de control también se aumenta con el
incremento "2" y se comprueba.

5626

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

EXIT: Abandonar el bucle inmediatamente
Descripción
La instrucción "Abandonar el bucle inmediatamente" permite interrumpir en cualquier punto la
ejecución de un bucle FOR, WHILE o REPEAT independientemente de las condiciones. El
procesamiento del programa continúa después finalizar el bucle (END_FOR, END_WHILE,
END_REPEAT).
La instrucción tiene efecto sobre el bucle que incluye directamente la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
FOR i := 15 TO 1 BY -2 DO
IF (i < 5)
THEN EXIT;
END_IF;
"DB10".Test[i] := 1;
END_FOR;

Encontrará más información sobre los tipos de datos válidos en "Consulte también".
Si se cumple la condición i < 5, se interrumpe el procesamiento del bucle. El procesamiento
continúa después de END_FOR.
Si no se cumple la condición i < 5, se ejecuta la siguiente asignación de valor
("DB10".Test[i] :=1) y se inicia una nueva ejecución del bucle. La variable de contaje (i) se
decrementa en "-2" y se comprueba si su valor actual se encuentra en el rango de valores
programados. Si la variable de control (i) se encuentra en el rango de valores, la condición IF
se evalúa de nuevo.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

GOTO: Saltar
Descripción
La instrucción "Saltar" permite continuar el procesamiento del programa en un punto marcado
con una etiqueta.

Programación del PLC
Manual de programación y manejo, 11/2019

5627

Instrucciones
4.2 Instrucciones
La etiqueta y la instrucción "Saltar" deben estar en el mismo bloque. La denominación de la
etiqueta debe ser unívoca en un bloque. A toda etiqueta pueden acceder distintas
instrucciones de salto.
No se permite saltar a un bucle desde "fuera", pero sí es posible saltar desde un bucle hacia
"fuera".
Para la etiqueta deben observarse las siguientes reglas gramaticales:
● Letras (a - z, A - Z)
● Una combinación de letras y números. Es importante observar el orden, es decir, primero
las letras y después los números (a - z, A - Z, 0 - 9).
● No pueden utilizarse caracteres especiales o una combinación de letras y números en
orden inverso, es decir, primero los números y después las letras (0 - 9, a - z, A - Z).
La instrucción se puede declarar del siguiente modo:
GOTO <Etiqueta>;
...
<Etiqueta>: <Instrucciones>

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Tipo de datos

Descripción

<Etiqueta>

-

Etiqueta a la que se salta

<Instrucciones>

-

Instrucciones que se ejecutan después del salto.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
CASE "Tag_Value" OF
1 : GOTO MyLABEL1;
2 : GOTO MyLABEL2;
3 : GOTO MyLABEL3;
ELSE GOTO MyLABEL4;
END_CASE;
MyLABEL1: "Tag_1" := 1;
MyLABEL2: "Tag_2" := 1;
MyLABEL3: "Tag_3" := 1;
MyLABEL4: "Tag_4" := 1;

Dependiendo del valor del operando "Tag_Value", el procesamiento del programa se continúa
en el punto marcado por la etiqueta correspondiente. Por ejemplo, si el operando "Tag_Value"
tiene el valor "2", el procesamiento del programa continúa a partir de la etiqueta "MyLABEL2".
En este caso, la línea del programa marcada con la etiqueta "MyLABEL1" se omite.

5628

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

RETURN: Abandonar el bloque
Descripción
La instrucción "Abandonar el bloque" permite finalizar el procesamiento del programa en el
bloque que se está ejecutando y continuar en el bloque invocante.
En el fin del bloque se puede omitir la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
IF "Tag_Error" <>0 THEN RETURN;
END_IF;

Si el estado lógico del operando "Tag_Error" no es igual a cero, el procesamiento del programa
se finaliza en el bloque que se está procesando.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

(*...*): Insertar sección de comentario
Descripción
La instrucción "Insertar sección de comentario" permite insertar una sección de comentario. El
texto encerrado entre paréntesis "(*...*)" se trata como un comentario.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
(*Esta es una sección de comentario.*)

Programación del PLC
Manual de programación y manejo, 11/2019

5629

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

(/*...*/): Insertar comentario multilingüe
Descripción
Con la instrucción "Insertar comentario multilingüe" se inserta un comentario que puede
traducirse a otros idiomas del proyecto. Un comentario multilingüe se inicia con "(/*" y se cierra
con "*/)", lo que lo convierte en una unidad. Esto significa que, en cualquier caso, solo se puede
marcar o seleccionar el comentario entero y no partes por separado. Los comentarios
multilingües no pueden anidarse unos dentro de otros, pero pueden utilizarse dentro de
comentarios de líneas y secciones de comentarios. A diferencia de ello, no es posible emplear
comentarios de líneas o secciones de comentarios sencillas dentro de comentarios
multilingües, ya que todo lo incluido entre "(/*" y "*/)" se interpreta como texto normal.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
(/*Este es un comentario que puede traducirse a otros idiomas del
proyecto.*/)

Consulte también
Inserción de comentarios (Página 8179)

REGION: Estructurar el código del programa
Descripción
La instrucción "Estructurar el código del programa" permite estructurar el código del programa
en un bloque SCL dividiéndolo en diferentes áreas.
Encontrará más información sobre cómo trabajar con áreas aquí: Trabajar con áreas
(Página 8153)
La instrucción se puede declarar del siguiente modo:
REGION <Nombre>
<Instrucciones>
END_REGION

5630

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Tipo de datos

Área de memoria

Descripción

REGION

-

-

Palabra clave con la
que empieza el área

<Nombre>

-

-

Texto que designa RE‐
GION

<Instrucciones>

-

-

Código de programa
que comprende RE‐
GION

END_REGION

-

-

Palabra clave con la
que finaliza el área

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
REGION Feeder System
// Estructura el código fuente para el sistema de alimentación
IF "Variable_1" = 0 THEN
"Variable_2" := 10;
END_IF;
END_REGION

El área Feeder System abarca el código del programa completo.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

Control del tiempo de ejecución
COMPRESS: Comprimir la memoria de la CPU
Descripción
La instrucción "Comprimir la memoria de la CPU" comprime la memoria de trabajo de la CPU
o la memoria de carga RAM. Los huecos creados por haber borrado o cargado bloques, se
rellenan juntando los bloques existentes.
Con la llamada de la instrucción "Comprimir la memoria de la CPU" se lanza el proceso de
compresión. El proceso de compresión se reparte entre varios ciclos del programa. La
vigilancia del proceso de compresión se realiza mediante los valores de los distintos
parámetros. Si el parámetro BUSY de la instrucción tiene el valor "1", significa que el proceso

Programación del PLC
Manual de programación y manejo, 11/2019

5631

Instrucciones
4.2 Instrucciones
de compresión se está ejecutando todavía. El valor "1" del parámetro DONE indica que ha
finalizado el proceso de compresión. La información de error se puede consultar en el
parámetro RET_VAL.
Si se está ejecutando un proceso de compresión lanzado externamente, la llamada de la
instrucción "Comprimir la memoria de la CPU" origina un error.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

BUSY

Output

BOOL

I, Q, M, D, L

Información de si está activo
el proceso de compresión.

DONE

Output

BOOL

I, Q, M, D, L

Información de si ha finaliza‐
do el proceso de compresión.

INT

I, Q, M, D, L

Información de error

Valor de función (RET_VAL)

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error
El estado del proceso de compresión puede consultarse en los parámetros BUSY y DO‐
NE.

8091

Ya se está ejecutando un proceso de compresión lanzado externamente.

8092

La instrucción no se puede ejecutar porque se cumple una de las condiciones siguientes:
● La función "Borrar bloque" está activa.
● Una función de PG está accediendo a uno de los bloques que se deben desplazar.
● Ya se está ejecutando un proceso de compresión lanzado externamente.
● La CPU H se encuentra en un proceso de acoplamiento o actualización.

8xyy

Encontrará más información de error en "Consulte también".

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de SCL (Página 8115)

5632

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

RE_TRIGR: Reiniciar tiempo de vigilancia del ciclo
Descripción
La instrucción "Reiniciar tiempo de vigilancia del ciclo" reinicia el tiempo de vigilancia del ciclo
de la CPU. El tiempo de vigilancia del ciclo se reinicia entonces con la duración ajustada en la
configuración de la CPU.
La instrucción "Reiniciar tiempo de vigilancia del ciclo" se puede llamar en todos los bloques
independientemente de la prioridad.
Si se llama la instrucción en un bloque de prioridad superior, p. ej. en una alarma de proceso
o una alarma de diagnóstico, la instrucción no se ejecuta.
La instrucción "Reiniciar tiempo de vigilancia del ciclo" se ejecuta correctamente en un espacio
de tiempo (10 veces el ciclo máximo del programa), independientemente del número de
llamadas. Transcurrido ese tiempo, el ciclo del programa ya no puede prolongarse.

Parámetro
La instrucción "Reiniciar tiempo de vigilancia del ciclo" no tiene parámetros y no devuelve
información de error.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

STP: Finalizar programa
Descripción
La instrucción "Finalizar programa" conmuta la CPU al estado operativo STOP, con lo que se
finaliza la ejecución del programa. Los efectos al conmutar de RUN a STOP dependen de la
configuración de la CPU.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

WAIT: Programar retardo
Descripción
La instrucción "Programar retardo" permite detener la ejecución del programa durante un
periodo predeterminado. El periodo se indica en microsegundos en el parámetro WT de la
instrucción.

Programación del PLC
Manual de programación y manejo, 11/2019

5633

Instrucciones
4.2 Instrucciones
Es posible programar tiempos de retardo de -32768 a 32767 microsegundos (μs). El tiempo de
retardo mínimo depende de la CPU utilizada y equivale al tiempo de ejecución de la instrucción.
La ejecución de la instrucción puede verse interrumpida por eventos de prioridad superior y no
arrojará información de error.
Válido para CPU S7-300:
En las CPU S7-300 (a excepción de S7-318), el tiempo de retardo programado con la
instrucción es un tiempo mínimo. Se prolonga con el tiempo de ejecución de las clases de
prioridad que intervienen y con las cargas del sistema.
Nota
Tiempo de retardo negativo
Si indica un tiempo de retardo negativo en el parámetro WT, la salida de habilitación ENO, o
el RLO y el bit BR arrojan el estado lógico FALSE. Un tiempo de retardo negativo no afecta para
nada a la CPU. En KOP y FUP no se ejecutan las siguientes instrucciones vinculadas a la
salida de habilitación ENO.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

WT

Input

INT

I, Q, M, D, L, P o
constante

Tiempo de retardo en micro‐
segundos (μs)

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

PROTECT: Cambiar nivel de protección
Descripción
La instrucción "Cambiar nivel de protección" permite modificar el nivel de protección "1"
configurado para la CPU.
El nivel de protección "1" parametrizado con la opción activada "Eliminable por contraseña"
hace que sea necesario parametrizar una contraseña. Esta contraseña permite accesos de
escritura durante el funcionamiento a la CPU protegida contra escritura mediante la instrucción
"Cambiar nivel de protección" (p. ej. cargar).
El nivel de protección se especifica en el parámetro MODE de la instrucción. El nivel de
protección actual de la CPU se visualiza en la ventana de inspección en "Propiedades >
Protección".

5634

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra una explicación de los niveles de protección:
Nivel
de
pro‐
tec‐
ción

Explicación

1

Se permiten todas las funciones de PG. En el caso que exista un bloqueo de la legitimación de
la contraseña, este se elimina llamando la instrucción "Cambiar nivel de protección".

2

● El programa y la configuración de la CPU no se pueden modificar. El programa contenido
en la CPU se puede leer.
● Se permiten las funciones de control, observación y comunicación del proceso.
● Se permiten todas las funciones de información.
● Si conoce la contraseña válida, podrá desactivar la protección contra escritura ajustada.
● En el caso que exista un bloqueo de la legitimación de la contraseña, este se elimina
llamando la instrucción "Cambiar nivel de protección".

3

● Aun conociendo la contraseña válida, no podrá desactivar la protección contra lectura y
escritura ajustada.
● Si al llamar la instrucción "Cambiar nivel de protección" existe una conexión legitimada, la
llamada de la instrucción no tendrá ningún efecto en esta conexión.

Si se ha configurado el nivel de protección "2" o "3" para la CPU, la llamada de la instrucción
"Cambiar nivel de protección" no tiene efecto alguno.
El efecto del nivel de protección "2" o "3" una vez ejecutada la instrucción "Cambiar nivel de
protección" puede consultarse en la lista parcial SZL con la ID de SZL W#16#0232 y el índice
W#16#0004.
Nota
La instrucción "Cambiar nivel de protección" permite ajustar un nivel de protección más bajo
que aquel ajustado con "Configurar hardware" de STEP 7. Supongamos que se ha configurado
el nivel de protección 3 y a continuación se llama la instrucción "Cambiar nivel de protección"
con el parámetro MODE = 12. Esto bloqueará la legitimación de la contraseña. Si la instrucción
se llama nuevamente con el parámetro MODE = 0 o 1, el nivel de protección 3 se mantiene y
será posible desactivar la protección de lectura y escritura introduciendo la contraseña válida.

Programación del PLC
Manual de programación y manejo, 11/2019

5635

Instrucciones
4.2 Instrucciones

Efectos de las transiciones de estado operativo en el nivel de protección
La tabla siguiente muestra qué efectos tienen las transiciones de estado operativo en el nivel
de protección ajustado con la instrucción "Cambiar nivel de protección".
Acción

Efectos en el nivel de protección

● Selector de modo en "STOP"

El nivel de protección se pone a "1". Se permiten
todas las funciones de PG.

● Conexión (POWER ON) sin respaldo
● Borrado total mediante el selector de modo
● Cambios de configuración y/o del programa en
el estado operativo "STOP" de la CPU S7-400

El sistema operativo pone el nivel de protección a
"1". Se permiten todas las funciones de PG.

● Arranque en frío
● Rearranque (en caliente)

En caso necesario, llamando la instrucción "Cam‐
biar nivel de protección" en el programa es posible
ajustar el nivel de protección en "2" o "3".

Conexión (POWER ON) respaldada

No cambia

Transición de estado operativo RUN/ARRANQUE/ No cambia
PARADA -> STOP (debida a la llamada de la ins‐
trucción "Finalizar programa" (STP), a errores del
programa sin el correspondiente OB de error o a
una acción del usuario).
S7-400: Rearranque por acción del usuario o au‐
tomáticamente tras conexión (POWER ON)

No cambia

Sintaxis
Para la instrucción "Cambiar nivel de protección" se utiliza la siguiente sintaxis:
SCL
PROTECT(MODE := <Operando>)

La sintaxis de la instrucción se compone de las siguientes partes:
Parámetro

Declaración

Tipo de datos

Área de memoria

MODE

Input

WORD

I, Q, M, D, L

Descripción
Nivel de protección
Valores posibles:
● W#16#0000: Ajuste del
nivel de protección "1"
● W#16#0001: Ajuste del
nivel de protección "2"
con legitimación de la
contraseña
● W#16#000C: Ajuste del
nivel de protección "3" sin
legitimación de la
contraseña

Valor de función (RET_VAL)

5636

INT

I, Q, M, D, L

Si ocurre un error durante la
ejecución, se emite una infor‐
mación de error.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

La petición se ha ejecutado sin errores.

8090

Valor no admisible en el parámetro MODE.

80C3

En este momento los recursos necesarios están ocupados.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de SCL (Página 8115)

CiR: Controlar proceso CiR
Descripción
La instrucción "Controlar proceso CiR" permite influir en el proceso CiR en el programa de
usuario como se indica a continuación:
● Bloquear el proceso CiR. En este caso, se rechazará siempre la carga de una configuración
modificada desde la programadora en la CPU. El bloqueo se aplica hasta que se elimina
con la instrucción "Controlar proceso CiR".
● El proceso CiR se puede bloquear de forma condicionada, indicando un límite superior para
el tiempo de sincronización CiR en el parámetro FRZ_TIME. En este caso, solo se permitirá
cargar una configuración modificada desde la programadora en la CPU si el tiempo de
sincronización CiR calculado en la CPU no excede el límite superior definido.
● Habilitar el proceso CiR. El límite superior del tiempo de sincronización CiR se establece al
valor predeterminado de 1000 ms.
● Determina si el proceso CiR está habilitado o no. Si el proceso CiR está habilitado o lo está
condicionadamente, el límite superior actual del tiempo de sincronización CiR se indica en
el parámetro A_FT de la instrucción.
Nota
Durante el tiempo de sincronización CiR, las salidas están congeladas y las entradas no se
evalúan.

Programación del PLC
Manual de programación y manejo, 11/2019

5637

Instrucciones
4.2 Instrucciones

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

MODE

Input

BYTE

I, Q, M, D, L

Descripción
ID de la petición
Los valores admisibles del
parámetro MODE son:
● 0: Función de información
● 1: Habilitar proceso CiR
● 2: Bloquear proceso CiR
● 3: Bloquear proceso CiR
de forma condicionada.
El límite superior del
tiempo de sincronización
CiR se define en
FRZ_TIME.

FRZ_TIME

Input

TIME

I, Q, M, D, L

Límite superior del tiempo de
sincronización CiR en milise‐
gundos.
Rango de valores admisible:
60 ... 2500 ms (valor prede‐
terminado: 1000 ms)
El parámetro FRZ_TIME sólo
es relevante si el parámetro
MODE está al valor "3".

A_FT

Output

Valor de función (RET_VAL)

TIME

I, Q, M, D, L

INT

I, Q, M, D, L

Límite superior válido actual‐
mente del tiempo de sincro‐
nización CiR
Información de error
Si el parámetro MODE está a
"0", el parámetro RET_VAL
indica si el proceso CiR está
habilitado o no.

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

La petición se ha ejecutado sin errores.
Este código de error solo se puede emitir si el parámetro MODE está ajustado al valor 1,
2 ó 3.

0001

El proceso CiR está habilitado.
Este código de error solo se puede emitir si el parámetro MODE está puesto al valor "0".

0002

El proceso CiR está bloqueado.
Este código de error solo se puede emitir si el parámetro MODE está puesto al valor "0".

5638

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Código de
error*
(W#16#...)

Explicación

0003

El proceso CiR está bloqueado de forma condicionada.
Este código de error solo se puede emitir si el parámetro MODE está puesto al valor "0".

8001

La CPU no está lista para un proceso CiR.

8002

El valor del parámetro MODE no es admisible.

8003

El valor del parámetro FRZ_TIME no es admisible.

8xyy

Encontrará más información de error en "Consulte también".

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
La instrucción "Controlar proceso CiR" permite programar p. ej. que no se lance ningún
proceso CiR en periodos en los que se requiera la capacidad máxima de la CPU para el
procesamiento.
En este caso, la instrucción "Controlar proceso CiR" debe llamarse en el programa antes de
comenzar el periodo de actividad aumentada del proceso y ejecutarse con el valor "2"
(bloquear proceso CiR) en el parámetro MODE. Con ello se bloquea el proceso CiR.
Para volver a habilitar el proceso CiR tras finalizar el periodo de actividad aumentada del
proceso, la instrucción "Controlar proceso CiR" debe llamarse de nuevo y ejecutarse con el
valor "1" en el parámetro MODE. Como alternativa, el parámetro MODE se puede poner al
valor "3", con lo que el proceso CiR se bloquea de forma condicionada.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Principios básicos de SCL (Página 8115)

Operaciones lógicas con palabras
DECO: Descodificar
Descripción
La instrucción "Descodificar" activa un bit predeterminado por el valor de entrada en el valor de
salida.
La instrucción "Descodificar" lee el valor del parámetro IN y activa el bit en el valor de salida
cuya posición equivale al valor leído. Los demás bits del valor de salida se rellenan con ceros.
Si el valor del parámetro IN es mayor que 31, se ejecuta una instrucción modulo 32.

Programación del PLC
Manual de programación y manejo, 11/2019

5639

Instrucciones
4.2 Instrucciones

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

WORD

I, Q, M, D, L, P

Posición del bit que se activa
en el valor de salida.

DWORD

I, Q, M, D, L, P

Valor de salida actual

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := DECO(IN := "Tag_Value");

La figura siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
ಯ7DJB9DOXHಯ




ಯ7DJB5HVXOWಯ

 



 

La instrucción lee el número "3" del valor del operando "Tag_Value" y activa el tercer bit del
valor del operando "Tag_Result".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

ENCO: Codificar
Descripción
La instrucción "Codificar" permite leer el número del bit menos significativo que está activado
en el valor de entrada y devolverlo como resultado.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

DWORD

I, Q, M, D, L, P

Valor de entrada

INT

I, Q, M, D, L, P

Número del bit que se lee en
el valor de entrada.

Valor de función

5640

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := ENCO(IN := "Tag_Value");

La figura siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:

ಯ7DJB9DOXHಯ
ಯ7DJB5HVXOWಯ

 



 


La instrucción lee el bit menos significativo que está activado en el operando "Tag_Value" y
escribe la posición de bit "3" en el operando "Tag_Result". El resultado de la instrucción se
devuelve en el operando "Tag_Result" como valor de función.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

SEL: Seleccionar
Descripción
La instrucción "Seleccionar" selecciona, en función de un interruptor (parámetro G), uno de los
parámetros IN0 o IN1 y devuelve su contenido como resultado. Si el parámetro G tiene el
estado lógico "0", se copia el valor del parámetro IN0. Si el parámetro G tiene el estado lógico
"1", se copia el valor del parámetro IN1 y se devuelve como valor de función.
Para poder ejecutar la instrucción, es imprescindible que las variables de todos los parámetros
del tipo de datos sean de la misma clase.

Programación del PLC
Manual de programación y manejo, 11/2019

5641

Instrucciones
4.2 Instrucciones

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

G

Input

BOOL

I, Q, M, D, L

Interruptor

IN0

Input

Números binarios,
enteros, números
en coma flotante,
temporizadores,
secuencias de ca‐
racteres, TOD,
DATE, DT

I, Q, M, D, L, P

Primer valor de entrada

IN1

Input

Números binarios,
enteros, números
en coma flotante,
temporizadores,
secuencias de ca‐
racteres, TOD,
DATE, DT

I, Q, M, D, L, P

Segundo valor de entrada

Números binarios,
enteros, números
en coma flotante,
temporizadores,
secuencias de ca‐
racteres, TOD,
DATE, DT

I, Q, M, D, L, P

Resultado de la instrucción

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := SEL(G := "Tag_Value",
IN0 := "Tag_0",
IN1 := "Tag_1");

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando
Tag_Value

Valor
0

1

Tag_0

W#16#0000

W#16#4C

Tag_1

W#16#FFFF

D#16#5E

Tag_Result

W#16#0000

D#16#5E

El resultado de la instrucción se devuelve en el operando "Tag_Result" como valor de función.

5642

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

MUX: Multiplexar
Descripción
La instrucción "Multiplexar" copia el valor de un parámetro de entrada seleccionado y lo
devuelve. Con el parámetro K se especifica el número del parámetro de entrada cuyo número
se copiará. La numeración comienza por IN0 y continúa en orden ascendente con cada nueva
entrada. Se puede declarar un máximo de 32 parámetros de entrada.
Si el valor del parámetro K es mayor que el número de entradas y el parámetro INELSE no está
activado, el valor de función de la instrucción no será válido y la salida de habilitación ENO se
pone a "0".
Todas las variables parametrizadas deben ser del mismo tipo de datos. El valor de función
adopta el tipo de datos más significativo.
Nota
El parámetro K tiene un entero negativo
Si en los parámetros de entrada se indica una variable con un tipo de datos válido y el
parámetro K tiene un entero negativo, el valor de la variable se modificará.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

K

Input

Enteros

I, Q, M, D, L, P

Indica el parámetro cuyo con‐
tenido se transfiere.
● Si K = 0 => parámetro IN0
● Si K = 1 => parámetro
IN1, etc.

IN0

Input

Programación del PLC
Manual de programación y manejo, 11/2019

Números binarios,
enteros, números
en coma flotante,
temporizadores,
secuencias de ca‐
racteres, TOD,
DATE, DT

I, Q, M, D, L, P

Primer valor de entrada

5643

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN1

Input

Números binarios,
enteros, números
en coma flotante,
temporizadores,
secuencias de ca‐
racteres, TOD,
DATE, DT

I, Q, M, D, L, P

Segundo valor de entrada

INn

Input

Números binarios,
enteros, números
en coma flotante,
temporizadores,
secuencias de ca‐
racteres, TOD,
DATE, DT

I, Q, M, D, L, P

Valores de entrada opciona‐
les

INELSE

Input

Números binarios,
enteros, números
en coma flotante,
temporizadores,
secuencias de ca‐
racteres, TOD,
DATE, DT

I, Q, M, D, L, P

Indica el valor que se copia si
K <> n.

Números binarios,
enteros, números
en coma flotante,
temporizadores,
secuencias de ca‐
racteres, TOD,
DATE, DT

I, Q, M, D, L, P

Resultado de la instrucción

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := MUX(K := "Tag_Number",
IN0 := "Tag_1",
IN1 := "Tag_2",
INELSE := "Tag_3");

El resultado de la instrucción se devuelve en el operando "Tag_Result" como valor de función.
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

5644

Valor

Tag_Number

1

4

Tag_1

DW#16#00000000

DW#16#00000000

Tag_2

DW#16#003E4A7D

DW#16#003E4A7D

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Operando

Valor

Tag_3

DW#16#FFFF0000

DW#16#FFFF0000

Tag_Result

DW#16#003E4A7D

DW#16#FFFF0000

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

Desplazamiento y rotación
SHR: Desplazar a la derecha
Descripción
Con la instrucción "Desplazar a la derecha" se desplaza el contenido del parámetro IN de bit
en bit hacia la derecha y se devuelve como valor de función. El parámetro N determina el
número de bits que debe desplazarse el valor indicado.
Si el valor del parámetro N es "0", se devuelve como resultado el valor del parámetro IN.
Si el valor del parámetro N es mayor que el número de bits disponibles, el valor del parámetro
IN se desplaza hacia la derecha las posiciones de bit disponibles.
Los bits que quedan libres en el área izquierda del operando al realizar el desplazamiento se
rellenan con ceros.
La figura siguiente muestra cómo el contenido de un operando del tipo de datos INT se
desplaza cuatro posiciones de bit a la derecha:


,1



 










1

5HVXOWDGR!




































SRVLFLRQHV

















/DVSRVLFLRQHVGHELWTXHTXHGDQOLEUHV
VHUHOOHQDQFRQFHURV

Programación del PLC
Manual de programación y manejo, 11/2019











(VWRVFXDWURELWV
VHSLHUGHQ

5645

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

IN

Input

Secuencias de bits I, Q, M, D, L, P

Valor que se desplaza.

N

Input

Enteros

Número de bits que se des‐
plaza el valor (IN).

I, Q, M, D, L, P

Descripción

El valor del parámetro N de‐
be ser positivo.
Valor de función

Secuencias de bits I, Q, M, D, L

Resultado de la instrucción

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := SHR(IN := "Tag_Value",
N := "Tag_Number");

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_Value

0011 1111 1010 1111

N

Tag_Number

3

Valor de función

Tag_Result

0000 0111 1111 0101

El valor del operando "Tag_Value" se desplaza tres posiciones de bit hacia la derecha. El
resultado de la instrucción se devuelve en el operando "Tag_Result" como valor de función.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

SHL: Desplazar a la izquierda
Descripción
Con la instrucción "Desplazar a la izquierda" se desplaza el contenido del parámetro IN de bit
en bit hacia la izquierda y se devuelve como valor de función. El parámetro N determina el
número de bits que debe desplazarse el valor indicado.
Si el valor del parámetro N es "0", se devuelve como resultado el valor del parámetro IN.
Si el valor del parámetro N es mayor que el número de bits disponibles, el valor del parámetro
IN se desplaza hacia la izquierda las posiciones de bit disponibles.

5646

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Las posiciones que quedan libres al desplazar se rellenan con ceros.
La figura siguiente muestra cómo el contenido de un operando del tipo de datos WORD se
desplaza seis posiciones de bit hacia la izquierda:


,1



 




1




























G¯JLWRV

5HVXOWDGR!      

































/DVSRVLFLRQHVGHELWV
TXH
TXHGDQOLEUHVDO
GHVSOD]DU
VHUHOOHQDQFRQFHURV

(VWRVVHLVELWV
VHSLHUGHQ

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

IN

Input

Secuencias de bits I, Q, M, D, L, P

Valor que se desplaza

N

Input

Enteros

Número de bits que se des‐
plaza el valor IN.

I, Q, M, D, L, P

Descripción

El valor del parámetro N de‐
be ser positivo.
Valor de función

Secuencias de bits I, Q, M, D, L

Resultado de la instrucción

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := SHL(IN := "Tag_Value",
N := "Tag_Number");

Programación del PLC
Manual de programación y manejo, 11/2019

5647

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_Value

0011 1111 1010 1111

N

Tag_Number

4

Valor de función

Tag_Result

1111 1010 1111 0000

El valor del operando "Tag_Value" se desplaza cuatro posiciones de bit hacia la izquierda. El
resultado de la instrucción se devuelve en el operando "Tag_Result" como valor de función.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

ROR: Rotar a la derecha
Descripción
Con la instrucción "Rotar a la derecha", el contenido del parámetro IN rota de bit en bit hacia
la derecha y se devuelve como valor de función. El parámetro N determina el número de bits
que debe rotarse el valor indicado. Los bits que quedan libres al realizar la rotación se rellenan
con los bits desplazados hacia fuera.
Si el valor del parámetro N es "0", se devuelve como resultado el valor de la entrada IN.
Si el valor del parámetro N es mayor que el número de bits disponibles, el valor del operando
en la entrada IN rota de todos modos el número indicado de posiciones de bit.
La figura siguiente muestra cómo el contenido de un operando del tipo de datos DWORD rota
tres posiciones hacia la derecha:

5648

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones


,1

 

       

1

5HVXOWDGR!



SRVLFLRQHV

        
(OHVWDGROµJLFRGHORVWUHV
ELWVGHVSOD]DGRVVHLQWURGXFH
HQODV
SRVLFLRQHVTXHKDQTXHGDGR
OLEUHV

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

IN

Input

Secuencias de bits I, Q, M, D, L, P

Valor que se rota

N

Input

Enteros

Número de bits que rota el
valor IN.

I, Q, M, D, L, P

Descripción

El valor del parámetro N de‐
be ser positivo.
Valor de función

Secuencias de bits I, Q, M, D, L

Resultado de la instrucción

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := ROR(IN := "Tag_Value",
N := "Tag_Number");

Programación del PLC
Manual de programación y manejo, 11/2019

5649

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_Value

1010 1010 0000 1111 0000
1111 0101 0101

N

Tag_Number

5

Valor de función

Tag_Result

1010 1101 0101 0000 0111
1000 0111 1010

El contenido del operando "Tag_Value" se rota cinco posiciones de bit hacia la derecha. El
resultado de la instrucción se devuelve en el operando "Tag_Result" como valor de función.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

ROL: Rotar a la izquierda
Descripción
Con la instrucción "Rotar a la izquierda", el contenido del parámetro IN rota de bit en bit hacia
la izquierda y se devuelve como valor de función. El parámetro N determina el número de bits
que debe rotarse el valor indicado. Los bits que quedan libres al realizar la rotación se rellenan
con los bits desplazados hacia fuera.
Si el valor del parámetro N es "0", se devuelve como resultado el valor de la entrada IN.
Si el valor del parámetro N es mayor que el número de bits disponibles, el valor del operando
en la entrada IN rota de todos modos el número indicado de posiciones de bit.
La figura siguiente muestra cómo el contenido de un operando del tipo de datos DWORD rota
tres posiciones hacia la izquierda:

5650

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones


,1

 

       

1

5HVXOWDGR!



G¯JLWRV

        
(OHVWDGROµJLFRGHORVWUHV
ELWVGHVSOD]DGRVVHLQVHUWDHQ
ODVSRVLFLRQHVTXHTXHGDQOLEUHVDO
GHVSOD]DU

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

IN

Input

Secuencias de bits I, Q, M, D, L, P

Valor que se rota

N

Input

Enteros

Número de bits que rota el
valor IN.

I, Q, M, D, L, P

Descripción

El valor del parámetro N de‐
be ser positivo.
Valor de función

Secuencias de bits I, Q, M, D, L

Resultado de la instrucción

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := ROL(IN := "Tag_Value",
N := "Tag_Number");

Programación del PLC
Manual de programación y manejo, 11/2019

5651

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN

Tag_Value

1111 0000 1010 1010 0000
1111 0000 1111

N

Tag_Number

5

Valor de función

Tag_Result

0001 0101 0100 0001 1110
0001 1111 1110

El contenido del operando "Tag_Value" se rota cinco posiciones de bit hacia la izquierda. El
resultado de la instrucción se devuelve en el operando "Tag_Result" como valor de función.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Entrada de instrucciones SCL (Página 8149)
Edición de instrucciones SCL (Página 8181)
Principios básicos de SCL (Página 8115)

Otras instrucciones
SET: Activar área por bits
Descripción
La instrucción "Activar área por bits" pone a "1" el estado lógico de los bits de un área indicada.
El punto inicial del área se define mediante el puntero del parámetro S_BIT. Si el puntero
señala al área de memoria de la periferia externa (P), no se ejecuta la instrucción. El número
de bits que deben activarse en el área indicada se determina en el parámetro N de la
instrucción. Si el parámetro N tiene el valor "0", la llamada de la instrucción no tendrá efecto
alguno.
Nota
Parámetro N
En el parámetro N también es posible interconectar un elemento de un bloque de datos.

5652

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

S_BIT

Input

POINTER

I, Q, M, D

Apunta al primer bit del área
cuyos bits se activan.
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

N

Input

INT

I, Q, M, D, L, P o
constante

Número de bits que deben
activarse

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
SET(S_BIT := P#M0.0,
N := 10);

En el ejemplo, la instrucción activa 10 bits en el área de M0.0 a M1.1.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

SETP: Activar mapa de bits en el área de periferia
Descripción
La instrucción "Activar mapa de bits en el área de periferia" permite poner los bits de un área
de periferia al estado lógico "1". Paralelamente a los bits de periferia, también se activan los
bits correspondientes en la memoria imagen de proceso de las salidas.
Los parámetros N y SA de la instrucción sirven para definir el mapa de bits que debe activarse.
Los bits del mapa deben encontrarse en aquella parte del área de periferia que tiene asignada
una memoria imagen de proceso.
Si no se ha conectado periferia para una parte del mapa de bits seleccionado, la instrucción
intentará activar el mapa de bits completo. En este caso se devuelve una información de error
en el parámetro RET_VAL.

Programación del PLC
Manual de programación y manejo, 11/2019

5653

Instrucciones
4.2 Instrucciones
El área de periferia se activa por bytes. Si el mapa de bits definido a través de los parámetros
N y SA no empieza ni termina en un límite de byte, la llamada de la instrucción tendrá el efecto
siguiente:
● Los bits contenidos en el primer o último byte que debe transferirse y que no pertenecen al
mapa de bits definido, obtienen el valor de los bits correspondientes en la memoria imagen
de proceso de las salidas. Esto puede ocasionar p. ej. el arranque accidental de motores o
la desconexión de sistemas de refrigeración.
ADVERTENCIA
Comportamiento involuntario
El ajuste de los bits al valor de los bits correspondientes en la memoria imagen de proceso
de las salidas puede ocasionar, p. ej., el arranque accidental de motores o la desconexión
de sistemas de refrigeración.
● Los bits que pertenecen al mapa de bits definido se ponen al estado lógico "1".
La llamada de la instrucción "Activar mapa de bits en el área de periferia" no tiene efecto alguno
si el parámetro N devuelve el valor "0".

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

N

Input

INT

I, Q, M, D, L

Número de bits que deben
activarse

SA

Output

POINTER

P

Puntero hacia el primer bit
que debe activarse

INT

I, Q, M, D, L

Información de error

Valor de función (RET_VAL)

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8xyy

Encontrará más información de error en "Consulte también".

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

5654

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Error" := SETP(N := 8,
SA => P#10.0);

En el ejemplo, la instrucción activa 8 bits en el área de periferia conforme a las salidas Q10.0
a Q10.7.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Principios básicos de SCL (Página 8115)

SETI: Activar área por bytes
Descripción
La instrucción "Activar área por bytes" pone a "1" el estado lógico de los bits de un área definida
de bytes. El punto inicial del área se define en el parámetro S_BYTE. El tamaño del área se
define indicando el número de bits que deben activarse en el parámetro N de la instrucción.
Nota
El valor del parámetro N debe ser un múltiplo de 8 (p. ej. 8, 16, 24, etc.).
El puntero indicado en el parámetro S_BYTE debe señalar al área de memoria de la periferia
externa (P). Puesto que al área de memoria "P" se accede en formato de byte, palabra y
palabra doble, el puntero del parámetro S_BYTE debe señalar a un operando equivalente a un
valor límite de byte. Por tanto, el número de bit del puntero debe ser "0".
Nota
El estado lógico de los bits correspondientes en la memoria imagen de proceso de las salidas
(Q) se pone a "0".
La llamada de la instrucción "Activar área por bytes" no tiene efecto alguno si se cumple una
de las condiciones siguientes:
● El puntero del parámetro S_BYTE no señala al área de memoria de la periferia externa (P).
● El puntero del parámetro S_BYTE señala a un operando que no equivale a ningún valor
límite de byte.
● El valor del parámetro N no es un múltiplo de 8.

Programación del PLC
Manual de programación y manejo, 11/2019

5655

Instrucciones
4.2 Instrucciones

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

S_BYTE

Input

POINTER

P

Señala al primer byte del
área cuyos bits se activan.
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

N

Input

INT

I, Q, M, D, L, P

Tamaño del área que debe
activarse
El área se indica mediante el
número de bits como múltiplo
de 8 (p. ej. 8, 16, 24, etc.).

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
SETI(S_BYTE := byte_array[100],
N := 16);

En el ejemplo, la instrucción activa 2 bytes (16 bits) en el área de 100.0 a 101.7 del área por
bytes.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

RESET: Desactivar área por bits
Descripción
La instrucción "Desactivar área por bits" pone a "0" el estado lógico de los bits de un área
definida. El punto inicial del área se define mediante el puntero del parámetro S_BIT. Si el
puntero señala al área de memoria de la periferia externa (P), no se ejecuta la instrucción. El
número de bits que deben desactivarse en el área indicada se determina en el parámetro N de
la instrucción. Si el parámetro N tiene el valor "0", la llamada de la instrucción no tendrá efecto
alguno.

5656

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

S_BIT

Input

POINTER

I, Q, M, D

Señala al primer bit del área
cuyos bits se desactivan.
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

N

Input

INT

I, Q, M, D, L, P

Número de bits que deben
desactivarse.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
RESET(S_BIT := %M0.0,
N := 10);

En el ejemplo, la instrucción desactiva 10 bits en el área de M0.0 a M1.1.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

RESETP: Desactivar mapa de bits en el área de periferia
Descripción
La instrucción "Desactivar mapa de bits en el área de periferia" pone los bits de un área de
periferia al estado lógico "0". Simultáneamente con los bits de periferia se desactivan también
los bits correspondientes en la memoria imagen de proceso de las salidas.
Los parámetros N y SA de la instrucción sirven para definir el mapa de bits que debe
desactivarse. Los bits del mapa deben encontrarse en aquella parte del área de periferia que
tiene asignada una memoria imagen de proceso.
Si no hay periferia enchufada para una parte del mapa de bits seleccionado, la instrucción
intentará desactivar el mapa de bits completo. En este caso se devuelve una información de
error en el parámetro RET_VAL.

Programación del PLC
Manual de programación y manejo, 11/2019

5657

Instrucciones
4.2 Instrucciones
El área de periferia se desactiva por bytes. Si el mapa de bits definido a través de los
parámetros N y SA no empieza ni termina en un límite de byte, la llamada de la instrucción
tendrá el efecto siguiente:
● Los bits contenidos en el primer o último byte que debe transferirse y que no pertenecen al
mapa de bits definido, obtienen el valor de los bits correspondientes en la memoria imagen
de proceso de las salidas.
ADVERTENCIA
Comportamiento involuntario
El ajuste de los bits al valor de los bits correspondientes en la memoria imagen de proceso
de las salidas puede ocasionar, p. ej., el arranque accidental de motores o la desconexión
de sistemas de refrigeración.
● Los bits que pertenecen al mapa de bits definido se ponen al estado lógico "0".
La llamada de la instrucción "Desactivar mapa de bits en el área de periferia" no tiene efecto
alguno si el parámetro N devuelve el valor "0".

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

N

Input

INT

I, Q, M, D, L

Número de bits que deben
desactivarse.

SA

Output

POINTER

P

Puntero al primer bit que de‐
be desactivarse.

INT

I, Q, M, D, L

Información de error

Valor de función (RET_VAL)

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

8xyy

Encontrará más información de error en "Consulte también".

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Error" := RESETP(N := 8,
SA => P#10.0);

5658

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
En el ejemplo, la instrucción desactiva 8 bits del área de periferia correspondientes a las
salidas Q10.0 a Q10.7.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Principios básicos de SCL (Página 8115)

RESETI: Desactivar área por bytes
Descripción
La instrucción "Desactivar área por bytes" pone a "0" el estado lógico de los bits de un área
definida de bytes. El punto inicial del área se define mediante el puntero del parámetro
S_BYTE. El tamaño del área se define indicando el número de bits que deben desactivarse en
el parámetro N de la instrucción.
Nota
El valor del parámetro N debe ser un múltiplo de 8 (p. ej. 8, 16, 24, etc.).
El puntero indicado en el parámetro S_BYTE debe señalar al área de memoria de la periferia
externa (P). Puesto que al área de memoria "P" se accede en formato de byte, palabra y
palabra doble, el puntero del parámetro S_BYTE debe señalar a un operando equivalente a un
valor límite de byte. Por tanto, el número de bit del puntero debe ser "0".
Nota
El estado lógico de los bits correspondientes en la memoria imagen de proceso de las salidas
(Q) se pone a "0".
La llamada de la instrucción "Desactivar área por bytes" no tiene efecto alguno si se cumple
una de las condiciones siguientes:
● El puntero del parámetro S_BYTE no señala al área de memoria de la periferia externa (P).
● El puntero del parámetro S_BYTE señala a un operando que no equivale a ningún valor
límite de byte.
● El valor del parámetro N no es un múltiplo de 8.

Programación del PLC
Manual de programación y manejo, 11/2019

5659

Instrucciones
4.2 Instrucciones

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

S_BYTE

Input

POINTER

P

Señala al primer byte del
área cuyos bits se desacti‐
van.
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

N

Input

INT

I, Q, M, D, L, P

Tamaño del área cuyos bits
se desactivan.
El área se indica mediante el
número de bits como múltiplo
de 8 (p. ej. 8, 16, 24, etc.).

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
RESETI(S_BYTE := byte_array[100],
N := 16);

En el ejemplo, la instrucción desactiva 2 bytes (16 bits) en el área de 100.0 a 101.7 del área por
bytes.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

REPL_VAL: Introducir valor sustitutivo
Descripción
La instrucción "Introducir valor sustitutivo" introduce un valor sustitutivo en el acumulador 1
(ACU 1) desde un bloque de organización de error síncrono.
Nota
La instrucción "Introducir valor sustitutivo" solo se puede llamar desde bloques de organización
de error síncrono (OB 121, OB 122).
La instrucción "Introducir valor sustitutivo" se utiliza si ya no es posible leer ningún valor de un
módulo. Tras cada acceso a dicho módulo se inicia el OB 122. Llamando la instrucción
"Introducir valor sustitutivo" es posible cargar un valor sustitutivo en el acumulador 1. La
ejecución del programa se prosigue entonces con este valor sustitutivo. La información

5660

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
necesaria para seleccionar el valor sustitutivo puede consultarse en las variables locales del
OB 122.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción:
Parámetros

Declaración

Tipo de datos

Área de memoria

Descripción

VAL

Input

DWORD

I, Q, M, D, L

Valor sustitutivo

INT

I, Q, M, D, L

Información de error

Valor de función (RET_VAL)

Parámetro RET_VAL
La tabla siguiente muestra el significado de los valores del parámetro RET_VAL:
Código de Descripción
error*
(W#16#....)
0000

Ningún error

8080

La instrucción no se ha llamado desde un OB de error síncrono.

8xyy

Encontrará más información de error en "Consulte también".

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Evaluación de errores con el parámetro de salida RET_VAL (Página 174)
Principios básicos de SCL (Página 8115)

DRUM: Materializar circuito secuencial sucesivo
Descripción
La instrucción "Materializar circuito secuencial sucesivo" ocupa los bits de salida programados
(OUT1 a OUT16) y la palabra de salida (OUT_WORD) con los valores programados del
parámetro OUT_VAL del paso respectivo. El paso en cuestión debe cumplir las condiciones de
la máscara de habilitación programada en el parámetro S_MASK mientras la instrucción
permanece en dicho paso. La instrucción pasa al paso siguiente cuando el evento de éste es
verdadero y una vez transcurrido el tiempo programado para el paso actual, o bien cuando el
valor del parámetro JOG cambia de "0" a "1". La instrucción se desactiva cuando el estado
lógico del parámetro RESET cambia a "1". Con ello, el paso actual se iguala al paso
predeterminado (DSP).

Programación del PLC
Manual de programación y manejo, 11/2019

5661

Instrucciones
4.2 Instrucciones
El tiempo de permanencia en un paso se calcula multiplicando la base de tiempo
predeterminada (DTBP) por el valor de contaje predeterminado (S_PRESET) para cada paso.
Al comienzo de un nuevo paso, este valor calculado se carga en el parámetro DCC, que
contiene el tiempo restante para el paso actual. Por ejemplo, si el valor del parámetro DTBP es
"2" y el valor predeterminado para el primer paso es "100" (100 ms), el parámetro DCC
devolverá el valor "200" (200 ms).
Un paso puede programarse con un valor de tiempo, con un evento o con ambos. Los pasos
programados con un bit de evento y el valor de tiempo "0" pasan al siguiente paso en cuanto
el estado lógico del bit de evento es "1". Los pasos programados solo con un valor de tiempo
empiezan a contar el tiempo inmediatamente. Los pasos programados con un bit de evento y
un valor de tiempo mayor que "0" empiezan a contar el tiempo en cuanto el estado lógico del
bit de evento es "1". Los bits de evento se inicializan con el estado lógico "1".
Si el circuito secuencial sucesivo se encuentra en el último paso programado (LST_STEP) y ha
transcurrido el tiempo para dicho paso, el estado lógico del parámetro Q se pone a "1". De lo
contrario, se pone a "0". Si está activado el parámetro Q, la instrucción permanece en el paso
hasta la desactivación.
En la máscara configurable (S_MASK) es posible seleccionar los distintos bits de la palabra de
salida (OUT_WORD) y activar o desactivar los bits de salida (OUT1 a OUT16) mediante los
valores de salida (OUT_VAL). Si un bit de la máscara configurable tiene el estado lógico "1",
el valor OUT_VAL activa o desactiva el bit correspondiente. Si el estado lógico de un bit de la
máscara configurable es "0", no cambia el bit respectivo. Todos los bits de la máscara
configurable de todos los 16 pasos se inicializan con el estado lógico "1".
El bit de salida del parámetro OUT1 equivale al bit menos significativo de la palabra de salida
(OUT_WORD). El bit de salida del parámetro OUT16 equivale al bit más significativo de la
palabra de salida (OUT_WORD).
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:

5662

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

RESET

Input

BOOL

I, Q, M, D, L

El estado lógico "1" indica
una condición de desactiva‐
ción.

JOG

Input

BOOL

I, Q, M, D, L

Si el estado lógico cambia de
"0" a "1", la instrucción pasa
al siguiente paso.

DRUM_EN

Input

BOOL

I, Q, M, D, L

El estado lógico "1" permite
que el circuito secuencial su‐
cesivo siga contando según
el evento y los criterios de
tiempo.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

LST_STEP

Input

BYTE

I, Q, M, D, L

Número del último paso pro‐
gramado.

EVENT(i),

Input

BOOL

I, Q, M, D, L

OUT(j),

Bit de evento (i);
El estado lógico inicial es "1".

1 ≤ i ≤ 16
Output

BOOL

I, Q, M, D, L

Bit de salida (j)

Q

Output

BOOL

I, Q, M, D, L

El estado lógico "1" indica
que ha transcurrido el tiempo
del último paso.

OUT_WORD

Output

WORD

I, Q, M, D, L, P

Dirección de palabra en la
que el circuito secuencial su‐
cesivo escribe los valores de
salida.

ERR_CODE

Output

WORD

I, Q, M, D, L, P

Información de error

JOG_HIS

Static

BOOL

I, Q, M, D, L

Bit de evolución del paráme‐
tro JOG

EOD

Static

BOOL

I, Q, M, D, L

El estado lógico "1" indica
que ha transcurrido el tiempo
del último paso.

DSP

Static

BYTE

I, Q, M, D, L, P

Paso predeterminado del cir‐
cuito secuencial sucesivo

DSC

Static

BYTE

I, Q, M, D, L, P

Paso actual del circuito se‐
cuencial sucesivo

DCC

Static

DWORD

I, Q, M, D, L, P

Valor de contaje actual del
circuito secuencial sucesivo

DTBP

Static

WORD

I, Q, M, D, L, P

Base de tiempo predetermi‐
nada del circuito secuencial
sucesivo

PrevTime

Static

TIME

I, Q, M, D, L

Hora de sistema anterior

S_PRESET

Static

ARRAY[1..16] of
WORD

I, Q, M, D, L

Valor de contaje predetermi‐
nado para cada paso [1 a 16];
1 ciclo de reloj = 1 ms.

OUT_VAL

Static

ARRAY[1..16,
0..15] of BOOL

I, Q, M, D, L

Valores de salida para cada
paso [1 a 16, 0 a 15].

S_MASK

Static

ARRAY[1..16,
0..15] of BOOL

I, Q, M, D, L

Máscara configurable para
cada paso [1 a 16, 0 a 15].
Los estados lógicos iniciales
son "1".

1 ≤ j ≤ 16

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5663

Instrucciones
4.2 Instrucciones

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
ERR_CO‐
DE*

Explicación

W#16#000
0

Ningún error

W#16#000
B

El valor del parámetro LST_STEP es menor que 1 o mayor que 16.

W#16#000
C

El valor del parámetro DSC es menor que 1 o mayor que el valor del parámetro
LST_STEP.

W#16#000
D

El valor del parámetro DSP es menor que 1 o mayor que el valor de LST_STEP.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
En el ejemplo siguiente, la instrucción pasa del paso 1 al paso 2. Los bits de salida (OUT1 a
OUT16) y la palabra de salida (OUT_WORD) se activan según la máscara configurada para el
paso 2 y los valores del parámetro OUT_VAL.
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.

SCL
"DRUM_DB"(RESET := "Tag_Reset"
JOG := "Tag_Input_Jog"
DRUM_EN := "Tag_Input_DrumEN"
LST_STEP := "Tag_Number_LastStep"
EVENT1 := "MyTag_Event_1"
EVENT2 := "MyTag_Event_2"
EVENT3 := "MyTag_Event_3"
EVENT4 := "MyTag_Event_4"
EVENT5 := "MyTag_Event_5"
EVENT6 := "MyTag_Event_6"
EVENT7 := "MyTag_Event_7"
EVENT8 := "MyTag_Event_8"
EVENT9 := "MyTag_Event_9"
EVENT10 := "MyTag_Event_10"
EVENT11 := "MyTag_Event_11"
EVENT12 := "MyTag_Event_12"
EVENT13 := "MyTag_Event_13"
EVENT14 := "MyTag_Event_14"

5664

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
SCL
EVENT15 := "MyTag_Event_15"
EVENT16 := "MyTag_Event_16"
OUT1 => "MyTag_Output_1"
OUT2 => "MyTag_Output_2"
OUT3 => "MyTag_Output_3"
OUT4 => "MyTag_Output_4"
OUT5 => "MyTag_Output_5"
OUT6 => "MyTag_Output_6"
OUT7 => "MyTag_Output_7"
OUT8 => "MyTag_Output_8"
OUT9 => "MyTag_Output_9"
OUT10 => "MyTag_Output_10"
OUT11 => "MyTag_Output_11"
OUT12 => "MyTag_Output_12"
OUT13 => "MyTag_Output_13"
OUT14 => "MyTag_Output_14"
OUT15 => "MyTag_Output_15"
OUT16 => "MyTag_Output_16"
Q => "Tag_Output_Q"
OUT_WORD => "Tag_OutputWord"
ERR_CODE => "Tag_ErrorCode");

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.

Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para asignar valores a los parámetros de
entrada:
Parámetro

Operando

Dirección

Valor

RESET

Tag_Reset

M0.0

FALSE

JOG

Tag_Input_JOG

M0.1

FALSE

DRUM_EN

Tag_Input_DrumEN

M0.2

TRUE

LST_STEP

Tag_Number_LastStep

MB1

B#16#08

EVENT2

MyTag_Event_2

M20.0

FALSE

EVENT4

MyTag_Event_4

M20.1

FALSE

EVENT6

MyTag_Event_6

M20.2

FALSE

EVENT8

MyTag_Event_8

M20.3

FALSE

EVENT10

MyTag_Event_10

M20.4

FALSE

EVENT12

MyTag_Event_12

M20.5

FALSE

EVENT14

MyTag_Event_14

M20.6

FALSE

EVENT16

MyTag_Event_16

M20.7

FALSE

Programación del PLC
Manual de programación y manejo, 11/2019

5665

Instrucciones
4.2 Instrucciones
Los siguientes valores se almacenan en el bloque de datos de instancia "DRUM_DB" de la
instrucción:

5666

Parámetro

Dirección

Valor

JOG_HIS

DBX12.0

FALSE

EOD

DBX12.1

FALSE

DSP

DBB13

W#16#0001

DSC

DBB14

W#16#0001

DCC

DBD16

DW#16#0000000A

DTBP

DBW20

W#16#0001

S_PRESET[1]

DBW26

W#16#0064

S_PRESET[2]

DBW28

W#16#00C8

OUT_VAL[1,0]

DBX58.0

TRUE

OUT_VAL[1,1]

DBX58.1

TRUE

OUT_VAL[1,2]

DBX58.2

TRUE

OUT_VAL[1,3]

DBX58.3

TRUE

OUT_VAL[1,4]

DBX58.4

TRUE

OUT_VAL[1,5]

DBX58.5

TRUE

OUT_VAL[1,6]

DBX58.6

TRUE

OUT_VAL[1,7]

DBX58.7

TRUE

OUT_VAL[1,8]

DBX59.0

TRUE

OUT_VAL[1,9]

DBX59.1

TRUE

OUT_VAL[1,10]

DBX59.2

TRUE

OUT_VAL[1,11]

DBX59.3

TRUE

OUT_VAL[1,12]

DBX59.4

TRUE

OUT_VAL[1,13]

DBX59.5

TRUE

OUT_VAL[1,14]

DBX59.6

TRUE

OUT_VAL[1,15]

DBX59.7

TRUE

OUT_VAL[2,0]

DBX60.0

FALSE

OUT_VAL[2,1]

DBX60.1

FALSE

OUT_VAL[2,2]

DBX60.2

FALSE

OUT_VAL[2,3]

DBX60.3

FALSE

OUT_VAL[2,4]

DBX60.4

FALSE

OUT_VAL[2,5]

DBX60.5

FALSE

OUT_VAL[2,6]

DBX60.6

FALSE

OUT_VAL[2,7]

DBX60.7

FALSE

OUT_VAL[2,8]

DBX61.0

FALSE

OUT_VAL[2,9]

DBX61.1

FALSE

OUT_VAL[2,10]

DBX61.2

FALSE

OUT_VAL[2,11]

DBX61.3

FALSE

OUT_VAL[2,12]

DBX61.4

FALSE

OUT_VAL[2,13]

DBX61.5

FALSE

OUT_VAL[2,14]

DBX61.6

FALSE

OUT_VAL[2,15]

DBX61.7

FALSE

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Dirección

Valor

S_MASK[2,0]

DBX92.0

FALSE

S_MASK[2,1]

DBX92.1

TRUE

S_MASK[2,2]

DBX92.2

TRUE

S_MASK[2,3]

DBX92.3

TRUE

S_MASK[2,4]

DBX92.4

TRUE

S_MASK[2,5]

DBX92.5

FALSE

S_MASK[2,6]

DBX92.6

TRUE

S_MASK[2,7]

DBX92.7

TRUE

S_MASK[2,8]

DBX93.0

FALSE

S_MASK[2,9]

DBX93.1

FALSE

S_MASK[2,10]

DBX93.2

TRUE

S_MASK[2,11]

DBX93.3

TRUE

S_MASK[2,12]

DBX93.4

TRUE

S_MASK[2,13]

DBX93.5

TRUE

S_MASK[2,14]

DBX93.6

FALSE

S_MASK[2,15]

DBX93.7

TRUE

Los parámetros de salida tienen los valores siguientes antes de ejecutarse la instrucción:
Parámetro

Operando

Dirección

Valor

Q

Tag_Output_Q

M6.0

FALSE

OUTWORD

Tag_OutputWord

MW8

W#16#FFFF

OUT1

MyTag_Output_1

M4.0

TRUE

OUT2

MyTag_Output_2

M4.1

TRUE

OUT3

MyTag_Output_3

M4.2

TRUE

OUT4

MyTag_Output_4

M4.3

TRUE

OUT5

MyTag_Output_5

M4.4

TRUE

OUT6

MyTag_Output_6

M4.5

TRUE

OUT7

MyTag_Output_7

M4.6

TRUE

OUT8

MyTag_Output_8

M4.7

TRUE

OUT9

MyTag_Output_9

M5.0

TRUE

OUT10

MyTag_Output_10

M5.1

TRUE

OUT11

MyTag_Output_11

M5.2

TRUE

OUT12

MyTag_Output_12

M5.3

TRUE

OUT13

MyTag_Output_13

M5.4

TRUE

OUT14

MyTag_Output_14

M5.5

TRUE

OUT15

MyTag_Output_15

M5.6

TRUE

OUT16

MyTag_Output_16

M5.7

TRUE

Programación del PLC
Manual de programación y manejo, 11/2019

5667

Instrucciones
4.2 Instrucciones

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Dirección

Valor

OUT1

MyTag_Output_1

M4.0

TRUE

OUT2

MyTag_Output_2

M4.1

FALSE

OUT3

MyTag_Output_3

M4.2

FALSE

OUT4

MyTag_Output_4

M4.3

FALSE

OUT5

MyTag_Output_5

M4.4

FALSE

OUT6

MyTag_Output_6

M4.5

TRUE

OUT7

MyTag_Output_7

M4.6

FALSE

OUT8

MyTag_Output_8

M4.7

FALSE

OUT9

MyTag_Output_9

M5.0

TRUE

OUT10

MyTag_Output_10

M5.1

TRUE

OUT11

MyTag_Output_11

M5.2

FALSE

OUT12

MyTag_Output_12

M5.3

FALSE

OUT13

MyTag_Output_13

M5.4

FALSE

OUT14

MyTag_Output_14

M5.5

FALSE

OUT15

MyTag_Output_15

M5.6

TRUE

OUT16

MyTag_Output_16

M5.7

FALSE

Q

Tag_Output_Q

M6.0

FALSE

OUTWORD

Tag_OutputWord

MW8

W#16#4321

ERR_CODE

Tag_ErrorCode

MW10

W#16#0000

Los siguientes valores se modifican en el bloque de datos de instancia "DRUM_DB" de la
instrucción después de su ejecución:
Parámetro

Dirección

Valor

JOG_HIS

DBX12.0

FALSE

EOD

DBX12.1

FALSE

DSC

DBB14

W#16#0002

DCC

DBD16

DW#16#000000C8

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Principios básicos de SCL (Página 8115)

5668

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

DRUM_X: Materializar circuito secuencial sucesivo
Descripción
La instrucción "Materializar circuito secuencial sucesivo" permite materializar un circuito
secuencial sucesivo con 16 pasos como máximo. El número del primer paso se define con el
parámetro DSP. El número del último paso se predetermina con el parámetro LST_STEP.
En cada paso se escriben todos los 16 bits de salida OUT0 a OUT15 y el parámetro de salida
OUT_WORD (que contiene los bits de salida). A un bit de salida se asigna bien sea el bit
correspondiente del campo predefinido OUT_VAL, o bien el bit de salida del paso anterior. El
valor que se asigne dependerá de la ocupación de los bits de máscara en el parámetro
S_MASK.
Nota
El ajuste predeterminado de los bits de máscara es 0. Para modificar el ajuste actual de uno
o varios bits de máscara, realice el cambio en el bloque de datos de instancia.
La instrucción "Materializar circuito secuencial sucesivo" pasa al siguiente paso cuando se
produce un flanco de señal ascendente en el parámetro JOG. Si la instrucción ya se encuentra
en el último paso y se produce un flanco ascendente en el parámetro JOG, se activan las
variables Q y EOD. En este caso, el parámetro DCC se pone al valor 0. La instrucción
permanece en el último paso hasta que el parámetro RESET se pone al valor "1".
Además, también se puede permitir la transición al paso siguiente en función del tiempo. Para
ello se debe poner al valor "1" el parámetro DRUM_EN. La transición al paso siguiente tiene
lugar si está activado el bit de evento (EVENTi) correspondiente al paso actual y si ha
transcurrido el tiempo predeterminado para el paso actual. El tiempo necesario para un paso
resulta de la multiplicación de la base de tiempo (DTBP) por el factor de tiempo válido para el
paso actual (S_PRESET).
Nota
El tiempo de ejecución restante en el paso actual (DCC) se reduce únicamente si está activado
el bit de evento correspondiente (EVENTi).
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".
Si, al llamar la instrucción, el parámetro RESET tiene el valor "1", el circuito secuencial
sucesivo pasará al paso cuyo número se ha asignado al parámetro DSP.
Un paso puede programarse con un valor de tiempo, con un evento o con ambos. Los pasos
programados con un bit de evento y el valor de tiempo "0" pasan al siguiente paso en cuanto
el estado lógico del bit de evento es "1". Los pasos programados solo con un valor de tiempo
empiezan a contar el tiempo inmediatamente. Los pasos programados con un bit de evento y
un valor de tiempo mayor que "0" empiezan a contar el tiempo en cuanto el estado lógico del
bit de evento es "1".

Programación del PLC
Manual de programación y manejo, 11/2019

5669

Instrucciones
4.2 Instrucciones
El circuito secuencial sucesivo también se puede conmutar en progresión en todo momento a
través del valor del parámetro JOG.
En la primera llamada de la instrucción, el parámetro RESET se debe poner a 1.
Si el circuito secuencial se encuentra en el último paso y ha transcurrido el tiempo de ejecución
predefinido para este paso, se activan los parámetros Q y EOD. La instrucción permanece en
el último paso hasta que el parámetro RESET adopte el valor "1".
Esta instrucción se ejecuta solo en los estados operativos ARRANQUE y RUN.
El sistema operativo inicializa la instrucción "Materializar circuito secuencial sucesivo" cuando
se efectúa un arranque en frío. La instrucción no se inicializa en caso de un rearranque
completo (en caliente). Si la instrucción "Materializar circuito secuencial sucesivo" debe
inicializarse tras un rearranque completo (en caliente), es preciso llamarla en el OB 100 con el
valor "1" en el parámetro RESET.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

RESET

Input

BOOL

I, Q, M, D, L

El estado lógico "1" desactiva
el circuito secuencial. En la
primera llamada de la instruc‐
ción, el parámetro RESET se
debe poner a "1".

JOG

Input

BOOL

I, Q, M, D, L

Un flanco de señal ascenden‐
te (con respecto a la última
llamada) provoca la transi‐
ción al paso siguiente, siem‐
pre que el circuito secuencial
no se encuentre aún en el úl‐
timo paso. La transición tiene
lugar independientemente
del valor asignado al paráme‐
tro DRUM_EN.

DRUM_EN

Input

BOOL

I, Q, M, D, L

Parámetro de control que de‐
termina si se puede realizar
una transición al paso si‐
guiente en función del tiem‐
po. Si el valor es "1", es posi‐
ble una transición en función
del tiempo.

LST_STEP

Input

BYTE

I, Q, M, D, L

Número del último paso
Los valores admisibles son 1
a 16.

EVENTi,

Input

BOOL

I, Q, M, D, L

Bit de evento n.º i (pertenece
al paso i)

Output

BOOL

I, Q, M, D, L

Bit de salida n.º j (idéntico al
bit n.º j de OUT_WORD)

1 ≤ i ≤ 16
OUTj,
0 ≤ j ≤ 15

5670

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

Q

Output

BOOL

I, Q, M, D, L

Parámetro de estado que in‐
dica si ha transcurrido el tiem‐
po predefinido por el usuario
para la ejecución del último
paso.

OUT_WORD

Output

WORD

I, Q, M, D, L, P

Bits de salida resumidos en
una variable

ERR_CODE

Output

WORD

I, Q, M, D, L, P

Información de error

JOG_HIS

Static

BOOL

I, Q, M, D, L

Irrelevante para el usuario
(parámetro de entrada JOG
de la llamada anterior)

EOD

Static

BOOL

I, Q, M, D, L

Idéntico al parámetro de sali‐
da Q

DSP

Static

BYTE

I, Q, M, D, L, P

Número del primer paso
Los valores admisibles son 1
a 16.

DSC

Static

BYTE

I, Q, M, D, L, P

Número del paso actual

DCC

Static

DWORD

I, Q, M, D, L, P

Tiempo de ejecución restan‐
te del paso actual, indicado
en milisegundos (ms) (rele‐
vante solo si DRUM_EN = 1 y
el bit de evento correspon‐
diente = 1)

DTBP

Static

WORD

I, Q, M, D, L, P

Base de tiempo en milisegun‐
dos (ms) válida para todos
los pasos

PREV_TIME

Static

DWORD

I, Q, M, D, L

(Irrelevante para el usuario:
hora de sistema de la llama‐
da anterior)

S_PRESET

Static

ARRAY of WORD

I, Q, M, D, L

Campo unidimensional con
los factores de tiempo para
cada paso.
Selección recomendada de
índices: [1 a 16].
En este caso, S_PRESET [x]
contiene el factor de tiempo
del paso x.

Programación del PLC
Manual de programación y manejo, 11/2019

5671

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

OUT_VAL

Static

ARRAY of BOOL

I, Q, M, D, L

Campo bidimensional con
los valores que deben emitir‐
se en cada paso, a no ser
que se hayan inhibido vía
S_MASK.
Selección recomendada de
índices: [1 a 16, 0 a 15]. En
este caso, OUT_VAL [x, y]
contiene el valor asignado al
bit de salida OUTy en el paso
x.

S_MASK

Static

ARRAY of BOOL

I, Q, M, D, L

Campo bidimensional con
los bits de máscara para ca‐
da paso.
Selección recomendada de
índices: [1 a 16, 0 a 15]. En
este caso, S_MASK [x, y]
contiene el bit de máscara
para el valor "y"-ésimo que
debe emitirse en el paso x.
Significado de los bits de
máscara:
● 0: el valor
correspondiente del paso
anterior se asigna al
respectivo bit de salida
● 1: el valor
correspondiente de
OUT_VAL se asigna al
respectivo bit de salida.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
ERR_CO‐
DE*
(W#16#...)

Explicación

0000

Ningún error

8081

Valor no admisible en el parámetro LST_STEP

8082

Valor no admisible en DSC

8083

Valor no admisible en DSP

8084

El producto DCC = DTBP * S_PRESET[DSC] excede el valor 2**31-1 (aprox. 24,86 días).

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

5672

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Ejemplo
En el ejemplo siguiente, la instrucción pasa del paso 1 al paso 2. Los bits de salida (OUT0 a
OUT15) y la palabra de salida (OUT_WORD) se activan según la máscara configurada para el
paso 2 y los valores del parámetro OUT_VAL.
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.

SCL
"DRUM_DB"(RESET := "Tag_Reset"
JOG := "Tag_Input_Jog"
DRUM_EN := "Tag_Input_DrumEN"
LST_STEP := "Tag_Number_LastStep"
EVENT1 := "MyTag_Event_1"
EVENT2 := "MyTag_Event_2"
EVENT3 := "MyTag_Event_3"
EVENT4 := "MyTag_Event_4"
EVENT5 := "MyTag_Event_5"
EVENT6 := "MyTag_Event_6"
EVENT7 := "MyTag_Event_7"
EVENT8 := "MyTag_Event_8"
EVENT9 := "MyTag_Event_9"
EVENT10 := "MyTag_Event_10"
EVENT11 := "MyTag_Event_11"
EVENT12 := "MyTag_Event_12"
EVENT13 := "MyTag_Event_13"
EVENT14 := "MyTag_Event_14"
EVENT15 := "MyTag_Event_15"
EVENT16 := "MyTag_Event_16"
OUT0 => "MyTag_Output_0"
OUT1 => "MyTag_Output_1"
OUT2 => "MyTag_Output_2"
OUT3 => "MyTag_Output_3"
OUT4 => "MyTag_Output_4"
OUT5 => "MyTag_Output_5"
OUT6 => "MyTag_Output_6"
OUT7 => "MyTag_Output_7"
OUT8 => "MyTag_Output_8"
OUT9 => "MyTag_Output_9"
OUT10 => "MyTag_Output_10"
OUT11 => "MyTag_Output_11"
OUT12 => "MyTag_Output_12"
OUT13 => "MyTag_Output_13"
OUT14 => "MyTag_Output_14"

Programación del PLC
Manual de programación y manejo, 11/2019

5673

Instrucciones
4.2 Instrucciones
SCL
OUT15 => "MyTag_Output_15"
Q => "Tag_Output_Q"
OUT_WORD => "Tag_OutputWord"
ERR_CODE => "Tag_ErrorCode");

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.

Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para asignar valores a los parámetros de
entrada:
Parámetro

Operando

Dirección

Valor

RESET

Tag_Reset

M0.0

FALSE

JOG

Tag_Input_JOG

M0.1

FALSE

DRUM_EN

Tag_Input_Drum_EN

M0.2

TRUE

LST_STEP

Tag_Number_LastStep

MB1

B#16#08

EVENT2

MyTag_Event_2

M20.0

FALSE

EVENT4

MyTag_Event_4

M20.1

FALSE

EVENT6

MyTag_Event_6

M20.2

FALSE

EVENT8

MyTag_Event_8

M20.3

FALSE

EVENT10

MyTag_Event_10

M20.4

FALSE

EVENT12

MyTag_Event_12

M20.5

FALSE

EVENT14

MyTag_Event_14

M20.6

FALSE

EVENT16

MyTag_Event_16

M20.7

FALSE

Los siguientes valores se almacenan en el bloque de datos de instancia "DRUM_X_DB" de la
instrucción:
Parámetro

5674

Dirección

Valor

JOG_HIS

DBX12.0

FALSE

EOD

DBX12.1

FALSE

DSP

DBB13

W#16#0001

DSC

DBB14

W#16#0001

DCC

DBD16

DW#16#0000000A

DTBP

DBW20

W#16#0001

S_PRESET[1]

DBW26

W#16#0064

S_PRESET[2]

DBW28

W#16#00C8

OUT_VAL[1,0]

DBX58.0

TRUE

OUT_VAL[1,1]

DBX58.1

TRUE

OUT_VAL[1,2]

DBX58.2

TRUE

OUT_VAL[1,3]

DBX58.3

TRUE

OUT_VAL[1,4]

DBX58.4

TRUE

OUT_VAL[1,5]

DBX58.5

TRUE

OUT_VAL[1,6]

DBX58.6

TRUE

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Dirección

Valor

OUT_VAL[1,7]

DBX58.7

TRUE

OUT_VAL[1,8]

DBX59.0

TRUE

OUT_VAL[1,9]

DBX59.1

TRUE

OUT_VAL[1,10]

DBX59.2

TRUE

OUT_VAL[1,11]

DBX59.3

TRUE

OUT_VAL[1,12]

DBX59.4

TRUE

OUT_VAL[1,13]

DBX59.5

TRUE

OUT_VAL[1,14]

DBX59.6

TRUE

OUT_VAL[1,15]

DBX59.7

TRUE

OUT_VAL[2,0]

DBX60.0

FALSE

OUT_VAL[2,1]

DBX60.1

FALSE

OUT_VAL[2,2]

DBX60.2

FALSE

OUT_VAL[2,3]

DBX60.3

FALSE

OUT_VAL[2,4]

DBX60.4

FALSE

OUT_VAL[2,5]

DBX60.5

FALSE

OUT_VAL[2,6]

DBX60.6

FALSE

OUT_VAL[2,7]

DBX60.7

FALSE

OUT_VAL[2,8]

DBX61.0

FALSE

OUT_VAL[2,9]

DBX61.1

FALSE

OUT_VAL[2,10]

DBX61.2

FALSE

OUT_VAL[2,11]

DBX61.3

FALSE

OUT_VAL[2,12]

DBX61.4

FALSE

OUT_VAL[2,13]

DBX61.5

FALSE

OUT_VAL[2,14]

DBX61.6

FALSE

OUT_VAL[2,15]

DBX61.7

FALSE

S_MASK[2,0]

DBX92.0

FALSE

S_MASK[2,1]

DBX92.1

TRUE

S_MASK[2,2]

DBX92.2

TRUE

S_MASK[2,3]

DBX92.3

TRUE

S_MASK[2,4]

DBX92.4

TRUE

S_MASK[2,5]

DBX92.5

FALSE

S_MASK[2,6]

DBX92.6

TRUE

S_MASK[2,7]

DBX92.7

TRUE

S_MASK[2,8]

DBX93.0

FALSE

S_MASK[2,9]

DBX93.1

FALSE

S_MASK[2,10]

DBX93.2

TRUE

S_MASK[2,11]

DBX93.3

TRUE

S_MASK[2,12]

DBX93.4

TRUE

S_MASK[2,13]

DBX93.5

TRUE

S_MASK[2,14]

DBX93.6

FALSE

S_MASK[2,15]

DBX93.7

TRUE

Programación del PLC
Manual de programación y manejo, 11/2019

5675

Instrucciones
4.2 Instrucciones
Los parámetros de salida tienen los valores siguientes antes de ejecutarse la instrucción:
Parámetro

Operando

Dirección

Valor

Q

Tag_Output_Q

M6.0

FALSE

OUTWORD

Tag_OutputWord

MW8

W#16#FFFF

OUT0

MyTag_Output_0

M4.0

TRUE

OUT1

MyTag_Output_1

M4.1

TRUE

OUT2

MyTag_Output_2

M4.2

TRUE

OUT3

MyTag_Output_3

M4.3

TRUE

OUT4

MyTag_Output_4

M4.4

TRUE

OUT5

MyTag_Output_5

M4.5

TRUE

OUT6

MyTag_Output_6

M4.6

TRUE

OUT7

MyTag_Output_7

M4.7

TRUE

OUT8

MyTag_Output_8

M5.0

TRUE

OUT9

MyTag_Output_9

M5.1

TRUE

OUT10

MyTag_Output_10

M5.2

TRUE

OUT11

MyTag_Output_11

M5.3

TRUE

OUT12

MyTag_Output_12

M5.4

TRUE

OUT13

MyTag_Output_13

M5.5

TRUE

OUT14

MyTag_Output_14

M5.6

TRUE

OUT15

MyTag_Output_15

M5.7

TRUE

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:

5676

Parámetro

Operando

Dirección

Valor

OUT0

MyTag_Output_0

M4.0

TRUE

OUT1

MyTag_Output_1

M4.1

FALSE

OUT2

MyTag_Output_2

M4.2

FALSE

OUT3

MyTag_Output_3

M4.3

FALSE

OUT4

MyTag_Output_4

M4.4

FALSE

OUT5

MyTag_Output_5

M4.5

TRUE

OUT6

MyTag_Output_6

M4.6

FALSE

OUT7

MyTag_Output_7

M4.7

FALSE

OUT8

MyTag_Output_8

M5.0

TRUE

OUT9

MyTag_Output_9

M5.1

TRUE

OUT10

MyTag_Output_10

M5.2

FALSE

OUT11

MyTag_Output_11

M5.3

FALSE

OUT12

MyTag_Output_12

M5.4

FALSE

OUT13

MyTag_Output_13

M5.5

FALSE

OUT14

MyTag_Output_14

M5.6

TRUE

OUT15

MyTag_Output_15

M5.7

FALSE

Q

Tag_Output_Q

M6.0

FALSE

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Operando

Dirección

Valor

OUTWORD

Tag_OutputWord

MW8

W#16#4321

ERR_CODE

Tag_ErrorCode

MW10

W#16#0000

Los siguientes valores se almacenan en el bloque de datos de instancia "DRUM_X_DB" de la
instrucción:
Parámetro

Dirección

Valor

JOG_HIS

DBX12.0

FALSE

EOD

DBX12.1

FALSE

DSC

DBB14

W#16#0002

DCC

DBD16

DW#16#000000C8

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Principios básicos de SCL (Página 8115)

DCAT: Alarma de tiempo para control discreto
Descripción
La instrucción "Alarma de tiempo para control discreto" acumula el tiempo desde el instante en
el que el parámetro CMD da la orden de abrir o cerrar. El tiempo se acumula hasta excederse
el tiempo predeterminado (PT) o hasta recibir la notificación de que el dispositivo se ha cerrado
o abierto dentro del tiempo prescrito (O_FB o C_FB). Si se excede el tiempo predeterminado
antes de recibirse la notificación de que se ha abierto o cerrado el dispositivo, se activa la
alarma correspondiente. Si el estado lógico de la entrada de la orden cambia antes del tiempo
predeterminado, se reinicia el tiempo.
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".
La instrucción "Alarma de tiempo para control discreto" tiene las reacciones siguientes en las
condiciones de entrada:
● Si el estado lógico del parámetro CMD cambia de "0" a "1", esto tiene los efectos siguientes
en los estados lógicos de los parámetros Q, CMD_HIS, ET, OA y CA:
– Los parámetros Q y CMD_HIS se ponen a "1"
– Los parámetros ET, OA y CA se ponen a "0"
● Si el estado lógico del parámetro CMD cambia de "1" a "0", los parámetros Q, ET, OA, CA
y CMD_HIS se ponen a "0".

Programación del PLC
Manual de programación y manejo, 11/2019

5677

Instrucciones
4.2 Instrucciones
● Si los parámetros CMD y CMD_HIS tienen el estado lógico "1" y el parámetro O_FB se pone
a "0", la diferencia de tiempo (ms) desde la última ejecución de la instrucción se suma al
valor del parámetro ET. Si el valor del parámetro ET excede el del parámetro PT, el estado
lógico del parámetro OA se pone a "1". Si el valor del parámetro ET no excede el del
parámetro PT, el estado lógico del parámetro OA se pone a "0". El valor del parámetro
CMD_HIS se pone al del parámetro CMD.
● Si los estados lógicos de los parámetros CMD, CMD_HIS y O_FB están a "1" y el parámetro
C_FB devuelve el valor "0", el estado lógico del parámetro OA se pone a "0". El valor del
parámetro ET se pone al del parámetro PT. Si el estado lógico del parámetro O_FB cambia
a "0", se activa la alarma en la siguiente ejecución de la instrucción. El valor del parámetro
CMD_HIS se pone al del parámetro CMD.
● Si los parámetros CMD, CMD_HIS y C_FB devuelven "0", la diferencia de tiempo (ms)
desde la última ejecución de la instrucción se suma al valor del parámetro ET. Si el valor del
parámetro ET excede el del parámetro PT, el estado lógico del parámetro CA se pone a "1".
Si no se excede el valor del parámetro PT, el parámetro CA devuelve el estado lógico "0".
El valor del parámetro CMD_HIS se pone al del parámetro CMD.
● Si los parámetros CMD, CMD_HIS y O_FB devuelven el estado lógico "0" y el parámetro
C_FB está a "1", el parámetro CA se pone a "0". El valor del parámetro ET se pone al del
parámetro PT. Si el estado lógico del parámetro C_FB cambia a "0", se activa la alarma en
la siguiente ejecución de la instrucción. El valor del parámetro CMD_HIS se pone al del
parámetro CMD.
● Si los parámetros O_FB y C_FB devuelven simultáneamente el estado lógico "1", los
estados lógicos de ambas salidas de alarma se ponen a "1".
La instrucción "Alarma de tiempo para control discreto" no devuelve información de error.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CMD

Input

BOOL

I, Q, M, D, L

El estado lógico "0" da la or‐
den de "Cerrar".
El estado lógico "1" da la or‐
den de "Abrir".

5678

O_FB

Input

BOOL

I, Q, M, D, L

Entrada de realimentación al
abrir

C_FB

Input

BOOL

I, Q, M, D, L

Entrada de realimentación al
cerrar

Q

Output

BOOL

I, Q, M, D, L

Indica el estado del paráme‐
tro CMD

OA

Output

BOOL

I, Q, M, D, L

Salida de alarma al abrir

CA

Output

BOOL

I, Q, M, D, L

Salida de alarma al cerrar

ET

Static

DINT

I, Q, M, D, L

Tiempo actual transcurrido;
un ciclo de reloj = 1 ms.

PT

Static

DINT

I, Q, M, D, L

Valor de tiempo predetermi‐
nado; un ciclo de reloj = 1 ms.

PREV_TIME

Static

DWORD

I, Q, M, D, L

Hora de sistema anterior

CMD_HIS

Static

BOOL

I, Q, M, D, L

Bit de evolución de CMD

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Encontrará más información sobre los tipos de datos válidos en "Consulte también".
Los parámetros estáticos no son visibles al efectuar la llamada de la instrucción en el
programa. Estos se almacenan en la instancia de la instrucción.

Ejemplo
En el ejemplo siguiente, el parámetro CMD cambia de "0" a "1". Una vez ejecutada la
instrucción, el parámetro Q se pone a "1" y las dos salidas de alarma OA y CA se ponen a "0".
El parámetro CMD_HIS del bloque de datos de instancia se pone a "1" y el parámetro ET se
pone a "0".
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.

SCL
"DCAT_DB"(CMD := "Tag_Input_CMD",
O_FB := "Tag_Input_O_FB",
C_FB := "Tag_Input_C_FB",
Q => "Tag_Output_Q",
OA => "Tag_Output_OA",
CA => "Tag_Output_CA");

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.
Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada y salida:
Parámetro

Operando

Valor

CMD

Tag_Input_CMD

TRUE

O_FB

Tag_Input_O_FB

FALSE

C_FB

Tag_Input_C_FB

FALSE

Q

Tag_Output_Q

FALSE

OA

Tag_Output_OA

FALSE

CA

Tag_Output_CA

FALSE

Los siguientes valores se almacenan en el bloque de datos de instancia "DCAT_DB" de la
instrucción:
Parámetro

Dirección

Valor

ET

DBD4

L#12

PT

DBD8

L#222

CMD_HIS

DBX16.0

FALSE

Después de la ejecución

Programación del PLC
Manual de programación y manejo, 11/2019

5679

Instrucciones
4.2 Instrucciones
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Valor

Q

Tag_Output_Q

TRUE

OA

Tag_Output_OA

FALSE

CA

Tag_Output_CA

FALSE

Los siguientes valores se almacenan en el bloque de datos de instancia "DCAT_DB" de la
instrucción:
Parámetro

Dirección

Valor

ET

DBD4

L#0

CMD_HIS

DBX16.0

TRUE

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

MCAT: Alarma de tiempo para control del motor
Descripción
La instrucción "Alarma de tiempo para control del motor" acumula el tiempo desde el instante
en el que se activa una de las entradas de comando (abrir o cerrar). El tiempo se acumula hasta
que se excede el tiempo predeterminado o hasta que la entrada de realimentación
correspondiente indica que el dispositivo ha ejecutado la operación solicitada dentro del
tiempo prescrito. Si se excede el tiempo predeterminado antes de recibir realimentación, se
activa la alarma correspondiente.
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".

Ejecución de la instrucción "Alarma de tiempo para control del motor"
La tabla siguiente muestra las reacciones de la instrucción "Alarma de tiempo para control del
motor" a las distintas condiciones de entrada:
Parámetros de entrada

Parámetros de salida

ET

O_H
IS

C_H
IS

O_C
MD

C_C
MD

S_C
MD

O_F
B

C_F
B

OO

CO

OA

CA

ET

O_H
IS

C_HI Q
S

Estado

X

1

1

X

X

X

X

X

0

0

1

1

PT

0

0

0

Alarma

X

X

X

X

X

X

1

1

0

0

1

1

PT

0

0

0

Alarma

5680

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetros de entrada

Parámetros de salida

X

X

X

X

X

1

X

X

0

0

0

0

X

0

0

1

Stop

X

X

X

1

1

X

X

X

0

0

0

0

X

0

0

1

Stop

X

0

X

1

0

0

X

X

1

0

0

0

0

1

0

1

Empezar a
abrir

<PT

1

0

X

0

0

0

X

1

0

0

0

INC

1

0

1

Abrir

X

1

0

X

0

0

1

0

0

0

0

0

PT

1

0

1

Abierto

>=
PT

1

0

X

0

0

0

X

0

0

1

0

PT

1

0

0

Abrir alarma

X

X

0

0

1

0

X

X

0

1

0

0

0

0

1

1

Empezar a
cerrar

< PT 0

1

0

X

0

X

0

0

1

0

0

INC

0

1

1

Cerrar

X

0

1

0

X

0

0

1

0

0

0

0

PT

0

1

1

Cerrado

>=
PT

0

1

0

X

0

X

0

0

0

0

1

PT

0

1

0

Cerrar alar‐
ma

X

0

0

0

0

0

X

X

0

0

0

0

X

0

0

1

Parado

Leyenda:
INC

Sumar a ET la diferencia de tiempo (en ms) desde la última ejecución del FB

PT

PT se pone al mismo valor que ET

X

No aplicable

< PT

ET < PT

>= PT

ET >= PT

Si los parámetros de entrada O_HIS y C_HIS tienen el estado lógico "1", se ponen inmediatamente al estado lógico "0". En
este caso se aplica la última fila de la tabla mencionada más arriba (X). Puesto que por este motivo no es posible comprobar
si los parámetros de entrada O_HIS y C_HIS tienen el estado lógico "1", en este caso se asigna el siguiente valor a los
parámetros de salida:
OO = FALSE
CO = FALSE
OA = FALSE
CA = FALSE
ET = PT
Q = TRUE

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

O_CMD

Input

BOOL

I, Q, M, D, L

Entrada de la orden "Abrir"

C_CMD

Input

BOOL

I, Q, M, D, L

Entrada de la orden "Cerrar"

S_CMD

Input

BOOL

I, Q, M, D, L

Entrada de la orden "Parar"

O_FB

Input

BOOL

I, Q, M, D, L

Entrada de realimentación al
abrir

C_FB

Input

BOOL

I, Q, M, D, L

Entrada de realimentación al
cerrar

OO

Output

BOOL

I, Q, M, D, L

Salida "Abrir"

Programación del PLC
Manual de programación y manejo, 11/2019

5681

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CO

Output

BOOL

I, Q, M, D, L

Salida "Cerrar"

OA

Output

BOOL

I, Q, M, D, L

Salida de alarma al abrir

CA

Output

BOOL

I, Q, M, D, L

Salida de alarma al cerrar

Q

Output

BOOL

I, Q, M, D, L

El estado lógico "0" indica
una condición de error.

ET

Static

DINT

I, Q, M, D, L

Tiempo actual transcurrido;
un ciclo de reloj = 1 ms

PT

Static

DINT

I, Q, M, D, L

Valor de tiempo predetermi‐
nado; un ciclo de reloj = 1 ms

PREV_TIME

Static

DWORD

I, Q, M, D, L

Hora de sistema anterior

O_HIS

Static

BOOL

I, Q, M, D, L

Bit de evolución "Abrir"

C_HIS

Static

BOOL

I, Q, M, D, L

Bit de evolución "Cerrar"

Encontrará más información sobre los tipos de datos válidos en "Consulte también".
Los parámetros estáticos no son visibles al efectuar la llamada de la instrucción en el
programa. Estos se almacenan en la instancia de la instrucción.

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.

SCL
"MCAT_DB"(O_CMD := "Tag_Iput_O_CMD",
C_CMD := "Tag_Input_C_CMD",
S_CMD := "Tag_Input_S_CMD",
O_FB := "Tag_Input_O_FB",
C_FB := "Tag_Input_C_FB",
OO => "Tag_OutputOpen",
CO => "Tag_OutputClosed",
OA => "Tag_Output_OA",
CA => "Tag_Output_CA",
Q => "Tag_Output_Q");

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.
Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada y salida:

5682

Parámetro

Operando

Valor

O_CMD

Tag_Input_O_CMD

TRUE

C_CMD

Tag_Input_C_CMD

FALSE

S_CMD

Tag_Input_S_CMD

FALSE

O_FB

Tag_Input_O_FB

FALSE

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Operando

Valor

C_FB

Tag_Input_C_FB

FALSE

OO

Tag_OutputOpen

FALSE

CO

Tag_OutputClosed

FALSE

OA

Tag_Output_OA

FALSE

CA

Tag_Output_CA

FALSE

Q

Tag_Output_Q

FALSE

Los siguientes valores se almacenan en el bloque de datos de instancia "MCAT_DB" de la
instrucción:
Parámetro

Dirección

Valor

ET

DBD4

L#2

PT

DBD8

L#22

O_HIS

DBX16.0

TRUE

C_HIS

DBX16.1

FALSE

Después de la ejecución
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Valor

OO

Tag_OutputOpen

TRUE

CO

Tag_OutputClosed

FALSE

OA

Tag_Output_OA

FALSE

CA

Tag_Output_CA

FALSE

Q

Tag_Output_Q

TRUE

Los siguientes valores se almacenan en el bloque de datos de instancia "MCAT_DB" de la
instrucción:
Parámetro

Dirección

Valor

ET

DBD4

L#0

O_HIS

DBX16.0

TRUE

CMD_HIS

DBX16.1

FALSE

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

Programación del PLC
Manual de programación y manejo, 11/2019

5683

Instrucciones
4.2 Instrucciones

IMC: Comparar bits de entrada con bits de una máscara
Descripción
La instrucción "Comparar bits de entrada con bits de una máscara" compara el estado lógico
de hasta 16 bits de entrada programados (IN_BIT0 a IN_BIT15) con el bit correspondiente de
una máscara. Es posible programar como máximo 16 pasos con máscaras. El valor del
parámetro IN_BIT0 se compara con el valor de la máscara CMP_VAL[x,0], siendo "x" el
número del paso. El número del paso de la máscara utilizada para la comparación se define en
el parámetro CMP_STEP. De esta misma manera se comparan todos los valores
programados. Los bits de entrada no programados o los bits no programados de la máscara
tienen el estado lógico predeterminado FALSE.
Si se encuentra una correspondencia al realizar la comparación, el estado lógico del parámetro
OUT se pone a "1". De lo contrario, el parámetro OUT se pone a "0".
Si el valor del parámetro CMP_STEP es mayor que 15, no se ejecuta la instrucción. En el
parámetro ERR_CODE se emite un mensaje de error.
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:

5684

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN_BIT0

Input

BOOL

I, Q, M, D, L

El bit de entrada 0 se compa‐
ra con el bit 0 de la máscara.

IN_BIT1

Input

BOOL

I, Q, M, D, L

El bit de entrada 1 se compa‐
ra con el bit 1 de la máscara.

IN_BIT2

Input

BOOL

I, Q, M, D, L

El bit de entrada 2 se compa‐
ra con el bit 2 de la máscara.

IN_BIT3

Input

BOOL

I, Q, M, D, L

El bit de entrada 3 se compa‐
ra con el bit 3 de la máscara.

IN_BIT4

Input

BOOL

I, Q, M, D, L

El bit de entrada 4 se compa‐
ra con el bit 4 de la máscara.

IN_BIT5

Input

BOOL

I, Q, M, D, L

El bit de entrada 5 se compa‐
ra con el bit 5 de la máscara.

IN_BIT6

Input

BOOL

I, Q, M, D, L

El bit de entrada 6 se compa‐
ra con el bit 6 de la máscara.

IN_BIT7

Input

BOOL

I, Q, M, D, L

El bit de entrada 7 se compa‐
ra con el bit 7 de la máscara.

IN_BIT8

Input

BOOL

I, Q, M, D, L

El bit de entrada 8 se compa‐
ra con el bit 8 de la máscara.

IN_BIT9

Input

BOOL

I, Q, M, D, L

El bit de entrada 9 se compa‐
ra con el bit 9 de la máscara.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN_BIT10

Input

BOOL

I, Q, M, D, L

El bit de entrada 10 se com‐
para con el bit 10 de la más‐
cara.

IN_BIT11

Input

BOOL

I, Q, M, D, L

El bit de entrada 11 se com‐
para con el bit 11 de la más‐
cara.

IN_BIT12

Input

BOOL

I, Q, M, D, L

El bit de entrada 12 se com‐
para con el bit 12 de la más‐
cara.

IN_BIT13

Input

BOOL

I, Q, M, D, L

El bit de entrada 13 se com‐
para con el bit 13 de la más‐
cara.

IN_BIT14

Input

BOOL

I, Q, M, D, L

El bit de entrada 14 se com‐
para con el bit 14 de la más‐
cara.

IN_BIT15

Input

BOOL

I, Q, M, D, L

El bit de entrada 15 se com‐
para con el bit 15 de la más‐
cara.

CMP_STEP

Input

BYTE

I, Q, M, D, L, P

Número de paso de la más‐
cara con la que se compara.

OUT

Output

BOOL

I, Q, M, D, L

El estado lógico "1" indica
que se ha encontrado una
correspondencia.
El estado lógico "0" indica
que no se ha encontrado nin‐
guna correspondencia.

ERR_CODE

Output

WORD

I, Q, M, D, L, P

CMP_VAL

Static

ARRAY OF BOOL I, Q, M, D, L

Información de error
Máscaras de comparación [0
a 15, 0 a 15]: El primer núme‐
ro del índice es el número del
paso y, el segundo, el núme‐
ro de bit de la máscara.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".
Los parámetros estáticos no son visibles al efectuar la llamada de la instrucción en el
programa. Estos se almacenan en la instancia de la instrucción.

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

000A

El valor del parámetro CMP_STEP es mayor que 15.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Programación del PLC
Manual de programación y manejo, 11/2019

5685

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Principios básicos de SCL (Página 8115)

SMC: Barrido de matriz
Descripción
La instrucción "Barrido de matriz" compara el estado lógico de hasta 16 bits de entrada
programados (IN_BIT0 a IN_BIT15) con los bits correspondientes de las máscaras de
comparación de cada paso. La ejecución empieza por el paso 1 y continúa hasta el último paso
programado (LAST) o hasta que se encuentre una correspondencia. El bit de entrada del
parámetro IN_BIT0 se compara con el valor de la máscara CMP_VAL[x,0], siendo "x" el
número de paso. De esta misma manera se comparan todos los valores programados. Si se
encuentra una correspondencia, el estado lógico del parámetro OUT se pone a "1" y el número
de paso se escribe con la máscara correspondiente en el parámetro OUT_STEP. Los bits de
entrada no programados o los bits no programados de la máscara tienen el estado lógico
predeterminado FALSE. Si varios pasos tienen una máscara equivalente, se indica solo la
primera correspondencia encontrada en el parámetro OUT_STEP. Si no se encuentra ninguna
correspondencia, el estado lógico del parámetro OUT se pone a "0". En este caso, el valor del
parámetro OUT_STEP excede en "1" el valor del parámetro LAST.
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".

Sintaxis
La tabla siguiente muestra los parámetros de la instrucción:

5686

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN_BIT0

Input

BOOL

I, Q, M, D, L

El bit de entrada 0 se compa‐
ra con el bit 0 de la máscara.

IN_BIT1

Input

BOOL

I, Q, M, D, L

El bit de entrada 1 se compa‐
ra con el bit 1 de la máscara.

IN_BIT2

Input

BOOL

I, Q, M, D, L

El bit de entrada 2 se compa‐
ra con el bit 2 de la máscara.

IN_BIT3

Input

BOOL

I, Q, M, D, L

El bit de entrada 3 se compa‐
ra con el bit 3 de la máscara.

IN_BIT4

Input

BOOL

I, Q, M, D, L

El bit de entrada 4 se compa‐
ra con el bit 4 de la máscara.

IN_BIT5

Input

BOOL

I, Q, M, D, L

El bit de entrada 5 se compa‐
ra con el bit 5 de la máscara.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN_BIT6

Input

BOOL

I, Q, M, D, L

El bit de entrada 6 se compa‐
ra con el bit 6 de la máscara.

IN_BIT7

Input

BOOL

I, Q, M, D, L

El bit de entrada 7 se compa‐
ra con el bit 7 de la máscara.

IN_BIT8

Input

BOOL

I, Q, M, D, L

El bit de entrada 8 se compa‐
ra con el bit 8 de la máscara.

IN_BIT9

Input

BOOL

I, Q, M, D, L

El bit de entrada 9 se compa‐
ra con el bit 9 de la máscara.

IN_BIT10

Input

BOOL

I, Q, M, D, L

El bit de entrada 10 se com‐
para con el bit 10 de la más‐
cara.

IN_BIT11

Input

BOOL

I, Q, M, D, L

El bit de entrada 11 se com‐
para con el bit 11 de la más‐
cara.

IN_BIT12

Input

BOOL

I, Q, M, D, L

El bit de entrada 12 se com‐
para con el bit 12 de la más‐
cara.

IN_BIT13

Input

BOOL

I, Q, M, D, L

El bit de entrada 13 se com‐
para con el bit 13 de la más‐
cara.

IN_BIT14

Input

BOOL

I, Q, M, D, L

El bit de entrada 14 se com‐
para con el bit 14 de la más‐
cara.

IN_BIT15

Input

BOOL

I, Q, M, D, L

El bit de entrada 15 se com‐
para con el bit 15 de la más‐
cara.

OUT

Output

BOOL

I, Q, M, D, L

El estado lógico "1" indica
que se ha encontrado una
correspondencia.
El estado lógico "0" indica
que no se ha encontrado nin‐
guna correspondencia.

OUT_STEP

Output

BYTE

I, Q, M, D, L, P

Contiene el número de paso
con la máscara correspon‐
diente o el número de paso
que excede en "1" el valor del
parámetro LAST, si no se ha
encontrado ninguna corres‐
pondencia.

ERR_CODE

Output

WORD

I, Q, M, D, L, P

Información de error

LAST

Static

BYTE

I, Q, M, D, L, P

Indica el número del último
paso en que se tiene que
buscar una máscara corres‐
pondiente.

CMP_VAL

Static

ARRAY OF
WORD

I, Q, M, D, L

Máscaras de comparación [0
a 15, 0 a 15]: El primer núme‐
ro del índice es el número del
paso y, el segundo, el núme‐
ro de bit de la máscara.

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5687

Instrucciones
4.2 Instrucciones
Los parámetros estáticos no son visibles al efectuar la llamada de la instrucción en el
programa. Estos se almacenan en la instancia de la instrucción.

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

000E

El valor del parámetro LAST es mayor que 15.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Principios básicos de SCL (Página 8115)

LEAD_LAG: Algoritmo Lead y Lag
Descripción
La instrucción "Algoritmo Lead y Lag" procesa señales con una variable analógica. El valor de
la ganancia en el parámetro GAIN debe ser mayor que cero. El resultado de la instrucción
"Algoritmo Lead y Lag" se calcula con la siguiente ecuación:
287

/*B7,0(
/'B7,0(6$03/(B7
/'B7,0(
,1*$,1
35(9B287*$,1
/*B7,0(6$03/(B7
/*B7,0(6$03/(B7
/*B7,0(6$03/(B7

35(9B,1

La instrucción "Algoritmo Lead y Lag" solo devuelve resultados relevantes cuando se ejecuta
en ciclos de programa fijos. Deben indicarse las mismas unidades en los parámetros
LD_TIME, LG_TIME y SAMPLE_T. Si LG_TIME > 4 + SAMPLE_T, la instrucción se aproxima
a la siguiente función:
OUT = GAIN * ((1 + LD_TIME * s) / (1 + LG_TIME * s)) * IN
Si el valor del parámetro GAIN es menor o igual a cero, no se realiza el cálculo y el parámetro
ERR_CODE devuelve una información de error.
La instrucción "Algoritmo Lead y Lag" puede utilizarse junto con bucles para la compensación
en el control anticipativo. La instrucción comprende dos operaciones. La operación "Lead"
desplaza la fase de la salida OUT, anticipándose la salida a la entrada. En cambio, la operación
"Lag" desplaza la salida, de manera que la salida sigue a la entrada. Puesto que la operación
"Lag" equivale a una integración, puede utilizarse como supresor de perturbaciones o filtro de
paso bajo. La operación "Lead" equivale a una acción diferencial, por lo que puede utilizarse
como un filtro de paso alto. La combinación de ambas operaciones (Lead y Lag) hace que la

5688

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
fase de salida siga a la entrada a bajas frecuencias y se le anticipe a altas frecuencias. Por este
motivo, la instrucción "Algoritmo Lead y Lag" puede utilizarse como si fuera un filtro de paso de
banda.
Al insertar la instrucción en el programa, el cuadro de diálogo "Opciones de llamada" se abre
automáticamente; en él se puede determinar si los parámetros de bloque de la instrucción se
depositan en un bloque de datos propio (instancia individual) o bien como variable local
(multiinstancia) en la interfaz del bloque. Si crea un bloque de datos propio, lo encontrará en
el árbol del proyecto, en la carpeta "Recursos de programa", en "Bloques de programa >
Bloques de sistema". Encontrará más información al respecto en "Consulte también".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

REAL

I, Q, M, D, L, P

Valor de entrada del tiempo
de muestreo actual (tiempo
de ciclo) que se procesa.
En el parámetro IN también
se pueden indicar constan‐
tes.

SAMPLE_T

Input

INT

I, Q, M, D, L, P

Tiempo de muestreo
En el parámetro SAMPLE_T
también se pueden indicar
constantes.

OUT

Output

REAL

I, Q, M, D, L, P

Resultado de la instrucción

ERR_CODE

Output

WORD

I, Q, M, D, L, P

Información de error

LD_TIME

Static

REAL

I, Q, M, D, L, P

Tiempo de anticipación en la
misma unidad que el tiempo
de muestreo.

LG_TIME

Static

REAL

I, Q, M, D, L, P

Tiempo de seguimiento en la
misma unidad que el tiempo
de muestreo.

GAIN

Static

REAL

I, Q, M, D, L, P

Ganancia en % / % (relación
del cambio en la salida con
respecto al cambio en la en‐
trada como estado constan‐
te).

PREV_IN

Static

REAL

I, Q, M, D, L, P

Entrada anterior

PREV_OUT

Static

REAL

I, Q, M, D, L, P

Salida anterior

Encontrará más información sobre los tipos de datos válidos en "Consulte también".
Los parámetros estáticos no son visibles al efectuar la llamada de la instrucción en el
programa. Estos se almacenan en la instancia de la instrucción.

Programación del PLC
Manual de programación y manejo, 11/2019

5689

Instrucciones
4.2 Instrucciones

Parámetro ERR_CODE
La tabla siguiente muestra el significado de los valores del parámetro ERR_CODE:
Código de
error*
(W#16#...)

Explicación

0000

Ningún error

0009

El valor del parámetro GAIN es menor o igual a cero.

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
Nota
Los parámetros estáticos pueden inicializarse en el bloque de datos.

SCL
"LEAD_LAG_DB"(IN := "Tag_Input",
SAMPLE_T := "Tag_Input_SAMPLE_T",
OUT => "Tag_Output_Result",
ERR_CODE => "Tag_ErrorCode");

Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.
Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada:
Parámetro

Operando

Valor

IN

Tag_Input

2.0

SAMPLE_T

Tag_Input_SAMPLE_T

10

Los siguientes valores se almacenan en el bloque de datos de instancia "LEAD_LAG_DB" de
la instrucción:
Parámetro

Dirección

Valor

LD_TIME

DBD12

2.0

LG_TIME

DBD16

2.0

GAIN

DBD20

1.0

PREV_IN

DBD24

6.0

PREV_OUT

DBD28

6.0

Después de la ejecución

5690

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Valor

OUT

Tag_Output_Result

2.0

Los siguientes valores se guardan en el bloque de datos de instancia "LEAD_LAD_DB" de la
instrucción:
Parámetro

Operando

Valor

PREV_IN

DBD24

2.0

PREV_OUT

DBD28

2.0

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Principios básicos de SCL (Página 8115)

TONR_X: Acumulador de tiempo
Descripción
La instrucción "Acumulador de tiempo" acumula valores de tiempo dentro de un periodo
definido con ayuda de la entrada PV. La instrucción se ejecuta cuando el estado lógico de la
entrada de arranque TMR_EN cambia de "0" a "1". Simultáneamente, el temporizador cuenta
el tiempo programado en la entrada PV. Mientras se ejecuta la instrucción, añade el valor de
tiempo de la entrada DELTA_T al valor de tiempo de InOut ET.
Además, deben cumplirse las siguientes condiciones:
● La entrada de arranque TMR_EN devuelve el estado lógico "1".
● El valor de tiempo de InOut ET es menor que el valor de tiempo del parámetro PV.
● La entrada RESET devuelve el estado lógico "0".
La instrucción se interrumpe cuando el estado lógico de la entrada de arranque TMR_EN
cambia de "1" a "0". En cuanto el estado lógico cambia de nuevo a "1", la instrucción sigue
ejecutándose.
La instrucción finaliza cuando el valor de tiempo de InOut ET alcanza el valor de tiempo de la
entrada PV. Entonces, la salida Q devuelve el estado lógico "1".
Mientras la salida Q devuelva el estado lógico "1", el valor de tiempo de InOut ET no se
modificará. El valor de tiempo y la salida Q vuelven a ponerse a "0" solo cuando la entrada
RESET se pone al estado lógico "1".

Programación del PLC
Manual de programación y manejo, 11/2019

5691

Instrucciones
4.2 Instrucciones
Puesto que la instrucción "Acumulador de tiempo" utiliza el tiempo de ciclo (DELTA_T) del
último ciclo del bloque de organización (OB), la instrucción solo puede llamarse en bloques de
organización cíclicos.
Nota
El tiempo de ciclo del bloque de organización debe desplazarse desde la información de
arranque a la variable global del parámetro DELTA_T.

Sintaxis
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

TMR_EN (Ti‐
mer Enable)

Input

BOOL

I, Q, M, D, L

Entrada de arranque

RESET

Input

BOOL

I, Q, M, D, L

Entrada de reset

PV (Preset
Value)

Input

DINT

I, Q, M, D, L, P o
constante

Tiempo máximo de lectura
del tiempo

DELTA_T

Input

INT

I, Q, M, D, L o
constante

Tiempo de ciclo del bloque
de organización del ciclo an‐
terior

Q

Output

BOOL

I, Q, M, D, L

Salida que se establece al al‐
canzar el valor de tiempo pre‐
determinado

ET (Elapsed
Time)

InOut

DINT

I, Q, M, D, L

Arranca la instrucción y la
temporización predetermina‐
da en la entrada PV

Valor de función

Valor de tiempo acumulado
(Valor de tiempo transcurrido
actualmente + valor de tiem‐
po de la entrada DELTA_T)

VOID

Valor de función vacío

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

5692

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Acumulador de
tiempo":
705B(1

5(6(7

4

39

(7

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := TONR_X(TMR_EN := "Tag_Start",
RESET := "Tag_Reset",
"PV := 10
DELTA_T := 2,
Q => "Tag_Output",
ET := "Tag_Elapsed_Time");

En cada cambio del estado lógico de "0" a "1" en la entrada TMR_EN, el tiempo de ciclo "2" de
la entrada DELTA_T se añade al valor de tiempo actual de InOut ET, hasta que se alcanza el
valor de tiempo máximo "10" de la entrada PV.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

Programación del PLC
Manual de programación y manejo, 11/2019

5693

Instrucciones
4.2 Instrucciones

WSR: Guardar datos en el registro de desplazamiento
Descripción
La instrucción "Guardar datos en el registro de desplazamiento" escribe datos en un registro
de desplazamiento desde el origen indicado. Todo elemento del registro se desplaza a la
siguiente dirección. Los datos contenidos en la última dirección del registro de desplazamiento
se pierden tras la operación de desplazamiento.
Cada vez que la instrucción se ejecuta con el valor "0" en el parámetro RESET, se leen datos
nuevos del origen (S_DATA) y se desplazan a la dirección inicial (START) del registro de
desplazamiento. El parámetro LEN indica el número de elementos que deben desplazarse. El
tipo de datos de los elementos se define en el parámetro E_TYPE. Si se indica un tipo de datos
no admisible en el parámetro E_TYPE, no se procesa la instrucción.
Si el parámetro RESET está a "1" al ejecutarse la instrucción, se borra el registro. El parámetro
Q se pone al estado lógico "1" si el registro de desplazamiento está ocupado con ceros o si se
borra.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

RESET

Input

BOOL

I, Q, M, D, L

Entrada de reset

S_DATA

Input

POINTER

I, Q, M, D

Apunta al elemento de origen
que se desplaza a la direc‐
ción inicial (START).
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

START

Input

POINTER

I, Q, M, D

Apunta a la dirección inicial
del registro.
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

LEN

Input

WORD

I, Q, M, D, L, P

Número de elementos que
deben desplazarse.

E_TYPE

Input

BYTE

I, Q, M, D, L, P

Indica el tipo de datos de los
elementos que deben despla‐
zarse. Los siguientes tipos
de datos son admisibles:
● W#16#04 = WORD
● B#16#05 = INT
● B#16#06 = DWORD
● B#16#07 = DINT
● B#16#08 = REAL

5694

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

Q

Output

BOOL

I, Q, M, D, L

Indica "0" si el parámetro RE‐
SET está activado (1) o si to‐
dos los elementos que deben
desplazarse tienen el valor
"0".

VOID

I, Q, M, D, L

Valor de función vacío

Valor de función

Ejemplo
En el ejemplo siguiente se desplazan cuatro elementos del tipo de datos WORD a partir de la
dirección indicada en el parámetro START. Una vez desplazado el primer elemento del
registro a la siguiente dirección, la primera dirección se ocupará con los datos a los que señala
el puntero en el parámetro S_DATA. El valor del último elemento del registro se pierde
entonces.
SCL
WSR(RESET := "Tag_Input_Reset",
S_DATA := "Tag_Input_DataSource",
START := "Tag_Input_StartAddress",
LEN := "Tag_Input_Length",
E_TYPE := "Tag_Input_ElementType",
Q => "Tag_Output_Q");

No se transfiere ningún valor de función.
Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.
Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada y salida:
Parámetro

Operando

Valor

RESET

Tag_Input_Reset

0

S_DATA

Tag_Input_DataSource

DB2.DBX6.0
DW0 = W#16#1111
DW2 = W#16#2222
DW4 = W#16#3333
DW6 = W#16#4444

START

Tag_Input_StartAddress

DB1.DBX0.0

LEN

Tag_Input_Length

W#16#04

E_TYPE

Tag_Input_ElementType

W#16#04

Q

Tag_Output_Q

1

DW6 = W#16#1234

Después de la ejecución

Programación del PLC
Manual de programación y manejo, 11/2019

5695

Instrucciones
4.2 Instrucciones
Una vez ejecutada la instrucción, los valores siguientes se escriben en los parámetros de
salida:
Parámetro

Operando

Valor

RESET

Tag_Input_Reset

0

S_DATA

Tag_Input_DataSource

DB2.DBX6.0
DW0 = W#16#1234
DW2 = W#16#1111
DW4 = W#16#2222
DW6 = W#16#3333

START

Tag_Input_StartAddress

DB1.DBX0.0

LEN

Tag_Input_Length

W#16#04

E_TYPE

Tag_Input_ElementType

B#16#04

Q

Tag_Output_Q

1

DW6 = W#16#1234

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

SHRB: Desplazar bit al registro de desplazamiento
Descripción
La instrucción "Desplazar bit al registro de desplazamiento" escribe un bit en un registro de
desplazamiento desde el origen indicado (DATA). Cada vez que la instrucción se ejecuta con
el valor "0" en el parámetro RESET, se leen datos nuevos del origen y se desplazan a la
dirección inicial (S_BIT) del registro de desplazamiento. Los restantes bits se desplazan una
posición. El bit de la última dirección (S_BIT + N) se pierde tras el desplazamiento. Si el
parámetro RESET está a "1" mientras se ejecuta la instrucción, las direcciones del registro de
desplazamiento se ponen a "0" y no se desplazan.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

DATA

Input

BOOL

I, Q, M, D, L

Bit de origen

RESET

Input

BOOL

I, Q, M, D, L

Entrada de reset

S_BIT

Input

POINTER

I, Q, M, D

Apunta al primer bit del regis‐
tro de desplazamiento.
En el direccionamiento indi‐
recto por registro interárea,
el puntero debe indicarse en
formato de palabra doble.

5696

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

N

Input

WORD

I, Q, M, D, L, P

Número de bits que deben
desplazarse.

VOID

I, Q, M, D, L

Valor de función vacío

Valor de función

Ejemplo
En el ejemplo siguiente, el parámetro N se pone al valor 14 ("E" en notación hexadecimal), con
lo que 14 bits se desplazan a partir de la dirección indicada en el parámetro S_BIT. Una vez
desplazados los bits, la primera dirección se ocupa con los datos del origen del parámetro
DATA. El último valor de bit se pierde.
SCL
SHRB(DATA := "Tag_Input_Data",
RESET := "Tag_Input_Reset",
S_BIT := "Tag_Input_BitSource",
N := "Tag_Input_Number");

No se transfiere ningún valor de función.
Las tablas siguientes muestran el funcionamiento de la instrucción con valores concretos.
Antes de la ejecución
En este ejemplo se utilizan los siguientes valores para los parámetros de entrada y salida:
Parámetro

Operando

Valor

RESET

Tag_Input_Reset

0

DATA

Tag_Input_Data

0

S_BIT

Tag_Input_BitSource

DB1.DBX1.4

N

Tag_Input_Number

B#16#0E

Antes de ejecutarse la instrucción, los siguientes estados lógicos están almacenados en los 14
bits del registro:


























6B%,7







































Después de la ejecución
Una vez ejecutada la instrucción, los siguientes estados lógicos se almacenan en los 14 bits
del registro:

Programación del PLC
Manual de programación y manejo, 11/2019

5697

Instrucciones
4.2 Instrucciones


























6B%,7







































Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

SEG: Generar patrón de bits para el display de 7 segmentos
Descripción
La instrucción "Generar patrón de bits para el display de 7 segmentos" convierte cada una de
las cuatro cifras hexadecimales de la palabra de origen indicada (IN) en un patrón de bits
equivalente para un display de 7 segmentos. El resultado de la instrucción se deposita en la
palabra doble del parámetro OUT.
Entre las cifras hexadecimales y la ocupación de los 7 segmentos (a, b, c, d, e, f, g) existe la
siguiente relación:

5698

Cifra de en‐
trada

Ocupación de los
segmentos

Display

(binaria)

‑gfedcba

0000

00111111

0

0001

00000110

1

0010

01011011

2

0011

01001111

3

0100

01100110

4

0101

01101101

5

0110

01111101

6

0111

00000111

7

1000

01111111

8

1001

01100111

9

1010

01110111

A

1011

01111100

B

1100

00111001

C

1101

01011110

D

1110

01111001

E

1111

01110001

F

Display de siete segmentos

(hexadecimal)
D
I

E
J

H

F
G

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

WORD

I, Q, M, D, L, P

Palabra de origen con cuatro
cifras hexadecimales

OUT

Output

DWORD

I, Q, M, D, L, P

Patrón de bits para el display
de 7 segmentos

VOID

I, Q, M, D, L

Valor de función vacío

Valor de función

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
SEG(IN := "Tag_Input",
OUT => "Tag_Output");

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

Hexadecimal

Binario

IN

Tag_Input

W#16#1234

0001 0010 0011 0100

OUT

Tag_Output

DW16#065B4F66

00000110 01011011 01001111
01100110
Visualización: 1234

No se transfiere ningún valor de función.

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

BCDCPL: Generar complemento a diez
Descripción
La instrucción "Generar complemento a diez" crea el complemento a diez de un número BCD
de siete dígitos que se indica en el operando. La instrucción realiza el cálculo con la siguiente
fórmula matemática:
10000000 (como BCD)
– Valor BCD de 7 dígitos
---------------------------------------Complemento a diez (como BCD)

Programación del PLC
Manual de programación y manejo, 11/2019

5699

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

DWORD

I, Q, M, D, L, P

Número BCD de 7 dígitos

DWORD

I, Q, M, D, L, P

Resultado de la instrucción

Valor de función

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := BCDCPL("Tag_Input");

La tabla siguiente muestra el funcionamiento de la instrucción con valores concretos:
Operando

Valor*

Tag_Input

DW#16#01234567

Tag_Result

DW#16#08765433

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Cambiar formatos de visualización en el estado del programa (Página 8529)
Principios básicos de SCL (Página 8115)

BITSUM: Contar número de bits activados
Descripción
La instrucción "Contar número de bits activados" cuenta el número de bits de un operando que
están puestos al estado lógico "1".

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

DWORD

I, Q, M, D, L, P

Operando cuyos bits activa‐
dos se cuentan

INT

I, Q, M, D, L, P

Resultado de la instrucción

Valor de función

5700

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
SCL
"Tag_Result" := BITSUM("Tag_Input");

La tabla siguiente muestra el funcionamiento de la instrucción con valores concretos:
Operando

Valor*

Tag_Input

DW#16#12345678

Tag_Result

W#16#000D (13 bits)

*En el editor de programas, los códigos de error se pueden representar como valores enteros o hexa‐
decimales. Encontrará más información sobre el cambio de los formatos de visualización en "Consulte
también".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de SCL (Página 8115)

4.2.2.5

GRAPH

Cadena GRAPH
Etapa y transición
Descripción
El componente de estructura "Etapa y transición" permite insertar simultáneamente una etapa
y una transición en la cadena secuencial.
Consulte también:
Etapa (Página 5702)
Transición (Página 5703)

Consulte también
Etapa (Página 5702)
Transición (Página 5703)
Fin de cadena (Página 5703)
Salto a etapa (Página 5704)

Programación del PLC
Manual de programación y manejo, 11/2019

5701

Instrucciones
4.2 Instrucciones
Rama alternativa (Página 5704)
Rama simultánea (Página 5705)
Cerrar rama (Página 5705)
Etapas y transiciones (Página 8198)

Etapa
Descripción
Las etapas sirven para dividir las tareas de automatización complejas en tareas más pequeñas
y claras que, seguidamente, se llevan a cabo por medio de acciones. Las diferentes etapas se
organizan en cadenas secuenciales, de modo que al ejecutar el programa cada etapa se
procesa en el orden especificado. Cada etapa debe tener un nombre y un número unívocos.
Para que el procesamiento se lleve a cabo realmente, la etapa debe activarse con una de las
condiciones siguientes:
● La etapa se ha definido como inicial.
● Se cumple la transición de la etapa anterior.
● La etapa es llamada por una acción controlada por evento.
Una vez se han procesado todas las acciones se vuelve a desactivar la etapa.
Las etapas en las que no hay ninguna acción programada se denominan etapas vacías. Una
etapa vacía tiene el mismo comportamiento que una etapa activa y la transición siguiente
siempre se cumple.

Consulte también
Principios básicos de las etapas (Página 8198)
Etapa y transición (Página 5701)
Transición (Página 5703)
Fin de cadena (Página 5703)
Salto a etapa (Página 5704)
Rama alternativa (Página 5704)
Rama simultánea (Página 5705)
Cerrar rama (Página 5705)

5702

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Transición
Descripción
Las transiciones se encuentran entre una etapa y otra y contienen las condiciones para pasar
de una etapa a la siguiente. Cuando se cumplen las condiciones de continuación de una
transición, se activa la etapa siguiente y se procesan sus acciones. Las condiciones de una
transición se programan en KOP o FUP.

Consulte también
Principios básicos de las transiciones (Página 8200)
Etapa y transición (Página 5701)
Etapa (Página 5702)
Fin de cadena (Página 5703)
Salto a etapa (Página 5704)
Rama alternativa (Página 5704)
Rama simultánea (Página 5705)
Cerrar rama (Página 5705)

Fin de cadena
Descripción
El componente de estructura "Fin de cadena" permite finalizar una cadena secuencial o una
rama. En una rama simultánea, sin embargo, el fin de cadena debe estar precedido de una
transición.
Nota
Si todas las ramas de una cadena secuencial se cierran con un fin de cadena, es posible volver
a iniciar la cadena secuencial con el parámetro "INIT_SQ" o con el botón "Inicializar" de la Task
Card "Test" en la paleta "Control secuencial".

Consulte también
Elementos de una cadena secuencial (Página 8194)
Etapa y transición (Página 5701)
Etapa (Página 5702)
Transición (Página 5703)
Salto a etapa (Página 5704)
Rama alternativa (Página 5704)

Programación del PLC
Manual de programación y manejo, 11/2019

5703

Instrucciones
4.2 Instrucciones
Rama simultánea (Página 5705)
Cerrar rama (Página 5705)

Salto a etapa
Descripción
Con un salto se prosigue la ejecución del programa en una etapa cualquiera dentro del bloque
de función GRAPH. Los saltos pueden insertarse al final de la rama principal o de una rama
alternativa, de modo que sea posible procesar la cadena secuencial cíclicamente. El salto y su
destino se representan en la cadena secuencial en forma de flecha, de modo que en el destino
del salto se indica la transición de origen.

Consulte también
Elementos de una cadena secuencial (Página 8194)
Etapa y transición (Página 5701)
Etapa (Página 5702)
Transición (Página 5703)
Fin de cadena (Página 5703)
Rama alternativa (Página 5704)
Rama simultánea (Página 5705)
Cerrar rama (Página 5705)

Rama alternativa
Descripción
Las ramas alternativas permiten programar ramas O. Esto significa que, después de una
etapa, se insertan ramas que empiezan con una transición. En función de la transición que se
cumpla primero se ejecutará la rama correspondiente. Si se cumplen varias transiciones al
mismo tiempo, tendrá prioridad la transición que esté más a la izquierda y se ejecutará la rama
correspondiente. Las ramas alternativas finalizan con otra transición.
Es posible programar un máximo de 125 ramas alternativas en una cadena secuencial.

Consulte también
Elementos de una cadena secuencial (Página 8194)
Etapa y transición (Página 5701)
Etapa (Página 5702)
Transición (Página 5703)
Fin de cadena (Página 5703)

5704

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Salto a etapa (Página 5704)
Rama simultánea (Página 5705)
Cerrar rama (Página 5705)

Rama simultánea
Descripción
Las ramas simultáneas permiten programar ramas Y. Esto significa que con una transición se
activan varias etapas cuyas acciones se ejecutarán a continuación. Por ese motivo, las ramas
simultáneas empiezan y terminan siempre con una etapa.
Las transiciones posteriores de las ramas simultáneas se encuentran en la rama principal, de
modo que las diferentes ramas simultáneas pueden cerrarse en diferentes puntos de la rama
principal. Tenga en cuenta que las ramas que se agrupan en una transición no conmutarán a
la etapa siguiente, hasta que no se hayan ejecutado por completo dichas ramas.
Es posible programar un máximo de 249 ramas simultáneas en una cadena secuencial.

Consulte también
Elementos de una cadena secuencial (Página 8194)
Etapa y transición (Página 5701)
Etapa (Página 5702)
Transición (Página 5703)
Fin de cadena (Página 5703)
Salto a etapa (Página 5704)
Rama alternativa (Página 5704)
Cerrar rama (Página 5705)

Cerrar rama
Descripción
El elemento "Cerrar rama" permite cerrar ramas simultáneas o alternativas y llevarlas a su
rama matriz. Esto debe hacerse cuando la rama no se cierra con un salto o un fin de cadena.
En una rama simultánea solo es posible insertar "Cerrar rama" después de una etapa.

Consulte también
Elementos de una cadena secuencial (Página 8194)
Etapa y transición (Página 5701)
Etapa (Página 5702)

Programación del PLC
Manual de programación y manejo, 11/2019

5705

Instrucciones
4.2 Instrucciones
Transición (Página 5703)
Fin de cadena (Página 5703)
Salto a etapa (Página 5704)
Rama alternativa (Página 5704)
Rama simultánea (Página 5705)

Acciones GRAPH
Temporizadores
TP: Impulso
Descripción
La instrucción "Impulso" activa la salida Q por un tiempo programado. La instrucción se inicia
cuando el resultado lógico (RLO) del parámetro IN cambia de "0" a "1" (flanco de señal
ascendente). Para poder ejecutar la instrucción se requiere una operación lógica precedente.
Se puede colocar dentro o al final del segmento. El tiempo programado PT empieza a contar
al iniciar la instrucción. El parámetro Q se activa por el tiempo PT, independientemente de
cómo evolucione la señal de entrada. La detección de un nuevo flanco de señal ascendente
tampoco influye en el estado lógico del parámetro Q mientras transcurra el tiempo PT.
El valor actual de tiempo se puede consultar en el parámetro ET. Este valor de tiempo empieza
a partir de T#0s y termina al alcanzarse el valor del tiempo PT. Si cuando se alcanza el tiempo
PT el estado lógico del parámetro IN es "0", se resetea el parámetro ET.
A cada llamada de la instrucción "Impulso" debe asignársele un temporizador CEI, en el que
se guardan los datos de la instrucción. Un temporizador CEI se puede declarar como se indica
a continuación:
● Declaración de un bloque de datos del tipo TP (p. ej., "TP_DB")
Al insertar la instrucción en el programa se abre automáticamente el cuadro de diálogo
"Opciones de llamada". El bloque de datos creado se encuentra en la carpeta "Recursos del
programa" del árbol del proyecto, en "Bloques de programa > Bloques de sistema". Encontrará
más información al respecto en "Consulte también".
El sistema operativo desactiva las instancias de la instrucción "Impulso" cuando se realiza un
arranque en frío. Si alguna instancia de la instrucción debe estar inicializada tras un rearranque
completo (en caliente), las instancias que se deben inicializar se deben llamar en un OB de
arranque con el valor "0" en el parámetro PT. Si un bloque diferente contiene instancias de la
instrucción "Impulso", estas pueden inicializarse p. ej. inicializando el bloque de nivel superior.
Nota
Ignorar instrucción
Si en el programa no se llama la instrucción porque, p. ej., esta es ignorada, el parámetro ET
devuelve un valor de constante en cuanto ha transcurrido este tiempo.

5706

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Nota
Actualización de los datos de la instrucción
Los datos de la instrucción se actualizan únicamente al llamar la instrucción. Al acceder a las
salidas Q o ET, no se actualizan los datos.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

BOOL

I, Q, M, D, L

Entrada de arranque

PT

Input

TIME

I, Q, M, D, L, P o
constante

Duración del impulso
El valor del parámetro PT de‐
be ser positivo.

Q

Output

BOOL

I, Q, M, D, L

Salida de impulso

ET

Output

TIME

I, Q, M, D, L

Valor de tiempo actual

En la lista desplegable "???" puede seleccionar el tipo de datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Impulso":
,1

4

37

37

37

(7
37

Programación del PLC
Manual de programación y manejo, 11/2019

5707

Instrucciones
4.2 Instrucciones

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
GRAPH
CALL TP TIME, "IEC_TP_DB"
(IN := "Tag_Start"
PT := "Tag_PresetTIME"
Q => "Tag_Status"
ET => "Tag_ElapsedTIME"
)

Cuando el estado lógico del operando "Tag_Start" cambia de "0" a "1", el tiempo programado
en el parámetro PT empieza a contar y el operando "Tag_Status" se pone a "1". El valor de
tiempo actual se guarda en el operando "Tag_ElapsedTIME".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Principios básicos de GRAPH (Página 8191)

TON: Retardo al conectar
Descripción
La instrucción "Retardo al conectar" retarda la activación de la salida Q por el tiempo
programado PT. La instrucción se inicia cuando el resultado lógico (RLO) de la entrada IN
cambia de "0" a "1" (flanco de señal ascendente). Para poder ejecutar la instrucción se requiere
una operación lógica precedente. Se puede colocar dentro o al final del segmento. El tiempo
programado PT empieza a contar al iniciar la instrucción. Una vez transcurrido el tiempo PT,
la salida Q devuelve el estado lógico "1". La salida Q permanece activada mientras la entrada
de arranque IN esté puesta a "1". Cuando el estado lógico de la entrada de arranque cambia
de "1" a "0", se desactiva la salida Q. La función de temporización se reinicia al detectarse un
nuevo flanco de señal ascendente en la entrada de arranque.
El valor de tiempo actual se puede consultar en la salida ET. Este valor de tiempo empieza a
partir de T#0s y termina al alcanzarse el valor del tiempo PT. La salida ET se desactiva en
cuanto el estado lógico de la entrada IN cambia a "0".
A cada llamada de la instrucción "Retardo al conectar" debe asignársele un temporizador CEI,
en el que se guardan los datos de la instrucción. Un temporizador CEI se puede declarar como
se indica a continuación:
● Declaración de un bloque de datos del tipo TON (p. ej., "TON_DB")
Al insertar la instrucción en el programa se abre automáticamente el cuadro de diálogo
"Opciones de llamada". El bloque de datos creado se encuentra en la carpeta "Recursos del
programa" del árbol del proyecto, en "Bloques de programa > Bloques de sistema". Encontrará
más información al respecto en "Consulte también".

5708

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
El sistema operativo desactiva las instancias de la instrucción "Retardo al conectar" cuando se
realiza un arranque en frío. Si alguna instancia de la instrucción debe estar inicializada tras un
rearranque completo (en caliente), las instancias que se deben inicializar se deben llamar en
un OB de arranque con el valor "0" en el parámetro PT. Si un bloque diferente contiene
instancias de la instrucción "Retardo al conectar", estas pueden inicializarse p. ej. inicializando
el bloque de nivel superior.
Nota
Ignorar instrucción
Si en el programa no se llama la instrucción porque, p. ej., esta es ignorada, la salida ET
devuelve un valor de constante en cuanto ha transcurrido este tiempo.
Nota
Actualización de los datos de la instrucción
Los datos de la instrucción se actualizan únicamente al llamar la instrucción. Al acceder a las
salidas Q o ET, no se actualizan los datos.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

BOOL

I, Q, M, D, L

Entrada de arranque

PT

Input

TIME

I, Q, M, D, L, P o
constante

Tiempo del retardo al conec‐
tar
El valor del parámetro PT de‐
be ser positivo.

Q

Output

BOOL

I, Q, M, D, L

Salida que se activa una vez
transcurrido el tiempo PT.

ET

Output

TIME

I, Q, M, D, L

Valor de tiempo actual

En la lista desplegable "???" puede seleccionar el tipo de datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Programación del PLC
Manual de programación y manejo, 11/2019

5709

Instrucciones
4.2 Instrucciones

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Retardo al conectar":
,1

4

37

37

(7
37

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
GRAPH
CALL TON TIME, "IEC_TON_DB"
(IN := "Tag_Start"
PT := "Tag_PresetTIME"
Q => "Tag_Status"
ET => "Tag_ElapsedTIME"
)

Cuando el estado lógico del operando "Tag_Start" cambia de "0" a "1", el tiempo programado
en el parámetro PT empieza a contar. Una vez transcurrido el tiempo, el operando
"Tag_Status" se pone al estado lógico "1". El operando "Tag_Status" permanece a "1" mientras
el operando "Tag_Start" tenga el estado lógico "1". El valor de tiempo actual se guarda en el
operando "Tag_ElapsedTime". Cuando el estado lógico del operando "Tag_Start" cambia de
"1" a "0", se resetea el operando "Tag_Status".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Principios básicos de GRAPH (Página 8191)

5710

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

TOF: Retardo al desconectar
Descripción
La instrucción "Retardo al desconectar" retarda la desactivación de la salida Q por el tiempo
programado PT. La salida Q se activa cuando el resultado lógico (RLO) de la entrada IN
cambia de "0" a "1" (flanco de señal ascendente). Para poder ejecutar la instrucción se requiere
una operación lógica precedente. Se puede colocar dentro o al final del segmento. Cuando el
estado lógico de la entrada IN cambia nuevamente a "0", el tiempo programado PT deja de
contar. La salida Q permanece activada mientras transcurre el tiempo PT. Una vez
transcurrido el tiempo PT se desactiva la salida Q. Si el estado lógico de la entrada IN cambia
a "1" antes de que transcurra el tiempo PT, se inicializa el temporizador. El estado lógico de la
salida Q permanece en "1".
El valor de tiempo actual se puede consultar en la salida ET. Este valor de tiempo empieza a
partir de T#0s y termina al alcanzarse el valor del tiempo PT. Una vez transcurrido el tiempo
PT, el valor actual de la salida ET se conserva hasta que la entrada IN cambie nuevamente a
"1". Si el estado lógico de la entrada IN cambia a "1" antes de transcurrir el tiempo PT, la salida
ET adopta el valor T#0s.
A cada llamada de la instrucción "Retardo al desconectar" debe asignársele un temporizador
CEI, en el que se guarden los datos de la instrucción. Un temporizador CEI se puede declarar
como se indica a continuación:
● Declaración de un bloque de datos del tipo TOF (p. ej., "TOF_DB")
Al insertar la instrucción en el programa se abre automáticamente el cuadro de diálogo
"Opciones de llamada". El bloque de datos creado se encuentra en la carpeta "Recursos del
programa" del árbol del proyecto, en "Bloques de programa > Bloques de sistema". Encontrará
más información al respecto en "Consulte también".
El sistema operativo desactiva las instancias de la instrucción "Retardo al desconectar"
cuando se realiza un arranque en frío. Si alguna instancia de la instrucción debe estar
inicializada tras un rearranque completo (en caliente), las instancias que se deben inicializar se
deben llamar en un OB de arranque con el valor "0" en el parámetro PT. Si un bloque diferente
contiene instancias de la instrucción "Retardo al desconectar", estas pueden inicializarse p. ej.
inicializando el bloque de nivel superior.
Nota
Ignorar instrucción
Si en el programa no se llama la instrucción porque, p. ej., esta es ignorada, la salida ET
devuelve un valor de constante en cuanto ha transcurrido este tiempo.
Nota
Actualización de los datos de la instrucción
Los datos de la instrucción se actualizan únicamente al llamar la instrucción. Al acceder a las
salidas Q o ET, no se actualizan los datos.

Programación del PLC
Manual de programación y manejo, 11/2019

5711

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN

Input

BOOL

I, Q, M, D, L

Entrada de arranque

PT

Input

TIME

I, Q, M, D, L, P o
constante

Tiempo del retardo al desco‐
nectar
El valor del parámetro PT de‐
be ser positivo.

Q

Output

BOOL

I, Q, M, D, L

Salida que se desactiva una
vez transcurrido el tiempo PT.

ET

Output

TIME

I, Q, M, D, L

Valor de tiempo actual

En la lista desplegable "???" puede seleccionar el tipo de datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Cronograma de impulsos
La figura siguiente muestra el cronograma de impulsos de la instrucción "Retardo al
desconectar":
,1

4
37

37

(7
37

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
GRAPH
CALL TOF TIME, "IEC_TOF_DB"
(IN := "Tag_Start"
PT := "Tag_PresetTIME"
Q => "Tag_Status"

5712

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
GRAPH
ET => "Tag_ElapsedTIME"
)

Si se produce un cambio del estado lógico del operando "Tag_Start" de "0" a "1", el operando
se pone a "Tag_Status". Cuando el estado lógico del operando "Tag_Start" cambia de "1" a "0",
el tiempo programado en el parámetro PT empieza a contar. Mientras transcurra el tiempo,
permanecerá activado el operando "Tag_Status". Una vez transcurrido el tiempo, el operando
"Tag_Status" se desactiva. El valor de tiempo actual se guarda en el operando
"Tag_ElapsedTIME".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Principios básicos de GRAPH (Página 8191)

Contadores
CTU: Contador ascendente
Descripción
La instrucción "Contador ascendente" incrementa el valor en la salida CV. Cuando el estado
lógico de la entrada CU cambia de "0" a "1" (flanco de señal ascendente), se ejecuta la
instrucción y el valor actual de contaje de la salida CV se incrementa en uno. El valor de contaje
se incrementa cada vez que se detecta un flanco de señal ascendente, hasta alcanzar el valor
límite superior del tipo de datos indicado en la salida CV. Cuando se alcanza el valor límite
superior, el estado lógico de la entrada CU deja de tener efecto en la instrucción.
El estado del contador se puede consultar en la salida Q. El estado lógico de la salida Q es
determinado por el parámetro PV. Si el valor de contaje actual es mayor o igual que valor del
parámetro PV, la salida Q adopta el estado lógico "1". En todos los demás casos, el estado
lógico de la salida Q es "0".
El valor de la salida CV se pone a cero cuando el estado lógico de la entrada R cambia a "1".
Mientras la entrada R tenga el estado lógico "1", el estado lógico de la entrada CU no tendrá
efecto alguno en la instrucción.
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
A cada llamada de la instrucción "Contador ascendente" debe asignársele un contador CEI, en
el que se guarden los datos de la instrucción. Un contador CEI se declara del siguiente modo:
● Declaración de un bloque de datos del tipo CTU (p. ej., "CTU_DB")
Al insertar la instrucción en el programa se abre automáticamente el cuadro de diálogo
"Opciones de llamada". El bloque de datos creado se encuentra en la carpeta "Recursos del

Programación del PLC
Manual de programación y manejo, 11/2019

5713

Instrucciones
4.2 Instrucciones
programa" del árbol del proyecto, en "Bloques de programa > Bloques de sistema". Encontrará
más información al respecto en "Consulte también".
El sistema operativo inicializa las instancias de la instrucción "Contador ascendente" cuando
se realiza un arranque en frío. Si deben inicializarse instancias de la instrucción tras un
rearranque completo (en caliente), las instancias por inicializar deben llamarse en un OB de
arranque con el valor "1" en el parámetro R de la instrucción. Si un bloque diferente contiene
instancias de la instrucción "Contador ascendente", estas pueden resetearse p. ej.
inicializando el bloque de nivel superior.
Para poder ejecutar la instrucción "Contador ascendente" se requiere una operación lógica
precedente. Se puede colocar dentro o al final del segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CU

Input

BOOL

I, Q, M, D, L

Entrada de contaje

R

Input

BOOL

I, Q, M, D, L, T, C,
P

Entrada de reset

PV

Input

INT

I, Q, M, D, L, P o
constante

Valor con el que se activa la
salida Q.

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

CV

Output

INT

I, Q, M, D, L, P

Valor de contaje actual

En la lista desplegable "???" puede seleccionar el tipo de datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
GRAPH
CALL CTU INT,"IEC_CTU_DB"
(CU := "Tag_Start"
R := "Tag_ResetCOUNTER"
PV := "Tag_PresetValue"
Q => "Tag_Status"
CV => "Tag_CounterValue"
)

Cuando el estado lógico del operando "Tag_Start" cambia de "0" a "1", se ejecuta la instrucción
"Contador ascendente" y el valor de contaje actual del operando "Tag_CounterValue" se
incrementa en uno. Con cada flanco de señal ascendente posterior, el valor de contaje irá
incrementando hasta alcanzar el valor límite superior del tipo de datos (INT = 32767).
El valor del parámetro PV se utiliza como límite para determinar la salida "Tag_Status". La
salida "Tag_Status" devuelve el estado lógico "1" mientras el valor de contaje actual sea mayor
o igual que el valor del operando "Tag_PresetValue". En todos los demás casos, la salida
"Tag_Status" devuelve el estado lógico "0".

5714

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Principios básicos de GRAPH (Página 8191)

CTD: Contador descendente
Descripción
La instrucción "Contador descendente" decrementa el valor de la salida CV. Cuando el estado
lógico de la entrada CD cambia de "0" a "1" (flanco de señal ascendente), se ejecuta la
instrucción y el valor actual de contaje de la salida CV se decrementa en uno. Cada vez que
se detecta un flanco de señal ascendente, el valor de contaje se decrementa hasta alcanzar el
valor límite inferior del tipo de datos indicado. Cuando se alcanza el valor límite inferior, el
estado lógico de la entrada CD deja de tener efecto en la instrucción.
El estado del contador se puede consultar en la salida Q. Si el valor de contaje actual es menor
o igual que cero, la salida Q adopta el estado lógico "1". En todos los demás casos, el estado
lógico de la salida Q es "0".
El valor de la salida CV se pone al valor del parámetro PV cuando el estado lógico de la entrada
LD cambia a "1". Mientras la entrada LD tenga el estado lógico "1", el estado lógico de la
entrada CD no tendrá efecto alguno en la instrucción.
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
A cada llamada de la instrucción "Contador descendente" debe asignársele un contador CEI,
en el que se guarden los datos de la instrucción. Un contador CEI se declara del siguiente
modo:
● Declaración de un bloque de datos del tipo CTD (p. ej., "CTD_DB")
Al insertar la instrucción en el programa se abre automáticamente el cuadro de diálogo
"Opciones de llamada". El bloque de datos creado se encuentra en la carpeta "Recursos del
programa" del árbol del proyecto, en "Bloques de programa > Bloques de sistema". Encontrará
más información al respecto en "Consulte también".
El sistema operativo inicializa las instancias de la instrucción "Contador descendente" cuando
se realiza un arranque en frío. Si deben inicializarse instancias de la instrucción tras un
rearranque completo (en caliente), las instancias por inicializar deben llamarse en un OB de
arranque con el valor "1" en el parámetro LD de la instrucción. En el parámetro PV se indica en
este caso el valor inicial deseado para el parámetro CV.
Para poder ejecutar la instrucción "Contador descendente" se requiere una operación lógica
precedente. Se puede colocar dentro o al final del segmento.

Programación del PLC
Manual de programación y manejo, 11/2019

5715

Instrucciones
4.2 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CD

Input

BOOL

I, Q, M, D, L

Entrada de contaje

LD

Input

BOOL

I, Q, M, D, L, P

Entrada de carga

PV

Input

INT

I, Q, M, D, L, P o
constante

Valor al que se pone la salida
CV cuando LD = 1.

Q

Output

BOOL

I, Q, M, D, L

Estado del contador

CV

Output

INT

I, Q, M, D, L, P

Valor de contaje actual

En la lista desplegable "???" puede seleccionar el tipo de datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
GRAPH
CALL CTD INT, "IEC_CTD_DB"
(CD := "Tag_Start"
LD := "Tag_LoadPV"
PV := "Tag_PresetValue"
Q => "Tag_Status"
CV => "Tag_CounterValue"
)

Cuando el estado lógico del operando "Tag_Start" cambia de "0" a "1", se ejecuta la instrucción
y el valor de la salida "Tag_CounterValue" se decrementa en uno. Con cada flanco de señal
ascendente posterior, el valor de contaje irá decrementando hasta alcanzar el valor límite
inferior del tipo de datos indicado (INT = -32768).
La salida "Tag_Status" devuelve el estado lógico "1" mientras el valor de contaje actual sea
menor o igual a cero. En todos los demás casos, la salida "Tag_Status" devuelve el estado
lógico "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Principios básicos de GRAPH (Página 8191)

5716

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones

CTUD: Contador ascendente - descendente
Descripción
Con la instrucción "Contador ascendente - descendente" se incrementa y decrementa el valor
en la salida CV. Cuando el estado lógico de la entrada CU cambia de "0" a "1" (flanco de señal
ascendente), el valor de contaje actual de la salida CV aumenta en uno. Cuando el estado
lógico de la entrada CD cambia de "0" a "1" (flanco de señal ascendente), el valor actual de
contaje de la salida CV se decrementa en uno. Si en un ciclo del programa se detecta un flanco
de señal ascendente en las entradas CU y CD, el valor actual de contaje no se modifica en la
salida CV.
El valor de contaje se puede seguir incrementando hasta alcanzar el valor límite superior del
tipo de datos indicado en la salida CV. Una vez alcanzado el valor límite superior, el valor de
contaje ya no se incrementa al detectarse un flanco de señal ascendente. Cuando se alcanza
el valor límite inferior del tipo de datos indicado, ya no se decrementa el valor de contaje.
Si el estado lógico de la entrada LD cambia a "1", el valor de contaje de la salida CV adopta el
valor del parámetro PV. Mientras la entrada LD tenga el estado lógico "1", el estado lógico de
las entradas CU y CD no tendrá efecto alguno en la instrucción.
El valor de contaje se pone a cero si el estado lógico de la entrada R cambia a "1". Mientras la
entrada R tenga el estado lógico "1", un cambio del estado lógico de las entradas CU, CD y LD
no tendrá efecto alguno en la instrucción "Contador ascendente - descendente".
El estado del contador ascendente se puede consultar en la salida QU. Si el valor actual de
contaje es mayor o igual que valor del parámetro PV, la salida QU adopta el estado lógico "1".
En todos los demás casos, el estado lógico de la salida QU es "0".
El estado del contador descendente se puede consultar en la salida QD. Si el valor actual de
contaje es menor o igual que cero, la salida QD adopta el estado lógico "1". En todos los demás
casos, el estado lógico de la salida QD es "0".
Nota
Utilice el contador en una sola posición del programa para evitar fallos de contaje.
A cada llamada de la instrucción "Contador ascendente - descendente" debe asignársele un
contador CEI en el que se guarden los datos de la instrucción. Un contador CEI se declara del
siguiente modo:
● Declaración de un bloque de datos del tipo CTUD (p. ej., "CTUD_DB")
Al insertar la instrucción en el programa se abre automáticamente el cuadro de diálogo
"Opciones de llamada". El bloque de datos creado se encuentra en la carpeta "Recursos del
programa" del árbol del proyecto, en "Bloques de programa > Bloques de sistema". Encontrará
más información al respecto en "Consulte también".
El sistema operativo inicializa las instancias de la instrucción "Contador ascendente descendente" cuando se realiza un arranque en frío. Si deben inicializarse instancias tras un

Programación del PLC
Manual de programación y manejo, 11/2019

5717

Instrucciones
4.2 Instrucciones
rearranque completo (en caliente), las instancias por inicializar deben llamarse en un OB de
arranque con los siguientes valores de parámetros:
● Si se utiliza como contador ascendente, el valor del parámetro R debe ponerse a "1".
● Si se utiliza como contador descendente, el valor del parámetro LD debe ponerse a "1". En
el parámetro PV debe indicarse en este caso el valor inicial deseado del parámetro CV.
Si un bloque diferente contiene instancias de la instrucción "Contador ascendente descendente", estas pueden resetearse p. ej. inicializando el bloque de nivel superior.
Para poder ejecutar la instrucción "Contador ascendente - descendente" se requiere una
operación lógica precedente. Se puede colocar dentro o al final del segmento.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CU

Input

BOOL

I, Q, M, D, L

Entrada de contaje ascen‐
dente

CD

Input

BOOL

I, Q, M, D, L

Entrada de contaje descen‐
dente

R

Input

BOOL

I, Q, M, D, L, T, C,
P

Entrada de reset

LD

Input

BOOL

I, Q, M, D, L, P

Entrada de carga

PV

Input

INT

I, Q, M, D, L, P o
constante

Valor con el que se activa la
salida QU. / Valor al que se
ajusta la salida CV si LD = 1.

QU

Output

BOOL

I, Q, M, D, L

Estado de los contadores as‐
cendentes

QD

Output

BOOL

I, Q, M, D, L

Estado de los contadores
descendentes

CV

Output

INT

I, Q, M, D, L, P

Valor de contaje actual

En la lista desplegable "???" puede seleccionar el tipo de datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
GRAPH
CALL CTUD INT, "IEC_CTUD_DB"
(CU := "Tag_StartCTU"
CD := "Tag_StartCTD"
R := "Tag_ResetCOUNTER"
LD := "Tag_LoadPV"
PV := "Tag_PresetValue"
QU => "Tag_CounterStatusUP"
QD => "Tag_CounterStatusDOWN"

5718

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
GRAPH
CV => "Tag_CounterValue"
)

Si el estado lógico de la entrada "Tag_StartCTU" o "Tag_StartCTD" cambia de "0" a "1" (flanco
de señal ascendente), se ejecuta la instrucción "Contador ascendente - descendente". Cuando
se detecta un flanco de señal ascendente en la entrada "Tag_StartCTU", el valor de contaje
actual se incrementa en uno y se deposita en la salida "Tag_CounterValue". Si se detecta un
flanco de señal ascendente en la entrada "Tag_StartCTD", el valor de contaje se decrementa
en uno y se deposita en la salida "Tag_CounterValue". Si se detecta un flanco de señal
ascendente en la entrada CU, el valor de contaje se sigue incrementando hasta alcanzar el
valor límite superior (32767). Cuando se detecta un flanco de señal ascendente en la entrada
CD, el valor de contaje se decrementa hasta alcanzar el valor límite inferior INT = -32768.
La salida "Tag_CounterStatusUP" devuelve el estado lógico "1" mientras el valor de contaje
actual sea mayor o igual que el valor de la entrada "Tag_PresetValue". En todos los demás
casos, la salida "Tag_CounterStatusUP" devuelve el estado lógico "0".
La salida "Tag_CounterStatusDOWN" devuelve el estado lógico "1" mientras el valor de
contaje actual sea menor o igual a cero. En todos los demás casos, la salida
"Tag_CounterStatusDOWN" devuelve el estado lógico "0".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Principios básicos de GRAPH (Página 8191)

Funciones matemáticas
NEG: Generar complemento a dos
Descripción
Con la instrucción "Generar complemento a dos" se cambia el signo del valor del operando.
Por ejemplo, si tiene un valor positivo, se deposita el equivalente negativo de este valor.
El valor de la salida OUT no es válido si el resultado de la instrucción está fuera del rango
permitido para el tipo de datos indicado en la salida OUT (solo válido para números enteros).

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P o
constante

Valor de entrada

<Resultado>

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Complemento a dos del valor
de entrada

Programación del PLC
Manual de programación y manejo, 11/2019

5719

Instrucciones
4.2 Instrucciones
En la lista desplegable "???" puede seleccionar el tipo de datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
GRAPH
"Tag_OutValue" := NEG_REAL("Tag_InValue")

La instrucción cambia el signo del valor en el operando "TagIn_Value" e indica el resultado en
el operando "TagOut_Value".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Principios básicos de GRAPH (Página 8191)

ABS: Calcular valor absoluto
Descripción
Con la instrucción "Calcular valor absoluto" se calcula el valor absoluto del valor del operando.
El valor del resultado no es válido si un número en coma flotante presenta un valor no válido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

<Operando>

Input

Números en coma
flotante

I, Q, M, D, L, P o
constante

Valor de entrada

<Resultado>

Output

Números en coma
flotante

I, Q, M, D, L, P

Valor absoluto del valor de
entrada

Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
GRAPH
"Tag_OutValue" := ABS("Tag_InValue")

5720

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Operando

Valor

TagIn_Value

-6,234

TagOut_Value

6,234

La instrucción calcula el valor absoluto del valor del operando "Tag_InValue" e indica el
resultado en el operando "Tag_OutValue".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Principios básicos de GRAPH (Página 8191)

MIN: Determinar mínimo
Descripción
La instrucción "Determinar mínimo" compara los valores de las entradas IN1, IN2 e IN3 y
escribe el valor menor en la salida OUT. Para poder ejecutar la instrucción, es imprescindible
que las variables de todas las entradas sean del mismo tipo de datos.
El valor de la salida OUT no es válido si se cumple una de las siguientes condiciones:
● Las variables indicadas no son del mismo tipo de datos.
● Un número en coma flotante tiene un valor no válido.
Nota
En caso de que la verificación CEI esté desactivada, se permiten únicamente los tipos de datos
INT, DINT y REAL. Si utiliza los tipos de datos WORD o DWORD en los parámetros de entrada,
la instrucción devolverá un resultado no definido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Primer valor de entrada

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Segundo valor de entrada

Programación del PLC
Manual de programación y manejo, 11/2019

5721

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN3

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Tercer valor de entrada

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Resultado

En la lista desplegable "???" puede seleccionar el tipo de datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
GRAPH
CALL MIN INT
(IN1 := "TagIn_Value1"
IN2 := "TagIn_Value2"
IN3 := "TagIn_Value3"
OUT => "Tag_Minimum"
)

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN1

TagIn_Value1

12222

IN2

TagIn_Value2

14444

IN3

TagIn_Value3

13333

OUT

Tag_Minimum

12222

La instrucción compara los valores de los operandos indicados y copia el valor menor
("TagIn_Value1") en la salida "Tag_Minimum".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Principios básicos de GRAPH (Página 8191)

MAX: Determinar máximo
Descripción
La instrucción "Determinar máximo" compara los valores de las entradas IN1, IN2 e IN3 y
escribe el valor mayor en la salida OUT. Para poder ejecutar la instrucción, es imprescindible
que las variables de todas las entradas sean del mismo tipo de datos.

5722

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
El valor de la salida OUT no es válido si se cumple una de las siguientes condiciones:
● Las variables indicadas no son del mismo tipo de datos.
● Un número en coma flotante tiene un valor no válido.
Nota
En caso de que la verificación CEI esté desactivada, se permiten únicamente los tipos de datos
INT, DINT y REAL. Si utiliza los tipos de datos WORD o DWORD en los parámetros de entrada,
la instrucción devolverá un resultado no definido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

IN1

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Primer valor de entrada

IN2

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Segundo valor de entrada

IN3

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Tercer valor de entrada

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Resultado

En la lista desplegable "???" puede seleccionar el tipo de datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
GRAPH
CALL MAX INT
(IN1 := "TagIn_Value1"
IN2 := "TagIn_Value2"
IN3 := "TagIn_Value3"
OUT => "Tag_Maximum"
)

La tabla siguiente muestra el funcionamiento de la instrucción con valores de operandos
concretos:
Parámetro

Operando

Valor

IN1

TagIn_Value1

12666

IN2

TagIn_Value2

14444

IN3

TagIn_Value3

13333

OUT

TagOut_Value

14444

Programación del PLC
Manual de programación y manejo, 11/2019

5723

Instrucciones
4.2 Instrucciones
La instrucción compara los valores de los operandos indicados y copia el valor mayor
("TagIn_Value2") en la salida "Tag_Maximum".

Consulte también
Vista general de los tipos de datos válidos (Página 241)
Principios básicos de la palabra de estado (Página 184)
Principios básicos de GRAPH (Página 8191)

LIMIT: Ajustar valor límite
Descripción
La instrucción "Ajustar valor límite" limita el valor de la entrada IN a los valores de las entradas
MN y MX. Si el valor de la entrada IN cumple la condición MN <= IN <= MX, se copia en la salida
OUT. Si no se cumple la condición y el valor de entrada IN es menor que el límite inferior MN,
la salida OUT adopta el valor de la entrada MN. Si el límite superior MX se rebasa por exceso,
la salida OUT adopta el valor de la entrada MX.
Si el valor de la entrada MN es mayor que el de la entrada MX, el resultado no está definido.
Para poder ejecutar la instrucción, es imprescindible que las variables de todas las entradas
sean del mismo tipo de datos.
El valor de la salida OUT no es válido si se cumple una de las siguientes condiciones:
● Las variables indicadas no son del mismo tipo de datos.
● Un operando tiene un valor no válido.
● El valor de la entrada MN es mayor que el valor de la entrada MX.
Nota
En caso de que la verificación CEI esté desactivada, se permiten únicamente los tipos de datos
INT, DINT y REAL. Si utiliza los tipos de datos WORD o DWORD en los parámetros de entrada,
la instrucción devolverá un resultado no definido.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción:

5724

Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

MN

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Límite inferior

IN

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Valor de entrada

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.2 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

MX

Input

Enteros, números
en coma flotante

I, Q, M, D, L, P

Límite superior

OUT

Output

Enteros, números
en coma flotante

I, Q, M, D, L, P

Resultado

En la lista desplegable "???" puede seleccionar el tipo de datos de la instrucción.
Encontrará más información sobre los tipos de datos válidos en "Consulte también".

Ejemplo
El siguiente ejemplo muestra el funcionamiento de la instrucción:
GRAPH
CALL LIMIT INT
(MN := "Tag_LowLimit"
IN := "Tag_InputValue"
MX := "Tag_HighLimit"