bject is disabled, the axis
brakes to a standstill without jerk limit, using the
emergency stop deceleration configured in "Tech‐
nology object > Configuration > Extended parame‐
ters > Emergency stop ramp". The enable is then
canceled.
(<TO>.DynamicDefaults.
EmergencyDeceleration)

1

Immediate stop
When a technology object is disabled, the setpoint
zero is output, and the enable is canceled. The axis
is braked to a standstill according to the configura‐
tion in the drive.

2

Stop with maximum dynamic values
When the technology object is disabled, the axis is
braked to a standstill using the maximum decelera‐
tion configured in "Technology object > Configura‐
tion > Extended parameters > Dynamic limits". The
configured maximum jerk is hereby taken into ac‐
count. The enable is then canceled.
(<TO>.DynamicLimits.MaxDeceleration;
<TO>.DynamicLimits.MaxJerk)

Status

OUTPUT

BOOL

FALSE

Technology object enable status
FALSE Disabled
‑ A positioning axis or speed axis does not accept
any Motion Control jobs.
‑ Speed control and position control are not active.
‑ The actual values of the technology object are not
checked for validity.
TRUE

Enabled
‑ An enabled positioning axis or speed axis accepts
Motion Control jobs.
‑ Speed control and position control are active.
- The actual values of the technology object are va‐
lid.

Busy

OUTPUT

BOOL

FALSE

TRUE

Job is running.

Error

OUTPUT

BOOL

FALSE

TRUE

An error occurred in Motion Control instruction
MC_Power. The cause of the error can be found in
the "ErrorID" parameter.

ErrorID

OUTPUT

WORD

16#0000

Error ID for parameter "ErrorID"

3572

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Enabling technology objects
To enable a technology object, set the "Enable" parameter to TRUE.
When the Status parameter shows the value TRUE , the technology object is enabled.
If an axis is in motion when the technology object is enabled (actual velocity is present), the axis
brakes to the setpoint zero, using the maximum deceleration configured in "Technology object
> Configuration > Extended parameters > Dynamic limits"
(<TO>.DynamicLimits.MaxDeceleration). This braking ramp can be overridden by Motion
Control jobs.
Nota
Automatic enable after acknowledgment of a technology alarm
If the technology object is disabled due to a technology alarm, it will automatically be enabled
again after the cause has been eliminated and the alarm has been acknowledged. This
requires the "Enable" parameter to have retained the value TRUE during this process.

Disabling technology objects
To disable a technology object, set the "Enable" parameter to FALSE.
If an axis is in motion, it is braked to a standstill according to the selected "StopMode".
When the "Busy" and "Status" parameters show the value FALSE , the disabling of the
technology object is complete.

Drive connection by means of PROFIdrive
When a drive is connected using PROFIdrive, the setpoint, enable and drive status are
transmitted via the PROFIdrive telegram.
● Enable technology object and activate drive
With parameter "Enable" = TRUE, the technology object is enabled. The drive is enabled
according to the PROFIdrive standard.
When the tag <TO>.StatusDrive.InOperation shows the value TRUE , the drive is ready to
execute setpoints. The "Status" parameter is set to the value TRUE .
● Disable technology object and deactivate drive
With parameter "Enable" = FALSE, the "Status" parameter is set to the value FALSE, and
the axis is braked according to the selected "StopMode". The drive is disabled according to
the PROFIdrive standard.

Programación del PLC
Manual de programación y manejo, 11/2019

3573

Instrucciones
4.1 Instrucciones

Analog drive connection
The setpoint is output via an analog output. Optionally, you can configure an enabling signal via
digital output (<TO>.Actor.Interface.EnableDriveOutput), and a readiness signal via digital
input (<TO>.Actor.Interface.DriveReadyInput).
● Enable technology object and activate drive
With parameter "Enable" = TRUE, the enable output ("Enable drive output") is set.
When the drive returns the readiness signal via the ready input ("Drive ready input"), the
"Status" parameter and the technology object's <TO>.StatusDrive.InOperation tag are set
to TRUE, and the setpoint is switched to the analog output.
● Disable technology object and deactivate drive
With parameter "Enable" = FALSE, the "Status" parameter is set to the value FALSE, and
the axis is braked according to the selected "StopMode". When the setpoint zero is reached,
the enable output is set to FALSE.

Additional information
Additional information on enabling and disabling technology objects and drives can be found in
the appendix, MC_Power Function Charts.

3574

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

MC_Power: Function chart V1
Function chart: Enabling a technology object, and example for alarm response
$

$
0&B3RZHU
72B
(QDEOHB


0&B0RYH9HORFLW\

$[LV
(QDEOH
6WRS0RGH

6WDWXV
%XV\
(UURU
(UURU,'


)%

)%

6WDWXVB
%XV\B
(UURUB

72B
([HB









$[LV
,Q9HORFLW\
([HFXWH
%XV\
9HORFLW\ &RPPDQG$ERUWHG
(UURU
$FFHOHUDWLRQ
'HFHOHUDWLRQ
(UURU,'
-HUN
'LUHFWLRQ
&XUUHQW

(5525



(QDEOHB




W

%XV\B




W

6WDWXVB




W

(UURUB




W

([HB




W

72B
$FWXDO9HORFLW\




W

A technology object is enabled with "Enable_1= TRUE". Successful enabling can be read from
"Status_1" at time ①. The axis will then move with an "MC_MoveVelocity" job (A2). The velocity
profile of the axis can be read from "Velocity Axis_1".
At time ② an error occurs in the technology object, which results in the disabling of the
technology object (alarm response: Remove enable). The axis is braked depending on the
configuration in the drive, and is brought to a standstill. When the technology object is disabled,
Status_1 is reset. Since the axis was not disabled using "Enable_1" = FALSE, the selected
"StopMode" does not apply. The cause of the error is corrected and the alarm is acknowledged
at time ③.
Since "Enable_1" is still set, the technology object is enabled again. Successful enabling can
be read from "Status_1". Next the technology object is disabled with "Enable_1" = FALSE.

Programación del PLC
Manual de programación y manejo, 11/2019

3575

Instrucciones
4.1 Instrucciones

MC_Reset V1
MC_Reset: Acknowledge alarms, restart technology object V1
Description
With the Motion Control instruction "MC_Reset", you acknowledge all technology alarms that
can be acknowledged in the user program. Acknowledgment also resets the "Error" and
"Warning" bits in the technology data block.
With the Motion Control instruction "MC_Reset" with "Restart" = TRUE, you start reinitialization
(restart) of technology objects. Upon restart of the technology object, the new configuration
data are applied in the technology data block.

Applies to
● Positioning axis
● Speed axis
● External encoder

Requirements
● The cause of the error has been resolved for a pending technology alarm.
● For a restart, the technology object must be disabled.
("MC_Power.Status" = FALSE and "MC_Power.Busy" = FALSE)

Override response
● Parameter "Restart" = FALSE:
Processing of the "MC_Reset" instruction can be aborted by other Motion Control jobs. The
MC_Reset job does not abort any running Motion Control jobs.
● Parameter "Restart" = TRUE:
Processing of the "MC_Reset" instruction with parameter "Restart" = TRUE cannot be
aborted by any other Motion Control job.

Parameters
The following table shows the parameters of the "MC_Reset" Motion Control instruction:
Parameter

Declaration

Data type

Default value

Description

Axis

InOut

TO_Axis

-

Technology object

Execute

INPUT

BOOL

FALSE

Start job with a positive edge

3576

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parameter

Declaration

Data type

Default value

Description

Restart

INPUT

BOOL

FALSE

TRUE

"Restart"
Reinitialization of the technology object and ack‐
nowledgment of pending technology alarms. The
technology object is reinitialized with the configured
start values.

FALSE Acknowledgment of queued technology alarms.
Done

OUTPUT

BOOL

FALSE

TRUE

Error has been acknowledged.

Busy

OUTPUT

BOOL

FALSE

TRUE

Job is running.

Comman‐
dAborted

OUTPUT

BOOL

FALSE

TRUE

The job was aborted by another job during execu‐
tion.

Error

OUTPUT

BOOL

FALSE

TRUE

An error occurred during execution of the job. The
job is rejected. The cause of the error can be found
in the "ErrorID" parameter.

ErrorID

OUTPUT

WORD

16#0000

Error ID for parameter "ErrorID"

Restart has been executed.

Acknowledging technology alarms
To acknowledge technology alarms, follow these steps:
1. Check the requirements indicated above.
2. Set parameter "Restart" = FALSE.
3. Start the acknowledgment of the error with a positive edge at parameter "Execute".
When the Done parameter shows the value TRUE, the error has been acknowledged.
Nota
Acknowledging with "Restart" = FALSE
If only the technology alarms are to be acknowledged, set "Restart" = FALSE. The technology
object cannot be used during a restart.

Restarting a technology object
To restart a technology object, follow these steps:
1. Check the requirements indicated above.
2. Set parameter "Restart" = TRUE.
3. Perform the restart with a positive edge at parameter "Execute".
When the "Done" parameter shows the value TRUE, the restart of the technology object is
complete.
Additional information regarding the restart can be found in the Restarting technology objects
section.

Programación del PLC
Manual de programación y manejo, 11/2019

3577

Instrucciones
4.1 Instrucciones

MC_Home V1
MC_Home: Home technology objects, set home position V1
Description
With the Motion Control instruction "MC_Home", you create the relationship between the
position in the technology object and the mechanical position. The actual position value in the
technology object is assigned to a homing mark at the same time. This homing mark represents
a known mechanical position.
Homing is performed according to the mode selected with the "HomingMode" parameter and
the configuration under "Technology object > Configuration > Extended parameters > Homing".
The preset values under "Technology object > Configuration > Extended parameters >
Dynamic default values" are used for the dynamic values Acceleration, Deceleration and Jerk.

Applies to
● Positioning axis
● External encoder
The following table shows which modes are possible with each of the technology objects:
Operating mode

Positioning axis with in‐
cremental encoder

Positioning axis with
absolute encoder

External incremental
encoder

External absolute en‐
coder

Active homing (Ho‐
mingMode = 4, 5)

X

-

-

-

Passive homing (Ho‐
mingMode = 2, 3, 8)

X

-

X

-

Setting a positioning
value

X

X

X

X

X

X

X

X

-

X

-

X

("HomingMode" = 0)
Relative shift of the ac‐
tual value
("HomingMode" = 1)
Homing absolute enco‐
der
("HomingMode" = 6, 7)

Requirements
● The technology object has been configured correctly.
● HomingMode" = 2, 3, 4, 5, 8
The technology object must be enabled.
● HomingMode" = 0, 1, 2, 6, 7
The encoder values must be valid. (<TO>.StatusSensor[n].State = 2)

3578

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Override response
● An MC_Home job for passive homing is aborted by:
– Disabling the technology object with "MC_Power.Enable" = FALSE
– "MC_Home" command with parameter "HomingMode" = 4, 5, 9
● An "MC_Home" job for passive homing does not abort any other Motion Control jobs.
● An "MC_Home" job for active homing is aborted by:
– Disabling the technology object with "MC_Power.Enable" = FALSE
– "MC_Home" command "HomingMode" = 4, 5
– "MC_Halt" command
– "MC_MoveAbsolute" command
– "MC_MoveRelative" command
– "MC_MoveVelocity" command
– "MC_MoveJog" command
● An "MC_Home" job for active homing aborts the following active Motion Control jobs.
– MC_Home" command with parameter "HomingMode" = 2, 3, 4, 5
– "MC_Halt" command
– "MC_MoveAbsolute" command
– "MC_MoveRelative" command
– "MC_MoveVelocity" command
– "MC_MoveJog" command

Parameters
The following table shows the parameters of the "MC_Home" Motion Control instruction:
Parameter

Declaration

Data type

Default value

Description

Axis

InOut

TO_Axis

-

Technology object

Execute

INPUT

BOOL

FALSE

Start job with a positive edge

Position

INPUT

LREAL

0.0

The specified value is used according to the selected
"HomingMode".

Programación del PLC
Manual de programación y manejo, 11/2019

3579

Instrucciones
4.1 Instrucciones
Parameter

Declaration

Data type

Default value

Description

HomingMode

INPUT

INT

4

Operating mode
0

Direct homing (absolute)
The current position of the technology object
is set to the value of parameter "Position".

1

Direct homing (relative)
The current position of the technology object
is shifted by the value of parameter "Posi‐
tion".

2

Passive homing
When the homing mark is detected, the ac‐
tual value is set to the value of the "Position"
parameter.

3

Passive homing
("Position" parameter has no effect)
When the homing mark is detected, the ac‐
tual value is set to the home position confi‐
gured under "Technology object > Configu‐
ration > Extended parameters > Homing >
Passive homing".
(<TO>.Homing.HomePosition)

4

Active homing
The TO positioning axis performs a homing
movement according to the configuration.
After the completion of the movement, the
axis is positioned at the value of the "Posi‐
tion" parameter.

5

Active homing
("Position" parameter has no effect)
The TO positioning axis performs a homing
movement according to the configuration.
After completion of the movement, the axis
is positioned at the home position configu‐
red under "Technology object > Configura‐
tion > Extended parameters > Homing > Ac‐
tive homing".
(<TO>.Homing.HomePosition)

6

Absolute encoder adjustment (relative)
The current position is shifted by the value of
parameter "Position".
The calculated absolute value offset is sto‐
red retentively in the CPU.
(<TO>.StatusSensor[n].
AbsEncoderOffset)

7

Absolute encoder adjustment (absolute)
The current position is set to the value of
parameter "Position".
The calculated absolute value offset is sto‐
red retentively in the CPU.

3580

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parameter

Declaration

Data type

Default value

Description
(<TO>.StatusSensor[n].
AbsEncoderOffset)
8

Passive homing
(without reset)
Functions like "HomingMode" 2, with the dif‐
ference that the "homed" status is not reset
when the function is enabled.

9

Abort passive homing
An active job for passive homing is aborted.

Done

OUTPUT

BOOL

FALSE

TRUE

Job is completed.

Busy

OUTPUT

BOOL

FALSE

TRUE

Job is running.

CommandAborted

OUTPUT

BOOL

FALSE

TRUE

The job was aborted by another job during
execution.

Error

OUTPUT

BOOL

FALSE

TRUE

An error occurred during execution of the
job. The job is rejected. The cause of the
error can be found in the "ErrorID" parame‐
ter.

ErrorID

OUTPUT

WORD

16#0000

Error ID for parameter "ErrorID"

Resetting the "Homed" status
The "Homed" status of a technology object is reset under the following conditions
(<TO>.StatusWord.X5 (HomingDone)):
● Technology objects with incremental actual values:
– Starting an "MC_Home" job with "HomingMode" = 2, 3, 4, 5
(After successful completion of the homing operation, the "Homed" status is reset.)
– Error in the encoder system, or encoder failure
– Restart of the technology object
– After POWER OFF -> POWER ON of the CPU
– Memory reset
– Modification of the encoder configuration
● Technology objects with absolute actual values:
– Restoration of the CPU factory settings
– Modification of the encoder configuration
– Replacement of the CPU

Programación del PLC
Manual de programación y manejo, 11/2019

3581

Instrucciones
4.1 Instrucciones

Homing a technology object with "HomingMode" = 1..8
To home a technology object, follow these steps:
1. Check the requirements indicated above.
2. Specify the desired homing function in the "HomingMode" parameter.
3. Initialize the necessary parameters with values, and start the homing operation with a
positive edge at the "Execute" parameter.
When the "Done" parameter shows the value TRUE, the "MC_Home" job has been completed
according to the selected "HomingMode". The "Homed" status of the technology object is
indicated under "Technology object > Diagnostics > Status and error bits > Motion status >
Homed" (<TO>.StatusWord.X5 (HomingDone)).

Termination of a passive homing process with "HomingMode" = 9
With "HomingMode" = 9, the technology object is not homed. If a running "MC_Home" job for
passive homing ("HomingMode" = 2, 3, 8) is overridden by another "MC_Home" job with
"HomingMode" = 9, then the running job is terminated with the parameter "CommandAborted"
= TRUE. The overriding job with "HomingMode" = 9 signals successful execution with
parameter "Done" = TRUE.

Additional information
An option for the evaluation of the individual status bits can be found in the Evaluating
StatusWord, ErrorWord and WarningWord section.

MC_Halt V1
MC_Halt: Halt axis V1
Description
With the Motion Control instruction "MC_Halt", you brake an axis until it comes to a standstill.
You define the dynamic behavior of the braking operation with parameters "Jerk" and
"Deceleration".

Applies to
● Positioning axis
● Speed axis

Requirements
● The technology object has been configured correctly.
● The technology object has been enabled.

3582

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Override response
The "MC_Halt" job is aborted by:
● Disabling the axis with "MC_Power.Enable" = FALSE
● "MC_Home" command "HomingMode" = 4, 5
● "MC_Halt" command
● "MC_MoveAbsolute" command
● "MC_MoveRelative" command
● "MC_MoveVelocity" command
● "MC_MoveJog" command
Starting a "MC_Halt" job aborts the following active Motion Control jobs:
● "MC_Home" command "HomingMode" = 4, 5
● "MC_Halt" command
● "MC_MoveAbsolute" command
● "MC_MoveRelative" command
● "MC_MoveVelocity" command
● "MC_MoveJog" command

Parameters
The following table shows the parameters of the "MC_Halt" Motion Control instruction:
Parameter

Declaration

Data type

Default value

Description

Axis

InOut

TO_SpeedAxis

-

Technology object

Execute

INPUT

BOOL

FALSE

Start job with a positive edge

Deceleration

INPUT

LREAL

-1.0

Deceleration
Value > 0.0: The specified value is used.
Value = 0.0: not permitted
Value < 0.0: The deceleration configured in "Techno‐
logy object > Configuration > Extended parameters >
Dynamic defaults" is used.
(<TO>.DynamicDefaults.Deceleration)

Jerk

INPUT

LREAL

-1.0

Jerk
Value > 0.0: Constant-acceleration velocity profile;
the specified jerk is used
Value = 0.0: Trapezoid velocity profile
Value < 0.0: The jerk configured in "Technology object
> Configuration > Extended parameters > Dynamic
defaults" is used.
(<TO>.DynamicDefaults.Jerk)

Done

OUTPUT

BOOL

FALSE

TRUE

Zero velocity reached

Busy

OUTPUT

BOOL

FALSE

TRUE

Job is running.

Programación del PLC
Manual de programación y manejo, 11/2019

3583

Instrucciones
4.1 Instrucciones
Parameter

Declaration

Data type

Default value

Description

CommandAborted

OUTPUT

BOOL

FALSE

TRUE

The job was aborted by another job during
execution.

Error

OUTPUT

BOOL

FALSE

TRUE

An error occurred during execution of the
job. The job is rejected. The cause of the
error can be found in the "ErrorID" parame‐
ter.

ErrorID

OUTPUT

WORD

16#0000

Error ID for parameter "ErrorID"

Braking an axis with "MC_Halt"
Proceed as follows to decelerate an axis to a standstill:
1. Check the requirements indicated above.
2. Supply the parameters "Deceleration" and "Jerk" with the desired values.
3. Start the "MC_Halt" job with a positive edge at parameter "Execute".
The current motion state is indicated in "Busy", "Done" and "Error". The standstill of the axis is
indicated under "Technology object > Diagnostics > Status and error bits > Motion status >
Standstill" (<TO>.StatusWord.X7 (Standstill)).

Additional information
An option for the evaluation of the individual status bits can be found in the Evaluating
StatusWord, ErrorWord and WarningWord section.

3584

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

MC_Halt: Function chart V1
Function chart: Stopping an axis, and the response to an overriding job
$

$
0&B0RYH9HORFLW\
72B
([HB







$[LV
,Q9HORFLW\
%XV\
([HFXWH
9HORFLW\ &RPPDQG$ERUWHG
$FFHOHUDWLRQ
(UURU
'HFHOHUDWLRQ
(UURU,'
-HUN
'LUHFWLRQ
&XUUHQW


)%

0&B+DOW
,Q9HOB
%XV\B
$ERUWB

72B
([HB



$[LV
'RQH
%XV\
([HFXWH
'HFHOHUDWLRQ &RPPDQG$ERUWHG
(UURU
-HUN
(UURU,'

'RQHB
%XV\B
$ERUWB



,Q9HOB






W

%XV\B




W

$ERUWB




W

([HB

)%

W

'RQHB






W

%XV\B




W

$ERUWB




W

([HB

W


72B
9HORFLW\



W

$
Section

$
Section

%

%

An axis is moved with an "MC_MoveVelocity" job (A1). When the setpoint velocity 50.0 is reached, this is signaled
via "InVel_1". At time ①, the "MC_MoveVelocity" job is overridden by an "MC_Halt" job (A2). The job termination
is signaled via "Abort_1". The axis is braked to a standstill. Successful completion of the "MC_Halt" job is signaled
via "Done_2".
The axis is moved with an "MC_MoveVelocity" job (A1). When the setpoint velocity 50.0 is reached, this is signaled
via "InVel_1". Next the "MC_MoveVelocity" job is overridden by an "MC_Halt" job (A2). The job termination is
signaled via "Abort_1". During the braking process the "MC_Halt" job is overridden at time ② by an "MC_Move‐
Velocity" job (A1). The job termination is signaled via "Abort_2". When the setpoint velocity 50.0 is reached, this
is signaled via "InVel_1". The axis is then moved with constant velocity.

Programación del PLC
Manual de programación y manejo, 11/2019

3585

Instrucciones
4.1 Instrucciones

MC_MoveAbsolute V1
MC_MoveAbsolute: Absolute positioning of axis V1
Description
With the Motion Control instruction "MC_MoveAbsolute", you can move an axis to an absolute
position.
You define the dynamic behavior of the motion with parameters "Velocity", "Jerk",
"Acceleration" and "Deceleration".

Applies to
● Positioning axis

Requirements
● The technology object has been configured correctly.
● The technology object has been enabled.
● The technology object is homed.

Override response
The "MC_MoveAbsolute" job is aborted by:
● Disabling the axis with "MC_Power.Enable" = FALSE
● "MC_Home" command "HomingMode" = 4, 5
● "MC_Halt" command
● "MC_MoveAbsolute" command
● "MC_MoveRelative" command
● "MC_MoveVelocity" command
● "MC_MoveJog" command
The start of an "MC_MoveAbsolute" job aborts the following active Motion Control jobs:
● "MC_Home" command "HomingMode" = 4, 5
● "MC_Halt" command
● "MC_MoveAbsolute" command
● "MC_MoveRelative" command
● "MC_MoveVelocity" command
● "MC_MoveJog" command

3586

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parameters
The following table shows the parameters of the "MC_MoveAbsolute" Motion Control
instruction:
Parameters

Declaration

Data type

Default value

Description

Axis

InOut

TO_Positionin‐
gAxis

-

Technology object

Execute

INPUT

BOOL

FALSE

Start job with a positive edge

Position

INPUT

REAL

0.0

Absolute target position

Velocity

INPUT

LREAL

-1.0

Velocity setpoint for the positioning
Value > 0.0: The specified value is used.
Value = 0.0: Not permitted
Value < 0.0: The velocity configured in "Technology
object > Configuration > Extended parameters >
Dynamic defaults" is used.
(<TO>.DynamicDefaults.Velocity)

Acceleration

INPUT

LREAL

-1.0

Acceleration
Value > 0.0: The specified value is used.
Value = 0.0: Not permitted
Value < 0.0: The acceleration configured in "Techno‐
logy object > Configuration > Extended parameters >
Dynamic defaults" is used.
(<TO>.DynamicDefaults.Acceleration)

Deceleration

INPUT

LREAL

-1.0

Deceleration
Value > 0.0: The specified value is used.
Value = 0.0: Not permitted
Value < 0.0: The deceleration configured in "Techno‐
logy object > Configuration > Extended parameters >
Dynamic defaults" is used.
(<TO>.DynamicDefaults.Deceleration)

Jerk

INPUT

LREAL

-1.0

Jerk
Value > 0.0: Constant-acceleration velocity profile;
the specified jerk is used
Value = 0.0: Trapezoid velocity profile
Value < 0.0: The jerk configured in "Technology object
> Configuration > Extended parameters > Dynamic
defaults" is used.
(<TO>.DynamicDefaults.Jerk)

Direction

INPUT

INT

1

Direction of rotation of the axis
Is only evaluated with "modulo" enabled.
"Technology object > Configuration > Basic parame‐
ters > Enable modulo
1

Positive direction of rotation

2

Negative direction of rotation

3

Shortest path

Done

OUTPUT

BOOL

FALSE

TRUE

Target position reached.

Busy

OUTPUT

BOOL

FALSE

TRUE

Job is running.

Programación del PLC
Manual de programación y manejo, 11/2019

3587

Instrucciones
4.1 Instrucciones
Parameters

Declaration

Data type

Default value

Description

CommandAborted

OUTPUT

BOOL

FALSE

TRUE

The job was aborted by another job during
execution.

Error

OUTPUT

BOOL

FALSE

TRUE

An error occurred during execution of the
job. The job is rejected. The cause of the
error can be found in the "ErrorID" parame‐
ter.

ErrorID

OUTPUT

WORD

16#0000

Error ID for parameter "ErrorID"

Moving an axis to an absolute position
Proceed as follows to move an axis to an absolute position:
1. Check the requirements indicated above.
2. Specify the desired target position in the "Position" parameter.
3. Start the "MC_MoveAbsolute" job with a positive edge at parameter "Execute".
The current motion state is indicated in "Busy", "Done" and "Error".

3588

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

MC_MoveAbsolute: Function chart V1
Function chart: Absolute positioning of an axis, and the response to an overriding job
$

$

0&B0RYH$EVROXWH

0&B0RYH$EVROXWH
72B
([HB







'RQH
$[LV
%XV\
([HFXWH
3RVLWLRQ &RPPDQG$ERUWHG
9HORFLW\
(UURU
$FFHOHUDWLRQ
(UURU,'
'HFHOHUDWLRQ
-HUN
'LUHFWLRQ


)%
([HB
'RQHB
%XV\B
$ERUWB

)%
([HB
'RQHB

'RQHB
%XV\B
$ERUWB

72B
([HB







$[LV
'RQH
%XV\
([HFXWH
3RVLWLRQ &RPPDQG$ERUWHG
(UURU
9HORFLW\
$FFHOHUDWLRQ
(UURU,'
'HFHOHUDWLRQ
-HUN
'LUHFWLRQ

'RQHB
%XV\B







W




W



W


W




W





W


%XV\B

W






72B
9HORFLW\ 

W



72B
3RVLWLRQ 

W

$

Programación del PLC
Manual de programación y manejo, 11/2019

%

3589

Instrucciones
4.1 Instrucciones

Section

$
Section

%

An axis is moved to absolute position 1000.0 with an "MC_MoveAbsolute" job (A1). When the axis reaches the
target position, this is signaled at time ① via "Done_1". At this time ①, another "MC_MoveAbsolute" job (A2) with
target position 1500.0 is started. When the axis reaches the target position 1500.0, this is signaled via "Done_2".
Since "Exe_2" was previously reset, "Done_2" is applied only to one cycle.
A running "MC_MoveAbsolute" job (A1) is overridden at time ② by another "MC_MoveAbsolute" job (A2). The
abort is signaled via "Abort_1". The axis is braked to the changed velocity and moved to the new target position
1500.0. When the new target position is reached, this is signaled via "Done_2".

MC_MoveRelative V1
MC_MoveRelative: Relative positioning of axis V1
Description
With the Motion Control instruction "MC_MoveRelative", you move an axis relative to its
position when execution of the job began.
You define the dynamic behavior of the motion with parameters "Velocity", "Jerk",
"Acceleration" and "Deceleration".

Applies to
● Positioning axis

Requirements
● The technology object has been configured correctly.
● The technology object has been enabled.

Override response
The "MC_MoveRelative" job is aborted by:
● Disabling the axis with "MC_Power.Enable" = FALSE
● "MC_Home" command "HomingMode" = 4, 5
● "MC_Halt" command
● "MC_MoveAbsolute" command
● "MC_MoveRelative" command
● "MC_MoveVelocity" command
● "MC_MoveJog" command
Starting a "MC_MoveRelative" job aborts the following active Motion Control jobs:
● "MC_Home" command "HomingMode" = 4, 5
● "MC_Halt" command

3590

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
● "MC_MoveAbsolute" command
● "MC_MoveRelative" command
● "MC_MoveVelocity" command
● "MC_MoveJog" command

Parameters
The following table shows the parameters of the "MC_MoveRelative" Motion Control
instruction:
Parameter

Declaration

Data type

Default value

Description

Axis

InOut

TO_Positionin‐
gAxis

-

Technology object

Execute

INPUT

BOOL

FALSE

Start job with a positive edge

Distance

INPUT

LREAL

0.0

Distance for the positioning process
(negative or positive)

Velocity

INPUT

LREAL

-1.0

Velocity setpoint for the positioning
Value > 0.0: The specified value is used.
Value = 0.0: not permitted
Value < 0.0: The velocity configured in "Technology
object > Configuration > Extended parameters >
Dynamic defaults" is used.
(<TO>.DynamicDefaults.Velocity)

Acceleration

INPUT

LREAL

-1.0

Acceleration
Value > 0.0: The specified value is used.
Value = 0.0: not permitted
Value < 0.0: The acceleration configured in "Techno‐
logy object > Configuration > Extended parameters >
Dynamic defaults" is used.
(<TO>.DynamicDefaults.Acceleration)

Deceleration

INPUT

LREAL

-1.0

Deceleration
Value > 0.0: The specified value is used.
Value = 0.0: not permitted
Value < 0.0: The deceleration configured in "Techno‐
logy object > Configuration > Extended parameters >
Dynamic defaults" is used.
(<TO>.DynamicDefaults.Deceleration)

Jerk

INPUT

LREAL

-1.0

Jerk
Value > 0.0: Constant-acceleration velocity profile;
the specified jerk is used
Value = 0.0: Trapezoid velocity profile
Value < 0.0: The jerk configured in "Technology object
> Configuration > Extended parameters > Dynamic
defaults" is used.
(<TO>.DynamicDefaults.Jerk)

Done

OUTPUT

BOOL

FALSE

TRUE

Target position reached

Busy

OUTPUT

BOOL

FALSE

TRUE

Job is running.

Programación del PLC
Manual de programación y manejo, 11/2019

3591

Instrucciones
4.1 Instrucciones
Parameter

Declaration

Data type

Default value

Description

CommandAborted

OUTPUT

BOOL

FALSE

TRUE

The job was aborted by another job during
execution.

Error

OUTPUT

BOOL

FALSE

TRUE

An error occurred during execution of the
job. The job is rejected. The cause of the
error can be found in the "ErrorID" parame‐
ter.

ErrorID

OUTPUT

WORD

16#0000

Error ID for parameter "ErrorID"

Moving an axis relative to the starting position
Proceed as follows to move an axis relative to the starting position:
1. Check the requirements indicated above.
2. Specify distance to be moved in the "Distance" parameter.
3. Start the "MC_MoveRelative" job with a positive edge at parameter "Execute".
The current motion state is indicated in "Busy", "Done" and "Error".

3592

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

MC_MoveRelative: Function chart V1
Function chart: Relative positioning of an axis, and the response to an overriding job
$

$

0&B0RYH5HODWLYH
72B
([HB






0&B0RYH5HODWLYH

'RQH
$[LV
([HFXWH
%XV\
'LVWDQFH &RPPDQG$ERUWHG
(UURU
9HORFLW\
$FFHOHUDWLRQ
(UURU,'
'HFHOHUDWLRQ
-HUN

'RQHB
%XV\B
$ERUWB


)%
([HB
%XV\B
'RQHB
$ERUWB
)%
([HB
%XV\B
'RQHB

72B
9HORFLW\

$[LV
'RQH
([HFXWH
%XV\
'LVWDQFH &RPPDQG$ERUWHG
(UURU
9HORFLW\
(UURU,'
$FFHOHUDWLRQ
'HFHOHUDWLRQ
-HUN

'RQHB
%XV\B




W




W




W




W






W



W


W





W





72B
3RVLWLRQ

72B
([HB











W

$

Programación del PLC
Manual de programación y manejo, 11/2019

%

3593

Instrucciones
4.1 Instrucciones

Section

$
Section

%

The axis is moved by an "MC_MoveRelative" job (A1) by the distance ("Distance") 1000.0 (the starting position
here is 0.0). When the axis reaches the target position, this is signaled at time ① via "Done_1". At this time ①,
another "MC_MoveRelative" job (A2) with distance 500.0 is started. When the axis reaches the new target posi‐
tion, this is signaled via "Done_2". Since "Exe_2" was previously reset, "Done_2" is applied only to one cycle.
A running "MC_MoveRelative" job (A1) is overridden by another "MC_MoveRelative" job (A2). The abort is sig‐
naled at time ② via "Abort_1". The axis is then moved at the new velocity by the distance ("Distance") 500.0.
When the new target position is reached, this is signaled via "Done_2".

MC_MoveVelocity V1
MC_MoveVelocity: Move axis at set velocity/speed V1
Description
With the Motion Control instruction "MC_MoveVelocity", you move an axis at constant velocity/
speed.
You define the dynamic behavior of the motion with parameters"Velocity", "Jerk",
"Acceleration" and "Deceleration".
● Positioning axis:
A velocity is specified in the "Velocity" parameter.
● Speed axis:
A speed is specified in the "Velocity" parameter.

Applies to
● Positioning axis
● Speed axis

Requirements
● The technology object has been configured correctly.
● The technology object has been enabled.

Override response
The "MC_MoveVelocity" is canceled by:
● Disabling the axis with "MC_Power.Enable" = FALSE
● "MC_Home" command "HomingMode" = 4, 5
● "MC_Halt" command
● "MC_MoveAbsolute" command
● "MC_MoveRelative" command

3594

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
● "MC_MoveVelocity" command
● "MC_MoveJog" command
The start of an "MC_MoveVelocity" job aborts the following active Motion Control jobs:
● "MC_Home" command "HomingMode" = 4, 5
● "MC_Halt" command
● "MC_MoveAbsolute" command
● "MC_MoveRelative" command
● "MC_MoveVelocity" command
● "MC_MoveJog" command

Parameters
The following table shows the parameters of the "MC_MoveVelocity" Motion Control instruction:
Parameters

Declaration

Data type

Default value

Description

Axis

InOut

Execute

INPUT

TO_SpeedAxis

-

Technology object

BOOL

FALSE

Start job with a positive edge

Velocity

INPUT

LREAL

100.0

Velocity/speed setpoint for the motion process
("Velocity" = 0.0 is permitted)

Acceleration

INPUT

LREAL

-1.0

Acceleration
Value > 0.0: The specified value is used.
Value = 0.0: Not permitted
Value < 0.0: The acceleration configured in "Techno‐
logy object > Configuration > Extended parameters >
Dynamic defaults" is used.
(<TO>.DynamicDefaults.Acceleration)

Deceleration

INPUT

LREAL

-1.0

Deceleration
Value > 0.0: The specified value is used.
Value = 0.0: Not permitted
Value < 0.0: The deceleration configured in "Techno‐
logy object > Configuration > Extended parameters >
Dynamic defaults" is used.
(<TO>.DynamicDefaults.Deceleration)

Jerk

INPUT

LREAL

-1.0

Jerk
Value > 0.0: Constant-acceleration velocity profile;
the specified jerk is used.
Value = 0.0: Trapezoid velocity profile
Value < 0.0: The jerk configured in "Technology object
> Configuration > Extended parameters > Dynamic
defaults" is used.
(<TO>.DynamicDefaults.Jerk)

Programación del PLC
Manual de programación y manejo, 11/2019

3595

Instrucciones
4.1 Instrucciones
Parameters

Declaration

Data type

Default value

Description

Direction

INPUT

INT

0

Direction of rotation of the axis
0

The sign of the velocity specified at the "Ve‐
locity" parameter defines the direction of ro‐
tation.

1

Positive direction of rotation

2

Negative direction of rotation

Value of "Velocity" is used.
Value of "Velocity" is used.
Current

INPUT

BOOL

FALSE

Maintain current velocity
FALSE Deactivated
The values of parameters "Velocity" and "Di‐
rection" are taken into account.
TRUE

activated
The values at the parameters "Velocity" and
"Direction" are not taken into account. The
current velocity and direction at function
start are retained.
When the axis resumes motion at the velo‐
city that was current at function start, the "In‐
Velocity" parameter returns the value TRUE.

InVelocity

OUTPUT

BOOL

FALSE

TRUE

The velocity setpoint / speed setpoint was
reached and will be maintained.

Busy

OUTPUT

BOOL

FALSE

TRUE

Job is running.

CommandAborted

OUTPUT

BOOL

FALSE

TRUE

The job was aborted by another job during
execution.

Error

OUTPUT

BOOL

FALSE

TRUE

An error occurred during execution of the
job. The cause of the error can be found in
the "ErrorID" parameter.

ErrorID

OUTPUT

WORD

16#0000

Error ID for parameter "ErrorID"

Behavior with velocity setpoint / speed setpoint zero ("Velocity" = 0.0)
An "MC_MoveVelocity" job with "Velocity" = 0.0 stops the axis with the configured deceleration.
When the velocity setpoint / speed setpoint zero is reached, the parameter "InVelocity" will
indicate the value TRUE.
Under "Technology object > Diagnostics > Status and error bits > Motion status", "constant
velocity" and "standstill" will be displayed (<TO>.StatusWord.X12 (ConstantVelocity);
<TO>.StatusWord.X7 (Standstill)).
The parameters "InVelocity" and "Busy" show the value TRUE until the "MC_MoveVelocity" job
is overridden by another Motion Control job.

3596

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Moving an axis with constant velocity / speed
Proceed as follows to move an axis with constant velocity / speed:
1. Check the requirements indicated above.
2. At the parameter "Velocity", specify the velocity / speed, with which the axis should be
moved.
3. Start the "MC_MoveVelocity" job with a positive edge at parameter "Execute".
The current motion state is indicated in "Busy", "InVelocity" and "Error".
If the "InVelocity" parameter shows the value TRUE, then the velocity setpoint / speed setpoint
was reached. The axis continues moving at this constant velocity. The parameters "InVelocity"
and "Busy" show the value TRUE until the "MC_MoveVelocity" job is overridden by another
Motion Control job.
Nota
Response to a change in the override
If the velocity / speed is influenced during constant motion by a change in the override
(<TO>.Override.Velocity), the "InVelocity" parameter is reset during the acceleration or
deceleration. When the newly calculated velocity / speed is reached ("Velocity" × "Override"
%), then "InVelocity" is reset.

Additional information
An option for the evaluation of the individual status bits can be found in the Evaluating
StatusWord, ErrorWord and WarningWord section.

Programación del PLC
Manual de programación y manejo, 11/2019

3597

Instrucciones
4.1 Instrucciones

MC_MoveVelocity: Function chart V1
Function chart: Moving an axis with specification of velocity, and the response to an overriding job
$

$

0&B0RYH9HORFLW\

0&B0RYH9HORFLW\
72B
([HB







$[LV
,Q9HORFLW\
([HFXWH
%XV\
9HORFLW\ &RPPDQG$ERUWHG
$FFHOHUDWLRQ
(UURU
(UURU,'
'HFHOHUDWLRQ
-HUN
'LUHFWLRQ
&XUUHQW





,Q9HOB
%XV\B
$ERUWB

72B
([HB







,Q9HORFLW\
$[LV
([HFXWH
%XV\
9HORFLW\ &RPPDQG$ERUWHG
$FFHOHUDWLRQ
(UURU
'HFHOHUDWLRQ
(UURU,'
-HUN
'LUHFWLRQ
&XUUHQW

,Q9HOB
%XV\B
$ERUWB



)%


([HB 

W


%XV\B 

,Q9HOB 

$ERUWB 

W
W
W

)%


([HB 

%XV\B


W
W



,Q9HOB 
$ERUWB

W




W


72B
9HORFLW\



W

A "MC_MoveVelocity" job (A1) initiated via "Exe_1" accelerates the axis and signals at time ①
via "InVel_1" that the setpoint velocity 50.0 has been reached.
At time ②, the task is overridden via another "MC_MoveVelocity" job (A2). The abort is
signaled via "Abort_1". When the new setpoint velocity 15.0 is reached, this is signaled via
"InVel_2". The axis then continues moving at the constant velocity 15.0.
The running "MC_MoveVelocity" job (A2) is overridden by another "MC_MoveVelocity" job
(A1). The abort is signaled via "Abort_2". The axis is accelerated to the new setpoint velocity
50.0. Before the setpoint velocity is reached, the current "MC_MoveVelocity" job A1) is

3598

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
overridden at time ③ by another "MC_MoveVelocity" job A2). The abort is signaled via
"Abort_1". When the new setpoint velocity 15.0 is reached, this is signaled via "InVel_2". The
axis then continues moving at the constant velocity 15.0.

MC_MoveJog V1
MC_MoveJog: Move axis in jog mode V1
Description
With the Motion Control instruction "MC_MoveJog", you move an axis in jog mode.
You define the dynamic behavior of the motion with parameters "Velocity", "Jerk",
"Acceleration" and "Deceleration".
● Positioning axis:
A velocity is specified in the "Velocity" parameter.
● Speed axis:
A speed is specified in the "Velocity" parameter.

Applies to
● Positioning axis
● Speed axis

Requirements
● The technology object has been configured correctly.
● The technology object has been enabled.

Override response
The "MC_MoveJog" job is aborted by:
● Disabling the axis with "MC_Power.Enable" = FALSE
● "MC_Home" command "HomingMode" = 4, 5
● "MC_Halt" command
● "MC_MoveAbsolute" command
● "MC_MoveRelative" command
● "MC_MoveVelocity" command
● "MC_MoveJog" command
Starting an "MC_MoveJog" job aborts the following active Motion Control jobs:
● "MC_Home" command "HomingMode" = 4, 5
● "MC_Halt" command

Programación del PLC
Manual de programación y manejo, 11/2019

3599

Instrucciones
4.1 Instrucciones
● "MC_MoveAbsolute" command
● "MC_MoveRelative" command
● "MC_MoveVelocity" command
● "MC_MoveJog" command

Parameters
The following table shows the parameters of the Motion Control instruction "MC_MoveJog":
Parameters

Declaration

Data type

Default value

Description

Axis

InOut

TO_SpeedAxis

-

Technology object

JogForward

INPUT

BOOL

FALSE

As long as the parameter is TRUE, the axis moves in
the positive direction at the velocity specified in para‐
meter "Velocity".

JogBackward

INPUT

BOOL

FALSE

As long as the parameter is TRUE, the axis moves in
the negative direction at the velocity specified in pa‐
rameter "Velocity".

Velocity

INPUT

LREAL

100.0

Velocity setpoint / speed setpoint for the motion
Value > 0.0: The specified value is used.
Value < 0.0: The absolute value of the specified value
is used.
("Velocity" = 0.0 is permitted)

Acceleration

INPUT

LREAL

-1.0

Acceleration
Value > 0.0: The specified value is used.
Value = 0.0: Not permitted
Value < 0.0: The acceleration configured in "Techno‐
logy object > Configuration > Extended parameters >
Dynamic defaults" is used.
(<TO>.DynamicDefaults.Acceleration)

Deceleration

INPUT

LREAL

-1.0

Deceleration
Value > 0.0: The specified value is used.
Value = 0.0: Not permitted
Value < 0.0: The deceleration configured in "Techno‐
logy object > Configuration > Extended parameters >
Dynamic defaults" is used.
(<TO>.DynamicDefaults.Deceleration)

Jerk

INPUT

LREAL

-1.0

Jerk
Value > 0.0: Constant-acceleration velocity profile;
the specified jerk is used.
Value = 0.0: Trapezoid velocity profile
Value < 0.0: The jerk configured in "Technology object
> Configuration > Extended parameters > Dynamic
defaults" is used.
(<TO>.DynamicDefaults.Jerk)

InVelocity

OUTPUT

BOOL

FALSE

TRUE

The velocity setpoint / speed setpoint was
reached and will be maintained.

Busy

OUTPUT

BOOL

FALSE

TRUE

Job is running.

3600

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parameters

Declaration

Data type

Default value

Description

CommandAborted

OUTPUT

BOOL

FALSE

TRUE

The job was aborted by another job during
execution.

Error

OUTPUT

BOOL

FALSE

TRUE

An error occurred during execution of the
job. The job is rejected. The cause of the
error can be found in the "ErrorID" parame‐
ter.

ErrorID

OUTPUT

WORD

16#0000

Error ID for parameter "ErrorID"

Behavior with velocity setpoint / speed setpoint zero ("Velocity" = 0.0)
An "MC_MoveJog" job with "Velocity" = 0.0 stops the axis with the configured deceleration.
When the velocity setpoint / speed setpoint zero is reached, the parameter "InVelocity" will
indicate the value TRUE.
Under "Technology object > Diagnostics > Status and error bits > Motion status", "constant
velocity" and "standstill" will be displayed (<TO>.StatusWord.X12 (ConstantVelocity);
<TO>.StatusWord.X7 (Standstill)).

Moving an axis in jog mode
Proceed as follows to move an axis in jog mode:
1. Check the requirements indicated above.
2. Move the axis in the positive direction with "JogForward", or in the negative direction with
"JogBackward".
The current motion state is indicated in "Busy", "InVelocity" and "Error".
Nota
Response to a change in the override
If the velocity / speed is influenced during constant motion by a change in the override
(<TO>.Override.Velocity), the "InVelocity" parameter is reset during the acceleration or
deceleration. When the newly calculated velocity is reached ("Velocity" × "Override" %), then
"InVelocity" is set again.

Additional information
An option for the evaluation of the individual status bits can be found in the Evaluating
StatusWord, ErrorWord and WarningWord section.

Programación del PLC
Manual de programación y manejo, 11/2019

3601

Instrucciones
4.1 Instrucciones

MC_MoveJog: Function chart V1
Function chart: Moving an axis in jog mode
$
0&B0RYH-RJ
72B
-RJB)
-RJB%
9HOB,QSXW




$[LV
,Q9HORFLW\
-RJ)RUZDUG
%XV\
-RJ%DFNZDUG &RPPDQG$ERUWHG
(UURU
9HORFLW\
$FFHOHUDWLRQ
(UURU,'
'HFHOHUDWLRQ
-HUN





,Q9HO
%XV\
(UURU



-RJB)




W

-RJB%




W

,Q9HO




W

%XV\




W

(UURU




W


9HOB,QSXW


W



72B9HORFLW\ 

W



The axis is moved in the negative direction in jog mode via "Jog_B". When the setpoint velocity
-50.0 is reached, this is signaled via "InVel" = TRUE. After "Jog_B" is reset, the axis is braked
and brought to a standstill. Then the axis is moved in the positive direction via "Jog_F". When
the setpoint velocity 50.0 is reached, this is signaled via "InVel" = TRUE.
At time ①, if "Jog_F" is set, the setpoint velocity is changed to 100.0 by means of "Vel_Input".
Alternatively, you can also change the setpoint velocity via the velocity override. "InVel" is reset.
The axis is being accelerated. When the new setpoint velocity 100.0 is reached, this is signaled
via "InVel" = TRUE.
If "Jog_F" is set, "Jog_B" is likewise set at time ②. If both "Jog_F" and "Jog_B" are set, then the
axis is braked with the last applicable deceleration. An error is indicated via "Error", and the
"ErrorID" of the error 16#8007 (incorrect direction specification) is output.

3602

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
This error is resolved by resetting the two inputs "Jog_F" and "Jog_B".
During the braking ramp, "Jog_F" is set at time ③. The axis is accelerated to the last configured
velocity. When the setpoint velocity 100.0 is reached, this is signaled via "InVel" = TRUE.

4.1.5.2

Contadores rápidos

CTRL_HSC: Controlar contadores rápidos
Parámetro
Parámetro

Declaración

Tipo de datos Área de memoria

Descripción

EN

INPUT

BOOL

I, Q, M, D, L, T, C

Entrada de habilita‐
ción

ENO

OUTPUT

BOOL

I, Q, M, D, L

Salida de habilita‐
ción

HSC

INPUT

HW_HSC

I, Q, M o constante

Identificador de
hardware del conta‐
dor rápido (ID HW)

DIR

INPUT

BOOL

I, Q, M, D, L o constante

Habilitación del
nuevo sentido de
contaje (v.
NEW_DIR)

CV

INPUT

BOOL

I, Q, M, D, L o constante

Habilitación del
nuevo valor de con‐
taje (v. NEW_CV)

RV

INPUT

BOOL

I, Q, M, D, L o constante

Habilitación del
nuevo valor de refe‐
rencia (v.
NEW_RV)

PERIOD

INPUT

BOOL

I, Q, M, D, L o constante

Habilitación del
nuevo periodo de
medición de fre‐
cuencia (v.
NEW_PERIOD)

NEW_DIR

INPUT

INT

I, Q, M, D, L o constante

Sentido de contaje
que se carga si DIR
= TRUE.

NEW_CV

INPUT

DINT

I, Q, M, D, L o constante

Valor del contador
que se carga si CV
= TRUE.

NEW_RV

INPUT

DINT

I, Q, M, D, L o constante

Valor de referencia
que se carga si RV
= TRUE.

INT

I, Q, M, D, L o constante

Periodo de medi‐
ción de frecuencia
que se carga si PE‐
RIOD = TRUE.

NEW_PERIOD INPUT

Programación del PLC
Manual de programación y manejo, 11/2019

3603

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos Área de memoria

Descripción

BUSY

OUTPUT

BOOL

I, Q, M, D, L

Estado de procesa‐
miento *

STATUS

OUTPUT

WORD

I, Q, M, D, L

Estado de la opera‐
ción

* Si hay un contador rápido en la CPU o en la Signal Board, el parámetro BUSY tiene siempre el valor 0.

Descripción
La instrucción "Controlar contadores rápidos" permite parametrizar y controlar los contadores
rápidos que soporta la CPU, cargando para ello valores nuevos en los contadores. Para poder
ejecutar la instrucción es preciso que esté activado un contador rápido que disponga de
control. Por cada contador rápido no es posible ejecutar simultáneamente en el programa
varias instrucciones "Controlar contadores rápidos".
La instrucción "Controlar contadores rápidos" permite cargar los siguientes valores de
parámetros en un contador rápido:
● Sentido de contaje (NEW_DIR): El sentido de contaje define si un contador rápido debe
contar adelante o atrás. Los siguientes valores de la entrada NEW_DIR definen el sentido
de contaje: 1 = adelante, -1= atrás.
El sentido de contaje solo se puede cambiar mediante la instrucción "Controlar contadores
rápidos" si el control del sentido de contaje se ha parametrizado para el contador indicado
en el programa. El sentido de contaje indicado en la entrada NEW_DIR se carga en un
contador rápido si está activado el bit de la entrada DIR.
● Valor de contaje (NEW_CV): El valor de contaje es el valor inicial con el que un contador
rápido comienza a contar. El valor de contaje puede estar comprendido en un rango de
-2147483648 a 2147483647.
El valor de contaje indicado en la entrada NEW_CV se carga en un contador rápido si está
activado el bit de la entrada CV.
● Valor de referencia (NEW_RV): El valor de referencia puede compararse con el valor de
contaje actual para poder desencadenar una alarma. El valor de referencia, igual que el
valor de contaje, puede estar comprendido en un rango de -2147483648 a 2147483647.
El valor de referencia indicado en la entrada NEW_RV se carga en un contador rápido si
está activado el bit de la entrada RV.
● Periodo de medición de frecuencia (NEW_PERIOD): Los siguientes valores de la entrada
NEW_PERIOD definen el periodo de medición de frecuencia: 10 = 0,01s, 100 = 0,1s, 1000
= 1s.
Solo es posible actualizar el tiempo si se ha parametrizado la función "Medición de
frecuencia" para el contador rápido indicado. El tiempo indicado en la entrada
NEW_PERIOD se carga en un contador rápido si está activado el bit de la entrada PERIOD.
La instrucción "Controlar contadores rápidos" se ejecuta solo si el estado lógico de la entrada
EN es "1".
La salida de habilitación ENO se activa únicamente si el estado lógico de la entrada de
habilitación EN es "1" y no ocurren errores al ejecutar la operación.
Cuando se inserta la instrucción "Controlar contadores rápidos" se crea un bloque de datos de
instancia en el que se almacenan los datos de la operación.

3604

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetro STATUS
En la salida STATUS es posible consultar si han ocurrido errores al ejecutar la instrucción
"Controlar contadores rápidos". En la tabla siguiente se explica el significado de los valores
que se depositan en la salida STATUS:
Código de error (hexadecimal)

Descripción

0

Ningún error

80A1

Identificador de hardware no válido del contador rápido

80B1

Sentido de contaje (NEW_DIR) no válido

80B2

Valor de contaje (NEW_CV) no válido

80B3

Valor de referencia (NEW_RV) no válido

80B4

Periodo de medición de frecuencia (NEW_PERIOD) no válido

80C0

Acceso repetido al contador rápido

80D0

El contador rápido (HSC) no está activado en la configuración hard‐
ware de la CPU.

CTRL_HSC_EXT: Controlar contadores rápidos (avanzado)
Parámetro
Parámetro

Declaración

Tipo de datos Área de memoria

Descripción

EN

INPUT

BOOL

I, Q, M, D, L, T, C

Entrada de habilita‐
ción

ENO

OUTPUT

BOOL

I, Q, M, D, L

Salida de habilita‐
ción

HSC

INPUT

HW_HSC

I, Q, M o constante

Identificador de
hardware del conta‐
dor rápido (ID HW)

CTRL

INOUT

VARIANT

M, D

Utilización de un ti‐
po de datos de sis‐
tema (SDT)

DONE

OUTPUT

BOOL

I, Q, M, D, L

Retroalimentación
tras procesamiento
correcto de la ins‐
trucción

BUSY

OUTPUT

BOOL

I, Q, M, D, L

Estado de ejecu‐
ción

ERROR

OUTPUT

BOOL

I, Q, M, D, L

Retroalimentación
en caso de proce‐
samiento erróneo
de la instrucción

STATUS

OUTPUT

WORD

I, Q, M, D, L

Estado de la opera‐
ción

Programación del PLC
Manual de programación y manejo, 11/2019

3605

Instrucciones
4.1 Instrucciones

Descripción
La instrucción "Controlar contadores rápidos (avanzado)" permite parametrizar y controlar los
contadores rápidos que soporta la CPU, cargando para ello valores nuevos en los contadores.
Para poder ejecutar la instrucción es preciso que esté activado un contador rápido que
disponga de control. Por cada contador rápido no es posible ejecutar simultáneamente en el
programa varias instrucciones "Controlar contadores rápidos (avanzado)".
La instrucción "Controlar contadores rápidos (avanzado)" se ejecuta solo si el estado lógico de
la entrada EN es "1". Mientras se procesa la operación, permanece activado el bit de la salida
BUSY. Una vez ejecutada la operación por completo, se desactiva el bit de la salida BUSY.
La salida de habilitación ENO se activa únicamente si el estado lógico de la entrada de
habilitación EN es "1" y no ocurren errores al ejecutar la operación.
Cuando se inserta la instrucción "Controlar contadores rápidos (avanzado)" se crea un bloque
de datos de instancia en el que se almacenan los datos de la operación.

Utilización del tipo de datos de sistema HSC_Period
La instrucción "Controlar contadores rápidos (avanzado)" soporta el tipo de datos de sistema
SDT 381 "HSC_Period" para medir el período.
El tipo de datos "HSC_Period" corresponde a un HSC configurado para el modo de operación
"Periodo". La instrucción CTRL_HSC_EXT ofrece acceso al programa al número de impulsos
de entrada que están por encima de un intervalo de medida especificado. Esta instrucción
permite calcular el periodo de tiempo entre los impulsos de entrada con una resolución en el
rango de nanosegundos.
Byt
e

Parámetro

Declara‐
ción

Tipo de
datos

Descripción

0 ...
3

ElapsedTi‐
me

OUT

UDINT

Tiempo entre los flancos ascendentes de Edge_Count

4 ...
7

EdgeCount

OUT

UDINT

Número de flancos ascendentes dentro del tiempo transcurrido de Elapsed_Ti‐
me.
Si Edge_Count = 0, Elapsed_Time es el tiempo desde el último flanco ascen‐
dente.

8.0

EnHSC

IN

BOOL

Utilización como entrada de habilitación mediante control de puerta:
● FALSE: medición detenida
● TRUE: medición habilitada

8.6

EnPeriod

IN

BOOL

Actualización del período
● FALSE: no hay actualización
● TRUE: actualizar período

10 .. NewPeriod
. 11

IN

INT

Intervalo de la medición de período en milisegundos.
Los valores permitidos son 10, 100 y 1000.

ElapsedTime indica en nanosegundos el tiempo transcurrido entre los últimos eventos de
contaje de intervalos de medida consecutivos. Si durante un intervalo de medida no se
producen eventos de contaje, ElapsedTime indica el tiempo acumulado transcurrido desde el
último evento de contaje. ElapsedTime tiene un rango de 0 a 4.294.967.280 nanosegundos
(0x0000 0000 a 0xFFFF FFF0). El valor de retorno 4.294.967.295 (0xFFFF FFFF) indica que
se ha producido un desbordamiento del periodo. Un desbordamiento es un indicio de que el
tiempo entre flancos de impulso es mayor de 4,295 segundos y que el periodo no puede

3606

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
calcularse con esta instrucción. Los valores de 0xFFFF FFF1 a 0xFFFF FFFE están
reservados.
EdgeCount indica el número de eventos de contaje recibidos durante el intervalo de medida.
El periodo solo puede calcularse si el valor de EdgeCount es mayor que cero. Si ElapsedTime
es 0 (ningún impulso de entrada recibido) o 0xFFFF FFFF (desbordamiento del periodo),
EdgeCount no tiene validez.
Si EdgeCount tiene validez, el periodo en nanosegundos se calcula con la fórmula siguiente:
Periodo = ElapsedTime/EdgeCount
El valor calculado para el periodo es un valor medio obtenido de los periodos de tiempo de
todos los impulsos producidos durante el intervalo de medida. Si el periodo de un impulso
entrante es mayor que el intervalo de medida (10, 100 o 1000 ms), el cálculo del periodo debe
realizarse en varios intervalos de medida.
Las siguientes figuras muestran ejemplos de medición de período con la instrucción:
Ejemplo 1: varios eventos de contaje en un intervalo de medición
PV

,QWHUYDORGHPHGLFLµQ

lDODUPD
(W WWJXDUGDUW

lDODUPD
*XDUGDUW

lDODUPD
(W WWJXDUGDUW

(YHQWRVGHFRQWDMH
&DSWXUDGHWLHPSR+:

W

W

W

W

W

W

W

W

W

W

W

W

W

/ODPDGDVGH6)%
(W(ODSVHG7LPH WLHPSRWUDQVFXUULGR
(F(GJH&RXQW FRQWDGRUGHIODQFRV

(W 
(F 

(W 
(F 

(W WW
(F 

(W WW 
(F 

Ejemplo 2: eventos de contaje cero y uno en varios intervalos de medición
PV

,QWHUYDORGHPHGLFLµQ

lDODUPD

lDODUPD
*XDUGDUW

lDODUPD
(W WWJXDUGDUW

(YHQWRVGHFRQWDMH
&DSWXUDGHWLHPSR+:

W

W

/ODPDGDVGH6)%

(W(ODSVHG7LPH WLHPSRWUDQVFXUULGR (W 
(F(GJH&RXQW FRQWDGRUGHIODQFRV (F 

(W 
(F 

(W PV
(F 

(W WW 
(F 

5HJODV
6L(W HOSHU¯RGRQRHVY£OLGR
6LQRSHU¯RGR (W(F

Programación del PLC
Manual de programación y manejo, 11/2019

3607

Instrucciones
4.1 Instrucciones

Parámetro STATUS
En la salida STATUS es posible consultar si han ocurrido errores al ejecutar la instrucción
"Controlar contadores rápidos (avanzado)". En la tabla siguiente se explica el significado de los
valores que se depositan en la salida STATUS:

4.1.5.3

Código de error (hexadecimal)

Descripción

0

No han ocurrido errores

80A1

Identificador de hardware no válido del contador rápido

80C0

Acceso repetido al contador rápido

80D0

El contador rápido (HSC) no está activado en la configuración hard‐
ware de la CPU.

Contaje y medición (S7-1500)

High_Speed_Counter
Descripción High_Speed_Counter
Descripción
Con la instrucción High_Speed_Counter se controlan a través del programa del usuario las
funciones de contaje y medida del módulo tecnológico.

Llamada
La instrucción High_Speed_Counter debe llamarse una vez por contador en el ciclo o en un
programa controlado por tiempo. No se permite realizar la llamada en un programa de
interrupción controlado por eventos.

Funcionamiento
Valor de contaje: el valor de contaje está disponible en el parámetro de salida CountValue. El
valor de contaje se actualiza cada vez que se llama a la instrucción High_Speed_Counter.
Valor medido: El módulo tecnológico actualiza el valor medido con el tiempo de actualización
parametrizado de forma asíncrona a la llamada de la instrucción. Cada vez que se llama la
instrucción, el último valor medido que haya determinado el módulo tecnológico se actualiza
en el parámetro de salida MeasuredValue.
El valor medido y el valor de contaje están disponibles simultáneamente en la interfaz de
respuesta.

3608

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Capture: El parámetro de salida CaptureStatus = TRUE indica un valor Capture válido en el
parámetro de salida CapturedValue.
● Un valor Capture se detecta en las siguientes condiciones:
– Una entrada digital tiene la parametrización "Capture"
– CaptureEnable = TRUE
– Flanco en la entrada digital con la función de Capture
● El parámetro de salida CaptureStatus se restablece con un flanco descendente en el
parámetro de entrada CaptureEnable.
Sincronización: El parámetro de salida SyncStatus = TRUE indica que se ha llevado a cabo
una sincronización.
● El valor de contaje se sincroniza en las siguientes condiciones:
– Una entrada digital tiene la parametrización "Sincronización"" o el encóder incremental
tiene la parametrización "Sincronización con señal N"
– SyncEnable = TRUE
– La variable estática SyncUpDirection (o SyncDownDirection) = TRUE
– Flanco en la entrada digital con la función de sincronización o flanco ascendente de la
señal N en la entrada del encóder
● El parámetro de salida SyncStatus se restablece con un flanco descendente en
– el parámetro de entrada SyncEnable o
– la variable estática SyncDownDirection o
– la variable estática SyncUpDirection
Modificación de parámetros a través del programa de usuario

Programación del PLC
Manual de programación y manejo, 11/2019

3609

Instrucciones
4.1 Instrucciones
Para modificar los parámetros mediante el programa de usuario, proceda del siguiente modo:
1. Compruebe mediante la variable Set correspondiente si el objeto tecnológico para la
modificación de parámetros está listo (variable Set = FALSE) o si aún hay una petición de
modificación en curso (variable Set = TRUE).
Para ello, en las variables estáticas del DB de instancia de objeto tecnológico están
disponibles las siguientes variables Set en UserCmdFlags:
– SetReferenceValue0
– SetReferenceValue1
– SetUpperLimit
– SetLowerLimit
– SetCountValue
– SetStartValue
– SetNewDirection
2. Cuando el objeto tecnológico esté preparado para la modificación de parámetros,
modifique la variable estática correspondiente.
Para ello, están disponibles las siguientes variables estáticas del DB de instancia de objeto
tecnológico:
– NewReferenceValue0 / NewReferenceValue0_M (para SetReferenceValue0)
– NewReferenceValue1 / NewReferenceValue1_M (para SetReferenceValue1)
– NewUpperLimit
– NewLowerLimit
– NewCountValue
– NewStartValue
– NewDirection
3. Ajuste la respectiva variable Set para ejecutar la petición de modificación.
4. Compruebe por medio del parámetro de salida Error si se ha producido un error.
Si no se ha producido ningún error y el objeto tecnológico ha reseteado automáticamente
la variable Set, la modificación de parámetros se ha realizado correctamente.
Nota
Límite de contaje modificado
Si el nuevo límite de contaje superior es menor que el valor de contaje actual, el valor de
contaje se establece en el límite de contaje inferior o en el valor de inicio en función de la
parametrización. Si el nuevo límite inferior es mayor que el valor de contaje actual, el valor de
contaje se establece en el límite superior o en el valor inicial en función de la parametrización.

Modo de operación (High_Speed_Counter V3.0 o superior)
El modo de operación se parametriza en el objeto tecnológico, en "Comportamiento DQ0".

3610

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
El modo de operación lo indica el parámetro de salida CompareMeasuredValue:
Estado

Descripción

FALSE

Modo de operación "Utilizar valor de contaje como referencia":
Las funciones de comparación trabajan con el valor de contaje. Las siguientes
variables estáticas se utilizan específicamente en este modo de operación:
● NewReferenceValue0
● NewReferenceValue1
● CurReferenceValue0
● CurReferenceValue1
Las cuatro variables estáticas específicas del modo de operación "Utilizar valor
medido como referencia" se ignoran.

TRUE

Modo de operación "Utilizar valor medido como referencia":
Las funciones de comparación trabajan con el valor medido. Las siguientes
variables estáticas se utilizan específicamente en este modo de operación:
● NewReferenceValue0_M
● NewReferenceValue1_M
● CurReferenceValue0_M
● CurReferenceValue1_M
Las cuatro variables estáticas específicas del modo de operación "Utilizar valor
de contaje como referencia" se ignoran.

Confirmación de eventos
La confirmación de eventos notificados se realiza con el flanco ascendente del parámetro de
entrada EventAck . EventAck debe permanecer activado hasta que el objeto tecnológico haya
desactivado los bits de estado de los siguientes eventos del canal de contaje:
● CompResult0
● CompResult1
● ZeroStatus
● PosOverflow
● NegOverflow

Estado de las entradas digitales (TM Count y TM PosInput)
El estado de las entradas digitales se obtiene mediante las variables estáticas StatusDI0,
StatusDI1 o StatusDI2.

Estado de las entradas digitales (CPU compacta)
El estado de las entradas digitales se obtiene mediante las variables estáticas StatusDI0 y
StatusDI1. Si una entrada digital de la CPU compacta no se utiliza para un contador, puede
utilizarse la entrada a través del programa de usuario.

Programación del PLC
Manual de programación y manejo, 11/2019

3611

Instrucciones
4.1 Instrucciones

Uso de salidas digitales mediante el programa del usuario (TM Count y TM PosInput)
Mediante la instrucción High_Speed_Counter pueden activarse las salidas digitales
● si para "Activar salida" se ha parametrizado la opción "Utilizada por el programa de usuario".
● si para "Activar salida" se ha parametrizado para la opción "Tras comando Set de la CPU
hasta valor de referencia".
● si se activa la respectiva variable estática ManualCtrlDQm (sobrescritura temporal).
Solo en estos casos serán efectivas las variables estáticas SetDQ0 y SetDQ1. En el primer y
en el tercer caso, DQm sigue al valor de SetDQm. En el segundo caso, DQm se activa con un
flanco ascendente de SetDQm. DQm se desactiva cuando el valor de contaje coincide con el
valor de comparación o en caso de flanco descendente de SetDQm.

Uso de salidas digitales mediante el programa de usuario (CPU compacta)
La salida digital DQ1 se puede activar mediante la instrucción High_Speed_Counter
● si para "Activar salida" se ha parametrizado la opción "Utilizada por el programa de usuario".
● si para "Activar salida" se ha parametrizado para la opción "Tras comando Set de la CPU
hasta valor de referencia".
● si se activa la variable estática ManualCtrlIDQ1 (sobrescritura temporal).
La variable estática SetDQ1 solo será efectiva en esos casos. En el primer y en el tercer caso,
DQ1 sigue al valor de SetDQ1. En el segundo caso, DQ1 se activa y desactiva con un flanco
ascendente de SetDQ1 cuando el valor de contaje coincide con el valor de comparación o en
caso de flanco descendente de SetDQ1.
Nota
Antes de poder activar una salida digital física de la CPU compacta con la instrucción
High_Speed_Counter es necesario asignar la señal DQ1 a la salida digital que se desee.

La señal DQ0 se puede activar mediante la instrucción High_Speed_Counter con la variable
estática StatusDQ0,
● si para "Activar salida" se ha parametrizado la opción "Utilizada por el programa de usuario".
● si para "Activar salida" se ha parametrizado para la opción "Tras comando Set de la CPU
hasta valor de referencia".
● si se activa la variable estática ManualCtrlIDQ0 (sobrescritura temporal).
La variable estática SetDQ0 solo será efectiva en esos casos. En el primer y en el tercer caso,
StatusDQ0 sigue al valor de SetDQ0. En el segundo caso, StatusDQ0 se activa y desactiva
con un flanco (ascendente o descendente) de SetDQ0 cuando el valor de contaje coincide con
el valor de comparación.
Nota
La salida digital DQ0 no está disponible como salida física.

3612

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Comportamiento en caso de error
Si se produce un error al llamar la instrucción o en el módulo tecnológico, se activa el
parámetro de salida Error . La información de error adicional puede leerse en el parámetro de
salida ErrorID (Página 3617).
Elimine la causa del error y acuse el mensaje de error activando el parámetro de entrada
ErrorAck. Si ya no hay ningún error, el objeto tecnológico restablece el parámetro de salida
Error . No se notifica ningún otro error hasta que se haya acusado el error anterior.

Modificar el sentido de contaje
El sentido de contaje solo puede modificarse desde el programa del usuario si se ha
parametrizado como tipo de señal "Impulso (A)". En todos los demás casos, el sentido de
contaje depende de las señales de entrada del módulo tecnológico. El sentido de contaje
puede controlarse mediante la variable estática NewDirection:
● +1: sentido de contaje ascendente
● -1: sentido de contaje descendente
Para ejecutar la petición de modificación, es necesario ajustar la variable estática
SetNewDirection = TRUE.

Parámetro de entrada High_Speed_Counter
Parámetro

Declaración

Tipo de
datos

Ajuste pre‐
Descripción
determinado

SwGate

INPUT

BOOL

FALSE

Controlar puerta SW:
● Flanco ascendente: se abre la puerta SW.
● Flanco descendente: se cierra la puerta SW.
SwGate habilita la puerta interna, en combinación con la puerta
HW.

CaptureEna‐
ble

INPUT

BOOL

FALSE

Habilitar función de Capture
Después de la habilitación, se produce un evento de Capture con
el siguiente flanco parametrizado en la entrada digital correspon‐
diente. Un flanco descendente de CaptureEnable restablece el
parámetro de salida CaptureStatus. Un flanco descendente de
CaptureEnable restablece asimismo la habilitación si no se pro‐
duce un evento de Capture.
Con independencia de CaptureEnable , el último valor del pará‐
metro de salida CapturedValue se mantiene hasta el siguiente
evento Capture.

SyncEnable

INPUT

BOOL

FALSE

Habilitar sincronización
El sentido habilitado para la sincronización se indica en las varia‐
bles estáticas SyncUpDirection y SyncDownDirection. Un flanco
descendente de SyncEnable restablece el parámetro de salida
SyncStatus .

ErrorAck

INPUT

BOOL

FALSE

High_Speed_Counter hasta V3.0:
un flanco ascendente confirma el estado de error notificado.
High_Speed_Counter a partir de V3.1:
un nivel alto confirma el estado de error notificado.

Programación del PLC
Manual de programación y manejo, 11/2019

3613

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de
datos

Ajuste pre‐
Descripción
determinado

EventAck

INPUT

BOOL

FALSE

Un flanco ascendente restablece los siguientes parámetros de sa‐
lida:
● CompResult0
● CompResult1
● ZeroStatus
● PosOverflow
● NegOverflow

SetCountVa‐
lue

INOUT

BOOL

FALSE

Un flanco ascendente inicia la transferencia del nuevo valor de
contaje de la variable estática NewCountValue al módulo tecnoló‐
gico. El valor de contaje se activa de inmediato tras la transferen‐
cia.

Parámetro de salida High_Speed_Counter
Parámetro

Declaración

Tipo de
datos

Ajuste pre‐
Descripción
determinado

StatusHW

OUTPUT

BOOL

FALSE

Bit de estado módulo tecnológico: el módulo está parametrizado y
listo para funcionar. Los datos del módulo son válidos.

StatusGate

OUTPUT

BOOL

FALSE

Bit de estado: la puerta interna está habilitada cuando el paráme‐
tro se activa.

StatusUp

OUTPUT

BOOL

FALSE

Bit de estado: el último impulso de contaje ha incrementado el
contador y se encuentra como máximo 0,5 s atrás.

StatusDown

OUTPUT

BOOL

FALSE

Bit de estado: el último impulso de contaje ha provocado el decre‐
mento del contador y se encuentra como máximo 0,5 s atrás.

CompResult0

OUTPUT

BOOL

FALSE

Bit de estado: Se ha producido un evento de comparación para
DQ0 (cambio de estado) debido a la condición de comparación
seleccionada.
Si en el modo de operación "Utilizar valor de contaje como refe‐
rencia" el valor de contaje se ajusta al valor de inicio, CompRe‐
sult0 no se activa.
Por medio del flanco ascendente del parámetro de entrada Even‐
tAck se desactiva CompResult0 .

CompResult1

OUTPUT

BOOL

FALSE

Bit de estado: Se ha producido un evento de comparación para
DQ1 (cambio de estado) debido a la condición de comparación
seleccionada.
Si en el modo de operación "Utilizar valor de contaje como refe‐
rencia" el valor de contaje se ajusta al valor de inicio, CompRe‐
sult1 no se activa.
Por medio del flanco ascendente del parámetro de entrada Even‐
tAck se desactiva CompResult1 .

3614

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de
datos

Ajuste pre‐
Descripción
determinado

SyncStatus

OUTPUT

BOOL

FALSE

Bit de estado: se lleva a cabo la sincronización
Si está ajustado el parámetro de entrada SyncEnable, el flanco
parametrizado en la entrada digital correspondiente activa el bit de
estado SyncStatus.
SyncStatus se desactiva mediante flanco descendente en
● SyncEnable (parámetro de entrada) o
● SyncUpDirection (variable estática) o
● SyncDownDirection (variable estática)

CaptureStatus

OUTPUT

BOOL

FALSE

Bit de estado: se ha producido un evento Capture, existe un valor
Capture válido en el parámetro de salida CapturedValue.
Si está ajustado el parámetro de entrada CaptureEnable, el flanco
parametrizado en la entrada digital correspondiente activa el bit de
estado CaptureStatus.
Por medio del flanco descendente del parámetro de entrada Cap‐
tureEnable se desactiva CaptureStatus .

ZeroStatus

OUTPUT

BOOL

FALSE

Bit de estado: CountValue ha alcanzado el valor "0" independien‐
temente del sentido de contaje.
Por medio del flanco ascendente del parámetro de entrada Even‐
tAck se desactiva ZeroStatus.

PosOverflow

OUTPUT

BOOL

FALSE

Bit de estado: CountValue ha rebasado el límite de contaje supe‐
rior en sentido positivo.
Por medio del flanco ascendente del parámetro de entrada Even‐
tAck se desactiva PosOverflow.

NegOverflow

OUTPUT

BOOL

FALSE

Bit de estado: CountValue ha rebasado el límite de contaje inferior
en sentido negativo.
Por medio del flanco ascendente del parámetro de entrada Even‐
tAck se desactiva NegOverflow.

Error

OUTPUT

BOOL

FALSE

Se ha producido un error. Para conocer la causa del error, con‐
sulte el parámetro de salida ErrorID.

ErrorID

OUTPUT

WORD

0

El parámetro ErrorID (Página 3617) muestra el número del men‐
saje de error.
ErrorID = 0000H: No hay ningún error.

CountValue

OUTPUT

DINT

0

Valor actual de contaje

CapturedVa‐
lue

OUTPUT

DINT

0

Último valor Capture captado. El valor se mantiene hasta el si‐
guiente evento Capture con independencia del parámetro de en‐
trada CaptureEnable.
Si se ha producido un nuevo evento Capture, CaptureStatus se
activa y el usuario lo desactiva por medio del flanco descendente
del parámetro de entrada CaptureEnable .

MeasuredVa‐
lue

OUTPUT

REAL

0.0

Valor medido actual de frecuencia, periodo o velocidad (depen‐
diendo de la parametrización)

CompareMea‐
suredValue1

OUTPUT

BOOL

FALSE

Bit de estado:
FALSE: modo de operación "Utilizar valor de contaje como refe‐
rencia"; las funciones de comparación trabajan con el valor de
contaje.
TRUE: modo de operación "Utilizar valor medido como referen‐
cia"; las funciones de comparación trabajan con el valor medido.

Programación del PLC
Manual de programación y manejo, 11/2019

3615

Instrucciones
4.1 Instrucciones
1

Disponible para High_Speed_Counter a partir de la versión V3.0

Variables estáticas High_Speed_Counter
Variable

Tipo de da‐
tos

Ajuste predeter‐
minado

Acceso

Descripción

NewCountValue

DINT

L#0

Escritura

Nuevo valor de contaje

NewReferenceValue0

DINT

L#0

Escritura

Nuevo valor de comparación 0 en modo de ope‐
ración "Utilizar valor de contaje como referencia"

NewReferenceValue1

DINT

L#10

Escritura

Nuevo valor de comparación 1 en modo de ope‐
ración "Utilizar valor de contaje como referencia"

NewReferenceValue0_M1 REAL

L#0.0

Escritura

Nuevo valor de comparación 0 en modo de ope‐
ración "Utilizar valor medido como referencia"

NewReferenceValue1_M1 REAL

L#10.0

Escritura

Nuevo valor de comparación 1 en modo de ope‐
ración "Utilizar valor medido como referencia"

NewUpperLimit

DINT

L#2147483647

Escritura

Nuevo límite de contaje superior

NewLowerLimit

DINT

L#-2147483648

Escritura

Nuevo límite de contaje inferior

NewStartValue

DINT

L#0

Escritura

Nuevo valor inicial

NewDirection

INT

0

Escritura

Nuevo sentido de contaje:
+1: sentido de contaje ascendente
-1: sentido de contaje descendente

CurReferenceValue0

DINT

L#0

Lectura

Valor de comparación actual 0 en modo de ope‐
ración "Utilizar valor de contaje como referencia"

CurReferenceValue1

DINT

L#10

Lectura

Valor de comparación actual 1 en modo de ope‐
ración "Utilizar valor de contaje como referencia"

CurReferenceValue0_M1

REAL

L#0.0

Lectura

Valor de comparación actual 0 en modo de ope‐
ración "Utilizar valor medido como referencia"

CurReferenceValue1_M1

REAL

L#10.0

Lectura

Valor de comparación actual 1 en modo de ope‐
ración "Utilizar valor medido como referencia"

CurUpperLimit

DINT

L#2147483647

Lectura

Límite de contaje superior actual

CurLowerLimit

DINT

L#-2147483648

Lectura

Límite de contaje inferior actual

CurStartValue

DINT

L#0

Lectura

Valor inicial actual

AdditionalErrorID

DWORD

W#16#0000

Lectura

Información de error de una instrucción interna,
p. ej. RDREC

UserCmdFlags

STRUCT

-

SetNewDirection

BOOL

FALSE

Escritura

Ajustar nuevo sentido de contaje

SetUpperLimit

BOOL

FALSE

Escritura

Ajustar límite de contaje superior

SetLowerLimit

BOOL

FALSE

Escritura

Ajustar límite de contaje inferior

SetReferenceValue0

BOOL

FALSE

Escritura

Ajustar valor de comparación 0

SetReferenceValue1

BOOL

FALSE

Escritura

Ajustar valor de comparación 1

SetStartValue

BOOL

FALSE

Escritura

Ajustar valor inicial

SyncDownDirection

BOOL

TRUE

Escritura

Habilitar sincronización en sentido de contaje
descendente

SyncUpDirection

BOOL

TRUE

Escritura

Habilitar sincronización en sentido de contaje as‐
cendente

3616

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de da‐
tos

Ajuste predeter‐
minado

Acceso

Descripción

SetDQ0

BOOL

FALSE

Escritura

Activar la salida digital DQ0

SetDQ1

BOOL

FALSE

Escritura

Activar la salida digital DQ1

ManualCtrlDQ0

BOOL

FALSE

Escritura

Habilitar ajuste de la salida digital DQ0:
TRUE:
● SetDQ0 activa DQ0
● Bit de control TM_CTRL_DQ0 = FALSE
FALSE:
● Ajuste no habilitado
● Bit de control TM_CTRL_DQ0 = TRUE

ManualCtrlDQ1

BOOL

FALSE

Escritura

Habilitar ajuste de la salida digital DQ1:
TRUE:
● SetDQ1 activa DQ1
● Bit de control TM_CTRL_DQ1 = FALSE
FALSE:
● Ajuste no habilitado
● Bit de control TM_CTRL_DQ1 = TRUE

UserStatusFlags

1

STRUCT

-

StatusDI0

BOOL

FALSE

Lectura

Estado actual de entrada digital DI0

StatusDI1

BOOL

FALSE

Lectura

Estado actual de entrada digital DI1

StatusDI2

BOOL

FALSE

Lectura

Estado actual de entrada digital DI2

StatusDQ0

BOOL

FALSE

Lectura

Estado actual de salida digital DQ0

StatusDQ1

BOOL

FALSE

Lectura

Estado actual de salida digital DQ1

Disponible para High_Speed_Counter a partir de la versión V3.0

Códigos de error del parámetro ErrorID
Código de error

Descripción

(W#16#...)
0000

No hay error

Mensajes de error del módulo tecnológico
80A1

POWER_ERROR de la interfaz de realimentación: Tensión de alimentación L+ incorrecta

80A2

ENC_ERROR de la interfaz de realimentación: Señal de encóder incorrecta

80A3

LD_ERROR de la interfaz de realimentación: Error al cargar a través de interfaz de realimentación

Mensajes de error de la instrucciónHigh_Speed_Counter
80B1

Sentido de contaje no válido

Programación del PLC
Manual de programación y manejo, 11/2019

3617

Instrucciones
4.1 Instrucciones
Código de error

Descripción

(W#16#...)
80B4

Para el modo de operación "Utilizar valor de contaje como referencia" se aplica lo siguiente:
El nuevo límite de contaje inferior no cumple las siguientes condiciones:
● Límite inferior < límite superior
● Límite inferior <= valor de referencia/valor inicial
Para el modo de operación "Utilizar valor medido como referencia" se aplica lo siguiente:
El nuevo límite de contaje inferior no cumple las siguientes condiciones:
● Límite inferior < límite superior
● Límite inferior <= valor inicial

80B5

Para el modo de operación "Utilizar valor de contaje como referencia" se aplica lo siguiente:
El nuevo límite superior no cumple las siguientes condiciones:
● Límite inferior < límite superior
● Límite superior >= valor de referencia/valor inicial
Para el modo de operación "Utilizar valor medido como referencia" se aplica lo siguiente:
El nuevo límite superior no cumple las siguientes condiciones:
● Límite inferior < límite superior
● Límite superior >= valor inicial

80B6

El nuevo valor inicial no cumple la siguiente condición:
● límite inferior <= valor inicial <= límite superior

80B7

El nuevo valor de contaje no cumple la siguiente condición:
● Límite de contaje inferior <= valor de contaje <= límite de contaje superior

80B8

Para el modo de operación "Utilizar valor de contaje como referencia" se aplica lo siguiente:
El nuevo valor de referencia 0 no cumple la siguiente condición:
● Límite inferior <= valor de referencia 0 <= límite superior
● Valor de referencia 0 < valor de referencia 1
Para el modo de operación "Utilizar valor medido como referencia" se aplica lo siguiente:
El nuevo valor de referencia 0 no cumple la siguiente condición:
● Valor de referencia 0 < valor de referencia 1

80B9

Para el modo de operación "Utilizar valor de contaje como referencia" se aplica lo siguiente:
El nuevo valor de referencia 1 no cumple las siguientes condiciones:
● Límite de contaje inferior <= valor de referencia 1 <= límite superior
● Valor de referencia 0 < valor de referencia 1
Para el modo de operación "Utilizar valor medido como referencia" se aplica lo siguiente:
El nuevo valor de referencia 1 no cumple la siguiente condición:
● Valor de referencia 0 < valor de referencia 1

80C0

La instrucción High_Speed_Counter se ha llamado varias veces con la misma instancia (DB).

80C1

La comunicación con el módulo tecnológico ha fallado (registros de lectura): coloca información de error
de la instrucción interna RDREC en la variable estática AdditionalErrorID .

3618

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Código de error

Descripción

(W#16#...)
80C2

La comunicación con el módulo tecnológico ha fallado (registros de escritura): coloca información de
error de la instrucción interna WRREC en la variable estática AdditionalErrorID .

80C3

El acceso a los datos de entrada (interfaz de realimentación) ha fallado: coloca información de error de
la instrucción interna GETIO_PART en la variable estática AdditionalErrorID.

80C4

El acceso a los datos de salida (interfaz de control) ha fallado: coloca información de error de la ins‐
trucción interna SETIO_PART en la variable estática AdditionalErrorID.

80C5

La lectura de la información de arranque actual del OB ha fallado: coloca información de error de la
instrucción interna RD_SINFO en la variable estática AdditionalErrorID.

80C6

La determinación de las direcciones de E/S del módulo tecnológico ha fallado: coloca información de
error de la instrucción interna RD_ADDR en la variable estática AdditionalErrorID.

80C7

Módulo no enchufado o falta tensión de alimentación L+

80C8

El módulo especificado en la variable estática Configuration.HWID no es válido

SSI_Absolute_Encoder
Descripción SSI_Absolute_Encoder
Descripción
Con la instrucción SSI_Absolute_Encoder se controlan las funciones de lectura de posición y
medida del módulo tecnológico TM PosInput a través del programa del usuario.

Llamada
La instrucción debe llamarse una vez por canal en el ciclo o en un programa controlado por
tiempo. No se permite realizar la llamada en un programa de interrupción controlado por
eventos.

Funcionamiento
Valor de posición: el valor de posición está disponible en el parámetro de salida PositionValue.
El valor de posición se actualiza cada vez que se llama la instrucción.
Valor medido: El módulo tecnológico actualiza el valor medido con el tiempo de actualización
parametrizado de forma asíncrona a la llamada de la instrucción. Cada vez que se llama la
instrucción, el último valor medido que haya determinado el módulo tecnológico se actualiza
en el parámetro de salida MeasuredValue.
El valor medido y el valor de posición están disponibles simultáneamente como parámetros de
salida.
En lugar de un valor medido, se puede devolver el telegrama SSI completo en el parámetro de
salida CompleteSSIFrame. Dependiendo de la parametrización, es válido MeasuredValue o
CompleteSSIFrame.

Programación del PLC
Manual de programación y manejo, 11/2019

3619

Instrucciones
4.1 Instrucciones
Capture: El parámetro de salida CaptureStatus = TRUE indica un valor Capture válido en el
parámetro de salida CapturedValue.
● Un valor Capture se detecta en las siguientes condiciones:
– Una entrada digital tiene la parametrización "Capture"
– CaptureEnable = TRUE
– Flanco en la entrada digital con la función de Capture
● El parámetro de salida CaptureStatus se restablece con un flanco descendente en el
parámetro de entrada CaptureEnable.
Modificación de parámetros a través del programa de usuario
Para modificar los parámetros mediante el programa de usuario, proceda del siguiente modo:
1. Compruebe mediante la respectiva variable Set si el objeto tecnológico está listo para la
modificación de parámetros (variable Set = FALSE) o si aún hay una petición de
modificación en curso (variable Set = TRUE).
Para ello, en las variables estáticas del DB de instancia de objeto tecnológico están
disponibles las siguientes variables Set en UserCmdFlags:
– SetReferenceValue0
– SetReferenceValue1
2. Cuando el objeto tecnológico esté preparado para la modificación de parámetros,
modifique la variable estática correspondiente.
Para ello, están disponibles las siguientes variables estáticas del DB de instancia de objeto
tecnológico:
– NewReferenceValue0 / NewReferenceValue0_M (para SetReferenceValue0)
– NewReferenceValue1 / NewReferenceValue1_M (para SetReferenceValue1)
3. Ajuste la respectiva variable Set para ejecutar la petición de modificación.
4. Compruebe por medio del parámetro de salida Error si se ha producido un error.
Si no se ha producido ningún error y el objeto tecnológico ha reseteado automáticamente
la variable Set, la modificación de parámetros se ha realizado correctamente.

Modo de operación
El modo de operación se parametriza en el objeto tecnológico, en "Comportamiento DQ0".

3620

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
El modo de operación lo indica el parámetro de salida CompareMeasuredValue:
Estado

Descripción

FALSE

Modo de operación "Utilizar el valor de posición (valor absoluto SSI) como
referencia":
Las funciones de comparación trabajan con el valor de posición. Las siguientes
variables estáticas se utilizan específicamente en este modo de operación:
● NewReferenceValue0
● NewReferenceValue1
● CurReferenceValue0
● CurReferenceValue1
Las cuatro variables estáticas específicas del modo de operación "Utilizar valor
medido como referencia" se ignoran.

TRUE

Modo de operación "Utilizar valor medido como referencia":
Las funciones de comparación trabajan con el valor medido. Las siguientes
variables estáticas se utilizan específicamente en este modo de operación:
● NewReferenceValue0_M
● NewReferenceValue1_M
● CurReferenceValue0_M
● CurReferenceValue1_M
Las cuatro variables estáticas específicas del modo de operación "Utilizar el
valor de posición (valor absoluto SSI) como referencia" se ignoran.

Confirmación de eventos
La confirmación de eventos notificados se realiza con el flanco ascendente del parámetro de
entrada EventAck . EventAck debe permanecer activado hasta que el objeto tecnológico haya
desactivado los bits de estado de los siguientes eventos del canal de contaje:
● CompResult0
● CompResult1
● ZeroStatus
● PosOverflow
● NegOverflow

Estado de las entradas digitales
El estado de las entradas digitales se obtiene mediante las variables estáticas StatusDI0 y
StatusDI1.

Programación del PLC
Manual de programación y manejo, 11/2019

3621

Instrucciones
4.1 Instrucciones

Utilizar salidas digitales mediante el programa del usuario
Las salidas digitales pueden activarse mediante la instrucción en los siguientes casos:
Caso

Descripción

Para "Activar salida" se ha activado la opción
"Utilizada por el programa de usuario".

La respectiva salida digital DQm adopta el valor de
SetDQm.

La salida digital DQm correspondiente se activa con
Para "Activar salida" se ha parametrizado la
opción "Tras comando Set de la CPU hasta va‐ un flanco ascendente de SetDQm. DQm se desactiva
lor de referencia".
cuando el valor de posición coincide con el valor de
referencia o en caso de flanco descendente de
SetDQm.
Se activa la respectiva variable estática Ma‐
nualCtrlDQm (sobrescritura temporal).

La respectiva salida digital DQm adopta el valor de
SetDQm.

Comportamiento en caso de error
Si se produce un error al llamar la instrucción o en el módulo tecnológico, se activa el
parámetro de salida Error . La información de error adicional puede leerse en el parámetro de
salida ErrorID (Página 3625).
Elimine la causa del error y acuse el mensaje de error activando el parámetro de entrada
ErrorAck. Si ya no hay ningún error, el objeto tecnológico restablece el parámetro de salida
Error . No se notifica ningún otro error hasta que se haya acusado el error anterior.

Parámetros de entrada SSI_Absolute_Encoder
Parámetro

Declaración

Tipo de
datos

Ajuste pre‐
Descripción
determinado

CaptureEna‐
ble

INPUT

BOOL

FALSE

Habilitar función de Capture
Después de la habilitación, se produce un evento de Capture con
el siguiente flanco parametrizado en la entrada digital correspon‐
diente. Un flanco descendente de CaptureEnable restablece el
parámetro de salida CaptureStatus. Un flanco descendente de
CaptureEnable restablece asimismo la habilitación si no se pro‐
duce un evento de Capture.
Con independencia de CaptureEnable , el último valor del pará‐
metro de salida CapturedValue se mantiene hasta el siguiente
evento Capture.

ErrorAck

INPUT

BOOL

FALSE

SSI_Absolute_Encoder V1.0:
un flanco ascendente confirma el estado de error notificado.
SSI_Absolute_Encoder a partir de V2.0:
un nivel alto confirma el estado de error notificado.

EventAck

INPUT

BOOL

FALSE

Un flanco ascendente restablece los siguientes parámetros de sa‐
lida:
● CompResult0
● CompResult1
● ZeroStatus
● PosOverflow
● NegOverflow

3622

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros de salida SSI_Absolute_Encoder
Parámetro

Declaración

Tipo de
datos

Ajuste pre‐
Descripción
determinado

StatusHW

OUTPUT

BOOL

FALSE

Bit de estado módulo tecnológico: el módulo está parametrizado y
listo para funcionar. Los datos del módulo son válidos.

StatusUp

OUTPUT

BOOL

FALSE

Bit de estado: el último valor de posición ha variado en sentido
positivo y se encuentra como máximo 0,5 s atrás.

StatusDown

OUTPUT

BOOL

FALSE

Bit de estado: el último valor de posición ha variado en sentido
negativo y se encuentra como máximo 0,5 s atrás.

CompResult0

OUTPUT

BOOL

FALSE

Bit de estado: Se ha producido un evento de comparación para
DQ0 (cambio de estado) debido a la condición de comparación
seleccionada.
Por medio del flanco ascendente del parámetro de entrada Even‐
tAck se desactiva CompResult0 .

CompResult1

OUTPUT

BOOL

FALSE

Bit de estado: Se ha producido un evento de comparación para
DQ1 (cambio de estado) debido a la condición de comparación
seleccionada.
Por medio del flanco ascendente del parámetro de entrada Even‐
tAck se desactiva CompResult1 .

CaptureStatus

OUTPUT

BOOL

FALSE

Bit de estado: se ha producido un evento Capture, existe un valor
Capture válido en el parámetro de salida CapturedValue.
Si está ajustado el parámetro de entrada CaptureEnable, el flanco
parametrizado en la entrada digital correspondiente activa el bit de
estado CaptureStatus.
Por medio del flanco descendente del parámetro de entrada Cap‐
tureEnable se desactiva CaptureStatus .

CapturedVa‐
lue

OUTPUT

DINT

0

Último valor Capture captado. El valor se mantiene hasta el si‐
guiente evento Capture con independencia del parámetro de en‐
trada CaptureEnable.
Si se ha producido un nuevo evento Capture, CaptureStatus se
activa y el usuario lo desactiva por medio del flanco descendente
del parámetro de entrada CaptureEnable .

ZeroStatus

OUTPUT

BOOL

FALSE

Bit de estado: PositionValue ha alcanzado o rebasado el valor "0"
independientemente del sentido de contaje.
Por medio del flanco ascendente del parámetro de entrada Even‐
tAck se desactiva ZeroStatus.

PosOverflow

OUTPUT

BOOL

FALSE

Bit de estado: PositionValue ha rebasado en sentido positivo el
límite superior del rango de valores de posición del encóder.
Por medio del flanco ascendente del parámetro de entrada Even‐
tAck se desactiva PosOverflow.

NegOverflow

OUTPUT

BOOL

FALSE

Bit de estado: PositionValue ha rebasado en sentido negativo el
límite inferior del rango de valores de posición del encóder.
Por medio del flanco ascendente del parámetro de entrada Even‐
tAck se desactiva NegOverflow.

Error

OUTPUT

BOOL

Programación del PLC
Manual de programación y manejo, 11/2019

FALSE

Se ha producido un error. Para conocer la causa del error, con‐
sulte el parámetro de salida ErrorID.

3623

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de
datos

Ajuste pre‐
Descripción
determinado

ErrorID

OUTPUT

WORD

0

El parámetro ErrorID (Página 3625) muestra el número del men‐
saje de error.
ErrorID = 0000H: No hay ningún error.

PositionValue

OUTPUT

DINT

0

Valor de posición actual

MeasuredVa‐
lue

OUTPUT

REAL

0.0

Valor medido actual de frecuencia, período o velocidad (depen‐
diendo de la parametrización)
Dependiendo de la parametrización, en el objeto tecnológico, en
"Valor medido", es válido MeasuredValue o CompleteSSIFrame.

CompleteSSI‐
Frame

OUTPUT

DWORD

0

Último telegrama SSI completo recibido (32 bits menos significa‐
tivos)
Dependiendo de la parametrización, en el objeto tecnológico, en
"Valor medido", es válido MeasuredValue o CompleteSSIFrame.

CompareMea‐
suredValue

OUTPUT

BOOL

FALSE

Bit de estado:
FALSE: modo de operación "Utilizar el valor de posición (valor
absoluto SSI) como referencia"; como referencia se utiliza el valor
de posición.
TRUE: modo de operación "Utilizar valor medido como referen‐
cia"; como referencia se utiliza el valor medido.

Variables estáticas SSI_Absolute_Encoder
Variable

Tipo de da‐
tos

Ajuste predeter‐
minado

Acceso

Descripción

NewReferenceValue0

DINT

L#0

Escritura

Nuevo valor de referencia 0 en modo de opera‐
ción "Utilizar el valor de posición (valor absoluto
SSI) como referencia"

NewReferenceValue1

DINT

L#10

Escritura

Nuevo valor de referencia 1 en modo de opera‐
ción "Utilizar el valor de posición (valor absoluto
SSI) como referencia"

NewReferenceValue0_M

REAL

L#0.0

Escritura

Nuevo valor de referencia 0 en modo de opera‐
ción "Utilizar valor medido como referencia"

NewReferenceValue1_M

REAL

L#10.0

Escritura

Nuevo valor de referencia 1 en modo de opera‐
ción "Utilizar el valor medido como referencia"

CurReferenceValue0

DINT

L#0

Lectura

Valor de referencia 0 actual en modo de opera‐
ción "Utilizar valor de posición (valor absoluto
SSI) como referencia"

CurReferenceValue1

DINT

L#10

Lectura

Valor de referencia 1 actual en modo de opera‐
ción "Utilizar valor de posición (valor absoluto
SSI) como referencia"

CurReferenceValue0_M

REAL

L#0.0

Lectura

Valor de referencia 0 actual en modo de opera‐
ción "Utilizar valor medido como referencia"

CurReferenceValue1_M

REAL

L#10.0

Lectura

Valor de referencia 1 actual en modo de opera‐
ción "Utilizar valor medido como referencia"

AdditionalErrorID

DWORD

W#16#0000

Lectura

Información de error de una instrucción interna,
p. ej. RDREC

3624

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de da‐
tos

Ajuste predeter‐
minado

Acceso

Descripción

UserCmdFlags

STRUCT

-

SetReferenceValue0

BOOL

SetReferenceValue1

BOOL

FALSE

Escritura

Ajustar valor de referencia 0

FALSE

Escritura

Ajustar valor de referencia 1

SetDQ0

BOOL

FALSE

Escritura

Activar la salida digital DQ0

SetDQ1

BOOL

FALSE

Escritura

Activar la salida digital DQ1

ManualCtrlDQ0

BOOL

FALSE

Escritura

Habilitar ajuste de la salida digital DQ0.
TRUE: SetDQ0 ajusta DQ01
FALSE: Ajuste no habilitado

ManualCtrlDQ1

BOOL

FALSE

Escritura

Habilitar ajuste de la salida digital DQ1:
TRUE: SetDQ1 ajusta DQ11
FALSE: Ajuste no habilitado

UserStatusFlags

1

STRUCT

-

StatusDI0

BOOL

FALSE

Lectura

Estado actual de entrada digital DI0

StatusDI1

BOOL

FALSE

Lectura

Estado actual de entrada digital DI1

StatusDQ0

BOOL

FALSE

Lectura

Estado actual de salida digital DQ0

StatusDQ1

BOOL

FALSE

Lectura

Estado actual de salida digital DQ1

En la interfaz de control del módulo, la instrucción ajusta el bit TM_CTRL_DQm a FALSE. La variable estática SetDQm
actúa sobre el bit de control SET_DQm.

Códigos de error del parámetro ErrorID
Código de error

Descripción

(W#16#...)
0000

No hay error

Mensajes de error del módulo tecnológico
80A1

POWER_ERROR de la interfaz de realimentación: Tensión de alimentación L+ incorrecta

80A2

ENC_ERROR de la interfaz de realimentación: Señal de encóder incorrecta

80A3

LD_ERROR de la interfaz de realimentación: Error al cargar a través de interfaz de realimentación

Mensajes de error de la instrucciónSSI_Absolute_Encoder
80B8

El nuevo valor de referencia 0 no cumple la siguiente condición:
● Límite inferior <= valor de referencia 0 <= límite superior
● Valor de referencia 0 < valor de referencia 1

80B9

El nuevo valor de referencia 1 no cumple las siguientes condiciones:
● Límite inferior <= valor de referencia 1 <= límite superior
● Valor de referencia 0 < valor de referencia 1

80C0

La instrucción se ha llamado varias veces con la misma instancia (DB).

80C1

La comunicación con el módulo tecnológico ha fallado (registros de lectura): coloca información de error
de la instrucción interna RDREC en la variable estática AdditionalErrorID .

80C2

La comunicación con el módulo tecnológico ha fallado (registros de escritura): coloca información de
error de la instrucción interna WRREC en la variable estática AdditionalErrorID .

Programación del PLC
Manual de programación y manejo, 11/2019

3625

Instrucciones
4.1 Instrucciones
Código de error

Descripción

(W#16#...)
80C5

La lectura de la información de arranque actual del OB ha fallado: coloca información de error de la
instrucción interna RD_SINFO en la variable estática AdditionalErrorID.

80C6

La determinación de las direcciones de E/S del módulo tecnológico ha fallado: coloca información de
error de la instrucción interna RD_ADDR en la variable estática AdditionalErrorID.

80C7

Módulo no enchufado o falta tensión de alimentación L+

80C8

El módulo especificado en la variable estática Configuration.HWID no es válido

4.1.5.4

Control PID

PID_Compact
Novedades PID_Compact
PID_Compact V2.4
● Inicialización de la acción integral
Ahora PID_Compact inicializa la acción integral correctamente si se utiliza
OverwriteInitialOutputValue con sentido de regulación invertido.
Si hasta ahora ha utilizado OverwriteInitialOutputValue con sentido de regulación invertido,
tenga en cuenta que PID_Compact V2.4 modifica el signo del valor de salida.

PID_Compact V2.3
● Reacción del valor de salida al cambiar del modo de operación "Inactivo" al "Modo
automático"
La nueva opción IntegralResetMode = 4 se ha agregado y se ha definido como ajuste
predeterminado. Con IntegralResetMode = 4, al cambiar del modo de operación "Inactivo"
al "Modo automático" la acción I se preasigna automáticamente de forma que un error de
regulación provoque un salto del valor de salida con idéntico signo.
● Inicialización de la acción integral en el modo automático
La acción integral se puede inicializar en el modo automático con ayuda de las variables
OverwriteInitialOutputValue y PIDCtrl.PIDInit. Esto simplifica el uso de PID_Compact para
regulaciones de transición.

PID_Compact V2.2
● Uso con S7-1200
A partir de PID_Compact V2.2, la instrucción también se puede utilizar con funcionalidad V2
en una S7-1200 a partir de la versión de firmware 4.0.

3626

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

PID_Compact V2.0
● Comportamiento en caso de error
Se ha modificado a fondo el comportamiento en caso de error. PID_Compact tiene un
comportamiento más tolerante a errores en el ajuste predeterminado. Este comportamiento
se ajusta al copiar PID_Compact V1.X de una CPU S7-1200 a una CPU S7-1500.
ATENCIÓN
Su instalación puede sufrir daños.
Si utiliza el ajuste predeterminado, PID_Compact se mantiene en modo automático al
rebasar los límites del valor real. De este modo, su instalación puede sufrir daños.
Configure un comportamiento en caso de error para su sistema regulado que proteja su
instalación de daños.
El parámetro Error indica si hay algún un error pendiente en ese momento. Si no persiste
el error, se indica Error = FALSE. El parámetro ErrorBits indica qué errores han ocurrido.
Con ErrorAck se acusan los errores y advertencias sin necesidad de reiniciar el regulador
ni borrar la acción I. Al cambiar el modo de operación, ya no se borran los errores que no
estén pendientes.
El comportamiento en caso de error se configura con SetSubstituteOutput y
ActivateRecoverMode.
● Valor de salida sustitutivo
Puede configurarse un valor de salida sustitutivo que se emitirá en caso de error.
● Cambio de modos de operación
El modo de operación se especifica en el parámetro de entrada/salida Mode y se activa
mediante un flanco ascendente en ModeActivate. Se ha suprimido la variable sRet.i_Mode.
● Capacidad multiinstancia
Puede llamar PID_Compact como DB multiinstancia. No se creará ningún objeto
tecnológico y no dispondrá de interfaz de parametrización y puesta en servicio. Los
PID_Compact se deben parametrizar directamente en el DB multiinstancia y ponerse en
servicio a través de una tabla de observación.
● Comportamiento en arranque
Con RunModeByStartup = TRUE, el modo de operación especificado en Mode se inicia
también en caso de flanco descendente en Reset y en caso de arranque en frío de la CPU.
● Comportamiento ENO
ENO se ajusta en función del modo de operación.
Si State = 0, entonces ENO = FALSE.
Si State ≠ 0, entonces ENO = TRUE.
● Especificación de consigna durante la optimización
La fluctuación admisible de la consigna durante la optimización se configura en la variable
CancelTuningLevel.
● Rango de valores para límites de valor de salida
Ahora ya no es necesario que el valor 0.0 se encuentre dentro de los límites de valor de
salida.
● Preasignar acción I
Con las variables IntegralResetMode y OverwriteInitialOutputValue se preasigna la acción
I al cambiar del modo de operación "Inactivo" a "Modo automático".

Programación del PLC
Manual de programación y manejo, 11/2019

3627

Instrucciones
4.1 Instrucciones
● Control anticipativo
El parámetro Disturbance permite activar el control anticipativo.
● Ajuste predeterminado de los parámetros PID
Se han modificado los siguientes ajustes predeterminados:
– Ponderación de la acción P (PWeighting), de 0.0 a 1.0
– Ponderación de la acción D (DWeighting), de 0.0 a 1.0
– Coeficiente para el retardo de la acción derivada (TdFiltRatio), de 0.0 a 0.2
● Cambio de nombre de las variables
Se han cambiado los nombres de las variables estáticas para hacerlos más compatibles
con PID_3Step.

PID_Compact V1.2
● Modo manual en el arranque de la CPU
Si al arrancar la CPU ManualEnable = TRUE, PID_Compact arranca en modo manual. No
es necesario un flanco ascendente en ManualEnable.
● Optimización inicial
Si la CPU se apaga durante la optimización inicial, la optimización inicial arranca de nuevo
al conectar la CPU.

PID_Compact V1.1
● Modo manual en el arranque de la CPU
Al arrancar la CPU, PID_Compact únicamente pasa al modo manual si se detecta un flanco
ascendente en ManualEnable. Si no se detecta un flanco ascendente, PID_Compact
arranca en el último modo de operación en el que ManualEnable era FALSE.
● Comportamiento en Reset
Un flanco ascendente en Reset hace que se desactiven los errores y las advertencias y que
se borre la acción I. Si se detecta un flanco descendente en Reset, se cambia al último
modo de operación activo.
● Ajuste predeterminado del límite superior de valor real
El ajuste predeterminado r_Pv_Hlm se ha cambiado a 120.0.
● Vigilancia del tiempo de muestreo
– Ya no se señalizan errores cuando el tiempo de muestreo actual ≥ 1,5 x valor medio
actual o el tiempo de muestreo actual ≤ 0,5 x valor medio actual. En el modo automático
se permite una desviación mayor del tiempo de muestreo.
– PID_Compact es compatible con FW a partir de V2.0.

3628

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
● Acceso a variables
Las siguientes variables pueden utilizarse ahora en el programa de usuario.
– i_Event_SUT
– i_Event_TIR
– r_Ctrl_Ioutv
● Corrección de errores
PID_Compact aplica ahora impulsos correctos si el tiempo de conexión más pequeño es
distinto del tiempo de desconexión más pequeño.

Compatibilidad con CPU y FW
La siguiente tabla muestra en qué CPU puede usarse cada versión de PID_Compact.
CPU

FW

PID_Compact

S7-1200

A partir de V4.2

V2.3
V2.2
V1.2

V4.0 a V4.1

V2.2
V1.2

V3.x

V1.2
V1.1

V2.x

V1.2
V1.1

S7-1500

V1.x

V1.0

A partir de V2.5

V2.4
V2.3
V2.2
V2.1
V2.0

V2.0 y V2.1

V2.3
V2.2
V2.1
V2.0

V1.5 a V1.8

V2.2
V2.1
V2.0

V1.1

V2.1
V2.0

V1.0

Programación del PLC
Manual de programación y manejo, 11/2019

V2.0

3629

Instrucciones
4.1 Instrucciones

Tiempo de ejecución de CPU y requerimiento de memoria PID_Compact V2.x
Tiempo de ejecución de CPU
Tiempos de ejecución de CPU típicos del objeto tecnológico PID_Compact a partir de la
versión V2.0 en función del tipo de CPU.
CPU

Tiempo de ejecución de CPU típ. PID_Compact V2.x

CPU 1211C ≥ V4.0

300 µs

CPU 1215C ≥ V4.0

300 µs

CPU 1217C ≥ V4.0

300 µs

CPU 1505S ≥ V1.0

45 µs

CPU 1510SP-1 PN ≥ V1.6

85 µs

CPU 1511-1 PN ≥ V1.5

85 µs

CPU 1512SP-1 PN ≥ V1.6

85 µs

CPU 1516-3 PN/DP ≥ V1.5

50 µs

CPU 1518-4 PN/DP ≥ V1.5

4 µs

Requerimiento de memoria
Memoria requerida por un DB de instancia del objeto tecnológico PID_Compact a partir de la
versión V2.0.
Memoria requerida

Memoria requerida por el DB de instancia de
PID_Compact V2.x

Memoria de carga requerida

Aprox. 12000 bytes

Memoria de trabajo total requerida

788 bytes

Memoria de trabajo remanente requerida

44 bytes

PID_Compact V2
Descripción PID_Compact V2
Descripción
La instrucción PID_Compact ofrece un regulador PID con optimización integrada para
actuadores de acción proporcional.
Se dispone de los modos de operación siguientes:
● Inactivo
● Optimización inicial
● Optimización fina
● Modo automático

3630

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
● Modo manual
● Valor de salida sustitutivo con monitorización de errores
Los modos de operación se describen detalladamente en el parámetro State.

Algoritmo PID
PID_Compact es un regulador PIDT1 con Anti-Windup y ponderación de las acciones P y D.
El algoritmo PID funciona de acuerdo con la siguiente fórmula:

1

y = Kp

[ (b · w - x) + T · s

(w - x) +

I

TD · s
a · TD · s + 1

(c · w - x)

Símbolo

Descripción

y

Valor de salida del algoritmo PID

Kp

Ganancia proporcional

s

Operador laplaciano

b

Ponderación de la acción P

w

Consigna

x

Valor real

]

TI

Tiempo de integración

TD

Tiempo derivativo

a

Coeficiente para el retardo de la acción derivada (retardo de la acción derivada T1
= a × TD)

c

Ponderación de la acción D

Programación del PLC
Manual de programación y manejo, 11/2019

3631

Instrucciones
4.1 Instrucciones

Diagrama de bloques PID_Compact

,QSXWB3(5

&53B,1

,QSXW3HU2Q

6FDOH





,QSXW:DUQLQJB/



,QSXW
6HWSRLQW

,QSXW:DUQLQJB+

39B$/50

3,'7
$QWL:LQGXS

/LPLW

,QYHUW&RQWURO

,19





2XWSXW

'LVWXUEDQFH
6WDWH
&53B287

/LPLW

ำ

0DQXDO9DOXH

2XWSXWB3(5





3:0

2XWSXWB3:0

Diagrama de bloques PIDT1 con Anti-Windup
6HWSRLQW Z

E



$QWL:LQGXS
/,0,7

,

.3

\


F

6FDOHG,QSXW [

3632



'7

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Llamada
PID_Compact se llama en una base de tiempo constante de un OB de alarma cíclica.
Si efectúa una llamada de PID_Compact como DB multiinstancia, no se creará ningún objeto
tecnológico. No dispondrá de interfaz de parametrización y puesta en servicio. Los
PID_Compact se deben parametrizar directamente en el DB multiinstancia y ponerse en
servicio a través de una tabla de observación.

Cargar en dispositivo
Los valores actuales de variables remanentes solo se actualizan si se carga PID_Compact por
completo.
AUTOHOTSPOT

Arranque
Al arrancar la CPU, PID_Compact se inicia en el modo guardado en el parámetro de entrada/
salida Mode. Para cambiar al modo de operación "Inactivo" durante el arranque, ajuste
RunModeByStartup = FALSE.

Comportamiento en caso de error
En modo automático y durante la puesta en servicio, el comportamiento en caso de error
depende de las variables SetSubstituteOutput y ActivateRecoverMode. En modo manual, el
comportamiento no depende de SetSubstituteOutput y ActivateRecoverMode. Si
ActivateRecoverMode = TRUE, el comportamiento dependerá además del error que se haya
producido.
SetSubstitu‐
teOutput

ActivateReco‐ Ajuste del Editor de configuración
verMode
> Valor de salida
> Output a

Irrelevante

FALSE

Cero (inactivo)

Comportamiento

Cambio al modo de operación "Inactivo" (State = 0)
El valor 0.0.0 se transfiere al elemento final de
control.

FALSE

TRUE

Valor de salida actual por la dura‐
ción del error

Cambio al modo de operación "Valor de salida
sustitutivo con monitorización de errores" (Sta‐
te = 5)
El valor de salida actual se transfiere al elemento
final de control o actuador mientras dure el error.

TRUE

TRUE

Valor de salida sustitutivo mientras
dure el error

Cambio al modo de operación "Valor de salida
sustitutivo con monitorización de errores" (Sta‐
te = 5)
El valor de SubstituteOutput se transfiere al actua‐
dor mientras dure el error.

PID_Compact utiliza ManualValue como valor de salida en el modo manual, excepto si
ManualValue no es válido. Si ManualValue no es válido, se utiliza SubstituteOutput. Si
ManualValue y SubstituteOutput no son válidos, se utiliza Config.OutputLowerLimit.

Programación del PLC
Manual de programación y manejo, 11/2019

3633

Instrucciones
4.1 Instrucciones
El parámetro Error indica si hay algún un error pendiente en ese momento. Si no persiste el
error, se indica Error = FALSE. El parámetro ErrorBits muestra qué errores se han producido.
ErrorBits se reinicia mediante un flanco ascendente en Reset o ErrorAck.

Funcionamiento PID_Compact V2
Monitorizar límites del valor real
En las variables Config.InputUpperLimit y Config.InputLowerLimit es posible definir un límite
superior y uno inferior del valor real. Si el valor real se encuentra fuera de estos límites, ocurre
un error (ErrorBits = 0001h).
En las variables Config.InputUpperWarning y Config.InputLowerWarning se definen un límite
de advertencia superior y uno inferior del valor real. Si el valor real se encuentra fuera de estos
límites de advertencia, se produce una advertencia (Warning = 0040h) y el parámetro de salida
InputWarning_H o InputWarning_L adopta el valor TRUE.

Limitar consigna
En las variables Config.SetpointUpperLimit y Config.SetpointLowerLimit es posible definir un
límite superior y uno inferior para la consigna. PID_Compact limita la consigna
automáticamente a los límites del valor real. Es posible limitar la consigna a un rango más
pequeño. PID_Compact verifica si dicho rango está dentro de los límites del valor real. Si la
consigna está fuera de estos límites, se utilizan los límites superior e inferior como consigna y
el parámetro de salida SetpointLimit_H o SetpointLimit_L adopta el valor TRUE.
La consigna se limita en todos los modos de operación.

Limitar el valor de salida
En las variables Config.OutputUpperLimit y Config.OutputLowerLimit se definen un límite
superior y otro inferior del valor de salida. Output, ManualValue y SubstituteOutput se limitan
a estos valores. Los límites del valor de salida deben ser compatibles con el sentido de
regulación.
Los valores válidos para los límites del valor de salida dependen del Output utilizado.
Output

de -100.0 a 100.0%

Output_PER

de -100.0 a 100.0%

Output_PWM

de -0.0 a 100.0%

Rige:

3634

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
OutputUpperLimit > OutputLowerLimit
Nota
Uso con dos o más actuadores
PID_Compact no es adecuado para el uso con dos o más actuadores (p. ej., en aplicaciones
de calefacción/refrigeración), pues los actuadores diferentes necesitan también parámetros
PID diferentes para conseguir un buen comportamiento de regulación. Para aplicaciones con
dos actuadores de acción contrapuesta, utilice PID_Temp.

Valor de salida sustitutivo
PID_Compact puede emitir un valor de salida sustitutivo en caso de error que predefine en la
variable SubstituteOutput. El valor de salida sustitutivo debe encontrarse dentro de los límites
del valor de salida.

Vigilar la validez de las señales
Se vigila la validez de los valores de los siguientes parámetros al utilizarlos:
● Setpoint
● Input
● Input_PER
● Disturbance
● ManualValue
● SubstituteOutput
● Output
● Output_PER
● Output_PWM

Vigilancia del tiempo de muestreo PID_Compact
En el caso ideal, el tiempo de muestreo equivale al tiempo de ciclo del OB invocante. La
instrucción PID_Compact mide en cada caso el tiempo que transcurre entre dos llamadas.
Este es el tiempo de muestreo actual. Con cada cambio de modo de operación y en el primer
arranque se calcula la media de los 10 primeros tiempos de muestreo. Si el tiempo de muestreo
actual se desvía mucho de este valor medio, ocurre un error (Error = 0800h).
Durante la optimización, el error se produce si:
● Valor medio nuevo >= 1,1 veces el valor medio antiguo
● Valor medio nuevo <= 0,9 veces el valor medio antiguo
En el modo automático, el error se produce si:
● Valor medio nuevo >= 1,5 veces el valor medio antiguo
● Valor medio nuevo <= 0,5 veces el valor medio antiguo

Programación del PLC
Manual de programación y manejo, 11/2019

3635

Instrucciones
4.1 Instrucciones
Si se desactiva la monitorización del tiempo de muestreo (CycleTime.EnMonitoring = FALSE),
puede llamarse PID_Compact también en el OB1. En tal caso, deberá aceptarse una
regulación de menor calidad, debido a la fluctuación del tiempo de muestreo.

Tiempo de muestreo del algoritmo PID
Dado que el sistema regulado necesita cierto tiempo para responder a un cambio del valor de
salida, no es razonable calcular este valor en cada ciclo. El tiempo de muestreo del algoritmo
PID es el tiempo entre dos cálculos del valor de salida. Este se determina durante la
optimización y se redondea a un múltiplo del tiempo de ciclo. Todas las demás funciones de
PID_Compact se ejecutan con cada llamada.
Si se utiliza Output_PWM, el tiempo de muestreo del algoritmo PID se utiliza como duración de
periodo de la modulación de ancho de impulsos. La precisión de la señal de salida se
determina mediante la relación entre el tiempo de muestreo del algoritmo PID y el tiempo de
ciclo del OB. Por eso se recomienda que el tiempo de ciclo sea como máximo una décima parte
del tiempo de muestreo del algoritmo PID.

Sentido de regulación
Por lo general, un aumento del valor de salida debe lograr un aumento del valor real. En este
caso, se habla de un sentido de regulación normal. Para refrigeración o para las regulaciones
de desagües puede ser necesario invertir el sentido de regulación. PID_Compact no funciona
con ganancia proporcional negativa. Si InvertControl = TRUE, un error de regulación
ascendente provocará una reducción del valor de salida. El sentido de regulación se tiene en
cuenta también durante la optimización inicial y la optimización fina.

Parámetros de entrada PID_Compact V2
Tabla 4-58
Parámetro

Tipo de datos

Ajuste prede‐
terminado

Descripción

Setpoint

REAL

0.0

Consigna del regulador PID en modo automático

Input

REAL

0.0

Una variable del programa de usuario se utiliza como
origen del valor real.
Si utiliza el parámetro Input, debe cumplirse lo siguien‐
te: Config.InputPerOn = FALSE.

Input_PER

INT

0

Una entrada analógica se utiliza como origen del valor
real.
Si utiliza el parámetro Input_PER, debe cumplirse lo
siguiente: Config.InputPerOn = TRUE.

Disturbance

3636

REAL

0.0

Magnitud perturbadora o valor de control anticipativo

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Tipo de datos

Ajuste prede‐
terminado

Descripción

ManualEnable

BOOL

FALSE

● El flanco FALSE -> TRUE activa el modo de
operación "Modo manual", State = 4, Mode no
cambia.
Mientras se cumple ManualEnable = TRUE, no es
posible cambiar el modo de operación mediante un
flanco ascendente en ModeActivate, ni utilizar el
diálogo de puesta en servicio.
● El flanco TRUE -> FALSE activa el modo de
operación especificado en Mode.
Se recomienda cambiar el modo de operación solo me‐
diante ModeActivate.

ManualValue

REAL

0.0

Valor manual
Este valor se utiliza en modo manual como valor de
salida.
Se admiten valores entre Config.OutputLowerLimit y
Config.OutputUpperLimit

ErrorAck

BOOL

FALSE

● Flanco FALSE -> TRUE
ErrorBits y Warning se desactivan.

Reset

BOOL

FALSE

Realiza un rearranque completo del regulador.
● Flanco FALSE -> TRUE
–

Cambio al modo de operación "Inactivo"

–

ErrorBits y Warnings se desactivan.

● Mientras se cumpla Reset = TRUE,
–

PID_Compact permanece en el modo de
operación "Inactivo" (State = 0);

–

no es posible cambiar el modo de operación
mediante Mode y ModeActivate o
ManualEnable;

–

no es posible utilizar el diálogo de puesta en
marcha.

● Flanco TRUE -> FALSE

ModeActivate

BOOL

Programación del PLC
Manual de programación y manejo, 11/2019

FALSE

–

Si ManualEnable = FALSE, PID_Compact
cambia al modo de operación que está
guardado en Mode.

–

Si Mode = 3, la acción I se trata como se haya
configurado a través de la variable
IntegralResetMode.

● Flanco FALSE -> TRUE
PID_Compact cambia al modo guardado en Mode.

3637

Instrucciones
4.1 Instrucciones

Parámetros de salida PID_Compact V2
Tabla 4-59
Parameter

Tipo de datos Ajuste predetermina‐
do

Descripción

ScaledInput

REAL

Valor real escalado

0.0

Las salidas "Output", "Output_PER" y "Output_PWM" pueden utilizarse paralelamente.
Output

REAL

0.0

Valor de salida en el formato REAL

Output_PER

INT

0

Valor de salida analógico

Output_PWM

BOOL

FALSE

Valor de salida modulado por ancho de impulso
El valor de salida se obtiene mediante tiempos de conexión
y desconexión variables.

SetpointLimit_H

BOOL

FALSE

Si SetpointLimit_H = TRUE se cumple, significa que se ha
alcanzado el límite superior absoluto de la consigna (Set‐
point ≥ Config.SetpointUpperLimit).
La consigna está limitada a Config.SetpointUpperLimit .

SetpointLimit_L

BOOL

FALSE

Si SetpointLimit_L = TRUE se cumple, significa que se ha
alcanzado el límite inferior absoluto de la consigna (Setpoint
≤ Config.SetpointLowerLimit).

InputWarning_H

BOOL

FALSE

Cuando InputWarning_H = TRUE, significa que se ha alcan‐
zado o rebasado el límite superior de advertencia del valor
real.

InputWarning_L

BOOL

FALSE

Cuando InputWarning_L = TRUE, significa que se ha alcan‐
zado o rebasado por defecto el límite inferior de advertencia
del valor real.

State

INT

0

El parámetro State (Página 3650) indica el modo de opera‐
ción actual del regulador PID. El modo de operación se
cambia con el parámetro de entrada Mode y un flanco as‐
cendente en ModeActivate.

La consigna está limitada a Config.SetpointLowerLimit .

● State = 0: Inactivo
● State = 1: optimización inicial
● State = 2: Optimización fina
● State = 3: Modo automático
● State = 4: Modo manual
● State = 5: Valor de salida sustitutivo con monitorización
de errores
Error

BOOL

FALSE

Si Error = TRUE, existe al menos un mensaje de error en el
ciclo actual.

ErrorBits

DWORD

DW#16#0

El parámetro ErrorBits (Página 3654) muestra qué mensa‐
jes de error existen. ErrorBits es remanente y se restablece
con un flanco ascendente en Reset o ErrorAck.

3638

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros de entrada/salida PID_Compact V2
Tabla 4-60
Parameter

Tipo de datos

Ajuste predeterminado

Descripción

Mode

INT

4

Especifique en Mode el modo de operación
al que debe cambiar PID_Compact. Posibili‐
dades:
● Mode = 0: Inactivo
● Mode = 1: Optimización inicial
● Mode = 2: Optimización fina
● Mode = 3: Modo automático
● Mode = 4: Modo manual
El modo se activa mediante:
● Flanco ascendente en ModeActivate
● Flanco descendente en Reset
● Flanco descendente en ManualEnable
● Arranque en frío de la CPU si
RunModeByStartup = TRUE
Mode es remanente.
Encontrará una descripción detallada de los
modos en Parámetros State y Mode V2 (Pá‐
gina 3650).

Consulte también
Parámetros State y Mode V2 (Página 3650)

Variables estáticas de PID_Compact V2
Nota
Modifique las variables marcadas con (1) solo en el modo de operación "Inactivo" para evitar un
comportamiento erróneo del regulador PID.

Programación del PLC
Manual de programación y manejo, 11/2019

3639

Instrucciones
4.1 Instrucciones

Variable

Tipo de da‐ Ajuste prede‐
tos
terminado

Descripción

IntegralResetMode

INT

La Variable IntegralResetMode V2 (Página 3658) de‐
termina cómo se preasigna la acción I PIDCtrl.Integral‐
Sum al cambiar del modo de operación "Inactivo" al
"Modo automático". Este ajuste surte efecto solo para
un ciclo.

Hasta V2.2: 1,
a partir de
V2.3: 4

Posibilidades:
● IntegralResetMode = 0: Filtrar
● IntegralResetMode = 1: Borrar
● IntegralResetMode = 2: Mantener
● IntegralResetMode = 3: Preasignar
● IntegralResetMode = 4: Como el cambio de
consigna (solo para PID_Compact con versión ≥
2.3)
OverwriteInitialOutputValue

REAL

0.0

Si se cumple una de las siguientes condiciones, la ac‐
ción integral de PIDCtrl.IntegralSum se preasigna au‐
tomáticamente como si en el ciclo anterior hubiese sido
Output = OverwriteInitialOutputValue:
● IntegralResetMode = 3 al cambiar del modo de
operación "Inactivo" al "Modo automático".
● Flanco TRUE -> FALSE en el parámetro Reset y el
parámetro Mode = 3
● PIDCtrl.PIDInit = TRUE en el "Modo automático"
(disponible a partir de PID_Compact versión 2.3)

RunModeByStartup

BOOL

TRUE

Activar Mode después del rearranque de la CPU
Si RunModeByStartup = TRUE, PID_Compact se inicia
después del arranque de la CPU en el modo guardado
en Mode.
Si RunModeByStartup = FALSE, PID_Compact perma‐
nece en modo "Inactivo" después del arranque de la
CPU.

LoadBackUp

BOOL

FALSE

Si LoadBackUp = TRUE, se carga nuevamente el últi‐
mo juego de parámetros PID. El juego se guardó antes
de la última optimización. LoadBackUp se ajusta auto‐
máticamente de nuevo a FALSE.

PhysicalUnit

INT

0

Unidad física del valor real y de la consigna, p. ej. ºC o
ºF.

PhysicalQuantity

INT

0

Unidad física del valor real y de la consigna, p. ej. tem‐
peratura.

ActivateRecoverMode

BOOL

TRUE

La Variable ActivateRecoverMode V2 (Página 3656)
determina el comportamiento en caso de error.

Warning

DWORD

0

Variable Warning V2 (Página 3658) muestra las adver‐
tencias desde Reset = TRUE o ErrorAck =TRUE. War‐
ning es remanente.

Progress

REAL

0.0

Progreso de la optimización en porcentaje (0,0 - 100,0)

CurrentSetpoint

REAL

0.0

CurrentSetpoint muestra siempre la consigna actual.
Este valor se congela durante la optimización.

3640

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de da‐ Ajuste prede‐
tos
terminado

Descripción

CancelTuningLevel

REAL

Fluctuación admisible de la consigna durante la optimi‐
zación. La optimización no se cancela hasta que no se
cumple:

10.0

● Setpoint > CurrentSetpoint + CancelTuningLevel
o bien
● Setpoint < CurrentSetpoint - CancelTuningLevel
SubstituteOutput

REAL

0.0

Valor de salida sustitutivo
Si se cumplen las siguientes condiciones, se utiliza el
valor de salida sustitutivo:
● Se ha producido un error en el modo automático.
● SetSubstituteOutput = TRUE
● ActivateRecoverMode = TRUE

SetSubstituteOutput

BOOL

TRUE

Si SetSubstituteOutput = TRUE y ActivateRecoverMo‐
de = TRUE, se emite el valor de salida sustitutivo con‐
figurado mientras haya un error pendiente.
Si SetSubstituteOutput = FALSE y ActivateRecoverMo‐
de = TRUE, el actuador se mantiene en el valor de sa‐
lida actual mientras haya un error pendiente.
Si ActivateRecoverMode = FALSE, SetSubstituteOut‐
put queda sin efecto.
Si SubstituteOutput no es válido (ErrorBits = 20000h), el
valor de salida sustitutivo no se puede emitir.

Config.InputPerOn(1)

BOOL

TRUE

Si InputPerOn = TRUE, se utiliza el parámetro In‐
put_PER. Si InputPerOn = FALSE, se utiliza el paráme‐
tro Input.

Config.InvertControl(1)

BOOL

FALSE

Inversión del sentido de regulación
Si InvertControl = TRUE, un error de regulación ascen‐
dente provocará una reducción del valor de salida.

Config.InputUpperLimit(1)

REAL

120.0

Límite superior del valor real
Se vigila que Input y Input_PER respeten estos límites.
En la entrada de periferia, el valor real puede encon‐
trarse como máximo un 18% por encima del rango nor‐
malizado (margen de saturación). No se comunica nin‐
gún error más con el ajuste predeterminado debido al
rebase por exceso del "Límite superior del valor real".
Únicamente se detectan la rotura de hilo y el cortocir‐
cuito y PID_Compact se comporta según la reacción
configurada en caso de error.
InputUpperLimit > InputLowerLimit

Config.InputLowerLimit

(1)

REAL

0.0

Límite inferior del valor real
Se vigila que Input y Input_PER respeten estos límites.
InputLowerLimit < InputUpperLimit

Programación del PLC
Manual de programación y manejo, 11/2019

3641

Instrucciones
4.1 Instrucciones
Variable

Tipo de da‐ Ajuste prede‐
tos
terminado

Config.InputUpperWarning(1)

REAL

Descripción

3.402822e+38 Límite superior de advertencia del valor real
Si se configura InputUpperWarning a un valor que se
encuentre fuera de los límites del valor real, el límite
superior absoluto configurado para el valor real se utili‐
za como límite superior de advertencia.
Si se configura InputUpperWarning a un valor que se
encuentre dentro de los límites del valor real, este valor
se utiliza como límite superior de advertencia.
InputUpperWarning > InputLowerWarning
InputUpperWarning ≤ InputUpperLimit

Config.InputLowerWarning

(1)

REAL

-3.402822e
+38

Límite inferior de advertencia del valor real
Si se configura InputLowerWarning a un valor que se
encuentre fuera de los límites del valor real, el límite
inferior absoluto configurado para el valor real se utiliza
como límite inferior de advertencia.
Si se configura InputLowerWarning a un valor que se
encuentre dentro de los límites del valor real, este valor
se utiliza como límite inferior de advertencia.
InputLowerWarning < InputUpperWarning
InputLowerWarning ≥ InputLowerLimit

Config.OutputUpperLimit

(1)

REAL

100.0

Límite superior del valor de salida
Para más detalles ver OutputLowerLimit
OutputUpperLimit > OutputLowerLimit

Config.OutputLowerLimit(1)

REAL

0.0

Límite inferior del valor de salida
Para Output o Output_PER, el rango de valores válido
va de -100.0 hasta +100.0 incluido el cero. Para -100.0,
Output_PER = -27648; para +100.0, Output_PER =
27648.
Para Output_PWM el rango de valores válido va de 0.0
a +100.0.
Los límites del valor de salida deben ser compatibles
con el sentido de regulación.
OutputLowerLimit < OutputUpperLimit

Config.SetpointUpperLimit

(1)

REAL

3.402822e+38 Límite superior de la consigna
Si se configura SetpointUpperLimit a un valor que se
encuentre fuera de los límites del valor real, el límite
superior absoluto configurado para el valor real se utili‐
za como límite superior de la consigna.
Si se configura SetpointUpperLimit a un valor que se
encuentre dentro de los límites del valor real, este valor
se utiliza como límite superior de la consigna.

3642

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de da‐ Ajuste prede‐
tos
terminado

Descripción

Config.SetpointLowerLimit(1)

REAL

Límite inferior de la consigna

-3.402822e
+38

Si se configura SetpointLowerLimit a un valor que se
encuentre fuera de los límites del valor real, el límite
inferior absoluto configurado para el valor real se utiliza
como límite inferior de la consigna.
Si se configura SetpointLowerLimit a un valor que se
encuentre dentro de los límites del valor real, este valor
se utiliza como límite inferior de la consigna.

Config.MinimumOnTime(1)

REAL

0.0

Config.MinimumOffTime(1)

REAL

0.0

Config.InputScaling.UpperPointIn(1)

REAL

27648.0

El tiempo mínimo de conexión de la modulación de an‐
cho de impulsos en segundos se redondea a
MinimumOnTime = n×CycleTime.Value
El tiempo mínimo de desconexión de la modulación de
ancho de impulsos en segundos se redondea a
MinimumOffTime = n×CycleTime.Value
Escalado Input_PER arriba
Mediante los dos pares de valores UpperPointOut, Up‐
perPointIn y LowerPointOut, LowerPointIn, Input_PER
se convierte a porcentaje.

Config.InputScaling.LowerPointIn(1)

REAL

0.0

Escalado Input_PER abajo
Mediante los dos pares de valores UpperPointOut, Up‐
perPointIn y LowerPointOut, LowerPointIn, Input_PER
se convierte a porcentaje.

Config.InputScaling.UpperPoin‐
tOut(1)

REAL

100.0

Valor real superior escalado

Config.InputScaling.LowerPoin‐
tOut(1)

REAL

CycleTime.StartEstimation

BOOL

TRUE

Si CycleTime.StartEstimation = TRUE se empieza a
medir automáticamente el tiempo de ciclo. Una vez fi‐
nalizada la medición, CycleTime.StartEstimation = FAL‐
SE.

CycleTime.EnEstimation

BOOL

TRUE

Si CycleTime.EnEstimation = TRUE se calcula el tiem‐
po de muestreo PID_Compact.

Mediante los dos pares de valores UpperPointOut, Up‐
perPointIn y LowerPointOut, LowerPointIn, Input_PER
se convierte a porcentaje.
0.0

Valor real inferior escalado
Mediante los dos pares de valores UpperPointOut, Up‐
perPointIn y LowerPointOut, LowerPointIn, Input_PER
se convierte a porcentaje.

Si CycleTime.EnEstimation = FALSE, el tiempo de
muestreo PID_Compact no se calcula y debe configurar
CycleTime.Value correctamente a mano.
CycleTime.EnMonitoring

BOOL

TRUE

Si CycleTime.EnMonitoring = FALSE no se vigila el
tiempo de muestreo PID_Compact. Si no es posible
ejecutar PID_Compact dentro del tiempo de muestreo,
no se emite ningún error (ErrorBits=0800h) y PID_Com‐
pact no cambia al modo de operación "Inactivo".

CycleTime.Value(1)

REAL

0.1

Tiempo de muestreo PID_Compact en segundos
CycleTime.Value se calcula automáticamente y equi‐
vale normalmente al tiempo de ciclo del OB invocante.

Programación del PLC
Manual de programación y manejo, 11/2019

3643

Instrucciones
4.1 Instrucciones
Variable

Tipo de da‐ Ajuste prede‐
tos
terminado

Descripción

CtrlParamsBackUp.Gain

REAL

Ganancia proporcional almacenada

1.0

Los valores de la estructura CtrlParamsBackUp pueden
volverse a cargar con LoadBackUp = TRUE.
CtrlParamsBackUp.Ti

REAL

20.0

Tiempo de integración [s] almacenado

CtrlParamsBackUp.Td

REAL

0.0

Tiempo derivativo [s] almacenado

CtrlParamsBackUp.TdFiltRatio

REAL

0.2

Coeficiente almacenado para el retardo de la acción
derivada

CtrlParamsBackUp.PWeighting

REAL

1.0

Factor de ponderación almacenado de la acción P

CtrlParamsBackUp.DWeighting

REAL

1.0

Factor de ponderación almacenado de la acción D

CtrlParamsBackUp.Cycle

REAL

1.0

Tiempo de muestreo almacenado del algoritmo PID

PIDSelfTune.SUT.CalculateParams

BOOL

FALSE

Las propiedades del sistema regulado se almacenan
durante la optimización. Si SUT.CalculateParams =
TRUE, se vuelven a calcular los parámetros de la opti‐
mización inicial con estas propiedades. De este modo
puede cambiarse el método para calcular los paráme‐
tros sin que sea necesario repetir la optimización.
SUT.CalculateParams se ajusta a FALSE después del
cálculo.

PIDSelfTune.SUT.TuneRule

INT

0

Calcular los parámetros durante la optimización inicial
según el método:
● SUT.TuneRule = 0: PID según Chien, Hrones y
Reswick
● SUT.TuneRule = 1: PI según Chien, Hrones y
Reswick

PIDSelfTune.SUT.State

INT

0

La variable SUT.State muestra la fase actual de la op‐
timización inicial:
● State = 0: Iniciar la optimización inicial
● State = 100: Calcular desviación estándar
● State = 200: Determinar punto de inflexión
● State = 9900: Optimización inicial correcta
● State = 1: Optimización inicial no correcta

3644

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de da‐ Ajuste prede‐
tos
terminado

Descripción

PIDSelfTune.TIR.RunIn

BOOL

Con la variable RunIn puede determinar que se realice
una optimización fina incluso sin optimización inicial.

FALSE

● RunIn = FALSE
Si la optimización fina se inicia desde los modos de
operación Inactivo o Manual, se inicia una
optimización inicial. Si no se cumplen los requisitos
para la optimización inicial, PID_Compact se
comporta como si RunIn = TRUE.
Si la optimización fina se inicia desde el modo
automático, los parámetros PID existentes se
regulan a la consigna.
Solo entonces comienza la optimización fina. Si no
es posible realizar una optimización inicial,
PID_Compact pasa al modo desde el que se inició
la optimización.
● RunIn = TRUE
La optimización inicial se omite. PID_Compact
intenta alcanzar la consigna con el valor de salida
mínimo o máximo, lo que puede ocasionar una
sobreoscilación muy alta. La optimización fina se
inicia entonces automáticamente.
RunIn se ajusta a FALSE después de la
optimización fina.
PIDSelfTune.TIR.CalculateParams

BOOL

FALSE

Las propiedades del sistema regulado se almacenan
durante la optimización. Si TIR.CalculateParams =
TRUE, se vuelven a calcular los parámetros de la opti‐
mización fina con estas propiedades. De este modo
puede cambiarse el método para calcular los paráme‐
tros sin que sea necesario repetir la optimización.
TIR.CalculateParams se ajusta a FALSE después del
cálculo.

Programación del PLC
Manual de programación y manejo, 11/2019

3645

Instrucciones
4.1 Instrucciones
Variable

Tipo de da‐ Ajuste prede‐
tos
terminado

Descripción

PIDSelfTune.TIR.TuneRule

INT

Calcular los parámetros durante la optimización fina
según el método:

0

● TIR.TuneRule = 0: PID automático
● TIR.TuneRule = 1: PID rápido (comportamiento de
regulación más rápido con amplitudes del valor de
salida mayores que las de TIR.TuneRule = 2)
● TIR.TuneRule = 2: PID lento (comportamiento de
regulación más lento con amplitudes del valor de
salida menores que las de TIR.TuneRule = 1)
● TIR.TuneRule = 3: PID Ziegler-Nichols
● TIR.TuneRule = 4: PI Ziegler-Nichols
● TIR.TuneRule = 5: P Ziegler-Nichols
Para poder repetir el cálculo de los parámetros PID con
TIR.CalculateParams y TIR.TuneRule = 0, 1 o 2, la op‐
timización fina anterior debe haberse ejecutado tam‐
bién con TIR.TuneRule =0, 1 o 2.
De no ser así, se utiliza TIR.TuneRule = 3.
Siempre es posible volver a calcular los parámetros PID
con TIR.CalculateParams y TIR.TuneRule = 3, 4 o 5.
PIDSelfTune.TIR.State

INT

0

La variable TIR.State muestra la fase actual de la Opti‐
mización fina:
● State = -100 No es posible realizar la optimización
fina. Primero se efectuará una optimización inicial.
● State = 0: Iniciar la optimización fina
● State = 200: Calcular desviación estándar
● State = 300: Intentar alcanzar consigna
● State = 400: Intentar alcanzar la consigna con los
parámetros PID actuales
(si la optimización inicial ha sido correcta)
● State = 500: Determinar oscilación y calcular
parámetros
● State = 9900: Optimización fina correcta
● State = 1: Optimización fina no correcta

PIDCtrl.IntegralSum
PIDCtrl.PIDInit

(1)

REAL

0.0

Acción I actual

BOOL

FALSE

PIDCtrl.PIDInit está disponible a partir de PID_Compact
versión 2.3.
Si PIDCtrl.PIDInit = TRUE en el "Modo automático", la
acción integral de PIDCtrl.IntegralSum se preasigna
automáticamente como si en el ciclo anterior hubiese
sido Output = OverwriteInitialOutputValue. Esto se pue‐
de utilizar para una AUTOHOTSPOT.

3646

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de da‐ Ajuste prede‐
tos
terminado

Descripción

Retain.CtrlParams.Gain(1)

REAL

Ganancia proporcional activa

1.0

Para invertir el sentido de regulación utilice la variable
Config.InvertControl. Los valores negativos de Gain in‐
vierten también el sentido de regulación. Se recomien‐
da que ajuste el sentido de regulación únicamente a
través de InvertControl. Si se cumplen InvertControl =
TRUE y Gain < 0.0, el sentido de regulación también se
invierte.
Gain es remanente.
Retain.CtrlParams.Ti(1)

REAL

20.0

● CtrlParams.Ti > 0.0: Tiempo de integración activo
● CtrlParams.Ti = 0.0: La acción I está desactivada
Ti es remanente.

Retain.CtrlParams.Td(1)

REAL

0.0

● CtrlParams.Td > 0.0: Tiempo derivativo activo
● CtrlParams.Td = 0.0: La acción D está desactivada
Td es remanente.

Retain.CtrlParams.TdFiltRatio(1)

REAL

0.2

Coeficiente activo para el retardo de la acción derivada
El efecto de la acción D se retrasa mediante el coefi‐
ciente de retardo de la acción derivada.
Retardo de la acción derivada = Tiempo derivativo ×
coeficiente de retardo de la acción derivada
● 0.0: la acción D solo surte efecto para un ciclo y, por
ello, casi no es efectiva.
● 0.5: este valor se ha acreditado en la práctica para
sistemas regulados con una constante de tiempo
dominante.
● > 1.0: cuanto mayor sea el coeficiente, más se
retrasará el efecto de la acción D.
TdFiltRatio es remanente.

Retain.CtrlParams.PWeighting(1)

REAL

1.0

Ponderación activa de la acción P
En el caso de que se modifique la consigna, es posible
atenuar la acción P.
Se recomiendan valores comprendidos entre 0.0 y 1.0.
● 1.0: la acción P actúa plenamente al cambiar la
consigna
● 0.0: la acción P no actúa al cambiar la consigna
Si se modifica el valor real, la acción P actúa siempre
plenamente.
PWeighting es remanente.

Programación del PLC
Manual de programación y manejo, 11/2019

3647

Instrucciones
4.1 Instrucciones
Variable

Tipo de da‐ Ajuste prede‐
tos
terminado

Descripción

Retain.CtrlParams.DWeighting(1)

REAL

Ponderación activa de la acción D

1.0

En el caso de que se modifique la consigna, es posible
atenuar la acción D.
Se recomiendan valores comprendidos entre 0.0 y 1.0.
● 1.0: La acción D actúa plenamente al cambiar la
consigna.
● 0.0: la acción D no actúa al cambiar la consigna
Si se modifica el valor real, la acción D actúa siempre
plenamente.
DWeighting es remanente.
Retain.CtrlParams.Cycle

(1)

REAL

1.0

Tiempo de muestreo activo del algoritmo PID
CtrlParams.Cycle se determina durante la optimización
y se redondea a un múltiplo entero de CycleTime.Value.
CtrlParams.Cycle se utiliza como duración de periodo
de la modulación por ancho de impulso.
Cycle es remanente.

Consulte también
Variable ActivateRecoverMode V2 (Página 3656)
Variable Warning V2 (Página 3658)

Modificaciones de la interfaz PID_Compact V2
La siguiente tabla muestra lo que ha cambiado en la interfaz de la instrucción PID_Compact.

PID_Compact V1

PID_Compact V2

Cambio

Input_PER

Input_PER

Tipo de datos de Word a Int

Disturbance

Nuevo

ErrorAck

Nuevo

ModeActivate

Nuevo

Output_PER

Output_PER

Tipo de datos de Word a Int

Error

ErrorBits

Cambio de nombre

Error

Nuevo

Mode

Nuevo

RunModeByStartup

Función

sb_RunModeByStartup

IntegralResetMode

3648

OverwriteInitialOutputValue

Nuevo

SetSubstituteOutput

Nuevo

CancelTuningLevel

Nuevo

SubstituteOutput

Nuevo

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La siguiente tabla muestra las variables que han cambiado de nombre.
PID_Compact V1.x

PID_Compact V2

sb_GetCycleTime

CycleTime.StartEstimation

sb_EnCyclEstimation

CycleTime.EnEstimation

sb_EnCyclMonitoring

CycleTime.EnMonitoring

sb_RunModeByStartup

RunModeByStartup

si_Unit

PhysicalUnit

si_Type

PhysicalQuantity

sd_Warning

Warning

sBackUp.r_Gain

CtrlParamsBackUp.Gain

sBackUp.r_Ti

CtrlParamsBackUp.Ti

sBackUp.r_Td

CtrlParamsBackUp.Td

sBackUp.r_A

CtrlParamsBackUp.TdFiltRatio

sBackUp.r_B

CtrlParamsBackUp.PWeighting

sBackUp.r_C

CtrlParamsBackUp.DWeighting

sBackUp.r_Cycle

CtrlParamsBackUp.Cycle

sPid_Calc.r_Cycle

CycleTime.Value

sPid_Calc.b_RunIn

PIDSelfTune.TIR.RunIn

sPid_Calc.b_CalcParamSUT

PIDSelfTune.SUT.CalculateParams

sPid_Calc.b_CalcParamTIR

PIDSelfTune.TIR.CalculateParams

sPid_Calc.i_CtrlTypeSUT

PIDSelfTune.SUT.TuneRule

sPid_Calc.i_CtrlTypeTIR

PIDSelfTune.TIR.TuneRule

sPid_Calc.r_Progress

Progress

sPid_Cmpt.r_Sp_Hlm

Config.SetpointUpperLimit

sPid_Cmpt.r_Sp_Llm

Config.SetpointLowerLimit

sPid_Cmpt.r_Pv_Norm_IN_1

Config.InputScaling.LowerPointIn

sPid_Cmpt.r_Pv_Norm_IN_2

Config.InputScaling.UpperPointIn

sPid_Cmpt.r_Pv_Norm_OUT_1

Config.InputScaling.LowerPointOut

sPid_Cmpt.r_Pv_Norm_OUT_2

Config.InputScaling.UpperPointOut

sPid_Cmpt.r_Lmn_Hlm

Config.OutputUpperLimit

sPid_Cmpt.r_Lmn_Llm

Config.OutputLowerLimit

sPid_Cmpt.b_Input_PER_On

Config.InputPerOn

sPid_Cmpt.b_LoadBackUp

LoadBackUp

sPid_Cmpt.b_InvCtrl

Config.InvertControl

sPid_Cmpt.r_Lmn_Pwm_PPTm

Config.MinimumOnTime

sPid_Cmpt.r_Lmn_Pwm_PBTm

Config.MinimumOffTime

sPid_Cmpt.r_Pv_Hlm

Config.InputUpperLimit

sPid_Cmpt.r_Pv_Llm

Config.InputLowerLimit

sPid_Cmpt.r_Pv_HWrn

Config.InputUpperWarning

sPid_Cmpt.r_Pv_LWrn

Config.InputLowerWarning

sParamCalc.i_Event_SUT

PIDSelfTune.SUT.State

sParamCalc.i_Event_TIR

PIDSelfTune.TIR.State

Programación del PLC
Manual de programación y manejo, 11/2019

3649

Instrucciones
4.1 Instrucciones
PID_Compact V1.x

PID_Compact V2

sRet.i_Mode

sRet.i_Mode se ha suprimido. El modo de opera‐
ción se cambia mediante Mode y ModeActivate.

sRet.r_Ctrl_Gain

Retain.CtrlParams.Gain

sRet.r_Ctrl_Ti

Retain.CtrlParams.Ti

sRet.r_Ctrl_Td

Retain.CtrlParams.Td

sRet.r_Ctrl_A

Retain.CtrlParams.TdFiltRatio

sRet.r_Ctrl_B

Retain.CtrlParams.PWeighting

sRet.r_Ctrl_C

Retain.CtrlParams.DWeighting

sRet.r_Ctrl_Cycle

Retain.CtrlParams.Cycle

Parámetros State y Mode V2
Interrelación de los parámetros
El parámetro State indica el modo de operación actual del regulador PID. El parámetro State
no puede modificarse.
Con un flanco ascendente en ModeActivate, PID_Compact pasa al modo guardado en el
parámetro de entrada/salida Mode.
Al conectar la CPU o cambiar de STOP a RUN, PID_Compact se inicia en el modo de
operación guardado en Mode. Para dejar PID_Compact en el modo de operación "Inactivo",
ajuste RunModeByStartup = FALSE.

3650

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Significado de los valores
State / Mode Descripción del modo de operación
0

Inactivo
En el modo de operación "Inactivo" se emite siempre el valor de salida 0.0, independientemente de Con‐
fig.OutputUpperLimit y Config.OutputLowerLimit. La modulación del ancho de pulso está desactivada.

1

Optimización inicial
La optimización inicial determina el comportamiento del proceso a un escalón del valor de salida y busca el
punto de inflexión. Los parámetros PID óptimos se calculan a partir de la pendiente máxima y el tiempo muerto
del sistema regulado. Para obtener los mejores parámetros PID, debe efectuarse una optimización inicial y
una optimización fina.
Requisitos para la optimización inicial:
● Modo de operación Inactivo (State = 0), Manual (State = 4) o Automático (State = 3)
● ManualEnable = FALSE
● Reset = FALSE
● El valor real no debe aproximarse demasiado a la consigna.
|Setpoint - Input| > 0.3 * | Config.InputUpperLimit - Config.InputLowerLimit| y
|Setpoint - Input| > 0.5 * |Setpoint|
● La consigna y el valor real se encuentran dentro de los límites configurados.
Cuanto más estable es el valor real, con mayor facilidad y precisión se pueden calcular los parámetros PID.
Un ruido del valor real es aceptable siempre que la subida del valor real sea considerablemente mayor que
el ruido.
La consigna se congela en la variable CurrentSetpoint. La optimización no se cancela hasta que no se cumple:
● Setpoint > CurrentSetpoint + CancelTuningLevel
o bien,
● Setpoint < CurrentSetpoint - CancelTuningLevel
Antes de volver a calcular los parámetros PID, se guarda una copia de seguridad de estos y es posible
reactivarlos con LoadBackUp.
Una vez realizada correctamente la optimización inicial, se pasa al modo automático; si la optimización inicial
no se ha realizado correctamente, el cambio del modo de operación depende de ActivateRecoverMode.
Se muestra la fase de la optimización inicial con PIDSelfTune.SUT.State.

Programación del PLC
Manual de programación y manejo, 11/2019

3651

Instrucciones
4.1 Instrucciones
State / Mode Descripción del modo de operación
2

Optimización fina
La optimización fina genera una oscilación constante y limitada del valor real. A partir de la amplitud y fre‐
cuencia de esta oscilación se calculan de nuevo los parámetros PID. Los parámetros PID existentes después
de la optimización fina muestran en su mayoría un comportamiento de guía y ante fallos mucho mejor que los
parámetros PID de la optimización inicial. Para obtener los mejores parámetros PID, debe efectuarse una
optimización inicial y una optimización fina.
PID_Compact intenta generar automáticamente una oscilación que es mayor que el ruido del valor real. La
estabilidad del valor real ejerce tan solo una mínima influencia sobre la optimización fina.
La consigna se congela en la variable CurrentSetpoint. La optimización no se cancela hasta que no se cumple:
● Setpoint > CurrentSetpoint + CancelTuningLevel
o bien,
● Setpoint < CurrentSetpoint - CancelTuningLevel
Antes de volver a calcular los parámetros PID, se guarda una copia de seguridad de estos y es posible
reactivarlos con LoadBackUp.
Requisitos para la optimización fina:
● No se esperan perturbaciones.
● La consigna y el valor real se encuentran dentro de los límites configurados.
● ManualEnable = FALSE
● Reset = FALSE
● Modo de operación Automático (State = 3), Inactivo (State = 0) o Manual (State = 4)
Al inicio, la optimización fina se desarrolla del modo siguiente:
● Modo automático (State = 3)
Si desea mejorar los parámetros PID existentes mediante optimización, inicie la optimización fina desde
el modo automático.
PID_Compact regula con los parámetros PID existentes hasta que el lazo de regulación es estacionario
y se cumplen las condiciones para la optimización fina. Sólo entonces comienza la optimización fina.
● Modo Inactivo (State = 0) o Manual (State = 4)
Si se cumplen las condiciones para optimización inicial, ésta se inicia. Con los parámetros PID calculados,
la regulación se realiza hasta que el lazo de regulación es estacionario y se han cumplido las condiciones
para una optimización fina.
Si el valor real para una optimización inicial se encuentra ya muy cerca de la consigna o si
PIDSelfTune.TIR.RunIn = TRUE, se intenta alcanzar la consigna con el valor de salida máximo o mínimo.
lo que puede ocasionar una sobreoscilación muy alta.
Sólo entonces comienza la optimización fina.
Una vez realizada correctamente la optimización fina, el regulador pasa al modo automático; si la optimización
fina no se ha realizado correctamente, el cambio del modo de operación depende de ActivateRecoverMode.
La fase de la optimización fina se muestra con PIDSelfTune.TIR.State.

3

Modo automático
En el modo automático, PID_Compact regula el sistema regulado conforme a los parámetros predefinidos.
Cuando se cumple uno de los requisitos siguientes, se cambia al modo automático:
● Optimización inicial finalizada correctamente.
● Optimización fina finalizada correctamente.
● Cambio del parámetro de entrada/salida Mode al valor 3 y un flanco ascendente en ModeActivate.
El cambio de modo automático a modo manual se realiza sin discontinuidad únicamente en el editor de puesta
de servicio.
En el modo automático se tiene en cuenta la variable ActivateRecoverMode.

3652

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
State / Mode Descripción del modo de operación
4

Modo manual
En el modo manual se especifica un valor de salida manual en el parámetro ManualValue.
Este modo puede activarse también mediante ManualEnable = TRUE. Se recomienda cambiar los modos de
operación solo mediante Mode y ModeActivate.
El cambio de modo manual a modo automático se efectúa sin discontinuidad. El modo manual es posible
aunque haya un error pendiente.

5

Valor de salida sustitutivo con monitorización de errores
El algoritmo de regulación está desactivado. La variable SetSubstituteOutput determina qué valor de salida
se emite durante este modo de operación.
● SetSubstituteOutput = FALSE: Último valor de salida válido
● SetSubstituteOutput = TRUE: Valor de salida sustitutivo
Este modo de operación no puede activarse con Mode = 5.
Se activa en caso de error en lugar del modo de operación "Inactivo", cuando se cumplen todas las condi‐
ciones siguientes:
● Modo automático (Mode = 3)
● ActivateRecoverMode = TRUE
● Se han producido uno o varios errores en los que interviene ActivateRecoverMode.
En cuanto los errores dejan de estar activos, PID_Compact pasa de nuevo al modo automático.

Comportamiento ENO
Si State = 0, entonces ENO = FALSE.
Si State ≠ 0, entonces ENO = TRUE.

Cambio automático de modo de operación durante la puesta en servicio
Una vez realizada correctamente la optimización inicial o la optimización fina, se activa el modo
automático. La siguiente tabla muestra cómo se modifican Mode y State durante una
optimización inicial correcta.
N.º de ciclo Mode

State

Acción

0

4

4

Ajustar Mode = 1

1

1

4

Ajustar ModeActivate = TRUE

1

4

1

El valor de State se guarda en Mode

n

4

1

Optimización inicial correcta

n

3

3

Se inicia el modo automático

Se inicia la optimización inicial

En caso de error, PID_Compact cambia automáticamente el modo de operación. La siguiente
tabla muestra cómo se modifican Mode y State durante una optimización inicial incorrecta.
N.º de ciclo Mode

State

Acción

0

4

4

Ajustar Mode = 1

1

1

4

Ajustar ModeActivate = TRUE

Programación del PLC
Manual de programación y manejo, 11/2019

3653

Instrucciones
4.1 Instrucciones
N.º de ciclo Mode

State

Acción

1

1

El valor de State se guarda en Mode

4

Se inicia la optimización inicial
n

4

1

La optimización inicial se ha cancelado

n

4

4

Se inicia el modo manual

Si ActivateRecoverMode = TRUE, se activa el modo guardado en Mode. Al iniciar la
optimización inicial o fina, PID_Compact ha guardado el valor de State en el parámetro de
entrada/salida Mode. Por lo tanto, PID_Compact cambia al modo desde el que se inició la
optimización.
Si ActivateRecoverMode = FALSE, se cambia al modo de operación "Inactivo".

Consulte también
Parámetros de salida PID_Compact V2 (Página 3638)

Parámetro ErrorBits V2
Si hay varios errores presentes a la vez, los valores del ErrorBits se muestran sumados
binariamente. Si se muestra, p. ej., ErrorBits = 0003h, significa que están presentes
simultáneamente los errores 0001h y 0002h.
PID_Compact utiliza en modo manual ManualValue como valor de salida. La excepción es
Errorbits = 10000h.
ErrorBits

Descripción

(DW#16#...)
0000

No hay ningún error.

0001

El parámetro "Input" se encuentra fuera de los límites del valor real.
● Input > Config.InputUpperLimit o bien,
● Input < Config.InputLowerLimit
Si antes de producirse el error estaba activo el modo automático y se cumple ActivateRecoverMode =
TRUE, PID_Compact permanece en modo automático.
Si antes de producirse el error estaba activo el modo optimización inicial u optimización fina y se cumplía
ActivateRecoverMode = TRUE, PID_Compact pasa al modo guardado en Mode.

0002

Valor no válido en el parámetro "Input_PER". Compruebe si hay un error en la entrada analógica.
Si antes de producirse el error estaba activo el modo automático y se cumple ActivateRecoverMode =
TRUE, PID_Compact emite el valor de salida sustitutivo configurado. En cuanto desaparece el error,
PID_Compact pasa de nuevo al modo automático.
Si antes de producirse el error estaba activo el modo optimización inicial u optimización fina y se cumplía
ActivateRecoverMode = TRUE, PID_Compact pasa al modo guardado en Mode.

0004

Error durante la optimización fina. No se ha podido mantener la oscilación del valor real.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_Compact cancela la opti‐
mización y cambia al modo guardado en Mode.

0008

Error al iniciar la optimización inicial. El valor real se aproxima demasiado a la consigna. Inicie la optimi‐
zación fina.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_Compact cancela la opti‐
mización y cambia al modo guardado en Mode.

3654

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
ErrorBits

Descripción

(DW#16#...)
0010

Se ha cambiado la consigna durante la optimización.
En la variable CancelTuningLevel puede ajustar la fluctuación admisible de la consigna.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_Compact cancela la opti‐
mización y cambia al modo guardado en Mode.

0020

La optimización inicial no está permitida durante la optimización fina.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_Compact permanece en
el modo optimización fina.

0080

Error durante la optimización inicial. Los límites del valor de salida no están configurados correctamente
o el valor real no responde de la forma esperada.
Compruebe si los límites del valor de salida están configurados correctamente y si encajan con el sentido
de la regulación.
Asegúrese también de que el valor real no oscile fuertemente antes de iniciar la optimización inicial.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_Compact cancela la opti‐
mización y cambia al modo guardado en Mode.

0100

Un error en la optimización fina ha provocado parámetros no válidos.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_Compact cancela la opti‐
mización y cambia al modo guardado en Mode.

0200

Valor no válido en el parámetro "Input": El valor no tiene un formato numérico válido.
Si antes de producirse el error estaba activo el modo automático y se cumple ActivateRecoverMode =
TRUE, PID_Compact emite el valor de salida sustitutivo configurado. En cuanto desaparece el error,
PID_Compact pasa de nuevo al modo automático.
Si antes de producirse el error estaba activo el modo optimización inicial u optimización fina y se cumplía
ActivateRecoverMode = TRUE, PID_Compact pasa al modo guardado en Mode.

0400

Error al calcular el valor de salida. Compruebe los parámetros PID.
Si antes de producirse el error estaba activo el modo automático y se cumple ActivateRecoverMode =
TRUE, PID_Compact emite el valor de salida sustitutivo configurado. En cuanto desaparece el error,
PID_Compact pasa de nuevo al modo automático.
Si antes de producirse el error estaba activo el modo optimización inicial u optimización fina y se cumplía
ActivateRecoverMode = TRUE, PID_Compact pasa al modo guardado en Mode.

0800

Error de tiempo de muestreo: PID_Compact no se llama dentro del tiempo de muestreo del OB de alarma
cíclica.
Si antes de producirse el error estaba activo el modo automático y se cumple ActivateRecoverMode =
TRUE, PID_Compact permanece en modo automático.
Si antes de producirse el error estaba activo el modo optimización inicial u optimización fina y se cumplía
ActivateRecoverMode = TRUE, PID_Compact pasa al modo guardado en Mode.
Si este error se ha producido durante la simulación con PLCSIM, tenga en cuenta las indicaciones de
AUTOHOTSPOT.

1000

Valor no válido en el parámetro "Setpoint": El valor no tiene un formato numérico válido.
Si antes de producirse el error estaba activo el modo automático y se cumplía ActivateRecoverMode =
TRUE, PID_Compact emite el valor de salida sustitutivo configurado. En cuanto desaparece el error,
PID_Compact pasa de nuevo al modo automático.
Si antes de producirse el error estaba activo el modo optimización inicial u optimización fina y se cumplía
ActivateRecoverMode = TRUE, PID_Compact pasa al modo guardado en Mode.

Programación del PLC
Manual de programación y manejo, 11/2019

3655

Instrucciones
4.1 Instrucciones
ErrorBits

Descripción

(DW#16#...)
10000

Valor no válido en el parámetro ManualValue. El valor no tiene un formato numérico válido.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_Compact utiliza Substitu‐
teOutput como valor de salida. En cuanto se especifica un valor válido en ManualValue, PID_Compact lo
utiliza como valor de salida.

20000

Valor no válido en la variable SubstituteOutput. El valor no tiene un formato numérico válido.
PID_Compact utiliza como valor de salida el límite inferior del valor de salida.
Si antes de aparecer el error estaba activo el modo automático, ActivateRecoverMode = TRUE y el error
ya no está presente, PID_Compact pasa de nuevo al modo automático.

40000

Valor no válido en el parámetro Disturbance. El valor no tiene un formato numérico válido.
Si antes de producirse el error estaba activo el modo automático y ActivateRecoverMode = TRUE, Dis‐
turbance se ajusta a cero. PID_Compact permanece en modo automático.
Si antes de producirse el error estaba activo el modo optimización inicial u optimización fina y se cumplía
ActivateRecoverMode = TRUE, PID_Compact pasa al modo guardado en Mode. Si en la fase actual
Disturbance no influye en el valor de salida, la optimización no se cancela.

Variable ActivateRecoverMode V2
La variable ActivateRecoverMode determina el comportamiento en caso de error. El parámetro
Error indica si hay algún un error pendiente en ese momento. Si no persiste el error, se indica
Error = FALSE. El parámetro ErrorBits indica qué errores han ocurrido.

Modo automático
ATENCIÓN
Su instalación puede sufrir daños.
Si se cumple ActivateRecoverMode = TRUE, incluso al rebasar los límites del valor real
PID_Compact permanece en el modo automático en caso de error. De este modo, su
instalación puede sufrir daños.
Configure un comportamiento en caso de error para su sistema regulado que proteja su
instalación de daños.

3656

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

ActivateReco‐
verMode

Descripción

FALSE

En caso de error, PID_Compact cambia al modo de operación "Inactivo". El regulador no se activa hasta
que no se detecta un flanco descendente en Reset o un flanco ascendente en ModeActivate.

TRUE

Si en el modo automático se producen errores con frecuencia, este ajuste empeorará el comportamiento
de regulación, ya que PID_Compact alterna entre el valor de salida calculado y el valor de salida sustitutivo
cada vez que se produce un error. Compruebe en tal caso el parámetro ErrorBits y elimine la causa de
error.
Si se producen uno o varios de los errores siguientes, PID_Compact permanece en modo automático:
● 0001h: El parámetro "Input" se encuentra fuera de los límites del valor real.
● 0800h: Error en tiempo de muestreo
● 40000h: Valor no válido en el parámetro Disturbance.
Si se produce uno o varios de los errores siguientes, PID_Compact pasa al modo "Valor de salida susti‐
tutivo con monitorización de errores":
● 0002h: Valor no válido en el parámetro Input_PER.
● 0200h: Valor no válido en el parámetro Input.
● 0400h: Error al calcular el valor de salida.
● 1000h: Valor no válido en el parámetro Setpoint.
Si se produce el siguiente error, PID_Compact pasa al modo "Valor de salida sustitutivo con monitoriza‐
ción de errores" y desplaza el actuador hasta Config.OutputLowerLimit:
● 20000h: Valor no válido en la variable SubstituteOutput. El valor no tiene un formato numérico válido.
Este comportamiento no depende de SetSubstituteOutput.
En cuanto los errores dejan de estar activos, PID_Compact pasa de nuevo al modo automático.

Optimización inicial y optimización fina
ActivateReco‐
verMode

Descripción

FALSE

En caso de error, PID_Compact cambia al modo de operación "Inactivo". El regulador no se activa hasta
que no se detecta un flanco descendente en Reset o un flanco ascendente en ModeActivate.

TRUE

Si se produce el siguiente error, PID_Compact permanece en el modo activo:
● 0020h: La optimización inicial no está permitida durante la optimización fina.
Los siguientes errores se omiten:
● 10000h: Valor no válido en el parámetro ManualValue.
● 20000h: Valor no válido en la variable SubstituteOutput.
Con todos los demás errores, PID_Compact interrumpe la optimización y cambia al modo desde el que se
inició la optimización.

Modo manual
En el modo manual, ActivateRecoverMode no tiene efecto.

Programación del PLC
Manual de programación y manejo, 11/2019

3657

Instrucciones
4.1 Instrucciones

Variable Warning V2
Si hay varias advertencias presentes a la vez, los valores de la variable Warning se muestran
sumados en modo binario. Si se muestra p. ej. la advertencia 0003h, significa que están
presentes simultáneamente las advertencias 0001h y 0002h.
Warning

Descripción

(DW#16#....)
0000

No hay ninguna advertencia.

0001

Durante la optimización inicial no se encontró el punto de inflexión.

0004

La consigna ha sido limitada a los límites ajustados.

0008

En el método de cálculo seleccionado no se han definido todas las propiedades necesarias del sistema
regulado. En sustitución se calcularon los parámetros PID con el método TIR.TuneRule = 3.

0010

No se ha podido cambiar el modo de operación porque Reset = TRUE o ManualEnable = TRUE.

0020

El tiempo de muestreo del algoritmo PID está limitado por el tiempo de ciclo del OB invocante.
Para obtener mejores resultados, utilice tiempos de ciclo más cortos para el OB.

0040

El valor real ha rebasado por exceso uno de sus límites de advertencia.

0080

Valor no válido en Mode. El modo de operación no se conmuta.

0100

El valor manual ha sido limitado a los límites de la salida del regulador.

0200

No se admiten las reglas indicadas para la optimización. No se calculan parámetros PID.

1000

El valor de salida sustitutivo no puede alcanzarse porque está fuera de los límites del valor de salida.

Las siguientes advertencias se eliminan en cuanto la causa se soluciona:
● 0001h
● 0004h
● 0008h
● 0040h
● 0100h
Todas las demás advertencias se eliminan si hay un flanco ascendente en Reset o ErrorAck.

Variable IntegralResetMode V2
La variable IntegralResetMode determina cómo se preasigna la acción I PIDCtrl.IntegralSum:
● al cambiar del modo de operación "Inactivo" al "Modo automático"
● Con flanco TRUE -> FALSE en el parámetro Reset y el parámetro Mode = 3

3658

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Este ajuste surte efecto solo para un ciclo y solo es efectivo si la acción I está activada (variable
Retain.CtrlParams.Ti > 0.0)
IntegralReset‐
Mode

Descripción

0

Filtrar
El valor de PIDCtrl.IntegralSum se preasigna de tal modo que la conmutación se realice sin discontinui‐
dad, es decir, el "Modo automático" se inicia partiendo del valor de salida = 0.0 (parámetro Output) y no
se produce salto del valor de salida, con independencia del error de regulación (consigna - valor real).

1

Borrar
Se recomienda ajustar la ponderación de la acción P (Retain.CtrlParams.PWeighting) a 1.0 si se utiliza
esta opción.
El valor de PIDCtrl.IntegralSum se borra. Si existe un error de regulación, se produce un salto del valor de
salida. La dirección del salto del valor de salida depende de la ponderación configurada de la acción P
(variable Retain.CtrlParams.PWeighting) y del error de regulación:
● Ponderación de la acción P = 1.0:
El salto del valor de salida y el error de regulación tienen idéntico signo.
Ejemplo: si el valor real está por debajo de la consigna (error de regulación positivo), el valor de salida
salta a un valor positivo.
● Ponderación de la acción P < 1.0:
para errores de regulación grandes, el salto del valor de salida y el error de regulación tienen idéntico
signo.
Ejemplo: Si el valor real es muy inferior a la consigna (error de regulación positivo), el valor de salida
salta a un valor positivo.
Para errores de regulación pequeños, el salto del valor de salida y el error de regulación tienen distinto
signo.
Ejemplo: Si el valor real es ligeramente inferior a la consigna (error de regulación positivo), el valor de
salida salta a un valor negativo. Normalmente esto no es deseable, pues da lugar a un aumento
provisional del error de regulación.
Cuanto menor esté configurada la ponderación de la acción P, mayor debe ser el error de regulación,
a fin de que el salto del valor de salida conserve el signo.
Se recomienda ajustar la ponderación de la acción P (Retain.CtrlParams.PWeighting) a 1.0 si se utiliza
esta opción. En caso contrario, esto podría provocar el comportamiento descrito no deseado en caso de
errores de regulación pequeños. Alternativamente, también puede utilizar IntegralResetMode = 4. Esta
opción garantiza que el signo del salto del valor de salida y del error de regulación sea idéntico con
independencia de la ponderación configurada de la acción P y del error de regulación.

2

Mantener
El valor de PIDCtrl.IntegralSum no se modifica. Mediante el programa de usuario se puede especificar un
nuevo valor.

3

Preasignar
El valor de PIDCtrl.IntegralSum se preasigna automáticamente como si en el último ciclo hubiese sido
Output = OverwriteInitialOutputValue.

4

Como el cambio de consigna (solo para PID_Compact con versión ≥ 2.3)
El valor de PIDCtrl.IntegralSum se preasigna automáticamente de forma que se obtenga un salto del valor
de salida similar al de un regulador PI en modo automático en caso de cambio de consigna del valor real
actual a la consigna actual.
Si existe un error de regulación, se produce un salto del valor de salida. El salto del valor de salida y el error
de regulación tienen idéntico signo.
Ejemplo: si el valor real está por debajo de la consigna (error de regulación positivo), el valor de salida salta
a un valor positivo. Esto es independiente de la ponderación configurada de la acción P y del error de
regulación.

Programación del PLC
Manual de programación y manejo, 11/2019

3659

Instrucciones
4.1 Instrucciones
Si se asigna a IntegralResetMode un valor fuera del rango válido, PID_Compact se comportará
como con la preasignación de IntegralResetMode:
● PID_Compact hasta V2.2: IntegralResetMode = 1
● PID_Compact a partir de V2.3: IntegralResetMode = 4
Todas las afirmaciones anteriores sobre el signo del salto del valor de salida suponen un
sentido de regulación normal (variable Config.InvertControl = FALSE). En caso de sentido de
regulación invertido (Config.InvertControl = TRUE), se obtiene un signo invertido del salto del
valor de salida.

Programa de ejemplo para PID_Compact
En el siguiente ejemplo se regulan valores de temperatura con el objeto tecnológico de la
instrucción "PID_Compact". Los valores de temperatura se simulan a partir de un bloque, que
representa un elemento de retardo de tercer orden (elemento PT3). Los parámetros PID del
objeto tecnológico se ajustan automáticamente en la optimización inicial.
VHWSRLQW

3,'B&RPSDFW

RXWSXW9DOXH

6/,B352&B&

LQSXW9DOXH

&RQVLJQD

5HJXODGRU

9DULDEOHPDQLSXODGD

3URFHVR
UHJXODGR

9DORUUHDO

9DORUUHDO

Almacenamiento de los datos
Para almacenar los datos para la interconexión, se crean siete variables en un bloque de datos
global.

Interconexión de los parámetros
Las siguientes interconexiones se llaman en un OB de alarma cíclica.
Segmento 1: Los parámetros de la instrucción "PID_Compact" se interconectan como sigue:

3660

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Segmento 2: Los parámetros del bloque que simula valores de temperatura "SLI_PROC_C" se
interconectan como sigue.

Programación del PLC
Manual de programación y manejo, 11/2019

3661

Instrucciones
4.1 Instrucciones

Objeto tecnológico
El objeto tecnológico se puede configurar a través de las propiedades de la instrucción
"PID_Compact" o a través de la ruta Objeto tecnológico > Configuración. En el ejemplo son
importantes el tipo de regulación y los parámetros de entrada y salida. A través del tipo de
regulación se determina una preselección para la unidad del valor que se regula. En este
ejemplo se utiliza como tipo de regulación "Temperatura" con la unidad "°C". Los parámetros
de "PID_Compact" ya están interconectados con variables globales. En consecuencia, es
suficiente indicar el uso de los parámetros Input y Output.

3662

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Procedimiento para iniciar la regulación
Tras cargar en la CPU, PID_Compact se encuentra en modo manual con el valor manual 0.0.
Para comenzar la regulación, proceda del siguiente modo:
1. Abra la puesta en marcha del objeto tecnológico "SLI_Tech_PID_Compact".
2. En el área "Medición", haga clic en el botón "Iniciar".

La medición se inicia y es posible activar PID_Compact.
3. La optimización inicial está seleccionada.
En el área "Tipo de optimización", haga clic en el botón "Iniciar".
Se realiza una optimización inicial. Los parámetros PID se adaptan automáticamente al
proceso regulado. Una vez concluida la optimización inicial, PID_Compact cambia al modo
automático.
Nota
Alternativa a iniciar PID_Compact
Como alternativa, PID_Compact se puede poner en modo automático en el área "Estado
online del regulador" con el botón "Detener PID_Compact" / "Iniciar PID_Compact" sin una
optimización inicial. De ese modo el regulador utiliza por defecto valores para los
parámetros PID y muestra un comportamiento de regulación peor para la aplicación en
cuestión.

Programación del PLC
Manual de programación y manejo, 11/2019

3663

Instrucciones
4.1 Instrucciones

Procedimiento para detener la regulación
Para detener y finalizar PID_Compact y el programa, proceda como sigue:
1. En el objeto tecnológico "SLI_Tech_PID_Compact", haga clic en el botón "Detener
PID_Compact" en el área "Estado online del regulador".

La instrucción "PID_Compact" finaliza la regulación y emite "0.0" como valor manipulado.
2. En el área "Medición", haga clic en el botón "Detener".
3. Para poner el valor real de inmediato al valor "0.0", proceda del siguiente modo:
En el bloque "SLI_OB_PID_Compact", ponga la variable "resetAll" al valor "TRUE" y a
continuación al valor "FALSE".

Instrucción "PID_Compact"
En el parámetro Setpoint ("setpoint") se preasigna el valor de consigna para la temperatura
que se regula. Si la instrucción "PID_Compact" se ha iniciado a través del objeto tecnológico,
se inicia la regulación. La instrucción "PID_Compact" emite un valor manipulado en el
parámetro de salida Output ("outputValue"). A través del parámetro de entrada Input
("inputValue") se transmite a la instrucción "PID_Compact" el valor real de la temperatura.
Dependiendo de la evolución de la diferencia entre la consigna ("setpoint") y el valor real
("inputValue"), la instrucción "PID_Compact" adapta el valor manipulado ("outputValue"). Este
proceso se repite de forma que el valor real ("inputValue") se aproxime a la consigna
("setpoint") a través del valor manipulado ("outputValue").
En el parámetro de salida State ("state") se muestra el modo de operación actual de la
instrucción "PID_Compact". Tras una optimización inicial (el valor de "state" es "1"),
PID_Compact conmuta al modo automático (el valor es "3").
El parámetro de salida Error ("error") muestra actualmente que no hay ningún error. En caso
de error, el parámetro de salida ErrorBits ("errorBits") proporciona información sobre el tipo de
error. Si se produce un error, este puede acusarse con el botón "ErrorAck" en el área Estado
de optimización del objeto tecnológico.

3664

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Bloque "SLI_PROC_C"
El bloque "SLI_PROC_C" simula el valor real ("inputValue") de la temperatura creciente de una
instalación. El bloque "SLI_PROC_C" recibe el valor manipulado del regulador ("outputValue")
y simula el comportamiento de temperatura del proceso regulado. Esta temperatura se
incorpora al regulador como valor real ("inputValue").
Un cambio de los valores de la variable "resetAll" (del parámetro comRst) tiene las siguientes
consecuencias:
Parámetro comRst ("re‐ La instrucción "PID_Compact" se eje‐ La instrucción "PID_Compact" se ha
setAll")
cuta
detenido
comRst ("resetAll") per‐ El bloque "SLI_PROC_C" emite, ba‐
manece en el valor
sándose en un valor manipulado
"FALSE"
("outputValue"), un nuevo valor real
("inputValue").

El bloque "SLI_PROC_C" no recibe
ningún valor manipulado > "0.0", pe‐
ro continúa emitiendo un valor real >
"0.0".

comRst ("resetAll"):
Cambio de "FALSE" al
valor "TRUE"

Tanto el valor manipulado ("output‐
Value") como el valor real devuelto
("inputValue") se ponen a "0.0".

El valor real devuelto ("inputValue") o
la temperatura del bloque
"SLI_PROC_C" se pone a "0.0".

comRst ("resetAll"):
Cambio de "TRUE" al
valor "FALSE"

La regulación de la temperatura co‐
mienza de nuevo.

El valor real devuelto o la temperatu‐
ra que se emite ("inputValue") sigue
siendo "0.0".

Programación del PLC
Manual de programación y manejo, 11/2019

3665

Instrucciones
4.1 Instrucciones

Código de programa
Encontrará más información sobre el código de programa del ejemplo anterior bajo la palabra
clave "Sample Library for Instructions".

PID_Compact V1
Descripción PID_Compact V1
Descripción
La instrucción PID_Compact ofrece un regulador PID con optimización integrada para los
modos automático y manual.

3666

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Llamada
PID_Compact se llama en un periodo constante del tiempo de ciclo del OB invocante
(preferentemente en un OB de alarma cíclica).

Cargar en dispositivo
Los valores actuales de variables remanentes solo se actualizan si se carga PID_Compact por
completo.
AUTOHOTSPOT

Arranque
PID_Compact arranca simultáneamente con la CPU en el último modo de operación activo.
Para dejar PID_ Compact en el modo de operación "Inactivo", es necesario ajustar
sb_RunModeByStartup = FALSE.

Vigilancia del tiempo de muestreo PID_Compact
En el caso ideal, el tiempo de muestreo equivale al tiempo de ciclo del OB invocante. La
instrucción PID_Compact mide en cada caso el tiempo que transcurre entre dos llamadas.
Este es el tiempo de muestreo actual. Con cada cambio de modo de operación y en el primer
arranque se calcula la media de los 10 primeros tiempos de muestreo. Si el tiempo de muestreo
actual difiere mucho de este valor medio, se produce un error (Error = 0800 hex) y
PID_Compact cambia al modo de operación "Inactivo".
Durante la optimización, PID_Compact a partir de la versión 1.1 cambia al modo de operación
"Inactivo" cuando se dan las siguientes condiciones:
● Valor medio nuevo >= 1,1 veces el valor medio antiguo
● Valor medio nuevo <= 0,9 veces el valor medio antiguo
PID_Compact a partir de la versión 1.1 cambia al modo de operación "Inactivo" cuando se dan
las siguientes condiciones en el modo automático:
● Valor medio nuevo >= 1,5 veces el valor medio antiguo
● Valor medio nuevo <= 0,5 veces el valor medio antiguo
Durante la optimización y el modo automático PID_Compact 1.0 cambia al modo de operación
"Inactivo" cuando se dan las siguientes condiciones:
● Valor medio nuevo >= 1,1 veces el valor medio antiguo
● Valor medio nuevo <= 0,9 veces el valor medio antiguo
● Tiempo de muestreo actual >= 1,5 veces el valor medio actual
● Tiempo de muestreo actual <= 0,5 veces el valor medio actual

Programación del PLC
Manual de programación y manejo, 11/2019

3667

Instrucciones
4.1 Instrucciones

Tiempo de muestreo del algoritmo PID
Dado que el sistema regulado necesita cierto tiempo para responder a un cambio del valor de
salida, no es razonable calcular este valor en cada ciclo. El tiempo de muestreo del algoritmo
PID es el tiempo entre dos cálculos del valor de salida. Este se determina durante la
optimización y se redondea a un múltiplo del tiempo de ciclo. Todas las demás funciones de
PID_Compact se ejecutan con cada llamada.

Algoritmo PID
PID_Compact es un regulador PIDT1 con Anti-Windup y ponderación de las acciones P y D.
El valor de salida se calcula con la siguiente fórmula.

1

y = Kp

[ (b · w - x) + T · s

(w - x) +

I

Símbolo

Descripción

y

Valor de salida

TD · s
a · TD · s + 1

(c · w - x)

]

Kp

Ganancia proporcional

s

Operador laplaciano

b

Ponderación de la acción P

w

Consigna

x

Valor real

TI

Tiempo de integración

a

Coeficiente para el retardo de la acción derivada (T1 = a x TD)
Tiempo derivativo

c

3668

Ponderación de la acción D

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Diagrama de bloques PID_Compact

,QSXWB3(5

&53B,1

EB,QSXWB3(5B2Q

6FDOH





,QSXW:DUQLQJB/



,QSXW
6HWSRLQW

,QSXW:DUQLQJB+

39B$/50

3,'7
$QWL:LQGXS

/LPLW

EB,QY&WUO

,19




2XWSXW



0DQXDO(QDEOH
0DQXDO9DOXH

/LPLW



&53B287

2XWSXWB3(5





3:0

2XWSXWB3:0

Diagrama de bloques PIDT1 con Anti-Windup
6HWSRLQW Z

E



$QWL:LQGXS
/,0,7

,

.3

\


F

6FDOHG,QSXW [

Programación del PLC
Manual de programación y manejo, 11/2019



'7

3669

Instrucciones
4.1 Instrucciones

Comportamiento en caso de error
Cuando ocurren errores, estos se indican en el parámetro Error y PID_Compact cambia al
modo de operación "Inactivo". Con el parámetro Reset se resetean los errores.

Sentido de regulación
Por lo general, un aumento del valor de salida debe lograr un aumento del valor real. En este
caso, se habla de un sentido de regulación normal. Para refrigeración o para las regulaciones
de desagües puede ser necesario invertir el sentido de regulación. PID_Compact no funciona
con ganancia proporcional negativa. Si InvertControl = TRUE, un error de regulación
ascendente provocará una reducción del valor de salida. El sentido de regulación se tiene en
cuenta también durante la optimización inicial y la optimización fina.

Parámetros de entrada PID_Compact V1
Tabla 4-61
Parámetro

Tipo de da‐ Ajuste predeter‐ Descripción
tos
minado

Setpoint

REAL

0.0

Consigna del regulador PID en modo automático

Input

REAL

0.0

Una variable del programa de usuario se utiliza como origen del valor
real.
Si se utiliza el parámetro Input, debe cumplirse lo siguiente:
sPid_Cmpt.b_Input_PER_On = FALSE.

Input_PER

WORD

W#16#0

Entrada analógica como origen del valor real
Si se utiliza el parámetro Input_PER, debe cumplirse lo siguiente:
sPid_Cmpt.b_Input_PER_On = TRUE.

ManualEnable

BOOL

FALSE

● El flanco FALSE -> TRUE selecciona el modo de operación "Modo
manual", State = 4, sRet.i_Mode no cambia.
● El flanco TRUE -> FALSE selecciona el último modo de operación
activo, State =sRet.i_Mode
Mientras ManualEnable = TRUE un cambio de sRet.i_Mode no tendrá
efecto. Sólo con el flanco TRUE -> FALSE en ManualEnable , se tiene
en cuenta el cambio de sRet.i_Mode.
PID_Compact V1.2 und PID_Compact V1.0
Si al arrancar la CPU ManualEnable = TRUE, PID_Compact arranca en
modo manual. No es necesario que se produzca un flanco ascendente
(FALSE > TRUE) en ManualEnable.
PID_Compact V1.1
Al arrancar la CPU, PID_Compact únicamente pasa al modo manual si
se detecta un flanco ascendente (FALSE->TRUE) en ManualEnable . Si
no se detecta un flanco ascendente, PID_Compact arranca en el último
modo de operación en el que ManualEnable era FALSE.

ManualValue

REAL

0.0

Reset

BOOL

FALSE

Valor manual
Este valor se utiliza en el modo manual como valor de salida.

3670

El parámetro Reset (Página 3681) realiza un rearranque del regulador.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros de salida PID_Compact V1
Tabla 4-62
Parameter

Tipo de da‐ Ajuste predeter‐
tos
minado

Descripción

ScaledInput

REAL

Salida del valor real escalado

0.0

Las salidas "Output", "Output_PER" y "Output_PWM" pueden utilizarse paralelamente.
Output

REAL

0.0

Valor de salida en el formato REAL

Output_PER

WORD

W#16#0

Valor de salida analógico

Output_PWM

BOOL

FALSE

Valor de salida modulado por ancho de impulso
El valor de salida se obtiene mediante tiempos de conexión y desco‐
nexión variables.

SetpointLimit_H

BOOL

FALSE

Cuando SetpointLimit_H = TRUE, significa que se ha alcanzado el
límite superior absoluto de la consigna. En la CPU la consigna se
limita al límite superior absoluto configurado para la consigna. Como
límite superior de la consigna se ajusta de forma predeterminada el
límite superior absoluto configurado para el valor real.
Si se configura sPid_Cmpt.r_Sp_Hlm a un valor que se encuentre
dentro de los límites del valor real, este valor se utilizará como límite
superior de la consigna.

SetpointLimit_L

BOOL

FALSE

Cuando SetpointLimit_L = TRUE, significa que se ha alcanzado el
límite inferior absoluto de la consigna. En la CPU la consigna se limita
al límite inferior absoluto configurado para la consigna. Como límite
inferior de la consigna se ajusta de forma predeterminada el límite
inferior absoluto configurado para el valor real.
Si se configura sPid_Cmpt.r_Sp_Llm a un valor que se encuentre
dentro de los límites del valor real, este valor se utiliza como límite
inferior de la consigna.

InputWarning_H

BOOL

FALSE

Cuando InputWarning_H = TRUE, significa que se ha alcanzado o
rebasado el límite superior de advertencia del valor real.

InputWarning_L

BOOL

FALSE

Cuando InputWarning_L = TRUE, significa que se ha alcanzado o
rebasado por defecto el límite inferior de advertencia del valor real.

State

INT

0

El parámetro State (Página 3677) indica el modo de operación actual
del regulador PID. El modo de operación se cambia con la variable
sRet.i_Mode.
● State = 0: Inactivo
● State = 1: optimización inicial
● State = 2: Optimización fina
● State = 3: Modo automático
● State = 4: Modo manual

Error

DWORD

W#16#0

El parámetro Error (Página 3680) indica los mensajes de error.
Error = 0000: No hay ningún error.

Programación del PLC
Manual de programación y manejo, 11/2019

3671

Instrucciones
4.1 Instrucciones

Variables estáticas PID_Compact V1
Nota
No se deben modificar las variables que no aparecen listadas. Estas solo se utilizan
internamente.
Modifique las variables marcadas con (1) solo en el modo de operación "Inactivo" para evitar un
comportamiento erróneo del regulador PID. El modo de operación "Inactivo" se fuerza con el
valor "0" en la variable "sRet.i_Mode".

Tabla 4-63
Variable

Tipo de da‐
tos

Ajuste prede‐
terminado

Descripción

sb_GetCycleTime

BOOL

TRUE

Si sb_GetCycleTime = TRUE se empieza a medir au‐
tomáticamente el tiempo de ciclo. Una vez finalizada
la medición, CycleTime.StartEstimation = FALSE.

sb_EnCyclEstimation

BOOL

TRUE

Si sb_EnCyclEstimation = TRUE se calcula el tiempo
de muestreo PID_Compact.

sb_EnCyclMonitoring

BOOL

TRUE

Si sb_EnCyclMonitoring = FALSE no se vigila el tiem‐
po de muestreo PID_Compact. Si no es posible ejecu‐
tar PID_Compact dentro del tiempo de muestreo, no
se genera el error 0800 y PID_Compact no cambia al
modo de operación "Inactivo".

sb_RunModeByStartup

BOOL

TRUE

Activar último modo de operación después del rea‐
rranque completo de la CPU
Si sb_RunModeByStartup = FALSE, el regulador per‐
manece inactivo tras un arranque de la CPU.
Si sb_RunModeByStartup = TRUE, el regulador regre‐
sa al último modo de operación activo tras el arranque
de la CPU.

si_Unit

INT

0

Unidad física del valor real y de la consigna, p. ej. ºC o
ºF.

si_Type

INT

0

Magnitud física del valor real y de la consigna, p. ej.
temperatura

sd_Warning

DWORD

DW#16#0

La variable sd_warning (Página 3683) muestra las ad‐
vertencias desde Reset o desde el último cambio del
modo de operación.

sBackUp.r_Gain

REAL

1.0

Ganancia proporcional almacenada
Los valores de la estructura sBackUp pueden volverse
a cargar con sPid_Cmpt.b_LoadBackUp = TRUE.

sBackUp.r_Ti

REAL

20.0

Tiempo de integración [s] almacenado

sBackUp.r_Td

REAL

0.0

Tiempo derivativo [s] almacenado

sBackUp.r_A

REAL

0.0

Coeficiente almacenado para el retardo de la acción
derivada

sBackUp.r_B

REAL

0.0

Factor de ponderación almacenado de la acción P

sBackUp.r_C

REAL

0.0

Factor de ponderación almacenado de la acción D

sBackUp.r_Cycle

REAL

1.0

Tiempo de muestreo almacenado del algoritmo PID

3672

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de da‐
tos

Ajuste prede‐
terminado

Descripción

sPid_Calc.r_Cycle(1)

REAL

0.1

Tiempo de muestreo de la instrucción PID_Compact
r_Cycle se calcula automáticamente y equivale nor‐
malmente al tiempo de ciclo del OB invocante.

sPid_Calc.b_RunIn

BOOL

FALSE

● b_RunIn = FALSE
Si la optimización fina se inicia desde los modos de
operación Inactivo o Manual, se inicia una
optimización inicial. Si no se cumplen los
requisitos para la optimización inicial,
PID_Compact se comporta como si
b_RunIn = TRUE.
Si la optimización fina se inicia desde el modo
automático, los parámetros PID existentes se
regulan a la consigna.
Solo entonces comienza la optimización fina. Si no
es preciso realizar la optimización inicial,
PID_Compact cambia al modo de operación
"Inactivo".
● b_RunIn = TRUE
La optimización inicial se omite. PID_3Compact
intenta alcanzar la consigna con el valor de salida
mínimo o máximo, lo que puede ocasionar una
sobreoscilación muy alta. La optimización fina se
inicia entonces automáticamente.
b_RunIn se ajusta a FALSE después de la
optimización fina.

sPid_Calc.b_CalcParamSUT

BOOL

FALSE

Si b_CalcParamSUT = TRUE, se vuelven a calcular
los parámetros de la optimización inicial. De este mo‐
do puede cambiarse el método para calcular los pará‐
metros sin que sea necesario repetir la optimización.
b_CalcParamSUT se ajusta a FALSE después del cál‐
culo.

sPid_Calc.b_CalcParamTIR

BOOL

FALSE

Si b_CalcParamTIR = TRUE, se vuelven a calcular los
parámetros de la optimización fina. De este modo
puede cambiarse el método para calcular los paráme‐
tros sin que sea necesario repetir la optimización.
b_CalcParamTIR se ajusta a FALSE después del cál‐
culo.

sPid_Calc.i_CtrlTypeSUT

INT

0

Calcular los parámetros durante la optimización inicial
según el método:
● i_CtrlTypeSUT = 0: PID según Chien, Hrones y
Reswick
● i_CtrlTypeSUT = 1: PI según Chien, Hrones y
Reswick

Programación del PLC
Manual de programación y manejo, 11/2019

3673

Instrucciones
4.1 Instrucciones
Variable

Tipo de da‐
tos

Ajuste prede‐
terminado

Descripción

sPid_Calc.i_CtrlTypeTIR

INT

0

Calcular los parámetros durante la optimización fina
según el método:
● i_CtrlTypeTIR = 0: PID automático
● i_CtrlTypeTIR = 1: PID rápido (comportamiento de
regulación más rápido con amplitudes del valor de
salida mayores que las de i_CtrlTypeTIR = 2)
● i_CtrlTypeTIR = 2: PID lento (comportamiento de
regulación más lento con amplitudes del valor de
salida menores que las de i_CtrlTypiTIR = 1)
● i_CtrlTypeTIR = 3: PID Ziegler-Nichols
● i_CtrlTypeTIR = 4: PI Ziegler-Nichols
● i_CtrlTypeTIR = 5: P Ziegler-Nichols
Para poder repetir el cálculo de los parámetros PID
con b_CalcParamTIR y i_CtrlTypeTIR = 0, 1 o 2, la
optimización fina anterior debe haberse ejecutado
también con i_CtrlTypeTIR = 0, 1 o 2.
De no ser así, se utiliza i_CtrlTypeTIR = 3.
Siempre es posible volver a calcular los parámetros
PID con b_CalcParamTIR y i_CtrlTypeTIR = 3, 4 o 5.

sPid_Calc.r_Progress

REAL

0.0

Progreso de la optimización en porcentaje (0,0 - 100,0)

sPid_Cmpt.r_Sp_Hlm(1)

REAL

+3.402822e
+38

Límite superior de la consigna
Si se configura sPid_Cmpt.r_Sp_Hlm a un valor que se
encuentre fuera de los límites del valor real, el límite
superior absoluto configurado para el valor real se uti‐
liza como límite superior de la consigna.
Si se configura sPid_Cmpt.r_Sp_Hlm a un valor que se
encuentre dentro de los límites del valor real, este va‐
lor se utiliza como límite superior de la consigna.

sPid_Cmpt.r_Sp_Llm(1)

REAL

-3.402822e
+38

Límite inferior de la consigna
Si se configura sPid_Cmpt.r_Sp_Llm a un valor que se
encuentre fuera de los límites del valor real, el límite
inferior absoluto configurado para el valor real se utili‐
za como límite inferior de la consigna.
Si se configura sPid_Cmpt.r_Sp_Llm a un valor que se
encuentre dentro de los límites del valor real, este va‐
lor se utiliza como límite inferior de la consigna.

sPid_Cmpt.r_Pv_Norm_IN_1(1)

REAL

0.0

Escalado Input_PER abajo
Mediante los dos pares de valores
r_Pv_Norm_OUT_1, r_Pv_Norm_IN_1 y
r_Pv_Norm_OUT_2, r_Pv_Norm_IN_2 de la estructura
sPid_Cmpt, Input_PER se convierte en porcentaje.

sPid_Cmpt.r_Pv_Norm_IN_2(1)

REAL

27648.0

Escalado Input_PER arriba
Mediante los dos pares de valores
r_Pv_Norm_OUT_1, r_Pv_Norm_IN_1 y
r_Pv_Norm_OUT_2, r_Pv_Norm_IN_2 de la estructura
sPid_Cmpt, Input_PER se convierte en porcentaje.

3674

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de da‐
tos

Ajuste prede‐
terminado

Descripción

sPid_Cmpt.r_Pv_Norm_OUT_1(1)

REAL

0.0

Valor real inferior escalado
Mediante los dos pares de valores
r_Pv_Norm_OUT_1, r_Pv_Norm_IN_1 y
r_Pv_Norm_OUT_2, r_Pv_Norm_IN_2 de la estructura
sPid_Cmpt, Input_PER se convierte en porcentaje.

sPid_Cmpt.r_Pv_Norm_OUT_2(1)

REAL

100.0

Valor real superior escalado
Mediante los dos pares de valores
r_Pv_Norm_OUT_1, r_Pv_Norm_IN_1 y
r_Pv_Norm_OUT_2, r_Pv_Norm_IN_2 de la estructura
sPid_Cmpt, Input_PER se convierte en porcentaje.

sPid_Cmpt.r_Lmn_Hlm(1)

REAL

100.0

Límite superior del valor de salida para el parámetro
de salida "Output"

sPid_Cmpt.r_Lmn_Llm(1)

REAL

0.0

Límite inferior del valor de salida para el parámetro de
salida "Output"

sPid_Cmpt.b_Input_PER_On(1)

BOOL

TRUE

Si b_Input_PER_On = TRUE, se utiliza el parámetro
Input_PER. Si b_Input_PER_On = FALSE, se utiliza el
parámetro Input.

sPid_Cmpt.b_LoadBackUp

BOOL

FALSE

Activación del juego de parámetros de backup Si hu‐
biera fallado una optimización, es posible volver a ac‐
tivar los parámetros PID anteriores activando este bit.

sPid_Cmpt.b_InvCtrl(1)

BOOL

FALSE

Inversión del sentido de regulación
Si b_InvCtrl = TRUE, un error de regulación ascen‐
dente provocará una reducción del valor de salida.

sPid_Cmpt.r_Lmn_Pwm_PPTm(1)

REAL

0.0

El tiempo mínimo de conexión de la modulación de
ancho de impulsos en segundos se redondea a
r_Lmn_Pwm_PPTm = r_Cycle o
r_Lmn_Pwm_PPTm = n*r_Cycle

sPid_Cmpt.r_Lmn_Pwm_PBTm(1)

REAL

0.0

El tiempo mínimo de desconexión de la modulación de
ancho de impulsos en segundos se redondea a
r_Lmn_Pwm_PBTm = r_Cycle o
r_Lmn_Pwm_PBTm = n*r_Cycle

sPid_Cmpt.r_Pv_Hlm(1)

REAL

120.0

Límite superior del valor real
En la entrada de periferia, el valor real puede encon‐
trarse como máximo un 18% por encima del rango
normalizado (margen de saturación). No se comunica
ningún error más debido al rebasamiento por exceso
del "Límite superior del valor real". Únicamente se de‐
tectan la rotura de hilo y el cortocircuito y PID_Com‐
pact pasa al modo de operación "Inactivo".
r_Pv_Hlm > r_Pv_Llm

sPid_Cmpt.r_Pv_Llm

(1)

REAL

0.0

Límite inferior del valor real
r_Pv_Llm < r_Pv_Hlm

Programación del PLC
Manual de programación y manejo, 11/2019

3675

Instrucciones
4.1 Instrucciones
Variable

Tipo de da‐
tos

Ajuste prede‐
terminado

Descripción

sPid_Cmpt.r_Pv_HWrn(1)

REAL

+3.402822e
+38

Límite superior de advertencia del valor real
Si se configura r_Pv_HWrn a un valor que se encuen‐
tre fuera de los límites del valor real, el límite superior
absoluto configurado para el valor real se utiliza como
límite superior de advertencia.
Si se configura r_Pv_HWrn a un valor que se encuen‐
tre dentro de los límites del valor real, este valor se
utiliza como límite superior de advertencia.
r_Pv_HWrn > r_Pv_LWrn
r_Pv_HWrn ≤ r_Pv_Hlm

sPid_Cmpt.r_Pv_LWrn

(1)

REAL

-3.402822e
+38

Límite inferior de advertencia del valor real
Si se configura r_Pv_LWrn a un valor que se encuen‐
tre fuera de los límites del valor real, el límite inferior
absoluto configurado para el valor real se utiliza como
límite inferior de advertencia.
Si se configura r_Pv_LWrn a un valor que se encuen‐
tre dentro de los límites del valor real, este valor se
utiliza como límite inferior de advertencia.
r_Pv_LWrn < r_Pv_HWrn
r_Pv_LWrn ≥ r_Pv_LWrn

sPidCalc.i_Ctrl_IOutv

REAL

0.0

Acción I actual

sParamCalc.i_Event_SUT

INT

0

La variable i_Event_SUT (Página 3684) muestra la fa‐
se actual de la "optimización inicial":

sParamCalc.i_Event_TIR

INT

0

La variable i_Event_TIR (Página 3684) muestra la fa‐
se actual de la "optimización fina":

sRet.i_Mode

INT

0

El modo de operación cambia controlado por flanco.

(1)

El siguiente modo de operación se activa al cambiar a
● i_Mode = 0: Modo de operación "Inactivo" (parada
del regulador)
● i_Mode = 1: Modo de operación "Optimización
inicial"
● i_Mode = 2: Modo de operación "Optimización fina"
● i_Mode = 3: Modo de operación "Modo automático"
● i_Mode = 4: Modo de operación "Modo manual"
i_Mode es remanente.
sRet.r_Ctrl_Gain(1)

REAL

1.0

Ganancia proporcional activa
Gain es remanente.

sRet.r_Ctrl_Ti

(1)

REAL

20.0

● r_Ctrl_Ti > 0.0: Tiempo de integración activo
● r_Ctrl_Ti = 0.0: La acción I está desactivada
r_Ctrl_Ti es remanente.

sRet.r_Ctrl_Td

(1)

REAL

0.0

● r_Ctrl_Td > 0.0: Tiempo derivativo activo
● r_Ctrl_Td = 0.0: La acción D está desactivada
r_Ctrl_Td es remanente.

sRet.r_Ctrl_A

(1)

REAL

0.0

Coeficiente activo para el retardo de la acción derivada
r_Ctrl_A es remanente.

3676

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de da‐
tos

Ajuste prede‐
terminado

Descripción

sRet.r_Ctrl_B(1)

REAL

0.0

Ponderación activa de la acción P

sRet.r_Ctrl_C(1)

REAL

0.0

Ponderación activa de la acción D

sRet.r_Ctrl_Cycle(1)

REAL

1.0

Tiempo de muestreo activo del algoritmo PID

r_Ctrl_B es remanente.
r_Ctrl_C es remanente.
r_Ctrl_Cycle se determina durante la optimización y se
redondea a un múltiplo entero de r_Cycle.
r_Ctrl_Cycle se utiliza como duración de periodo de la
modulación por ancho de impulso.
r_Ctrl_Cycle es remanente.

Parámetros State y sRet.i_Mode V1
Interrelación de los parámetros
El parámetro State indica el modo de operación actual del regulador PID. El parámetro State
no puede modificarse.
Para cambiar el modo de operación debe modificarse la variable sRet.i_Mode. Esto también se
aplica cuando sRet.i_Mode ya contiene el valor para el nuevo modo de operación. A
continuación, por ejemplo, puede ajustarse primero sRet.i_Mode = 0 y, después,
sRet.i_Mode = 3. Si el modo de operación actual del regulador permite este cambio, State
adopta el valor de sRet.i_Mode.
Cuando PID_Compact cambia automáticamente el modo de operación, se aplica lo siguiente:
State != sRet.i_Mode.
Ejemplos:
● Una optimización inicial correcta
State = 3 y sRet.i_Mode = 1
● En caso de error
State = 0 y sRet.i_Mode mantiene el valor que tenía hasta ahora; por ejemplo,
sRet.i_Mode = 3
● ManualEnalbe = TRUE
State = 4 y sRet.i_Mode permanecen en el valor actual; por ejemplo, sRet.i_Mode = 3
Nota
Por ejemplo, es posible repetir una optimización fina correcta sin tener que finalizar el modo
automático con i_Mode = 0.
Si en un ciclo ajusta sRet.i_Mode a un valor no válido, como puede ser, 9999, esto no afecta
en modo alguno a State. En el siguiente ciclo se ajusta Mode = 2. Es posible crear una
modificación en sRet.i_Mode sin tener que cambiar primero al modo de operación
"Inactivo".

Programación del PLC
Manual de programación y manejo, 11/2019

3677

Instrucciones
4.1 Instrucciones

Significado de los valores
State /
sRet.i_Mode

Descripción del modo de operación

0

Inactivo
El regulador está apagado.
Antes de realizar una optimización inicial el regulador se encuentra en el modo de operación "Inactivo".
Durante el funcionamiento, el regulador PID cambia al modo de operación "Inactivo" cuando se produce un
error o cuando se hace clic en el botón "Desactivar regulador" en la ventana de puesta en servicio.

1

Optimización inicial
La optimización inicial determina la respuesta del proceso a un escalón del valor de salida y busca el punto
de inflexión. A partir de la inclinación máxima y del tiempo muerto del sistema regulado se calculan los
parámetros PID óptimos.
Requisitos para la optimización inicial
● El regulador se encuentra en el modo de operación inactivo o manual
● ManualEnable = FALSE
● El valor real no debe aproximarse demasiado a la consigna.
|Setpoint - Input| > 0.3 * |sPid_Cmpt.r_Pv_Hlm - sPid_Cmpt.r_Pv_Llm| y
|Setpoint - Input| > 0.5 * |Setpoint|
● La consigna no puede modificarse durante la optimización inicial.
Cuanto más estable sea el valor real, tanto más fácil y preciso será el cálculo de los parámetros PID. El ruido
del valor real es admisible en la medida en que el aumento del valor real sea significantemente superior al
propio ruido.
Antes de volver a calcular los parámetros PID, se guarda una copia de seguridad de los mismos y es posible
reactivarlos con sPid_Cmpt.b_LoadBackUp.
Una vez realizada correctamente la optimización inicial se pasa al modo automático; si dicha optimización no
se realiza correctamente, se pasa al modo de operación "Inactivo".
Se muestra la fase de la optimización inicial con Variable i_Event_SUT V1 (Página 3684).

3678

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
State /
sRet.i_Mode

Descripción del modo de operación

2

Optimización fina
La optimización fina genera una oscilación constante y limitada del valor real. Los parámetros PID se opti‐
mizan a partir de la amplitud y la frecuencia de esta oscilación. Se analizan las diferencias entre la respuesta
de proceso durante la optimización inicial y la optimización fina. A partir de los resultados se vuelven a calcular
todos los parámetros PID. Los parámetros PID existentes después de la optimización fina muestran en su
mayoría un comportamiento de guía y ante fallos mucho mejor que los parámetros PID de la optimización
inicial.
PID_Compact intenta generar automáticamente una oscilación que es mayor que el ruido del valor real. La
estabilidad del valor real ejerce tan sólo una mínima influencia sobre la optimización fina.
Antes de volver a calcular los parámetros PID, se guarda una copia de seguridad de los mismos y es posible
reactivarlos con sPid_Cmpt.b_LoadBackUp.
Requisitos para la optimización fina:
● No se esperan perturbaciones.
● La consigna y el valor real se encuentran dentro de los límites configurados.
● La consigna no puede modificarse durante la optimización fina.
● ManualEnable = FALSE
● Modo de operación Automático (State = 3), Inactivo (State = 0) o Manual (State = 4)
La optimización fina se realiza en el momento del inicio tal como se indica a continuación:
● Modo automático (State = 3)
Si desea mejorar los parámetros PID existentes a través de la optimización, inicie la optimización fina
desde el modo automático.
PID_Comact regula con los parámetros PID existentes hasta que el lazo de regulación es estacionario y
se han cumplido las condiciones para una optimización fina. Sólo entonces comienza la optimización fina.
● Modo Inactivo (State = 0) o Manual (State = 4)
Si se cumplen las condiciones para optimización inicial, ésta se inicia. Con los parámetros PID calculados,
la regulación se realiza hasta que el lazo de regulación es estacionario y se han cumplido las condiciones
para una optimización fina. Sólo entonces comienza la optimización fina. Si no es preciso realizar la
optimización inicial, PID_Compact cambia al modo de operación "Inactivo".
Si el valor real para una optimización inicial se encuentra ya muy cerca de la consigna o si
sPid_Calc.b_RunIn = TRUE, se intenta alcanzar la consigna con el valor de salida máximo o mínimo. lo
que puede ocasionar una sobreoscilación muy alta.
Una vez realizada correctamente la optimización fina, el regulador cambia al modo de operación "Automático"
y, si dicha optimización no se ejecuta correctamente, se pasa al modo de operación "Inactivo".
La fase de la optimización fina se muestra con Variable i_Event_TIR V1 (Página 3684).

Programación del PLC
Manual de programación y manejo, 11/2019

3679

Instrucciones
4.1 Instrucciones
State /
sRet.i_Mode

Descripción del modo de operación

3

Modo automático
En el modo automático, PID_Compact regula el sistema regulado conforme a los parámetros predefinidos.
Cuando se cumple uno de los requisitos siguientes, se cambia al modo automático:
● Optimización inicial finalizada correctamente.
● Optimización fina finalizada correctamente.
● Cambio de la variable sRet.i_Mode al valor 3.
Si se conecta la CPU o se cambia de STOP a RUN, PID_Compact arranca en el último modo de operación
activo. Para dejar PID_Compact en el modo de operación "Inactivo", ajuste sb_RunModeByStartup = FALSE.

4

Modo manual
En el modo manual se especifica un valor de salida manual en el parámetro ManualValue.
Este modo de operación se activa si sRet.i_Mode = 4 o en caso de un flanco ascendente en ManualEnable.
Si ManualEnable adopta el valor TRUE, únicamente cambia State. sRet.i_Mode permanece en el valor
actual. Con un flanco descendente en ManualEnable, PID_Compact regresa al modo de operación previo.
El cambio al modo automático se efectúa sin discontinuidad.

Consulte también
Parámetros de salida PID_Compact V1 (Página 3671)
Variable i_Event_SUT V1 (Página 3684)
Variable i_Event_TIR V1 (Página 3684)

Parámetro Error V1
Si hay varios errores presentes a la vez, los valores del código de error se muestran sumados
binariamente. Si se muestra, p. ej., el código de error 0003, significa que están presentes
simultáneamente los errores 0001 y 0002.
Error

Descripción

(DW#16#...)
0000

No hay ningún error.

0001

El parámetro "Input" se encuentra fuera de los límites del valor real.
● Input > sPid_Cmpt.r_Pv_Hlm o bien,
● Input < sPid_Cmpt.r_Pv_Llm
Para poder desplazar de nuevo el actuador, previamente se debe eliminar el error.

0002

Hay un valor no válido en el parámetro "Input_PER". Compruebe si hay un error en la entrada analógica.

0004

Error durante la optimización fina. No se ha podido mantener la oscilación del valor real.

0008

Error al iniciar la optimización inicial. El valor real se aproxima demasiado a la consigna. Inicie la optimi‐
zación fina.

0010

Se ha cambiado la consigna durante la optimización.

0020

La optimización inicial no está permitida en el modo automático ni durante la optimización fina.

3680

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Error

Descripción

(DW#16#...)
0080

Error durante la optimización inicial. Los límites del valor de salida no están configurados correctamente
o el valor real no responde de la forma esperada.
Compruebe si los límites del valor de salida están configurados correctamente y si encajan con el sentido
de la regulación.
Asegúrese también de que el valor real no oscile fuertemente antes de iniciar la optimización inicial.

0100

Un error en la optimización ha provocado parámetros no válidos.

0200

Valor no válido en el parámetro "Input": El valor no tiene un formato numérico válido.

0400

Error al calcular el valor de salida. Compruebe los parámetros PID.

0800

Error de tiempo de muestreo: PID_Compact no se llama dentro del tiempo de muestreo del OB de alarma
cíclica.
Si este error se ha producido durante la simulación con PLCSIM, tenga en cuenta las indicaciones de
AUTOHOTSPOT.

1000

Valor no válido en el parámetro "Setpoint": El valor no tiene un formato numérico válido.

Consulte también
Parámetros de salida PID_Compact V1 (Página 3671)

Parámetro Reset V1
La respuesta en caso de Reset = TRUE depende de la versión de la instrucción PID_Compact.

Programación del PLC
Manual de programación y manejo, 11/2019

3681

Instrucciones
4.1 Instrucciones

Respuesta Reset PID_Compact a partir de V.1.1
Un flanco ascendente en Reset hace que se pase al modo de operación "Inactivo", se
desactiven los errores y las advertencias, y se borre la acción I. Un flanco descendente en
Reset provoca un cambio al último modo de operación activo. Si antes estaba activo el modo
automático, la acción I se preasigna de tal modo que la conmutación se realice sin
discontinuidad.
5HVHW



W PV

LB0RGH



W PV

6WDWH





①
②
③

3682







W PV

Conexión
Error
Reset

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Respuesta Reset PID_Compact V.1.0
Un flanco ascendente en Reset hace que se pase al modo de operación "Inactivo", se
desactiven los errores y las advertencias, y se borre la acción I. El regulador no vuelve a
conectarse hasta que no aparece un flanco en i_Mode.
5HVHW



W PV

LB0RGH




W PV
6WDWH






①
②
③







W PV

Conexión
Error
Reset

Variable sd_warning V1
Si hay varias advertencias presentes a la vez, los valores de la variable sd_warning se
muestran sumados binariamente. Si se muestra p. ej. la advertencia 0003, significa que están
presentes simultáneamente las advertencias 0001 y 0002.
sd_warning

Descripción

(DW#16#....)
0000

No hay ninguna advertencia.

0001

Durante la optimización inicial no se encontró el punto de inflexión.

0002

Durante la optimización fina la oscilación fue más intensa.

0004

La consigna estuvo fuera de los límites ajustados.

0008

En el método de cálculo seleccionado no se han definido todas las propiedades necesarias del sistema
regulado. En sustitución se calcularon los parámetros PID con el método "i_CtrlTypeTIR = 3".

0010

No se ha podido cambiar el modo de operación, pues ManualEnable = TRUE.

0020

El tiempo de muestreo del algoritmo PID está limitado por el tiempo de ciclo del OB invocante.
Para obtener mejores resultados, utilice tiempos de ciclo más cortos para el OB.

0040

El valor real ha rebasado uno de sus límites de advertencia.

Programación del PLC
Manual de programación y manejo, 11/2019

3683

Instrucciones
4.1 Instrucciones
Las siguientes advertencias se eliminan en cuanto la causa se soluciona.
● 0004
● 0020
● 0040
Todas las demás advertencias se eliminan si hay un flanco ascendente en Reset.

Variable i_Event_SUT V1
i_Event_SUT

Nombre
0 SUT_INIT

Descripción
Iniciar optimización inicial

100 SUT_STDABW

Calcular desviación estándar

200 SUT_GET_POI

Determinar punto de inflexión

9900 SUT_IO
1 SUT_NIO

Optimización inicial correcta
Optimización inicial no correcta

Consulte también
Variables estáticas PID_Compact V1 (Página 3672)
Parámetros State y sRet.i_Mode V1 (Página 3677)

Variable i_Event_TIR V1
i_Event_TIR

Nombre

-100 TIR_FIRST_SUT
0 TIR_INIT

Descripción
No es posible realizar la optimización fina. Se realiza primero una optimización inicial.
Iniciar optimización fina

200 TIR_STDABW

Calcular desviación estándar

300 TIR_RUN_IN

Intentar alcanzar consigna

400 TIR_CTRLN

Intentar alcanzar consigna con los parámetros PID existentes
(si la optimización inicial fue correcta)

500 TIR_OSZIL
9900 TIR_IO
1 TIR_NIO

Determinar oscilación y calcular parámetros
Optimización fina correcta
Optimización fina no correcta

Consulte también
Variables estáticas PID_Compact V1 (Página 3672)
Parámetros State y sRet.i_Mode V1 (Página 3677)

3684

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

PID_3Step
Novedades PID_3Step
PID_3Step V2.3
● A partir de PID_3Step versión 2.3 puede desactivarse la vigilancia y limitación del tiempo de
desplazamiento con Config.VirtualActuatorLimit = 0.0.

PID_3Step V2.2
● Uso con S7-1200
A partir de PID_3Step V2.2, la instrucción también se puede utilizar con funcionalidad V2 en
una S7-1200 a partir de la versión de firmware 4.0.

PID_3Step V2.0
● Comportamiento en caso de error
Se ha modificado a fondo el comportamiento con ActivateRecoverMode = TRUE.
PID_3Step tiene un comportamiento más tolerante a errores en el ajuste predeterminado.
ATENCIÓN
Su instalación puede sufrir daños.
Si utiliza el ajuste predeterminado, PID_3Step se mantiene también en modo automático
al rebasar los límites del valor real. De este modo, su instalación puede sufrir daños.
Configure un comportamiento en caso de error para su sistema regulado que proteja su
instalación de daños.
Con el parámetro de entrada ErrorAck se acusan los errores y las advertencias sin
necesidad de reiniciar el regulador ni borrar la acción I.
Al cambiar el modo de operación, ya no se acusan los errores que no estén pendientes.
● Cambio de modos de operación
El modo de operación se especifica en el parámetro de entrada/salida Mode y se activa
mediante un flanco ascendente en ModeActivate. Se ha suprimido la variable Retain.Mode.
Ya no es posible iniciar la medición del tiempo de posicionamiento con
GetTransitTime.Start, sino solo con Mode = 6 y un flanco ascendente en ModeActivate.
● Capacidad multiinstancia
Puede llamar PID_3Step como DB multiinstancia. No se creará ningún objeto tecnológico
y no dispondrá de interfaz de parametrización y puesta en servicio. Los PID_3Step se
deben parametrizar directamente en el DB multiinstancia y ponerse en servicio a través de
una tabla de observación.
● Comportamiento en arranque
Con RunModeByStartup = TRUE, el modo de operación especificado en Mode se inicia
también en caso de flanco descendente en Reset y en caso de arranque en frío de la CPU.

Programación del PLC
Manual de programación y manejo, 11/2019

3685

Instrucciones
4.1 Instrucciones
● Comportamiento ENO
ENO se ajusta en función del modo de operación.
Si State = 0, entonces ENO = FALSE.
Si State ≠ 0, entonces ENO = TRUE.
● Modo manual
Los parámetros de entrada Manual_UP y Manual_DN ya no son controlados por flancos. El
modo manual controlado por flancos sigue siendo posible mediante las variables
ManualUpInternal y ManualDnInternal.
En el "Modo manual sin señales de tope" (Mode = 10), se ignoran las señales de tope
Actuator_H y Actuator_L aunque estén activadas.
● Ajuste predeterminado de los parámetros PID
Se han modificado los siguientes ajustes predeterminados:
– Ponderación de la acción P (PWeighting), de 0.0 a 1.0
– Ponderación de la acción D (DWeighting), de 0.0 a 1.0
– Coeficiente para el retardo de la acción derivada (TdFiltRatio), de 0.0 a 0.2
● Limitación del tiempo de posicionamiento del motor
En la variable Config.VirtualActuatorLimit se especifica en qué % del tiempo de
posicionamiento del motor se desplazará como máximo el actuador en un sentido.
● Especificación de consigna durante la optimización
La fluctuación admisible de la consigna durante la optimización se configura en la variable
CancelTuningLevel.
● Control anticipativo
El parámetro Disturbance permite activar el control anticipativo.
● Corrección de errores
Si las señales de tope no están activadas (ActuatorEndStopOn = FALSE), Actuator_H y
Actuator_L ya no se tienen en cuenta para determinar ScaledFeedback.

PID_3Step V1.1
● Modo manual en el arranque de la CPU
Si al arrancar la CPU ManualEnable = TRUE, PID_3Step arranca en modo manual. No es
necesario un flanco ascendente en ManualEnable.
● Comportamiento en caso de error
La variable ActivateRecoverMode ya no actúa en modo manual.
● Corrección de errores
La variable Progress se restablece tras la optimización correcta o la medición del tiempo de
posicionamiento.

3686

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Compatibilidad con CPU y FW
La siguiente tabla muestra en qué CPU puede usarse cada versión de PID_3Step.
CPU

FW

PID_3Step

S7-1200

A partir de V4.2

V2.3
V2.2
V1.1

V4.0 a V4.1

V2.2
V1.1

V3.x

V1.1
V1.0

V2.x

V1.1
V1.0

S7-1500

V1.x

-

A partir de V2.0

V2.3
V2.2
V2.1
V2.0

V1.5 a V1.8

V2.2
V2.1
V2.0

V1.1

V2.1
V2.0

V1.0

V2.0

Tiempo de ejecución de CPU y requerimiento de memoria PID_3Step V2.x
Tiempo de ejecución de CPU
Tiempos de ejecución de CPU típicos del objeto tecnológico PID_3Step a partir de la versión
V2.0 en función del tipo de CPU.
CPU

Tiempo de ejecución de CPU típ. PID_3Step V2.x

CPU 1211C ≥ V4.0

410 µs

CPU 1215C ≥ V4.0

410 µs

CPU 1217C ≥ V4.0

410 µs

CPU 1505S ≥ V1.0

50 µs

CPU 1510SP-1 PN ≥ V1.6

120 µs

CPU 1511-1 PN ≥ V1.5

120 µs

CPU 1512SP-1 PN ≥ V1.6

120 µs

CPU 1516-3 PN/DP ≥ V1.5

65 µs

CPU 1518-4 PN/DP ≥ V1.5

5 µs

Programación del PLC
Manual de programación y manejo, 11/2019

3687

Instrucciones
4.1 Instrucciones

Requerimiento de memoria
Memoria requerida por un DB de instancia del objeto tecnológico PID_3Step a partir de la
versión V2.0.
Memoria requerida

Memoria requerida por el DB de instancia de
PID_3Step V2.x

Memoria de carga requerida

Aprox. 15000 bytes

Memoria de trabajo total requerida

1040 bytes

Memoria de trabajo remanente requerida

60 bytes

PID_3Step V2
Descripción PID_3Step V2
Descripción
Con la instrucción PID_3Step se puede configurar un regulador PID con autooptimización para
válvulas o elementos de control final con comportamiento integrador.
Se dispone de los modos de operación siguientes:
● Inactivo
● Optimización inicial
● Optimización fina
● Modo automático
● Modo manual
● Aproximar al valor de salida sustitutivo
● Medición del tiempo de posicionamiento
● Monitorización de errores
● Aproximar al valor de salida sustitutivo con monitorización de errores
● Modo manual sin señales de tope
Los modos de operación se describen detalladamente en el parámetro State.

3688

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Algoritmo PID
PID_3Step es un regulador PIDT1 con Anti-Windup y ponderación de la acción P y D. El
algoritmo PID funciona de acuerdo con la siguiente fórmula:

1

[

Δ y = K p · s · (b · w - x) +

TI · s

(w - x) +

TD · s
a · TD · s + 1

Δy

Valor de salida del algoritmo PID

Kp

Ganancia proporcional

s

Operador laplaciano

b

Ponderación de la acción P

w

Consigna

x

Valor real

TI

Tiempo de integración

(c · w - x)

]

TD

Tiempo derivativo

a

Coeficiente para el retardo de la acción derivada (retardo de la acción derivada T1
= a × TD)

c

Ponderación de la acción D

Programación del PLC
Manual de programación y manejo, 11/2019

3689

Instrucciones
4.1 Instrucciones

Diagrama de bloques sin realimentación de posición
,QSXW:DUQLQJB+

39B$/50

,QSXW:DUQLQJB/

,QSXW3HU2Q
&53B,1

,QSXWB3(5

$QWL:LQGXS

6FDOH






,QSXW

)DF

3,'7
$QWL:LQGXS

,QW
˂Y





/LPLW

6HWSRLQW



'LVWXUEDQFH

 

2XWSXW3HU2Q

'

 

 



2XWSXW3HU2Q
/LPLW

0DQXDO(QDEOH
0DQXDO9DOXH

)$&







5RFB/LP





2XWSXW8SSHU/LPLW


2XWSXW/RZHU/LPLW



6WDWH




0DQXDOB'1

&53B287

0DQXDOB83





2XWSXWB3(5

ำ
$GHDGB%

6WDWH
0DQXDO83,QWHUQDO
7KU6WS



0DQXDO'1,QWHUQDO

0DQXDOB83

3XOVH2XW

6WDWH

ำ

2XWSXWB83

ุ

2XWSXWB'1

ำ

ำ


0DQXDOB'1

ำ


6WDWH






3690

ุ










Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Diagrama de bloques con realimentación de posición
,QSXW:DUQLQJB+

39B$/50

,QSXW3HU2Q
,QSXWB3(5

&53B,1

,QSXW:DUQLQJB/

6FDOH



$QWL:LQGXS




,QSXW

,QW

3,'7
$QWL:LQGXS

6HWSRLQW

)DF

/LPLW

ำ


/LPLW



6WDWH

9

'

'LVWXUEDQFH
0DQXDO9DOXH

)HHGEDFN3HU2Q
)HHGEDFNB3(5

&53B,1

6FDOH






)HHGEDFN
0DQXDOB83
2XWSXW8SSHU/LPLW
2XWSXW/RZHU/LPLW

&53B287







2XWSXWB3(5

Ƅ



$GHDGB%





0DQXDOB83


6WDWH
0DQXDO83,QWHUQDO
7KU6WS

6WDWH




0DQXDOB'1

2XWSXW3HU2Q








0DQXDO'1,QWHUQDO

6WDWH

ำ

3XOVH2XW

ุ

2XWSXWB83

ุ

2XWSXWB'1

ำ

ำ


0DQXDOB'1

ำ


6WDWH

Programación del PLC
Manual de programación y manejo, 11/2019

3691

Instrucciones
4.1 Instrucciones

Diagrama de bloques PIDT1 con Anti-Windup
E

6HWSRLQW Z



'7

F

'

.

3

˂\



'HDGB%





7L

,

6FDOHG,QSXW [
)DF7W

$QWL:LQGXS

Llamada
PID_3Step se llama en una base de tiempo constante de un OB de alarma cíclica.
Si efectúa una llamada de PID_3Step como DB multiinstancia, no se creará ningún objeto
tecnológico. No dispondrá de interfaz de parametrización y puesta en servicio. Los PID_3Step
se deben parametrizar directamente en el DB multiinstancia y ponerse en servicio a través de
una tabla de observación.

Cargar en dispositivo
Los valores actuales de variables remanentes solo se actualizan si se carga PID_3Step por
completo.
AUTOHOTSPOT

Arranque
Al arrancar la CPU, PID_3Step se inicia en el modo guardado en el parámetro de entrada/
salida Mode. Para dejar PID_3Step en el modo de operación "Inactivo", ajuste
RunModeByStartup = FALSE.

3692

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Comportamiento en caso de error
En el modo automático y durante la puesta en servicio, el comportamiento en caso de error
depende de las variables ErrorBehaviour y ActivateRecoverMode. En modo manual, el
comportamiento no depende de ErrorBehaviour y ActivateRecoverMode. Si
ActivateRecoverMode = TRUE, el comportamiento dependerá además del error que se haya
producido.
Error‐
Behaviour

ActivateReco‐
verMode

Ajuste del Editor de configu‐
ración
> Ajuste del actuador
> Output a

Comportamiento

FALSE

FALSE

Valor de salida actual

Cambio al modo de operación "Inactivo"
(State = 0)
El actuador permanece en la posición ac‐
tual.

FALSE

TRUE

Valor de salida actual por la
duración del error

Cambio al modo de operación "Monitori‐
zación de errores" (State = 7)
El actuador permanece en la posición ac‐
tual mientras dure el error.

TRUE

FALSE

Valor de salida sustitutivo

Cambio al modo de operación "Aproxi‐
mar al valor de salida sustitutivo" (Sta‐
te = 5)
El actuador se desplaza al valor de salida
sustitutivo configurado.
Cambio al modo de operación "Inactivo"
(State = 0)
El actuador permanece en la posición ac‐
tual.

TRUE

TRUE

Valor de salida sustitutivo
mientras dure el error

Cambio al modo de operación "Aproxi‐
mar a valor de salida sustitutivo con mo‐
nitorización de errores" (State = 8)
El actuador se desplaza al valor de salida
sustitutivo configurado.
Cambio al modo de operación "Monitori‐
zación de errores" (State = 7)

PID_3Step utiliza ManualValue como valor de salida en el modo manual, excepto con los
siguientes errores:
● 2000h: Valor no válido en el parámetro Feedback_PER.
● 4000h: Valor no válido en el parámetro Feedback.
● 8000h: Error en la realimentación digital de posición.
Solo es posible modificar la posición del actuador con Manual_UP y Manual_DN, no con
ManualValue:
El parámetro Error indica si se ha producido un error en el ciclo actual. El parámetro ErrorBits
muestra qué errores se han producido. ErrorBits se reinicia mediante un flanco ascendente en
Reset o ErrorAck.

Programación del PLC
Manual de programación y manejo, 11/2019

3693

Instrucciones
4.1 Instrucciones

Consulte también
Parámetros State y Mode V2 (Página 3713)
Parámetro ErrorBits V2 (Página 3717)

Funcionamiento PID_3Step V2
Monitorizar límites del valor real
En las variables Config.InputUpperLimit y Config.InputLowerLimit es posible definir un límite
superior y uno inferior del valor real. Si el valor real se encuentra fuera de estos límites, ocurre
un error (ErrorBits = 0001h).
En las variables Config.InputUpperWarning y Config.InputLowerWarning se definen un límite
de advertencia superior y uno inferior del valor real. Si el valor real se encuentra fuera de estos
límites de advertencia, se produce una advertencia (Warning = 0040h) y el parámetro de salida
InputWarning_H o InputWarning_L adopta el valor TRUE.

Limitar consigna
En las variables Config.SetpointUpperLimit y Config.SetpointLowerLimit es posible definir un
límite superior y uno inferior para la consigna. PID_3Step limita la consigna automáticamente
a los límites del valor real. Es posible limitar la consigna a un rango más pequeño. PID_3Step
verifica si dicho rango está dentro de los límites del valor real. Si la consigna está fuera de estos
límites, se utilizan los límites superior e inferior como consigna y el parámetro de salida
SetpointLimit_H o SetpointLimit_L adopta el valor TRUE.
La consigna se limita en todos los modos de operación.

Limitar el valor de salida
En las variables Config.OutputUpperLimit y Config.OutputLowerLimit se define un límite
superior y uno inferior del valor de salida. Los límites del valor de salida deben encontrarse
dentro del "Tope inferior" o el "Tope superior".
● Tope superior: Config.FeedbackScaling.UpperPointOut
● Tope inferior: Config.FeedbackScaling.LowerPointOut
Rige:
UpperPointOut ≥ OutputUpperLimit > OutputLowerLimit ≥ LowerPointOut
Los valores válidos para el "Tope superior" y el "Tope inferior" dependen de:
● FeedbackOn
● FeedbackPerOn
● OutputPerOn

3694

OutputPerOn FeedbackOn

FeedbackPerOn LowerPointOut

UpperPointOut

FALSE

FALSE

FALSE

No ajustable (0.0 %)

No ajustable (100.0 %)

FALSE

TRUE

FALSE

-100.0 % o 0.0 %

0.0 % o +100.0 %

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
OutputPerOn FeedbackOn

FeedbackPerOn LowerPointOut

UpperPointOut

FALSE

TRUE

TRUE

-100.0 % o 0.0 %

0.0 % o +100.0 %

TRUE

FALSE

FALSE

No ajustable (0.0 %)

No ajustable (100.0 %)

TRUE

TRUE

FALSE

-100.0 % o 0.0 %

0.0 % o +100.0 %

TRUE

TRUE

TRUE

-100.0 % o 0.0 %

0.0 % o +100.0 %

Si OutputPerOn = FALSE y FeedbackOn = FALSE, no se puede limitar el valor de salida.
Output_UP y Output_DN se restablecen entonces si se cumple Actuator_H = TRUE o
Actuator_L = TRUE. Si tampoco existen señales de tope, Output_UP y Output_DN se
restablecen después de un tiempo de desplazamiento del
Config.VirtualActuatorLimit × Retain.TransitTime/100. A partir de PID_3Step versión 2.3
puede desactivarse la vigilancia y limitación del tiempo de desplazamiento con
Config.VirtualActuatorLimit = 0.0.
El valor de salida asciende a 27648 con un 100 % y a -27648 con un -100 %. PID_3Step debe
poder cerrar la válvula completamente.
Nota
Uso con dos o más actuadores
PID_3 Step no es adecuado para el uso con dos o más actuadores (p. ej., en aplicaciones de
calefacción/refrigeración), pues los actuadores diferentes necesitan también parámetros PID
diferentes para conseguir un buen comportamiento de regulación.

Valor de salida sustitutivo
En caso de error, PID_3Step puede emitir un valor de salida sustitutivo y conducir el elemento
final de control a una posición segura que se especifica en la variable SavePosition. El valor de
salida sustitutivo debe encontrarse dentro de los límites del valor de salida.

Vigilar la validez de las señales
Se vigila la validez de los valores de los siguientes parámetros al utilizarlos:
● Setpoint
● Input
● Input_PER
● Input_PER
● Feedback
● Feedback_PER
● Disturbance
● ManualValue
● SavePosition
● Output_PER

Programación del PLC
Manual de programación y manejo, 11/2019

3695

Instrucciones
4.1 Instrucciones

Vigilar el tiempo de muestreo PID_3Step
En el caso ideal, el tiempo de muestreo equivale al tiempo de ciclo del OB invocante. La
instrucción PID_3Step mide en cada caso el tiempo que transcurre entre dos llamadas. Este
es el tiempo de muestreo actual. Con cada cambio de modo de operación y en el primer
arranque se calcula la media de los 10 primeros tiempos de muestreo. Si el tiempo de muestreo
actual se desvía mucho de este valor medio, ocurre un error (ErrorBits = 0800h).
Durante la optimización, el error se produce si:
● Valor medio nuevo >= 1,1 veces el valor medio antiguo
● Valor medio nuevo <= 0,9 veces el valor medio antiguo
En el modo automático, el error se produce si:
● Valor medio nuevo >= 1,5 veces el valor medio antiguo
● Valor medio nuevo <= 0,5 veces el valor medio antiguo
Si se desactiva la monitorización del tiempo de muestreo (CycleTime.EnMonitoring = FALSE),
puede llamarse PID_3Step también en el OB1. En tal caso, deberá aceptarse una regulación
de menor calidad, debido a la fluctuación del tiempo de muestreo.

Tiempo de muestreo del algoritmo PID
Dado que el sistema regulado necesita cierto tiempo para responder a un cambio del valor de
salida, no es razonable calcular este valor en cada ciclo. El tiempo de muestreo del algoritmo
PID es el tiempo entre dos cálculos del valor de salida. Este se determina durante la
optimización y se redondea a un múltiplo del tiempo de ciclo. Todas las demás funciones de
PID_3Step se ejecutan con cada llamada.

Medir el tiempo de posicionamiento del motor
El tiempo de posicionamiento del motor es el tiempo en segundos que requiere el motor para
desplazar el elemento final de control del estado cerrado al estado abierto. El elemento final de
control se mueve en un sentido a como máximo Config.VirtualActuatorLimit ×
Retain.TransitTime/100. PID_3Step necesita un tiempo de posicionamiento del motor lo más
preciso posible para alcanzar un buen resultado de regulación. Los datos de la documentación
del elemento final de control son valores medios para este tipo de elemento final de control. El
valor puede variar para el elemento final de control que se use en cada momento. El tiempo de
posicionamiento del motor puede medirse durante la puesta en servicio. Los límites del valor
de salida no se tienen en cuenta durante la medición del tiempo de posicionamiento del motor.
El actuador puede desplazarse hasta el tope superior o inferior.
El tiempo de posicionamiento del motor se tiene en cuenta tanto en el cálculo del valor de
salida analógico como en el cálculo de los valores de salida digitales. Es necesario para el
correcto funcionamiento, sobre todo, durante la optimización automática y el comportamiento
Anti-Windup. Por tanto, configure el tiempo de posicionamiento del motor con el valor que
requiera el motor para desplazar el actuador del estado cerrado al estado abierto.
Si en su proceso no actúa ningún tiempo de posicionamiento del motor relevante (p. ej., con
electroválvulas), de forma que el valor de salida actúa directamente y en toda su magnitud
sobre el proceso, utilice PID_Compact en su lugar.

3696

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Sentido de regulación
Por lo general, un aumento del valor de salida debe lograr un aumento del valor real. En este
caso, se habla de un sentido de regulación normal. Para refrigeración o para las regulaciones
de desagües puede ser necesario invertir el sentido de regulación. PID_3Step no funciona con
ganancia proporcional negativa. Si InvertControl = TRUE, un error de regulación ascendente
provocará una reducción del valor de salida. El sentido de regulación se tiene en cuenta
también durante la optimización inicial y la optimización fina.

Modificaciones de la interfaz PID_3Step V2
La siguiente tabla muestra lo que ha cambiado en la interfaz de la instrucción PID_3Step.

PID_3Step V1

PID_3Step V2

Cambio

Input_PER

Input_PER

Tipo de datos de Word a Int

Feedback_PER

Feedback_PER

Tipo de datos de Word a Int

Disturbance

Nuevo

Manual_UP

Manual_UP

Función

Manual_DN

Manual_DN

Función

ErrorAck

Nuevo

ModeActivate

Nuevo

Output_PER

Tipo de datos de Word a Int

ManualUPInternal

Nuevo

ManualDNInternal

Nuevo

CancelTuningLevel

Nuevo

VirtualActuatorLImit

Nuevo

Output_PER

Config.Loadbackup

Loadbackup

Cambio de nombre

Config.TransitTime

Retain.TransitTime

Cambio de nombre y remanencia añadida

SUT.CalculateSUTPa‐
rams

SUT.CalculateParams

Cambio de nombre

SUT.TuneRuleSUT

SUT.TuneRule

GetTransitTime.Start

Sustituido por Mode y ModeActivate

Cambio de nombre

TIR.CalculateTIRParams TIR.CalculateParams

Cambio de nombre

TIR.TuneRuleTIR

TIR.TuneRule

Cambio de nombre

Retain.Mode

Mode

Función
Declaración de Static a parámetros de entrada/salida

Programación del PLC
Manual de programación y manejo, 11/2019

3697

Instrucciones
4.1 Instrucciones

Parámetros de entrada PID_3Step V2
Tabla 4-64
Parámetro

Tipo de da‐ Ajuste prede‐
tos
terminado

Descripción

Setpoint

REAL

0.0

Consigna del regulador PID en modo automático

Input

REAL

0.0

Una variable del programa de usuario se utiliza como origen del
valor real.
Si utiliza el parámetro Input, debe cumplirse lo siguiente: Con‐
fig.InputPerOn = FALSE.

Input_PER

INT

0

Una entrada analógica se utiliza como origen del valor real.
Si utiliza el parámetro Input_PER, debe cumplirse lo siguiente:
Config.InputPerOn = TRUE.

Actuator_H

BOOL

FALSE

Realimentación de posicionamiento digital de la válvula para el
tope superior
Si Actuator_H = TRUE la posición de la válvula se encuentra en
el tope superior y la válvula ya no se desplaza en ese sentido.

Actuator_L

BOOL

FALSE

Realimentación de posición digital de la válvula para el tope
inferior
Si Actuator_L = TRUE la posición de la válvula se encuentra en
el tope inferior y la válvula ya no se desplaza en ese sentido.

Feedback

REAL

0.0

Realimentación de posición de la válvula
Si utiliza el parámetro Feedback, debe cumplirse lo siguiente:
Config.FeedbackPerOn = FALSE.

Feedback_PER

INT

0

Realimentación de posición analógica de una válvula
Si utiliza el parámetro Feedback_PER, debe cumplirse lo si‐
guiente: Config.FeedbackPerOn = TRUE.
Feedback_PER se escala a partir de las variables:
● Config.FeedbackScaling.LowerPointIn
● Config.FeedbackScaling.UpperPointIn
● Config.FeedbackScaling.LowerPointOut
● Config.FeedbackScaling.UpperPointOut

Disturbance

REAL

0.0

Magnitud perturbadora o valor de control anticipativo

ManualEnable

BOOL

FALSE

● El flanco FALSE -> TRUE activa el modo de operación
"Modo manual", State = 4, Mode no cambia.
Mientras se cumple ManualEnable = TRUE, no es posible
cambiar el modo de operación mediante un flanco
ascendente en ModeActivate, ni utilizar el diálogo de puesta
en servicio.
● El flanco TRUE -> FALSE activa el modo de operación
especificado en Mode.
Se recomienda cambiar el modo de operación solo mediante
ModeActivate.

ManualValue

3698

REAL

0.0

En el modo manual se especifica la posición absoluta de la
válvula. ManualValue solo se evalúa si se utiliza Output_PER o
si se dispone de una realimentación de posición.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Tipo de da‐ Ajuste prede‐
tos
terminado

Descripción

Manual_UP

BOOL

● Manual_UP = TRUE
La válvula se abre aunque se utilice Output_PER o una
realimentación de posición. La válvula deja de moverse
cuando se alcanza el tope superior.
Ver también Config.VirtualActuatorLimit

FALSE

● Manual_UP = FALSE
Si se utiliza Output_PER o una realimentación de posición,
la válvula se desplaza a ManualValue. En caso contrario, la
válvula deja de moverse.
Si Manual_UP y Manual_DN se ajustan simultáneamente a
TRUE, la válvula no se mueve.
Manual_DN

BOOL

FALSE

● Manual_DN = TRUE
La válvula se cierra aunque se utilice Output_PER o una
realimentación de posición. La válvula deja de moverse
cuando se alcanza el tope inferior.
Ver también Config.VirtualActuatorLimit
● Manual_DN = FALSE
Si se utiliza Output_PER o una realimentación de posición,
la válvula se desplaza a ManualValue. En caso contrario, la
válvula deja de moverse.

ErrorAck

BOOL

FALSE

● Flanco FALSE -> TRUE
ErrorBits y Warning se desactivan.

Reset

BOOL

FALSE

Realiza un rearranque completo del regulador.
● Flanco FALSE -> TRUE
–

Cambio al modo de operación "Inactivo"

–

ErrorBits y Warnings se desactivan.

● Mientras se cumpla Reset = TRUE,
–

PID_3Step permanece en el modo de operación
"Inactivo" (State = 0);

–

no es posible cambiar el modo de operación mediante
Mode y ModeActivate o ManualEnable;

–

no es posible utilizar el cuadro de diálogo de puesta en
marcha.

● Flanco TRUE -> FALSE

ModeActivate

BOOL

Programación del PLC
Manual de programación y manejo, 11/2019

FALSE

–

Si ManualEnable = FALSE, PID_3Step cambia al modo
de operación que está guardado en Mode.

–

Si Mode = 3, la acción I se trata como se haya
configurado con la variable IntegralResetMode.

● Flanco FALSE -> TRUE
PID_3Step cambia al modo guardado en Mode.

3699

Instrucciones
4.1 Instrucciones

Parámetros de salida PID_3Step V2
Tabla 4-65
Parámetro

Tipo de da‐ Ajuste prede‐
tos
terminado

Descripción

ScaledInput

REAL

0.0

Valor real escalado

ScaledFeedback

REAL

0.0

Realimentación de posición escalada
Con actuadores sin realimentación de posición, ScaledFeed‐
back indica la posición del actuador de modo muy impreciso.
En tal caso, ScaledFeedback solo puede usarse para una es‐
timación aproximada de la posición actual.

Output_UP

BOOL

FALSE

Valor de salida digital para abrir la válvula
Si Config.OutputPerOn = FALSE, se utiliza el parámetro Out‐
put_UP.

Output_DN

BOOL

FALSE

Valor de salida digital para cerrar la válvula
Si Config.OutputPerOn = FALSE, se utiliza el parámetro Out‐
put_DN.

Output_PER

INT

0

Valor de salida analógico
Si Config.OutputPerOn = TRUE, se utiliza Output_PER.
Utilice Output_PER si desea utilizar como actuador una vál‐
vula que se activa a través de una salida analógica y se con‐
trola con una señal continua, como puede ser 0 a 10 V, 4 a 20
mA.
El valor de Output_PER se corresponde con la posición de
destino de la válvula, p. ej., Output_PER = 13824, cuando la
válvula debe abrirse hasta un 50 %.

SetpointLimit_H

BOOL

FALSE

SetpointLimit_L

BOOL

FALSE

Si SetpointLimit_H = TRUE se cumple, significa que se ha
alcanzado el límite superior absoluto de la consigna (Set‐
point ≥ Config.SetpointUpperLimit).
La consigna está limitada a Config.SetpointUpperLimit .
Si SetpointLimit_L = TRUE se cumple, significa que se ha al‐
canzado el límite inferior absoluto de la consigna (Setpoint ≤
Config.SetpointLowerLimit).
La consigna está limitada a Config.SetpointLowerLimit .

InputWarning_H

BOOL

FALSE

Cuando InputWarning_H = TRUE, significa que se ha alcan‐
zado o rebasado el límite superior de advertencia del valor
real.

InputWarning_L

BOOL

FALSE

Cuando InputWarning_L = TRUE, significa que se ha alcan‐
zado o rebasado por defecto el límite inferior de advertencia
del valor real.

3700

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Tipo de da‐ Ajuste prede‐
tos
terminado

Descripción

State

INT

El parámetro State (Página 3713) indica el modo de operación
actual del regulador PID. El modo de operación se cambia con
el parámetro de entrada Mode y un flanco ascendente en Mo‐
deActivate.

0

● State = 0: Inactivo
● State = 1: Optimización inicial
● State = 2: Optimización fina
● State = 3: Modo automático
● State = 4: Modo manual
● State = 5: Aproximación al valor de salida sustitutivo
● State = 6: Medición del tiempo de posicionamiento
● State = 7: Monitorización de errores
● State = 8: Aproximación al valor de salida sustitutivo con
monitorización de errores
● State = 10: Modo manual sin señales de tope
Error

BOOL

FALSE

Si Error = TRUE, existe al menos un mensaje de error en el
ciclo actual.

ErrorBits

DWORD

DW#16#0

El parámetro ErrorBits (Página 3717) muestra qué mensajes
de error existen. ErrorBits es remanente y se restablece con
un flanco ascendente en Reset o ErrorAck.

Consulte también
Parámetros State y Mode V2 (Página 3713)
Parámetro ErrorBits V2 (Página 3717)

Programación del PLC
Manual de programación y manejo, 11/2019

3701

Instrucciones
4.1 Instrucciones

Parámetros de entrada/salida PID_3Step V2
Tabla 4-66
Parámetro

Tipo de da‐ Ajuste prede‐
tos
terminado

Descripción

Mode

INT

Especifique en Mode el modo al que debe cambiar PID_3Step.
Posibilidades:

4

● Mode = 0: Inactivo
● Mode = 1: Optimización inicial
● Mode = 2: Optimización fina
● Mode = 3: Modo automático
● Mode = 4: Modo manual
● Mode = 6: Medición del tiempo de posicionamiento
● Mode = 10: Modo manual sin señales de tope
El modo se activa mediante:
● Flanco ascendente en ModeActivate
● Flanco descendente en Reset
● Flanco descendente en ManualEnable
● Arranque en frío de la CPU si RunModeByStartup = TRUE
Mode es remanente.
Encontrará una descripción detallada de los modos en Pará‐
metros State y Mode V2 (Página 3713).

Variables estáticas PID_3Step V2
Nota
Modifique las variables marcadas con (1) solo en el modo de operación "Inactivo" para evitar un
comportamiento erróneo del regulador PID.

Variable

Tipo de
datos

Ajuste
predeter‐
minado

Descripción

ManualUpInternal

BOOL

FALSE

En el modo manual, cada flanco ascendente abre la válvula un 5%
del rango de posicionamiento total o durante el tiempo mínimo de
posicionamiento del motor. ManualUpInternal solo se evalúa si no
se utiliza Output_PER ni se dispone de realimentación de posición.
Esta variable se utiliza en el diálogo de puesta en servicio.

ManualDnInternal

BOOL

FALSE

En el modo manual, cada flanco ascendente cierra la válvula un 5%
del rango de posicionamiento total o durante el tiempo mínimo de
posicionamiento del motor. ManualDnInternal solo se evalúa si no
se utiliza Output_PER ni se dispone de realimentación de posición.
Esta variable se utiliza en el diálogo de puesta en servicio.

ActivateRecoverMode

BOOL

TRUE

La variable ActivateRecoverMode V2 (Página 3721) determina el
comportamiento en caso de error.

3702

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste
predeter‐
minado

RunModeByStartup

BOOL

TRUE

Descripción

Activar Mode después del rearranque de la CPU
Si RunModeByStartup = TRUE, PID_3Step se inicia después del
arranque de la CPU en el modo guardado en Mode.
Si RunModeByStartup = FALSE, PID_3Step permanece en modo
"Inactivo" después del arranque de la CPU.

LoadBackUp

BOOL

FALSE

Si LoadBackUp = TRUE, se carga nuevamente el último juego de
parámetros PID. El juego se guardó antes de la última optimización.
LoadBackUp se ajusta automáticamente de nuevo a FALSE.

PhysicalUnit

INT

0

Unidad física del valor real y de la consigna, p. ej. ºC o ºF.

PhysicalQuantity

INT

0

Unidad física del valor real y de la consigna, p. ej. temperatura

ErrorBehaviour

BOOL

FALSE

Si ErrorBehaviour = FALSE, en caso de error la válvula permanece
en la posición actual y el regulador cambia directamente al modo de
operación "Inactivo" o "Monitorización de errores".
Si ErrorBehaviour = TRUE, en caso de error el actuador se desplaza
al valor de salida sustitutivo y solo entonces pasa al modo de ope‐
ración "Inactivo" o "Monitorización de errores".
Si se producen los errores siguientes, la válvula ya no se puede
desplazar a un valor de salida sustitutivo configurado.
● 2000h: Valor no válido en el parámetro Feedback_PER.
● 4000h: Valor no válido en el parámetro Feedback.
● 8000h: Error en la realimentación digital de posición.
● 20000h: Valor no válido en la variable SavePosition.

Warning

DWORD

DW#16#
0

La variable Warning (Página 3713) muestra las advertencias desde
Reset = TRUE o ErrorAck =TRUE. Warning es remanente.
Las advertencias cíclicas (por ejemplo, advertencia del valor real) se
muestran mientras sigue existiendo la causa de la advertencia. Al
eliminar la causa, se borran automáticamente. Las advertencias no
cíclicas (como es la relativa al punto de inflexión no encontrado) se
mantienen y se borran como se hace con los errores.

SavePosition

REAL

0.0

Valor de salida sustitutivo
Si ErrorBehaviour = TRUE, en caso de error el elemento final de
control o actuador se desplaza a una posición segura para la insta‐
lación. En cuanto se alcanza el valor de salida sustitutivo,
PID_3Step cambia de modo en función del valor de ActivateReco‐
verMode.

CurrentSetpoint

REAL

0.0

Consigna activa actualmente. Este valor se congela al iniciarse la
optimización.

CancelTuningLevel

REAL

10.0

Fluctuación admisible de la consigna durante la optimización. La
optimización no se cancela hasta que no se cumple:
● Setpoint > CurrentSetpoint + CancelTuningLevel
o bien
● Setpoint < CurrentSetpoint - CancelTuningLevel

Progress

REAL

0.0

Progreso de la optimización en porcentaje (0,0 - 100,0)

Config.InputPerOn(1)

BOOL

TRUE

Si InputPerOn = TRUE, se utiliza el parámetro Input_PER. Si Input‐
PerOn = FALSE, se utiliza el parámetro Input.

Programación del PLC
Manual de programación y manejo, 11/2019

3703

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste
predeter‐
minado

Descripción

Config.OutputPerOn(1)

BOOL

FALSE

Si OutputPerOn = TRUE, se utiliza el parámetro Output_PER. Si
OutputPerOn = FALSE, se utilizan los parámetros Ouput_UP y Out‐
put_DN.

Config.InvertControl(1)

BOOL

FALSE

Inversión del sentido de regulación
Si InvertControl = TRUE, un error de regulación ascendente provo‐
cará una reducción del valor de salida.

Config.FeedbackOn(1)

BOOL

FALSE

Si FeedbackOn = FALSE, se simula una realimentación de posición.
Si FeedbackOn = TRUE, se activa por lo general la realimentación
de posición.

Config.FeedbackPerOn(1)

BOOL

FALSE

FeedbackPerOn solo está activo cuando FeedbackOn = TRUE.
Si FeedbackPerOn = TRUE, se utiliza la entrada analógica para la
realimentación de posición (parámetro Feedback_PER).
Si FeedbackPerOn = FALSE, se utiliza el parámetro Feedback para
la realimentación de posición.

Config.ActuatorEndStopOn(1)

BOOL

FALSE

Si ActuatorEndStopOn = TRUE, se tiene en cuenta la realimenta‐
ción de posición digital Actuator_L y Actuator_H .

Config.InputUpperLimit(1)

REAL

120.0

Límite superior del valor real
Se vigila que Input y Input_PER respeten estos límites.
En la entrada de periferia, el valor real puede encontrarse como
máximo un 18% por encima del rango normalizado (margen de sa‐
turación). No se comunica ningún error más debido al rebase por
exceso del "Límite superior del valor real". Únicamente se detectan
la rotura de hilo y el cortocircuito y PID_3Step se comporta según la
reacción configurada en caso de error.
InputUpperLimit > InputLowerLimit

Config.InputLowerLimit

(1)

REAL

0.0

Límite inferior del valor real
InputLowerLimit < InputUpperLimit

Config.InputUpperWarning(1)

REAL

+3.40282 Límite superior de advertencia del valor real
2e+38
Si se configura InputUpperWarning a un valor que se encuentre
fuera de los límites del valor real, el límite superior absoluto confi‐
gurado para el valor real se utiliza como límite superior de adver‐
tencia.
Si se configura InputUpperWarning a un valor que se encuentre
dentro de los límites del valor real, este valor se utiliza como límite
superior de advertencia.
InputUpperWarning > InputLowerWarning
InputUpperWarning ≤ InputUpperLimit

Config.InputLowerWarning(1)

REAL

-3.40282
2e+38

Límite inferior de advertencia del valor real
Si se configura InputLowerWarning a un valor que se encuentre
fuera de los límites del valor real, el límite inferior absoluto configu‐
rado para el valor real se utiliza como límite inferior de advertencia.
Si se configura InputLowerWarning a un valor que se encuentre
dentro de los límites del valor real, este valor se utiliza como límite
inferior de advertencia.
InputLowerWarning < InputUpperWarning
InputLowerWarning ≥ InputLowerLimit

3704

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste
predeter‐
minado

Config.OutputUpperLimit(1)

REAL

100.0

Descripción

Límite superior del valor de salida
El rango de valores siguiente es admisible:
UpperPointOut ≥ OutputUpperLimit > OutputLowerLimit
Para más detalles ver OutputLowerLimit

Config.OutputLowerLimit

(1)

REAL

0.0

Límite inferior del valor de salida
El rango de valores siguiente es admisible:
OutputUpperLimit > OutputLowerLimit ≥ LowerPointOut
Si se usa Output_PER, el límite de valor de salida -100 % se co‐
rresponde con el valor Output_PER = -27648; 100 % se correspon‐
den con el valor Output_PER = 27648.
Si OutputPerOn = FALSE y FeedbackOn = FALSE,OutputLowerLi‐
mit y OutputUpperLimit no se evalúan.
Seguidamente, Output_UP y Output_DN se restablecen con Actua‐
tor_H = TRUE o Actuator_L = TRUE (si ActuatorEndSto‐
pOn = TRUE) o tras un tiempo de desplazamiento de Config.Virtua‐
lActuatorLimit * Retain.TransitTime/100 (si ActuatorEndSto‐
pOn = FALSE).

Config.SetpointUpperLimit(1)

REAL

+3.40282 Límite superior de la consigna
2e+38
Si se configura SetpointUpperLimit a un valor que se encuentre fue‐
ra de los límites del valor real, el límite superior absoluto configurado
para el valor real se preasigna como límite superior de la consigna.
Si se configura SetpointUpperLimit a un valor que se encuentre
dentro de los límites del valor real, este valor se utiliza como límite
superior de la consigna.

Config.SetpointLowerLimit(1)

REAL

Límite inferior de la consigna
3.402822 Si se configura SetpointLowerLimit a un valor que se encuentre
e+38
fuera de los límites del valor real, el límite inferior absoluto configu‐
rado para el valor real se preasigna como límite inferior de la con‐
signa.
Si se configura SetpointLowerLimit a un valor que se encuentre
dentro de los límites del valor real, este valor se utiliza como límite
inferior de la consigna.

Config.MinimumOnTime(1)

REAL

0.0

Tiempo conexión mín.
Tiempo en segundos, que debe estar conectado como mínimo el
elemento final de control.
Config.MinimumOnTime solo es efectivo si se utilizan Output_UP y
Output_DN (Config.OutputPerOn = FALSE).

Config.MinimumOffTime(1)

REAL

0.0

Tiempo OFF mín.
Tiempo en segundos, que debe estar desconectado como mínimo
el elemento final de control.
Config.MinimumOffTime solo es efectivo si se utilizan Output_UP y
Output_DN (Config.OutputPerOn = FALSE).

Programación del PLC
Manual de programación y manejo, 11/2019

3705

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste
predeter‐
minado

Descripción

Config.VirtualActuatorLimit(1)

REAL

150.0

Si se cumplen todas las condiciones siguientes, el actuador se des‐
plaza como máximo durante VirtualActuatorLimit × Retain.Transit‐
Time/100 en una dirección y se emite la advertencia 2000h:
● Config.OutputPerOn = FALSE
● Config.ActuatorEndStopOn = FALSE
● Config.FeedbackOn = FALSE
Si se cumple Config.OutputPerOn = FALSE y Config.ActuatorEndS‐
topOn = TRUE o Config.FeedbackOn = TRUE, solo se emite la ad‐
vertencia 2000h.
Si se cumple Config.OutputPerOn = TRUE, no se tiene en cuenta
VirtualActuatorLimit.
A partir de PID_3Step versión 2.3 puede desactivarse la vigilancia y
limitación del tiempo de desplazamiento con Config.VirtualActuator‐
Limit = 0.0.

Config.InputScaling.Upper‐
PointIn(1)

REAL

Config.InputScaling.Lower‐
PointIn(1)

REAL

Config.InputScaling.Upper‐
PointOut(1)

REAL

Config.InputScaling.Lower‐
PointOut(1)

REAL

Config.FeedbackScaling.Up‐
perPointIn(1)

REAL

Config.FeedbackScaling.Lo‐
werPointIn(1)

REAL

3706

27648.0

Escalado Input_PER arriba
Mediante los dos pares de valores UpperPointOut, UpperPointIn y
LowerPointOut, LowerPointIn de la estructura InputScaling, In‐
put_PER se convierte en porcentaje.

0.0

Escalado Input_PER abajo
Mediante los dos pares de valores UpperPointOut, UpperPointIn y
LowerPointOut, LowerPointIn de la estructura InputScaling, In‐
put_PER se convierte en porcentaje.

100.0

Valor real superior escalado
Mediante los dos pares de valores UpperPointOut, UpperPointIn y
LowerPointOut, LowerPointIn de la estructura InputScaling, In‐
put_PER se convierte en porcentaje.

0.0

Valor real inferior escalado
Mediante los dos pares de valores UpperPointOut, UpperPointIn y
LowerPointOut, LowerPointIn de la estructura InputScaling, In‐
put_PER se convierte en porcentaje.

27648.0

Escalado Feedback_PER arriba
Mediante los dos pares de valores UpperPointOut, UpperPointIn y
LowerPointOut, LowerPointIn de la estructura FeedbackScaling,
Feedback_PER se convierte en porcentaje.

0.0

Escalado Feedback_PER abajo
Mediante los dos pares de valores UpperPointOut, UpperPointIn y
LowerPointOut, LowerPointIn de la estructura FeedbackScaling,
Feedback_PER se convierte en porcentaje.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste
predeter‐
minado

Config.FeedbackScaling.Up‐
perPointOut(1)

REAL

100.0

Descripción

Tope superior
Mediante los dos pares de valores UpperPointOut, UpperPointIn y
LowerPointOut, LowerPointIn de la estructura FeedbackScaling,
Feedback_PER se convierte en porcentaje.
El rango de valores permitido depende de la configuración.
● FeedbackOn = FALSE:
UpperPointOut = 100.0
● FeedbackOn = TRUE:
UpperPointOut = 100.0 o 0.0
UpperPointOut ≠ LowerPointOut

Config.FeedbackScaling.Lo‐
werPointOut(1)

REAL

0.0

Tope inferior
Mediante los dos pares de valores UpperPointOut, UpperPointIn y
LowerPointOut, LowerPointIn de la estructura FeedbackScaling,
Feedback_PER se convierte en porcentaje.
El rango de valores permitido depende de la configuración.
● FeedbackOn = FALSE:
LowerPointOut = 0.0
● FeedbackOn = TRUE:
LowerPointOut = 0.0 o -100.0
LowerPointOut ≠ UpperPointOut

GetTransitTime.InvertDirec‐
tion

BOOL

FALSE

Si InvertDirection = FALSE, se abre completamente la válvula para
determinar el tiempo de posicionamiento, luego se cierra y se vuelve
a abrir.
Si InvertDirection = TRUE, se cierra completamente la válvula, lue‐
go se abre y se vuelve a cerrar.

GetTransitTime.SelectFeed‐
back

BOOL

FALSE

Si SelectFeedback = TRUE, durante la medición del tiempo de po‐
sicionamiento se tendrá en cuenta Feedback_PER o Feedback.
Si SelectFeedback = FALSE, durante la medición del tiempo de
posicionamiento se tendrán en cuenta Actuator_H y Actuator_L.

GetTransitTime.State

INT

0

Fase actual de la medición del tiempo de posicionamiento
● State = 0: Inactivo
● State = 1: Abrir válvula completamente
● State = 2: Cerrar válvula completamente
● State = 3: Desplazar válvula a la posición de destino
(NewOutput)
● State = 4: Tiempo de posicionamiento medido correctamente
● State = 5: Medición del tiempo de posicionamiento cancelada

GetTransitTime.NewOutput

REAL

0.0

Posición de destino para la medición del tiempo de posicionamiento
con realimentación de posición
La posición de destino debe encontrarse dentro de los topes supe‐
rior e inferior. La diferencia entre NewOutput y ScaledFeedback de‐
be estar al menos por encima del 50% del margen de ajuste admi‐
sible.

Programación del PLC
Manual de programación y manejo, 11/2019

3707

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste
predeter‐
minado

Descripción

CycleTime.StartEstimation

BOOL

TRUE

Si StartEstimation = TRUE, se inicia la medición del tiempo de
muestreo PID_3Step. Una vez finalizada la medición, CycleTi‐
me.StartEstimation = FALSE.

CycleTime.EnEstimation

BOOL

TRUE

Si EnEstimation = TRUE, se calcula el tiempo de muestreo
PID_3Step.
Si CycleTime.EnEstimation = FALSE, el tiempo de muestreo
PID_3Step no se calcula y debe configurar CycleTime.Value correc‐
tamente a mano.

CycleTime.EnMonitoring

BOOL

TRUE

Si EnMonitoring = TRUE, se vigila el tiempo de muestreo
PID_3Step. Si no es posible ejecutar PID_3Step dentro del tiempo
de muestreo, se emite el error 0800h y se cambia el modo de ope‐
ración. El modo de operación al que se cambie depende de Acti‐
vateRecoverMode y de ErrorBehaviour.
Si EnMonitoring = FALSE, el tiempo de muestreo PID_3Step no se
vigila, el error 0800h no se emite y el modo de operación no se
cambia.

CycleTime.Value(1)

REAL

0.1

Tiempo de muestreo PID_3Step en segundos
CycleTime.Value se determina automáticamente y equivale normal‐
mente al tiempo de ciclo del OB invocante.

CtrlParamsBackUp.SetByUser BOOL

FALSE

Valor almacenado de Retain.CtrlParams.SetByUser
Los valores de la estructura CtrlParamsBackUp pueden volverse a
cargar con LoadBackUp = TRUE.

CtrlParamsBackUp.Gain

REAL

1.0

Ganancia proporcional almacenada

CtrlParamsBackUp.Ti

REAL

20.0

Tiempo de integración almacenado en segundos

CtrlParamsBackUp.Td

REAL

0.0

Tiempo derivativo almacenado en segundos

CtrlParamsBackUp.TdFiltRa‐
tio

REAL

0.2

Coeficiente almacenado para el retardo de la acción derivada

CtrlParamsBackUp.PWeigh‐
ting

REAL

1.0

Ponderación almacenada de la acción P

CtrlParamsBackUp.DWeigh‐
ting

REAL

1.0

Ponderación almacenada de la acción D

CtrlParamsBackUp.Cycle

REAL

1.0

Tiempo de muestreo almacenado del algoritmo PID en segundos

CtrlParamsBackUp.Input‐
DeadBand

REAL

0.0

Ancho de zona muerta almacenado del error de regulación

PIDSelfTune.SUT.Calculate‐
Params

BOOL

FALSE

Las propiedades del sistema regulado se almacenan durante la op‐
timización. Si CalculateParams = TRUE, se vuelven a calcular los
parámetros PID basándose en estas propiedades. Los parámetros
PID se calculan según el método ajustado en TuneRule. Calculate‐
Params se ajusta a FALSE después del cálculo.

3708

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste
predeter‐
minado

Descripción

PIDSelfTune.SUT.TuneRule

INT

1

Calcular los parámetros durante la optimización inicial según el mé‐
todo:
● SUT.TuneRule = 0: PID rápido I (comportamiento de regulación
más rápido con amplitudes del valor de salida mayores que las
de SUT.TuneRule =1)
● SUT.TuneRule = 1: PID lento I (comportamiento de regulación
más lento con amplitudes del valor de salida menores que las de
SUT.TuneRule = 0)
● SUT.TuneRule = 2: PID según Chien, Hrones, Reswick
● SUT.TuneRule = 3: PI según Chien, Hrones, Reswick
● SUT.TuneRule = 4: PID rápido II (comportamiento de regulación
más rápido con amplitudes del valor de salida mayores que las
de SUT.TuneRule = 5)
● SUT.TuneRule = 5: PID lento II (comportamiento de regulación
más lento con amplitudes del valor de salida menores que las de
SUT.TuneRule = 4)
Los métodos SUT.TuneRule = 0 y 1 se diferencian únicamente en el
cálculo de la ganancia proporcional de los métodos SUT.TuneRu‐
le = 4 y 5:
Con SUT.TuneRule = 0 y 1, la ganancia proporcional se calcula
partiendo del tiempo de compensación del proceso. Con SUT.Tu‐
neRule = 4 y 5, se hace partiendo del tiempo de retardo del proceso.
Con SUT.TuneRule = 4 y 5, se obtiene un valor mayor para la ga‐
nancia proporcional y, con ello, un comportamiento de regulación
más rápido con amplitudes del valor de salida mayores que las de
SUT.TuneRule = 0 y 1.

PIDSelfTune.SUT.State

INT

0

La variable SUT.State muestra la fase actual de la optimización
inicial:
● State = 0: Iniciar la optimización inicial
● State = 50: Determinar la posición inicial sin realimentación de
posición
● State = 100: Calcular desviación estándar
● State = 200: Determinar punto de inflexión
● State = 300: Determinar el tiempo de subida
● State = 9900: Optimización inicial correcta
● State = 1: Optimización inicial no correcta

Programación del PLC
Manual de programación y manejo, 11/2019

3709

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste
predeter‐
minado

Descripción

PIDSelfTune.TIR.RunIn

BOOL

FALSE

Con la variable RunIn puede determinar que se realice una optimi‐
zación fina incluso sin optimización inicial.
● RunIn = FALSE
Si la optimización fina se inicia desde los modos de operación
Inactivo o Manual, se inicia una optimización inicial.
Si la optimización fina se inicia desde el modo automático, los
parámetros PID existentes se regulan a la consigna.
Solo entonces comienza la optimización fina. Si no es posible
realizar una optimización inicial, PID_3Step pasa al modo desde
el que se inició la optimización.
● RunIn = TRUE
La optimización inicial se omite. PID_3Step intenta alcanzar la
consigna con el valor de salida mínimo o máximo, lo que puede
ocasionar una sobreoscilación muy alta. Solo entonces
comienza la optimización fina.
RunIn se ajusta a FALSE después de la optimización fina.

PIDSelfTune.TIR.CalculatePa‐ BOOL
rams

FALSE

Las propiedades del sistema regulado se almacenan durante la op‐
timización. Si CalculateParams = TRUE, se vuelven a calcular los
parámetros PID basándose en estas propiedades. Los parámetros
PID se calculan según el método ajustado en TuneRule. Calculate‐
Params se ajusta a FALSE después del cálculo.

PIDSelfTune.TIR.TuneRule

0

Calcular los parámetros durante la optimización fina según el mé‐
todo:

INT

● TIR.TuneRule = 0: PID automático
● TIR.TuneRule = 1: PID rápido (comportamiento de regulación
más rápido con amplitudes del valor de salida mayores que las
de TIR.TuneRule = 2)
● TIR.TuneRule = 2: PID lento (comportamiento de regulación
más lento con amplitudes del valor de salida menores que las de
TIR.TuneRule = 1)
● TIR.TuneRule = 3: PID Ziegler-Nichols
● TIR.TuneRule = 4: PI Ziegler-Nichols
● TIR.TuneRule = 5: P Ziegler-Nichols
Para poder repetir el cálculo de los parámetros PID con TIR.Calcu‐
lateParams y TIR.TuneRule = 0, 1 o 2, la optimización fina anterior
debe haberse ejecutado también con TIR.TuneRule =0, 1 o 2.
De no ser así, se utiliza TIR.TuneRule = 3.
Siempre es posible volver a calcular los parámetros PID con
TIR.CalculateParams y TIR.TuneRule = 3, 4 o 5.

3710

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste
predeter‐
minado

Descripción

PIDSelfTune.TIR.State

INT

0

La variable TIR.State muestra la fase actual de la Optimización fina:
● State = -100 No es posible realizar la optimización fina. Primero
se efectuará una optimización inicial.
● State = 0: Iniciar la optimización fina
● State = 200: Calcular desviación estándar
● State = 300: Intentar alcanzar la consigna con el valor de salida
máximo o mínimo
● State = 400: Intentar alcanzar la consigna con los parámetros
PID actuales (si la optimización inicial ha sido correcta)
● State = 500: Determinar oscilación y calcular parámetros
● State = 9900: Optimización fina correcta
● State = 1: Optimización fina no correcta

Retain.TransitTime

REAL

(1)

30.0

Tiempo de posicionamiento del motor en segundos
Tiempo en segundos que requiere el elemento final de control para
desplazar la válvula del estado cerrado al estado abierto.
TransitTime es remanente.

Retain.CtrlParams.SetByU‐
ser(1)

BOOL

FALSE

Si SetByUser = FALSE, los parámetros PID se determinan de forma
automática y PID_3Step funciona con una zona muerta en el valor
de salida. El ancho de la zona muerta se calcula durante la optimi‐
zación a partir de una desviación estándar del valor de salida y se
almacena en Retain.CtrlParams.OutputDeadBand.
Si SetByUser = TRUE, los parámetros PID se introducen manual‐
mente y PID_3 Step funciona sin zona muerta en el valor de sali‐
da.Retain.CtrlParams.OutputDeadBand = 0.0
SetByUser es remanente.

Retain.CtrlParams.Gain

(1)

REAL

1.0

Ganancia proporcional activa
Para invertir el sentido de regulación utilice la variable Config.In‐
vertControl. Los valores negativos de Gain invierten también el sen‐
tido de regulación. Se recomienda que ajuste el sentido de regula‐
ción únicamente a través de InvertControl. Si se cumplen Invert‐
Control = TRUE y Gain < 0.0, el sentido de regulación también se
invierte.
Gain es remanente.

Retain.CtrlParams.Ti(1)

REAL

20.0

● Ti > 0.0: Tiempo de integración activo en segundos
● Ti = 0.0: La acción I está desactivada
Ti es remanente.

Retain.CtrlParams.Td(1)

REAL

0.0

● Td > 0.0: Tiempo derivativo activo en segundos
● Td = 0.0: La acción D está desactivada
Td es remanente.

Programación del PLC
Manual de programación y manejo, 11/2019

3711

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste
predeter‐
minado

Retain.CtrlParams.TdFiltRa‐
tio(1)

REAL

0.2

Descripción

Coeficiente activo para el retardo de la acción derivada
El efecto de la acción D se retrasa mediante el coeficiente de retardo
de la acción derivada.
Retardo de la acción derivada = Tiempo derivativo x coeficiente de
retardo de la acción derivada
● 0.0: la acción D solo surte efecto para un ciclo y, por ello, casi no
es efectiva.
● 0.5: Este valor se ha acreditado en la práctica para sistemas
regulados con una constante de tiempo dominante.
● > 1.0: Cuanto mayor sea el coeficiente, más se retrasará el
efecto de la acción D.
TdFiltRatio es remanente.

Retain.CtrlParams.PWeigh‐
ting(1)

REAL

1.0

Ponderación activa de la acción P
En el caso de que se modifique la consigna, es posible atenuar la
acción P.
Se recomiendan valores comprendidos entre 0.0 y 1.0.
● 1.0: La acción P es totalmente efectiva al cambiar la consigna
● 0.0: La acción P no es efectiva al cambiar la consigna
Si se produce una modificación del valor real, la acción P es total‐
mente efectiva.
PWeighting es remanente.

Retain.CtrlParams.DWeigh‐
ting(1)

REAL

1.0

Ponderación activa de la acción D
En el caso de que se modifique la consigna, es posible atenuar la
acción D.
Se recomiendan valores comprendidos entre 0.0 y 1.0.
● 1.0: La acción D es totalmente efectiva cuando se cambia la
consigna.
● 0.0: la acción D no es efectiva cuando cambia la consigna.
Si se produce una modificación del valor real, la acción D es total‐
mente efectiva.
DWeighting es remanente.

Retain.CtrlParams.Cycle

(1)

REAL

1.0

Tiempo de muestreo activo del algoritmo PID en segundos que se
redondea a un múltiplo entero del tiempo de ciclo del OB invocante.
Cycle es remanente.

Retain.CtrlParams.InputDead‐
Band(1)

REAL

0.0

Ancho de zona muerta del error de regulación
InputDeadBand es remanente.

Consulte también
Parámetros State y Mode V2 (Página 3713)
Variable ActivateRecoverMode V2 (Página 3721)

3712

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros State y Mode V2
Interrelación de los parámetros
El parámetro State indica el modo de operación actual del regulador PID. El parámetro State
no puede modificarse.
Con un flanco ascendente en ModeActivate, PID_3Step pasa al modo guardado en el
parámetro de entrada/salida Mode.
Al conectar la CPU o cambiar de STOP a RUN, PID_3Step se inicia en el modo de operación
guardado en Mode. Para dejar PID_3Step en el modo de operación "Inactivo", ajuste
RunModeByStartup = FALSE.

Significado de los valores
State

Descripción del modo de operación

0

Inactivo
El regulador está desconectado y ya no modifica la posición de la válvula.

1

Optimización inicial
La optimización inicial determina el comportamiento del proceso a un impulso del valor de salida y busca el
punto de inflexión. Los parámetros PID óptimos se calculan a partir de la pendiente máxima y el tiempo muerto
del sistema regulado. Para obtener los mejores parámetros PID, debe efectuarse una optimización inicial y
una optimización fina.
Requisitos para la optimización inicial:
● El tiempo de posicionamiento del motor está configurado o medido.
● Modo de operación Inactivo (State = 0), Manual (State = 4) o Automático (State = 3)
● ManualEnable = FALSE
● Reset = FALSE
● La consigna y el valor real se encuentran dentro de los límites configurados.
Cuanto más estable es el valor real, con mayor facilidad y precisión se pueden calcular los parámetros PID.
Un ruido del valor real es aceptable siempre que la subida del valor real sea considerablemente mayor que
el ruido. Esto tiene más probabilidades de suceder en los modos "Inactivo" o "Manual".
La consigna se congela en la variable CurrentSetpoint. La optimización no se cancela hasta que no se cumple:
● Setpoint > CurrentSetpoint + CancelTuningLevel
o bien,
● Setpoint < CurrentSetpoint - CancelTuningLevel
Antes de volver a calcular los parámetros PID, se guarda una copia de seguridad de estos y es posible
reactivarlos con LoadBackUp.
Una vez realizada correctamente la optimización inicial, el regulador pasa al modo automático; si la optimi‐
zación inicial no se ha realizado correctamente, el cambio del modo de operación depende de ActivateRe‐
coverMode y ErrorBehaviour.
La fase de optimización inicial se muestra con la variable SUT.State.

Programación del PLC
Manual de programación y manejo, 11/2019

3713

Instrucciones
4.1 Instrucciones
State

Descripción del modo de operación

2

Optimización fina
La optimización fina genera una oscilación constante y limitada del valor real. A partir de la amplitud y fre‐
cuencia de esta oscilación se calculan de nuevo los parámetros PID. Los parámetros PID existentes después
de la optimización fina muestran en su mayoría un comportamiento de guía y ante fallos mucho mejor que los
parámetros PID de la optimización inicial. Para obtener los mejores parámetros PID, debe efectuarse una
optimización inicial y una optimización fina.
PID_3Step intenta generar automáticamente una oscilación que es mayor que el ruido del valor real. La
estabilidad del valor real ejerce tan solo una mínima influencia sobre la optimización fina.
La consigna se congela en la variable CurrentSetpoint. La optimización no se cancela hasta que no se cumple:
● Setpoint > CurrentSetpoint + CancelTuningLevel
o bien,
● Setpoint < CurrentSetpoint - CancelTuningLevel
Antes de la optimización fina se realiza una copia de seguridad de los parámetros PID. Estos pueden reac‐
tivarse con LoadBackUp.
Requisitos para la optimización fina:
● El tiempo de posicionamiento del motor está configurado o medido.
● La consigna y el valor real se encuentran dentro de los límites configurados.
● ManualEnable = FALSE
● Reset = FALSE
● Modo de operación Automático (State = 3), Inactivo (State = 0) o Manual (State = 4)
Al inicio, la optimización fina se desarrolla del modo siguiente:
● Modo automático (State = 3)
Si desea mejorar los parámetros PID existentes mediante optimización, inicie la optimización fina desde
el modo automático.
PID_3Step regula con los parámetros PID existentes hasta que el lazo de regulación es estacionario y se
cumplen las condiciones para la optimización fina. Solo entonces comienza la optimización fina.
● Modo Inactivo (State = 0) o Manual (State = 4)
Si se cumplen las condiciones para optimización inicial, esta se inicia. Con los parámetros PID calculados,
la regulación se realiza hasta que el lazo de regulación es estacionario y se han cumplido las condiciones
para una optimización fina.
Si PIDSelfTune.TIR.RunIn = TRUE, se omite la optimización inicial y se intenta alcanzar la consigna con
el valor de salida máximo o mínimo. lo que puede ocasionar una sobreoscilación muy alta. La optimización
fina comienza entonces automáticamente.
Una vez realizada correctamente la optimización fina, el regulador pasa al modo automático; si la optimización
fina no se ha realizado correctamente, el cambio del modo de operación depende de ActivateRecoverMode
y ErrorBehaviour.
La fase de optimización fina se muestra con la variable TIR.State.

3

Modo automático
En el modo automático, PID_3Step regula el sistema regulado conforme a los parámetros predefinidos.
Cuando se cumple uno de los requisitos siguientes, se cambia al modo automático:
● Optimización inicial finalizada correctamente.
● Optimización fina finalizada correctamente.
● Cambio del parámetro de entrada/salida Mode al valor 3 y un flanco ascendente en ModeActivate.
El cambio de modo automático a modo manual se realiza sin discontinuidad únicamente en el editor de puesta
de servicio.
En el modo automático se tiene en cuenta la variable ActivateRecoverMode.

3714

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
State

Descripción del modo de operación

4

Modo manual
En el modo manual, se especifican valores de salida manuales en los parámetros Manual_UP y Manual_DN
o ManualValue. El parámetro ErrorBits describe si el actuador se puede desplazar al valor de salida en caso
de error.
Este modo puede activarse también mediante ManualEnable = TRUE. Se recomienda cambiar los modos de
operación solo mediante Mode y ModeActivate.
El cambio de modo manual a modo automático se efectúa sin discontinuidad. El modo manual es posible
aunque haya un error pendiente.

5

Aproximar al valor de salida sustitutivo
Este modo de operación se activa en caso de error si Errorbehaviour = TRUE y ActivateRecoverMode =
FALSE..
PID_3Step desplaza el elemento final de control al valor de salida sustitutivo y cambia después al modo de
operación "Inactivo".

6

Medición del tiempo de posicionamiento
Se mide el tiempo que requiere el motor para abrir completamente la válvula a partir del estado cerrado.
Este modo de operación se activa cuando se ajusta Mode = 6 y ModeActivate = TRUE.
Si se utilizan señales de tope para la medición del tiempo de posicionamiento, la válvula se abre completa‐
mente desde la posición actual, luego se cierra completamente y se vuelve a abrir completamente. Si Get‐
TransitTime.InvertDirection = TRUE, el comportamiento se invierte.
Si se utiliza una realimentación de posición para la medición del tiempo de posicionamiento, el elemento final
de control se desplaza desde la posición actual a una posición de destino.
Los límites del valor de salida no se tienen en cuenta durante la medición del tiempo de posicionamiento. El
actuador puede desplazarse hasta el tope superior o inferior.

7

Monitorización de errores
El algoritmo de regulación está desconectado y ya no modifica la posición de la válvula.
Este modo de operación se activa en caso de error en lugar del modo de operación "Inactivo".
Deben haberse cumplido todas las condiciones siguientes:
● Modo automático (Mode = 3)
● Errorbehaviour = FALSE
● ActivateRecoverMode = TRUE
● Se han producido uno o varios errores en los que interviene ActivateRecoverMode (Página 3721).
En cuanto los errores dejan de estar activos, PID_3Step pasa de nuevo al modo automático.

8

Aproximar al valor de salida sustitutivo con monitorización de errores
Este modo de operación se activa en caso de error en lugar del modo de operación "Aproximar al valor de
salida sustitutivo". PID_3Step desplaza el elemento final de control o actuador al valor de salida sustitutivo y
cambia después al modo de operación "Monitorización de errores".
Deben haberse cumplido todas las condiciones siguientes:
● Modo automático (Mode = 3)
● Errorbehaviour = TRUE
● ActivateRecoverMode = TRUE
● Se han producido uno o varios errores en los que interviene ActivateRecoverMode (Página 3721).
En cuanto los errores dejan de estar activos, PID_3Step pasa de nuevo al modo automático.

10

Modo manual sin señales de tope
Las señales de tope no se tienen en cuenta a pesar de que Config.ActuatorEndStopOn = TRUE. No se tienen
en cuenta los límites del valor de salida. Por lo demás, PID_3Step se comporta del mismo modo que en el
modo manual.

Programación del PLC
Manual de programación y manejo, 11/2019

3715

Instrucciones
4.1 Instrucciones

Comportamiento ENO
Si State = 0, entonces ENO = FALSE.
Si State ≠ 0, entonces ENO = TRUE.

Cambio automático de modo de operación durante la puesta en servicio
Una vez realizada correctamente la optimización inicial o la optimización fina, se activa el modo
automático. La siguiente tabla muestra cómo se modifican Mode y State durante una
optimización inicial correcta.
N.º de ciclo Mode

State

Acción

0

4

4

Ajustar Mode = 1

1

1

4

Ajustar ModeActivate = TRUE

1

4

1

El valor de State se guarda en Mode
Se inicia la optimización inicial

n

4

1

Optimización inicial correcta

n

3

3

Se inicia el modo automático

En caso de error, PID_3Step cambia automáticamente el modo de operación. La siguiente
tabla muestra cómo se modifican Mode y State durante una optimización inicial incorrecta.
N.º de ciclo Mode

State

Acción

0

4

4

Ajustar Mode = 1

1

1

4

Ajustar ModeActivate = TRUE

1

4

1

El valor de State se guarda en Mode

n

4

1

La optimización inicial se ha cancelado

n

4

4

Se inicia el modo manual

Se inicia la optimización inicial

Si ActivateRecoverMode = TRUE, se activa el modo guardado en Mode. Al iniciar la medición
del tiempo de posicionamiento, la optimización inicial o la optimización fina, PID_3Step ha
guardado el valor de State en el parámetro de entrada/salida Mode. Por lo tanto, PID_3Step
cambia al modo desde el que se inició la optimización.
Si ActivateRecoverMode = FALSE, se activa el modo "Inactivo" o "Aproximar al valor de salida
sustitutivo".

Cambio automático del modo de operación tras la medición del tiempo de posicionamiento
Si ActivateRecoverMode = TRUE, se activa el modo de operación guardado en Mode una vez
realizada correctamente la medición del tiempo de posicionamiento.
Si ActivateRecoverMode = FALSE, se cambia al modo de operación "Inactivo" una vez
realizada correctamente la medición del tiempo de posicionamiento.

3716

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Cambio automático del modo de operación en el modo automático
En caso de error, PID_3Step cambia automáticamente el modo de operación. El diagrama
siguiente muestra la influencia de ErrorBehaviour y ActivateRecoverMode sobre este cambio
del modo de operación.
,QDFWLYR  

0RQLWRUL]DFLµQGHHUURUHV 

(UURU%HKDYLRXU )$/6(
$FWLYDWH5HFRYHU0RGH )$/6(

(UURU%HKDYLRXU )$/6(
$FWLYDWH5HFRYHU0RGH 758(

0RGRDXWRP£WLFR  

(UURU%HKDYLRXU 758(
$FWLYDWH5HFRYHU0RGH )$/6(

(UURU%HKDYLRXU 758(
$FWLYDWH5HFRYHU0RGH 758(

$SUR[LPDUDOYDORUPDQLSXODGRGHVHJXULGDG  

$SUR[LPDUDOYDORUPDQLSXODGRGHVHJXULGDG
FRQPRQLWRUL]DFLµQGHHUURUHV  

Cambio automático del modo de operación en caso de error




Cambio automático del modo de operación cuando ha concluido el modo actual.
Cambio automático del modo de operación cuando ya no existe el error.

Consulte también
Variable ActivateRecoverMode V2 (Página 3721)
Parámetro ErrorBits V2 (Página 3717)

Parámetro ErrorBits V2
Si hay varios errores presentes a la vez, los valores del ErrorBits se muestran sumados
binariamente. Si se muestra, p. ej., ErrorBits = 0003h, significa que están presentes
simultáneamente los errores 0001h y 0002h.

Programación del PLC
Manual de programación y manejo, 11/2019

3717

Instrucciones
4.1 Instrucciones
Si hay una realimentación de posición, PID_3Step utiliza ManualValue en el modo manual
como valor de salida. La excepción es Errorbits = 10000h.
ErrorBits

Descripción

(DW#16#...)
0000

No hay ningún error.

0001

El parámetro "Input" se encuentra fuera de los límites del valor real.
● Input > Config.InputUpperLimit o bien
● Input < Config.InputLowerLimit
Si antes de producirse el error estaba activo el modo automático y se cumple ActivateRecoverMode =
TRUE, PID_3Step permanece en modo automático.
Si antes de producirse el error estaba activo el modo optimización inicial, optimización fina o medición del
tiempo de posicionamiento y se cumplía ActivateRecoverMode = TRUE, PID_3Step pasa al modo guar‐
dado en Mode.

0002

Valor no válido en el parámetro "Input_PER". Compruebe si hay un error en la entrada analógica.
Si antes de producirse el error estaba activo el modo automático y se cumple ActivateRecoverMode =
TRUE, PID_3Step cambia al modo de operación "Aproximar al valor de salida sustitutivo con monitoriza‐
ción de errores" o "Monitorización de errores". En cuanto desaparece el error, PID_3Step pasa de nuevo
al modo automático.
Si antes de producirse el error estaba activo el modo optimización inicial, optimización fina o medición del
tiempo de posicionamiento y se cumplía ActivateRecoverMode = TRUE, PID_3Step pasa al modo guar‐
dado en Mode.

0004

Error durante la optimización fina. No se ha podido mantener la oscilación del valor real.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_3Step cancela la optimi‐
zación y cambia al modo guardado en Mode.

0010

Se ha cambiado la consigna durante la optimización.
En la variable CancelTuningLevel puede ajustar la fluctuación admisible de la consigna.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_3Step cancela la optimi‐
zación y cambia al modo guardado en Mode.

0020

La optimización inicial no está permitida durante la optimización fina.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_3Step permanece en el
modo optimización fina.

0080

Error durante la optimización inicial. Los límites del valor de salida no están configurados correctamente
o el valor real no responde de la forma esperada.
Compruebe si los límites del valor de salida están configurados correctamente y si encajan con el sentido
de la regulación.
Asegúrese también de que el valor real no oscile fuertemente antes de iniciar la optimización inicial.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_3Step cancela la optimi‐
zación y cambia al modo guardado en Mode.

0100

Un error en la optimización fina ha provocado parámetros no válidos.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_3Step cancela la optimi‐
zación y cambia al modo guardado en Mode.

3718

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
ErrorBits

Descripción

(DW#16#...)
0200

Valor no válido en el parámetro "Input": El valor no tiene un formato numérico válido.
Si antes de producirse el error estaba activo el modo automático y se cumple ActivateRecoverMode =
TRUE, PID_3Step cambia al modo de operación "Aproximar al valor de salida sustitutivo con monitoriza‐
ción de errores" o "Monitorización de errores". En cuanto desaparece el error, PID_3Step pasa de nuevo
al modo automático.
Si antes de producirse el error estaba activo el modo optimización inicial, optimización fina o medición del
tiempo de posicionamiento y se cumplía ActivateRecoverMode = TRUE, PID_3Step pasa al modo guar‐
dado en Mode.

0400

Error al calcular el valor de salida. Compruebe los parámetros PID.
Si antes de producirse el error estaba activo el modo automático y se cumple ActivateRecoverMode =
TRUE, PID_3Step cambia al modo de operación "Aproximar al valor de salida sustitutivo con monitoriza‐
ción de errores" o "Monitorización de errores". En cuanto desaparece el error, PID_3Step pasa de nuevo
al modo automático.
Si antes de producirse el error estaba activo el modo optimización inicial, optimización fina o medición del
tiempo de posicionamiento y se cumplía ActivateRecoverMode = TRUE, PID_3Step pasa al modo guar‐
dado en Mode.

0800

Error de tiempo de muestreo: PID_3Step no se llama dentro del tiempo de muestreo del OB de alarma
cíclica.
Si antes de producirse el error estaba activo el modo automático y se cumple ActivateRecoverMode =
TRUE, PID_3Step permanece en modo automático.
Si antes de producirse el error estaba activo el modo optimización inicial, optimización fina o medición del
tiempo de posicionamiento y se cumplía ActivateRecoverMode = TRUE, PID_3Step pasa al modo guar‐
dado en Mode.
Si este error se ha producido durante la simulación con PLCSIM, tenga en cuenta las indicaciones de
AUTOHOTSPOT.

1000

Valor no válido en el parámetro "Setpoint": El valor no tiene un formato numérico válido.
Si antes de producirse el error estaba activo el modo automático y se cumple ActivateRecoverMode =
TRUE, PID_3Step cambia al modo de operación "Aproximar al valor de salida sustitutivo con monitoriza‐
ción de errores" o "Monitorización de errores". En cuanto desaparece el error, PID_3Step pasa de nuevo
al modo automático.
Si antes de producirse el error estaba activo el modo optimización inicial, optimización fina o medición del
tiempo de posicionamiento y se cumplía ActivateRecoverMode = TRUE, PID_3Step pasa al modo guar‐
dado en Mode.

2000

Valor no válido en el parámetro Feedback_PER.
Compruebe si hay un error en la entrada analógica.
El actuador no puede desplazarse al valor de salida sustitutivo y permanece en la posición actual. En el
modo manual solo es posible modificar la posición del actuador con Manual_UP y Manual_DN, no con
ManualValue.
Si antes de aparecer el error estaba activo el modo automático, ActivateRecoverMode = TRUE y el error
ya no está presente, PID_3Step pasa de nuevo al modo automático.
Si antes de producirse el error estaba activo el modo optimización inicial, optimización fina o medición del
tiempo de posicionamiento y se cumplía ActivateRecoverMode = TRUE, PID_3Step pasa al modo guar‐
dado en Mode.

Programación del PLC
Manual de programación y manejo, 11/2019

3719

Instrucciones
4.1 Instrucciones
ErrorBits

Descripción

(DW#16#...)
4000

Valor no válido en el parámetro Feedback. El valor no tiene un formato numérico válido.
El actuador no puede desplazarse al valor de salida sustitutivo y permanece en la posición actual. En el
modo manual solo es posible modificar la posición del actuador con Manual_UP y Manual_DN, no con
ManualValue.
Si antes de aparecer el error estaba activo el modo automático, ActivateRecoverMode = TRUE y el error
ya no está presente, PID_3Step pasa de nuevo al modo automático.
Si antes de producirse el error estaba activo el modo optimización inicial, optimización fina o medición del
tiempo de posicionamiento y se cumplía ActivateRecoverMode = TRUE, PID_3Step pasa al modo guar‐
dado en Mode.

8000

Error en la realimentación digital de posición. Actuator_H = TRUE y Actuator_L = TRUE.
El actuador no puede desplazarse al valor de salida sustitutivo y permanece en la posición actual. El modo
manual no es posible en este estado.
Para poder sacar el actuador de ese estado, es necesario desactivar las "Señales de tope del actuador"
(Config.ActuatorEndStopOn = FALSE) o pasar al "Modo manual sin señales de tope" (Mode = 10).
Si antes de aparecer el error estaba activo el modo automático, ActivateRecoverMode = TRUE y el error
ya no está presente, PID_3Step pasa de nuevo al modo automático.
Si antes de producirse el error estaba activo el modo optimización inicial, optimización fina o medición del
tiempo de posicionamiento y se cumplía ActivateRecoverMode = TRUE, PID_3Step pasa al modo guar‐
dado en Mode.

10000

Valor no válido en el parámetro ManualValue. El valor no tiene un formato numérico válido.
El actuador no puede desplazarse al valor manual y permanece en la posición actual.
Especifique un valor válido en ManualValue o desplace el actuador en modo manual con Manual_UP y
Manual_DN.

20000

Valor no válido en la variable SavePosition. El valor no tiene un formato numérico válido.
El actuador no puede desplazarse al valor de salida sustitutivo y permanece en la posición actual.

40000

Valor no válido en el parámetro Disturbance. El valor no tiene un formato numérico válido.
Si antes de producirse el error estaba activo el modo automático y ActivateRecoverMode = TRUE, Dis‐
turbance se ajusta a cero. PID_3Step permanece en modo automático.
Si antes de producirse el error estaba activo el modo optimización inicial u optimización fina y se cumplía
ActivateRecoverMode = TRUE, PID_3Step pasa al modo guardado en Mode. Si en la fase actual Distur‐
bance no influye en el valor de salida, la optimización no se cancela.
Durante la medición del tiempo de posicionamiento el error no tiene ninguna influencia.

3720

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Variable ActivateRecoverMode V2
La variable ActivateRecoverMode determina el comportamiento en caso de error. El parámetro
Error indica si hay algún un error pendiente en ese momento. Si no persiste el error, se indica
Error = FALSE. El parámetro ErrorBits indica qué errores han ocurrido.
ATENCIÓN
Su instalación puede sufrir daños.
Si se cumple ActivateRecoverMode = TRUE, incluso al rebasar los límites del valor real
PID_3Step permanece en el modo automático. De este modo, su instalación puede sufrir
daños.
Configure un comportamiento en caso de error para su sistema regulado que proteja su
instalación de daños.

Modo automático
ActivateReco‐
verMode

Descripción

FALSE

En caso de error, PID_3Step pasa al modo de operación "Inactivo" o "Aproximar al valor de salida susti‐
tutivo". El regulador no se activa hasta que no se detecta un flanco descendente en Reset o un flanco
ascendente en ModeActivate.

TRUE

Si en el modo automático se producen errores con frecuencia, este ajuste empeorará el comportamiento
de regulación, ya que PID_3Step alterna entre el valor de salida calculado y el valor de salida sustitutivo
cada vez que se produce un error. Compruebe en tal caso el parámetro ErrorBits y elimine la causa de
error.
Si se producen uno o varios de los errores siguientes, PID_3Step permanece en modo automático:
● 0001h: El parámetro "Input" se encuentra fuera de los límites del valor real.
● 0800h: Error en tiempo de muestreo
● 40000h: Valor no válido en el parámetro Disturbance.
Si se produce uno o varios de los errores siguientes, PID_3Step pasa al modo operativo "Aproximar a valor
de salida sustitutivo con monitorización de errores" o "Monitorización de errores":
● 0002h: Valor no válido en el parámetro Input_PER.
● 0200h: Valor no válido en el parámetro Input.
● 0400h: Error al calcular el valor de salida.
● 1000h: Valor no válido en el parámetro Setpoint.
Si se producen uno o varios de los siguientes errores, PID_3Step ya no puede mover el actuador:
● 2000h: Valor no válido en el parámetro Feedback_PER.
● 4000h: Valor no válido en el parámetro Feedback.
● 8000h: Error en la realimentación digital de posición.
● 20000h: Valor no válido en la variable SavePosition. El valor no tiene un formato numérico válido.
Este comportamiento no depende de ErrorBehaviour.
En cuanto los errores dejan de estar activos, PID_3Step pasa de nuevo al modo automático.

Programación del PLC
Manual de programación y manejo, 11/2019

3721

Instrucciones
4.1 Instrucciones

Optimización inicial, optimización fina y medición del tiempo de posicionamiento
ActivateReco‐
verMode

Descripción

FALSE

En caso de error, PID_3Step pasa al modo de operación "Inactivo" o "Aproximar al valor de salida susti‐
tutivo". El regulador no se activa hasta que no se detecta un flanco descendente en Reset o un flanco
ascendente en ModeActivate.
Una vez realizada correctamente la medición del tiempo de posicionamiento, el regulador pasa al modo
de operación Inactivo.

TRUE

Si se produce el siguiente error, PID_3Step permanece en el modo activo:
● 0020h: La optimización inicial no está permitida durante la optimización fina.
Los siguientes errores se omiten:
● 10000h: Valor no válido en el parámetro ManualValue.
● 20000h: Valor no válido en la variable SavePosition.
Con todos los demás errores, PID_3Step interrumpe la optimización y cambia al modo desde el que se
inició la optimización.

Modo manual
En el modo manual, ActivateRecoverMode no tiene efecto.

Consulte también
Variables estáticas PID_3Step V2 (Página 3702)
Parámetros State y Mode V2 (Página 3713)

Variable Warning V2
Si hay varias advertencias presentes a la vez, los valores de las advertencias se muestran
sumados binariamente. Si se muestra p. ej. la advertencia 0005h, significa que las
advertencias 0001h y 0004h están presentes simultáneamente.
Warning

Descripción

(DW#16#...)
0000

No hay advertencias pendientes.

0001

Durante la optimización inicial no se encontró el punto de inflexión.

0004

La consigna ha sido limitada a los límites ajustados.

0008

En el método de cálculo seleccionado no se han definido todas las propiedades necesarias del sistema
regulado. En sustitución se calcularon los parámetros PID con el método TIR.TuneRule = 3.

0010

No se ha podido cambiar el modo de operación porque Reset = TRUE o ManualEnable = TRUE.

0020

El tiempo de muestreo del algoritmo PID está limitado por el tiempo de ciclo del OB invocante.
Para obtener mejores resultados, utilice tiempos de ciclo más cortos para el OB.

0040

El valor real ha rebasado por exceso uno de sus límites de advertencia.

0080

Valor no válido en Mode. El modo de operación no se conmuta.

0100

El valor manual ha sido limitado a los límites de la salida del regulador.

0200

No se admiten las reglas indicadas para la optimización. No se calculan parámetros PID.

3722

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Warning

Descripción

(DW#16#...)
0400

El tiempo de posicionamiento no se puede medir porque los ajustes del elemento final de control no
concuerdan con el método de medición seleccionado.

0800

En la medición del tiempo de posicionamiento, la diferencia entre la posición actual y el nuevo valor de
salida es insuficiente. Esto puede ocasionar resultados erróneos. La diferencia entre el valor de salida
actual y el nuevo valor de salida debe ser de al menos un 50% del rango de posicionamiento total.

1000

El valor de salida sustitutivo no puede alcanzarse porque está fuera de los límites del valor de salida.

2000

El actuador se mueve en un sentido durante un tiempo superior a Config.VirtualActuatorLimit × Re‐
tain.TransitTime. Compruebe si el actuador ha alcanzado una señal de tope.

Las siguientes advertencias se eliminan en cuanto la causa se soluciona:
● 0001h
● 0004h
● 0008h
● 0040h
● 0100h
● 2000h
Todas las demás advertencias se eliminan si hay un flanco ascendente en Reset o ErrorAck.

PID_3Step V1
Descripción PID_3Step V1
Descripción
Con la instrucción PID_3Step se puede configurar un regulador PID con autooptimización para
válvulas o elementos de control final con comportamiento integrador.
Se dispone de los modos de operación siguientes:
● Inactivo
● Optimización inicial
● Optimización fina
● Modo automático
● Modo manual
● Aproximar al valor de salida sustitutivo
● Medición del tiempo de posicionamiento
● Aproximar al valor de salida sustitutivo con monitorización de errores
● Monitorización de errores
Los modos de operación se describen detalladamente en el parámetro State.

Programación del PLC
Manual de programación y manejo, 11/2019

3723

Instrucciones
4.1 Instrucciones

Algoritmo PID
PID_3Step es un regulador PIDT1 con Anti-Windup y ponderación de la acción P y D. El valor
de salida se calcula con la siguiente fórmula.

1

[

Δ y = K p · s · (b · w - x) +

3724

TI · s

(w - x) +

TD · s
a · TD · s + 1

Δy

Valor de salida del algoritmo PID

Kp

Ganancia proporcional

s

Operador laplaciano

b

Ponderación de la acción P

w

Consigna

x

Valor real

TI

Tiempo de integración

(c · w - x)

]

a

Coeficiente para el retardo de la acción derivada (T1 = a x TD)

TD

Tiempo derivativo

c

Ponderación de la acción D

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Diagrama de bloques sin realimentación de posición
,QSXW:DUQLQJB+

39B$/50

,QSXW:DUQLQJB/
,QSXW3HU2Q
,QSXWB3(5

&53B,1





)DF



,QSXW

6HWSRLQW

$QWL:LQGXS

6FDOH
,QW

3,'7
$QWL:LQGXS





˂Y


/LPLW



2XWSXW3HU2Q













0DQXDO(QDEOH
0DQXDO9DOXH

)$&



5RFB/LP



2XWSXW3HU2Q



&53B287

/LPLW

2XWSXWB3(5






$GHDGB%

0DQXDO(QDEOH
0DQXDOB83
7KU6WS

0DQXDOB'1



2XWSXWB83

3XOVH2XW

2XWSXWB'1















Programación del PLC
Manual de programación y manejo, 11/2019






3725

Instrucciones
4.1 Instrucciones

Diagrama de bloques con realimentación de posición
39B$/50

,QSXW:DUQLQJB+
,QSXW:DUQLQJB/

,QSXW3HU2Q
,QSXWB3(5





,QW



,QSXW
6HWSRLQW

$QWL:LQGXS

6FDOH

&53B,1

/LPLW



3,'7
$QWL:LQGXS

)DF



/LPLW

;



0DQXDO(QDEOH

˂9

0DQXDO9DOXH
)HHGEDFN3HU2Q
)HHGEDFNB3(5

6FDOH

&53B,1






)HHGEDFN

2XWSXW3HU2Q
&53B287













0DQXDO(QDEOH
0DQXDOB83

$GHDGB%

2XWSXWB3(5



7KU6WS
0DQXDOB'1



3XOVH2XW

2XWSXWB83
2XWSXWB'1




3726

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Diagrama de bloques PIDT1 con Anti-Windup
E

6HWSRLQW Z



'7

F

'

.

3

˂\



'HDGB%





,

7L
6FDOHG,QSXW [

)DF7W

$QWL:LQGXS

Llamada
PID_3Step se llama en un periodo constante del tiempo de ciclo del OB invocante
(preferentemente en un OB de alarma cíclica).

Cargar en dispositivo
Los valores actuales de variables remanentes solo se actualizan si se carga PID_3Step por
completo.
AUTOHOTSPOT

Arranque
PID_3Step arranca simultáneamente con la CPU en el último modo de operación activo. Para
dejar PID_3Step en el modo de operación "Inactivo", ajuste RunModeByStartup = FALSE.

Comportamiento en caso de error
Cuando ocurren errores, estos se indican en el parámetro Error. El comportamiento de
PID_3Step se configura con las variables ErrorBehaviour y ActivateRecoverMode.
Error‐
Behaviour

ActivateReco‐
verMode

Configuración del ajuste del
actuador
Poner Output a

Comportamiento

0

FALSE

Valor de salida actual

Cambio al modo de operación "Inactivo"
(Mode = 0)

0

TRUE

Valor de salida actual por la
duración del error

Cambio al modo de operación "Monitori‐
zación de errores" (Mode = 7)

Programación del PLC
Manual de programación y manejo, 11/2019

3727

Instrucciones
4.1 Instrucciones
Error‐
Behaviour

ActivateReco‐
verMode

Configuración del ajuste del
actuador
Poner Output a

Comportamiento

1

FALSE

Valor de salida sustitutivo

Cambio al modo de operación "Aproxi‐
mar al valor de salida sustitutivo" (Mo‐
de = 5)
Cambio al modo de operación "Inactivo"
(Mode = 0)

1

TRUE

Valor de salida sustitutivo
mientras dure el error

Cambio al modo de operación "Aproxi‐
mar a valor de salida sustitutivo con mo‐
nitorización de errores" (Mode = 8)
Cambio al modo de operación "Monitori‐
zación de errores" (Mode = 7)

El parámetro ErrorBits indica qué errores han ocurrido.

Consulte también
Parámetros State y Retain.Mode V1 (Página 3743)
Parámetro ErrorBits V1 (Página 3751)

Funcionamiento PID_3Step V1
Monitorizar límites del valor real
En las variables Config.InputUpperLimit y Config.InputLowerLimit es posible definir un límite
superior y uno inferior del valor real. Si el valor real se encuentra fuera de estos límites, ocurre
un error (ErrorBits = 0001hex).
En las variables Config.InputUpperWarning y Config.InputLowerWarning se definen un límite
de advertencia superior y uno inferior del valor real. Si el valor real se encuentra fuera de estos
límites de advertencia, se produce una advertencia (Warnings = 0040hex) y el parámetro de
salida InputWarning_H o InputWarning_L adopta el valor TRUE.

Limitar consigna
En las variables Config.SetpointUpperLimit y Config.SetpointLowerLimit es posible definir un
límite superior y uno inferior para la consigna. PID_3Step limita la consigna automáticamente
a los límites del valor real. Es posible limitar la consigna a un rango más pequeño. PID_3Step
verifica si dicho rango está dentro de los límites del valor real. Si la consigna está fuera de estos
límites, se utilizan los límites superior e inferior como consigna y el parámetro de salida
SetpointLimit_H o SetpointLimit_L adopta el valor TRUE.
La consigna se limita en todos los modos de operación.

3728

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Limitar el valor de salida
En las variables Config.OutputUpperLimit y Config.OutputLowerLimit se define un límite
superior y uno inferior del valor de salida. Los límites del valor de salida deben encontrarse
dentro del "Tope inferior" o el "Tope superior".
● Tope superior: Config.FeedbackScaling.UpperPointOut
● Tope inferior: Config.FeedbackScaling.LowerPointOut
Rige:
UpperPointOut ≥ OutputUpperLimit > OutputLowerLimit ≥ LowerPointOut
Los valores válidos para el "Tope superior" y el "Tope inferior" dependen de:
● FeedbackOn
● FeedbackPerOn
● OutputPerOn
OutputPerOn FeedbackOn

FeedbackPerOn LowerPointOut

UpperPointOut

FALSE

FALSE

FALSE

No ajustable (0.0 %)

No ajustable (100.0 %)

FALSE

TRUE

FALSE

-100.0 % o 0.0 %

0.0 % o +100.0 %

FALSE

TRUE

TRUE

-100.0 % o 0.0 %

0.0 % o +100.0 %

TRUE

FALSE

FALSE

No ajustable (100.0 %)

No ajustable (100.0 %)

TRUE

TRUE

FALSE

-100.0 % o 0.0 %

0.0 % o +100.0 %

TRUE

TRUE

TRUE

-100.0 % o 0.0 %

0.0 % o +100.0 %

Si OutputPerOn = FALSE y FeedbackOn = FALSE, no es posible limitar el valor de salida. Las
salidas digitales deben desactivarse en Actuator_H = TRUE o Actuator_L = TRUE o después
de un tiempo de desplazamiento del 110% del tiempo de posicionamiento del motor.
El valor de salida asciende a 27648 con un 100 % y a -27648 con un -100 %. PID_3Step debe
poder cerrar la válvula completamente. Por lo tanto el cero debe estar contenido en los límites
del valor de salida.
Nota
Uso con dos o más actuadores
PID_3 Step no es adecuado para el uso con dos o más actuadores (p. ej., en aplicaciones de
calefacción/refrigeración), pues los actuadores diferentes necesitan también parámetros PID
diferentes para conseguir un buen comportamiento de regulación.

Valor de salida sustitutivo
En caso de error, PID_3Step puede emitir un valor de salida sustitutivo y conducir el elemento
final de control a una posición segura que se especifica en la variable SavePosition. El valor de
salida sustitutivo debe encontrarse dentro de los límites del valor de salida.

Programación del PLC
Manual de programación y manejo, 11/2019

3729

Instrucciones
4.1 Instrucciones

Vigilar la validez de las señales
Se vigila la validez de los valores de los siguientes parámetros:
● Setpoint
● Input
● Input_PER
● Feedback
● Feedback_PER
● Output

Vigilar el tiempo de muestreo PID_3Step
En el caso ideal, el tiempo de muestreo equivale al tiempo de ciclo del OB invocante. La
instrucción PID_3Step mide en cada caso el tiempo que transcurre entre dos llamadas. Este
es el tiempo de muestreo actual. Con cada cambio de modo de operación y en el primer
arranque se calcula la media de los 10 primeros tiempos de muestreo. Si el tiempo de muestreo
actual se desvía mucho de este valor medio, ocurre un error (ErrorBits = 0800 hex).
Durante la optimización PID_3Step cambia al modo de operación "Inactivo" cuando se dan las
siguientes condiciones:
● Valor medio nuevo >= 1,1 veces el valor medio antiguo
● Valor medio nuevo <= 0,9 veces el valor medio antiguo
PID_3Step cambia al modo de operación "Inactivo" cuando se dan las siguientes condiciones:
● Valor medio nuevo >= 1,5 veces el valor medio antiguo
● Valor medio nuevo <= 0,5 veces el valor medio antiguo

Tiempo de muestreo del algoritmo PID
Dado que el sistema regulado necesita cierto tiempo para responder a un cambio del valor de
salida, no es razonable calcular este valor en cada ciclo. El tiempo de muestreo del algoritmo
PID es el tiempo entre dos cálculos del valor de salida. Este se determina durante la
optimización y se redondea a un múltiplo del tiempo de ciclo. Todas las demás funciones de
PID_3Step se ejecutan con cada llamada.

Medir el tiempo de posicionamiento del motor
El tiempo de posicionamiento del motor es el tiempo en segundos que requiere el motor para
desplazar el elemento final de control del estado cerrado al estado abierto. El elemento final de
control se mueve en un sentido a como máximo el 110% del tiempo de posicionamiento del
motor. PID_3Step necesita un tiempo de posicionamiento del motor lo más preciso posible
para alcanzar un buen resultado de regulación. Los datos de la documentación del elemento
final de control son valores medios para este tipo de elemento final de control. El valor puede
variar para el elemento final de control que se use en cada momento. El tiempo de
posicionamiento del motor puede medirse durante la puesta en servicio. Los límites del valor
de salida no se tienen en cuenta durante la medición del tiempo de posicionamiento del motor.
El actuador puede desplazarse hasta el tope superior o inferior.

3730

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
El tiempo de posicionamiento del motor se tiene en cuenta tanto en el cálculo del valor de
salida analógico como en el cálculo de los valores de salida digitales. Es necesario para el
correcto funcionamiento, sobre todo, durante la optimización automática y el comportamiento
Anti-Windup. Por tanto, configure el tiempo de posicionamiento del motor con el valor que
requiera el motor para desplazar el actuador del estado cerrado al estado abierto.
Si en su proceso no actúa ningún tiempo de posicionamiento del motor relevante (p. ej., con
electroválvulas), de forma que el valor de salida actúa directamente y en toda su magnitud
sobre el proceso, utilice PID_Compact en su lugar.

Sentido de regulación
Por lo general, un aumento del valor de salida debe lograr un aumento del valor real. En este
caso, se habla de un sentido de regulación normal. Para refrigeración o para las regulaciones
de desagües puede ser necesario invertir el sentido de regulación. PID_3Step no funciona con
ganancia proporcional negativa. Si InvertControl = TRUE, un error de regulación ascendente
provocará una reducción del valor de salida. El sentido de regulación se tiene en cuenta
también durante la optimización inicial y la optimización fina.

Parámetros de entrada PID_3Step V1
Tabla 4-67
Parámetro

Tipo de da‐ Ajuste prede‐
tos
terminado

Descripción

Setpoint

REAL

0.0

Consigna del regulador PID en modo automático

Input

REAL

0.0

Una variable del programa de usuario se utiliza como origen del
valor real.
Si utiliza el parámetro Input, debe cumplirse lo siguiente: Con‐
fig.InputPerOn = FALSE.

Input_PER

WORD

W#16#0

Una entrada analógica se utiliza como origen del valor real.
Si utiliza el parámetro Input_PER, debe cumplirse lo siguiente:
Config.InputPerOn = TRUE.

Actuator_H

BOOL

FALSE

Realimentación de posicionamiento digital de la válvula para el
tope superior
Si Actuator_H = TRUE la posición de la válvula se encuentra en
el tope superior y la válvula ya no se desplaza en ese sentido.

Actuator_L

BOOL

FALSE

Realimentación de posición digital de la válvula para el tope
inferior
Si Actuator_L = TRUE la posición de la válvula se encuentra en
el tope inferior y la válvula ya no se desplaza en ese sentido.

Feedback

REAL

0.0

Realimentación de posición de la válvula
Si utiliza el parámetro Feedback, debe cumplirse lo siguiente:
Config.FeedbackPerOn = FALSE.

Programación del PLC
Manual de programación y manejo, 11/2019

3731

Instrucciones
4.1 Instrucciones
Parámetro

Tipo de da‐ Ajuste prede‐
tos
terminado

Descripción

Feedback_PER

WORD

Realimentación de posición analógica de una válvula

W#16#0

Si utiliza el parámetro Feedback_PER, debe cumplirse lo si‐
guiente: Config.FeedbackPerOn = TRUE.
Feedback_PER se escala a partir de las variables:
● Config.FeedbackScaling.LowerPointIn
● Config.FeedbackScaling.UpperPointIn
● Config.FeedbackScaling.LowerPointOut
● Config.FeedbackScaling.UpperPointOut
ManualEnable

BOOL

FALSE

● El flanco FALSE -> TRUE selecciona el modo de operación
"Modo manual", State = 4, Retain.Mode no cambia.
● El flanco TRUE -> FALSE selecciona el último modo de
operación activo
La operación ManualEnable = TRUE no provoca un cambio en
Retain.Mode. Hasta que no se llega al flanco TRUE -> FALSE
en ManualEnable , no se tiene en cuenta la modificación de
Retain.Mode.
PID_3Step V1.1Si al arrancar la CPU ManualEnable = TRUE,
PID_3Step arranca en modo manual. No es necesario que se
produzca un flanco ascendente (FALSE > TRUE) en ManualE‐
nable.
PID_3Step V1.0
Al arrancar la CPU, PID_3Step únicamente pasa al modo ma‐
nual si se detecta un flanco ascendente (FALSE->TRUE) en
ManualEnable . Si no se detecta un flanco ascendente,
PID_3Step arranca en el último modo de operación en el que
ManualEnable era FALSE.

ManualValue

REAL

0.0

En el modo manual se especifica la posición absoluta de la
válvula. ManualValue solo se evalúa si se utiliza OutputPer o si
se dispone de una realimentación de posición.

Manual_UP

BOOL

FALSE

En el modo manual cada flanco ascendente abre la válvula un
5 % del rango de posicionamiento total o durante el tiempo
mínimo de posicionamiento del motor. Manual_UP sólo se eva‐
lúa si ni se utiliza Output_PER ni hay disponible una realimen‐
tación de posición.

3732

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Tipo de da‐ Ajuste prede‐
tos
terminado

Descripción

Manual_DN

BOOL

FALSE

En el modo manual cada flanco ascendente cierra la válvula un
5 % del rango de posicionamiento total o durante el tiempo
mínimo de posicionamiento del motor. Manual_DN sólo se eva‐
lúa si ni se utiliza Output_PER ni hay disponible una realimen‐
tación de posición.

Reset

BOOL

FALSE

Realiza un rearranque completo del regulador.
● Flanco FALSE -> TRUE
–

Cambio al modo de operación "Inactivo"

–

ErrorBits y Warning se desactivan

–

Los valores intermedios de la regulación se desactivan
(los parámetros PID se mantienen)

● Flanco TRUE -> FALSE
–

Cambio al último modo de operación activo

–

Si antes estaba activo el modo automático, la
conmutación al modo automático tiene lugar sin
discontinuidades.

Parámetros de salida PID_3Step V1
Tabla 4-68
Parámetro

Tipo de da‐ Ajuste prede‐
tos
terminado

Descripción

ScaledInput

REAL

0.0

Valor real escalado

ScaledFeedback

REAL

0.0

Realimentación de posición escalada
Con actuadores sin realimentación de posición, ScaledFeed‐
back indica la posición del actuador de modo muy impreciso.
En tal caso, ScaledFeedback solo puede usarse para una es‐
timación aproximada de la posición actual.

Output_UP

BOOL

FALSE

Valor de salida digital para abrir la válvula
Si Config.OutputPerOn = FALSE, se utiliza el parámetro Out‐
put_UP.

Output_DN

BOOL

FALSE

Valor de salida digital para cerrar la válvula
Si Config.OutputPerOn = FALSE, se utiliza el parámetro Out‐
put_DN.

Output_PER

WORD

W#16#0

Valor de salida analógico
Si Config.OutputPerOn = TRUE, se utiliza Output_PER.
Utilice Output_PER si desea utilizar como actuador una válvula
que se activa a través de una salida analógica y se controla con
una señal continua, como puede ser 0 a 10 V, 4 a 20 mA.
El valor de Output_PER se corresponde con la posición de
destino de la válvula, p. ej., Output_PER = 13824, cuando la
válvula debe abrirse hasta un 50 %.

Programación del PLC
Manual de programación y manejo, 11/2019

3733

Instrucciones
4.1 Instrucciones
Parámetro

Tipo de da‐ Ajuste prede‐
tos
terminado

Descripción

SetpointLimit_H

BOOL

Cuando SetpointLimit_H = TRUE, significa que se ha alcanza‐
do el límite superior absoluto de la consigna. En la CPU la con‐
signa se limita al límite superior absoluto configurado para la
consigna. Como límite superior de la consigna se preasigna el
límite superior absoluto configurado para el valor real.

FALSE

Si se configura Config.SetpointUpperLimit a un valor que se
encuentre dentro de los límites del valor real, este valor se uti‐
liza como límite superior de la consigna.
SetpointLimit_L

BOOL

FALSE

Cuando SetpointLimit_L = TRUE, significa que se ha alcanzado
el límite inferior absoluto de la consigna. En la CPU la consigna
se limita al límite inferior absoluto configurado para la consigna.
Como límite inferior de la consigna se preasigna el límite infe‐
rior absoluto configurado para el valor real.
Si se configura Config.SetpointLowerLimit a un valor que se
encuentre dentro de los límites del valor real, este valor se uti‐
liza como límite inferior de la consigna.

InputWarning_H

BOOL

FALSE

Cuando InputWarning_H = TRUE, significa que se ha alcanza‐
do o rebasado el límite superior de advertencia del valor real.

InputWarning_L

BOOL

FALSE

Cuando InputWarning_L = TRUE, significa que se ha alcanza‐
do o rebasado por defecto el límite inferior de advertencia del
valor real.

State

INT

0

El parámetro State (Página 3743) indica el modo de operación
actual del regulador PID. El modo de operación se cambia con
la variable Retain.Mode.
● State = 0: Inactivo
● State = 1: Optimización inicial
● State = 2: Optimización fina
● State = 3: Modo automático
● State = 4: Modo manual
● State = 5: Aproximación al valor de salida sustitutivo
● State = 6: Medición del tiempo de posicionamiento
● State = 7: Monitorización de errores
● State = 8: Aproximación al valor de salida sustitutivo con
monitorización de errores

Error

BOOL

FALSE

Si Error = TRUE, existe al menos un aviso de error.

ErrorBits

DWORD

DW#16#0

El parámetro ErrorBits (Página 3751) muestra los avisos de
error.

Consulte también
Parámetros State y Retain.Mode V1 (Página 3743)
Parámetro ErrorBits V1 (Página 3751)

3734

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Variables estáticas PID_3Step V1
Nota
No se deben modificar las variables que no aparecen listadas. Estas solo se utilizan
internamente.
Modifique las variables marcadas con (1) solo en el modo de operación "Inactivo" para evitar un
comportamiento erróneo del regulador PID. El modo de operación "Inactivo" se fuerza con el
valor "0" en la variable "Retain.Mode".

Tabla 4-69
Variable

Tipo de
datos

Ajuste
predeter‐
minado

Descripción

ActivateRecoverMode

BOOL

TRUE

La variable ActivateRecoverMode (Página 3753) determina el com‐
portamiento en caso de error.

RunModeByStartup

BOOL

TRUE

Activar último modo de operación después del rearranque completo
de la CPU
Si RunModeByStartup = TRUE, el regulador regresa al último modo
de operación activo tras el arranque de la CPU.
Si RunModeByStartup = FALSE, el regulador permanece inactivo
tras un arranque de la CPU.

PhysicalUnit

INT

0

Unidad física del valor real y de la consigna, p. ej. ºC o ºF.

PhysicalQuantity

INT

0

Unidad física del valor real y de la consigna, p. ej. temperatura

ErrorBehaviour

INT

0

Si ErrorBehaviour = 0, en caso de error la válvula permanece en la
posición actual y el regulador cambia directamente al modo de ope‐
ración "Inactivo" o "Monitorización de errores".
Si ErrorBehaviour = 1, en caso de error el actuador se desplaza al
valor de salida sustitutivo y solo entonces pasa al modo de opera‐
ción "Inactivo" o "Monitorización de errores".
Si se producen los errores siguientes, la válvula ya no se puede
desplazar a un valor de salida sustitutivo configurado.
● 2000h: Valor no válido en el parámetro Feedback_PER.
● 4000h: Valor no válido en el parámetro Feedback.
● 8000h: Error en la realimentación digital de posición.

Warning

DWORD

DW#16#
0

La variable Warning (Página 3743) muestra las advertencias desde
Reset o desde el último cambio de modo de operación.
Las advertencias cíclicas (por ejemplo, advertencia del valor real) se
muestran mientras sigue existiendo la causa de la advertencia. Una
vez solucionada la causa, se borran automáticamente. Las adver‐
tencias no cíclicas (como es la relativa al punto de inflexión no en‐
contrado) se mantienen y se borran como se hace con los errores.

SavePosition

REAL

0.0

Valor de salida sustitutivo
Si ErrorBehaviour = 1, en caso de error el elemento final de control
se desplaza a una posición segura para la instalación y solo enton‐
ces se cambia al modo de operación "Inactivo".

Programación del PLC
Manual de programación y manejo, 11/2019

3735

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste
predeter‐
minado

Descripción

CurrentSetpoint

REAL

0.0

Consigna activa actualmente. Este valor se congela al iniciarse la
optimización.

REAL

0.0

Progreso de la optimización en porcentaje (0,0 - 100,0)

BOOL

TRUE

Si InputPerOn = TRUE, se utiliza el parámetro Input_PER. Si Input‐
PerOn = FALSE, se utiliza el parámetro Input.

Config.OutputPerOn(1)

BOOL

FALSE

Si OutputPerOn = TRUE, se utiliza el parámetro Output_PER. Si
OutputPerOn = FALSE, se utilizan los parámetros Ouput_UP y Out‐
put_DN.

Config.LoadBackUp

BOOL

FALSE

Si LoadBackUp = TRUE, se carga nuevamente el último juego de
parámetros PID. El juego se guardó antes de la última optimización.
LoadBackUp se ajusta automáticamente de nuevo a FALSE.

Config.InvertControl(1)

BOOL

FALSE

Inversión del sentido de regulación

Progress
Config.InputPerOn

(1)

Si InvertControl = TRUE, un error de regulación ascendente provo‐
cará una reducción del valor de salida.
Config.FeedbackOn(1)

BOOL

FALSE

Si FeedbackOn = FALSE, se simula una realimentación de posición.
Si FeedbackOn = TRUE, se activa por lo general la realimentación
de posición.

Config.FeedbackPerOn(1)

BOOL

FALSE

FeedbackPerOn solo está activo cuando FeedbackOn = TRUE.
Si FeedbackPerOn = TRUE, se utiliza la entrada analógica para la
realimentación de posición (parámetro Feedback_PER).
Si FeedbackPerOn = FALSE, se utiliza el parámetro Feedback para
la realimentación de posición.

Config.ActuatorEndStopOn(1)

BOOL

FALSE

Si ActuatorEndStopOn = TRUE, se tiene en cuenta la realimenta‐
ción de posición digital Actuator_L y Actuator_H .

Config.InputUpperLimit(1)

REAL

120.0

Límite superior del valor real
En la entrada de periferia, el valor real puede encontrarse como
máximo un 18% por encima del rango normalizado (margen de sa‐
turación). No se comunica ningún error más debido al rebase por
exceso del "Límite superior del valor real". Únicamente se detectan
la rotura de hilo y el cortocircuito y PID_3Step se comporta según la
reacción configurada en caso de error.
InputUpperLimit > InputLowerLimit

Config.InputLowerLimit

(1)

REAL

0.0

Límite inferior del valor real
InputLowerLimit < InputUpperLimit

Config.InputUpperWarning(1)

REAL

+3.40282 Límite superior de advertencia del valor real
2e+38
Si se configura InputUpperWarning a un valor que se encuentre
fuera de los límites del valor real, el límite superior absoluto confi‐
gurado para el valor real se utiliza como límite superior de adver‐
tencia.
Si se configura InputUpperWarning a un valor que se encuentre
dentro de los límites del valor real, este valor se utiliza como límite
superior de advertencia.
InputUpperWarning > InputLowerWarning
InputUpperWarning ≤ InputUpperLimit

3736

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste
predeter‐
minado

Descripción

Config.InputLowerWarning(1)

REAL

-3.40282
2e+38

Límite inferior de advertencia del valor real
Si se configura InputLowerWarning a un valor que se encuentre
fuera de los límites del valor real, el límite inferior absoluto configu‐
rado para el valor real se utiliza como límite inferior de advertencia.
Si se configura InputLowerWarning a un valor que se encuentre
dentro de los límites del valor real, este valor se utiliza como límite
inferior de advertencia.
InputLowerWarning < InputUpperWarning
InputLowerWarning ≥ InputLowerLimit

Config.OutputUpperLimit

(1)

REAL

100.0

Límite superior del valor de salida
El rango de valores siguiente es admisible:
UpperPointOut ≥ OutputUpperLimit > OutputLowerLimit
Para más detalles ver OutputLowerLimit

Config.OutputLowerLimit(1)

REAL

0.0

Límite inferior del valor de salida
El rango de valores siguiente es admisible:
OutputUpperLimit > OutputLowerLimit ≥ LowerPointOut
Si se usa Output_PER, el límite de valor de salida -100 % se co‐
rresponde con el valor Output_PER = -27648; 100 % se correspon‐
den con el valor Output_PER = 27648.
Si OutputPerOn = FALSE y FeedbackOn = FALSE, OutputLowerLi‐
mit y OutputUpperLimit no se evalúan. Seguidamente, Output_UP y
Output_DN se restablecen con Actuator_H = TRUE o Actua‐
tor_L = TRUE (si ActuatorEndStopOn = TRUE) o tras un tiempo de
desplazamiento de 110 % * Config.TransitTime (si ActuatorEndSto‐
pOn = FALSE).

Config.SetpointUpperLimit(1)

REAL

+3.40282 Límite superior de la consigna
2e+38
Si se configura SetpointUpperLimit a un valor que se encuentre fue‐
ra de los límites del valor real, el límite superior absoluto configurado
para el valor real se preasigna como límite superior de la consigna.
Si se configura SetpointUpperLimit a un valor que se encuentre
dentro de los límites del valor real, este valor se utiliza como límite
superior de la consigna.

Config.SetpointLowerLimit(1)

REAL

Límite inferior de la consigna
3.402822 Si se configura SetpointLowerLimit a un valor que se encuentre
e+38
fuera de los límites del valor real, el límite inferior absoluto configu‐
rado para el valor real se preasigna como límite inferior de la con‐
signa.
Si se configura SetpointLowerLimit a un valor que se encuentre
dentro de los límites del valor real, este valor se utiliza como límite
inferior de la consigna.

Config.MinimumOnTime(1)

REAL

0.0

Tiempo conexión mín.
Tiempo en segundos, que debe estar conectado como mínimo el
elemento final de control.
Config.MinimumOnTime solo es efectivo si se utilizan Output_UP y
Output_DN (Config.OutputPerOn = FALSE).

Programación del PLC
Manual de programación y manejo, 11/2019

3737

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste
predeter‐
minado

Config.MinimumOffTime(1)

REAL

0.0

Descripción

Tiempo OFF mín.
Tiempo en segundos, que debe estar desconectado como mínimo
el elemento final de control.
Config.MinimumOffTime solo es efectivo si se utilizan Output_UP y
Output_DN (Config.OutputPerOn = FALSE).

Config.TransitTime(1)

REAL

30.0

Tiempo de posicionamiento del motor
Tiempo en segundos que requiere el elemento final de control para
desplazar la válvula del estado cerrado al estado abierto.

Config.InputScaling.Upper‐
PointIn(1)

REAL

Config.InputScaling.Lower‐
PointIn(1)

REAL

Config.InputScaling.Upper‐
PointOut(1)

REAL

Config.InputScaling.Lower‐
PointOut(1)

REAL

Config.FeedbackScaling.Up‐
perPointIn(1)

REAL

Config.FeedbackScaling.Lo‐
werPointIn(1)

REAL

Config.FeedbackScaling.Up‐
perPointOut(1)

REAL

27648.0

Escalado Input_PER arriba
Mediante los dos pares de valores UpperPointOut, UpperPointIn y
LowerPointOut, LowerPointIn de la estructura InputScaling, In‐
put_PER se convierte en porcentaje.

0.0

Escalado Input_PER abajo
Mediante los dos pares de valores UpperPointOut, UpperPointIn y
LowerPointOut, LowerPointIn de la estructura InputScaling, In‐
put_PER se convierte en porcentaje.

100.0

Valor real superior escalado
Mediante los dos pares de valores UpperPointOut, UpperPointIn y
LowerPointOut, LowerPointIn de la estructura InputScaling, In‐
put_PER se convierte en porcentaje.

0.0

Valor real inferior escalado
Mediante los dos pares de valores UpperPointOut, UpperPointIn y
LowerPointOut, LowerPointIn de la estructura InputScaling, In‐
put_PER se convierte en porcentaje.

27648.0

Escalado Feedback_PER arriba
Mediante los dos pares de valores UpperPointOut, UpperPointIn y
LowerPointOut, LowerPointIn de la estructura FeedbackScaling,
Feedback_PER se convierte en porcentaje.

0.0

Escalado Feedback_PER abajo
Mediante los dos pares de valores UpperPointOut, UpperPointIn y
LowerPointOut, LowerPointIn de la estructura FeedbackScaling,
Feedback_PER se convierte en porcentaje.

100.0

Tope superior
Mediante los dos pares de valores UpperPointOut, UpperPointIn y
LowerPointOut, LowerPointIn de la estructura FeedbackScaling,
Feedback_PER se convierte en porcentaje.
El rango de valores permitido depende de la configuración.
● FeedbackOn = FALSE:
UpperPointOut = 100.0
● FeedbackOn = TRUE:
UpperPointOut = 100.0 o 0.0
UpperPointOut ≠ LowerPointOut

3738

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste
predeter‐
minado

Config.FeedbackScaling.Lo‐
werPointOut(1)

REAL

0.0

Descripción

Tope inferior
Mediante los dos pares de valores UpperPointOut, UpperPointIn y
LowerPointOut, LowerPointIn de la estructura FeedbackScaling,
Feedback_PER se convierte en porcentaje.
El rango de valores permitido depende de la configuración.
● FeedbackOn = FALSE:
LowerPointOut = 0.0
● FeedbackOn = TRUE:
LowerPointOut = 0.0 o -100.0
LowerPointOut ≠ UpperPointOut

GetTransitTime.InvertDirec‐
tion

BOOL

FALSE

Si InvertDirection = FALSE, se abre completamente la válvula para
determinar el tiempo de posicionamiento, luego se cierra y se vuelve
a abrir.
Si InvertDirection = TRUE, se cierra completamente la válvula, lue‐
go se abre y se vuelve a cerrar.

GetTransitTime.SelectFeed‐
back

BOOL

FALSE

Si SelectFeedback = TRUE, durante la medición del tiempo de po‐
sicionamiento se tendrá en cuenta Feedback_PER o Feedback.
Si SelectFeedback = FALSE, durante la medición del tiempo de
posicionamiento se tendrán en cuenta Actuator_H y Actuator_L.

GetTransitTime.Start

BOOL

FALSE

Si Start = TRUE, se inicia la medición del tiempo de posicionamiento.

GetTransitTime.State

INT

0

Fase actual de la medición del tiempo de posicionamiento
● State = 0: Inactivo
● State = 1: Abrir válvula completamente
● State = 2: Cerrar válvula completamente
● State = 3: Desplazar válvula a la posición de destino
(NewOutput)
● State = 4: Tiempo de posicionamiento medido correctamente
● State = 5: Medición del tiempo de posicionamiento cancelada

GetTransitTime.NewOutput

REAL

0.0

Posición de destino para la medición del tiempo de posicionamiento
con realimentación de posición
La posición de destino debe encontrarse dentro de los topes supe‐
rior e inferior. La diferencia entre NewOutput y ScaledFeedback de‐
be estar al menos por encima del 50% del margen de ajuste admi‐
sible.

CycleTime.StartEstimation

BOOL

TRUE

Si StartEstimation = TRUE, se inicia la medición del tiempo de
muestreo PID_3Step. Una vez finalizada la medición, CycleTi‐
me.StartEstimation = FALSE.

CycleTime.EnEstimation

BOOL

TRUE

Si EnEstimation = TRUE, se calcula el tiempo de muestreo
PID_3Step.

Programación del PLC
Manual de programación y manejo, 11/2019

3739

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste
predeter‐
minado

Descripción

CycleTime.EnMonitoring

BOOL

TRUE

Si EnMonitoring = TRUE, se vigila el tiempo de muestreo
PID_3Step. Si no es posible ejecutar PID_3Step dentro del tiempo
de muestreo, se emite el error 0800h y se cambia el modo de ope‐
ración. El modo de operación al que se cambie depende de Acti‐
vateRecoverMode y de ErrorBehaviour.
Si EnMonitoring = FALSE, el tiempo de muestreo PID_3Step no se
vigila, el error 0800h no se emite y el modo de operación no se
cambia.

CycleTime.Value(1)

REAL

0.1

Tiempo de muestreo PID_3Step en segundos
CycleTime.Value se determina automáticamente y equivale normal‐
mente al tiempo de ciclo del OB invocante.

CtrlParamsBackUp.SetByUser BOOL

FALSE

Valor almacenado de Retain.CtrlParams.SetByUser
Los valores de la estructura CtrlParamsBackUp pueden volverse a
cargar con Config.LoadBackUp = TRUE.

CtrlParamsBackUp.Gain

REAL

1.0

Ganancia proporcional almacenada

CtrlParamsBackUp.Ti

REAL

20.0

Tiempo de integración almacenado

CtrlParamsBackUp.Td

REAL

0.0

Tiempo derivativo almacenado

CtrlParamsBackUp.TdFiltRa‐
tio

REAL

0.0

Coeficiente almacenado para el retardo de la acción derivada

CtrlParamsBackUp.PWeigh‐
ting

REAL

0.0

Ponderación almacenada de la acción P

CtrlParamsBackUp.DWeigh‐
ting

REAL

0.0

Ponderación almacenada de la acción D

CtrlParamsBackUp.Cycle

REAL

1.0

Tiempo de muestreo almacenado del algoritmo PID

CtrlParamsBackUp.Input‐
DeadBand

REAL

0.0

Ancho de zona muerta almacenado del error de regulación

PIDSelfTune.SUT.Calculate‐
SUTParams

BOOL

FALSE

Las propiedades del sistema regulado se almacenan durante la op‐
timización. Si CalculateSUTParams = TRUE, se vuelven a calcular
los parámetros PID basándose en estas propiedades. Los paráme‐
tros PID se calculan según el método ajustado en TuneRuleSUT.
CalculateSUTParams se ajusta a FALSE después del cálculo.

3740

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste
predeter‐
minado

Descripción

PIDSelfTune.SUT.TuneRule‐
SUT

INT

1

Calcular los parámetros durante la optimización inicial según el mé‐
todo:
● TuneRuleSUT = 0: PID rápido I (comportamiento de regulación
más rápido con amplitudes del valor de salida mayores que las
de TuneRuleSUT = 1)
● TuneRuleSUT = 1: PID lento I (comportamiento de regulación
más lento con amplitudes del valor de salida menores que las de
TuneRuleSUT = 0)
● TuneRuleSUT = 2: PID según Chien, Hrones, Reswick
● TuneRuleSUT = 3: PI según Chien, Hrones, Reswick
● TuneRuleSUT = 4: PID rápido II (comportamiento de regulación
más rápido con amplitudes del valor de salida mayores que las
de TuneRuleSUT = 5)
● TuneRuleSUT = 5: PID lento II (comportamiento de regulación
más lento con amplitudes del valor de salida menores que las de
TuneRuleSUT = 4)
Los métodos TuneRuleSUT = 0 y 1 se diferencian únicamente en el
cálculo de la ganancia proporcional de los métodos TuneRule‐
SUT = 4 y 5:
Con TuneRuleSUT = 0 y 1, la ganancia proporcional se calcula par‐
tiendo del tiempo de compensación del proceso. Con TuneRule‐
SUT = 4 y 5, se hace partiendo del tiempo de retardo del proceso.
Con TuneRuleSUT = 4 y 5, se obtiene un valor mayor para la ga‐
nancia proporcional y, con ello, un comportamiento de regulación
más rápido con amplitudes del valor de salida mayores que las de
TuneRuleSUT = 0 y 1.

PIDSelfTune.SUT.State

INT

0

La variable SUT.State muestra la fase actual de la optimización
inicial:

PIDSelfTune.TIR.RunIn

BOOL

FALSE

● RunIn = FALSE
Si la optimización fina se inicia desde los modos de operación
Inactivo o Manual, se inicia una optimización inicial.
Si la optimización fina se inicia desde el modo automático, los
parámetros PID existentes se regulan a la consigna.
Solo entonces comienza la optimización fina. Si no es preciso
realizar la optimización inicial, PID_3Step cambia al modo de
operación "Inactivo".
● RunIn = TRUE
La optimización inicial se omite. PID_3Step intenta alcanzar la
consigna con el valor de salida mínimo o máximo, lo que puede
ocasionar una sobreoscilación muy alta. Solo entonces
comienza la optimización fina.
RunIn se ajusta a FALSE después de la optimización fina.

PIDSelfTune.TIR.Calculate‐
TIRParams

BOOL

Programación del PLC
Manual de programación y manejo, 11/2019

FALSE

Las propiedades del sistema regulado se almacenan durante la op‐
timización. Si CalculateTIRParams = TRUE, se vuelven a calcular
los parámetros PID basándose en estas propiedades. Los paráme‐
tros PID se calculan según el método ajustado en TuneRuleTIR.
CalculateTIRParams se ajusta a FALSE después del cálculo.

3741

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste
predeter‐
minado

Descripción

PIDSelfTune.TIR.TuneRule‐
TIR

INT

0

Calcular los parámetros durante la optimización fina según el mé‐
todo:
● TuneRuleTIR = 0: PID automático
● TuneRuleTIR = 1: PID rápido (comportamiento de regulación
más rápido con amplitudes del valor de salida mayores que las
de TuneRuleTIR = 2)
● TuneRuleTIR = 2: PID lento (comportamiento de regulación más
lento con amplitudes del valor de salida menores que las de
TuneRuleTIR = 1)
● TuneRuleTIR = 3: PID Ziegler-Nichols
● TuneRuleTIR = 4: PI Ziegler-Nichols
● TuneRuleTIR = 5: P Ziegler-Nichols
Para poder repetir el cálculo de los parámetros PID con Calculate‐
TIRParams y TuneRuleTIR = 0, 1 o 2, la optimización fina anterior
debe haberse ejecutado también con TuneRuleTIR = 0, 1 o 2.
De no ser así, se utiliza TuneRuleTIR = 3.
Siempre es posible volver a calcular los parámetros PID con Calcu‐
lateTIRParams y TuneRuleTIR = 3, 4 o 5.

PIDSelfTune.TIR.State

INT

0

La variable TIR.State muestra la fase actual de la "optimización
fina":

Retain.Mode

INT

0

Si cambia el valor de Retain.Mode, se conmuta a otro modo de
operación.
El siguiente modo de operación se activa al cambiar de Mode a:
● Mode = 0: Inactivo
● Mode = 1: Optimización inicial
● Mode = 2: Optimización fina
● Mode = 3: Modo automático
● Mode = 4: Modo manual
● Mode = 5: Aproximación al valor de salida sustitutivo
● Mode = 6: Medición del tiempo de posicionamiento
● Mode = 7: Monitorización de errores
● Mode = 8: Aproximación al valor de salida sustitutivo con
monitorización de errores
Mode es remanente.

Retain.CtrlParams.SetByU‐
ser(1)

BOOL

FALSE

Si SetByUser = FALSE, los parámetros PID se determinan de forma
automática y PID_3Step funciona con una zona muerta en el valor
de salida. El ancho de la zona muerta se calcula durante la optimi‐
zación a partir de una desviación estándar del valor de salida y se
almacena en Retain.CtrlParams.OutputDeadBand.
Si SetByUser = TRUE, los parámetros PID se introducen manual‐
mente y PID_3 Step funciona sin zona muerta en el valor de sali‐
da.Retain.CtrlParams.OutputDeadBand = 0.0
SetByUser es remanente.

3742

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste
predeter‐
minado

Retain.CtrlParams.Gain(1)

REAL

1.0

Descripción

Ganancia proporcional activa
Gain es remanente.

Retain.CtrlParams.Ti(1)

REAL

20.0

● Ti > 0.0: Tiempo de integración activo
● Ti = 0.0: La acción I está desactivada
Ti es remanente.

Retain.CtrlParams.Td(1)

REAL

0.0

● Td > 0.0: Tiempo derivativo activo
● Td = 0.0: La acción D está desactivada
Td es remanente.

Retain.CtrlParams.TdFiltRa‐
tio(1)

REAL

0.0

Coeficiente activo para el retardo de la acción derivada

Retain.CtrlParams.PWeigh‐
ting(1)

REAL

0.0

Ponderación activa de la acción P

Retain.CtrlParams.DWeigh‐
ting(1)

REAL

0.0

Ponderación activa de la acción D

Retain.CtrlParams.Cycle(1)

REAL

1.0

Retain.CtrlParams.InputDead‐
Band(1)

REAL

0.0

TdFiltRatio es remanente.
PWeighting es remanente.
DWeighting es remanente.
Tiempo de muestreo activo del algoritmo PID en segundos que se
redondea a un múltiplo entero del tiempo de ciclo del OB invocante.
Cycle es remanente.
Ancho de zona muerta del error de regulación
InputDeadBand es remanente.

Consulte también
Parámetros State y Retain.Mode V1 (Página 3743)
Variable ActivateRecoverMode V1 (Página 3753)

Parámetros State y Retain.Mode V1
Interrelación de los parámetros
El parámetro State indica el modo de operación actual del regulador PID. El parámetro State
no puede modificarse.
Para cambiar el modo de operación debe modificarse la variable Retain.Mode. Esto también
se aplica cuando Retain.Mode ya contiene el valor para el nuevo modo de operación. A
continuación, por ejemplo, puede ajustarse primero Retain.Mode = 0 y, después,
Retain.Mode = 3. Si el modo de operación actual del regulador permite este cambio, State
adopta el valor de Retain.Mode.
Cuando PID_3Step cambia automáticamente el modo de operación, se aplica lo siguiente:
State != Retain.Mode.

Programación del PLC
Manual de programación y manejo, 11/2019

3743

Instrucciones
4.1 Instrucciones
Ejemplos:
● Después de una optimización inicial correcta
State = 3 y Retain.Mode = 1
● En caso de error
State = 0 y Retain.Mode mantiene el valor que tenía hasta ahora; por ejemplo,
Retain.Mode = 3
● ManualEnalbe = TRUE
State = 4 y Retain.Mode mantiene el valor que tenía hasta ahora; por ejemplo,
Retain.Mode = 3
Nota
Por ejemplo, es posible repetir una optimización fina correcta sin tener que finalizar el modo
automático con Mode = 0.
Si en un ciclo se ajusta Retain.Mode a un valor no válido, como p. ej. 9999, esto no afecta
en modo alguno a State. En el siguiente ciclo se ajusta Mode = 2. Es posible crear una
modificación en Retain.Mode sin tener que cambiar primero al modo de operación
"Inactivo".

Significado de los valores
State / Re‐
tain.Mode

Descripción

0

Inactivo
El regulador está desconectado y ya no modifica la posición de la válvula.

1

Optimización inicial
La optimización inicial determina el comportamiento del proceso a un impulso del valor de salida y busca el
punto de inflexión. A partir de la inclinación máxima y del tiempo muerto del sistema regulado se calculan los
parámetros PID óptimos.
Requisitos para la optimización inicial:
● State = 0 o State = 4
● ManualEnable = FALSE
● El tiempo de posicionamiento del motor está configurado o medido.
● La consigna y el valor real se encuentran dentro de los límites configurados.
Cuanto más estable es el valor real, con mayor facilidad y precisión se pueden calcular los parámetros PID.
Un ruido del valor real es aceptable siempre que la subida del valor real sea considerablemente mayor que
el ruido.
Antes de volver a calcular los parámetros PID, se guarda una copia de seguridad de estos y es posible
reactivarlos con Config.LoadBackUp. La consigna se congela en la variable CurrentSetpoint.
Una vez realizada correctamente la optimización inicial se pasa al modo automático; si dicha optimización no
se realiza correctamente, se pasa al modo de operación "Inactivo".
La fase de optimización inicial se muestra con la variable SUT.State.

3744

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
State / Re‐
tain.Mode

Descripción

2

Optimización fina
La optimización fina genera una oscilación constante y limitada del valor real. A partir de la amplitud y fre‐
cuencia de esta oscilación se optimizan los parámetros PID. Se analizan las diferencias entre el comporta‐
miento del proceso durante la optimización inicial y la optimización fina. A partir de los resultados se vuelven
a calcular todos los parámetros PID. Los parámetros PID existentes después de la optimización fina muestran
en su mayoría un comportamiento de guía y ante fallos mucho mejor que los parámetros PID de la optimi‐
zación inicial.
PID_3Step intenta generar automáticamente una oscilación que es mayor que el ruido del valor real. La
estabilidad del valor real ejerce tan solo una mínima influencia sobre la optimización fina.
Antes de la optimización fina se realiza una copia de seguridad de los parámetros PID. Estos pueden reac‐
tivarse con Config.LoadBackUp. La consigna se congela en la variable CurrentSetpoint.
Requisitos para la optimización fina:
● El tiempo de posicionamiento del motor está configurado o medido.
● La consigna y el valor real se encuentran dentro de los límites configurados.
● ManualEnable = FALSE
● Modo de operación Automático (State = 3), Inactivo (State = 0) o Manual (State = 4)
Al inicio, la optimización fina se desarrolla del modo siguiente:
● Modo automático (State = 3)
Si desea mejorar los parámetros PID existentes mediante optimización, inicie la optimización fina desde
el modo automático.
PID_3Step regula con los parámetros PID existentes hasta que el lazo de regulación es estacionario y se
cumplen las condiciones para la optimización fina. Solo entonces comienza la optimización fina.
● Modo Inactivo (State = 0) o Manual (State = 4)
Se realiza primero una optimización inicial. Con los parámetros PID calculados, la regulación se realiza
hasta que el lazo de regulación es estacionario y se han cumplido las condiciones para una optimización
fina.
Si PIDSelfTune.TIR.RunIn = TRUE, se omite la optimización inicial y se intenta alcanzar la consigna con
el valor de salida máximo o mínimo. lo que puede ocasionar una sobreoscilación muy alta. La optimización
fina comienza entonces automáticamente.
Una vez realizada correctamente la optimización fina, el regulador cambia al modo de operación "Automático"
y, si dicha optimización no se ejecuta correctamente, se pasa al modo de operación "Inactivo".
La fase de optimización fina se muestra con la variable TIR.State.

3

Modo automático
En el modo automático, PID_3Step regula el sistema regulado conforme a los parámetros predefinidos.
Cuando se cumple uno de los requisitos siguientes, se cambia al modo automático:
● Optimización inicial finalizada correctamente.
● Optimización fina finalizada correctamente.
● Cambio de la variable Retain.Mode al valor 3.
Si se conecta la CPU o se cambia de STOP a RUN, PID_3Step arranca en el último modo de operación activo.
Para dejar PID_3Step en el modo de operación "Inactivo", ajuste RunModeByStartup = FALSE.
En el modo automático se tiene en cuenta la variable ActivateRecoverMode.

Programación del PLC
Manual de programación y manejo, 11/2019

3745

Instrucciones
4.1 Instrucciones
State / Re‐
tain.Mode

Descripción

4

Modo manual
En el modo manual, se especifican valores de salida manuales en los parámetros Manual_UP y Manual_DN
o ManualValue. El parámetro ErrorBits describe si el actuador se puede desplazar al valor de salida en caso
de error.
Este modo de operación se activa si Retain.Mode = 4 o en caso de un flanco ascendente en ManualEnable.
Si ManualEnable adopta el valor TRUE, únicamente cambia State. Retain.Mode permanece en el valor
actual. Con un flanco descendente en ManualEnable, PID_3Step regresa al modo de operación previo.
El cambio al modo automático se efectúa sin discontinuidad.
PID_3Step V1.1
En caso de error siempre se puede recurrir al modo manual.
PID_3Step V1.0
En caso de error, el modo manual depende de las variables ActivateRecoverMode.

5

Aproximar al valor de salida sustitutivo
Este modo de operación se activa en caso de error o si Reset = TRUE cuando Errorbehaviour = 1 y Activa‐
teRecoverMode = FALSE..
PID_3Step desplaza el elemento final de control al valor de salida sustitutivo y cambia después al modo de
operación "Inactivo".

6

Medición del tiempo de posicionamiento
Se mide el tiempo que requiere el motor para abrir completamente la válvula a partir del estado cerrado.
Este modo de operación se activa si a su vez se activa GetTransitTime.Start = TRUE.
Si se utilizan señales de tope para la medición del tiempo de posicionamiento, la válvula se abre completa‐
mente desde la posición actual, luego se cierra completamente y se vuelve a abrir completamente. Si Get‐
TransitTime.InvertDirection = TRUE, el comportamiento se invierte.
Si se utiliza una realimentación de posición para la medición del tiempo de posicionamiento, el elemento final
de control se desplaza desde la posición actual a una posición de destino.
Los límites del valor de salida no se tienen en cuenta durante la medición del tiempo de posicionamiento. El
actuador puede desplazarse hasta el tope superior o inferior.

3746

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
State / Re‐
tain.Mode

Descripción

7

Monitorización de errores
El algoritmo de regulación está desconectado y ya no modifica la posición de la válvula.
Este modo de operación se activa en caso de error en lugar del modo de operación "Inactivo".
Deben haberse cumplido todas las condiciones siguientes:
● Mode = 3 (modo automático)
● Errorbehaviour = 0
● ActivateRecoverMode = TRUE
● Se han producido uno o varios errores en los que interviene ActivateRecoverMode (Página 3753).
En cuanto los errores dejan de estar activos, PID_3Step pasa de nuevo al modo automático.

8

Aproximar al valor de salida sustitutivo con monitorización de errores
Este modo de operación se activa en caso de error en lugar del modo de operación "Aproximar al valor de
salida sustitutivo". PID_3Step desplaza el elemento final de control o actuador al valor de salida sustitutivo y
cambia después al modo de operación "Monitorización de errores".
Deben haberse cumplido todas las condiciones siguientes:
● Mode = 3 (modo automático)
● Errorbehaviour = 1
● ActivateRecoverMode = TRUE
● Se han producido uno o varios errores en los que interviene ActivateRecoverMode (Página 3753).
En cuanto los errores dejan de estar activos, PID_3Step pasa de nuevo al modo automático.

Programación del PLC
Manual de programación y manejo, 11/2019

3747

Instrucciones
4.1 Instrucciones

Cambio automático de modo de operación durante la puesta en servicio
En caso de error, PID_3Step cambia automáticamente el modo de operación. El diagrama
siguiente muestra la influencia de ErrorBehaviour en el cambio de modo desde los modos de
medición del tiempo de posicionamiento, optimización inicial y optimización fina.
,QDFWLYR  

(UURU%HKDYLRXU 

0HGLFLµQGHOWLHPSRGH
SRVLFLRQDPLHQWR  

(UURU%HKDYLRXU 

(UURU%HKDYLRXU 

(UURU%HKDYLRXU 

2SWLPL]DFLµQLQLFLDO 

2SWLPL]DFLµQILQD  

(UURU%HKDYLRXU 

(UURU%HKDYLRXU 

0RGRDXWRP£WLFR  

$SUR[LPDUDOYDORUGHVDOLGDVXVWLWXWLYR  


Cambio automático del modo de operación en caso de error




3748

Cambio automático del modo de operación cuando ha concluido el modo actual.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Cambio automático del modo de operación en el modo automático (PID_3Step V1.1)
En caso de error, PID_3Step cambia automáticamente el modo de operación. El diagrama
siguiente muestra la influencia de ErrorBehaviour y ActivateRecoverMode sobre este cambio
del modo de operación.
,QDFWLYR  

0RQLWRUL]DFLµQGHHUURUHV 

(UURU%HKDYLRXU 
$FWLYDWH5HFRYHU0RGH )$/6(

(UURU%HKDYLRXU 
$FWLYDWH5HFRYHU0RGH 758(

0RGRDXWRP£WLFR  

(UURU%HKDYLRXU 
$FWLYDWH5HFRYHU0RGH )$/6(

(UURU%HKDYLRXU 
$FWLYDWH5HFRYHU0RGH 758(

$SUR[LPDUDOYDORUPDQLSXODGRGHVHJXULGDG  

$SUR[LPDUDOYDORUPDQLSXODGRGHVHJXULGDG
FRQPRQLWRUL]DFLµQGHHUURUHV  

Cambio automático del modo de operación en caso de error




Cambio automático del modo de operación cuando ha concluido el modo actual.

Programación del PLC
Manual de programación y manejo, 11/2019

3749

Instrucciones
4.1 Instrucciones

Cambio automático del modo de operación en el modo automático y en el modo manual (PID_3Step
V1.0)
En caso de error, PID_3Step cambia automáticamente el modo de operación. El diagrama
siguiente muestra la influencia de ErrorBehaviour y ActivateRecoverMode sobre este cambio
del modo de operación.
,QDFWLYR  

(UURU%HKDYLRXU 
$FWLYDWH5HFRYHU0RGH )$/6(

0RQLWRUL]DFLµQGHHUURUHV 

(UURU%HKDYLRXU 
$FWLYDWH5HFRYHU0RGH )$/6(

(UURU%HKDYLRXU 
$FWLYDWH5HFRYHU0RGH 758(

0RGRDXWRP£WLFR  

0RGRPDQXDO  
$FWLYDWH5HFRYHU0RGH 758(
(UURU%HKDYLRXU 
$FWLYDWH5HFRYHU0RGH )$/6(

(UURU%HKDYLRXU 
$FWLYDWH5HFRYHU0RGH )$/6(

$SUR[LPDUDOYDORUGHVDOLGDVXVWLWXWLYR  

(UURU%HKDYLRXU 
$FWLYDWH5HFRYHU0RGH 758(

$SUR[LPDUDOYDORUGHVDOLGDVXVWLWXWLYRFRQ
PRQLWRUL]DFLµQGHHUURUHV  

Cambio automático del modo de operación en caso de error




Cambio automático del modo de operación cuando ha concluido el modo actual.
Cambio automático del modo de operación cuando ya no existe el error.

Consulte también
Variable ActivateRecoverMode V1 (Página 3753)
Parámetro ErrorBits V1 (Página 3751)

3750

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetro ErrorBits V1
Si hay varios errores presentes a la vez, los valores del código de error se muestran sumados
binariamente. Si se muestra, p. ej., el código de error 0003, significa que están presentes
simultáneamente los errores 0001 y 0002.
ErrorBits

Descripción

(DW#16#...)
0000

No hay ningún error.

0001

El parámetro "Input" se encuentra fuera de los límites del valor real.
● Input > Config.InputUpperLimit o bien
● Input < Config.InputLowerLimit
Si ActivateRecoverMode = TRUE y ErrorBehaviour = 1, el actuador se desplaza al valor de salida susti‐
tutivo. Si ActivateRecoverMode = TRUE y ErrorBehaviour = 0, el actuador se mantiene en la posición
actual. Si ActivateRecoverMode = FALSE, el actuador se mantiene en la posición actual.
PID_3Step V1.1
En el modo manual, el actuador se puede desplazar.
PID_3Step V1.0
El modo manual no es posible en este estado. Una vez eliminado el error, el actuador se puede volver a
desplazar.

0002

Valor no válido en el parámetro "Input_PER". Compruebe si hay un error en la entrada analógica.
Si antes de aparecer el error estaba activo el modo automático, ActivateRecoverMode = TRUE y el error
ya no está presente, PID_3Step pasa de nuevo al modo automático.

0004

Error durante la optimización fina. No se ha podido mantener la oscilación del valor real.

0020

La optimización inicial no está permitida en el modo automático ni durante la optimización fina.

0080

Error durante la optimización inicial. Los límites del valor de salida no están configurados correctamente
o el valor real no responde de la forma esperada.
Compruebe si los límites del valor de salida están configurados correctamente y si encajan con el sentido
de la regulación.
Asegúrese también de que el valor real no oscile fuertemente antes de iniciar la optimización inicial.

0100

Un error en la optimización fina ha provocado parámetros no válidos.

0200

Valor no válido en el parámetro "Input": El valor no tiene un formato numérico válido.
Si antes de aparecer el error estaba activo el modo automático, ActivateRecoverMode = TRUE y el error
ya no está presente, PID_3Step pasa de nuevo al modo automático.

0400

Error al calcular el valor de salida. Compruebe los parámetros PID.

0800

Error de tiempo de muestreo: PID_3Step no se llama dentro del tiempo de muestreo del OB de alarma
cíclica.
Si antes de aparecer el error estaba activo el modo automático, ActivateRecoverMode = TRUE y el error
ya no está presente, PID_3Step pasa de nuevo al modo automático.
Si este error se ha producido durante la simulación con PLCSIM, tenga en cuenta las indicaciones de
AUTOHOTSPOT.

1000

Valor no válido en el parámetro "Setpoint": El valor no tiene un formato numérico válido.
Si antes de aparecer el error estaba activo el modo automático, ActivateRecoverMode = TRUE y el error
ya no está presente, PID_3Step pasa de nuevo al modo automático.

Programación del PLC
Manual de programación y manejo, 11/2019

3751

Instrucciones
4.1 Instrucciones
ErrorBits

Descripción

(DW#16#...)
2000

Valor no válido en el parámetro Feedback_PER.
Compruebe si hay un error en la entrada analógica.
El actuador no puede desplazarse al valor de salida sustitutivo y permanece en la posición actual. El modo
manual no es posible en este estado. Para poder desplazar el actuador desde este estado, es necesario
desactivar la realimentación de posición (Config. FeedbackOn = FALSE).
Si antes de aparecer el error estaba activo el modo automático, ActivateRecoverMode = TRUE y el error
ya no está presente, PID_3Step pasa de nuevo al modo automático.

4000

Valor no válido en el parámetro Feedback. El valor no tiene un formato numérico válido.
El actuador no puede desplazarse al valor de salida sustitutivo y permanece en la posición actual. El modo
manual no es posible en este estado. Para poder desplazar el actuador desde este estado, es necesario
desactivar la realimentación de posición (Config. FeedbackOn = FALSE).
Si antes de aparecer el error estaba activo el modo automático, ActivateRecoverMode = TRUE y el error
ya no está presente, PID_3Step pasa de nuevo al modo automático.

8000

Error en la realimentación digital de posición. Actuator_H = TRUE y Actuator_L = TRUE.
El actuador no puede desplazarse al valor de salida sustitutivo y permanece en la posición actual. El modo
manual no es posible en este estado.
Para poder desplazar el actuador desde este estado, es necesario desactivar las "Señales de tope del
actuador" (Config.ActuatorEndStopOn = FALSE).
Si antes de aparecer el error estaba activo el modo automático, ActivateRecoverMode = TRUE y el error
ya no está presente, PID_3Step pasa de nuevo al modo automático.

3752

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetro Reset V1
Un flanco ascendente en Reset hace que se pase al modo de operación "Inactivo" y se
desactiven los errores y las advertencias. Un flanco descendente en Reset provoca un cambio
al último modo de operación activo. Si antes estaba activo el modo automático, la conmutación
al modo automático tiene lugar sin discontinuidades.
5HVHW



W PV

0RGH



W PV

6WDWH





①
②
③







W PV

Conexión
Error
Reset

Variable ActivateRecoverMode V1
La influencia de las variables ActivateRecoverMode depende de la versión de la instrucción
PID_3Step.

Programación del PLC
Manual de programación y manejo, 11/2019

3753

Instrucciones
4.1 Instrucciones

Comportamiento en la versión 1.1
La variable ActivateRecoverMode determina en el modo automático el comportamiento en
caso de error. Durante la optimización inicial, la optimización fina y la medición del tiempo de
posicionamiento, ActivateRecoverMode no afecta.
ActivateReco‐
verMode

Descripción

FALSE

En caso de error, PID_3Step pasa al modo de operación "Inactivo" o "Aproximar al valor de salida susti‐
tutivo". El regulador únicamente se activa tras un rearme o después de un cambio en Retain.Mode.

TRUE

Si en el modo automático se producen errores con frecuencia, este ajuste empeorará el comportamiento
de regulación. Compruebe en tal caso el parámetro ErrorBits y elimine la causa de error.
Si se produce uno o varios de los errores siguientes, PID_3Step pasa al modo operativo "Aproximar a valor
de salida sustitutivo con monitorización de errores" o "Monitorización de errores":
● 0002h: Valor no válido en el parámetro Input_PER.
● 0200h: Valor no válido en el parámetro Input.
● 0800h: Error de tiempo de muestreo
● 1000h: Valor no válido en el parámetro Setpoint.
● 2000h: Valor no válido en el parámetro Feedback_PER.
● 4000h: Valor no válido en el parámetro Feedback.
● 8000h: Error en la realimentación digital de posición.
Con los errores 2000h, 4000h y 8000h, PID_3Step no puede efectuar una aproximación al valor de salida
sustitutivo configurado.
En cuanto los errores dejan de estar activos, PID_3Step pasa de nuevo al modo automático.

3754

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Comportamiento en la versión 1.0
La variable ActivateRecoverMode determina tanto en el modo automático como en el modo
manual el comportamiento en caso de error. Durante la optimización inicial, la optimización fina
y la medición del tiempo de posicionamiento, ActivateRecoverMode no afecta.
ActivateReco‐
verMode

Descripción

FALSE

En caso de error, PID_3Step pasa al modo de operación "Inactivo" o "Aproximar al valor de salida susti‐
tutivo". El regulador únicamente se activa tras un rearme o después de un cambio en Retain.Mode.

TRUE

Error en el modo automático
Si en el modo automático se producen errores con frecuencia, este ajuste empeorará el comportamiento
de regulación. Compruebe en tal caso el parámetro ErrorBits y elimine la causa de error.
Si se produce uno o varios de los errores siguientes, PID_3Step pasa al modo operativo "Aproximar a valor
de salida sustitutivo con monitorización de errores" o "Monitorización de errores":
● 0002h: Valor no válido en el parámetro Input_PER.
● 0200h: Valor no válido en el parámetro Input.
● 0800h: Error de tiempo de muestreo
● 1000h: Valor no válido en el parámetro Setpoint.
● 2000h: Valor no válido en el parámetro Feedback_PER.
● 4000h: Valor no válido en el parámetro Feedback.
● 8000h: Error en la realimentación digital de posición.
Con los errores 2000h, 4000h y 8000h, PID_3Step no puede efectuar una aproximación al valor de salida
sustitutivo configurado.
En cuanto los errores dejan de estar activos, PID_3Step pasa de nuevo al modo automático.
Error en el modo manual
Si se produce uno o varios de los errores siguientes, PID_3Step permanece en el modo manual:
● 0002h: Valor no válido en el parámetro Input_PER.
● 0200h: Valor no válido en el parámetro Input.
● 0800h: Error de tiempo de muestreo
● 1000h: Valor no válido en el parámetro Setpoint.
● 2000h: Valor no válido en el parámetro Feedback_PER.
● 4000h: Valor no válido en el parámetro Feedback.
● 8000h: Error en la realimentación digital de posición.
Con los errores 2000h, 4000h y 8000h, la válvula no se puede desplazar a una posición apropiada.

Consulte también
Variables estáticas PID_3Step V1 (Página 3735)
Parámetros State y Retain.Mode V1 (Página 3743)

Programación del PLC
Manual de programación y manejo, 11/2019

3755

Instrucciones
4.1 Instrucciones

Variable Warning V1
Si hay varias advertencias presentes a la vez, los valores de las advertencias se muestran
sumados binariamente. Si se muestra p. ej. la advertencia 0003, significa que están presentes
simultáneamente las advertencias 0001 y 0002.
Warning

Descripción

(DW#16#...)
0000

No hay advertencias pendientes.

0001

Durante la optimización inicial no se encontró el punto de inflexión.

0002

Durante la optimización fina la oscilación fue más intensa.

0004

La consigna ha sido limitada a los límites ajustados.

0008

En el método de cálculo seleccionado no se han definido todas las propiedades necesarias del sistema
regulado. En sustitución se calcularon los parámetros PID con el método TuneRuleTIR = 3.

0010

No se ha podido cambiar el modo de operación, pues ManualEnable = TRUE.

0020

El tiempo de muestreo del algoritmo PID está limitado por el tiempo de ciclo del OB invocante.
Para obtener mejores resultados, utilice tiempos de ciclo más cortos para el OB.

0040

El valor real ha rebasado uno de sus límites de advertencia.

0080

Valor no válido en Retain.Mode. El modo de operación no se conmuta.

0100

El valor manual ha sido limitado a los límites de la salida del regulador.

0200

La regla utilizada para la optimización no conduce a ningún resultado correcto o bien no se soporta.

0400

En la medición del tiempo de posicionamiento se ha seleccionado un método que no encaja con el
elemento final de control.
El tiempo de posicionamiento no se puede medir porque los ajustes del elemento final de control no
concuerdan con el método de medición seleccionado.

0800

En la medición del tiempo de posicionamiento, la diferencia entre la posición actual y el nuevo valor de
salida es insuficiente. Esto puede ocasionar resultados erróneos. La diferencia entre el valor de salida
actual y el nuevo valo rde salida debe ser de al menos un 50% del rango de posicionamiento total.

1000

El valor de salida sustitutivo no puede alcanzarse porque está fuera de los límites del valor de salida.

Las siguientes advertencias se eliminan en cuanto la causa se soluciona:
● 0004
● 0020
● 0040
● 0100
Todas las demás advertencias se eliminan si hay un flanco ascendente en Reset.

Variable SUT.State V1
SUT.Sta‐
te

Nombre

0 SUT_INIT
50 SUT_TPDN

3756

Descripción
Iniciar la optimización inicial
Determinar la posición inicial sin realimentación de posición

100 SUT_STDABW

Calcular desviación estándar

200 SUT_GET_POI

Determinar punto de inflexión

300 SUT_GET_RISETM

Determinar el tiempo de subida

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
SUT.Sta‐
te

Nombre

Descripción

9900 SUT_IO

Optimización inicial correcta

1 SUT_NIO

Optimización inicial no correcta

Variable TIR.State V1
TIR.State Nombre

Descripción

-100 TIR_FIRST_SUT
0 TIR_INIT

No es posible realizar la optimización fina. Primero se efectúa una optimización
inicial.
Iniciar la optimización fina

200 TIR_STDABW

Calcular desviación estándar

300 TIR_RUN_IN

Intentar alcanzar la consigna con el valor de salida máximo o mínimo.

400 TIR_CTRLN

Intentar alcanzar consigna con los parámetros PID existentes
(si la optimización inicial fue correcta)

500 TIR_OSZIL
9900 TIR_IO

Determinar oscilación y calcular parámetros
Optimización fina correcta

1 TIR_NIO

Optimización fina no correcta

PID_Temp
Novedades PID_Temp
PID_Temp V1.1
● Reacción del valor de salida al cambiar del modo de operación "Inactivo" al "Modo
automático"
La nueva opción IntegralResetMode = 4 se ha agregado y se ha definido como ajuste
predeterminado. Con IntegralResetMode = 4, al cambiar del modo de operación "Inactivo"
al "Modo automático" la acción I se preasigna automáticamente de forma que un error de
regulación provoque un salto del valor de salida PID con idéntico signo.
● Inicialización de la acción integral en el modo automático
La acción integral se puede inicializar en el modo automático con ayuda de las variables
OverwriteInitialOutputValue y PIDCtrl.PIDInit. Esto simplifica el uso de PID_Temp para
regulaciones de transición.

Compatibilidad con CPU y FW
La siguiente tabla muestra en qué CPU puede usarse cada versión de PID_Temp.
CPU

FW

PID_Temp

S7-1200

A partir de V4.2

V1.1
V1.0

V4.1

Programación del PLC
Manual de programación y manejo, 11/2019

V1.0

3757

Instrucciones
4.1 Instrucciones
CPU

FW

PID_Temp

S7-1500

A partir de V2.0

V1.1
V1.0

V1.7 a V1.8

V1.0

Tiempo de ejecución de CPU y requerimiento de memoria PID_Temp V1
Tiempo de ejecución de CPU
Tiempos de ejecución de CPU típicos del objeto tecnológico PID_Temp a partir de la versión
V1.0 en función del tipo de CPU.
CPU

Tiempo de ejecución de CPU típ. PID_Temp V1

CPU 1211C ≥ V4.1

580 µs

CPU 1215C ≥ V4.1

580 µs

CPU 1217C ≥ V4.1

580 µs

CPU 1505S ≥ V1.0

50 µs

CPU 1510SP-1 PN ≥ V1.7

130 µs

CPU 1511-1 PN ≥ V1.7

130 µs

CPU 1512SP-1 PN ≥ V1.7

130 µs

CPU 1516-3 PN/DP ≥ V1.7

75 µs

CPU 1518-4 PN/DP ≥ V1.7

6 µs

Requerimiento de memoria
Memoria requerida por un DB de instancia del objeto tecnológico PID_Temp a partir de la
versión V1.0.
Memoria requerida por el DB de instancia de
PID_Temp V1
Memoria de carga requerida

Aprox. 17000 bytes

Memoria de trabajo total requerida

1280 bytes

Memoria de trabajo remanente requeri‐ 100 bytes
da

PID_Temp
Descripción PID_Temp
Descripción
La instrucción PID_Temp ofrece un regulador PID con optimización integrada para procesos
de temperatura. PID_Temp está indicada para aplicaciones puramente de calefacción o de
calefacción/refrigeración.

3758

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Se dispone de los modos de operación siguientes:
● Inactivo
● Optimización inicial
● Optimización fina
● Modo automático
● Modo manual
● Valor de salida sustitutivo con monitorización de errores
Los modos de operación se describen detalladamente en el parámetro State.

Algoritmo PID
PID_Temp es un regulador PIDT1 con Anti-Windup y ponderación de las acciones P y D. El
algoritmo PID funciona de acuerdo con la siguiente fórmula (zona de regulación y zona muerta
desactivadas):

1

y = Kp

[ (b · w - x) + T · s

(w - x) +

I

TD · s
a · TD · s + 1

(c · w - x)

]

La siguiente tabla muestra el significado de los símbolos utilizados en la fórmula y en las
imágenes siguientes.
Símbolo

Descripción

Parámetros correspondientes de la ins‐
trucción PID_Temp

y

Valor de salida del algoritmo PID

-

Kp

Ganancia proporcional

Retain.CtrlParams.Heat.Gain
Retain.CtrlParams.Cool.Gain
CoolFactor

s

Operador laplaciano

-

b

Ponderación de la acción P

Retain.CtrlParams.Heat.PWeighting
Retain.CtrlParams.Cool.PWeighting

w

Consigna

CurrentSetpoint

x

Valor real

ScaledInput

TI

Tiempo de integración

Retain.CtrlParams.Heat.Ti

TD

Tiempo derivativo

a

Coeficiente para el retardo de la acción
derivada (retardo de la acción derivada
T1 = a × TD)

Retain.CtrlParams.Heat.TdFiltRatio

Ponderación de la acción D

Retain.CtrlParams.Heat.DWeighting

Retain.CtrlParams.Cool.Ti
Retain.CtrlParams.Heat.Td
Retain.CtrlParams.Cool.Td

c

Retain.CtrlParams.Cool.TdFiltRatio

Retain.CtrlParams.Cool.DWeighting

Programación del PLC
Manual de programación y manejo, 11/2019

3759

Instrucciones
4.1 Instrucciones
Símbolo

Descripción

Parámetros correspondientes de la ins‐
trucción PID_Temp

DeadZone

Ancho de zona muerta

Retain.CtrlParams.Heat.DeadZone

ControlZone

Ancho de zona de regulación

Retain.CtrlParams.Cool.DeadZone
Retain.CtrlParams.Heat.ControlZone
Retain.CtrlParams.Cool.ControlZone

3760

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Diagrama de bloques PID_Temp
InputPEROn

Scale

PV_ALRM

InputWarning_H

Input_PER
1

InputWarning_L

0

Input

z -1

sgn

CtrlParams
Heat.Gain
Heat Ti …
Cool.Gain
Cool.Ti ...
SubstituteSetpointOn
Setpoint
SubstituteSetpoint

0

ScaledInput
Limit
CurrentSetpoint

PIDT1
Anti Windup

1

Disturbance

State
Limit

=3

PidOutputSum

ManualValue
=4

Scale
OutputHeat

PidOutput
OffsetHeat

Scale

Config.Output.Heat.Select

PWM

PIDSelfTune.TIR.
OutputOffsetHeat
Split

=1
FALSE
≠1

OutputHeat_PWM

Scale

Limit

=2
0

OutputHeat_PER

≠2

Limit

Split

Config.ActivateCooling

Scale

OutputCool

-1

1
0.0
0

PIDSelfTune.TIR.
OutputOffsetCool

Scale

Config.Output.Cool.Select

PWM
1

PidOutput
OffsetCool

FALSE
0

=1
FALSE
≠1

OutputCool_PWM

Scale
1
0
0

Programación del PLC
Manual de programación y manejo, 11/2019

=2
0

OutputCool_PER

≠2

3761

Instrucciones
4.1 Instrucciones

Diagrama de bloques PIDT1 con Anti-Windup
E

&XUUHQW6HWSRLQW Z

&RQILJ2XWSXW+HDW
3LG8SSHU/LPLW


F

'7

.S

\




&RQILJ2XWSXW+HDW
3LG/RZHU/LPLW
&RQILJ2XWSXW&RRO
3LG/RZHU/LPLW

'HDG=RQH








$QWL:LQGXS
/LPLW

6FDOHG,QSXW [

,

&RQWURO=RQH




Llamada
PID_Temp se llama en una base de tiempo constante de un OB de alarma cíclica.
Si efectúa una llamada de PID_Temp como DB multiinstancia, no se creará ningún objeto
tecnológico. No dispondrá de interfaz de parametrización y puesta en servicio. Los PID_Temp
se deben parametrizar directamente en el DB multiinstancia y ponerse en servicio a través de
una tabla de observación.

Cargar en dispositivo
Los valores actuales de variables remanentes solo se actualizan si se carga PID_Temp por
completo.
Cargar objeto tecnológico en el dispositivo

Arranque
Al arrancar la CPU, PID_Temp se inicia en el modo guardado en el parámetro de entrada/
salida Mode. Para cambiar al modo de operación "Inactivo" durante el arranque, ajuste
RunModeByStartup = FALSE.

3762

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Comportamiento en caso de error
El comportamiento en caso de fallo viene determinado por las variables SetSubstituteOutput
y ActivateRecoverMode. Si ActivateRecoverMode = TRUE, el comportamiento depende
además del error aparecido.
SetSubstitu‐
teOutput

ActivateReco‐ Editor de configuración
verMode
> Ajustes básicos de la salida
> ajustar PidOutputSum a

Comportamiento

Irrelevante

FALSE

Cambio al modo de operación "Inactivo" (State = 0)

Cero (Inactivo)

El valor de salida del algoritmo PID y todas las
salidas para calefacción y refrigeración se ajustan
a 0. El escalado de las salidas para calefacción y
refrigeración no está activo.
FALSE

TRUE

Valor actual para la duración del
error

Cambio al modo de operación "Valor de salida
sustitutivo con monitorización de errores" (Sta‐
te = 5)
El valor de salida actual se transfiere al elemento
final de control o actuador mientras dure el error.

TRUE

TRUE

Valor de salida sustitutivo mientras
dure el error

Cambio al modo de operación "Valor de salida
sustitutivo con monitorización de errores" (Sta‐
te = 5)
El valor de SubstituteOutput se transfiere al actua‐
dor mientras dure el error.

PID_Temp utiliza ManualValue como valor de salida en el modo manual, excepto si
ManualValue no es válido.
● Si ManualValue no es válido, se utiliza SubstituteOutput.
● Si ManualValue y SubstituteOutput no son válidos, se utiliza
Config.Output.Heat.PidLowerLimit.
El parámetro Error indica si hay algún un error pendiente en ese momento. Si no persiste el
error, se indica Error = FALSE. El parámetro ErrorBits muestra qué errores se han producido.
ErrorBits se reinicia mediante un flanco ascendente en Reset o ErrorAck.

Funcionamiento PID_Temp
Monitorizar límites del valor real
En las variables Config.InputUpperLimit y Config.InputLowerLimit es posible definir un límite
superior y uno inferior del valor real. Si el valor real se encuentra fuera de estos límites, se
produce un error (ErrorBits = 0000001h).
En las variables Config.InputUpperWarning y Config.InputLowerWarning se definen un límite
de advertencia superior y uno inferior del valor real. Si el valor real se encuentra fuera de estos
límites de advertencia, se produce una advertencia (Warning = 0000040h) y el parámetro de
salida InputWarning_H o InputWarning_L adopta el valor TRUE.

Programación del PLC
Manual de programación y manejo, 11/2019

3763

Instrucciones
4.1 Instrucciones

Limitar consigna
En las variables Config.SetpointUpperLimit y Config.SetpointLowerLimit se debe definir un
límite superior y uno inferior de la consigna. PID_Temp limita automáticamente la consigna a
los límites del valor real. Es posible limitar la consigna a un rango más pequeño. PID_Temp
verifica si dicho rango está dentro de los límites del valor real. Si la consigna se encuentra fuera
de estos límites, se utilizan los límites superior e inferior como consigna y el parámetro de
salida SetpointLimit_H o SetpointLimit_L adopta el valor TRUE.
La consigna se limita en todos los modos de operación.

Consigna sustitutiva
En las variables SubstituteSetpoint es posible especificar una consigna sustitutiva y activarla
con SubstituteSetpointOn = TRUE. Esto permite, p. ej., especificar directamente la consigna
temporalmente para un regulador esclavo en una cascada sin modificar el programa de
usuario. Los límites definidos para la consigna son válidos también para la consigna sustitutiva.

Calefacción y refrigeración
Con el ajuste predeterminado, PID_Temp utiliza solo las salidas para la calefacción
(OutputHeat, OutputHeat_PWM, OutputHeat_PER). El valor de salida del algoritmo PID
(PidOutputSum) se escala y se emite en las salidas para calefacción. Con
Config.Output.Heat.Select puede definirse si se deben calcular OutputHeat_PWM o
OutputHeat_PER. OutputHeat se calcula siempre.
Con Config.ActivateCooling = TRUE se activan también las salidas para refrigeración
(OutputCool, OutputCool_PWM, OutputCool_PER). Los valores de salida positivos del
algoritmo PID (PidOutputSum) se escalan y se emiten a las salidas para calefacción. Los
valores de salida negativos del algoritmo PID se escalan y se emiten a las salidas para
refrigeración. Con Config.Output.Cool.Select puede definirse si se deben calcular
OutputCool_PWM o OutputCool_PER. OutputCool se calcula siempre.
Existen dos métodos para calcular el valor de salida PID estando la refrigeración activada:
● Factor de refrigeración (Config.AdvancedCooling = FALSE):
El valor de salida para refrigeración se calcula con los parámetros PID para calefacción
considerando el factor de refrigeración configurable Config.CoolFactor. Este método está
indicado si los actuadores de calefacción y refrigeración presentan un comportamiento
temporal similar pero ganancias distintas. Si se opta por este método, no estarán
disponibles la optimización inicial, la optimización fina para refrigeración ni el juego de
parámetros PID para refrigeración. Solo pueden ejecutarse las optimizaciones para
calefacción.
● Cambio de parámetros PID (Config.AdvancedCooling = TRUE):
El valor de salida para refrigeración se calcula mediante un juego de parámetros PID
propio. Basándose en el valor de salida calculado y el error de regulación, el algoritmo PID
decide si se utilizarán los parámetros PID para calefacción o para refrigeración. Este
método está indicado si los actuadores de calefacción y refrigeración presentan
comportamientos temporales y ganancias distintas. La optimización inicial y la optimización
fina para refrigeración solo están disponibles si se elige este método.

3764

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Límites y escalado del valor de salida
En función del modo de operación, el valor de salida PID (PidOutputSum) se calcula
automáticamente mediante el algoritmo PID o se especifica mediante el valor manual
(ManualValue) o el valor de salida sustitutivo configurado (SubstituteOutput).
El valor de salida PID se limita en función de la configuración:
● Si la refrigeración está desactivada (Config.ActivateCooling = FALSE), se aplica el límite
superior Config.Output.Heat.PidUpperLimit y el límite inferior
Config.Output.Heat.PidLowerLimit.
● Si la refrigeración está activada (Config.ActivateCooling = TRUE), se aplica el límite
superior Config.Output.Heat.PidUpperLimit y el límite inferior
Config.Output.Cool.PidLowerLimit.
El valor de salida PID se escala y se emite a las salidas para calefacción y refrigeración. El
escalado puede especificarse por separado para cada salida y se define mediante dos pares
de valores respectivos en las estructuras Config.Output.Heat y Config.Output.Cool:
Salida

Par de valores

Parámetro

OutputHeat

Par de valores
1

Límite superior del valor de salida PID (calefacción)
Config.Output.Heat.PidUpperLimit,
Valor de salida superior escalado (calefacción) Config.Out‐
put.Heat.UpperScaling

Par de valores
2

Límite inferior del valor de salida PID (calefacción)
Config.Output.Heat.PidLowerLimit,
Valor de salida inferior escalado (calefacción) Config.Out‐
put.Heat.LowerScaling

OutputHeat_PWM

Par de valores
1

Límite superior del valor de salida PID (calefacción)
Config.Output.Heat.PidUpperLimit,
Valor de salida PWM superior escalado (calefacción)
Config.Output.Heat.PwmUpperScaling

Par de valores
2

Límite inferior del valor de salida PID (calefacción)
Config.Output.Heat.PidLowerLimit,
Valor de salida PWM inferior escalado (calefacción)
Config.Output.Heat.PwmLowerScaling

OutputHeat_PER

Par de valores
1

Límite superior del valor de salida PID (calefacción)
Config.Output.Heat.PidUpperLimit,
Valor de salida analógico superior escalado (calefacción)
Config.Output.Heat.PerUpperScaling

Par de valores
2

Límite inferior del valor de salida PID (calefacción)
Config.Output.Heat.PidLowerLimit,
Valor de salida analógico inferior escalado (calefacción)
Config.Output.Heat.PerLowerScaling

Programación del PLC
Manual de programación y manejo, 11/2019

3765

Instrucciones
4.1 Instrucciones
Salida

Par de valores

Parámetro

OutputCool

Par de valores
1

Límite inferior del valor de salida PID (refrigeración)
Config.Output.Cool.PidLowerLimit,
Valor de salida superior escalado (refrigeración)
Config.Output.Cool.UpperScaling

Par de valores
2

Límite superior del valor de salida PID (refrigeración)
Config.Output.Cool.PidUpperLimit,
Valor de salida inferior escalado (refrigeración)
Config.Output.Cool.LowerScaling

OutputCool_PWM

Par de valores
1

Límite inferior del valor de salida PID (refrigeración)
Config.Output.Cool.PidLowerLimit,
Valor de salida PWM superior escalado (refrigeración)
Config.Output.Cool.PwmUpperScaling

Par de valores
2

Límite superior del valor de salida PID (refrigeración)
Config.Output.Cool.PidUpperLimit,
Valor de salida PWM inferior escalado (refrigeración)
Config.Output.Cool.PwmLowerScaling

OutputCool_PER

Par de valores
1

Límite inferior del valor de salida PID (refrigeración)
Config.Output.Cool.PidLowerLimit,
Valor de salida analógico superior escalado (refrigeración)
Config.Output.Cool.PerUpperScaling

Par de valores
2

Límite superior del valor de salida PID (refrigeración)
Config.Output.Cool.PidUpperLimit,
Valor de salida analógico inferior escalado (refrigeración)
Config.Output.Cool.PerLowerScaling

Si la refrigeración está activada (Config.ActivateCooling = TRUE), Config.Output.Heat.PidLowerLimit
debe tener el valor 0.0.
Config.Output.Cool.PidUpperLimit debe tener siempre el valor 0.0.

Ejemplo:
Escalado de salida utilizando la salida OutputHeat (refrigeración desactivada;
Config.Output.Heat.PidLowerLimit debe ser distinto a 0.0):
2XWSXW+HDW
&RQILJ2XWSXW+HDW
8SSHU6FDOLQJ
&RQILJ2XWSXW+HDW
/RZHU6FDOLQJ

&RQILJ2XWSXW+HDW
3LG/RZHU/LPLW

3LG2XWSXW6XP
&RQILJ2XWSXW+HDW
3LG8SSHU/LPLW

Ejemplo:

3766

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Escalado de salida utilizando la salida OutputHeat_PWM y OutputCool_PER (refrigeración
activada; Config.Output.Heat.PidLowerLimit debe ser 0.0):
OutputCool_PER OutputHeat_PWM
Config.Output.Cool.
PerUpperScaling

Config.Output.Heat.
PwmUpperScaling
Config.Output.Heat.
PwmLowerScaling

Config.Output.Cool.
PerLowerScaling

PidOutputSum

Config.Output.Heat.
Config.Output.Cool.
Config.Output.Heat.
PidLowerLimit
PidLowerLimit
PidUpperLimit
=Config.Output.Cool.
PidUpperLimit=0.0

Exceptuando el modo de operación "Inactivo", el valor en una salida se sitúa siempre entre su
valor de salida superior escalado y su valor de salida inferior escalado; p. ej., para OutputHeat
debe estar siempre entre Config.Output.Heat.UpperScaling y
Config.Output.Heat.LowerScaling.
Por eso, si se desea limitar el valor en la salida correspondiente, deben modificarse también
estos valores de escalado.

Conexión en cascada
PID_Temp le ayuda si se utiliza en una regulación en cascada (ver: AUTOHOTSPOT).

Valor de salida sustitutivo
PID_Temp puede emitir un valor de salida sustitutivo en caso de error que se predefine en la
variable SubstituteOutput. El valor de salida sustitutivo debe situarse dentro de los límites para
el valor de salida PID. Los valores resultantes del valor de salida sustitutivo en las salidas para
calefacción y refrigeración se obtienen del escalado de salida configurado.

Vigilar la validez de las señales
Se vigila la validez de los valores de los siguientes parámetros al utilizarlos:
● Setpoint
● SubstituteSetpoint
● Input
● Input_PER
● Disturbance
● ManualValue
● SubstituteOutput
● Parámetros PID en las estructuras Retain.CtrlParams.Heat y Retain.CtrlParams.Cool.

Programación del PLC
Manual de programación y manejo, 11/2019

3767

Instrucciones
4.1 Instrucciones

Vigilancia del tiempo de muestreo PID_Temp
En el caso ideal, el tiempo de muestreo equivale al tiempo de ciclo del OB de alarma cíclica
invocante. La instrucción PID_Temp mide en cada caso el tiempo que transcurre entre dos
llamadas. Este es el tiempo de muestreo actual. Con cada cambio de modo de operación y en
el primer arranque se calcula la media de los 10 primeros tiempos de muestreo. Si el tiempo
de muestreo actual se desvía mucho de este valor medio, ocurre un error (Error = 0000800h).
Durante la optimización, el error se produce si:
● valor medio nuevo >= 1,1 veces el valor medio antiguo
● valor medio nuevo <= 0,9 veces el valor medio antiguo
En el modo automático, el error se produce si:
● Valor medio nuevo >= 1,5 veces el valor medio antiguo
● Valor medio nuevo <= 0,5 veces el valor medio antiguo
Si se desactiva la vigilancia del tiempo de muestreo (CycleTime.EnMonitoring = FALSE),
puede llamarse PID_Temp también en el OB1. En tal caso, deberá aceptarse una regulación
de menor calidad, debido a la fluctuación del tiempo de muestreo.

Tiempo de muestreo del algoritmo PID
Dado que el sistema regulado necesita cierto tiempo para responder a un cambio del valor de
salida, no es razonable calcular este valor en cada ciclo. El tiempo de muestreo del algoritmo
PID es el tiempo que transcurre entre dos cálculos del valor de salida. Este se determina
durante la optimización y se redondea a un múltiplo del tiempo de ciclo del OB de alarma cíclica
(tiempo de muestreo PID_Temp). Todas las demás funciones de PID_Temp se ejecutan con
cada llamada.
Si la refrigeración y el cambio de parámetros PID están activados, PID_Temp utiliza en cada
caso un tiempo de muestreo propio del algoritmo PID para calefacción y refrigeración. En todas
las demás configuraciones se utiliza solo el tiempo de muestreo del algoritmo PID para
calefacción.
Si se utiliza OutputHeat_PWM o OutputCool_PWM, se emplea el tiempo de muestreo del
algoritmo PID como duración del período de la modulación del ancho de impulso. La precisión
de la señal de salida viene determinada por la relación entre el tiempo de muestreo del
algoritmo PID y el tiempo de ciclo del OB. El tiempo de ciclo debería ser como máximo una
décima parte del tiempo de muestreo del algoritmo PID.
Al utilizar OutputHeat_PWM o OutputCool_PWM, si el tiempo de muestreo del algoritmo PID,
y por tanto la duración del período de la modulación del ancho de impulso, es demasiado
grande para mejorar la uniformidad del valor real, en los parámetros
Config.Output.Heat.PwmPeriode y Config.Output.Cool.PwmPeriode respectivamente debe
especificarse una duración del período más corta.

Sentido de regulación
PID_Temp puede utilizarse para aplicaciones de calefacción o de calefacción/refrigeración y
trabaja de forma fija en el sentido de regulación normal.

3768

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Con un aumento del valor de salida PID (PidOutputSum) debería lograrse un aumento del valor
real. Los valores resultantes del valor de salida PID en las salidas para calefacción y
refrigeración se obtienen del escalado de salida configurado.
No se admite la inversión del sentido de regulación ni la ganancia proporcional negativa.
Si para la aplicación en cuestión solo se necesita un valor de salida cuyo aumento debe
provocar una reducción del valor real (p. ej., regulación de desagües), puede utilizarse
PID_Compact con el sentido de regulación invertido.

Parámetros de entrada PID_Temp
Parámetro

Tipo de datos Ajuste prede‐ Descripción
terminado

Setpoint

REAL

0.0

Consigna del regulador PID en modo automático
Rango de valores admisible:
Config.SetpointUpperLimit ≥ Setpoint ≥ Config.SetpointLowerLimit
Config.InputUpperLimit ≥ Setpoint ≥ Config.InputLowerLimit

Input

REAL

0.0

Una variable del programa de usuario se utiliza como origen del valor real.
Si se utiliza el parámetro Input, debe cumplirse lo siguiente: Config.InputPe‐
rOn = FALSE.

Input_PER

INT

0

Una entrada analógica se utiliza como origen del valor real.
Si se utiliza el parámetro Input_PER, debe cumplirse lo siguiente: Config.In‐
putPerOn = TRUE.

Disturbance

REAL

0.0

Magnitud perturbadora o valor de control anticipativo

ManualEna‐
ble

BOOL

FALSE

● El flanco FALSE -> TRUE activa el modo de operación "Modo manual",
State = 4, Mode no cambia.
Mientras se cumple ManualEnable = TRUE, no es posible cambiar el modo
de operación mediante un flanco ascendente en ModeActivate, ni utilizar el
diálogo de puesta en servicio.
● El flanco TRUE -> FALSE activa el modo de operación especificado en
Mode.
Se recomienda cambiar los modos de operación solo mediante Mode y Mo‐
deActivate.

Programación del PLC
Manual de programación y manejo, 11/2019

3769

Instrucciones
4.1 Instrucciones
Parámetro

Tipo de datos Ajuste prede‐ Descripción
terminado

ManualValue REAL

0.0

Valor manual
Este valor se utiliza en el modo manual como valor de salida PID (PidOutput‐
Sum).
Los valores resultantes de este valor manual en las salidas para calefacción y
refrigeración se obtienen del escalado de salida configurado (estructuras Con‐
fig.Output.Heat y Config.Output.Cool).
Para reguladores con salida de refrigeración activada (Config.ActivateCooling
= TRUE) debe indicarse:
● un valor manual positivo, para emitir el valor a las salidas para calefacción;
● un valor manual negativo, para emitir el valor a las salidas para
refrigeración.
El rango de valores permitido depende de la configuración.
● Salida de refrigeración desactivada (Config.ActivateCooling = FALSE):
Config.Output.Heat.PidUpperLimit ≥ ManualValue ≥
Config.Output.Heat.PidLowerLimit
● Salida de refrigeración activada (Config.ActivateCooling = TRUE):
Config.Output.Heat.PidUpperLimit ≥ ManualValue ≥
Config.Output.Cool.PidLowerLimit

ErrorAck

BOOL

FALSE

● Flanco FALSE -> TRUE
ErrorBits y Warning se desactivan.

Reset

BOOL

FALSE

Realiza un rearranque completo del regulador.
● Flanco FALSE -> TRUE
–

Cambio al modo de operación "Inactivo".

–

ErrorBits y Warning se desactivan.

● Mientras se cumpla Reset = TRUE,
–

PID_Temp permanece en el modo de operación "Inactivo" (State = 0);

–

no es posible modificar el modo de operación mediante Mode y
ModeActivate o ManualEnable;

–

no es posible utilizar el diálogo de puesta en marcha.

● Flanco TRUE -> FALSE

ModeActiva‐
te

3770

BOOL

FALSE

–

Si ManualEnable = FALSE, PID_Temp cambia al modo de operación
que está guardado en Mode.

–

Si Mode = 3 (modo automático), la acción I se trata como se haya
configurado a través de la variable IntegralResetMode.

● Flanco FALSE -> TRUE
PID_Temp cambia al modo de operación que se ha ajustado en la entrada
Mode.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetro de salida PID_Temp
Parámetro

Tipo de
datos

Ajuste prede‐
terminado

Descripción

ScaledInput

REAL

0.0

Valor real escalado

OutputHeat

REAL

0.0

Valor de salida para calefacción en el formato REAL
El valor de salida PID (PidOutputSum) se escala mediante los dos pares de
valores Config.Output.Heat.PidUpperLimit, Config.Output.Heat.UpperScaling
y Config.Output.Heat.PidLowerLimit, Config.Output.Heat.LowerScaling y se
emite en el formato REAL a OutputHeat.
OutputHeat se calcula siempre.

OutputCool

REAL

0.0

Valor de salida para refrigeración en el formato REAL
El valor de salida PID (PidOutputSum) se escala mediante los dos pares de
valores Config.Output.Cool.PidUpperLimit, Config.Output.Cool.LowerScaling
y Config.Output.Cool.PidLowerLimit, Config.Output.Cool.UpperScaling y se
emite en el formato REAL a OutputCool.
OutputCool solo se calcula si la salida de refrigeración está activada (Con‐
fig.ActivateCooling = TRUE).

Output‐
Heat_PER

INT

0

Valor de salida para calefacción analógico
El valor de salida PID (PidOutputSum) se escala mediante los dos pares de
valores Config.Output.Heat.PidUpperLimit, Config.Output.Heat.PerUpperSca‐
ling y Config.Output.Heat.PidLowerLimit, Config.Output.Heat.PerLowerSca‐
ling y se emite como valor analógico a OutputHeat_PER.
OutputHeat_PER solo se calcula si Config.Output.Heat.Select = 2.

Output‐
Cool_PER

INT

0

Valor de salida para refrigeración analógico
El valor de salida PID (PidOutputSum) se escala mediante los dos pares de
valores Config.Output.Cool.PidUpperLimit, Config.Output.Cool.PerLowerSca‐
ling y Config.Output.Cool.PidLowerLimit, Config.Output.Cool.PerUpperSca‐
ling y se emite como valor analógico a OutputCool_PER.
OutputCool_PER solo se calcula si la salida de refrigeración está activada
(Config.ActivateCooling = TRUE) y Config.Output.Cool.Select = 2.

Output‐
Heat_PWM

BOOL

FALSE

Valor de salida con modulación de ancho de impulsos para calefacción
El valor de salida PID (PidOutputSum) se escala mediante los dos pares de
valores Config.Output.Heat.PidUpperLimit, Config.Output.Heat.PwmUpperS‐
caling y Config.Output.Heat.PidLowerLimit, Config.Output.Heat.PwmLowerS‐
caling y se emite como valor con modulación de ancho de impulsos (tiempos
de conexión y desconexión variables) a OutputHeat_PWM.
OutputHeat_PWM solo se calcula si Config.Output.Heat.Select = 1.

Output‐
Cool_PWM

BOOL

FALSE

Valor de salida con modulación de ancho de impulsos para refrigeración
El valor de salida PID (PidOutputSum) se escala mediante los dos pares de
valores Config.Output.Cool.PidUpperLimit, Config.Output.Cool.PwmLowerS‐
caling y Config.Output.Cool.PidLowerLimit, Config.Output.Cool.PwmUpperS‐
caling y se emite como valor con modulación de ancho de impulsos (tiempos
de conexión y desconexión variables) a OutputCool_PWM.
OutputCool_PWM solo se calcula si la salida de refrigeración está activada
(Config.ActivateCooling = TRUE) y Config.Output.Cool.Select = 1.

SetpointLi‐
mit_H

BOOL

FALSE

Si SetpointLimit_H = TRUE, significa que se ha alcanzado el límite superior
absoluto de la consigna (Setpoint ≥ Config.SetpointUpperLimit o Set‐
point ≥ Config.InputUpperLimit).
La consigna se limita hacia arriba al mínimo a partir de Config.SetpointUpper‐
Limit y Config.InputUpperLimit.

Programación del PLC
Manual de programación y manejo, 11/2019

3771

Instrucciones
4.1 Instrucciones
Parámetro

Tipo de
datos

SetpointLimit_L BOOL

Ajuste prede‐
terminado

Descripción

FALSE

Si SetpointLimit_L = TRUE, significa que se ha alcanzado el límite inferior
absoluto de la consigna (Setpoint ≤ Config.SetpointLowerLimit o Set‐
point ≤ Config.InputLowerLimit).
La consigna se limita hacia abajo al máximo de Config.SetpointLowerLimit y
Config.InputLowerLimit.

InputWar‐
ning_H

BOOL

FALSE

Si InputWarning_H = TRUE, significa que se ha alcanzado o rebasado el límite
superior de advertencia del valor real (ScaledInput ≥ Config.InputUpperWar‐
ning).

InputWar‐
ning_L

BOOL

FALSE

Si InputWarning_L = TRUE, significa que se ha alcanzado o rebasado por
defecto el límite inferior de advertencia del valor real (ScaledInput ≤ Config.In‐
putLowerWarning).

State

INT

0

El Parámetros State y Mode PID_Temp (Página 3809) indica el modo de ope‐
ración actual del regulador PID. El modo de operación se cambia con el pará‐
metro de entrada Mode y un flanco ascendente en ModeActivate. Para Opti‐
mización inicial y Optimización fina, con Heat.EnableTuning y Cool.EnableTu‐
ning se define si la optimización se ejecuta para la calefacción o para la refri‐
geración.
● State = 0: Inactivo
● State = 1: Optimización inicial
● State = 2: Optimización fina
● State = 3: Modo automático
● State = 4: Modo manual
● State = 5: Valor de salida sustitutivo con monitorización de errores

Error

BOOL

FALSE

Si Error = TRUE, existe al menos un mensaje de error en el ciclo actual.

ErrorBits

DWORD

DW#16#0

El Parámetro ErrorBits PID_Temp (Página 3818) indica qué mensajes de error
existen.
ErrorBits es remanente y se reinicia mediante un flanco ascendente en Reset
o ErrorAck.

3772

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetro de entrada/salida PID_Temp
Parámetro

Tipo de da‐
tos

Ajuste pre‐
determina‐
do

Descripción

Mode

INT

4

En Mode se especifica el modo de operación al que debe cambiar PID_Temp.
Posibilidades:
● Mode = 0: Inactivo
● Mode = 1: Optimización inicial
● Mode = 2: Optimización fina
● Mode = 3: Modo automático
● Mode = 4: Modo manual
El modo se activa mediante:
● Flanco ascendente en ModeActivate
● Flanco descendente en Reset
● Flanco descendente en ManualEnable
● Arranque en frío de la CPU si RunModeByStartup = TRUE
Para Optimización inicial y Optimización fina, con Heat.EnableTuning y Cool.Ena‐
bleTuning se define si la optimización se ejecuta para la calefacción o para la
refrigeración.
Mode es remanente.
Encontrará una descripción detallada de los modos de operación en Parámetros
State y Mode (Página 3809).

Programación del PLC
Manual de programación y manejo, 11/2019

3773

Instrucciones
4.1 Instrucciones
Parámetro

Tipo de da‐
tos

Ajuste pre‐
determina‐
do

Master

DWORD

DW#16#0

Descripción

Interfaz para regulación en cascada
Si esta instancia PID_Temp se utiliza como regulador esclavo en una cascada
(Config.Cascade.IsSlave = TRUE), asigne el parámetro Maestro en la llamada de
instrucción con el parámetro "Esclavo" del regulador maestro.
Ejemplo:
Llamada de un regulador esclavo "PID_Temp_2" con regulador maestro
"PID_Temp_1" en SCL:
---------------------------------------------------------------------------"PID_Temp_2" (Master := "PID_Temp_1".Slave, Setpoint :=
"PID_Temp_1".OutputHeat);
---------------------------------------------------------------------------Mediante esta interfaz los reguladores esclavos intercambian información acerca
del modo de operación, la limitación y la consigna sustitutiva con su regulador
maestro. Tenga en cuenta que la llamada del regulador maestro debe realizarse
antes de la llamada del regulador esclavo y en el mismo OB de alarma cíclica.
Asignación:
● Bits 0 a 15: no asignado
● Bits 16 a 23, contador de limitaciones:
Un regulador esclavo cuyo valor de salida se encuentra en limitación
incrementa este contador. El regulador maestro reacciona en consecuencia
según el número configurado de esclavos (Config.Cascade.CountSlaves) y el
modo Anti-Windup (Config.Cascade.AntiWindUpMode).
● Bit 24, modo automático de los reguladores esclavos:
TRUE, si todos los reguladores esclavos se encuentran en el Modo
automático
● Bit 25, consigna sustitutiva de los reguladores esclavos:
TRUE, si un regulador esclavo ha activado la consigna sustitutiva
(SubstituteSetpointOn = TRUE)

Slave

DWORD

DW#16#0

Interfaz para regulación en cascada
Mediante esta interfaz los reguladores esclavos intercambian información acerca
del modo de operación, la limitación y la consigna sustitutiva con su regulador
maestro.
Ver la descripción del parámetro "Maestro"

Consulte también
Parámetros State y Mode PID_Temp (Página 3809)

Variables estáticas PID_Temp
Nota
Modifique las variables marcadas con (1) solo en el modo de operación "Inactivo" para evitar un
comportamiento erróneo del regulador PID.

3774

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Variable

Tipo de
datos

IntegralResetMode

Int

Ajuste pre‐
determina‐
do

Descripción

V1.0: 1,

La Variable IntegralResetMode (Página 3826)determina cómo
se preasigna la acción I PIDCtrl.IOutputOld al cambiar del mo‐
do de operación "Inactivo" al "Modo automático".

A partir de
V1.1: 4

Este ajuste surte efecto solo para un ciclo.
● IntegralResetMode = 0: Filtrar
● IntegralResetMode = 1: Borrar
● IntegralResetMode = 2: Mantener
● IntegralResetMode = 3: Preasignar
● IntegralResetMode = 4: Como el cambio de consigna (solo
para PID_Temp con versión ≥ 1.1)

OverwriteInitialOutputValue

REAL

0.0

Si se cumple una de las siguientes condiciones, la acción in‐
tegral de PIDCtrl.IOutputOld se preasigna automáticamente
como si en el ciclo anterior hubiese sido PIDOutputSum =
OverwriteInitialOutputValue:
● IntegralResetMode = 3 al cambiar del modo de operación
"Inactivo" al "Modo automático".
● Flanco TRUE -> FALSE en el parámetro Reset y el
parámetro Mode = 3
● PIDCtrl.PIDInit = TRUE en el "Modo automático"
(disponible a partir de PID_Temp versión 1.1)

RunModeByStartup

BOOL

TRUE

Activar Mode después del rearranque de la CPU
● Si RunModeByStartup = TRUE, PID_Temp se inicia
después del arranque de la CPU en el modo de operación
guardado en Mode.
● Si RunModeByStartup = FALSE, PID_Temp permanece en
modo de operación "Inactivo" después del arranque de la
CPU.

LoadBackUp

BOOL

Programación del PLC
Manual de programación y manejo, 11/2019

FALSE

Si LoadBackUp = TRUE, se carga nuevamente el último juego
de parámetros PID de la estructura CtrlParamsBackUp. El jue‐
go se guardó antes de la última optimización. LoadBackUp se
vuelve a ajustar automáticamente a FALSE. El valor se aplica
sin discontinuidad.

3775

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

SetSubstituteOutput

BOOL

TRUE

Selección del valor de salida mientras haya un error pendiente
(State = 5):
● Si SetSubstituteOutput = TRUE y
ActivateRecoverMode = TRUE, el valor de salida
sustitutivo SubstituteOutput configurado se emite como
valor de salida PID mientras haya un error pendiente.
● Si SetSubstituteOutput = FALSE y
ActivateRecoverMode = TRUE, el actuador permanece en
el valor de salida PID actual mientras haya un error
pendiente.
● Si ActivateRecoverMode = FALSE, SetSubstituteOutput
queda sin efecto.
● Si SubstituteOutput no es válido (ErrorBits = 0020000h), el
valor de salida sustitutivo no se puede emitir. En este caso
se utiliza el límite inferior del valor de salida PID para
calefacción (Config.Output.Heat.PidLowerLimit) como
valor de salida PID.

PhysicalUnit

INT

0

Unidad física del valor real y de la consigna, p. ej. ºC o ºF.
Este parámetro sirve para la visualización en los editores y no
altera el algoritmo de regulación.

PhysicalQuantity

INT

0

Unidad física del valor real y de la consigna, p. ej. temperatura.
Este parámetro sirve para la visualización en los editores y no
altera el algoritmo de regulación.

ActivateRecoverMode

BOOL

TRUE

La variable ActivateRecoverMode determina el comportamien‐
to en caso de error.

Warning

DWOR
D

0

La variable Warning muestra las advertencias desde Reset =
TRUE o ErrorAck =TRUE. Warning es remanente.

Progress

REAL

0.0

Progreso de la fase actual de optimización en porcentaje (0.0 100.0)

CurrentSetpoint

REAL

0.0

CurrentSetpoint muestra siempre la consigna efectiva actual.
Este valor se congela durante la optimización.

CancelTuningLevel

REAL

10.0

Fluctuación admisible de la consigna durante la optimización.
La optimización no se cancela hasta que no se cumple:
● Setpoint > CurrentSetpoint + CancelTuningLevel
o bien
● Setpoint < CurrentSetpoint - CancelTuningLevel

3776

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

SubstituteOutput

REAL

0.0

El valor de salida sustitutivo se utiliza como valor de salida PID
siempre que se cumplan las siguientes condiciones:
● En el modo automático hay uno o varios errores pendientes
en los que interviene ActivateRecoverMode;
● SetSubstituteOutput = TRUE
● ActivateRecoverMode= TRUE.
Los valores resultantes del valor de salida sustitutivo en las
salidas para calefacción y refrigeración se obtienen del esca‐
lado de salida configurado (estructuras Config.Output.Heat y
Config.Output.Cool).
Para reguladores con salida de refrigeración activada (Con‐
fig.ActivateCooling = TRUE) debe indicarse:
● un valor de salida sustitutivo positivo, para emitir el valor a
las salidas para calefacción;
● un valor de salida sustitutivo negativo, para emitir el valor a
las salidas para refrigeración.
El rango de valores permitido depende de la configuración.
● Salida de refrigeración desactivada
(Config.ActivateCooling = FALSE):
Config.Output.Heat.PidUpperLimit ≥ SubstituteOutput ≥
Config.Output.Heat.PidLowerLimit
● Salida de refrigeración activada (Config.ActivateCooling =
TRUE):
Config.Output.Heat.PidUpperLimit ≥ SubstituteOutput ≥
Config.Output.Cool.PidLowerLimit

PidOutputSum

REAL

0.0

Valor de salida PID
PidOutputSum muestra el valor de salida del algoritmo PID. En
función del modo de operación se calcula automáticamente o
mediante el valor manual, o bien se especifica el valor de sa‐
lida sustitutivo configurado.
Los valores resultantes del valor de salida PID en las salidas
para calefacción y refrigeración se obtienen del escalado de
salida configurado (estructuras Config.Output.Heat y Con‐
fig.Output.Cool).
PidOutputSum se limita en función de la configuración.
● Salida de refrigeración desactivada
(Config.ActivateCooling = FALSE):
Config.Output.Heat.PidUpperLimit ≥ PidOutputSum ≥
Config.Output.Heat.PidLowerLimit
● Salida de refrigeración activada (ConfigActivateCooling =
TRUE):
Config.Output.Heat.PidUpperLimit ≥ PidOutputSum ≥
Config.Output.Cool.PidLowerLimit

Programación del PLC
Manual de programación y manejo, 11/2019

3777

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

PidOutputOffsetHeat

REAL

0.0

Offset del valor de salida PID para calefacción
PidOutputOffsetHeat se suma al valor que resulta de PidOut‐
putSum para el circuito de calefacción. Especifique un valor
positivo para PidOutputOffsetHeat para obtener un offset po‐
sitivo en las salidas para calefacción.
Los valores resultantes en las salidas para calefacción se ob‐
tienen del escalado de salida configurado (estructura Con‐
fig.Output.Heat).
Este offset puede utilizarse para actuadores que necesitan un
valor mínimo fijo, p. ej., ventiladores con una velocidad mínima.

PidOutputOffsetCool

REAL

0.0

Offset del valor de salida PID para refrigeración
PidOutputOffsetCool se suma al valor que resulta de PidOut‐
putSum para el circuito de refrigeración. Especifique un valor
negativo para PidOutputOffsetCool para obtener un offset po‐
sitivo en las salidas para refrigeración.
Los valores resultantes en las salidas para refrigeración se
obtienen del escalado de salida configurado (estructura Con‐
fig.Output.Cool).
Este offset puede utilizarse para actuadores que necesitan un
valor mínimo fijo, p. ej., ventiladores con una velocidad mínima.

SubstituteSetpointOn

BOOL

FALSE

Activa la consigna sustitutiva como consigna del regulador.
● FALSE = se utiliza el parámetro Setpoint;
● TRUE = el parámetro SubstituteSetpoint se utiliza como
consigna.
SubstituteSetpointOn puede utilizarse para especificar direc‐
tamente la consigna de un regulador esclavo en una cascada
sin tener que modificar el programa de usuario.

SubstituteSetpoint

REAL

0.0

Consigna sustitutiva
Si SubstituteSetpointOn = TRUE, se utiliza la consigna susti‐
tutiva SubstituteSetpoint como consigna.
Rango de valores admisible:
Config.SetpointUpperLimit ≥ SubstituteSetpoint ≥ Config.Set‐
pointLowerLimit, Config.InputUpperLimit ≥ SubstituteSet‐
point ≥ Config.InputLowerLimit

DisableCooling

BOOL

FALSE

Para reguladores de calefacción (Config.ActivateCooling =
TRUE) en Modo automático, DisableCooling = TRUE desacti‐
va el circuito de refrigeración limitando PidOutputSum al límite
inferior 0.0.
PidOutputOffsetCool y el escalado de salida para las salidas
para refrigeración permanecen activos.
DisableCooling puede utilizarse para la optimización de apli‐
caciones multizona, para desactivar temporalmente el circuito
de calefacción, mientras haya reguladores que todavía no ha‐
yan finalizado su optimización.
Este parámetro se ajusta manualmente/reinicia por parte del
usuario y no se reinicia automáticamente con la instrucción
PID_Temp.

3778

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

AllSlaveAutomaticState

BOOL

FALSE

Si dicha instancia PID_Temp se utiliza como regulador maes‐
tro de una cascada (Config.Cascade.IsMaster = TRUE), AllS‐
laveAutomaticState = TRUE indica que todos los reguladores
esclavos se encuentran en el modo automático.
Los modos Optimización, Manual y Automático del regulador
maestro solo pueden ejecutarse correctamente si todos los
reguladores esclavos se encuentran en el modo automático.
AllSlaveAutomaticState solo se calcula si se han interconecta‐
do reguladores maestros y esclavos mediante los parámetros
"Maestro" y "Esclavo".
Para conocer más detalles, ver el parámetro "Maestro".

NoSlaveSubstituteSetpoint

BOOL

FALSE

Si dicha instancia PID_Temp se utiliza como regulador maes‐
tro de una cascada (Config.Cascade.IsMaster = TRUE), NoS‐
laveSubstituteSetpoint = TRUE indica que ningún regulador
esclavo ha activado su consigna sustitutiva.
Los modos Optimización, Manual y Automático del regulador
maestro solo pueden ejecutarse correctamente si ningún re‐
gulador esclavo ha activado su consigna sustitutiva.
NoSlaveSubstituteSetpoint solo se calcula si se han interco‐
nectado reguladores maestros y esclavos mediante los pará‐
metros "Maestro" y "Esclavo".
Para conocer más detalles, ver el parámetro "Maestro".

Heat.EnableTuning

BOOL

TRUE

Habilitación de la optimización para calefacción
Heat.EnableTuning debe estar ajustado para las siguientes
optimizaciones (coincidiendo con el inicio o antes de este con
Mode y ModeActivate):
● Optimización inicial para calefacción
● Optimización inicial para calefacción y refrigeración
● Optimización fina para calefacción
Este parámetro no se reinicia automáticamente con la instruc‐
ción PID_Temp.

Cool.EnableTuning

BOOL

FALSE

Habilitación de la optimización para refrigeración
Cool.EnableTuning debe estar ajustado para las siguientes
optimizaciones (coincidiendo con el inicio o antes de este con
Mode y ModeActivate):
● Optimización inicial para refrigeración
● Optimización inicial para calefacción y refrigeración
● Optimización fina para refrigeración
Solo es efectivo si la salida de refrigeración y el cambio de
parámetros PID están activados ("Config.ActivateCooling" =
TRUE y "Config.AdvancedCooling" = TRUE).
Este parámetro no se reinicia automáticamente con la instruc‐
ción PID_Temp.

Config.InputPerOn(1)

BOOL

Programación del PLC
Manual de programación y manejo, 11/2019

TRUE

Si InputPerOn = TRUE, el parámetro Input_PER se utiliza para
medir el valor real. Si InputPerOn = FALSE, se utiliza el pará‐
metro Input.

3779

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

Config.InputUpperLimit(1)

REAL

120.0

Límite superior del valor real
Se vigila que Input y Input_PER respeten estos límites. Si se
rebasa el límite, se emite un error y se reacciona en función de
ActivateRecoverMode.
En la entrada de periferia, el valor real puede encontrarse co‐
mo máximo un 18% por encima del rango nominal (rango de
saturación). Por eso, si se utiliza la entrada de periferia con el
ajuste predeterminado para el límite superior y el escalado del
valor real, no es posible rebasar el límite.
Al iniciar una optimización inicial se verifica, basándose en la
diferencia entre los límites superior e inferior del valor real, si la
distancia entre el valor de consigna y el valor real cumple los
requisitos necesarios.
InputUpperLimit > InputLowerLimit

Config.InputLowerLimit(1)

REAL

0.0

Límite inferior del valor real
Se vigila que Input y Input_PER respeten estos límites. Si el
límite se rebasa por defecto, se emite un error y se reacciona
en función de ActivateRecoverMode.
InputLowerLimit < InputUpperLimit

Config.InputUpperWarning(1)

REAL

3.402822e
+38

Límite superior de advertencia del valor real
Se vigila que Input y Input_PER respeten estos límites. Si se
rebasa el límite, se emite una advertencia al parámetro War‐
ning.
● Si se configura InputUpperWarning a un valor que se
encuentra fuera de los límites del valor real, el límite
superior absoluto configurado para el valor real se utiliza
como límite superior de advertencia.
● Si se configura InputUpperWarning a un valor que se
encuentra dentro de los límites del valor real, este valor se
utiliza como límite superior de advertencia.
InputUpperWarning > InputLowerWarning

Config.InputLowerWarning

(1)

REAL

-3.402822e
+38

Límite inferior de advertencia del valor real
Se vigila que Input y Input_PER respeten estos límites. Si el
límite se rebasa por defecto, se emite una advertencia al pa‐
rámetro Warning.
● Si se configura InputLowerWarning a un valor que se
encuentra fuera de los límites del valor real, el límite inferior
absoluto configurado para el valor real se utiliza como
límite inferior de advertencia.
● Si se configura InputLowerWarning a un valor que se
encuentra dentro de los límites del valor real, este valor se
utiliza como límite inferior de advertencia.
InputLowerWarning < InputUpperWarning

3780

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

Config.SetpointUpperLimit(1)

REAL

3.402822e
+38

Límite superior de la consigna
Se vigila que Setpoint y SubstituteSetpoint respeten estos lí‐
mites. Si se rebasa el límite, se emite una advertencia al pa‐
rámetro Warning.
● Si se configura SetpointUpperLimit a un valor que se
encuentra fuera de los límites del valor real, el límite
superior absoluto configurado para el valor real se utiliza
como límite superior de la consigna.
● Si se configura SetpointUpperLimit a un valor que se
encuentra dentro de los límites del valor real, este valor se
utiliza como límite superior de la consigna.
SetpointUpperLimit > SetpointLowerLimit

Config.SetpointLowerLimit

(1)

REAL

-3.402822e
+38

Límite inferior de la consigna
Se vigila que Setpoint y SubstituteSetpoint respeten estos lí‐
mites. Si el límite se rebasa por defecto, se emite una adver‐
tencia al parámetro Warning.
● Si se configura SetpointLowerLimit a un valor que se
encuentra fuera de los límites del valor real, el límite inferior
absoluto configurado para el valor real se utiliza como
límite inferior de la consigna.
● Si se configura SetpointLowerLimit a un valor que se
encuentra dentro de los límites del valor real, este valor se
utiliza como límite inferior de la consigna.
SetpointLowerLimit < SetpointUpperLimit

Config.ActivateCooling(1)

BOOL

FALSE

Activación de la salida de refrigeración
● Config.ActivateCooling = FALSE
Solo se utilizan las salidas para calefacción.
● Config.ActivateCooling = TRUE
Se utilizan las salidas para calefacción y refrigeración.
Si se utiliza la salida de refrigeración, el regulador no puede
estar configurado como regulador maestro (Config.Casca‐
de.IsMaster debe ser FALSE).

Programación del PLC
Manual de programación y manejo, 11/2019

3781

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

Config.AdvancedCooling(1)

BOOL

TRUE

Método para calefacción/refrigeración
● Factor de refrigeración (Config.AdvancedCooling =
FALSE)
El valor de salida para refrigeración se calcula con el
parámetro PID para calefacción (estructura
Retain.CtrlParams.Heat) considerando el factor de
refrigeración Config.CoolFactor configurable.
Este método está indicado si los actuadores de calefacción
y refrigeración presentan un comportamiento temporal
similar pero ganancias distintas.
Con este método no están disponibles la optimización
inicial ni la optimización fina para refrigeración. Solo
pueden ejecutarse las optimizaciones para calefacción.
● Cambio de parámetros PID (Config.AdvancedCooling =
TRUE)
El valor de salida para refrigeración se calcula mediante un
juego de parámetros PID propio (estructura
Retain.CtrlParams.Cool).
Este método está indicado si los actuadores de calefacción
y refrigeración presentan comportamientos temporales y
ganancias distintas.
La optimización inicial y la optimización fina para
refrigeración solo están disponibles con este método
(Mode = 1 o 2, Cool.EnableTuning = TRUE).
Config.AdvancedCooling solo es efectivo si la salida de refri‐
geración está activada (Config.ActivateCooling = TRUE).

Config.CoolFactor(1)

REAL

1.0

Factor de refrigeración
Si Config.AdvancedCooling = FALSE, Config.CoolFactor se
tiene en cuenta como factor en el cálculo del valor de salida
para refrigeración. De esta manera pueden contemplarse dis‐
tintas ganancias del actuador de calefacción y refrigeración.
Config.CoolFactor no se ajusta automáticamente o se adapta
durante la optimización. Config.CoolFactor debe configurarse
a mano correctamente con la relación "Ganancia del actuador
de calefacción / ganancia del actuador de refrigeración".
Ejemplo: Config.CoolFactor = 2.0 significa que la ganancia del
actuador de calefacción es el doble de intensa que la ganancia
del actuador de refrigeración.
Config.CoolFactor solo es efectivo si la salida de refrigeración
está activada (Config.ActivateCooling = TRUE) y se ha selec‐
cionado el factor de refrigeración como método para la cale‐
facción/refrigeración (Config.AdvancedCooling = FALSE).
Config.CoolFactor > 0.0

3782

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

Config.InputScaling.UpperPoin‐
tIn(1)

REAL

27648.0

Escalado Input_PER arriba
Mediante los dos pares de valores UpperPointOut, UpperPoin‐
tIn y LowerPointOut, LowerPointIn, se escala Input_PER.
Solo es efectivo si Input_PER se utiliza para la obtención del
valor real (Config.InputPerOn = TRUE).
UpperPointIn > LowerPointIn

Config.InputScaling.LowerPoin‐
tIn(1)

REAL

0.0

Escalado Input_PER abajo
Mediante los dos pares de valores UpperPointOut, UpperPoin‐
tIn y LowerPointOut, LowerPointIn, se escala Input_PER .
Solo es efectivo si Input_PER se utiliza para la obtención del
valor real (Config.InputPerOn = TRUE).
LowerPointIn < UpperPointIn

Config.InputScaling.UpperPoin‐
tOut(1)

REAL

100.0

Valor real superior escalado
Mediante los dos pares de valores UpperPointOut, UpperPoin‐
tIn y LowerPointOut, LowerPointIn, se escala Input_PER.
Solo es efectivo si Input_PER se utiliza para la obtención del
valor real (Config.InputPerOn = TRUE).
UpperPointOut > LowerPointOut

Config.InputScaling.LowerPoin‐
tOut(1)

REAL

0.0

Valor real inferior escalado
Mediante los dos pares de valores UpperPointOut, UpperPoin‐
tIn y LowerPointOut, LowerPointIn, se escala Input_PER.
Solo es efectivo si Input_PER se utiliza para la obtención del
valor real (Config.InputPerOn = TRUE).
LowerPointOut < UpperPointOut

Config.Output.Heat.Select(1)

INT

1

Selección del valor de salida para calefacción
Config.Output.Heat.Select especifica qué salidas se utilizan
para la calefacción:
● Heat.Select = 0 - se utiliza OutputHeat
● Heat.Select = 1 - se utilizan OutputHeat y
OutputHeat_PWM
● Heat.Select = 2 - se utilizanOutputHeat y OutputHeat_PER
Las salidas no utilizadas no se calculan y se mantiene su valor
predeterminado.

Programación del PLC
Manual de programación y manejo, 11/2019

3783

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Config.Output.Heat.PwmPeriode(1) REAL

Ajuste pre‐
determina‐
do

Descripción

0.0

Duración del período de la modulación del ancho de impulso
(PWM) para calefacción (salida OutputHeat_PWM) en segun‐
dos:
● Heat.PwmPeriode = 0.0
El tiempo de muestreo del algoritmo PID para calefacción
(Retain.CtrlParams.Heat.Cycle) se utiliza como duración
del período de la PWM.
● Heat.PwmPeriode > 0.0
El valor se redondea a un a un múltiplo entero del tiempo de
muestreo PID_Temp (CycleTime.Value) y se utiliza como
duración del período de la PWM.
Con este ajuste puede mejorarse la uniformidad del valor
real si el tiempo de muestreo del algoritmo PID es grande.
El valor debe cumplir las condiciones siguientes:

Config.Output.Heat.PidUpperLi‐
mit(1)

REAL

100.0

–

Heat.PwmPeriode ≤ Retain.CtrlParams.Heat.Cycle,

–

Heat.PwmPeriode >
Config.Output.Heat.MinimumOnTime

–

Heat.PwmPeriode >
Config.Output.Heat.MinimumOffTime

Límite superior del valor de salida PID para calefacción
El valor de salida PID (PidOutputSum) queda limitado a este
límite superior.
Heat.PidUpperLimit forma, junto con los siguientes paráme‐
tros, un par de valores para el escalado del valor de salida PID
(PidOutputSum) en las salidas para calefacción:
● Heat.UpperScaling para OutputHeat
● Heat.PwmUpperScaling para OutputHeat_PWM
● Heat.PerUpperScaling para OutputHeat_PER
Si se desea limitar el valor en la salida correspondiente, deben
modificarse también estos valores de escalado.
Heat.PidUpperLimit > Heat.PidLowerLimit

3784

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

Config.Output.Heat.PidLowerLi‐
mit(1)

REAL

0.0

Límite inferior del valor de salida PID para calefacción
En aquellos reguladores cuya salida de refrigeración está de‐
sactivada (Config.ActivateCooling = FALSE), el valor de salida
PID (PidOutputSum) queda limitado a este límite inferior.
En aquellos reguladores cuya salida de refrigeración está ac‐
tivada (Config.ActivateCooling = TRUE), este valor debe ser
0.0.
Heat.PidLowerLimit forma, junto con los siguientes paráme‐
tros, un par de valores para el escalado del valor de salida PID
(PidOutputSum) en las salidas para calefacción:
● Heat.LowerScaling para OutputHeat
● Heat.PwmLowerScaling para OutputHeat_PWM
● Heat.PerLowerScaling para OutputHeat_PER
Si se desea limitar el valor en la salida correspondiente, deben
modificarse también estos valores de escalado.
El rango de valores permitido depende de la configuración.
● Salida de refrigeración desactivada
(Config.ActivateCooling = FALSE):
Heat.PidLowerLimit < Heat.PidUpperLimit
● Salida de refrigeración activada (Config.ActivateCooling =
TRUE):
Heat.PidLowerLimit = 0.0

Config.Output.Heat.UpperSca‐
ling(1)

REAL

100.0

Valor de salida superior escalado para calefacción
Heat.UpperScaling y Heat.PidUpperLimit constituyen un par
de valores para el escalado del valor de salida PID (PidOut‐
putSum) en el valor de salida para calefacción (OutputHeat).
El valor de OutputHeat se sitúa siempre entre Heat.UpperS‐
caling y Heat.LowerScaling.
Heat.UpperScaling ≠ Heat.LowerScaling

Config.Output.Heat.LowerSca‐
ling(1)

REAL

0.0

Valor de salida inferior escalado para calefacción
Heat.LowerScaling y Heat.PidLowerLimit constituyen un par
de valores para el escalado del valor de salida PID (PidOut‐
putSum) en el valor de salida para calefacción (OutputHeat).
El valor de OutputHeat se sitúa siempre entre Heat.UpperS‐
caling y Heat.LowerScaling.
Heat.UpperScaling ≠ Heat.LowerScaling

Programación del PLC
Manual de programación y manejo, 11/2019

3785

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

Config.Output.Heat.PwmUpperS‐
caling(1)

REAL

100.0

Valor de salida PWM superior escalado para calefacción
Heat.PwmUpperScaling y Heat.PidUpperLimit constituyen un
par de valores para el escalado del valor de salida PID (Pi‐
dOutputSum) en el valor de salida con modulación de ancho
de impulsos para calefacción (OutputHeat_PWM).
El valor de OutputHeat_PWM se sitúa siempre entre
Heat.PwmUpperScaling y Heat.PWMLowerScaling.
Heat.PwmUpperScaling solo es efectivo si OutputHeat_PWM
está seleccionado como salida para la calefacción (Heat.Se‐
lect = 1).
100.0 ≥ Heat.PwmUpperScaling ≥ 0.0
Heat.PwmUpperScaling ≠ Heat.PwmLowerScaling

Config.Output.Heat.PwmLowerS‐
caling(1)

REAL

0.0

Valor de salida PWM inferior escalado para calefacción
Heat.PwmLowerScaling y Heat.PidLowerLimit constituyen un
par de valores para el escalado del valor de salida PID (Pi‐
dOutputSum) en el valor de salida con modulación de ancho
de impulsos para calefacción (OutputHeat_PWM).
El valor de OutputHeat_PWM se sitúa siempre entre
Heat.PwmUpperScaling y Heat.PwmLowerScaling.
Heat.PwmLowerScaling solo es efectivo si OutputHeat_PWM
está seleccionado como salida para la calefacción (Heat.Se‐
lect = 1).
100.0 ≥ Heat.PwmLowerScaling ≥ 0.0
Heat.PwmUpperScaling ≠ Heat.PwmLowerScaling

SConfig.Output.Heat.PerUpperS‐
caling(1)

REAL

27648.0

Valor de salida analógico superior escalado para calefacción
Heat.PerUpperScaling y Heat.PidUpperLimit constituyen un
par de valores para el escalado del valor de salida PID (Pi‐
dOutputSum) en el valor de salida analógico para calefacción
(OutputHeat_PER).
El valor de OutputHeat_PER se sitúa siempre entre Heat.Pe‐
rUpperScaling y Heat.PerLowerScaling.
Heat.PerUpperScaling solo es efectivo si OutputHeat_PER
está seleccionado como salida para la calefacción (Heat.Se‐
lect = 2).
32511.0 ≥ Heat.PerUpperScaling ≥ -32512.0
Heat.PerUpperScaling ≠ Heat.PerLowerScaling

3786

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Config.Output.Heat.PerLowerSca‐ REAL
ling(1)

Ajuste pre‐
determina‐
do

Descripción

0.0

Valor de salida analógico inferior escalado para calefacción
Heat.PerLowerScaling y Heat.PidLowerLimit constituyen un
par de valores para el escalado del valor de salida PID (Pi‐
dOutputSum) en el valor de salida analógico para calefacción
(OutputHeat_PER).
El valor de OutputHeat_PER se sitúa siempre entre Heat.Pe‐
rUpperScaling y Heat.PerLowerScaling.
Heat.PerLowerScaling solo es efectivo si OutputHeat_PER
está seleccionado como salida para la calefacción (Heat.Se‐
lect = 2).
32511.0 ≥ Heat.PerLowerScaling ≥ -32512.0
Heat.PerUpperScaling ≠ Heat.PerLowerScaling

Config.Output.Heat.MinimumOn‐
Time(1)

REAL

0.0

Tiempo de conexión mínimo de la modulación del ancho de
impulso para calefacción (salida OutputHeat_PWM)
Un impulso PWM nunca es más corto que este valor.
El valor se redondea a:
Heat.MinimumOnTime = n × CycleTime.Value
Heat.MinimumOnTime solo es efectivo si OutputHeat_PWM
está seleccionado como salida para calefacción (Heat.Select =
1).
100000.0 ≥ Heat.MinimumOnTime ≥ 0.0

SConfig.Output.Heat.MinimumOff‐ REAL
Time(1)

0.0

Tiempo de desconexión mínimo de la modulación del ancho de
impulso para calefacción (salida OutputHeat_PWM)
Una pausa PWM nunca es más corta que este valor.
El valor se redondea a:
Heat.MinimumOffTime = n × CycleTime.Value
Heat.MinimumOffTime solo es efectivo si OutputHeat_PWM
está seleccionado como salida para calefacción (Heat.Select =
1).
100000.0 ≥ Heat.MinimumOffTime ≥ 0.0

Config.Output.Cool.Select(1)

INT

1

Selección del valor de salida para refrigeración
Config.Output.Cool.Select especifica qué salidas se utilizan
para la refrigeración:
● Cool.Select = 0 - se utiliza OutputCool
● Cool.Select = 1 - se utilizanOutputCooly OutputCool_PWM
● Cool.Select = 2 - se utilizan OutputCooly OutputCool_PER
Las salidas no utilizadas no se calculan y se mantiene su valor
predeterminado.
Solo es efectivo si la salida de refrigeración está activada
(Config.ActivateCooling = TRUE).

Programación del PLC
Manual de programación y manejo, 11/2019

3787

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Config.Output.Cool.PwmPeriode(1) REAL

Ajuste pre‐
determina‐
do

Descripción

0.0

Duración del período de la modulación del ancho de impulso
para refrigeración (salida OutputCool_PWM) en segundos:
● Cool.PwmPeriode = 0.0 y Config.AdvancedCooling =
FALSE:
El tiempo de muestreo del algoritmo PID para calefacción
(Retain.CtrlParams.Heat.Cycle) se utiliza como duración
del período de la PWM.
● Cool.PwmPeriode = 0.0 y Config.AdvancedCooling =
TRUE:
El tiempo de muestreo del algoritmo PID para refrigeración
(Retain.CtrlParams.Cool.Cycle) se utiliza como duración
del período de la PWM.
● Cool.PwmPeriode > 0.0:
El valor se redondea a un a un múltiplo entero del tiempo de
muestreo PID_Temp (CycleTime.Value) y se utiliza como
duración del período de la PWM.
Con este ajuste puede mejorarse la uniformidad del valor
real si el tiempo de muestreo del algoritmo PID es grande.
El valor debe cumplir las condiciones siguientes:
–

Cool.PwmPeriode ≤ Retain.CtrlParams.Cool.Cycle o
bien Retain.CtrlParams.Heat.Cycle

–

Cool.PwmPeriode >
Config.Output.Cool.MinimumOnTime

–

Cool.PwmPeriode >
Config.Output.Cool.MinimumOffTime

Solo es efectivo si la salida de refrigeración está activada
(Config.ActivateCooling = TRUE).
Config.Output.Cool.PidUpperLi‐
mit(1)

REAL

0.0

Límite superior del valor de salida PID para refrigeración
Este valor debe ser 0.0.
Cool.PidUpperLimit forma, junto con los siguientes paráme‐
tros, un par de valores para el escalado del valor de salida PID
(PidOutputSum) en las salidas para refrigeración:
● Cool.LowerScaling para OutputCool
● Cool.PwmLowerScaling para OutputCool_PWM
● Cool.PerLowerScaling para OutputCool_PER
Estos valores de escalado también deben modificarse si se
desea limitar el valor en la salida correspondiente.
Solo es efectivo si la salida de refrigeración está activada
(Config.ActivateCooling = TRUE).
Cool.PidUpperLimit = 0.0

3788

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

Config.Output.Cool.PidLowerLi‐
mit(1)

REAL

-100.0

Límite inferior del valor de salida PID para refrigeración
En aquellos reguladores cuya salida de refrigeración está ac‐
tivada (Config.ActivateCooling = TRUE), el valor de salida PID
(PidOutputSum) queda limitado a este límite inferior.
Cool.PidLowerLimit forma, junto con los siguientes paráme‐
tros, un par de valores para el escalado del valor de salida PID
(PidOutputSum) en las salidas para refrigeración:
● Cool.UpperScaling para OutputCool
● Cool.PwmUpperScaling para OutputCool_PWM
● Cool.PerUpperScaling para OutputCool_PER
Estos valores de escalado también deben modificarse si se
desea limitar el valor en la salida correspondiente.
Solo es efectivo si la salida de refrigeración está activada
(Config.ActivateCooling = TRUE).
Cool.PidLowerLimit < Cool.PidUpperLimit

Config.Output.Cool.UpperSca‐
ling(1)

REAL

100.0

Valor de salida superior escalado para refrigeración
Cool.UpperScaling y Cool.PidLowerLimit constituyen un par
de valores para el escalado del valor de salida PID (PidOut‐
putSum) en el valor de salida para refrigeración (OutputCool).
El valor de OutputCool se sitúa siempre entre Cool.UpperS‐
caling y Cool.LowerScaling.
Solo es efectivo si la salida de refrigeración está activada
(Config.ActivateCooling = TRUE).
Cool.UpperScaling ≠ Cool.LowerScaling

Config.Output.Cool.LowerSca‐
ling(1)

REAL

0.0

Valor de salida inferior escalado para refrigeración
Cool.LowerScaling y Cool.PidUpperLimit constituyen un par
de valores para el escalado del valor de salida PID (PidOut‐
putSum) en el valor de salida para refrigeración (OutputCool).
El valor de OutputCool se sitúa siempre entre Cool.UpperS‐
caling y Cool.LowerScaling.
Solo es efectivo si la salida de refrigeración está activada
(Config.ActivateCooling = TRUE).
Cool.UpperScaling ≠ Cool.LowerScaling

Config.Output.Cool.PwmUpperS‐
caling(1)

REAL

100.0

Valor de salida PWM superior escalado para refrigeración
Cool.PwmUpperScaling y Cool.PidLowerLimit constituyen un
par de valores para el escalado del valor de salida PID (Pi‐
dOutputSum) en el valor de salida con modulación de ancho
de impulsos para refrigeración (OutputCool_PWM).
El valor de OutputCool_PWM se sitúa siempre entre
Cool.PwmUpperScaling y Cool.PwmLowerScaling.
Cool.PwmUpperScaling solo es efectivo si la salida de refrige‐
ración está activada (Config.ActivateCooling = TRUE) y Out‐
putCool_PWM se ha seleccionado como salida para la refrige‐
ración (Cool.Select = 1).
100.0 ≥ Cool.PwmUpperScaling ≥ 0.0
Cool.PwmUpperScaling ≠ Cool.PwmLowerScaling

Programación del PLC
Manual de programación y manejo, 11/2019

3789

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

Config.Output.Cool.PwmLowerS‐
caling(1)

REAL

0.0

Valor de salida PWM inferior escalado para refrigeración
Cool.PwmLowerScaling y Cool.PidUpperLimit constituyen un
par de valores para el escalado del valor de salida PID (Pi‐
dOutputSum) en el valor de salida con modulación de ancho
de impulsos para refrigeración (OutputCool_PWM).
El valor de OutputCool_PWM se sitúa siempre entre
Cool.PwmUpperScaling y CoolPwm.LowerScaling.
Cool.PwmLowerScaling solo es efectivo si la salida de refrige‐
ración está activada (Config.ActivateCooling = TRUE) y Out‐
putCool_PWM se ha seleccionado como salida para la refrige‐
ración (Cool.Select = 1).
100.0 ≥ Cool.PwmLowerScaling ≥ 0.0
Cool.PwmUpperScaling ≠ Cool.PwmLowerScaling

Config.Output.Cool.PerUpperSca‐
ling(1)

REAL

27648.0

Valor de salida analógico superior escalado para refrigeración
Cool.PerUpperScaling y Cool.PidLowerLimit constituyen un
par de valores para el escalado del valor de salida PID (Pi‐
dOutputSum) en el valor de salida analógico para refrigeración
(OutputCool_PER).
El valor de OutputCool_PER se sitúa siempre entre Cool.Pe‐
rUpperScaling y Cool.PerLowerScaling.
Cool.PerUpperScaling solo es efectivo si la salida de refrige‐
ración está activada (Config.ActivateCooling = TRUE) y Out‐
putCool_PER se ha seleccionado como salida para la refrige‐
ración (Cool.Select = 2).
32511.0 ≥ Cool.PerUpperScaling ≥ -32512.0
Cool.PerUpperScaling ≠ Cool.PerLowerScaling

Config.Output.Cool.PerLowerSca‐
ling(1)

REAL

0.0

Valor de salida analógico inferior escalado para refrigeración
Cool.PerLowerScaling y Cool.PidUpperLimit constituyen un
par de valores para el escalado del valor de salida PID (Pi‐
dOutputSum) en el valor de salida analógico para refrigeración
(OutputCool_PER).
El valor de OutputCool_PER se sitúa siempre entre Cool.Pe‐
rUpperScaling y Cool.PerLowerScaling.
Cool.PerLowerScaling solo es efectivo si la salida de refrige‐
ración está activada (Config.ActivateCooling = TRUE) y Out‐
putCool_PER se ha seleccionado como salida para la refrige‐
ración (Cool.Select = 2).
32511.0 ≥ Cool.PerLowerScaling ≥ -32512.0
Cool.PerUpperScaling ≠ Cool.PerLowerScaling

3790

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Config.Output.Cool.MinimumOnTi‐ REAL
me(1)

Ajuste pre‐
determina‐
do

Descripción

0.0

Tiempo de conexión mínimo de la modulación del ancho de
impulso para refrigeración (salida OutputCool_PWM)
Un impulso PWM nunca es más corto que este valor.
El valor se redondea a:
Cool.MinimumOnTime = n × CycleTime.Value
Cool.MinimumOnTime solo es efectivo si OutputCool_PWM
está seleccionado como salida para refrigeración (Cool.Select
= 1).
Solo es efectivo si la salida de refrigeración está activada
(Config.ActivateCooling = TRUE).
100000.0 ≥ Cool.MinimumOnTime ≥ 0.0

Config.Output.Cool.MinimumOffTi‐ REAL
me(1)

0.0

Tiempo de desconexión mínimo de la modulación del ancho de
impulso para refrigeración (salida OutputCool_PWM)
Una pausa PWM nunca es más corta que este valor.
El valor se redondea a:
Cool.MinimumOffTime = n × CycleTime.Value
Cool.MinimumOffTime solo es efectivo si OutputCool_PWM
está seleccionado como salida para refrigeración (Cool.Select
= 1).
Solo es efectivo si la salida de refrigeración está activada
(Config.ActivateCooling = TRUE).
100000.0 ≥ Cool.MinimumOffTime ≥ 0.0

Si se utiliza PID_Temp en una cascada, los reguladores maestro y esclavo intercambian información a través del parámetro
"Maestro".
La interconexión debe llevarla a cabo el usuario. Para conocer más detalles, ver el parámetro "Maestro".
Config.Cascade.IsMaster(1)

BOOL

FALSE

El regulador es maestro en una cascada y proporciona la con‐
signa para el esclavo.
Ajuste IsMaster = TRUE si desea utilizar esta instancia
PID_Temp como regulador maestro en una cascada.
Un regulador maestro determina la consigna de un regulador
esclavo con su salida. Una instancia PID_Temp puede ser al
mismo tiempo regulador maestro y regulador esclavo.
Si el regulador se utiliza como regulador maestro, la salida de
refrigeración debe estar desactivada (Config.ActivateCooling
= FALSE).

Config.Cascade.IsSlave(1)

BOOL

FALSE

El regulador es esclavo en una cascada y recibe su consigna
del maestro.
Ajuste IsSlave = TRUE si desea utilizar esta instancia
PID_Temp como regulador esclavo en una cascada.
Un regulador esclavo recibe su consigna (parámetro Setpoint)
de la salida de su regulador maestro (parámetro OutputHeat).
Una instancia PID_Temp puede ser al mismo tiempo regulador
maestro y regulador esclavo.

Programación del PLC
Manual de programación y manejo, 11/2019

3791

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

Config.Cascade.AntiWindUpMo‐
de(1)

INT

1

Comportamiento Anti-Windup en la cascada
Posibilidades:
● Anti-Windup = 0
La funcionalidad Anti-Windup está desactivada. El
regulador maestro no reacciona a la limitación de su
regulador esclavo.
● Anti-Windup = 1
La acción I del regulador maestro se reduce en la relación
"Esclavos en limitación" respecto a "Número de esclavos"
(parámetro "CountSlaves"). De este modo se reducen los
efectos de la limitación sobre el comportamiento de
regulación.
● Anti-Windup = 2
La acción I del regulador maestro se mantiene en cuanto
un regulador esclavo se encuentra en la limitación.
Solo es efectivo si el regulador está configurado como regula‐
dor maestro (Config.Cascade.IsMaster = TRUE).

Config.Cascade.CountSlaves(1)

INT

1

Número de esclavos subordinados
Aquí se indica el número de reguladores esclavos directamen‐
te subordinados que reciben su consigna de este regulador
maestro.
Solo es efectivo si el regulador está configurado como regula‐
dor maestro (Config.Cascade.IsMaster = TRUE).
255 ≥ CountSlaves ≥ 1

CycleTime.StartEstimation

BOOL

TRUE

Si CycleTime.EnEstimation = TRUE, CycleTime.StartEstima‐
tion = TRUE inicia la medición automática del tiempo de mues‐
treo PID_Temp (tiempo de ciclo del OB invocante).
Una vez finalizada la medición, se ajusta CycleTime.StartEsti‐
mation = FALSE.

CycleTime.EnEstimation

BOOL

TRUE

Si CycleTime.EnEstimation = TRUE, el tiempo de muestreo
PID_Temp se mide automáticamente.
Si CycleTime.EnEstimation = FALSE, el tiempo de muestreo
PID_Temp no se mide automáticamente y es necesario confi‐
gurar correctamente CycleTime.Value a mano.

CycleTime.EnMonitoring

BOOL

TRUE

Si CycleTime.EnMonitoring = FALSE, el tiempo de muestreo
PID_Temp no se vigila. Si PID_Temp no puede ejecutarse
dentro del tiempo de muestreo, no se emite ningún error (Error‐
Bits=0000800h) y PID_Temp no reacciona como se ha confi‐
gurado con ActivateRecoverMode.

CycleTime.Value(1)

REAL

0.1

Tiempo de muestreo PID_Temp (tiempo de ciclo del OB invo‐
cante) en segundos
CycleTime.Value se calcula automáticamente y equivale nor‐
malmente al tiempo de ciclo del OB invocante.

Los valores de la estructura CtrlParamsBackUp se pueden volver a cargar con LoadBackUp = TRUE.
CtrlParamsBackUp.SetByUser

BOOL

FALSE

Valor almacenado de Retain.CtrlParams.SetByUser

CtrlParamsBackUp.Heat.Gain

REAL

1.0

Ganancia proporcional almacenada para calefacción

3792

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

CtrlParamsBackUp.Heat.Ti

REAL

20.0

Tiempo de integración almacenado para calefacción en se‐
gundos

CtrlParamsBackUp.Heat.Td

REAL

0.0

Tiempo derivativo almacenado para calefacción en segundos

CtrlParamsBackUp.Heat.TdFiltRa‐ REAL
tio

0.2

Coeficiente almacenado del retardo derivativo para calefacción

CtrlParamsBackUp.Heat.PWeigh‐
ting

REAL

1.0

Ponderación almacenada de la acción P para calefacción

CtrlParamsBackUp.Heat.DWeigh‐
ting

REAL

1.0

Ponderación almacenada de la acción D para calefacción

CtrlParamsBackUp.Heat.Cycle

REAL

1.0

Tiempo de muestreo almacenado del algoritmo PID para cale‐
facción en segundos

CtrlParamsBackUp.Heat.Control‐
Zone

REAL

3.402822e
+38

Ancho de zona de regulación almacenado para calefacción

CtrlParamsBackUp.Heat.DeadZo‐
ne

REAL

0.0

Ancho de zona muerta almacenado para calefacción

CtrlParamsBackUp.Cool.Gain

REAL

1.0

Ganancia proporcional almacenada para refrigeración

CtrlParamsBackUp.Cool.Ti

REAL

20.0

Tiempo de integración almacenado para refrigeración en se‐
gundos

CtrlParamsBackUp.Cool.Td

REAL

0.0

Tiempo derivativo almacenado para refrigeración en segundos

CtrlParamsBackUp.Cool.TdFiltRa‐ REAL
tio

0.2

Coeficiente almacenado del retardo derivativo para refrigera‐
ción

CtrlParamsBackUp.Cool.PWeigh‐
ting

REAL

1.0

Factor de ponderación almacenado de la acción P para refri‐
geración

CtrlParamsBackUp.Cool.DWeigh‐
ting

REAL

1.0

Factor de ponderación almacenado de la acción D para refri‐
geración

CtrlParamsBackUp.Cool.Cycle

REAL

1.0

Tiempo de muestreo almacenado del algoritmo PID para refri‐
geración en segundos

CtrlParamsBackUp.Cool.Control‐
Zone

REAL

3.402822e
+38

Ancho de zona de regulación almacenado para refrigeración

CtrlParamsBackUp.Cool.DeadZo‐
ne

REAL

0.0

Ancho de zona muerta almacenado para refrigeración

PIDSelfTune.SUT.CalculatePa‐
ramsHeat

BOOL

FALSE

Las propiedades del circuito de calefacción del sistema regu‐
lado se almacenan durante la optimización inicial para cale‐
facción. Si SUT.CalculateParamsHeat = TRUE, se recalculan
los parámetros PID para calefacción (estructura Retain.CtrlPa‐
rams.Heat) mediante estas propiedades. De este modo puede
cambiarse el método para calcular los parámetros (parámetro
PIDSelfTune.SUT.TuneRuleHeat) sin tener que repetir la opti‐
mización.
SUT.CalculateParamsHeat se ajusta a FALSE después del
cálculo.
Solo es posible si la optimización inicial se ha realizado co‐
rrectamente (SUT.ProcParHeatOk = TRUE).

Programación del PLC
Manual de programación y manejo, 11/2019

3793

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

PIDSelfTune.SUT.CalculatePa‐
ramsCool

BOOL

FALSE

Las propiedades del circuito de refrigeración del sistema regu‐
lado se almacenan durante la optimización para refrigeración.
Si SUT.CalculateParamsCool = TRUE, se recalculan los pará‐
metros PID para refrigeración (estructura Retain.CtrlPa‐
rams.Cool) mediante estas propiedades. De este modo puede
cambiarse el método para calcular los parámetros (parámetro
PIDSelfTune.SUT.TuneRuleCool) sin tener que repetir la opti‐
mización.
SUT.CalculateParamsCool se ajusta a FALSE después del
cálculo.
Solo es posible si la optimización inicial se ha realizado co‐
rrectamente (SUT.ProcParCoolOk = TRUE).
Solo es efectivo si Config.ActivateCooling = TRUE y Con‐
fig.AdvancedCooling = TRUE.

PIDSelfTune.SUT.TuneRuleHeat

INT

2

Método para calcular los parámetros PID durante la optimiza‐
ción inicial para calefacción
Posibilidades:
● SUT.TuneRuleHeat = 0: PID según CHR
● SUT.TuneRuleHeat = 1: PI según CHR
● SUT.TuneRuleHeat = 2: PID para procesos de
temperatura según CHR (provoca un comportamiento de
regulación más lento y más bien asintótico, con menos
sobreoscilaciones que con SUT.TuneRuleHeat = 0)
(CHR = Chien, Hrones y Reswick)
Solo con SUT.TuneRuleHeat = 2 la zona de regulación Re‐
tain.CtrlParams.Heat.ControlZone se ajusta automáticamente
durante la optimización inicial para calefacción.

PIDSelfTune.SUT.TuneRuleCool

INT

2

Método para calcular los parámetros PID durante la optimiza‐
ción inicial para refrigeración
Posibilidades:
● SUT.TuneRuleCool = 0: PID según CHR
● SUT.TuneRuleCool = 1: PI según CHR
● SUT.TuneRuleCool = 2: PID para procesos de temperatura
según CHR (provoca un comportamiento de regulación
más lento y más bien asintótico, con menos
sobreoscilaciones que con SUT.TuneRuleCool = 0)
(CHR = Chien, Hrones y Reswick)
Solo con SUT.TuneRuleCool = 2 la zona de regulación Re‐
tain.CtrlParams.Cool.ControlZone se ajusta automáticamente
durante la optimización inicial para refrigeración.
SUT.TuneRuleCool solo es efectivo si la salida de refrigera‐
ción y el cambio de parámetros PID están activados (Con‐
fig.ActivateCooling = TRUE, Config.AdvancedCooling =
TRUE).

3794

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

PIDSelfTune.SUT.State

INT

0

La variable SUT.State muestra la fase actual de la optimiza‐
ción inicial:
● State = 0: Iniciar la optimización inicial
● State = 100: Calcular desviación estándar de calefacción
● State = 200: Calcular desviación estándar de refrigeración
● State = 300: Determinar punto de inflexión de calefacción
● State = 400: Determinar punto de inflexión de refrigeración
● State = 500: Tras alcanzarse el punto de inflexión de
calefacción, calentar hasta consigna
● State = 600: Tras alcanzarse el punto de inflexión de
refrigeración, calentar hasta consigna
● State = 700: Comparar efecto de actuadores de
calefacción y de refrigeración
● State = 800: Calefacción y refrigeración activadas
● State = 900: Refrigeración activada
● State = 1000: Calcular tiempo de retardo tras desconexión
de la calefacción
● State = 9900: Optimización inicial correcta
● State = 1: Optimización inicial no correcta

PIDSelfTune.SUT.ProcParHeatOk BOOL

FALSE

TRUE: los parámetros de proceso para la optimización inicial
para calefacción se han calculado correctamente.
Esta variable se ajusta durante la optimización.
Debe ser TRUE para el cálculo de los parámetros PID para
calefacción.

PIDSelfTune.SUT.ProcParCoolOk BOOL

FALSE

TRUE: los parámetros de proceso para la optimización inicial
para refrigeración se han calculado correctamente.
Esta variable se ajusta durante la optimización.
Debe ser TRUE para el cálculo de los parámetros PID para
refrigeración.

Programación del PLC
Manual de programación y manejo, 11/2019

3795

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

PIDSelfTune.SUT.AdaptDelayTi‐
me

INT

0

La variable AdaptDelayTime determina la adaptación del tiem‐
po de retardo para calefacción en el punto de operación (para
"Optimización inicial para calefacción" y "Optimización inicial
para calefacción y refrigeración").
Posibilidades:
● SUT.AdaptDelayTime = 0:
Ninguna adaptación del tiempo de retardo. La fase
SUT.State = 1000 se omite. Esta opción provoca una
duración de la optimización menor que con
SUT.AdaptDelayTime = 1.
● SUT.AdaptDelayTime = 1:
Adaptación del tiempo de retardo a la consigna en la fase
SUT.State = 1000 mediante la desconexión temporal de la
calefacción.
Esta opción provoca una duración de la optimización
mayor que con SUT.AdaptDelayTime = 0. La opción puede
mejorar el comportamiento de regulación en caso de que el
comportamiento del proceso dependa fuertemente del
punto de operación (no linealidad). Esta opción no debe
utilizarse para aplicaciones multizona con fuertes
acoplamientos térmicos.

3796

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

PIDSelfTune.SUT.CoolingMode

INT

0

La variable CoolingMode determina la salida de la variable
manipulada para determinar los parámetros de refrigeración
(con "Optimización inicial para calefacción y refrigeración").
Posibilidades:
● SUT.CoolingMode = 0:
Desconectar la calefacción y conectar la refrigeración tras
alcanzar la consigna.
La fase SUT.State = 700 se omite.
A la fase SUT.State = 500 le sigue la fase SUT.State = 900.
Esta opción puede mejorar el comportamiento de
regulación si la ganancia del actuador de refrigeración es
pequeña en comparación con la ganancia del actuador de
calefacción. Provoca una duración de la optimización
menor que con SUT.CoolingMode = 1 o 2.
● SUT.CoolingMode = 1:
Conectar la refrigeración además de la calefacción tras
alcanzar la consigna.
La fase SUT.State = 700 se omite.
A la fase SUT.State = 500 le sigue la fase SUT.State = 800.
Esta opción puede mejorar el comportamiento de
regulación si la ganancia del actuador de refrigeración es
grande en comparación con la ganancia del actuador de
calefacción.
● SUT.CoolingMode = 2:
Tras calentar hasta la consigna, en la fase SUT.State = 700
se decide automáticamente si se desconecta la
calefacción. A la fase SUT.State = 500 le sigue la fase
SUT.State = 700 y a continuación SUT.State = 800 o
SUT.State = 900.
Esta opción requiere más tiempo que las opciones 0 y 1.

PIDSelfTune.TIR.RunIn

BOOL

FALSE

Con la variable RunIn es posible definir la secuencia de la op‐
timización fina al iniciarse desde el modo automático.
● RunIn = FALSE
Si la optimización fina se inicia desde el modo automático,
se regula hasta la consigna con los parámetros PID
existentes (TIR.State = 500 o 600). Solo entonces
comienza la optimización fina.
● RunIn = TRUE
PID_Temp intenta alcanzar la consigna con el valor de
salida mínimo o máximo (TIR.State = 300 o 400). lo que
puede ocasionar una sobreoscilación muy alta. La
optimización fina se inicia entonces automáticamente.
RunIn se ajusta a FALSE después de la optimización fina.
Al iniciarse la optimización fina desde los modos "Inactivo" o
"Manual", PID_Temp se comporta tal y como se describe en
RunIn = TRUE.

Programación del PLC
Manual de programación y manejo, 11/2019

3797

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

PIDSelfTune.TIR.CalculatePa‐
ramsHeat

BOOL

FALSE

Las propiedades del circuito de calefacción del sistema regu‐
lado se almacenan durante la optimización fina para calefac‐
ción. Si TIR.CalculateParamsHeat= TRUE, se recalculan los
parámetros PID para calefacción (estructura Retain.CtrlPa‐
rams.Heat) mediante estas propiedades. De este modo puede
cambiarse el método para calcular los parámetros (parámetro
PIDSelfTune.TIR.TuneRuleHeat) sin tener que repetir la opti‐
mización.
TIR.CalculateParamsHeat se ajusta a FALSE después del cál‐
culo.
Solo es posible si antes se ha realizado correctamente la op‐
timización fina para calefacción (TIR.ProcParHeatOk = TRUE).

PIDSelfTune.TIR.CalculatePa‐
ramsCool

BOOL

FALSE

Las propiedades del circuito de refrigeración del sistema regu‐
lado se almacenan durante la optimización fina para refrigera‐
ción. Si TIR.CalculateParamsCool= TRUE, se recalculan los
parámetros PID para refrigeración (estructura Retain.CtrlPa‐
rams.Cool) mediante estas propiedades. De este modo puede
cambiarse el método para calcular los parámetros (parámetro
PIDSelfTune.TIR.TuneRuleCool) sin tener que repetir la opti‐
mización.
TIR.CalculateParamsCool se ajusta a FALSE después del cál‐
culo.
Solo es posible si antes se ha realizado correctamente la op‐
timización fina para refrigeración (TIR.ProcParCoolOk =
TRUE).
Solo es efectivo si Config.ActivateCooling = TRUE y Con‐
fig.AdvancedCooling = TRUE.

3798

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

PIDSelfTune.TIR.TuneRuleHeat

INT

0

Método para el cálculo de parámetros durante la optimización
fina para calefacción
Posibilidades:
● TIR.TuneRuleHeat = 0: PID automático
● TIR.TuneRuleHeat = 1: PID rápido (comportamiento de
regulación más rápido con amplitudes del valor de salida
mayores que las de TIR.TuneRuleHeat = 2)
● TIR.TuneRuleHeat = 2: PID lento (comportamiento de
regulación más lento con amplitudes del valor de salida
menores que las de TIR.TuneRuleHeat = 1)
● TIR.TuneRuleHeat = 3: PID ZN
● TIR.TuneRuleHeat = 4: PI ZN
● TIR.TuneRuleHeat = 5: P ZN
(ZN = Ziegler-Nichols)
Para poder repetir el cálculo de los parámetros PID para cale‐
facción con TIR.CalculateParamsHeat y TIR.TuneRuleHeat =
0, 1 o 2, la optimización fina anterior debe haberse ejecutado
también con TIR.TuneRuleHeat = 0, 1 o 2. De no ser así, se
utiliza TIR.TuneRuleHeat = 3.
Siempre es posible volver a calcular los parámetros PID para
calefacción con TIR.CalculateParamsHeat y TIR.TuneRu‐
leHeat = 3, 4 o 5.

Programación del PLC
Manual de programación y manejo, 11/2019

3799

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

PIDSelfTune.TIR.TuneRuleCool

INT

0

Método para el cálculo de parámetros durante la optimización
fina para refrigeración
Posibilidades:
● TIR.TuneRuleCool = 0: PID automático
● TIR.TuneRuleCool = 1: PID rápido (comportamiento de
regulación más rápido con amplitudes del valor de salida
mayores que las de TIR.TuneRuleCool = 2)
● TIR.TuneRuleCool = 2: PID lento (comportamiento de
regulación más lento con amplitudes del valor de salida
menores que las de TIR.TuneRuleCool = 1)
● TIR.TuneRuleCool = 3: PID ZN
● TIR.TuneRuleCool = 4: PI ZN
● TIR.TuneRuleCool = 5: P ZN
(ZN = Ziegler-Nichols)
Para poder repetir el cálculo de los parámetros PID para refri‐
geración con TIR.CalculateParamsCool y TIR.TuneRuleCool
= 0, 1 o 2, la optimización fina anterior debe haberse ejecutado
también con TIR.TuneRuleCool = 0, 1 o 2. De no ser así, se
utiliza TIR.TuneRuleCool = 3.
Siempre es posible volver a calcular los parámetros PID para
refrigeración con TIR.CalculateParamsCool y TIR.TuneRule‐
Cool = 3, 4 o 5.
Solo es efectivo si la salida de refrigeración y el cambio de
parámetros PID están activados (ConfigActivateCooling =
TRUE y Config.AdvancedCooling = TRUE).

3800

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

PIDSelfTune.TIR.State

INT

0

La variable TIR.State muestra la fase actual de la "Optimiza‐
ción fina":
● State = 0: Iniciar la optimización fina
● State = 100: Calcular desviación estándar de calefacción
● State = 200: Calcular desviación estándar de refrigeración
● State = 300: Intentar alcanzar la consigna para la
calefacción con regulación de 2 puntos
● State = 400: Intentar alcanzar la consigna para la
refrigeración con regulación de 2 puntos
● State = 500: Intentar alcanzar la consigna para la
calefacción con regulación PID
● State = 600: Intentar alcanzar la consigna para la
refrigeración con regulación PID
● State = 700: Calcular desviación estándar de calefacción
● State = 800: Calcular desviación estándar de refrigeración
● State = 900: Determinar oscilación y calcular parámetros
para calefacción
● State = 1000: Determinar oscilación y calcular parámetros
para refrigeración
● State = 9900: Optimización fina correcta
● State = 1: Optimización fina no correcta

PIDSelfTune.TIR.ProcParHeatOk

BOOL

FALSE

TRUE: los parámetros de proceso para la optimización fina
para calefacción se han calculado correctamente.
Esta variable se ajusta durante la optimización.
Debe cumplirse para el cálculo de los parámetros PID para
calefacción.

PIDSelfTune.TIR.ProcParCoolOk

BOOL

FALSE

TRUE: los parámetros de proceso para la optimización fina
para refrigeración se han calculado correctamente.
Esta variable se ajusta durante la optimización.
Debe cumplirse para el cálculo de los parámetros PID para
refrigeración.

Programación del PLC
Manual de programación y manejo, 11/2019

3801

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

PIDSelfTune.TIR.OutputOffset‐
Heat

REAL

0.0

Offset de optimización para calefacción del valor de salida PID
TIR.OutputOffsetHeat se suma al valor que resulta de PidOut‐
putSum para el circuito de calefacción.
Especifique un valor positivo para TIR.OutputOffsetHeat para
obtener un offset positivo en las salidas para calefacción.
Los valores resultantes en las salidas para calefacción se ob‐
tienen del escalado de salida configurado (Struktur Config.Out‐
put.Heat)
Este offset de optimización puede utilizarse en reguladores
con salida de refrigeración activada y cambio de parámetros
PID (Config.ActivateCooling = TRUE, Config.AdvancedCoo‐
ling = TRUE) para la optimización fina para refrigeración. Si las
salidas para refrigeración de la consigna en la que debe reali‐
zarse la optimización no están activas (PidOutputSum > 0.0),
no es posible la optimización fina para refrigeración. En ese
caso, antes de iniciar la optimización debe especificarse un
valor de offset de optimización positivo para calefacción que
sea mayor que el valor de salida PID (PidOutputSum) de la
consigna en estado estacionario. De este modo se incremen‐
tan los valores en las salidas para calefacción y se activan las
salidas para refrigeración (PidOutputSum < 0.0). Esto permite
la optimización fina para refrigeración.
Cuando la optimización fina ha finalizado, TIR.OutputOffset‐
Heat se reinicia a 0.0.
Grandes modificaciones en TIR.OutputOffsetHeat en un solo
paso pueden provocar sobreoscilaciones temporales.
Config.Output.Heat.PidUpperLimit ≥ PIDSelfTune.TIR.Outpu‐
tOffsetHeat ≥ Config.Output.Heat.PidLowerLimit

3802

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

PIDSelfTune.TIR.OutputOffset‐
Cool

REAL

0.0

Offset de optimización para refrigeración del valor de salida
PID
TIR.OutputOffsetCool se suma al valor que resulta de PidOut‐
putSum para el circuito de refrigeración.
Especifique un valor negativo para TIR.OutputOffsetCool para
obtener un offset positivo en las salidas para refrigeración.
Los valores resultantes en las salidas para refrigeración se
obtienen del escalado de salida configurado (Struktur Con‐
fig.Output.Coool).
Este offset de optimización puede utilizarse en reguladores
con salida de refrigeración activada (Config.ActivateCooling =
TRUE) para la optimización fina para calefacción. Si las salidas
para calefacción de la consigna en la que debe realizarse la
optimización no están activas (PidOutputSum < 0.0), no es
posible la optimización fina para calefacción. En ese caso, an‐
tes de iniciar la optimización debe especificarse un valor de
offset de optimización para refrigeración negativo menor que el
valor de salida PID (PidOutputSum) de la consigna en estado
estacionario. De este modo se incrementan los valores en las
salidas para refrigeración y se activan las salidas para cale‐
facción (PidOutputSum > 0.0). Esto permite la optimización
fina para calefacción.
Cuando la optimización fina ha finalizado, TIR.OutputOffset‐
Cool se reinicia a 0.0.
Grandes modificaciones en TIR.OutputOffsetCool en un solo
paso pueden provocar sobreoscilaciones temporales.
Config.Output.Cool.PidUpperLimit ≥ PIDSelfTune.TIR.Outpu‐
tOffsetCool ≥ Config.Output.Cool.PidLowerLimit

PIDSelfTune.TIR.WaitForContro‐
lIn

BOOL

FALSE

Esperar tras alcanzar la consigna durante la optimización fina
Durante la optimización fina, si TIR.WaitForControlIn = TRUE,
entre el alcance de la consigna (TIR.State = 500 o 600) y el
cálculo de la desviación típica (TIR.State = 700 o 800) se es‐
pera hasta que en TIR.FinishControlIn se especifique un flanco
FALSE -> TRUE.
TIR.WaitForControlIn puede utilizarse en la optimización fina
simultánea de varios reguladores en aplicaciones multizona
con el fin de sincronizar las optimizaciones de las distintas
zonas. De esta manera puede garantizarse que todas las zo‐
nas han alcanzado sus consignas antes de que se inicie la
optimización propiamente dicha. Esto permite reducir cual‐
quier influencia que los acoplamientos térmicos entre las zo‐
nas pueda tener sobre la optimización.
TIR.WaitForControlIn solo es efectivo si la optimización fina se
inicia desde el modo automático con PIDSelfTune.TIR.RunIn =
FALSE.

PIDSelfTune.TIR.ControlInReady

BOOL

Programación del PLC
Manual de programación y manejo, 11/2019

FALSE

Si TIR.WaitForControlIn = TRUE, PID_Temp ajusta TIR.Con‐
trolInReady = TRUE en cuanto se ha alcanzado la consigna y
espera con otros pasos de optimización hasta que se especi‐
fique un flanco FALSE -> TRUE en TIR.FinishControlIn.

3803

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

PIDSelfTune.TIR.FinishControlIn

BOOL

FALSE

Si TIR.ControlInReady = TRUE, un flanco FALSE -> TRUE de
TIR.FinishControlIn finaliza la espera y se prosigue con la op‐
timización fina.

PIDCtrl.IOutputOld(1)

REAL

0.0

Acción I en el último ciclo

PIDCtrl.PIDInit

BOOL

FALSE

PIDCtrl.PIDInit está disponible a partir de PID_Temp versión
1.1.
Si PIDCtrl.PIDInit = TRUE en el "Modo automático", la acción
integral de PIDCtrl.IOutputOld se preasigna automáticamente
como si en el ciclo anterior hubiese sido PidOutputSum =
OverwriteInitialOutputValue. Esto se puede utilizar para una
AUTOHOTSPOT.

Retain.CtrlParams.SetByUser(1)

BOOL

FALSE

Si los parámetros PID del editor de configuración se introducen
a mano, se ajusta SetByUser = TRUE.
Este parámetro sirve para la visualización en los editores y no
altera el algoritmo de regulación.
SetByUser es remanente.

Retain.CtrlParams.Heat.Gain

(1)

REAL

1.0

Ganancia proporcional activa para calefacción
Heat.Gain es remanente.
Heat.Gain ≥ 0.0

Retain..CtrlParams.Heat.Ti(1)

REAL

20.0

Tiempo de integración activo para calefacción en segundos
Con Heat.CtrlParams.Ti = 0.0, la acción I para calefacción está
desconectada.
Heat.Ti es remanente.
100000.0 ≥ Heat.Ti ≥ 0.0

Retain.CtrlParams.Heat.Td

(1)

REAL

0.0

Tiempo derivativo activo para calefacción en segundos
Con Heat.CtrlParams.Td = 0.0, la acción D para calefacción
está desconectada.
Heat.Td es remanente.
100000.0 ≥ Heat.Td ≥ 0.0

Retain.CtrlParams.Heat.TdFiltRa‐
tio(1)

REAL

0.2

Coeficiente activo del retardo derivativo para calefacción
El efecto de la acción D se retrasa mediante el coeficiente de
retardo de la acción derivada.
Retardo de la acción derivada = Tiempo derivativo × coeficien‐
te de retardo de la acción derivada
● 0.0: la acción D solo surte efecto para un ciclo y, por ello,
casi no es efectiva.
● 0.5: este valor se ha acreditado en la práctica para
sistemas regulados con una constante de tiempo
dominante.
● > 1.0: cuanto mayor sea el coeficiente, más se retrasará el
efecto de la acción D.
Heat.TdFiltRatio es remanente.
Heat.TdFiltRatio ≥ 0.0

3804

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

Retain.CtrlParams.Heat.PWeigh‐
ting(1)

REAL

1.0

Ponderación activa de la acción P para calefacción
En el caso de que se modifique la consigna, es posible atenuar
la acción P.
Se recomiendan valores comprendidos entre 0.0 y 1.0.
● 1.0: la acción P actúa plenamente al cambiar la consigna
● 0.0: la acción P no actúa al cambiar la consigna
Si se modifica el valor real, la acción P actúa siempre plena‐
mente.
Heat.PWeighting es remanente.
1.0 ≥ Heat.PWeighting ≥ 0.0

Retain.CtrlParams.Heat.DWeigh‐
ting(1)

REAL

1.0

Ponderación activa de la acción D para calefacción
En el caso de que se modifique la consigna, es posible atenuar
la acción D.
Se recomiendan valores comprendidos entre 0.0 y 1.0.
● 1.0: La acción D actúa plenamente al cambiar la consigna.
● 0.0: la acción D no actúa al cambiar la consigna
Si se modifica el valor real, la acción D actúa siempre plena‐
mente.
Heat.DWeighting es remanente.
1.0 ≥ Heat.DWeighting ≥ 0.0

Retain.CtrlParams.Heat.Cycle(1)

REAL

1.0

Tiempo de muestreo activo del algoritmo PID para calefacción
en segundos
CtrlParams.Heat.Cycle se determina durante la optimización y
se redondea a un múltiplo entero de CycleTime.Value.
Si Config.Output.Heat.PwmPeriode = 0.0, Heat.Cycle se utili‐
za como duración del período de la modulación del ancho de
impulso para calefacción.
Si Config.Output.Cool.PwmPeriode = 0.0 y Config.Advanced‐
Cooling = FALSE, Heat.Cycle se utiliza como duración del pe‐
ríodo de la modulación del ancho de impulso para refrigeración.
Heat.Cycle es remanente.
100000.0 ≥ Heat.Cycle > 0.0

Programación del PLC
Manual de programación y manejo, 11/2019

3805

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

Retain.CtrlParams.Heat.Control‐
Zone(1)

REAL

3.402822e
+38

Ancho de zona de regulación activo para calefacción
Con Heat.ControlZone = 3.402822e+38, la zona de regulación
para calefacción está desconectada.
Heat.ControlZone solo se ajusta automáticamente durante la
optimización inicial para calefacción o para calefacción y refri‐
geración si se ha seleccionado el método para el cálculo de
parámetros PIDSelfTune.SUT.TuneRuleHeat = 2.
Para reguladores con salida de refrigeración desactivada
(Config.ActivateCooling = FALSE) o reguladores con salida de
refrigeración activada y factor de refrigeración (Config.Advan‐
cedCooling = FALSE), la zona de regulación se encuentra en
un punto simétrico entre Setpoint – Heat.ControlZone y Set‐
point + Heat.ControlZone.
Para reguladores con salida de refrigeración activada y cambio
de parámetros PID (Config.ActivateCooling = TRUE, Con‐
fig.AdvancedCooling = TRUE), la zona de regulación se sitúa
entre Setpoint – Heat.ControlZone y Setpoint + Cool.Control‐
Zone.
Heat.ControlZone es remanente.
Heat.ControlZone > 0.0

Retain.CtrlParams.Heat.DeadZo‐
ne(1)

REAL

0.0

Ancho de zona muerta activo para calefacción (ver AUTO‐
HOTSPOT)
Con Heat.DeadZone = 0.0, la zona muerta para calefacción
está desconectada.
Heat.DeadZone no se ajusta automáticamente o se adapta
durante la optimización. Heat.DeadZone debe configurarse
correctamente a mano.
Si la zona muerta está conectada, es posible ajustar un error
de regulación (desviación entre consigna y valor real) perma‐
nente. Esto puede tener un efecto negativo al realizar una op‐
timización fina.
Para reguladores con salida de refrigeración desactivada
(Config.ActivateCooling = FALSE) o reguladores con salida de
refrigeración activada y factor de refrigeración (Config.Advan‐
cedCooling = FALSE), la zona muerta se encuentra en un
punto simétrico entre Setpoint – Heat.DeadZone y Setpoint +
Heat.DeadZone.
Para reguladores con salida de refrigeración activada y cambio
de parámetros PID (Config.ActivateCooling = TRUE, Con‐
fig.AdvancedCooling = TRUE), la zona muerta se sitúa entre
Setpoint – Heat.DeadZone y Setpoint + Cool.DeadZone.
Heat.DeadZone es remanente.
Heat.DeadZone ≥ 0.0

3806

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

Retain.CtrlParams.Cool.Gain(1)

REAL

1.0

Ganancia proporcional activa para refrigeración
Cool.Gain es remanente.
Solo es efectivo si la salida de refrigeración y el cambio de
parámetros PID están activados (Config.ActivateCooling =
TRUE, Config.AdvancedCooling = TRUE).
Cool.Gain ≥ 0.0

Retain.CtrlParams.Cool.Ti

(1)

REAL

20.0

Tiempo de integración activo para refrigeración en segundos
Con Cool.CtrlParams.Ti = 0.0, la acción I para refrigeración
está desconectada.
Cool.Ti es remanente.
Solo es efectivo si la salida de refrigeración y el cambio de
parámetros PID están activados (Config.ActivateCooling =
TRUE, Config.AdvancedCooling = TRUE).
100000.0 ≥ Cool.Ti ≥ 0.0

Retain.CtrlParams.Cool.Td(1)

REAL

0.0

Tiempo derivativo activo para refrigeración en segundos
Con Cool.CtrlParams.Td = 0.0, la acción D para refrigeración
está desconectada.
Cool.Td es remanente.
Solo es efectivo si la salida de refrigeración y el cambio de
parámetros PID están activados (Config.ActivateCooling =
TRUE, Config.AdvancedCooling = TRUE).
100000.0 ≥ Cool.Td ≥ 0.0

Retain.CtrlParams.Cool.TdFiltRa‐
tio(1)

REAL

0.2

Coeficiente activo del retardo derivativo para refrigeración
El efecto de la acción D se retrasa mediante el coeficiente de
retardo de la acción derivada.
Retardo de la acción derivada = Tiempo derivativo × coeficien‐
te de retardo de la acción derivada
● 0.0: la acción D solo surte efecto para un ciclo y, por ello,
casi no es efectiva.
● 0.5: este valor se ha acreditado en la práctica para
sistemas regulados con una constante de tiempo
dominante.
● > 1.0: cuanto mayor sea el coeficiente, más se retrasará el
efecto de la acción D.
Cool.TdFiltRatio es remanente.
Solo es efectivo si la salida de refrigeración y el cambio de
parámetros PID están activados (Config.ActivateCooling =
TRUE, Config.AdvancedCooling = TRUE).
Cool.TdFiltRatio ≥ 0.0

Programación del PLC
Manual de programación y manejo, 11/2019

3807

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

Retain.CtrlParams.Cool.PWeigh‐
ting(1)

REAL

1.0

Ponderación activa de la acción P para refrigeración
En el caso de que se modifique la consigna, es posible atenuar
la acción P.
Se recomiendan valores comprendidos entre 0.0 y 1.0.
● 1.0: la acción P actúa plenamente al cambiar la consigna
● 0.0: la acción P no actúa al cambiar la consigna
Si se modifica el valor real, la acción P actúa siempre plena‐
mente.
Cool.PWeighting es remanente.
Solo es efectivo si la salida de refrigeración y el cambio de
parámetros PID están activados (Config.ActivateCooling =
TRUE, Config.AdvancedCooling = TRUE).
1.0 ≥ Cool.PWeighting ≥ 0.0

Retain.CtrlParams.Cool.DWeigh‐
ting(1)

REAL

1.0

Ponderación activa de la acción D para refrigeración
En el caso de que se modifique la consigna, es posible atenuar
la acción D.
Se recomiendan valores comprendidos entre 0.0 y 1.0.
● 1.0: La acción D actúa plenamente al cambiar la consigna.
● 0.0: la acción D no actúa al cambiar la consigna
Si se modifica el valor real, la acción D actúa siempre plena‐
mente.
Cool.DWeighting es remanente.
Solo es efectivo si la salida de refrigeración y el cambio de
parámetros PID están activados (Config.ActivateCooling =
TRUE, Config.AdvancedCooling = TRUE).
1.0 ≥ Cool.DWeighting ≥ 0.0

Retain.CtrlParams.Cool.Cycle(1)

REAL

1.0

Tiempo de muestreo activo del algoritmo PID para refrigera‐
ción en segundos
CtrlParams.Cool.Cycle se determina durante la optimización y
se redondea a un múltiplo entero de CycleTime.Value.
Si Config.Output.Cool.PwmPeriode = 0.0 y Config.Advanced‐
Cooling = TRUE, Cool.Cycle se utiliza como duración del pe‐
ríodo de la modulación del ancho de impulso para refrigeración.
Si Config.Output.Cool.PwmPeriode = 0.0 y Config.Advanced‐
Cooling = FALSE, Heat.Cycle se utiliza como duración del pe‐
ríodo de la modulación del ancho de impulso para refrigeración.
Cool.Cycle es remanente.
Solo es efectivo si la salida de refrigeración y el cambio de
parámetros PID están activados (Config.ActivateCooling =
TRUE, Config.AdvancedCooling = TRUE).
100000.0 ≥ Cool.Cycle > 0.0

3808

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de
datos

Ajuste pre‐
determina‐
do

Descripción

Retain.CtrlParams.Cool.Control‐
Zone(1)

REAL

3.402822e
+38

Ancho de zona de regulación activo para refrigeración
Con Cool.ControlZone = 3.402822e+38, la zona de regulación
para refrigeración está desconectada.
Cool.ControlZone solo se ajusta automáticamente durante la
optimización inicial para refrigeración o para calefacción y re‐
frigeración si se ha seleccionado el método para el cálculo de
parámetros PIDSelfTune.SUT.TuneRuleCool = 2.
Cool.ControlZone es remanente.
Solo es efectivo si la salida de refrigeración y el cambio de
parámetros PID están activados (Config.ActivateCooling =
TRUE, Config.AdvancedCooling = TRUE).
Cool.ControlZone > 0.0

Retain.CtrlParams.Cool.DeadZo‐
ne(1)

REAL

0.0

Ancho de zona muerta activo para refrigeración (ver AUTO‐
HOTSPOT)
Con Cool.DeadZone = 0.0, la zona muerta para refrigeración
está desconectada.
Cool.DeadZone no se ajusta automáticamente o se adapta
durante la optimización. Cool.DeadZone debe configurarse
correctamente a mano.
Si la zona muerta está conectada, es posible ajustar un error
de regulación (desviación entre consigna y valor real) perma‐
nente. Esto puede tener un efecto negativo al realizar una op‐
timización fina.
Cool.DeadZone es remanente.
Solo es efectivo si la salida de refrigeración y el cambio de
parámetros PID están activados (Config.ActivateCooling =
TRUE, Config.AdvancedCooling = TRUE).
Cool.DeadZone ≥ 0.0

Consulte también
Variable ActivateRecoverMode PID_Temp (Página 3821)
Variable Warning PID_Temp (Página 3823)

Parámetros State y Mode PID_Temp
Interrelación de los parámetros
El parámetro State indica el modo de operación actual del regulador PID. El parámetro State
no puede modificarse.
Con un flanco ascendente en ModeActivate, PID_Temp pasa al modo guardado en el
parámetro de entrada/salida Mode.
Heat.EnableTuning y Cool.EnableTuning definen para la optimización inicial y la optimización
fina si la optimización se realiza para la calefacción o para la refrigeración.

Programación del PLC
Manual de programación y manejo, 11/2019

3809

Instrucciones
4.1 Instrucciones
Si se conecta la CPU o se cambia de STOP a RUN, PID_Temp se inicia en el modo de
operación guardado en Mode. Para dejar PID_Temp en el modo de operación "Inactivo", ajuste
RunModeByStartup = FALSE.

3810

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Significado de los valores
State / Mode Descripción del modo de operación
0

Inactivo
En el modo de operación "Inactivo" se emiten los siguientes valores de salida:
● 0.0 como valor de salida PID (PidOutputSum)
● 0.0 como valor de salida para calefacción (OutputHeat) y valor de salida para refrigeración (OutputCool)
● 0 como valor de salida analógico para calefacción (OutputHeat_PER) y valor de salida analógico para
refrigeración (OutputCool_PER)
● FALSE como valor de salida PWM para calefacción (OutputHeat_PWM) y valor de salida PWM para
refrigeración (OutputCool_PWM)
Estos valores no dependen de los límites ni del escalado del valor de salida configurados en las estructuras
Config.Output.Heat y Config.Output.Cool.

Programación del PLC
Manual de programación y manejo, 11/2019

3811

Instrucciones
4.1 Instrucciones
State / Mode Descripción del modo de operación
1

Optimización inicial
La optimización inicial determina el comportamiento del proceso a un escalón del valor de salida y busca el
punto de inflexión. Los parámetros PID óptimos se calculan a partir de la pendiente máxima y el tiempo muerto
del sistema regulado. Para obtener los mejores parámetros PID, debe efectuarse una optimización inicial y
una optimización fina.
PID_Temp ofrece distintos tipos de optimización inicial en función de la configuración:
● Optimización inicial para calefacción:
Se emite un salto en el valor de salida para calefacción, se calculan los parámetros PID para calefacción
(estructura Retain.CtrlParams.Heat) y a continuación se regula al valor de consigna en el modo
automático.
Si el comportamiento de proceso depende en gran medida del punto de operación, con
PIDSelfTune.SUT.AdaptDelayTime puede activarse una adaptación del tiempo de retardo a la consigna.
● Optimización inicial para calefacción y refrigeración:
Se emite un salto en el valor de salida para calefacción. En cuanto el valor real se encuentra cerca del de
consigna, se emite un salto en el valor de salida para refrigeración. Se calculan los parámetros PID para
calefacción (estructura Retain.CtrlParams.Heat) y refrigeración (estructura Retain.CtrlParams.Cool). A
continuación se regula hasta el valor de consigna en el modo automático.
Si el comportamiento de proceso depende en gran medida del punto de operación, con
PIDSelfTune.SUT.AdaptDelayTime puede activarse una adaptación del tiempo de retardo a la consigna.
Dependiendo del efecto del actuador de refrigeración en comparación con el actuador de calefacción,
puede modificarse la calidad de la optimización utilizando simultáneamente o no las salidas de calefacción
y refrigeración durante la optimización. Esta circunstancia se puede definir con
PIDSelfTune.SUT.CoolingMode.
● Optimización inicial para refrigeración:
Se emite un salto en el valor de salida para refrigeración y se calculan los parámetros PID para
refrigeración (Struktur Retain.CtrlParams.Cool). A continuación se regula hasta el valor de consigna en el
modo automático.
Si se desean optimizar los parámetros PID para calefacción y refrigeración, con la ejecución de una "Opti‐
mización inicial para calefacción" y seguidamente una "Optimización inicial para refrigeración" cabe esperar
un mejor comportamiento de regulación que con la ejecución de una "Optimización inicial para calefacción y
refrigeración". No obstante, la ejecución de la optimización inicial en dos pasos requiere más tiempo.
Requisitos generales para la optimización inicial:
● La instrucción PID_Temp se llama en un OB de alarma cíclica.
● Modo de operación Inactivo (State = 0), Manual (State = 4) o Automático (State = 3)
● ManualEnable = FALSE
● Reset = FALSE
● La consigna y el valor real se encuentran dentro de los límites configurados.
Requisitos para la optimización inicial para calefacción:
● Heat.EnableTuning = TRUE
● Cool.EnableTuning = FALSE
● El valor real no debe aproximarse demasiado a la consigna.
|Setpoint - Input| > 0.3 * |Config.InputUpperLimit - Config.InputLowerLimit| y
|Setpoint - Input| > 0.5 * |Setpoint|
● El valor de consigna es mayor que el valor real.

3812

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
State / Mode Descripción del modo de operación
Setpoint > Input
Requisitos para la optimización inicial para calefacción y refrigeración:
● Heat.EnableTuning = TRUE·
● Cool.EnableTuning = TRUE
● La salida de refrigeración está activada (Config.ActivateCooling = TRUE).
● La conmutación de parámetros PID está activada (Config.AdvancedCooling = TRUE).
● El valor real no debe aproximarse demasiado a la consigna.
|Setpoint - Input| > 0.3 * |Config.InputUpperLimit - Config.InputLowerLimit| y
|Setpoint - Input| > 0.5 * |Setpoint|
● El valor de consigna es mayor que el valor real.
Setpoint > Input
Requisitos para la optimización inicial para refrigeración:
● Heat.EnableTuning = FALSE·
● Cool.EnableTuning = TRUE·
● La salida de refrigeración está activada (Config.ActivateCooling = TRUE).
● La conmutación de parámetros PID está activada (Config.AdvancedCooling = TRUE).
● Se ha llevado a cabo una "Optimización inicial para calefacción" o una "Optimización inicial para
calefacción y refrigeración" (PIDSelfTune.SUT.ProcParHeatOk = TRUE) correcta, a ser posible en la
misma consigna.
● El valor real debe estar próximo a la consigna.
|Setpoint - Input| < 0.05 * |Config.InputUpperLimit - Config.InputLowerLimit|
Cuanto más estable es el valor real, con mayor facilidad y precisión se pueden calcular los parámetros PID.
Un ruido del valor real es aceptable siempre que la subida del valor real sea considerablemente mayor que
el ruido. Esto tiene más probabilidades de suceder en los modos de operación "Inactivo" o "Manual".
La consigna se congela en la variable CurrentSetpoint. La optimización se cancela si se cumple:
● Setpoint > CurrentSetpoint + CancelTuningLevel
o bien
● Setpoint < CurrentSetpoint - CancelTuningLevel
El método para el cálculo de los parámetros PID puede definirse por separado con PIDSelfTune.SUT.Tune‐
RuleHeat y PIDSelfTune.SUT.TuneRuleCool para calefacción y refrigeración.
Antes de recalcular los parámetros PID, se guarda una copia de seguridad de estos en la estructura CtrlPa‐
ramsBackUp y es posible reactivarlos con LoadBackUp.
Una vez realizada correctamente la optimización inicial, se pasa al modo automático.
Si la optimización inicial no se ha realizado correctamente, el cambio del modo de operación depende de
ActivateRecoverMode.
Se muestra la fase de la optimización inicial con PIDSelfTune.SUT.State.

Programación del PLC
Manual de programación y manejo, 11/2019

3813

Instrucciones
4.1 Instrucciones
State / Mode Descripción del modo de operación
2

Optimización fina
La optimización fina genera una oscilación constante y limitada del valor real. Los parámetros PID se opti‐
mizan para el punto de operación a partir de la amplitud y la frecuencia. Los parámetros PID existentes
después de la optimización fina muestran en su mayoría un comportamiento de guía y ante fallos mucho mejor
que los parámetros PID de la optimización inicial. Para obtener los mejores parámetros PID, debe efectuarse
una optimización inicial y una optimización fina.
PID_Temp intenta generar automáticamente una oscilación que es mayor que el ruido del valor real. La
estabilidad del valor real ejerce tan solo una mínima influencia sobre la optimización fina.
PID_Temp ofrece distintos tipos de optimización fina en función de la configuración:
● Optimización fina para calefacción:
PID_Temp genera una oscilación del valor real con cambios periódicos en el valor de salida para
calefacción y calcula los parámetros PID para calefacción (Struktur Retain.CtrlParams.Heat).
● Optimización fina para refrigeración:
PID_Temp genera una oscilación del valor real con cambios periódicos en el valor de salida para
refrigeración y calcula los parámetros PID para refrigeración (Struktur Retain.CtrlParams.Cool).
Offset temporal de la optimización para el regulador de calefacción y refrigeración
Si se utiliza PID_Temp como regulador de calefacción (Config.ActivateCooling = TRUE), el valor de salida PID
(PidOutputSum) en la consigna debe cumplir los siguientes requisitos para que pueda generarse una osci‐
lación del valor real y para que la optimización fina pueda realizarse correctamente:
● Valor de salida PID positivo para la optimización fina para calefacción
● Valor de salida PID negativo para la optimización fina para refrigeración
Si no se cumplen estos requisitos, se puede especificar un offset temporal para la optimización fina que se
emita a la salida de acción contrapuesta:
● Offset para la salida de refrigeración (PIDSelfTune.TIR.OutputOffsetCool) en caso de optimización fina
para calefacción.
Antes de iniciar la optimización debe especificarse un valor de offset de optimización para refrigeración
negativo que sea menor que el valor de salida PID (PidOutputSum) de la consigna en estado estacionario.
● Offset para salida de calefacción (PIDSelfTune.TIR.OutputOffsetHeat) en la optimización fina para
refrigeración.
Antes de iniciar la optimización debe especificarse un valor de offset de optimización para calefacción
positivo que sea mayor que el valor de salida PID (PidOutputSum) de la consigna en estado estacionario.
Entonces, el algoritmo PID compensa el offset especificado de manera que el valor real se mantenga en la
consigna. A través de la magnitud del offset, el valor de salida PID se puede adaptar para que cumpla la
condición antes mencionada.
Para evitar sobreoscilaciones mayores del valor real al especificar el offset, esta también puede incremen‐
tarse en varios pasos.
Si PID_Temp sale del modo Optimización fina, se restablece el offset de optimización.
Ejemplo de especificación de un offset para la optimización fina para refrigeración:
● Sin offset:

3814

–

Consigna (Setpoint) = valor real (ScaledInput) = 80 °C

–

Valor de salida PID (PidOutputSum) = 30.0

–

Valor de salida para calefacción (OutputHeat) = 30.0

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
State / Mode Descripción del modo de operación
–

Valor de salida para refrigeración (OutputCool) = 0.0
La salida de refrigeración por si sola no permite generar una oscilación del valor real en torno a la
consigna.
En ese caso fallaría la optimización fina.

● Con especificación de un offset para la salida de calefacción (PIDSelfTune.TIR.OutputOffsetHeat) = 80.0
–

Consigna (Setpoint) = valor real (ScaledInput) = 80 °C

–

Valor de salida PID (PidOutputSum) = -50.0

–

Valor de salida para calefacción (OutputHeat) = 80.0

–

Valor de salida para refrigeración (OutputCool) = -50.0
Al especificar un offset para la salida de calefacción, la salida de refrigeración puede generar ahora
una oscilación del valor real alrededor de la consigna.
De este modo la optimización fina puede llevarse a cabo correctamente.

Requisitos generales para la optimización fina:
● La instrucción PID_Temp se llama en un OB de alarma cíclica.
● No se esperan perturbaciones.
● La consigna y el valor real se encuentran dentro de los límites configurados.
● El lazo de regulación es estacionario en el punto de operación. El punto de operación se ha alcanzado
cuando el valor real coincide con la consigna.
Si la zona muerta está conectada, es posible ajustar un error de regulación (desviación entre consigna y
valor real) permanente. Esto puede tener un efecto negativo al realizar la optimización fina.
● ManualEnable = FALSE
● Reset = FALSE
● Modo de operación Automático (State = 3), Inactivo (State = 0) o Manual (State = 4)
Requisitos para la optimización fina para calefacción:
● Heat.EnableTuning = TRUE
● Cool.EnableTuning = FALSE
● Si PID_Temp está configurado como regulador de calefacción (Config.ActivateCooling = TRUE), en el
punto de operación en el que debe realizarse la optimización debe estar activa la salida de calefacción
(PidOutputSum > 0.0 (ver "Offset de optimización")).
Requisitos para la optimización fina para refrigeración:
● Heat.EnableTuning = FALSE
● Cool.EnableTuning = TRUE
● La salida de refrigeración está activada (Config.ActivateCooling = TRUE).
● El cambio de parámetros PID está activado (Config.AdvancedCooling = TRUE).
● La salida de refrigeración debe estar activa en el punto de operación en el que debe realizarse la
optimización (PidOutputSum < 0.0 (ver "Offset de optimización")).
La secuencia de la optimización fina depende del modo de operación a partir del cual se inicia:
● Modo automático (State = 3) con PIDSelfTune.TIR.RunIn = FALSE (ajuste predeterminado)
Si desea mejorar los parámetros PID existentes mediante optimización, inicie la optimización fina desde
el modo automático.

Programación del PLC
Manual de programación y manejo, 11/2019

3815

Instrucciones
4.1 Instrucciones
State / Mode Descripción del modo de operación
PID_Temp regula con los parámetros PID existentes hasta que el lazo de regulación es estacionario y se
cumplen las condiciones para la optimización fina. Solo entonces comienza la optimización fina.
● Modo de operación Inactivo (State = 0), Manual (State = 4) o Automático (State = 3) con
PIDSelfTune.TIR.RunIn = TRUE
Se intenta alcanzar la consigna con el valor de salida mínimo o máximo:
–

con el valor de salida mínimo o máximo para calefacción en la optimización fina para calefacción;

–

con el valor de salida mínimo o máximo para refrigeración en caso de optimización fina para
refrigeración.

lo que puede ocasionar una sobreoscilación muy alta. La optimización fina comienza cuando se alcanza
la consigna.
Si no es posible alcanzar la consigna, PID_Temp no cancela automáticamente la optimización.
La consigna se congela en la variable CurrentSetpoint. La optimización se cancela si se cumple:
● Setpoint > CurrentSetpoint + CancelTuningLevel
o bien
● Setpoint < CurrentSetpoint - CancelTuningLevel
El método para el cálculo de los parámetros PID puede definirse por separado con PIDSelfTune.TIR.Tune‐
RuleHeat y PIDSelfTune.TIR.TuneRuleCool para calefacción y refrigeración.
Antes de recalcular los parámetros PID, se guarda una copia de seguridad de estos en la estructura CtrlPa‐
ramsBackUp y es posible reactivarlos con LoadBackUp.
Una vez realizada correctamente la optimización fina, el regulador cambia al modo automático.
Si la optimización fina no se ha realizado correctamente, el cambio del modo de operación depende de
ActivateRecoverMode.
La fase de la optimización fina se muestra con PIDSelfTune.TIR.State.
3

Modo automático
En el modo automático, PID_Temp regula el sistema regulado conforme a los parámetros predefinidos.
Si se cumple uno de los requisitos siguientes, se cambia al modo automático:
● Optimización inicial finalizada correctamente
● Optimización fina finalizada correctamente
● Cambio del parámetro de entrada/salida Mode al valor 3 y un flanco ascendente en ModeActivate.
El cambio de modo automático a modo manual se realiza sin discontinuidad únicamente en el editor de puesta
de servicio.
En el modo automático se tiene en cuenta la variable ActivateRecoverMode.

3816

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
State / Mode Descripción del modo de operación
4

Modo manual
En el modo manual se debe especificar un valor de salida PID manual en el parámetro ManualValue. Los
valores resultantes de este valor manual en las salidas para calefacción y refrigeración se obtienen del
escalado de salida configurado.
Este modo puede activarse también mediante ManualEnable = TRUE. Se recomienda cambiar los modos de
operación solo mediante Mode y ModeActivate.
El cambio de modo manual a modo automático se efectúa sin discontinuidad.
En el modo manual se tiene en cuenta la variable ActivateRecoverMode.

5

Valor de salida sustitutivo con monitorización de errores
El algoritmo de regulación está desactivado. La variable SetSubstituteOutput determina qué valor de salida
PID (PidOutputSum) se emite durante este modo de operación.
● SetSubstituteOutput = FALSE: Último valor de salida PID válido
● SetSubstituteOutput = TRUE: Valor de salida sustitutivo (SubstituteOutput)
Este modo de operación no puede activarse con Mode = 5.
Se activa en caso de error en lugar del modo de operación "Inactivo", cuando se cumplen todas las condi‐
ciones siguientes:
● Modo automático (State = 3)
● ActivateRecoverMode = TRUE
● Se han producido uno o varios errores en los que interviene ActivateRecoverMode.
En cuanto los errores dejan de estar activos, PID_Temp pasa de nuevo al modo automático.

Comportamiento ENO
Si State = 0, entonces ENO = FALSE.
Si State ≠ 0, entonces ENO = TRUE.

Cambio automático de modo de operación durante la puesta en servicio
Una vez realizada correctamente la optimización inicial o la optimización fina, se activa el modo
automático. La siguiente tabla muestra cómo se modifican Mode y State durante una
optimización inicial correcta.
N.º de ciclo Mode

State

Acción

0

4

4

Ajustar Mode = 1

1

1

4

Ajustar ModeActivate = TRUE

1

4

1

El valor de State se guarda en Mode

n

4

1

Optimización inicial correcta

n

3

3

Se inicia el modo automático

Se inicia la optimización inicial

En caso de error, PID_Temp cambia automáticamente el modo de operación.

Programación del PLC
Manual de programación y manejo, 11/2019

3817

Instrucciones
4.1 Instrucciones
La siguiente tabla muestra cómo se modifican Mode y State durante una optimización inicial
incorrecta.
N.º de ciclo Mode

State

Acción

0

4

4

Ajustar Mode = 1

1

1

4

Ajustar ModeActivate = TRUE

1

4

1

El valor de State se guarda en Mode

n

4

1

La optimización inicial se ha cancelado

n

4

4

Se inicia el modo manual

Se inicia la optimización inicial

Si ActivateRecoverMode = TRUE, se activa el modo de operación guardado en Mode. Al iniciar
la optimización inicial o fina, PID_Temp ha guardado el valor de State en el parámetro de
entrada/salida Mode. Por lo tanto, PID_Temp cambia al modo de operación desde el que se
inició la optimización.
Si ActivateRecoverMode = FALSE, se cambia al modo de operación "Inactivo".

Consulte también
Parámetro de salida PID_Temp (Página 3771)
Parámetro de entrada/salida PID_Temp (Página 3773)

Parámetro ErrorBits PID_Temp
Si hay varios errores presentes a la vez, los valores del ErrorBits se muestran sumados
binariamente. Si se muestra, p. ej., ErrorBits = 0000003h, significa que están presentes
simultáneamente los errores 0000001h y 0000002h.
ErrorBits

Descripción

(DW#16#...)
0000000
0000001

No hay ningún error.
El parámetro "Input" se encuentra fuera de los límites del valor real.
● Input > Config.InputUpperLimit o bien,
● Input < Config.InputLowerLimit
Si antes de producirse el error estaba activo el modo automático y se cumple ActivateRecoverMode =
TRUE, PID_Temp permanece en modo automático.
Si antes de producirse el error estaba activo el modo manual y se cumple ActivateRecoverMode = TRUE,
PID_Temp permanece en modo manual.
Si antes de producirse el error estaba activo el modo de operación Optimización inicial u Optimización fina
y se cumplía ActivateRecoverMode = TRUE, PID_Temp pasa al modo de operación guardado en Mode.

3818

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
ErrorBits

Descripción

(DW#16#...)
0000002

Valor no válido en el parámetro "Input_PER". Compruebe si hay un error en la entrada analógica.
Si antes de producirse el error estaba activo el modo automático y se cumple ActivateRecoverMode =
TRUE, PID_Temp emite el valor de salida sustitutivo configurado. En cuanto desaparece el error,
PID_Temp pasa de nuevo al modo automático.
Si antes de producirse el error estaba activo el modo manual y se cumple ActivateRecoverMode = TRUE,
PID_Temp permanece en modo manual.
Si antes de producirse el error estaba activo el modo de operación Optimización inicial u Optimización fina
y se cumplía ActivateRecoverMode = TRUE, PID_Temp pasa al modo de operación guardado en Mode.

0000004

Error durante la optimización fina. No se ha podido mantener la oscilación del valor real.
Si se utiliza PID_Temp como regulador de calefacción (Config.ActivateCooling = TRUE), a fin de generar
una oscilación del valor real y realizar correctamente la optimización fina, el valor de salida PID (PidOut‐
putSum) en la consigna debe ser
● positivo para la optimización fina de calefacción
● negativo para la optimización fina de refrigeración
Si no se cumple esta condición, utilice el offset de optimización (variables PIDSelfTune.TIR.OutputO‐
ffsetCool y PIDSelfTune.TIR.OutputOffsetHeat), ver AUTOHOTSPOT.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_Temp cancela la optimi‐
zación y cambia al modo de operación guardado en Mode.

0000008

Error al iniciar la optimización inicial. El valor real está demasiado próximo a la consigna o es mayor que
esta. Inicie la optimización fina.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_Temp cancela la optimi‐
zación y cambia al modo de operación guardado en Mode.

0000010

Se ha cambiado la consigna durante la optimización.
En la variable CancelTuningLevel puede ajustar la fluctuación admisible de la consigna.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_Temp cancela la optimi‐
zación y cambia al modo de operación guardado en Mode.

0000020

La optimización inicial no está permitida durante la optimización fina.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_Temp permanece en el
modo de operación Optimización fina.

0000040

Error durante la optimización inicial. La refrigeración no ha podido reducir el valor real.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_Temp cancela la optimi‐
zación y cambia al modo de operación guardado en Mode.

0000100

Un error en la optimización fina ha provocado parámetros no válidos.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_Temp cancela la optimi‐
zación y cambia al modo de operación guardado en Mode.

0000200

Valor no válido en el parámetro "Input": El valor no tiene un formato numérico válido.
Si antes de producirse el error estaba activo el modo automático y se cumple ActivateRecoverMode =
TRUE, PID_Temp emite el valor de salida sustitutivo configurado. En cuanto desaparece el error,
PID_Temp pasa de nuevo al modo automático.
Si antes de producirse el error estaba activo el modo manual y se cumple ActivateRecoverMode = TRUE,
PID_Temp permanece en modo manual.
Si antes de producirse el error estaba activo el modo de operación Optimización inicial u Optimización fina
y se cumplía ActivateRecoverMode = TRUE, PID_Temp pasa al modo de operación guardado en Mode.

Programación del PLC
Manual de programación y manejo, 11/2019

3819

Instrucciones
4.1 Instrucciones
ErrorBits

Descripción

(DW#16#...)
0000400

Error al calcular el valor de salida. Compruebe los parámetros PID.
Si antes de producirse el error estaba activo el modo automático y se cumple ActivateRecoverMode =
TRUE, PID_Temp emite el valor de salida sustitutivo configurado. En cuanto desaparece el error,
PID_Temp pasa de nuevo al modo automático.
Si antes de producirse el error estaba activo el modo de operación Optimización inicial u Optimización fina
y se cumplía ActivateRecoverMode = TRUE, PID_Temp pasa al modo de operación guardado en Mode.

0000800

Error de tiempo de muestreo: PID_Temp no se llama dentro del tiempo de muestreo del OB de alarma
cíclica.
Si antes de producirse el error estaba activo el modo automático y se cumple ActivateRecoverMode =
TRUE, PID_Temp permanece en modo automático.
Si antes de producirse el error estaba activo el modo manual y se cumple ActivateRecoverMode = TRUE,
PID_Temp permanece en modo manual.
Si antes de producirse el error estaba activo el modo de operación Optimización inicial u Optimización fina
y se cumplía ActivateRecoverMode = TRUE, PID_Temp pasa al modo de operación guardado en Mode.
Si este error se ha producido durante la simulación con PLCSIM, tenga en cuenta las indicaciones de
AUTOHOTSPOT.

0001000

Valor no válido en el parámetro "Setpoint" o "SubstituteSetpoint": El valor no tiene un formato numérico
válido.
Si antes de producirse el error estaba activo el modo automático y se cumplía ActivateRecoverMode =
TRUE, PID_Temp emite el valor de salida sustitutivo configurado. En cuanto desaparece el error,
PID_Temp pasa de nuevo al modo automático.
Si antes de producirse el error estaba activo el modo manual y se cumple ActivateRecoverMode = TRUE,
PID_Temp permanece en modo manual.
Si antes de producirse el error estaba activo el modo de operación Optimización inicial u Optimización fina
y se cumplía ActivateRecoverMode = TRUE, PID_Temp pasa al modo de operación guardado en Mode.

0010000

Valor no válido en el parámetro ManualValue. El valor no tiene un formato numérico válido.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_Temp permanece en el
modo manual y utiliza SubstituteOutput como valor de salida PID. En cuanto se especifica un valor válido
en ManualValue, PID_Temp lo utiliza como valor de salida PID.

0020000

Valor no válido en la variable SubstituteOutput. El valor no tiene un formato numérico válido.
PID_Temp permanece en el modo de operación "Valor de salida sustitutivo con monitorización de errores"
o en el modo manual y utiliza el límite inferior del valor de salida PID para calefacción (Config.Out‐
put.Heat.PidLowerLimit) como valor de salida PID.
En cuanto se especifica un valor válido en SubstituteOutput, PID_Temp lo utiliza como valor de salida PID.

0040000

Valor no válido en el parámetro Disturbance. El valor no tiene un formato numérico válido.
Si antes de producirse el error estaba activo el modo automático y ActivateRecoverMode = TRUE, Dis‐
turbance se ajusta a cero. PID_Temp permanece en el modo automático.
Si antes de producirse el error estaba activo el modo de operación Optimización inicial u Optimización fina
y se cumplía ActivateRecoverMode = TRUE, PID_Temp pasa al modo de operación guardado en Mode.
Si en la fase actual Disturbance no influye en el valor de salida, la optimización no se cancela.

0200000

Error en el maestro en la cascada: Slaves no están en el modo automático o han activado la consigna
sustitutiva e impiden la optimización del maestro.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_Temp cancela la optimi‐
zación y cambia al modo de operación guardado en Mode.

0400000

La optimización inicial para calefacción no está permitida mientras esté activa la refrigeración.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_Temp cancela la optimi‐
zación y cambia al modo de operación guardado en Mode.

3820

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
ErrorBits

Descripción

(DW#16#...)
0800000

El valor real debe estar próximo a la consigna para iniciar la optimización inicial para refrigeración.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_Temp cancela la optimi‐
zación y cambia al modo de operación guardado en Mode.

1000000

Error al iniciar la optimización: Heat.EnableTuning y Cool.EnableTuning no están ajustados o no coinciden
con la configuración.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_Temp cancela la optimi‐
zación y cambia al modo de operación guardado en Mode.

2000000

Para la optimización inicial para refrigeración es imprescindible que la optimización inicial para calefacción
se haya realizado correctamente.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_Temp cancela la optimi‐
zación y cambia al modo de operación guardado en Mode.

4000000

Error al iniciar la optimización fina: Heat.EnableTuning y Cool.EnableTuning no deben estar ajustados
simultáneamente.
Si antes de producirse el error se cumplía ActivateRecoverMode = TRUE, PID_Temp cancela la optimi‐
zación y cambia al modo de operación guardado en Mode.

8000000

El error durante el cálculo de los parámetros PID ha provocado parámetros no válidos.
Los parámetros no válidos se rechazan y los parámetros PID originales se conservan sin cambios.
Se distinguen los siguientes casos:
● Si antes de producirse el error estaba activo el modo automático y se cumple ActivateRecoverMode
= TRUE, PID_Temp permanece en modo automático.
● Si antes de producirse el error estaba activo el modo manual y se cumple ActivateRecoverMode =
TRUE, PID_Temp permanece en modo manual.
● Si antes de producirse el error estaba activo el modo de operación Optimización inicial u Optimización
fina y se cumplía ActivateRecoverMode = TRUE, PID_Temp pasa al modo de operación guardado en
Mode.

Variable ActivateRecoverMode PID_Temp
La variable ActivateRecoverMode determina el comportamiento en caso de error. El parámetro
Error indica si hay algún un error pendiente en ese momento. Si deja de persistir el error, se
indica Error = FALSE. El parámetro ErrorBits indica qué errores han ocurrido.

Modo automático y modo manual
ATENCIÓN
Su instalación puede sufrir daños.
Si se cumple ActivateRecoverMode = TRUE, incluso al rebasar los límites del valor real
PID_Temp permanece en el modo automático o manual en caso de fallo.
De este modo, su instalación puede sufrir daños.
Configure un comportamiento en caso de error para su sistema regulado que proteja su
instalación de daños.

Programación del PLC
Manual de programación y manejo, 11/2019

3821

Instrucciones
4.1 Instrucciones

ActivateReco‐
verMode

Descripción

FALSE

En caso de fallo, PID_Temp cambia al modo de operación "Inactivo". El regulador no se activa hasta que
no se detecta un flanco descendente en Reset o un flanco ascendente en ModeActivate.

TRUE

Modo automático
Si en el modo automático se producen errores con frecuencia, este ajuste empeorará el comportamiento
de regulación, ya que PID_Temp alterna entre el valor de salida PID calculado y el valor de salida susti‐
tutivo cada vez que se produce un error. Compruebe en tal caso el parámetro ErrorBits y elimine la causa
de error.
Si se produce uno o varios de los errores siguientes y antes de producirse el error estaba activo el modo
automático, PID_Temp permanece en el modo automático:
● 0000001h: El parámetro "Input" se encuentra fuera de los límites del valor real.
● 0000800h: Error en tiempo de muestreo
● 0040000h: Valor no válido en el parámetro Disturbance.
● 8000000h: Error durante el cálculo de los parámetros PID
Si se produce uno o varios de los errores siguientes y antes de producirse el error estaba activo el modo
automático, PID_Temp cambia al modo de operación "Valor de salida sustitutivo con monitorización de
errores":
● 0000002h: Valor no válido en el parámetro Input_PER.
● 0000200h: Valor no válido en el parámetro Input.
● 0000400h: Error al calcular el valor de salida.
● 0001000h: Valor no válido en el parámetro Setpoint o SubstituteSetpoint.
En cuanto los errores dejan de estar activos, PID_Temp pasa de nuevo al modo automático.
Si en el modo de operación "Valor de salida sustitutivo con monitorización de errores" se produce el
siguiente error, PID_Temp ajusta el valor de salida PID mientras que este error persista en Config.Out‐
put.Heat.PidLowerLimit:
● 0020000h: Valor no válido en la variable SubstituteOutput. El valor no tiene un formato numérico válido.
Este comportamiento no depende de SetSubstituteOutput.
Modo manual
Si se produce uno o varios de los errores siguientes y antes de producirse el error estaba activo el modo
manual, PID_Temp permanece en el modo manual.
Si en el modo manual se produce el siguiente error, PID_Temp ajusta el valor de salida PID mientras este
error persista en SubstituteOutput:
● 0010000h: Valor no válido en el parámetro ManualValue. El valor no tiene un formato numérico válido.
Si en el modo manual persiste el error 0010000h y se produce el siguiente error, PID_Temp ajusta el valor
de salida PID mientras este error persista en Config.Output.Heat.PidLowerLimit
● 0020000h: Valor no válido en la variable SubstituteOutput. El valor no tiene un formato numérico válido.
Este comportamiento no depende de SetSubstituteOutput.

3822

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Optimización inicial y optimización fina
ActivateReco‐
verMode

Descripción

FALSE

En caso de fallo, PID_Temp cambia al modo de operación "Inactivo". El regulador no se activa hasta que
no se detecta un flanco descendente en Reset o un flanco ascendente en ModeActivate.

TRUE

Si se produce el siguiente error, PID_Temp permanece en el modo de operación activo:
● 0000020h: La optimización inicial no está permitida durante la optimización fina.
Los siguientes errores se omiten:
● 0010000h: Valor no válido en el parámetro ManualValue.
● 0020000h: Valor no válido en la variable SubstituteOutput.
Con todos los demás errores, PID_Temp interrumpe la optimización y cambia al modo de operación desde
el que se inició la optimización.

Variable Warning PID_Temp
Si hay varias advertencias presentes a la vez, los valores de la variable Warning se muestran
sumados en modo binario. Si se muestra p. ej. la advertencia 0000003h, significa que las
advertencias 0000001h y 0000002h están presentes simultáneamente.
Warning

Descripción

(DW#16#....)
0000000

No hay ninguna advertencia.

0000001

Durante la optimización inicial no se encontró el punto de inflexión.

0000004

La consigna ha sido limitada a los límites ajustados.

0000008

En el método de cálculo seleccionado no se han definido todas las propiedades necesarias del sistema
regulado. En sustitución se calcularon los parámetros PID con el método TIR.TuneRuleHeat = 3 o TIR.Tu‐
neRuleCool = 3.

0000010

No se ha podido cambiar el modo de operación porque Reset = TRUE o ManualEnable = TRUE.

0000020

El tiempo de muestreo del algoritmo PID está limitado por el tiempo de ciclo del OB invocante.
Para obtener mejores resultados, utilice tiempos de ciclo más cortos para el OB.

0000040

El valor real ha rebasado por exceso uno de sus límites de advertencia.

0000080

Valor no válido en Mode. El modo de operación no se conmuta.

0000100

El valor manual se ha limitado a los límites del valor de salida PID.

0000200

No se admiten las reglas indicadas para la optimización. No se calculan parámetros PID.

0001000

El valor de salida sustitutivo no puede alcanzarse porque está fuera de los límites del valor de salida.

0004000

No se admite el número indicado del valor de salida para calefacción y/o refrigeración.
Se utilizará solamente la salida OutputHeat o OutputCool.

0008000

Valor no válido en PIDSelfTune.SUT.AdaptDelayTime. Se utilizará el valor predeterminado 0.

0010000

Valor no válido en PIDSelfTune.SUT.CoolingMode. Se utilizará el valor predeterminado 0.

Programación del PLC
Manual de programación y manejo, 11/2019

3823

Instrucciones
4.1 Instrucciones
Warning

Descripción

(DW#16#....)
0020000

La activación de la refrigeración (variable Config.ActivateCooling) no se soporta en un regulador que se
utilice como maestro (variable Config.Cascade.IsMaster). PID_Temp funciona como regulador de calefac‐
ción.
Ajuste la variable Config.ActivateCooling a FALSE.

0040000

Valor no válido en Retain.CtrlParams.Heat.Gain, Retain.CtrlParams.Cool.Gain o Config.CoolFactor.
PID_Temp solo soporta valores positivos para la ganancia proporcional (calefacción y refrigeración) y el
factor de enfriamiento. El modo automático permanece activo con valor de salida PID 0.0. Se detiene la
acción integral.

Se borrarán las siguientes advertencias en cuanto se haya solucionado la causa o se repita la
acción con parámetros válidos:
● 0000001h
● 0000004h
● 0000008h
● 0000040h
● 0000100h
Todas las demás advertencias se eliminan si hay un flanco ascendente en Reset o ErrorAck.

Variable PwmPeriode
Al utilizar OutputHeat_PWM o OutputCool_PWM, si el tiempo de muestreo del algoritmo PID
(Retain.CtrlParams.Heat.Cycle o Retain.CtrlParams.Heat.Cycle), y por tanto la duración del
período de la modulación del ancho de impulso, es demasiado grande para mejorar la
uniformidad del valor real, en los parámetros Config.Output.Heat.PwmPeriode y
Config.Output.Cool.PwmPeriode respectivamente debe especificarse una duración del
período más corta.

Duración del período de la modulación del ancho de impulso en OutputHeat_PWM
Duración del período de la PWM en la salida OutputHeat_PWM en función de
Config.Output.Heat.PwmPeriode:
● Heat.PwmPeriode = 0.0 (predeterminado)
El tiempo de muestreo del algoritmo PID para calefacción (Retain.CtrlParams.Heat.Cycle)
se utiliza como duración del período de la PWM.
● Heat.PwmPeriode > 0.0
El valor se redondea a un a un múltiplo entero del tiempo de muestreo PID_Temp
(CycleTime.Value) y se utiliza como duración del período de la PWM.
El valor debe cumplir las condiciones siguientes:
– Heat.PwmPeriode ≤ Retain.CtrlParams.Heat.Cycle
– Heat.PwmPeriode > Config.Output.Heat.MinimumOnTime
– Heat.PwmPeriode > Config.Output.Heat.MinimumOffTime

3824

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Duración del período de la modulación del ancho de impulso en OutputCool_PWM
Duración del período de la PWM en la salida OutputCool_PWM en función de
Config.Output.Cool.PwmPeriode y del método para calefacción/refrigeración:
● Cool.PwmPeriode = 0.0 y factor de refrigeración (Config.AdvancedCooling = FALSE):
El tiempo de muestreo del algoritmo PID para calefacción (Retain.CtrlParams.Heat.Cycle)
se utiliza como duración del período de la PWM.
● Cool.PwmPeriode = 0.0 y cambio de parámetros PID (Config.AdvancedCooling = TRUE):
El tiempo de muestreo del algoritmo PID para refrigeración (Retain.CtrlParams.Cool.Cycle)
se utiliza como duración del período de la PWM.
● Cool.PwmPeriode > 0.0:
El valor se redondea a un a un múltiplo entero del tiempo de muestreo PID_Temp
(CycleTime.Value) y se utiliza como duración del período de la PWM.
El valor debe cumplir las condiciones siguientes:
– Cool.PwmPeriode ≤ Retain.CtrlParams.Cool.Cycle o bien:
Retain.CtrlParams.Heat.Cycle
– Cool.PwmPeriode > Config.Output.Cool.MinimumOnTime
– Cool.PwmPeriode > Config.Output.Cool.MinimumOffTime
Config.Output.Cool.PwmPeriode solo es efectivo si la salida de refrigeración está activada
(Config.ActivateCooling =TRUE).
Al utilizar PwmPeriode, la precisión de la señal de salida de la PWM se determina mediante la
relación de PwmPeriode respecto al tiempo de muestreo PID_Temp (tiempo de ciclo del OB).
PwmPeriode debería ser al menos 10 veces el tiempo de muestreo del algoritmo PID.
Si el tiempo de muestreo del algoritmo PID no es un número entero múltiplo de PwmPeriode,
cada último período de la PWM se prolonga correspondientemente dentro del tiempo de
muestreo del algoritmo PID.

Programación del PLC
Manual de programación y manejo, 11/2019

3825

Instrucciones
4.1 Instrucciones

Ejemplo de OutputHeat_PWM
2XWSXW





W PV
2XWSXWB3:0

758(






















 











)$/6(
W PV





①
②
③





Tiempo de muestreo PID_Temp = 100.0 ms (tiempo de ciclo del OB de alarma cíclica invocante, variable CycleTi‐
me.Value)
Tiempo de muestreo del algoritmo PID = 2000.0 ms (variable Retain.CtrlParams.Heat.Cycle)
Duración del período de la PWM para calefacción = 600.0 ms (variable Config.Output.Heat.PwmPeriode)

Variable IntegralResetMode
La variable IntegralResetMode determina cómo se preasigna la acción I PIDCtrl.IOutputOld:
● al cambiar del modo de operación "Inactivo" al "Modo automático"
● Con flanco TRUE -> FALSE en el parámetro Reset y el parámetro Mode = 3

3826

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Este ajuste surte efecto solo para un ciclo y es solo efectivo si la acción I está activada
(variables Retain.CtrlParams.Heat.Ti y Retain.CtrlParams.Cool.Ti > 0.0)
IntegralReset‐
Mode

Descripción

0

Filtrar
El valor de PIDCtrl.IOutputOld se preasigna de tal modo que la conmutación se realice sin discontinuidad,
es decir, el "Modo automático" se inicia partiendo del valor de salida = 0.0 (parámetro PidOutputSum) y no
se produce salto del valor de salida, con independencia del error de regulación (consigna - valor real).

1

Borrar
Se recomienda ajustar la ponderación de la acción P (variables Retain.CtrlParams.Heat.PWeighting y
Retain.CtrlParams.Cool.PWeighting) a 1.0 si se utiliza esta opción.
El valor de PIDCtrl.IOutputOld se borra. Si existe un error de regulación, se produce un salto del valor de
salida PID. La dirección del salto del valor de salida depende de la ponderación activa de la acción P
(variables Retain.CtrlParams.Heat.PWeighting y Retain.CtrlParams.Cool.PWeighting) y del error de re‐
gulación:
● Ponderación activa de la acción P = 1.0:
El salto del valor de salida y el error de regulación tienen idéntico signo.
Ejemplo: si el valor real está por debajo de la consigna (error de regulación positivo), el valor de salida
PID salta a un valor positivo.
● Ponderación activa de la acción P < 1.0:
Para errores de regulación grandes, el salto del valor de salida PID y el error de regulación tienen
idéntico signo.
Ejemplo: si el valor real es muy inferior a la consigna (error de regulación positivo), el valor de salida
PID salta a un valor positivo.
Para errores de regulación pequeños, el salto del valor de salida PID y el error de regulación tienen
distinto signo.
Ejemplo: si el valor real es ligeramente inferior a la consigna (error de regulación positivo), el valor de
salida PID salta a un valor negativo. Normalmente esto no es deseable, pues da lugar a un aumento
provisional del error de regulación.
Cuanto menor esté configurada la ponderación de la acción P, mayor debe ser el error de regulación,
a fin de que el salto del valor de salida PID conserve el signo.
Se recomienda ajustar la ponderación de la acción P (variables Retain.CtrlParams.Heat.PWeighting y
Retain.CtrlParams.Cool.PWeighting) a 1.0 si se utiliza esta opción. En caso contrario, esto podría provo‐
car el comportamiento descrito no deseado en caso de errores de regulación pequeños. Alternativamente,
también puede utilizar IntegralResetMode = 4. Esta opción garantiza que el signo del salto de la salida PID
y del error de regulación sea idéntico con independencia de la ponderación configurada de la acción P y
del error de regulación.

2

Mantener
El valor de PIDCtrl.IOutputOld no se modifica. Mediante el programa de usuario se puede especificar un
nuevo valor.

Programación del PLC
Manual de programación y manejo, 11/2019

3827

Instrucciones
4.1 Instrucciones
IntegralReset‐
Mode

Descripción

3

Preasignar
El valor de PIDCtrl.IOutputOld se preasigna automáticamente como si en el último ciclo hubiese sido
PidOutputSum = OverwriteInitialOutputValue.

4

Como el cambio de consigna (solo para PID_Temp con versión ≥ 1.1)
El valor de PIDCtrl.IOutputOld se preasigna automáticamente de forma que se obtenga un salto del valor
de salida PID similar al de un regulador PI en modo automático en caso de cambio de consigna del valor
real actual a la consigna actual.
Si existe un error de regulación, se produce un salto del valor de salida PID. El salto del valor de salida PID
y el error de regulación tienen idéntico signo.
Ejemplo: si el valor real está por debajo de la consigna (error de regulación positivo), el valor de salida PID
salta a un valor positivo. Esto es independiente de la ponderación configurada de la acción P y del error
de regulación.

Si se asigna a IntegralResetMode un valor fuera del rango válido, PID_Temp se comportará
como con la preasignación de IntegralResetMode:
● PID_Temp hasta V1.0: IntegralResetMode = 1
● PID_Temp a partir de V1.1: IntegralResetMode = 4

Funciones básicas PID
Diferencias respecto a CONT_C S7-300/400
La instrucción CONT_C se ha creado con acceso optimizado al bloque.
Todos los parámetros son remanentes. La remanencia no puede modificarse. Los valores
actuales de variables remanentes solo se actualizan si se carga CONT_C por completo.
AUTOHOTSPOT
Por lo demás, CONT_C se comporta en una CPU S7-1500 igual que en una CPU S7-300 o
S7-400.
Descripción de CONT_C (Página 6236)
Funcionamiento de CONT_C (Página 6237)
Diagrama de bloques de CONT_C (Página 6239)
Parámetros de entrada de CONT_C (Página 6240)
Parámetros de salida de CONT_C (Página 6241)

Diferencias respecto a CONT_S S7-300/400
La instrucción CONT_S se ha creado con acceso optimizado al bloque. S
Todos los parámetros son remanentes. La remanencia no puede modificarse. Los valores
actuales de variables remanentes solo se actualizan si se carga CONT_S por completo.
AUTOHOTSPOT
Por lo demás, CONT_S se comporta en una CPU S7-1500 igual que en una CPU S7-300 o
S7-400.

3828

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Descripción de CONT_S (Página 6242)
Funcionamiento de CONT_S (Página 6243)
Diagrama de bloques de CONT_S (Página 6245)
Parámetros de entrada de CONT_S (Página 6246)
Parámetros de salida de CONT_S (Página 6247)

Diferencias respecto a PULSEGEN S7-300/400
La instrucción PULSEGEN se ha creado con acceso optimizado al bloque.
Todos los parámetros son remanentes. La remanencia no puede modificarse. Los valores
actuales de variables remanentes solo se actualizan si se carga PULSEGEN por completo.
AUTOHOTSPOT
En una CPU S7-1500, PULSEGEN se comporta igual que en una CPU S7-300, S7-400.
Descripción de PULSEGEN (Página 6248)
Funcionamiento de PULSEGEN (Página 6249)
Modos de operación de PULSEGEN (Página 6252)
Regulación de tres puntos (Página 6253)
Regulación de dos puntos (Página 6255)
Parámetros de entrada de PULSEGEN (Página 6256)
Parámetros de salida de PULSEGEN (Página 6258)

Diferencias respecto a TCONT_CP S7-300/400
La instrucción TCONT_CP se ha creado con acceso optimizado al bloque.
Todos los parámetros son remanentes. La remanencia no puede modificarse. Los valores
actuales de variables remanentes solo se actualizan si se carga TCONT_CP por completo.
AUTOHOTSPOT
Por lo demás, TCONT_CP se comporta en una CPU S7-1500 igual que en una CPU S7-300
o S7-400.
Descripción de TCONT_CP (Página 6258)
Funcionamiento de TCONT_CP (Página 6259)
Funcionamiento del generador de impulsos (Página 6268)
Diagrama de bloques TCONT_CP (Página 6271)
Parámetros de entrada de TCONT_CP (Página 6272)
Parámetros de salida de TCONT_CP (Página 6273)
Parámetros de entrada/salida de TCONT_CP (Página 6274)
Variables estáticas de TCONT_CP (Página 6274)
Parámetro STATUS_H (Página 6279)

Programación del PLC
Manual de programación y manejo, 11/2019

3829

Instrucciones
4.1 Instrucciones
Parámetro STATUS_D (Página 6280)

Diferencias respecto a TCONT_S S7-300/400
La instrucción TCONT_S se ha creado con acceso optimizado al bloque.
Todos los parámetros son remanentes. La remanencia no puede modificarse. Los valores
actuales de variables remanentes solo se actualizan si se carga TCONT_S por completo.
AUTOHOTSPOT
Por lo demás, TCONT_S se comporta en una CPU S7-1500 igual que en una CPU S7-300 o
S7-400.
Descripción de TCONT_S (Página 6281)
Funcionamiento de TCONT_S (Página 6282)
Diagrama de bloques de TCONT_S (Página 6286)
Parámetros de entrada de TCONT_S (Página 6287)
Parámetros de salida de TCONT_S (Página 6288)
Parámetros de entrada/salida de TCONT_S (Página 6288)
Variables estáticas de TCONT_S (Página 6289)

Polyline
Compatibilidad con CPU y FW
La siguiente tabla muestra en qué CPU puede usarse cada versión de Polyline:
CPU

FW

Polyline

S7-1200

A partir de V4.2

V1.0

CPU basadas en S7-1500

A partir de V2.0

V1.0

Descripción de Polyline
Descripción
La instrucción Polyline reproduce el valor de entrada Input mediante una característica en el
valor de salida Output. La característica se define como línea poligonal con 50 nodos como
máximo. Entre estos nodos se efectúa una interpolación lineal. La línea poligonal puede
ajustarse a la característica deseada por medio del número y la configuración de los nodos.
La instrucción Polyline puede utilizarse, por ejemplo, para linealizar un comportamiento no
lineal de sensores o actuadores.

3830

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Cálculo de interpolación
Polyline calcula el valor de salida del parámetro Output para el valor de entrada del parámetro
Input, el cual se sitúa entre los valores de los nodos xi y xi+1 con una interpolación lineal. La
interpolación lineal se calcula con la siguiente fórmula:

Output =

(Input - xi )
(yi+1 - yi ) + yi
(xi+1 - xi )

Con el parámetro Reset = TRUE también puede especificarse un valor de salida alternativo
mediante el parámetro SubstituteOutput.

Datos de línea poligonal
Los pares de valores de la línea poligonal se encuentran en la sección Static de la instrucción.
Nota
● Número mínimo de pares de valores que deben configurarse: 2.
● Número máximo de pares de valores que deben configurarse: 50.
● Para que la configuración sea válida, los valores x deben indicarse en orden ascendente.
Para poder modificar los datos de la línea poligonal sin que los cambios tengan efecto
inmediato, se han duplicado los pares de valores de la línea poligonal y se han incluido en las
siguientes estructuras:
● UserData
En esta estructura, los datos de la línea poligonal pueden editarse.
Utilice esta estructura para definir o modificar los datos de la línea poligonal. Las
modificaciones que se realicen en esta estructura no afectarán al cálculo de interpolación
hasta que no se inicien los procesos de comprobación y copia de los datos en la estructura
WorkingData. Esto se realiza ajustando Validate = TRUE o automáticamente durante la
primera ejecución de Polyline tras cambiar el estado operativo de la CPU de STOP a RUN.
El ajuste predeterminado de los valores de esta estructura no es una configuración válida.
Para utilizar los valores en el cálculo de interpolación, asigne valores válidos a las variables.
● WorkingData
En esta estructura, los datos de la línea poligonal no pueden editarse. Estos datos se
utilizan para el cálculo de interpolación. No modifique los datos manualmente en esta
estructura.
Ambas estructuras tienen el mismo tipo de datos y, por lo tanto, el mismo contenido:
● NumberOfUsedPoints
Número de nodos utilizados para el cálculo de interpolación.
● Point
La matriz con 50 elementos contiene pares de valores de los nodos Point[i].x y Point[i].y con
el índice "i" de 1 a 50.
La figura siguiente muestra una línea poligonal con cuatro nodos:

Programación del PLC
Manual de programación y manejo, 11/2019

3831

Instrucciones
4.1 Instrucciones
Output

Point[4].y
Point[4]

Point[3].y
Point[3]
Point[2].y
Point[2]
Point[1].y
Point[1]

Point[1].x

Point[2].x

Point[3].x

Point[4].x

Input

Llamada
En un OB o FC, Polyline se llama como DB de instancia individual. En un FB, Polyline puede
llamarse como DB de instancia individual, como DB multiinstancia o como DB de instancia de
parámetro.
Cuando se llama la instrucción, no se crea ningún objeto tecnológico. No se dispone de interfaz
de parametrización o puesta en marcha. Polyline se parametriza directamente mediante el DB
de instancia y se pone en marcha por medio de una tabla de observación del programa de
usuario en la CPU o HMI.

Arranque
Las variables de las estructuras UserData y WorkingData no son remanentes. Estas variables
se inicializan con los valores de arranque después de cada cambio del estado operativo de la
CPU de STOP a RUN.
Si modifica los valores actuales en la estructura UserData en el modo online, y desea
conservar estos valores tras cambiar el estado operativo de la CPU de STOP a RUN, guarde
estos valores en los valores de arranque del bloque de datos.
La primera vez que se llame la instrucción Polyline después de cambiar el estado operativo de
la CPU de STOP a RUN, la validez de los datos se comprobará automáticamente en la
estructura UserData. Si la comprobación es satisfactoria, los datos se transmitirán a la
estructura WorkingData.

Comportamiento en caso de error
La instrucción Polyline detecta diversos errores que pueden producirse durante el cálculo de
la interpolación. Pese a la presencia de errores, el resultado del cálculo de la interpolación
puede emitirse en la salida. Si debido a un error no es posible calcular correctamente el
resultado de la interpolación, en la salida se emitirá un valor de salida sustitutivo.

3832

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Si se produce un error que no permite calcular correctamente el resultado de la interpolación,
en la variable ErrorMode deberá definir el valor de salida sustitutivo de la siguiente manera:
ErrorMode

Output

0

Valor del parámetro Input

1

Valor del parámetro SubstituteOutput

2

Último resultado válido del cálculo de interpolación
0.0 en caso de que no haya ningún resultado válido

Lo siguiente se aplica además a todos los valores de la variable ErrorMode:
● Si el valor de salida sustitutivo no es un valor REAL válido, se emite 0.0 como valor de salida.
● El valor de salida sustitutivo se limita al rango de valores del tipo de datos REAL. Solo
entonces se emite el valor de salida sustitutivo en el parámetro Output.
● La variable ErrorMode solo es efectiva si está ajustado el parámetro Reset = FALSE. Si el
parámetro Reset = TRUE está activado, el valor del parámetro SubstituteOutput se emite
en el parámetro Output.
El parámetro Error indica si hay algún un error pendiente en ese momento. Cuando el error
desaparece, Error se ajusta a FALSE. El parámetro ErrorBits muestra qué errores se han
producido. ErrorBits es remanente y solo se borra con un flanco ascendente en el parámetro
Reset o ErrorAck.

Funcionamiento de Polyline
Datos de línea poligonal
Para modificar los datos de la línea poligonal, los valores deben editarse en la estructura
UserData. A continuación, se comprueba la validez de los valores y se transmiten a la
estructura WorkingData. Una vez que se encuentran en la estructura WorkingData, los valores
se utilizan para calcular la interpolación.
Los valores se comprueban y se transfieren en los siguientes casos:
● Cuando el parámetro Validate se ajusta a TRUE, mientras que el parámetro Reset está
ajustado a FALSE.
● Cuando se llama por primera vez Polyline tras haber cambiado el estado operativo de la
CPU de STOP a RUN, mientras el parámetro Reset está ajustado a FALSE.
Si Polyline ya se ha llamado, p. ej., en el OB100, en las siguientes llamadas no se repetirá
la comprobación automática de los valores.
Si los datos de la línea poligonal de la estructura UserData no son válidos, no se modificarán
los datos anteriores de la línea poligonal de la estructura WorkingData y se emitirá un mensaje
de error correspondiente. Si la comprobación se efectúa por primera vez, no hay valores
válidos disponibles en la estructura WorkingData y se emite un mensaje de error al efecto. En
este caso, el parámetro Output se definirá con el valor de salida sustitutivo que se configura
con la variable ErrorMode.
La comprobación y la transmisión de los valores de la estructura UserData requiere más
tiempo de ejecución de CPU que el cálculo de interpolación. En aplicaciones en las que el
tiempo es un factor crítico, la primera ejecución de Polyline puede hacerse en el OB de
arranque 100. De este modo, el laborioso proceso de comprobación y transmisión de datos de

Programación del PLC
Manual de programación y manejo, 11/2019

3833

Instrucciones
4.1 Instrucciones
la línea poligonal que debe realizarse una vez, concluirá antes que las secciones de programa
de aplicación cíclicas.

Validez de los datos de la línea poligonal
Cuando se comprueban los valores de la estructura UserData, los valores deben cumplir las
siguientes condiciones para que exista una línea poligonal válida que permita calcular la
interpolación:
● 2 ≤ UserData.NumberOfUsedPoints ≤ 50
● UserData.Point[j].x < UserData.Point[j+1].x con índice j = 1..
(UserData.NumberOfUsedPoints – 1)
● -3.402823e+38 ≤ UserData.Point[i].x ≤ 3.402823e+38 con índice i =
1..UserData.NumberOfUsedPoints
● -3.402823e+38 ≤ UserData.Point[i].y ≤ 3.402823e+38 con índice i =
1..UserData.NumberOfUsedPoints
● UserData.Point[i].x and UserData.Point[i].y son valores REAL válidos (≠ NaN) con índice
i = 1..UserData.NumberOfUsedPoints
Si durante la comprobación no se cumplen una o varias condiciones, los valores de la
estructura UserData no se aplicarán en la estructura WorkingData. En el parámetro ErrorBits
(Página 3838) se emite un mensaje de error al efecto.
El ajuste predeterminado de los valores de la estructura UserData no es una configuración
válida. Para utilizar las variables en el cálculo de interpolación, asigne valores válidos a las
variables.
Nota
Si la aplicación necesita más del número máximo de 50 nodos, utilice dos o más instancias de
Polyline.

3834

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Cálculo del valor de salida
Si el valor de entrada del parámetro Input se sitúa por debajo del primer valor x o por encima
del último valor x de los nodos utilizados, configure la asignación del parámetro Output con los
ajustes siguientes en la variable OutOfRangeMode:
● OutOfRangeMode = 0
El valor de salida se extrapola con la pendiente del primer nodo o de los dos últimos nodos.
Output

Point[4].y
Point[4]

Point[3].y
Point[3]
Point[2].y
Point[2]
Point[1].y
Point[1]

Point[1].x

Point[2].x

Point[3].x

Point[4].x

Input

Si la variable OutOfRangeMode se encuentra fuera del rango de valores admisible de 0 a
1, se hará efectivo el ajuste predeterminado 0.
● OutOfRangeMode = 1
El valor de salida se limita al valor y del primer nodo o del último.
Output

Point[4].y
Point[4]

Point[3].y
Point[3]
Point[2].y
Point[2]
Point[1].y
Point[1]

Point[1].x

Point[2].x

Point[3].x

Point[4].x

Input

El parámetro Output tiene un rango de valores admisible de un tipo de datos REAL de entre
-3.402823e+38 y 3.402823e+38. La validez del valor de salida del parámetro Output se
comprueba cada vez que se ejecuta la instrucción Polyline. Si el cálculo de interpolación da
como resultado un valor REAL no válido, el valor de salida se sustituye con el ajuste de la
variable ErrorMode.

Programación del PLC
Manual de programación y manejo, 11/2019

3835

Instrucciones
4.1 Instrucciones

Comportamiento de habilitación EN/ENO
Si se cumple una de las siguientes condiciones, la salida de habilitación ENO se ajusta a
FALSE:
● La entrada de habilitación EN está ajustada a TRUE y el parámetro Output se ha definido
con un valor de salida sustitutivo en caso de mensajes de error ErrorBits ≥ 16#0001_0000.
● La entrada de habilitación EN está ajustada a FALSE.
De lo contrario, la salida de habilitación ENO se ajusta a TRUE.

Nodos utilizados actualmente
La variable NextXIndex emite el índice del valor x inmediatamente superior para el valor de
entrada actual. Esto permite determinar los nodos utilizados para el cálculo de interpolación
actual.
WorkingData.Point[NextXIndex-1].x < Input ≤ WorkingData.Point[NextXIndex].x
Ejemplo:
● Si el valor del parámetro Input se sitúa entre WorkingData.Point[3].x y
WorkingData.Point[4].x, la variable NextXIndex tendrá el valor 4.
● Si el valor del parámetro Input es menor que WorkingData.Point[1].x, la variable
NextXIndex tendrá el valor 1.
● Si el valor del parámetro Input es mayor que
WorkingData.Point[WorkingData.NumberOfUsedPoints].x y, por consiguiente, mayor que
el último valor x de la línea poligonal, la variable NextXIndex tendrá el valor de la variable
WorkingData.NumberOfUsedPoints + 1. Por consiguiente, el máximo valor admisible de la
variable NextXIndex es 51.

Parámetros de entrada de Polyline
Parámetro

Tipo de da‐
tos

Ajuste pre‐
determinado

Descripción

Input

REAL

0.0

Valor de entrada

Substitu‐
teOutput

REAL

0.0

SubstituteOutput se utiliza como valor de salida sustitutivo en los siguientes
casos:
● Reset = TRUE
o bien
● Si no es posible calcular correctamente el resultado de la interpolación
debido a un error con mensaje de error ErrorBits ≥ 16#0001_0000 y
ErrorMode está ajustado al valor 1 .

Validate

3836

BOOL

FALSE

Si Validate está ajustado a TRUE, se comprobará la validez de los datos de la
línea poligonal en UserData y se aplicarán a WorkingData.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Tipo de da‐
tos

Ajuste pre‐
determinado

Descripción

ErrorAck

BOOL

FALSE

Borra los mensajes de error
● Flanco FALSE -> TRUE
ErrorBits se desactiva

Reset

BOOL

FALSE

Reinicia la instrucción por medio de:
● Flanco FALSE -> TRUE
ErrorBits se desactiva.
● Mientras Reset esté ajustado a TRUE, el valor de salida sustitutivo
SubstituteOutput se emitirá en la salida.
● Mientras Reset esté ajustado a FALSE, se efectuará el cálculo de
interpolación.

Parámetros de salida de Polyline
Parámetro

Tipo de da‐
tos

Ajuste pre‐
determinado

Descripción

Output

REAL

0.0

Valor de salida

Error

BOOL

FALSE

Si Error está ajustado a TRUE, actualmente hay al menos un error presente.

ErrorBits

DWORD

DW#16#0

El parámetro ErrorBits (Página 3838) muestra qué mensajes de error existen.
ErrorBits es remanente y se desactiva con un flanco ascendente en Reset o
ErrorAck .

Variables estáticas de Polyline
Variable

Tipo de datos

Ajuste predeter‐
minado

UserData

AuxFct_PointTa‐ ble

Descripción
Rango de entrada de datos de la línea poligonal
Los datos de la línea poligonal de la estructura
UserData pueden editarse.
Las modificaciones que se realicen en esta es‐
tructura no afectarán al cálculo de interpolación
hasta que no se inicien los procesos de compro‐
bación y copia de los datos en la estructura Wor‐
kingData.

UserData.NumberOfUsedPoints

INT

0

Número de nodos utilizados para el cálculo de
interpolación

UserData.Point

Array[1..50] of
AuxFct_Point

-

Nodos para el cálculo de interpolación

UserData.Point[i]

AuxFct_Point

-

Nodo para el cálculo de interpolación

UserData.Point[i].x

REAL

0.0

Valor x del nodo

Rango admisible: de 2 a 50
La matriz con 50 elementos del tipo de datos
AuxFct_Point contiene los pares de valores de
los nodos.
Un elemento con índice "i" de la matriz "Point".
Rango de valores admisible: Point[i].x < Point[i
+1].x

Programación del PLC
Manual de programación y manejo, 11/2019

3837

Instrucciones
4.1 Instrucciones
Variable

Tipo de datos

Ajuste predeter‐
minado

Descripción

UserData.Point[i].y

REAL

0.0

Valor y del nodo

WorkingData

AuxFct_PointTa‐ ble

Rango de visualización de los datos de la línea
poligonal activos actualmente
Los datos de la línea poligonal de la estructura
WorkingData no pueden editarse. Se utilizan pa‐
ra calcular la interpolación.

WorkingData.NumberOfUsed‐
Points

INT

0

Número de nodos utilizados para el cálculo de
interpolación
Rango admisible: de 2 a 50

WorkingData.Point

WorkingData.Point[i]

Array[1..50] of
AuxFct_Point

-

AuxFct_Point

-

Nodos para el cálculo de interpolación
La matriz con 50 elementos del tipo
AuxFct_Point contiene los pares de valores de
los nodos.
Nodo para el cálculo de interpolación
Un elemento con índice "i" de la matriz "Point".

WorkingData.Point[i].x

REAL

0.0

Valor x del nodo
Rango de valores admisible: Point[i].x < Point[i
+1].x

WorkingData.Point[i].y

REAL

0.0

Valor y del nodo

ErrorMode

INT

0

Selección del valor de salida sustitutivo en caso
de error
● 0 = Input
● 1 = SubstituteOutput
● 2 = último valor de salida válido
Rango admisible: de 0 a 2

OutOfRangeMode

INT

0

Selección del valor de salida cuando el valor de
entrada se encuentra fuera de los valores x de‐
finidos
● 0 = mantener pendiente
● 1 = valor y del primer/último nodo
Rango admisible: de 0 a 1

NextXIndex

INT

2

Índice del siguiente valor x
Sirve para observar el índice de los nodos que se
utilizan en el cálculo de interpolación actual.
Se aplica la siguiente condición:
WorkingData.Point[NextXIndex-1].x < Input ≤
WorkingData.Point[NextXIndex].x
No modifique este valor manualmente.

Parámetro ErrorBits
Si hay varios errores presentes a la vez, los valores de ErrorBits se muestran sumados
binariamente. Por ejemplo, si se muestra ErrorBits = 16#0000_0003, significa que los errores
16#0000_0001 y 16#0000_0002 están pendientes simultáneamente.

3838

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
En Polyline, los errores que se emiten en el parámetro ErrorBits se dividen en dos categorías:
● Errores con mensajes de error ErrorBits < 16#0001_0000
● Errores con mensajes de error ErrorBits ≥ 16#0001_0000

Errores con mensajes de error ErrorBits < 16#0001_0000
Si están presentes uno o varios errores con mensajes de error ErrorBits < 16#0001_0000,
Polyline reacciona de la siguiente manera:
● Pese a este error, el valor de salida se determina del modo siguiente:
– Si Reset = FALSE, se calcula la interpolación.
– Si Reset = TRUE, se emite la SubstituteOutput.
● Se activa el parámetro de salida Error.
● La salida de habilitación ENO no cambia.

Programación del PLC
Manual de programación y manejo, 11/2019

3839

Instrucciones
4.1 Instrucciones
El parámetro de salida Error se borra en cuanto no hay errores.
ErrorBits

Descripción

(DW#16#...)
0000_0000

No hay ningún error presente.

0000_0001

Causa del error y reacción a errores:
El parámetro Output se ha limitado a -3.402823e+38 o a +3.402823e+38.
Solución:
Si el valor de interpolación se emite en la salida (Reset = FALSE y ErrorBits < 16#0001_0000), compruebe
las siguientes variables utilizadas en el cálculo de interpolación:
● Input
● WorkingData.Point[i].x
● WorkingData.Point[i].y
Si ErrorBits ≥ 16#0001_0000 y Reset = FALSE, el valor de salida sustitutivo se limitará al emitirse. En ese
caso, compruebe los siguientes parámetros dependiendo del valor ajustado en la variable ErrorMode:
● Input
● SubstituteOutput
Si Reset = TRUE, compruebe el parámetro SubstituteOutput.

0000_0002

Causa del error:
Hay una o varias variables con valores no válidos en la estructura UserData mientras se comprueban los
datos de la línea poligonal (Validate = TRUE y Reset = FALSE).
Reacción a errores:
Los datos de la línea poligonal de la estructura UserData no se transfieren a la estructura WorkingData,
por lo que los cambios realizados en la estructura UserData no se aplican.
FB Polyline continúa el cálculo de interpolación con los datos no modificados y válidos de la línea poligonal
de la estructura WorkingData.
Solución:
Asegúrese de que se cumplen las siguientes condiciones si el parámetro Validate está ajustado a TRUE:
● 2 ≤ UserData.NumberOfUsedPoints ≤ 50
● UserData.Point[j].x < UserData.Point[j+1].x con índice j = 1..(UserData.NumberOfUsedPoints - 1)
● -3.402823e+38 ≤ UserData.Point[i].x ≤ 3.402823e+38 con índice i
=1..UserData.NumberOfUsedPoints
● -3.402823e+38 ≤ UserData.Point[i].y ≤ 3.402823e+38 con índice i =
1..UserData.NumberOfUsedPoints
● UserData.Point[i].x y UserData.Point[i].y son valores REAL válidos (≠ NaN) con índice i =
1..UserData.NumberOfUsedPoints

Errores con mensajes de error ErrorBits ≥ 16#0001_0000
Si están presentes uno o varios errores con mensajes de error ErrorBits ≥ 16#0001_0000,
Polyline reacciona de la siguiente manera:
● El valor de salida no puede determinarse del modo previsto. En su lugar, se emite el valor
de salida sustitutivo.
● Se activa el parámetro de salida Error.
● La salida de habilitación ENO se pone a FALSE.

3840

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
En cuanto deja de haber errores con mensajes de error ErrorBits ≥ 16#0001_0000, SplitRange
reacciona de la siguiente manera:
● El valor de salida se determina del modo siguiente:
– Si Reset = FALSE, se calcula el valor de salida.
– Si Reset = TRUE, se emite la SubstituteOutput.
● La salida de habilitación ENO se pone a TRUE.
El parámetro de salida Error se borra en cuanto no hay errores.
ErrorBits

Descripción

(DW#16#...)
0001_0000

Causa del error:
Los parámetros SubstituteOutput o Input, que se utilizan como valor de salida, no tienen ningún valor
REAL válido.
Reacción a errores:
La salida se ajusta a 0.0.
Solución:
Asegúrese de que el parámetro que se utiliza como valor de salida sea un valor REAL válido (≠ NaN, p. ej.,
16#7FFF_FFFF). El parámetro que se utiliza como valor de salida depende de Reset y ErrorMode:

0002_0000

Reset

ErrorMode

Valor de salida

FALSE

0

Input

FALSE

1

SubstituteOutput

TRUE

-

SubstituteOutput

Causa del error:
El parámetro Input no tiene ningún valor REAL válido mientras se ejecuta el cálculo de interpolación
(Reset = FALSE).
Reacción a errores:
En el parámetro Output se emite el valor de salida sustitutivo configurado en la variable ErrorMode.
Si ErrorMode = 0, se emite 0.0 como valor de salida.
La variable NextXIndex no se actualizará mientras el parámetro Input tenga un valor REAL no válido.
Solución:
Asegúrese de que el parámetro Input sea un valor REAL válido (≠ NaN, p. ej., 16#7FFF_FFFF).

Programación del PLC
Manual de programación y manejo, 11/2019

3841

Instrucciones
4.1 Instrucciones
ErrorBits

Descripción

(DW#16#...)
0004_0000

Causa del error:
El cálculo de interpolación da como resultado un valor REAL no válido para el parámetro Output.
Reacción a errores:
En el parámetro Output se emite el valor de salida sustitutivo configurado en la variable ErrorMode.
La variable NextXIndex puede tener un valor no válido mientras esté presente este error.
Solución:
Compruebe la validez de los valores REAL de la estructura WorkingData.
Información adicional:
Si desea modificar los datos de la línea poligonal, edite primero la estructura UserData y a continuación
ajuste el parámetro Validate = TRUE. No modifique los datos de la estructura WorkingData manualmente.

0008_0000

Causa del error:
Hay una o varias variables con valores no válidos en la estructura UserData mientras se comprueban los
datos de la línea poligonal.
Reacción a errores:
Los datos de la línea poligonal de la estructura UserData no se transfieren a la estructura WorkingData,
por lo que los valores de la estructura UserData no se aplican.
FB Polyline no emite el valor de interpolación en el parámetro Output, ya que la estructura WorkingData
no contiene datos de línea poligonal válidos. En el parámetro Output se emite el valor de salida sustitutivo
configurado en la variable ErrorMode.
Solución:
Asegúrese de que se cumplen las siguientes condiciones si se ejecuta la comprobación de los datos de
la línea poligonal:
● 2 ≤ UserData.NumberOfUsedPoints ≤ 50
● UserData.Point[j].x < UserData.Point[j+1].x con índice j = 1..(UserData.NumberOfUsedPoints – 1)
● -3.402823e+38 ≤ UserData.Point[i].x ≤ 3.402823e+38 con índice i =
1..UserData.NumberOfUsedPoints
● -3.402823e+38 ≤ UserData.Point[i].y ≤ 3.402823e+38 con índice i =
1..UserData.NumberOfUsedPoints
● UserData.Point[i].x y UserData.Point[i].y son valores REAL válidos (≠ NaN) con índice i =
1..UserData.NumberOfUsedPoints
Información adicional:
Los datos de la línea poligonal de la estructura UserData se comprueban si:
● El parámetro Validate está ajustado a TRUE mientras el parámetro Reset está ajustado a FALSE.
o bien
● Polyline se llama por primera vez con el parámetro Reset = FALSE después de cambiar el estado
operativo de la CPU de STOP a RUN.
Tenga en cuenta que todas las variables de las estructuras UserData y WorkingData son no remanentes.
Estas variables se inicializan con los valores de arranque después de cada cambio del estado operativo
de la CPU de STOP a RUN.

3842

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

SplitRange
Compatibilidad con CPU y FW
La siguiente tabla muestra en qué CPU puede usarse cada versión de SplitRange:
CPU

FW

SplitRange

S7-1200

A partir de V4.2

V1.0

CPU basadas en S7-1500

A partir de V2.0

V1.0

Descripción de SplitRange
Descripción
La instrucción SplitRange convierte el valor de entrada en un valor de salida. El valor de
entrada está en el rango de valores limitado por Points.x1 y Points.x2. El valor de salida está
en el rango de valores limitado por Points.y1 y Points.y2.
La figura siguiente muestra la característica de un ejemplo de configuración de la instrucción
SplitRange:
Output

Points.y2

Points.y1

Points.x1

Points.x2

Input

Use SplitRange si necesita regular un proceso que es influenciado por varios actuadores.
SplitRange divide el rango de valores de salida del regulador PID en varios subrangos. Asigne
a cada actuador un subrango. El programa de usuario llama el bloque una vez por subrango.
El valor de entrada de cada instancia de SplitRange está conectado con el valor de salida del
regulador PID.
La figura siguiente muestra a modo de ejemplo un lazo de regulación con dos instancias de
SplitRange y dos actuadores:

Programación del PLC
Manual de programación y manejo, 11/2019

3843

Instrucciones
4.1 Instrucciones

3,'B
,QSXW
6HWSRLQW

6SOLW5DQJHB

2XWSXW

,QSXW

2XWSXW

$FWXDWRUB

6SOLW5DQJHB
,QSXW

2XWSXW

$FWXDWRUB

Validez de los datos de SplitRange
Las parejas de valores de la estructura Points definen el rango de valores de entrada y salida
de SplitRange. Las dos parejas de valores están en el rango estático del bloque SplitRange.
SplitRange comprueba en cada llamada si se cumplen las condiciones siguientes para que los
valores válidos estén disponibles para el cálculo del valor de salida:
● Points.x1 < Points.x2
● Points.x1, Points.y1, Points.x2 y Points.y2 están dentro del rango de valores admisible
-3.402823e+38 a 3.402823e+38
● Points.x1, Points.y1, Points.x2 y Points.y2 son valores REAL válidos (≠ NaN p.ej.
16#7FFF_FFFF)
Si no se cumplen una o varias condiciones no es posible calcular de forma correcta el valor de
salida. En el parámetro ErrorBits se emite un mensaje de error al efecto.
El ajuste predeterminado de los valores x e y con 0.0 no es una configuración válida. Para
utilizar las variables para el cálculo del valor de salida, asigne valores válidos a las variables.

Comportamiento de habilitación EN/ENO
Si se cumple una de las siguientes condiciones, la salida de habilitación ENO se pone a
FALSE:
● La entrada de habilitación EN está puesta a TRUE y el parámetro Output se ha definido con
un valor de salida sustitutivo en caso de mensajes de error ErrorBits ≥ 16#0001_0000.
● La entrada de habilitación EN está puesta a FALSE.
De lo contrario, la salida de habilitación ENO se ajusta a TRUE.

Llamada
En un OB o FC, SplitRange se llama como DB de instancia individual. En un FB, SplitRange
puede llamarse como DB de instancia individual, como DB multiinstancia o como DB de
instancia de parámetro.
Cuando se llama la instrucción, no se crea ningún objeto tecnológico. No se dispone de interfaz
de parametrización o puesta en marcha. SplitRange se parametriza directamente mediante el

3844

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
DB de instancia y se pone en marcha por medio de una tabla de observación del programa de
usuario en la CPU o HMI.

Arranque
La variables en el rango estático de SplitRange no son remanentes. Estas variables se
inicializan con los valores de arranque después de cada cambio del estado operativo de la
CPU de STOP a RUN.
Si modifica los valores actuales en la estructura Points en el modo online, y desea conservar
estos valores tras cambiar el estado operativo de la CPU de STOP a RUN, guarde estos
valores en los valores de arranque del bloque de datos.

Comportamiento en caso de error
La instrucción SplitRange detecta diversos errores que pueden producirse durante el cálculo
del valor de salida. Pese a la presencia de errores, el resultado del cálculo puede emitirse en
la salida. Si debido a un error no es posible calcular correctamente el valor de salida, en la
salida se emitirá un valor de salida sustitutivo.
Si se produce un error que no permite calcular correctamente el valor de salida, en la variable
ErrorMode deberá definir el valor de salida sustitutivo de la siguiente manera:
ErrorMode

Output

0

Valor del parámetro Input

1

Valor del parámetro SubstituteOutput

2

Último resultado válido del cálculo del valor de salida
0.0 en caso de que no haya ningún resultado válido

Lo siguiente se aplica además a todos los valores de la variable ErrorMode:
● Si el valor de salida sustitutivo no es un valor REAL válido, se emite 0.0 como valor de salida.
● El valor de salida sustitutivo se limita al rango de valores del tipo de datos REAL. Solo
entonces se emite el valor de salida sustitutivo en el parámetro Output.
● La variable ErrorMode solo es efectiva si está ajustado el parámetro Reset = FALSE. Si el
parámetro Reset = TRUE está activado, el valor del parámetro SubstituteOutput se emite
en el parámetro Output.
El parámetro Error indica si hay algún un error pendiente en ese momento. Cuando el error
desaparece, Error se ajusta a FALSE. El parámetro ErrorBits muestra qué errores se han
producido. ErrorBits es remanente y solo se borra con un flanco ascendente en el parámetro
Reset o ErrorAck.

Programación del PLC
Manual de programación y manejo, 11/2019

3845

Instrucciones
4.1 Instrucciones

Parámetros de entrada SplitRange
Parámetro

Tipo de da‐
tos

Ajuste pre‐
determinado

Descripción

Input

REAL

0.0

Valor de entrada

Substitu‐
teOutput

REAL

0.0

SubstituteOutput se utiliza como valor de salida sustitutivo en los siguientes
casos:
● Reset = TRUE
o bien
● si no es posible calcular correctamente el valor de salida debido a un error
con mensaje de error ErrorBits ≥ 16#0001_0000 y ErrorMode está puesto al
valor 1.

ErrorAck

BOOL

FALSE

Borra los mensajes de error
● Flanco FALSE -> TRUE
ErrorBits se desactiva

Reset

BOOL

FALSE

Reinicia la instrucción por medio de:
● Flanco FALSE -> TRUE
ErrorBits se desactiva.
● Mientras Reset esté ajustado a TRUE, el valor de salida sustitutivo
SubstituteOutput se emitirá en la salida.
● Mientras Reset esté ajustado a FALSE, se efectuará el cálculo del valor de
salida.

Parámetros de salida SplitRange
Parámetro

Tipo de da‐
tos

Ajuste pre‐
determinado

Descripción

Output

REAL

0.0

Valor de salida

ErrorBits

DWORD

DW#16#0

El parámetro ErrorBits (Página 3847) muestra qué mensajes de error existen.
ErrorBits es remanente y se desactiva con un flanco ascendente en Reset o
ErrorAck .

Error

BOOL

FALSE

Si Error está ajustado a TRUE, actualmente hay al menos un error presente.

Variables estáticas SplitRange
Variable

Tipo de datos

Ajuste predeter‐
minado

Descripción

Points

AuxFct_Spli‐
tRange_Points

-

Datos de nodo

Points.x1

REAL

0.0

Valor x del nodo 1

Points.y1

REAL

0.0

Valor y del nodo 1

Points.x2

REAL

0.0

Valor x del nodo 2

Rango admisible: Points.x1 < Points.x2

Rango admisible: Points.x1 < Points.x2

3846

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Variable

Tipo de datos

Ajuste predeter‐
minado

Descripción

Points.y2

REAL

0.0

Valor y del nodo 2

ErrorMode

INT

0

Selección del valor de salida sustitutivo en caso de error
● 0 = Input
● 1 = SubstituteOutput
● 2 = último valor de salida válido
Rango admisible: de 0 a 2

Parámetro ErrorBits
Si hay varios errores presentes a la vez, los valores de ErrorBits se muestran sumados
binariamente. Por ejemplo, si se muestra ErrorBits = 16#0000_0003, significa que los errores
16#0000_0001 y 16#0000_0002 están pendientes simultáneamente.
En SplitRange, los errores que se emiten en el parámetro ErrorBits se dividen en dos
categorías:
● Errores con mensajes de error ErrorBits < 16#0001_0000
● Errores con mensajes de error ErrorBits ≥ 16#0001_0000

Errores con mensajes de error ErrorBits < 16#0001_0000
Si están presentes uno o varios errores con mensajes de error ErrorBits < 16#0001_0000,
SplitRange reacciona de la siguiente manera:
● Pese a este error, el valor de salida se determina del modo siguiente:
– Si Reset = FALSE, se calcula el valor de salida.
– Si Reset = TRUE, se emite la SubstituteOutput
● Se activa el parámetro de salida Error.
● La salida de habilitación ENO no cambia.
El parámetro de salida Error se borra en cuanto no hay errores.
ErrorBits

Descripción

(DW#16#...)
0000_0000

No hay ningún error presente.

0000_0001

Causa del error y reacción a errores:
El parámetro Output se ha limitado a -3.402823e+38 o a +3.402823e+38.
Solución:
Si ErrorBits ≥ 16#0001_0000 y Reset = FALSE, el valor de salida sustitutivo se limitará al emitirse. En ese
caso, compruebe los siguientes parámetros dependiendo del valor ajustado en la variable ErrorMode:
● Input
● SubstituteOutput
Si Reset = TRUE, compruebe el parámetro SubstituteOutput.

Programación del PLC
Manual de programación y manejo, 11/2019

3847

Instrucciones
4.1 Instrucciones

Errores con mensajes de error ErrorBits ≥ 16#0001_0000
Si están presentes uno o varios errores con mensajes de error ErrorBits ≥ 16#0001_0000,
SplitRange reacciona de la siguiente manera:
● El valor de salida no puede determinarse del modo previsto. En su lugar, se emite el valor
de salida sustitutivo.
● Se activa el parámetro de salida Error.
● La salida de habilitación ENO se pone a FALSE.
En cuanto deja de haber errores con mensajes de error ErrorBits ≥ 16#0001_0000, SplitRange
reacciona de la siguiente manera:
● El valor de salida se determina del modo siguiente:
– Si Reset = FALSE, se calcula el valor de salida.
– Si Reset = TRUE, se emite la SubstituteOutput.
● La salida de habilitación ENO se pone a TRUE.
El parámetro de salida Error se borra en cuanto no hay errores.
ErrorBits

Descripción

(DW#16#...)
0001_0000

Causa del error:
Los parámetros SubstituteOutput o Input, que se utilizan como valor de salida, no tienen ningún valor
REAL válido.
Reacción a errores:
La salida se ajusta a 0.0.
Solución:
Asegúrese de que el parámetro que se utiliza como valor de salida sea un valor REAL válido (≠ NaN, p. ej.,
16#7FFF_FFFF). El parámetro que se utiliza como valor de salida depende de Reset y ErrorMode:
Reset

3848

ErrorMode

Valor de salida

FALSE

0

Input

FALSE

1

SubstituteOutput

TRUE

-

SubstituteOutput

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
ErrorBits

Descripción

(DW#16#...)
0002_0000

Causa del error:
El parámetro Input no tiene ningún valor REAL válido mientras se ejecuta el cálculo del valor de salida
(Reset = FALSE).
Reacción a errores:
En el parámetro Output se emite el valor de salida sustitutivo configurado en la variable ErrorMode.
Si ErrorMode = 0, se emite 0.0 como valor de salida.
Solución:
Asegúrese de que el parámetro Input sea un valor REAL válido (≠NaN, p. ej., 16#7FFF_FFFF).

0004_0000

Posibles causas de error:
● Hay una o varias variables con valores no válidos en la estructura Points.
● El cálculo del valor de salida da como resultado un valor REAL no válido para el parámetro Output.
Reacción a errores:
En el parámetro Output se emite el valor de salida sustitutivo configurado en la variable ErrorMode.
Solución:
Asegúrese de que se cumplen las siguientes condiciones:
1. Points.x1 < Points.x2
2. Points.x1, Points.y1, Points.x2 y Points.y2 están en el rango de valores admisible de -3.402823e+38
a 3.402823e+38
3. Points.x1, Points.y1, Points.x2 y Points.y2 son valores REAL válidos (≠ NaN p.ej. 16#7FFF_FFFF)
Información adicional:
Tenga en cuenta que todas las variables de la estructura Points no son remanentes. Estas variables se
inicializan con los valores de arranque después de cada cambio del estado operativo de la CPU de STOP
a RUN.

RampFunction
Compatibilidad con CPU y FW
La siguiente tabla muestra en qué CPU puede usarse cada versión de RampFunction:
CPU

FW

RampFunction

S7-1200

A partir de V4.2

V1.0

CPU basadas en S7-1500

A partir de V2.0

V1.0

Descripción de RampFunction
Descripción
La instrucción RampFunction limita la velocidad de cambio de una señal. RampFunction emite
un salto de señal en la entrada como función de rampa del valor de salida.

Programación del PLC
Manual de programación y manejo, 11/2019

3849

Instrucciones
4.1 Instrucciones
Use RampFunction para evitar saltos de señal en los casos siguientes, por ejemplo:
● Entre la fuente de consigna y la entrada de consigna del regulador, para alcanzar una
respuesta de regulación más suave sin influir en la respuesta a perturbaciones.
● Entre la salida del regulador y la entrada del actuador, para proteger el actuador, por
ejemplo un motor con engranaje, o el proceso.
Pueden ajustarse los siguientes valores límite para la velocidad de modificación:
● Velocidad de modificación ascendente en el rango de valores positivo
● Velocidad de modificación descendente en el rango de valores positivo
● Velocidad de modificación ascendente en el rango de valores negativo
● Velocidad de modificación descendente en el rango de valores negativo
Adicionalmente, la instrucción RampFunction limita el valor de salida al valor límite inferior y
superior.
Cuando se alcanza el límite de la velocidad de cambio o el límite inferior o superior,
RampFunction pone el bit de salida correspondiente a TRUE.

3850

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Diagrama de funcionamiento
La figura siguiente muestra la instrucción RampFunction y a modo de ejemplo un diagrama de
funcionamiento:
5DPS)XQFWLRQ
,QSXW
2XWSXW
6XEVWLWXWH2XWSXW
3RVLWLYH5LVLQJ6OHZ5DWHB$FWLYH
(UURU$FN
3RVLWLYH)DOOLQJ6OHZ5DWHB$FWLYH
5HVHW
1HJDWLYH5LVLQJ6OHZ5DWHB$FWLYH
1HJDWLYH)DOOLQJ6OHZ5DWHB$FWLYH
8SSHU/LPLWB$FWLYH
/RZHU/LPLWB$FWLYH
(UURU%LWV
(UURU

5HVHW




8SSHU/LPLWB
$FWLYH



/RZHU/LPLWB
$FWLYH







3RVLWLYH5LVLQJ
6OHZ5DWHB$FWLYH 

3RVLWLYH)DOOLQJ
6OHZ5DWHB$FWLYH 

1HJDWLYH5LVLQJ
6OHZ5DWHB$FWLYH 
1HJDWLYH)DOOLQJ 
6OHZ5DWHB$FWLYH


W
,QSXW

8SSHU/LPLW
6XEVWLWXWH2XWSXW


W

2XWSXW
/RZHU/LPLW

Llamada
En un OB o FC, RampFunction se llama como DB de instancia individual. En un FB,
RampFunction puede llamarse como DB de instancia individual, como DB multiinstancia o
como DB de instancia de parámetro.

Programación del PLC
Manual de programación y manejo, 11/2019

3851

Instrucciones
4.1 Instrucciones
Cuando se llama la instrucción, no se crea ningún objeto tecnológico. No se dispone de interfaz
de parametrización o puesta en marcha. RampFunction se parametriza directamente
mediante el DB de instancia y se pone en marcha por medio de una tabla de observación del
programa de usuario en la CPU o HMI.

Arranque
La variables en el rango estático de RampFunction no son remanentes. Estas variables se
inicializan con los valores de arranque después de cada cambio del estado operativo de la
CPU de STOP a RUN.
Si modifica los valores actuales de los valores límite en el modo online, y desea conservar
estos valores tras cambiar el estado operativo de la CPU, guarde estos valores en los valores
de arranque del bloque de datos.
En la variable StartMode determine el valor de inicialización para el parámetro Output.
El valor de inicialización se emite durante la primera llamada de RampFunction tras el
● cambio de estado operativo de la CPU.
o bien
● tras ejecutar "Cargar valores de arranque como valores actuales" (solo con la opción
"Todos los valores", no con la opción "Solo valores de ajuste")
en el parámetro Output.
Durante las siguientes llamadas, RampFunction calcula el valor de salida a partir de este valor
de inicialización, sobre la base del valor de entrada y de los valores límite para la velocidad de
cambio.
La tabla siguiente muestra la dependencia entre la variable StartMode y el parámetro Output.
Los valores de la columna Output se emiten en el parámetro Output tras el cambio de estado
operativo de la CPU:
StartMode

Output

0

Valor del parámetro Input

Ejemplo
,QSXW
2XWSXW
&38
6723

1

Valor del parámetro SubstituteOutput

,QSXW

&38
581

W

6XEVWLWXWH2XWSXW

2XWSXW

2

3852

Permanece inalterado. El parámetro
Output es remanente.

&38
6723

&38
581

W

&38
6723

&38
581

W

,QSXW
2XWSXW

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
StartMode

Output

3

0.0

Ejemplo
,QSXW
2XWSXW
&38
6723

4

Valor de la variable LowerLimit.

&38
581

W

,QSXW
2XWSXW
/RZHU/LPLW
&38
6723

5

Valor de la variable UpperLimit.

&38
581

W

8SSHU/LPLW
,QSXW
2XWSXW
&38
6723

&38
581

W

Lo siguiente es válido adicionalmente para todos los valores de la variable StartMode:
● Si los valores de las variables UpperLimit y LowerLimit son válidos, el valor de inicialización
se limita al rango de valores de dichas variables. En este caso se emite el valor de
inicialización en el parámetro Output.
● Si el valor de inicialización no es un valor REAL válido, se emite el valor de salida sustitutivo
en el parámetro Output. El valor de salida sustitutivo se configura con la variableErrorMode.
El valor de salida sustitutivo se limita mediante el rango de valores de las variables
UpperLimit y LowerLimit. Si el valor de salida sustitutivo tampoco es un valor REAL válido,
se emite 0.0 en el parámetro Output. En las siguientes llamadas, la instrucción calcula el
valor de salida a partir de este valor de salida sustitutivo.
● La variable StartMode solo es efectiva si durante la primera llamada de la instrucción está
ajustado el parámetro Reset = FALSE y al mismo tiempo no hay ningún error con el
mensaje de error ErrorBits ≥ 16#0002_0000. Si el parámetro Reset = TRUE está activado,
el valor del parámetro SubstituteOutput se emite en el parámetro Output. Si está presente
un error con el mensaje de error ErrorBits ≥ 16#0002_0000, en el parámetro Output se
emite el valor de salida sustitutivo configurado en la variable ErrorMode.

Comportamiento en caso de error
La instrucción RampFunction detecta diversos errores que pueden producirse durante el
cálculo del valor de salida. Pese a la presencia de errores, el resultado del cálculo puede
emitirse en la salida. Si debido a un error no es posible calcular correctamente el valor de
salida, en la salida se emitirá un valor de salida sustitutivo.
Si se produce un error que no permite calcular correctamente el valor de salida, en la variable
ErrorMode deberá definir el valor de salida sustitutivo.

Programación del PLC
Manual de programación y manejo, 11/2019

3853

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra la dependencia entre el valor de la variable ErrorMode y el valor de
salida sustitutivo, que RampFunction emite en el parámetro Output:
ErrorMode

Output

0

Valor del parámetro Input

1

Valor del parámetro SubstituteOutput

2

Último valor de salida válido en el parámetro Output

3

0.0

4

Valor de la variable LowerLimit.

5

Valor de la variable UpperLimit.

Lo siguiente es válido adicionalmente para todos los valores de la variable ErrorMode:
● Si el valor de salida sustitutivo no es un valor REAL válido, se emitirá 0.0 como valor de
salida.
● Si los valores de las variables UpperLimit y LowerLimit son válidos, el valor de salida
sustitutivo se limita al rango de valores de estas variables. En este caso se emite el valor
de salida sustitutivo en el parámetro Output.
● La variable ErrorMode solo es efectiva si está ajustado el parámetro Reset = FALSE. Si el
parámetro Reset = TRUE está activado, el valor del parámetro SubstituteOutput se emite
en el parámetro Output.
● Si hay pendiente un error que impide un cálculo correcto del valor de salida, RampFunction
cambia en el parámetro Output el valor de salida calculado por el valor de salida sustitutivo.
Dependiendo del valor de la variable ErrorMode puede aparecer un salto en el valor de
salida.
El parámetro Error indica si hay algún un error pendiente en ese momento. Cuando el error
desaparece, Error se ajusta a FALSE. El parámetro ErrorBits muestra qué errores se han
producido. ErrorBits es remanente y solo se borra con un flanco ascendente en el parámetro
Reset o ErrorAck.

Funcionamiento de la RampFunction
Limitar la velocidad de cambio
Es posible configurar cuatro valores límite para la velocidad de cambio de la señal de entrada.
El valor límite momentáneamente activo depende de los factores siguientes:
● Signo del valor de salida en el parámetro Output
● Sentido de cambio del importe del valor de salida en el parámetro Output
La tabla siguiente muestra las variables efectivas para el valor límite de la velocidad de cambio
en función del parámetro Output:

3854

Output

Variable efectiva

Output ≥ 0 y |Output| ascendente

PositiveRisingSlewRate

Output ≥ 0 y |Output| descendente

PositiveFallingSlewRate

Output < 0 y |Output| ascendente

NegativeRisingSlewRate

Output < 0 y |Output| descendente

NegativeFallingSlewRate

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
El importe de los valores límite de la velocidad de cambio define el cambio máximo del valor
de salida por segundo.
Ejemplo:
Para este ejemplo rige el escenario siguiente:
● PositiveRisingSlewRate = 10.0
● Tiempo de llamada de RampFunction = 0.1 s
● Input > Output ≥ 0.0
Resultado:
El valor de salida Output aumenta en 1.0 por llamada (10.0 por segundo), hasta que se ha
alcanzado el valor del parámetro Input.
Para desactivar la limitación de la velocidad de cambio para una o varias áreas, fije la variable
correspondiente al valor 3.402823e+38.
Si el valor de salida Output está limitado actualmente por un valor límite de la velocidad de
cambio, RampFunction fija el bit de salida correspondiente a TRUE:
● PositiveRisingSlewRate_Active
● PositiveFallingSlewRate_Active
● NegativeRisingSlewRate_Active
● NegativeFallingSlewRate_Active
Si el parámetro Reset está fijado a TRUE, los valores límite de la velocidad de cambio no son
efectivos. De este modo los saltos en el parámetro SubstituteOutput conducen a saltos en el
parámetro Output.
RampFunction comprueba en cada llamada si se cumplen las condiciones siguientes para las
variables PositiveRisingSlewRate, PositiveFallingSlewRate, NegativeRisingSlewRate y
NegativeFallingSlewRate:
● Los valores están dentro del rango de valores admisible, por encima de 0.0 hasta 3.402823e
+38
● Los valores son valores REAL válidos (≠ NaN p. ej. 16#7FFF_FFFF)
Si no se cumplen una o varias condiciones, se emite el valor de salida sustitutivo en el
parámetro Output. En el parámetro ErrorBits se emite el mensaje de error al efecto.

Limitar el valor de salida
El valor de salida Output está limitado siempre al rango de valores de las variables UpperLimit
y LowerLimit, siempre y cuando dichas variables tengan valores válidos.
Si el valor de salida Output está limitado actualmente por este rango de valores, RampFunction
pone el bit de salida correspondiente a TRUE:
● UpperLimit_Active
● LowerLimit_Active
La limitación del valor de salida tiene mayor prioridad que la limitación de la velocidad de
cambio. Por consiguiente, los cambios en las variables UpperLimit y LowerLimit provocan
saltos en el valor de salida Output cuando es necesario para mantener los valores límite de las

Programación del PLC
Manual de programación y manejo, 11/2019

3855

Instrucciones
4.1 Instrucciones
variables UpperLimit y LowerLimit. En este caso no se tiene en cuenta la limitación de la
velocidad de cambio.
Ejemplo:
Si el valor límite UpperLimit se reduce de 100.0 a 80.0 mientras los valores de los parámetros
Input y Output están a 90.0, el valor de salida Output salta a 80.0. El valor de salida Output salta
a 80.0 independientemente de si con ello se infringe el valor límite configurado para la
velocidad de cambio.
RampFunction comprueba en cada llamada si se cumplen las condiciones siguientes:
● LowerLimit < UpperLimit
● LowerLimit y UpperLimit están dentro del rango de valores admisible -3.402823e+38 a
3.402823e+38
● LowerLimit y UpperLimit son valores REAL válidos (≠ NaN p.ej. 16#7FFF_FFFF)
Si no se cumplen una o varias condiciones, se emite el valor de salida sustitutivo en el
parámetro Output. En el parámetro ErrorBits se emite el mensaje de error al efecto.
Adicionalmente, RampFunction comprueba en cada llamada si el valor de salida Output tiene
el rango de valores admisible de un tipo de datos REAL, que es de -3.402823e+38 a 3.402823e
+38. Si el cálculo del valor de salida da como resultado un valor REAL no válido, en el
parámetro Output se emite el valor de salida sustitutivo. El valor de salida sustitutivo se
configura en la variable ErrorMode.

Comportamiento de habilitación EN/ENO
Si se cumple una de las siguientes condiciones, la salida de habilitación ENO se ajusta a
FALSE:
● La entrada de habilitación EN está puesta a TRUE y el parámetro Output se ha definido con
un valor de salida sustitutivo en caso de mensajes de error ErrorBits ≥ 16#0001_0000.
● La entrada de habilitación EN está ajustada a FALSE.
De lo contrario, la salida de habilitación ENO se ajusta a TRUE.

Medición automática del tiempo de ciclo
Para calcular la velocidad de cambio del valor de salida, RampFunction necesita el tiempo que
ha transcurrido desde la última llamada de RampFunction.
En el ajuste predeterminado, el tiempo de ciclo se mide automáticamente y se emite en la
variable CycleTime.Value a partir de la segunda llamada. RampFunction mide el tiempo de
ciclo en cada llamada de la instrucción, con lo que puede utilizarse en ciclos de llamada que
no son equidistantes, p. ej. en el OB1.
Tenga en cuenta que las llamadas condicionadas de la instrucción, los puntos de parada
activos o la carga de instantáneas como valores actuales con medición automática del tiempo
de ciclo hacen aumentar el valor del tiempo de ciclo.
Si la medición del tiempo de ciclo no proporciona ningún resultado válido, RampFunction
calcula el valor de salida actual con el último tiempo de ciclo válido. Adicionalmente,
RampFunction emite un mensaje de error en el parámetro ErrorBits.

3856

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Si se desactiva la medición automática del tiempo de ciclo poniendo la variable
CycleTime.EnableMeasurement = FALSE, hay que especificar manualmente el tiempo de
ciclo en la variable CycleTime.Value. RampFunction comprueba la validez de la variable
CycleTime.Value en cada llamada.

Medición automática del tiempo de ciclo con puntos de parada
Si hay puntos de parada activos entre dos llamadas de RampFunction, la medición automática
del tiempo de ciclo da como resultado el tiempo real que ha transcurrido entre dos llamadas.
Si hay un punto de parada activo, la CPU está en estado operativo PARADA.
Nota
Los puntos de parada activos prolongan la distancia temporal entre dos llamadas de
RampFunction.
Con una mayor distancia temporal entre dos llamadas aumenta también el cambio máximo
permitido del valor de salida en el parámetro Output.
Ejemplo:
Para este ejemplo rige el escenario siguiente:
● PositiveRisingSlewRate = 10.0
● Tiempo de llamada de RampFunction = 0.1 s
● Input > Output ≥ 0.0
Resultado sin puntos de parada:
El valor de salida Output aumenta en 1.0 por llamada, hasta que se ha alcanzado el valor del
parámetro Input.
Resultado con un punto de parada activo durante diez segundos:
En la próxima llamada, el valor de salida Output aumenta en 100.0.
Si no se requiere el cálculo del valor de salida basado en el tiempo real con puntos de parada
activos, ejecute los pasos siguientes:
● Desactive la medición automática del tiempo de ciclo poniendo la variable
CycleTime.EnableMeasurement = FALSE.
● Introduzca el tiempo de ciclo manualmente en la variable CycleTime.Value.

Programación del PLC
Manual de programación y manejo, 11/2019

3857

Instrucciones
4.1 Instrucciones

Parámetros de entrada RampFunction
Parámetro

Tipo de da‐
tos

Ajuste pre‐
determinado

Descripción

Input

REAL

0.0

Valor de entrada

Substitu‐
teOutput

REAL

0.0

SubstituteOutput se utiliza como valor de salida sustitutivo en los siguientes
casos:
● Reset = TRUE
o bien
● si no es posible calcular correctamente el valor de salida debido a un error
con mensaje de error ErrorBits ≥ 16#0001_0000 y ErrorMode está puesto al
valor 1.

ErrorAck

BOOL

FALSE

Borra los mensajes de error
● Flanco FALSE -> TRUE
ErrorBits se desactiva

Reset

BOOL

FALSE

Reinicia la instrucción por medio de:
● Flanco FALSE -> TRUE
ErrorBits se desactiva.
● Mientras Reset esté ajustado a TRUE, el valor de salida sustitutivo
SubstituteOutput se emitirá en la salida.
● Mientras Reset esté ajustado a FALSE, se efectuará el cálculo del valor de
salida.

Parámetros de salida RampFunction
Parámetro

Tipo de da‐
tos

Ajuste pre‐
determinado

Descripción

Output

REAL

0.0

Valor de salida

PositiveRisingSlew‐
Rate_Active

BOOL

FALSE

Si PositiveRisingSlewRate_Active = TRUE, el valor de salida está limi‐
tado actualmente por PositiveRisingSlewRate .

PositiveFallingSlew‐ BOOL
Rate_Active

FALSE

Si PositiveFallingSlewRate_Active = TRUE, el valor de salida está limi‐
tado actualmente por PositiveFallingSlewRate.

NegativeRisingS‐
lewRate_Active

BOOL

FALSE

Si NegativeRisingSlewRate_Active = TRUE, el valor de salida está li‐
mitado actualmente por NegativeRisingSlewRate.

NegativeFallingS‐
lewRate_Active

BOOL

FALSE

Si NegativeFallingSlewRate_Active = TRUE, el valor de salida está li‐
mitado actualmente por NegativeFallingSlewRate.

UpperLimit_Active

BOOL

FALSE

Si UpperLimit_Active = TRUE, el valor de salida está limitado actual‐
mente por UpperLimit.

LowerLimit_Active

BOOL

FALSE

Si LowerLimit_Active = TRUE, el valor de salida está limitado actual‐
mente por LowerLimit.

ErrorBits

DWORD

DW#16#0

El parámetro ErrorBits (Página 3860) muestra qué mensajes de error
existen. ErrorBits es remanente y se desactiva con un flanco ascen‐
dente en Reset o ErrorAck .

Error

BOOL

FALSE

Si Error = TRUE, actualmente hay al menos un error pendiente.

3858

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Variables estáticas RampFunction
Variable

Tipo de datos

PositiveRisingSlewRa‐ REAL
te

Ajuste predeter‐
minado

Descripción

10.0

Valor límite para la velocidad de cambio del valor de salida
por segundo en el rango positivo con valor absoluto ascen‐
dente.
Con PositiveRisingSlewRate = 3.402823e+38, esta limita‐
ción de la velocidad de cambio está desactivada.
Rango de valores admisible: > 0.0

PositiveFallingSlew‐
Rate

REAL

10.0

Valor límite para la velocidad de cambio del valor de salida
por segundo en el rango positivo con valor absoluto descen‐
dente.
Con PositiveFallingSlewRate = 3.402823e+38, esta limita‐
ción de la velocidad de cambio está desactivada.
Rango de valores admisible: > 0.0

NegativeRisingSlew‐
Rate

REAL

10.0

Valor límite para la velocidad de cambio del valor de salida
por segundo en el rango negativo con valor absoluto ascen‐
dente.
Con NegativeRisingSlewRate = 3.402823e+38, esta limita‐
ción de la velocidad de cambio está desactivada.
Rango de valores admisible: > 0.0

NegativeFallingSlew‐
Rate

REAL

10.0

Valor límite para la velocidad de cambio del valor de salida
por segundo en el rango negativo con valor absoluto descen‐
dente.
Con NegativeFallingSlewRate = 3.402823e+38, esta limita‐
ción de la velocidad de cambio está desactivada.
Rango de valores admisible: > 0.0

UpperLimit

REAL

100.0

Límite superior del valor de salida

LowerLimit

REAL

0.0

Límite inferior del valor de salida

ErrorMode

INT

2

Selección del valor de salida sustitutivo en caso de error

Rango de valores admisible: > LowerLimit
Rango de valores admisible: < UpperLimit
● 0 = Input
● 1 = SubstituteOutput
● 2 = último valor de salida válido
● 3 = 0.0
● 4 = LowerLimit
● 5 = UpperLimit
Rango admisible: 0 a 5

Programación del PLC
Manual de programación y manejo, 11/2019

3859

Instrucciones
4.1 Instrucciones
Variable

Tipo de datos

Ajuste predeter‐
minado

Descripción

StartMode

INT

2

Selección del valor de salida para la primera llamada de la
instrucción
● 0 = Input
● 1 = SubstituteOutput
● 2 = último valor de salida
● 3 = 0.0
● 4 = LowerLimit
● 5 = UpperLimit
Rango admisible: 0 a 5

CycleTime

AuxFct_CycleTi‐ me

Datos del tiempo de ciclo

CycleTime.Value

REAL

Distancia temporal entre dos llamadas de la instrucción en
segundos

0.1

Rango de valores admisible: > 0.0
CycleTime.Enable‐
Measurement

BOOL

TRUE

Medición automática del tiempo de ciclo
● FALSE = desactivada
● TRUE = activada

Parámetro ErrorBits
Si hay varios errores presentes a la vez, los valores de ErrorBits se muestran sumados
binariamente. Por ejemplo, si se muestra ErrorBits = 16#0000_0003, significa que los errores
16#0000_0001 y 16#0000_0002 están pendientes simultáneamente.
Con RampFunction, los errores que se emiten en el parámetro ErrorBits se dividen en dos
categorías:
● Errores con mensajes de error ErrorBits < 16#0001_0000
● Errores con mensajes de error ErrorBits ≥ 16#0001_0000

Errores con mensajes de error ErrorBits < 16#0001_0000
Si están presentes uno o varios errores con mensajes de error ErrorBits < 16#0001_0000,
RampFunction reacciona de la siguiente manera:
● Pese a este error, el valor de salida se determina del modo siguiente:
– Si Reset = FALSE, se calcula el valor de salida.
– Si Reset = TRUE, se emite la SubstituteOutput.
● Se activa el parámetro de salida Error.
● La salida de habilitación ENO no cambia.

3860

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
El parámetro de salida Error se borra en cuanto no hay errores.
ErrorBits

Descripción

(DW#16#...)
0000_0000

No hay ningún error presente.

0000_0002

Causa del error:
La medición del tiempo de ciclo da como resultado un valor no válido mientras se ejecuta el cálculo del
valor de salida (Reset = FALSE).
Reacción a errores:
Si ya se ha medido un valor válido del tiempo de ciclo, RampFunction calcula el valor de salida a partir de
este último valor de la variable CycleTime.Value.
Si previamente no se ha medido ningún valor válido del tiempo de ciclo, RampFunction sigue emitiendo
en el parámetro Output el valor de salida que se ha configurado con la variable StartMode.

Errores con mensajes de error ErrorBits ≥ 16#0001_0000
Si están presentes uno o varios errores con mensajes de error ErrorBits ≥ 16#0001_0000,
RampFunction reacciona de la siguiente manera:
● El valor de salida no puede determinarse del modo previsto. En su lugar, se emite el valor
de salida sustitutivo.
● Se activa el parámetro de salida Error.
● La salida de habilitación ENO se pone a FALSE.
● La limitación del valor de salida sigue siendo efectivo mientras las variables LowerLimit y
UpperLimit tengan valores válidos.
● La limitación de la velocidad de cambio deja de ser efectiva. En uno de los escenarios
siguientes pueden darse saltos en el valor de salida:
– En el momento en que se detecta el error, RampFunction cambia del valor de salida
calculado al valor de salida sustitutivo. La posibilidad de que en tal caso se produzca un
salto depende del valor de la variable ErrorMode.
– El valor de salida sustitutivo se modifica mientras es efectivo.
En cuanto deja de haber errores con mensajes de error ErrorBits ≥ 16#0001_0000,
RampFunction reacciona de la siguiente manera:
● El valor de salida se determina del modo siguiente:
– Si Reset = FALSE, se calcula el valor de salida.
– Si Reset = TRUE, se emite la SubstituteOutput.
● La salida de habilitación ENO se pone a TRUE.

Programación del PLC
Manual de programación y manejo, 11/2019

3861

Instrucciones
4.1 Instrucciones
El parámetro de salida Error se borra en cuanto no hay errores.
ErrorBits

Descripción

(DW#16#...)
0001_0000

Causa del error:
El parámetro SubstituteOutput u otra variable que se utiliza como valor de salida, no tiene ningún valor
REAL válido.
Reacción a errores:
La salida se pone a 0.0 y queda limitada por las variables LowerLimit y UpperLimit.
Solución:
Asegúrese de que la variable que se utiliza como valor de salida sea un valor REAL válido (≠ NaN, p. ej.,
16#7FFF_FFFF). La variable que se utiliza como valor de salida depende de Reset y ErrorMode:
Reset

0002_0000

ErrorMode

Valor de salida

FALSE

0

Input

FALSE

1

SubstituteOutput

FALSE

4

LowerLimit

FALSE

5

UpperLimit

TRUE

-

SubstituteOutput

Causa del error:
El parámetro Input no tiene ningún valor REAL válido mientras se ejecuta el cálculo del valor de salida
(Reset = FALSE).
Reacción a errores:
En el parámetro Output se emite el valor de salida sustitutivo configurado en la variable ErrorMode y queda
limitado por las variables UpperLimit y LowerLimit.
Si ErrorMode = 0, se emite 0.0 como valor de salida.
Solución:
Asegúrese de que el parámetro Input sea un valor REAL válido (≠ NaN, p. ej., 16#7FFF_FFFF).

0004_0000

Causa del error:
El cálculo del valor de salida da como resultado un valor REAL no válido para el parámetro Output.
Reacción a errores:
En el parámetro Output se emite el valor de salida sustitutivo configurado en la variable ErrorMode y queda
limitado por las variables UpperLimit y LowerLimit.
Solución:
Compruebe todas las variables implicadas en el cálculo del valor de salida:
● Input
● PositiveRisingSlewRate
● PositiveFallingSlewRate
● NegativeRisingSlewRate
● NegativeFallingSlewRate
● CycleTime.Value
Estas variables tienen valores válidos. El cálculo del valor de salida falla en esta combinación de variables.

3862

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
ErrorBits

Descripción

(DW#16#...)
0008_0000

Causa del error:
La variable LowerLimit o UpperLimit no tiene ningún valor válido.
Reacción a errores:
En el parámetro Output se emite el valor siguiente en función del parámetro Reset:
● Reset = FALSE
En el parámetro Output se emite el valor de salida sustitutivo configurado en la variable ErrorMode.
● Reset = TRUE
En el parámetro Output se emite el valor del parámetro SubstituteOutput.
En ambos casos, el parámetro Ouput se limita al rango de valores del tipo de datos REAL, que va de
-3.402823e+38 a 3.402823e+38.
Solución:
Asegúrese de que se cumplen las siguientes condiciones:
1. LowerLimit < UpperLimit
2. LowerLimit y UpperLimit están dentro del rango de valores admisible -3.402823e+38 a 3.402823e+38
3. LowerLimit y UpperLimit son valores REAL válidos (≠ NaN p.ej. 16#7FFF_FFFF)

0010_0000

Causa del error:
Como mínimo una de las siguientes variables tiene valores no válidos mientras se ejecuta el cálculo del
valor de salida (Reset = FALSE):
1. PositiveRisingSlewRate
2. PositiveFallingSlewRate
3. NegativeRisingSlewRate
4. NegativeFallingSlewRate
Reacción a errores:
En el parámetro Output se emite el valor de salida sustitutivo configurado en la variable ErrorMode y queda
limitado por las variables UpperLimit y LowerLimit.
Solución:
Asegúrese de que se cumplen las siguientes condiciones para las cuatro variables citadas anteriormente:
● Los valores están dentro del rango de valores admisible, por encima de 0.0 hasta 3.402823e+38
● Los valores son valores REAL válidos (≠ NaN p. ej. 16#7FFF_FFFF)

Programación del PLC
Manual de programación y manejo, 11/2019

3863

Instrucciones
4.1 Instrucciones
ErrorBits

Descripción

(DW#16#...)
0020_0000

Causa del error:
La variable (configurada con StartMode) para la inicialización del parámetro Output en la primera llamada
de la instrucción no tiene ningún valor REAL válido.
Reacción a errores:
En la primera llamada de la instrucción se emite en el parámetro Output el valor de salida sustitutivo
configurado en la variable ErrorMode y queda limitado por las variables LowerLimit y UpperLimit. En las
siguientes llamadas, RampFunction calcula el valor de salida a partir de este valor de salida sustitutivo.
Solución:
Asegúrese de que la variable para la inicialización del parámetro Output sea un valor REAL válido (≠ NaN,
p. ej., 16#7FFF_FFFF). Si está ajustado Reset = FALSE, la inicialización será efectiva la primera vez que
se llame la instrucción después de cambiar el estado operativo de la CPU de STOP a RUN. La variable
que se utiliza para la inicialización del parámetro Output depende de StartMode:
● StartMode = 1: Substitute Output
● StartMode = 2: Output

0040_0000

Causa del error:
La variable CycleTime.Value no tiene ningún valor válido mientras se ejecuta el cálculo del valor de salida
(Reset = FALSE).
Reacción a errores:
En el parámetro Output se emite el valor de salida sustitutivo configurado en la variable ErrorMode y queda
limitado por las variables UpperLimit y LowerLimit.
Solución:
Asegúrese de que se cumplen las siguientes condiciones:
● 0.0 < CycleTime.Value ≤ 3.402823e+38
● CycleTime.Value es un valor REAL válido (≠ NaN p.ej. 16#7FFF_FFFF)
Información adicional:
Para un cálculo automático del valor de la variable CycleTime.Value, ponga la variable CycleTime.Ena‐
bleMeasurement a TRUE.

Filter_PT1
Compatibilidad con CPU y FW
La siguiente tabla indica en qué CPU puede usarse qué versión de Filter_PT1:

3864

CPU

FW

Filter_PT1

S7-1200

A partir de V4.2

V1.0

CPU basadas en S7-1500

A partir de V2.0

V1.0

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Descripción Filter_PT1
Descripción
La instrucción Filter_PT1 es un elemento de transferencia proporcional con un retardo de
primer orden, también denominado elemento PT1.
Filter_PT1 se puede utilizar para los siguientes fines:
● Filtro paso bajo para atenuar las frecuencias más altas de una señal, como, por ejemplo, el
ruido.
● Elemento de retardo para filtrar saltos de señal, por ejemplo de la consigna o el valor de
salida de un regulador.
● Bloque de simulación de proceso para implementar un lazo de regulación cerrado en la
CPU. Esto permite, por ejemplo, probar reguladores antes de la puesta en marcha.
Se pueden especificar los siguientes parámetros de filtro:
● Ganancia proporcional (Gain)
● Constante de tiempo de retardo (Lag)
Nota
Diferencias entre un elemento PT1 de tiempo continuo y Filter_PT1
Dado que Filter_PT1 se ejecuta en un programa de PLC, Filter_PT1 constituye una
implementación de tiempo discreto de un elemento PT1. Los sistemas de tiempo discreto no
pueden presentar las mismas características que su correspondiente modelo de tiempo
continuo. Sin embargo, en función del tiempo de ciclo, los sistemas de tiempo discreto pueden
imitar correctamente un sistema de tiempo continuo: Cuanto más breve y constante es el
tiempo de ciclo, menor es la diferencia entre las características de Filter_PT1 y las
características de un elemento PT1 de tiempo continuo. Las características de un elemento
PT1 de tiempo continuo son la función de transferencia que se describe más adelante, la
respuesta en el tiempo y la respuesta de frecuencia.
Para una reproducción correcta de la respuesta de frecuencia se recomienda un tiempo de
ciclo máximo de una décima parte de la duración de periodo mínima de los componentes de
la señal de entrada. Por ejemplo, una señal con componentes de frecuencia de hasta 50 Hz
tiene una duración de periodo mínima de 20 ms. Para obtener una reproducción correcta de la
respuesta de frecuencia se recomienda un tiempo de ciclo máximo de 2 ms para este ejemplo.

Función de transferencia de un elemento PT1
La siguiente fórmula muestra la función de transferencia de un elemento PT1, siendo s igual
al operador laplaciano:

G(s) =

2XWSXW V
,QSXW V

Programación del PLC
Manual de programación y manejo, 11/2019

*DLQ
/DJyV

3865

Instrucciones
4.1 Instrucciones

Respuesta en el tiempo de un elemento PT1
La respuesta a un salto es la reacción del valor de salida a un salto del valor de entrada.
La respuesta a un salto del valor de entrada de 0 a ΔInput puede calcularse con la siguiente
fórmula:
W

 /DJ

Output(t) = ∆Input · Gain · (1 - e

La figura siguiente muestra la respuesta a un salto de un elemento PT1:

ΔInput·Gain
99.3%·ΔInput·Gain
Output(t)

63.2%·ΔInput·Gain
Input(t)

ΔInput

Lag

5·Lag t

Respuesta de frecuencia de un elemento PT1
La respuesta de frecuencia de un elemento de transferencia se describe por medio de la
respuesta de amplitud y la respuesta de fase.
La respuesta de amplitud describe la ganancia de una señal a través del elemento de
transferencia en función de la frecuencia de circuito de dicha señal.
La siguiente ecuación describe la respuesta de amplitud de un elemento PT1:

|G(ω)| =

3866

*DLQ

෭ ˶y/DJ t

|G(ω)|

Ganancia de una señal en función de la frecuencia de circuito

ω

Frecuencia de circuito

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La figura siguiente muestra la respuesta de amplitud de un elemento PT1:
GaindB+20dB

|G(ω)|dB

GaindB

GaindB-20dB

GaindB-40dB
0.01/Lag

0.1/Lag

1/Lag

10/Lag

ω

100/Lag

La respuesta de fase describe el desfase de una señal a través del elemento de transferencia
en función de la frecuencia de circuito de dicha señal.
La siguiente ecuación describe la respuesta de fase de un elemento PT1:

φ(ω) = -tan-1 ˶y/DJ 
φ(ω)

Desfase en función de la frecuencia de circuito

ω

Frecuencia de circuito

La figura siguiente muestra la respuesta de fase de un elemento PT1:

Programación del PLC
Manual de programación y manejo, 11/2019

3867

Instrucciones
4.1 Instrucciones
90°

ϕ(ω)

45°

0°

-45°

-90°
0.01/Lag

0.1/Lag

1/Lag

10/Lag

ω

100/Lag

Llamada
En un OB o FC, Filter_PT1 se llama como DB de instancia individual. En un FB, Filter_PT1
puede llamarse como DB de instancia individual, como DB multiinstancia o como DB de
instancia de parámetro.
Cuando se llama la instrucción, no se crea ningún objeto tecnológico. No se dispone de interfaz
de parametrización o puesta en marcha. Filter_PT1 se parametriza directamente mediante el
DB de instancia y se pone en marcha por medio de una tabla de observación del programa de
usuario en la CPU o HMI.

Arranque
Las variables en el rango estático de Filter_PT1 no son remanentes. Estas variables se
inicializan con los valores de arranque después de cada cambio del estado operativo de la
CPU de STOP a RUN. Si modifica los valores actuales en modo online, y desea conservar
estos valores tras cambiar el estado operativo de la CPU, guarde estos valores en los valores
de arranque del bloque de datos.
En la variable StartMode se determina el valor de inicialización para el parámetro Output.
El valor de inicialización se emite durante la primera llamada de Filter_PT1 tras el
● cambio de estado operativo de la CPU.

3868

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
o bien
● tras ejecutar "Cargar valores de arranque como valores actuales" (solo con la opción
"Todos los valores", no con la opción "Solo valores de ajuste")
en el parámetro Output.
En las siguientes llamadas, Filter_PT1 calcula el valor de salida a partir de este valor de
inicialización, sobre la base del valor de entrada y de la configuración del filtro.
La tabla siguiente muestra la dependencia entre la variable StartMode y el parámetro Output.
Los valores de la columna Output se emiten en el parámetro Output tras el cambio de estado
operativo de la CPU:
StartMode

Output

0

Valor del parámetro Input

Ejemplo
Input * Gain
Output
Input
CPU
STOP

1

Valor del parámetro SubstituteOutput

Input * Gain
Output
Input
CPU
STOP

2

Permanece inalterado
El parámetro Output es remanente.
Ajuste estándar
Se utiliza cuando el StartMode no está
en el rango 0...4.

3

0.0

t

CPU
RUN

SubstituteOutput

t

CPU
RUN

Input * Gain
Output
Input
CPU
STOP

CPU
RUN

CPU
STOP

CPU
RUN

t

Input * Gain
Output
Input
CPU
STOP

4

Valor del producto Input * Gain

t

CPU
RUN

Input * Gain
Output
Input
CPU
STOP

Programación del PLC
Manual de programación y manejo, 11/2019

CPU
RUN

CPU
STOP

CPU
RUN

t

3869

Instrucciones
4.1 Instrucciones
Lo siguiente se aplica además a todos los valores de la variable StartMode:
● El valor de inicialización se limita al rango de valores del tipo de datos REAL. Solo entonces
se emite el valor de inicialización en el parámetro Output.
● Si el valor de inicialización no es un valor REAL válido, se emite el valor de salida sustitutivo
en el parámetro Output. El valor de salida sustitutivo se configura con la variable
ErrorMode. El valor de salida sustitutivo se limita al rango de valores del tipo de datos REAL
antes de emitirse en el parámetro Output. Si el valor de salida sustitutivo tampoco es un
valor REAL válido, se emite 0.0 en el parámetro Output. En las siguientes llamadas, la
instrucción calcula el valor de salida a partir de este valor de salida sustitutivo.
● La variable StartMode solo es efectiva si durante la primera llamada de la instrucción está
ajustado el parámetro Reset = FALSE y al mismo tiempo no hay ningún error con el
mensaje de error ErrorBits ≥ 16#0002_0000. Si el parámetro Reset = TRUE está activado,
el valor del parámetro SubstituteOutput se emite en el parámetro Output. Si está presente
un error con el mensaje de error ErrorBits ≥ 16#0002_0000, en el parámetro Output se
emite el valor de salida sustitutivo configurado en la variable ErrorMode.

Respuesta en caso de error
La instrucción Filter_PT1 detecta diversos errores que pueden producirse durante el cálculo
del valor de salida. El resultado del cálculo puede emitirse en la salida aunque haya un error
presente. Si, debido a un error, no es posible calcular correctamente el valor de salida, en la
salida se emitirá un valor de salida sustitutivo.
Si se produce un error que no permite calcular correctamente el valor de salida, se deberá
definir el valor de salida sustitutivo en la variable ErrorMode.
La tabla siguiente muestra la dependencia entre el valor de la variable ErrorMode y el valor de
salida sustitutivo que Filter_PT1 emite en el parámetro Output:
ErrorMode

Output

0

Valor del parámetro Input

1

Valor del parámetro SubstituteOutput

2

Último valor de salida de filtro válido
0.0 si no hay ningún valor de salida de filtro válido
Ajuste estándar
Se utiliza cuando ErrorMode no está en el rango 0...4

3

0.0

4

Valor del producto Input * Gain

Lo siguiente se aplica además a todos los valores de la variable ErrorMode:
● Si el valor de salida sustitutivo no es un valor REAL válido, se emite 0.0 como valor de salida.
● El valor de salida sustitutivo se limita al rango de valores del tipo de datos REAL. Solo
entonces se emite el valor de salida sustitutivo en el parámetro Output.
● La variable ErrorMode solo es efectiva si está ajustado el parámetro Reset = FALSE. Si el
parámetro Reset = TRUE está activado, el valor del parámetro SubstituteOutput se emite
en el parámetro Output.

3870

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
El parámetro Error indica si hay algún un error presente en ese momento. Cuando el error
desaparece, Error se ajusta a FALSE. El parámetro ErrorBits indica qué errores se han
producido. ErrorBits es remanente y solo se borra con un flanco ascendente en el parámetro
Reset o ErrorAck.

Funcionamiento de Filter_PT1
Respuesta de Reset
Filter_PT1 se comporta de la siguiente manera en función del parámetro Reset:
● Si el parámetro Reset =TRUE está activado, el valor del parámetro SubstituteOutput se
emite en el parámetro Output.
● Si el parámetro Reset = FALSE está activado, el valor que se emite en el parámetro Output
se calcula por medio del algoritmo del filtro.
● Si se cambia el parámetro Reset de FALSE a TRUE, el valor del parámetro Output cambia
directamente al valor del parámetro SubstituteOutput. Este cambio puede ser brusco.
Además se restablece el parámetro ErrorBits.
● Si se cambia el parámetro Reset de TRUE a FALSE, se ajusta el algoritmo del filtro de
manera que el cambio se produce sin saltos.

Respuesta de habilitación EN/ENO
Si se cumple una de las siguientes condiciones, la salida de habilitación ENO se ajusta a
FALSE:
● La entrada de habilitación EN está ajustada a TRUE y el parámetro Output se ha definido
con un valor de salida sustitutivo en caso de mensajes de error ErrorBits ≥ 16#0001_0000.
● La entrada de habilitación EN está ajustada a FALSE.
De lo contrario, la salida de habilitación ENO se ajusta a TRUE.

Medición automática del tiempo de ciclo
Para calcular el valor de salida, Filter_PT1 necesita el tiempo que ha transcurrido desde la
última llamada de Filter_PT1.
En el ajuste predeterminado, el tiempo de ciclo se mide automáticamente y se emite en la
variable CycleTime.Value a partir de la segunda llamada. Filter_PT1 mide el tiempo de ciclo en
cada llamada de la instrucción, con lo que puede utilizarse en ciclos de llamada que no son
equidistantes, p. ej., en el OB1.
Tenga en cuenta que las llamadas condicionadas de la instrucción, los puntos de parada
activos o la carga de instantáneas como valores actuales con medición automática del tiempo
de ciclo hacen aumentar el valor del tiempo de ciclo. Un tiempo de ciclo excesivo se detecta
como error con el mensaje de error ErrorBits = 16#0008_0000.
Si la medición del tiempo de ciclo no da ningún resultado válido, Filter_PT1 calcula el valor de
salida actual con el último tiempo de ciclo válido. Además, Filter_PT1 emite un mensaje de
error en el parámetro ErrorBits.

Programación del PLC
Manual de programación y manejo, 11/2019

3871

Instrucciones
4.1 Instrucciones
Si se desactiva la medición automática del tiempo de ciclo ajustando la variable
CycleTime.EnableMeasurement = FALSE, hay que especificar manualmente el tiempo de
ciclo en la variable CycleTime.Value. Filter_PT1 comprueba la validez de la variable
CycleTime.Value en cada llamada.

Medición automática del tiempo de ciclo con puntos de parada
Si hay puntos de parada activos entre dos llamadas de Filter_PT1, la medición automática del
tiempo de ciclo da como resultado el tiempo transcurrido realmente entre dos llamadas. Si hay
un punto de parada activo, la CPU está en estado operativo PARADA.
Nota
Los puntos de parada activos hacen aumentar la distancia temporal entre dos llamadas de
Filter_PT1.
Cuanto mayor sea la distancia temporal entre dos llamadas tanto mayor será el cambio del
valor de salida en el parámetro Output.
Por lo demás, es posible que, debido a la mayor distancia temporal, se vulnere la condición
Lag ≥ CycleTime.Value/2 y por ello se detecte un error con el mensaje de error
ErrorBits = 16#0008_0000.
Si no se requiere el cálculo del valor de salida basado en el tiempo real con puntos de parada
activos, ejecute los pasos siguientes:
● Desactive la medición automática del tiempo de ciclo ajustando la variable
CycleTime.EnableMeasurement = FALSE.
● Introduzca el tiempo de ciclo manualmente en la variable CycleTime.Value.

Parámetros de entrada Filter_PT1
Parámetro

Tipo de da‐
tos

Ajuste pre‐
determinado

Descripción

Input

REAL

0.0

Valor de entrada

Substitu‐
teOutput

REAL

0.0

SubstituteOutput se utiliza como valor de salida sustitutivo si:
● Reset = TRUE
o bien
● si no es posible calcular correctamente el valor de salida debido a un error
con mensaje de error ErrorBits ≥ 16#0001_0000 y ErrorMode está ajustado
al valor 1 .

3872

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Tipo de da‐
tos

Ajuste pre‐
determinado

Descripción

ErrorAck

BOOL

FALSE

Borra los mensajes de error
● Flanco FALSE -> TRUE
ErrorBits se desactiva.

Reset

BOOL

FALSE

Reinicia la instrucción por medio de:
● Flanco FALSE -> TRUE
ErrorBits se desactiva.
● Mientras Reset esté ajustado a TRUE, el valor de salida sustitutivo
SubstituteOutput se emitirá en la salida.
● Mientras Reset esté ajustado a FALSE, se efectuará el cálculo del valor de
salida.

Parámetros de salida Filter_PT1
Parámetro

Tipo de da‐
tos

Ajuste pre‐
determinado

Descripción

Output

REAL

0.0

Valor de salida
El valor de salida es remanente.

ErrorBits

DWORD

DW#16#0

El parámetro ErrorBits (Página 3874) indica qué mensajes de error existen.
ErrorBits es remanente y se restablece con un flanco ascendente en Reset o
ErrorAck.

Error

BOOL

FALSE

Si Error está ajustado a TRUE, actualmente hay al menos un error presente.

Variables estáticas Filter_PT1
Variable

Tipo de datos

Ajuste predeter‐
minado

Descripción

Gain

REAL

1.0

Ganancia proporcional

Lag

REAL

25.0

Constante de tiempo de retardo en segundos

ErrorMode

INT

2

Rango admisible: Lag ≥ CycleTime.Value/2
Selección del valor de salida sustitutivo en caso de error
● 0 = Input
● 1 = SubstituteOutput
● 2 = último valor de salida de filtro válido
● 3 = 0.0
● 4 = Input * Gain
Rango admisible: de 0 a 4

Programación del PLC
Manual de programación y manejo, 11/2019

3873

Instrucciones
4.1 Instrucciones
Variable

Tipo de datos

Ajuste predeter‐
minado

Descripción

StartMode

INT

2

Selección del valor de salida para la primera llamada de la instruc‐
ción
● 0 = Input
● 1 = SubstituteOutput
● 2 = último valor de salida
● 3 = 0.0
● 4 = Input * Gain
Rango admisible: de 0 a 4

CycleTime

AuxFct_CycleTi‐ me

Datos del tiempo de ciclo

CycleTime.Va‐
lue

REAL

0.1

Tiempo de ciclo en segundos (intervalo entre 2 llamadas)

TRUE

Medición automática del tiempo de ciclo

Rango admisible: CycleTime.Value > 0.0

CycleTime.Ena‐ BOOL
bleMeasurement

● FALSE = desactivada
● TRUE = activada

Parámetro ErrorBits
Si hay varios errores presentes a la vez, los valores de ErrorBits se muestran sumados
binariamente. Por ejemplo, si se muestra ErrorBits = 16#0000_0003, significa que los errores
16#0000_0001 y 16#0000_0002 están pendientes simultáneamente.
Con Filter_PT1, los errores que se emiten en el parámetro ErrorBits se dividen en dos
categorías:
● Errores con mensajes de error ErrorBits < 16#0001_0000
● Errores con mensajes de error ErrorBits ≥ 16#0001_0000

Errores con mensajes de error ErrorBits < 16#0001_0000
Si están presentes uno o varios errores con mensajes de error ErrorBits < 16#0001_0000,
Filter_PT1 reacciona de la siguiente manera:
● Pese a este error, el valor de salida se determina del modo siguiente:
– Si Reset = FALSE, se calcula el valor de salida por medio del algoritmo del filtro.
– Si Reset = TRUE, se emite la SubstituteOutput.
● Se activa el parámetro de salida Error.
● La salida de habilitación ENO no cambia.

3874

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
El parámetro de salida Error se borra en cuanto no hay errores.
ErrorBits

Descripción

(DW#16#...)
0000_0000

No hay ningún error presente.

0000_0001

Causa del error y reacción a errores:
El parámetro Output se ha limitado a -3.402823e+38 o a +3.402823e+38.
Solución:
Si el valor determinado por la función de filtro se emite en la salida (Reset = FALSE y ErrorBits <
16#0001_0000), compruebe las siguientes variables utilizadas en el cálculo del filtro:
● Input
● Gain
● Lag
● CycleTime.Value
Si ErrorBits ≥ 16#0001_0000 y Reset = FALSE, el valor de salida sustitutivo se limitará al emitirse. En ese
caso, compruebe los siguientes parámetros dependiendo del valor ajustado en la variable ErrorMode:
● Input
● SubstituteOutput
● El producto de Input y Gain
Si Reset = TRUE, compruebe el parámetro SubstituteOutput.

0000_0002

Causa del error:
La medición del tiempo de ciclo da como resultado un valor no válido mientras se ejecuta el cálculo del
valor de salida (Reset = FALSE).
Reacción a errores:
Si ya se ha medido un valor válido del tiempo de ciclo, Filter_PT1 calcula el valor de salida a partir de este
último valor de la variable CycleTime.Value.
Si previamente no se ha medido ningún valor válido del tiempo de ciclo, Filter_PT1 sigue emitiendo en el
parámetro Output el valor de salida que se ha configurado con la variable StartMode.

Errores con mensajes de error ErrorBits ≥ 16#0001_0000
Si están presentes uno o varios errores con mensajes de error ErrorBits ≥ 16#0001_0000,
Filter_PT1 reacciona de la siguiente manera:
● El valor de salida no puede determinarse del modo previsto. En su lugar se emite el valor
de salida sustitutivo.
● Se activa el parámetro de salida Error.
● La salida de habilitación ENO se pone a FALSE.
En cuanto deja de haber errores con mensajes de error ErrorBits ≥ 16#0001_0000, Filter_PT1
reacciona de la siguiente manera:
● El valor de salida se determina del modo siguiente:
– Si Reset = FALSE, se calcula el valor de salida por medio del algoritmo del filtro.
– Si Reset = TRUE, se emite la SubstituteOutput.
● La salida de habilitación ENO se pone a TRUE.

Programación del PLC
Manual de programación y manejo, 11/2019

3875

Instrucciones
4.1 Instrucciones
El parámetro de salida Error se borra en cuanto no hay errores.
ErrorBits

Descripción

(DW#16#...)
0001_0000

Causa del error:
El parámetro SubstituteOutput u otra variable que se utiliza como valor de salida no tiene ningún valor
REAL válido.
Reacción a errores:
La salida se ajusta a 0.0.
Solución:
Asegúrese de que la variable que se utiliza como valor de salida sea un valor REAL válido (≠NaN, p. ej.,
16#7FFF_FFFF). La variable que se utiliza como valor de salida depende de Reset y ErrorMode:

0002_0000

Reset

ErrorMode

Valor de salida

FALSE

0

Input

FALSE

1

SubstituteOutput

FALSE

4

Producto de Input y Gain

TRUE

-

SubstituteOutput

Causa del error:
El parámetro Input no tiene ningún valor REAL válido mientras se ejecuta el cálculo del valor de salida
(Reset = FALSE).
Reacción a errores:
En el parámetro Output se emite el valor de salida sustitutivo configurado en la variable ErrorMode.
Si ErrorMode = 0, se emite 0.0 como valor de salida.
Solución:
Asegúrese de que el parámetro Input sea un valor REAL válido (≠NaN, p. ej., 16#7FFF_FFFF).

0004_0000

Causa del error:
El cálculo del valor de salida da como resultado un valor REAL no válido para el parámetro Output.
Reacción a errores:
En el parámetro Output se emite el valor de salida sustitutivo configurado en la variable ErrorMode.
Solución:
Compruebe todas las variables implicadas en el cálculo del valor de salida:
● Input
● Gain
● Lag
● CycleTime.Value
Estas variables tienen valores válidos. El cálculo del valor de salida falla en esta combinación de variables.

3876

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
ErrorBits

Descripción

(DW#16#...)
0008_0000

Causa del error:
La variable Gain o Lag tiene un valor no válido mientras se ejecuta el cálculo del valor de salida (Reset =
FALSE).
Reacción a errores:
En el parámetro Output se emite el valor de salida sustitutivo configurado en la variable ErrorMode.
Solución:
Asegúrese de que se cumplen las siguientes condiciones para los valores de las variables Gain y Lag:
● -3.402823e+38 ≤ Gain ≤ 3.402823e+38
● CycleTime.Value/2 ≤ Lag ≤ 3.402823e+38
● Los valores son valores REAL válidos (≠ NaN, p. ej., 16#7FFF_FFFF).
Información adicional:
Tenga en cuenta que la condición CycleTime.Value/2 ≤ Lag puede vulnerarse en los siguientes supuestos:
● El intervalo entre dos llamadas de Filter_PT1 es mayor que 2 * Lag, p. ej., debido a llamadas
condicionadas durante la ejecución del programa o a puntos de parada activos.
● Una instantánea del DB de instancia de Filter_PT1 se carga como valores actuales en la CPU y desde
la creación de la instantánea ha transcurrido un plazo mayor que 2 * Lag.
En estos supuestos, si está activada la medición automática del tiempo de ciclo, se detecta un error con
el mensaje de error ErrorBits = 16#0008_0000.

Programación del PLC
Manual de programación y manejo, 11/2019

3877

Instrucciones
4.1 Instrucciones
ErrorBits

Descripción

(DW#16#...)
0020_0000

Causa del error:
La variable (configurada con StartMode) para la inicialización del parámetro Output en la primera llamada
de la instrucción no tiene ningún valor REAL válido.
Reacción a errores:
En la primera llamada de la instrucción se emite en el parámetro Output el valor de salida sustitutivo
configurado en la variable ErrorMode. En las siguientes llamadas, Filter_PT1 calcula el valor de salida a
partir de este valor de salida sustitutivo.
Solución:
Asegúrese de que la variable para la inicialización del parámetro Output sea un valor REAL válido (≠ NaN,
p. ej., 16#7FFF_FFFF). Si está ajustado Reset = FALSE, la inicialización será efectiva la primera vez que
se llame la instrucción después de cambiar el estado operativo de la CPU de STOP a RUN. La variable
que se utiliza para la inicialización del parámetro Output depende de StartMode:
● StartMode = 1: SubstituteOutput
● StartMode = 2: Output
● StartMode = 4: Producto de Input y Gain

0040_0000

Causa del error:
La variable CycleTime.Value tiene un valor no válido mientras se ejecuta el cálculo del valor de salida
(Reset = FALSE).
Reacción a errores:
En el parámetro Output se emite el valor de salida sustitutivo configurado en la variable ErrorMode.
Solución:
Asegúrese de que se cumplen las siguientes condiciones:
● 0.0 < CycleTime.Value ≤ 3.402823e+38
● CycleTime.Value es un valor REAL válido (≠ NaN p. ej., 16#7FFF_FFFF)
Información adicional:
Para un cálculo automático del valor de la variable CycleTime.Value, ajuste la variable CycleTime.Ena‐
bleMeasurement a TRUE.

Filter_PT2
Compatibilidad con CPU y FW
La siguiente tabla indica en qué CPU puede usarse qué versión de Filter_PT2:

3878

CPU

FW

Filter_PT2

S7-1200

A partir de V4.2

V1.0

CPU basadas en S7-1500

A partir de V2.0

V1.0

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Descripción Filter_PT2
Descripción
La instrucción Filter_PT2 es un elemento de transferencia proporcional con un retardo de
segundo orden, también denominado elemento PT2.
Filter_PT2 se puede utilizar para los siguientes fines:
● Filtro paso bajo para atenuar las frecuencias más altas de una señal, como, por ejemplo, el
ruido.
● Elemento de retardo para filtrar saltos de señal, por ejemplo de la consigna o el valor de
salida de un regulador.
● Bloque de simulación de proceso para implementar un lazo de regulación cerrado en la
CPU. Esto permite, por ejemplo, probar reguladores antes de la puesta en marcha.
Se pueden especificar los siguientes parámetros de filtro:
● Ganancia proporcional (Gain)
● Constante de tiempo (TimeConstant)
● Atenuación (Damping)
Nota
Diferencias entre un elemento PT2 de tiempo continuo y Filter_PT2
Dado que Filter_PT2 se ejecuta en un programa de PLC, Filter_PT2 constituye una
implementación de tiempo discreto de un elemento PT2. Los sistemas de tiempo discreto no
pueden presentar las mismas características que su correspondiente modelo de tiempo
continuo. Sin embargo, en función del tiempo de ciclo, los sistemas de tiempo discreto pueden
imitar correctamente un sistema de tiempo continuo: Cuanto más corto y constante es el
tiempo de ciclo, menor es la diferencia entre las características de Filter_PT2 y las
características de un elemento PT2 de tiempo continuo. Las características de un elemento
PT2 de tiempo continuo son la función de transferencia que se describe más adelante, la
respuesta en el tiempo y la respuesta de frecuencia.
Para una reproducción correcta de la respuesta de frecuencia se recomienda un tiempo de
ciclo máximo de una décima parte de la duración de periodo mínima de los componentes de
la señal de entrada. Por ejemplo, una señal con componentes de frecuencia de hasta 50 Hz
tiene una duración de periodo mínima de 20 ms. Para obtener una reproducción correcta de la
respuesta de frecuencia se recomienda un tiempo de ciclo máximo de 2 ms para este ejemplo.

Función de transferencia de un elemento PT2
La siguiente fórmula muestra la función de transferencia de un elemento PT2, siendo s igual
al operador laplaciano:

G(s) =

2XWSXW V
,QSXW V

*DLQ



y'DPSLQJy7LPH&RQVWDQWyV7LPH&RQVWDQWyV

Si Damping ≥ 1, el elemento PT2 se puede describir como dos elementos PT1 conectados en
serie:
Programación del PLC
Manual de programación y manejo, 11/2019

3879

Instrucciones
4.1 Instrucciones

G(s) =

2XWSXW V
,QSXW V

*DLQ

/DJyV y /DJyV




Las constantes de tiempo de retardo de los dos elementos PT1 conectados en serie se
calculan de la siguiente manera:



Lag = TimeConstant ∙ Damping
± ෭Damping
-1


Respuesta en el tiempo de un elemento PT2
La respuesta a un salto es la reacción del valor de salida a un salto del valor de entrada.
La respuesta a un salto del valor de entrada de 0 a ΔInput puede calcularse con las siguientes
fórmulas:
Para Damping < 1 se aplica la siguiente fórmula:

(

'DPSLQJ

 7LPH&RQVWDQW yW

Output(t) = ∆Input · Gain · 1 - e

>

y FRV

෭1- Damping ∙ t +
7LPH&RQVWDQW

Damping

෭1- Damping

∙ sin

෭1- Damping ∙ t
7LPH&RQVWDQW

@)

Para Damping = 1 se aplica la siguiente fórmula:

(

W

 7LPH&RQVWDQW

Output(t) = ∆Input · Gain · 1 - e



t
TimeConstant

W

 7LPH&RQVWDQW

∙e

)

Para Damping > 1 se aplica la siguiente fórmula con los Lag1 y Lag2 calculados anteriormente:

(

Output(t) = ∆Input · Gain · 1 -

Lag1
 W
/DJ 1
Lag1- Lag2∙ e

+

Lag2
 W
/DJ2
Lag1- Lag2∙ e

)

La figura siguiente muestra la respuesta a un salto de un elemento PT2 con distintos valores
para la atenuación:

3880

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Damping = 0.5

ΔInput·Gain

Damping = 1.0

Damping = 2.0
Output(t)

ΔInput

Input(t)

t

Respuesta de frecuencia de un elemento PT2
La respuesta de frecuencia de un elemento de transferencia se describe por medio de la
respuesta de amplitud y la respuesta de fase.
La respuesta de amplitud describe la ganancia de una señal a través del elemento de
transferencia en función de la frecuencia de circuito de dicha señal.
La siguiente ecuación describe la respuesta de amplitud de un elemento PT2:

|G(ω)| =

෭

*DLQ
>˶y7LPH&RQVWDQW@t t ˶ʷʷ'DPSLQJʷ7LPH&RQVWDQW t

|G(ω)|

Ganancia en función de la frecuencia de circuito

ω

Frecuencia de circuito

La figura siguiente muestra la respuesta de amplitud de un elemento PT2 con una atenuación
de 0,4 y 1,0:

Programación del PLC
Manual de programación y manejo, 11/2019

3881

Instrucciones
4.1 Instrucciones
GaindB+20dB

|G(ω)|dB

Damping = 0.4
GaindB
Damping = 1.0

GaindB-20dB

GaindB-40dB
0.01/
TimeConstant

0.1/
TimeConstant

1/
TimeConstant

10/
TimeConstant

ω

100/
TimeConstant

Nota
Si Damping < 1/√2, aparece un aumento de la resonancia en la respuesta de amplitud.
La respuesta de fase describe el desfase de una señal a través del elemento de transferencia
en función de la frecuencia de circuito de dicha señal.
La siguiente ecuación describe la respuesta de fase de un elemento PT2:

φ(ω) = -tan-1

˶yy'DPSLQJy7LPH&RQVWDQW
 ˶y7LPH&RQVWDQW



φ(ω)

Desfase en función de la frecuencia de circuito

ω

Frecuencia de circuito

La figura siguiente muestra la respuesta de fase de un elemento PT2:

3882

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
0°
Damping = 0.4
ϕ(ω)
Damping = 1.0
-45°

-90°

-135°

-180°
0.01/
TimeConstant

0.1/
TimeConstant

1/
TimeConstant

10/
TimeConstant

ω

100/
TimeConstant

Llamada
En un OB o FC, Filter_PT2 se llama como DB de instancia individual. En un FB, Filter_PT2
puede llamarse como DB de instancia individual, como DB multiinstancia o como DB de
instancia de parámetro.
Cuando se llama la instrucción, no se crea ningún objeto tecnológico. No se dispone de interfaz
de parametrización o puesta en marcha. Filter_PT2 se parametriza directamente mediante el
DB de instancia y se pone en marcha por medio de una tabla de observación del programa de
usuario en la CPU o HMI.

Arranque
Las variables en el rango estático de Filter_PT2 no son remanentes. Estas variables se
inicializan con los valores de arranque después de cada cambio del estado operativo de la
CPU de STOP a RUN. Si modifica los valores actuales en modo online, y desea conservar
estos valores tras cambiar el estado operativo de la CPU, guarde estos valores en los valores
de arranque del bloque de datos.
En la variable StartMode se determina el valor de inicialización para el parámetro Output.
El valor de inicialización se emite durante la primera llamada de Filter_PT2 tras el
● cambio de estado operativo de la CPU.

Programación del PLC
Manual de programación y manejo, 11/2019

3883

Instrucciones
4.1 Instrucciones
o bien
● tras ejecutar "Cargar valores de arranque como valores actuales" (solo con la opción
"Todos los valores", no con la opción "Solo valores de ajuste")
en el parámetro Output.
En las siguientes llamadas, Filter_PT2 calcula el valor de salida a partir de este valor de
inicialización, sobre la base del valor de entrada y de la configuración de filtro.
La tabla siguiente muestra la dependencia entre la variable StartMode y el parámetro Output.
Los valores de la columna Output se emiten en el parámetro Output tras el cambio de estado
operativo de la CPU:
StartMode

Output

0

Valor del parámetro Input

Ejemplo
Input * Gain
Output
Input
CPU
STOP

1

Valor del parámetro SubstituteOutput

Input * Gain
Output
Input
CPU
STOP

2

Permanece inalterado
El parámetro Output es remanente.
Ajuste estándar
Se utiliza cuando el StartMode no está
en el rango 0...4.

3

0.0

t

CPU
RUN

SubstituteOutput

t

CPU
RUN

Input * Gain
Output
Input
CPU
STOP

CPU
RUN

CPU
STOP

CPU
RUN

t

Input * Gain
Output
Input
CPU
STOP

4

Valor del producto Input * Gain

t

CPU
RUN

Input * Gain
Output
Input
CPU
STOP

3884

CPU
RUN

CPU
STOP

CPU
RUN

t

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Lo siguiente se aplica además a todos los valores de la variable StartMode:
● El valor de inicialización se limita al rango de valores del tipo de datos REAL. Solo entonces
se emite el valor de inicialización en el parámetro Output.
● Si el valor de inicialización no es un valor REAL válido, se emite el valor de salida sustitutivo
en el parámetro Output. El valor de salida sustitutivo se configura con la variable
ErrorMode. El valor de salida sustitutivo se limita al rango de valores del tipo de datos REAL
antes de emitirse en el parámetro Output. Si el valor de salida sustitutivo tampoco es un
valor REAL válido, se emite 0.0 en el parámetro Output. En las siguientes llamadas, la
instrucción calcula el valor de salida a partir de este valor de salida sustitutivo.
● La variable StartMode solo es efectiva si durante la primera llamada de la instrucción está
ajustado el parámetro Reset = FALSE y al mismo tiempo no hay ningún error con el
mensaje de error ErrorBits ≥ 16#0002_0000. Si el parámetro Reset = TRUE está activado,
el valor del parámetro SubstituteOutput se emite en el parámetro Output. Si está presente
un error con el mensaje de error ErrorBits ≥ 16#0002_0000, en el parámetro Output se
emite el valor de salida sustitutivo configurado en la variable ErrorMode.

Respuesta en caso de error
La instrucción Filter_PT2 detecta diversos errores que pueden producirse durante el cálculo
del valor de salida. El resultado del cálculo puede emitirse en la salida aunque haya un error
presente. Si, debido a un error, no es posible calcular correctamente el valor de salida, en la
salida se emitirá un valor de salida sustitutivo.
Si se produce un error que no permite calcular correctamente el valor de salida, se deberá
definir el valor de salida sustitutivo en la variable ErrorMode.
La tabla siguiente muestra la dependencia entre el valor de la variable ErrorMode y el valor de
salida sustitutivo que Filter_PT2 emite en el parámetro Output:
ErrorMode

Output

0

Valor del parámetro Input

1

Valor del parámetro SubstituteOutput

2

Último valor de salida de filtro válido
0.0 si no hay ningún valor de salida de filtro válido
Ajuste estándar
Se utiliza cuando ErrorMode no está en el rango 0...4

3

0.0

4

Valor del producto Input * Gain

Lo siguiente se aplica además a todos los valores de la variable ErrorMode:
● Si el valor de salida sustitutivo no es un valor REAL válido, se emite 0.0 como valor de salida.
● El valor de salida sustitutivo se limita al rango de valores del tipo de datos REAL. Solo
entonces se emite el valor de salida sustitutivo en el parámetro Output.
● La variable ErrorMode solo es efectiva si está ajustado el parámetro Reset = FALSE. Si el
parámetro Reset = TRUE está activado, el valor del parámetro SubstituteOutput se emite
en el parámetro Output.
El parámetro Error indica si hay algún un error presente en ese momento. Cuando el error
desaparece, Error se ajusta a FALSE. El parámetro ErrorBits indica qué errores se han

Programación del PLC
Manual de programación y manejo, 11/2019

3885

Instrucciones
4.1 Instrucciones
producido. ErrorBits es remanente y solo se borra con un flanco ascendente en el parámetro
Reset o ErrorAck.

Funcionamiento de Filter_PT2
Respuesta de Reset
Filter_PT2 se comporta de la siguiente manera en función del parámetro Reset:
● Si el parámetro Reset =TRUE está activado, el valor del parámetro SubstituteOutput se
emite en el parámetro Output.
● Si el parámetro Reset = FALSE está activado, el valor que se emite en el parámetro Output
se calcula por medio del algoritmo del filtro.
● Si se cambia el parámetro Reset de FALSE a TRUE, el valor del parámetro Output cambia
directamente al valor del parámetro SubstituteOutput. Este cambio puede ser brusco.
Además se restablece el parámetro ErrorBits.
● Si se cambia el parámetro Reset de TRUE a FALSE, se ajusta el algoritmo del filtro de
manera que el cambio se produce sin saltos.

Respuesta de habilitación EN/ENO
Si se cumple una de las siguientes condiciones, la salida de habilitación ENO se ajusta a
FALSE:
● La entrada de habilitación EN está ajustada a TRUE y el parámetro Output se ha definido
con un valor de salida sustitutivo en caso de mensajes de error ErrorBits ≥ 16#0001_0000.
● La entrada de habilitación EN está ajustada a FALSE.
De lo contrario, la salida de habilitación ENO se ajusta a TRUE.

Medición automática del tiempo de ciclo
Para calcular el valor de salida, Filter_PT2 necesita el tiempo que ha transcurrido desde la
última llamada de Filter_PT2.
En el ajuste predeterminado, el tiempo de ciclo se mide automáticamente y se emite en la
variable CycleTime.Value a partir de la segunda llamada. Filter_PT2 mide el tiempo de ciclo en
cada llamada de la instrucción, con lo que puede utilizarse en ciclos de llamada no
equidistantes, p. ej., en el OB1.
Tenga en cuenta que las llamadas condicionadas de la instrucción, los puntos de parada
activos o la carga de instantáneas como valores actuales con medición automática del tiempo
de ciclo hacen aumentar el valor del tiempo de ciclo. Un tiempo de ciclo excesivo se detecta
como error con el mensaje de error ErrorBits = 16#0008_0000.
Si la medición del tiempo de ciclo no da ningún resultado válido, Filter_PT2 calcula el valor de
salida actual con el último tiempo de ciclo válido. Además, Filter_PT2 emite un mensaje de
error en el parámetro ErrorBits.
Si se desactiva la medición automática del tiempo de ciclo ajustando la variable
CycleTime.EnableMeasurement = FALSE, hay que especificar manualmente el tiempo de

3886

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
ciclo en la variable CycleTime.Value. Filter_PT2 comprueba la validez de la variable
CycleTime.Value en cada llamada.

Medición automática del tiempo de ciclo con puntos de parada
Si hay puntos de parada activos entre dos llamadas de Filter_PT2, la medición automática del
tiempo de ciclo da como resultado el tiempo transcurrido realmente entre dos llamadas. Si hay
un punto de parada activo, la CPU está en estado operativo PARADA.
Nota
Los puntos de parada activos hacen aumentar la distancia temporal entre dos llamadas de
Filter_PT2.
Cuanto mayor sea la distancia temporal entre dos llamadas tanto mayor será el cambio del
valor de salida en el parámetro Output.
Por lo demás, es posible que, debido a la mayor distancia temporal, se vulnere la condición
TimeConstant ≥ CycleTime.Value/2 y por ello se detecte un error con el mensaje de error
ErrorBits = 16#0008_0000.
Si no se requiere el cálculo del valor de salida basado en el tiempo real con puntos de parada
activos, ejecute los pasos siguientes:
● Desactive la medición automática del tiempo de ciclo ajustando la variable
CycleTime.EnableMeasurement = FALSE.
● Introduzca el tiempo de ciclo manualmente en la variable CycleTime.Value.

Parámetros de entrada Filter_PT2
Parámetro

Tipo de da‐
tos

Ajuste pre‐
determinado

Descripción

Input

REAL

0.0

Valor de entrada

Substitu‐
teOutput

REAL

0.0

SubstituteOutput se utiliza como valor de salida sustitutivo si:
● Reset = TRUE
o bien
● si no es posible calcular correctamente el valor de salida debido a un error
con mensaje de error ErrorBits ≥ 16#0001_0000 y ErrorMode está ajustado
al valor 1.

ErrorAck

BOOL

FALSE

Borra los mensajes de error
● Flanco FALSE -> TRUE
ErrorBits se desactiva.

Reset

BOOL

FALSE

Reinicia la instrucción por medio de:
● Flanco FALSE -> TRUE
ErrorBits se desactiva.
● Mientras Reset esté ajustado a TRUE, el valor de salida sustitutivo
SubstituteOutput se emitirá en la salida.
● Mientras Reset esté ajustado a FALSE, se efectuará el cálculo del valor de
salida.

Programación del PLC
Manual de programación y manejo, 11/2019

3887

Instrucciones
4.1 Instrucciones

Parámetros de salida Filter_PT2
Parámetro

Tipo de da‐
tos

Ajuste pre‐
determinado

Descripción

Output

REAL

0.0

Valor de salida
El valor de salida es remanente.

ErrorBits

DWORD

DW#16#0

El parámetro ErrorBits (Página 3889) indica qué mensajes de error existen.
ErrorBits es remanente y se restablece con un flanco ascendente en Reset o
ErrorAck.

Error

BOOL

FALSE

Si Error está ajustado a TRUE, actualmente hay al menos un error presente.

Variables estáticas Filter_PT2
Variable

Tipo de datos

Ajuste predeter‐
minado

Descripción

Gain

REAL

1.0

Ganancia proporcional

TimeConstant

REAL

25.0

Constante de tiempo en segundos
Rango admisible: TimeConstant ≥ CycleTime.Value/2

Damping

REAL

1.0

Atenuación
Rango admisible: Damping > 0.0

ErrorMode

INT

2

Selección del valor de salida sustitutivo en caso de error
● 0 = Input
● 1 = SubstituteOutput
● 2 = último valor de salida de filtro válido
● 3 = 0.0
● 4 = Input * Gain
Rango admisible: de 0 a 4

StartMode

INT

2

Selección del valor de salida para la primera llamada de la instruc‐
ción
● 0 = Input
● 1 = SubstituteOutput
● 2 = último valor de salida
● 3 = 0.0
● 4 = Input * Gain
Rango admisible: de 0 a 4

CycleTime

AuxFct_CycleTi‐ me

Datos del tiempo de ciclo

CycleTime.Va‐
lue

REAL

Tiempo de ciclo en segundos (intervalo entre 2 llamadas)

CycleTime.Ena‐ BOOL
bleMeasurement

0.1

Rango admisible: CycleTime.Value > 0.0
TRUE

Medición automática del tiempo de ciclo
● FALSE = desactivada
● TRUE = activada

3888

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetro ErrorBits
Si hay varios errores presentes a la vez, los valores de ErrorBits se muestran sumados
binariamente. Por ejemplo, si se muestra ErrorBits = 16#0000_0003, significa que los errores
16#0000_0001 y 16#0000_0002 están pendientes simultáneamente.
Con Filter_PT2, los errores que se emiten en el parámetro ErrorBits se dividen en dos
categorías:
● Errores con mensajes de error ErrorBits < 16#0001_0000
● Errores con mensajes de error ErrorBits ≥ 16#0001_0000

Errores con mensajes de error ErrorBits < 16#0001_0000
Si están presentes uno o varios errores con mensajes de error ErrorBits < 16#0001_0000,
Filter_PT2 reacciona de la siguiente manera:
● Pese a este error, el valor de salida se determina del modo siguiente:
– Si Reset = FALSE, se calcula el valor de salida por medio del algoritmo del filtro.
– Si Reset = TRUE, se emite la SubstituteOutput.
● Se activa el parámetro de salida Error.
● La salida de habilitación ENO no cambia.

Programación del PLC
Manual de programación y manejo, 11/2019

3889

Instrucciones
4.1 Instrucciones
El parámetro de salida Error se borra en cuanto no hay errores.
ErrorBits

Descripción

(DW#16#...)
0000_0000

No hay ningún error presente.

0000_0001

Causa del error y reacción a errores:
El parámetro Output se ha limitado a -3.402823e+38 o a +3.402823e+38.
Solución:
Si el valor determinado por la función de filtro se emite en la salida (Reset = FALSE y ErrorBits <
16#0001_0000), compruebe las siguientes variables utilizadas en el cálculo del filtro:
● Input
● Gain
● TimeConstant
● Damping
● CycleTime.Value
Si ErrorBits ≥ 16#0001_0000 y Reset = FALSE, se ha activado la limitación al emitir un valor de salida
sustitutivo. En ese caso, compruebe los siguientes parámetros dependiendo del valor ajustado en la
variable ErrorMode:
● Input
● SubstituteOutput
● El producto de Input y Gain
Si Reset = TRUE, compruebe el parámetro SubstituteOutput.

0000_0002

Causa del error:
La medición del tiempo de ciclo da como resultado un valor no válido mientras se ejecuta el cálculo del
valor de salida (Reset = FALSE).
Reacción a errores:
Si ya se ha medido un valor válido del tiempo de ciclo, Filter_PT2 calcula el valor de salida a partir de este
último valor de la variable CycleTime.Value.
Si previamente no se ha medido ningún valor válido del tiempo de ciclo, Filter_PT2 sigue emitiendo en el
parámetro Output el valor de salida que se ha configurado con la variable StartMode.

Errores con mensajes de error ErrorBits ≥ 16#0001_0000
Si están presentes uno o varios errores con mensajes de error ErrorBits ≥ 16#0001_0000,
Filter_PT2 reacciona de la siguiente manera:
● El valor de salida no puede determinarse del modo previsto. En su lugar se emite el valor
de salida sustitutivo.
● Se activa el parámetro de salida Error.
● La salida de habilitación ENO se pone a FALSE.

3890

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
En cuanto deja de haber errores con mensajes de error ErrorBits ≥ 16#0001_0000, Filter_PT2
reacciona de la siguiente manera:
● El valor de salida se determina del modo siguiente:
– Si Reset = FALSE, se calcula el valor de salida por medio del algoritmo del filtro.
– Si Reset = TRUE, se emite la SubstituteOutput.
● La salida de habilitación ENO se pone a TRUE.
El parámetro de salida Error se borra en cuanto no hay errores.
ErrorBits

Descripción

(DW#16#...)
0001_0000

Causa del error:
El parámetro SubstituteOutput u otra variable que se utiliza como valor de salida no tiene ningún valor
REAL válido.
Reacción a errores:
La salida se ajusta a 0.0.
Solución:
Asegúrese de que la variable que se utiliza como valor de salida sea un valor REAL válido (≠NaN, p. ej.,
16#7FFF_FFFF). La variable que se utiliza como valor de salida depende de Reset y ErrorMode:

0002_0000

Reset

ErrorMode

Valor de salida

FALSE

0

Input

FALSE

1

SubstituteOutput

FALSE

4

Producto de Input y Gain

TRUE

-

SubstituteOutput

Causa del error:
El parámetro Input no tiene ningún valor REAL válido mientras se ejecuta el cálculo del valor de salida
(Reset = FALSE).
Reacción a errores:
En el parámetro Output se emite el valor de salida sustitutivo configurado en la variable ErrorMode.
Si ErrorMode = 0, se emite 0.0 como valor de salida.
Solución:
Asegúrese de que el parámetro Input sea un valor REAL válido (≠NaN, p. ej., 16#7FFF_FFFF).

0004_0000

Causa del error:
El cálculo del valor de salida da como resultado un valor REAL no válido para el parámetro Output.
Reacción a errores:
En el parámetro Output se emite el valor de salida sustitutivo configurado en la variable ErrorMode.
Solución:
Compruebe todas las variables implicadas en el cálculo del valor de salida:
● Input
● Gain
● TimeConstant
● Damping
● CycleTime.Value
Estas variables tienen valores válidos. El cálculo del valor de salida falla en esta combinación de variables.

Programación del PLC
Manual de programación y manejo, 11/2019

3891

Instrucciones
4.1 Instrucciones
ErrorBits

Descripción

(DW#16#...)
0008_0000

Causa del error:
La variable Gain, TimeConstant o Damping tiene un valor no válido mientras se ejecuta el cálculo del valor
de salida (Reset = FALSE).
Reacción a errores:
En el parámetro Output se emite el valor de salida sustitutivo configurado en la variable ErrorMode.
Solución:
Asegúrese de que se cumplen las siguientes condiciones para los valores de las variables Gain, Time‐
Constant y Damping:
● -3.402823e+38 ≤ Gain ≤ 3.402823e+38
● CycleTime.Value/2 ≤ TimeConstant ≤ 3.402823e+38
●

0.0 < Damping ≤ 3.402823e+38

● Los valores son valores REAL válidos (≠ NaN, p. ej., 16#7FFF_FFFF).
Información adicional:
Tenga en cuenta que la condición CycleTime.Value/2 ≤ TimeConstant puede vulnerarse en los siguientes
supuestos:
● El intervalo entre dos llamadas de Filter_PT2 es mayor que 2 * TimeConstant, p. ej., debido a llamadas
condicionadas durante la ejecución del programa o a puntos de parada activos.
● Una instantánea del DB de instancia de Filter_PT2 se carga como valores actuales en la CPU y desde
la creación de la instantánea ha transcurrido un plazo mayor que 2 * TimeConstant.
En estos supuestos, si está activada la medición automática del tiempo de ciclo, se detecta un error con
el mensaje de error ErrorBits = 16#0008_0000.

3892

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
ErrorBits

Descripción

(DW#16#...)
0020_0000

Causa del error:
La variable (configurada con StartMode) para la inicialización del parámetro Output en la primera llamada
de la instrucción no tiene ningún valor REAL válido.
Reacción a errores:
En la primera llamada de la instrucción se emite en el parámetro Output el valor de salida sustitutivo
configurado en la variable ErrorMode. En las siguientes llamadas, Filter_PT2 calcula el valor de salida a
partir de este valor de salida sustitutivo.
Solución:
Asegúrese de que la variable para la inicialización del parámetro Output sea un valor REAL válido (≠ NaN,
p. ej., 16#7FFF_FFFF). Si está ajustado Reset = FALSE, la inicialización será efectiva la primera vez que
se llame la instrucción después de cambiar el estado operativo de la CPU de STOP a RUN. La variable
que se utiliza para la inicialización del parámetro Output depende de StartMode:
● StartMode = 1: SubstituteOutput
● StartMode = 2: Output
● StartMode = 4: producto de Input y Gain

0040_0000

Causa del error:
La variable CycleTime.Value no tiene ningún valor válido mientras se ejecuta el cálculo del valor de salida
(Reset = FALSE).
Reacción a errores:
En el parámetro Output se emite el valor de salida sustitutivo configurado en la variable ErrorMode.
Solución:
Asegúrese de que se cumplen las siguientes condiciones:
● 0.0 < CycleTime.Value ≤ 3.402823e+38
● CycleTime.Value es un valor REAL válido (≠ NaN p. ej., 16#7FFF_FFFF)
Información adicional:
Para un cálculo automático del valor de la variable CycleTime.Value, ajuste la variable CycleTime.Ena‐
bleMeasurement a TRUE.

Filter_DT1
Compatibilidad con CPU y FW
La siguiente tabla muestra en qué CPU puede usarse cada versión de Filter_DT1:
CPU

FW

Filter_DT1

S7-1200

A partir de V4.2

V1.0

CPU basadas en S7-1500

A partir de V2.0

V1.0

Programación del PLC
Manual de programación y manejo, 11/2019

3893

Instrucciones
4.1 Instrucciones

Descripción Filter_DT1
Descripción
La instrucción Filter_DT1 es un elemento diferenciador con un retardo de primer orden,
también denominado elemento DT1.
Filter_DT1 se puede utilizar para los siguientes fines:
● Filtro paso alto para atenuar las frecuencias más bajas de una señal.
● Elemento diferenciador para calcular la derivada de una señal, como, por ejemplo, la
velocidad a partir de valores de posición.
● Control anticipativo para paliar los efectos de fallos mensurables en el proceso.
Se pueden especificar los siguientes parámetros de filtro:
● Tiempo derivativo (Td)
● Constante de tiempo de retardo (Lag)
Nota
Diferencias entre un elemento DT1 de tiempo continuo y Filter_DT1
Dado que Filter_DT1 se ejecuta en un programa de PLC, Filter_DT1 constituye una
implementación de tiempo discreto de un elemento DT1. Los sistemas de tiempo discreto no
pueden presentar las mismas características que su correspondiente modelo de tiempo
continuo. Sin embargo, en función del tiempo de ciclo, los sistemas de tiempo discreto pueden
imitar correctamente un sistema de tiempo continuo: Cuanto más corto y constante es el
tiempo de ciclo, menor es la diferencia entre las características de Filter_DT1 y las
características de un elemento DT1 de tiempo continuo. Las características de un elemento
DT1 de tiempo continuo son la función de transferencia que se describe más adelante, la
respuesta en el tiempo y la respuesta de frecuencia.
Para una reproducción correcta de la respuesta de frecuencia se recomienda un tiempo de
ciclo máximo de una décima parte de la duración de periodo mínima de los componentes de
la señal de entrada. Por ejemplo, una señal con componentes de frecuencia de hasta 50 Hz
tiene una duración de periodo mínima de 20 ms. Para obtener una reproducción correcta de la
respuesta de frecuencia se recomienda un tiempo de ciclo máximo de 2 ms para este ejemplo.

Función de transferencia de un elemento DT1
La siguiente fórmula muestra la función de transferencia de un elemento DT1, siendo s igual
al operador laplaciano:

G(s) =

2XWSXW V
,QSXW V

7GyV
/DJyV

Respuesta en el tiempo de un elemento DT1
La respuesta a un salto es la reacción del valor de salida a un salto del valor de entrada.

3894

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La respuesta a un salto del valor de entrada de 0 a ΔInput puede calcularse con la siguiente
fórmula:
7G

W

 /DJ

Output(t) = ∆Input · Lag · e

La figura siguiente muestra la respuesta a un salto de un elemento DT1:

ΔInput·

Td
Lag

Input(t)

ΔInput
36.8%·ΔInput·Td/Lag

Output(t)
0.7%·ΔInput·Td/Lag
Lag

5·Lag t

Para desactivar el retardo, ajuste el parámetro Lag al valor mínimo CycleTime.Value / 2. En
ese caso, los cambios del valor de entrada se multiplican por Td / CycleTime.Value y se emiten
en el parámetro Output. Después de un ciclo, el valor de salida es 0.0.
La figura siguiente muestra la respuesta a un salto en el caso Lag = CycleTime.Value / 2:

Programación del PLC
Manual de programación y manejo, 11/2019

3895

Instrucciones
4.1 Instrucciones

ΔInput·

Td
CycleTime.Value

Input(t)

ΔInput

Output(t)
t

CycleTime.Value

Respuesta de frecuencia de un elemento DT1
La respuesta de frecuencia de un elemento de transferencia se describe por medio de la
respuesta de amplitud y la respuesta de fase.
La respuesta de amplitud describe la ganancia de una señal a través del elemento de
transferencia en función de la frecuencia de circuito de dicha señal.
La siguiente ecuación describe la respuesta de amplitud de un elemento DT1:

|G(ω)| =

ω ∙ Td

෭ ˶y/DJ t

|G(ω)|

Ganancia de una señal en función de la frecuencia de circuito

ω

Frecuencia de circuito

La figura siguiente muestra la respuesta de amplitud de un elemento DT1:

3896

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

|G(ω)|dB

Td
Lag dB

0dB

1/Td

1/Lag

ω

La respuesta de fase describe el desfase de una señal a través del elemento de transferencia
en función de la frecuencia de circuito de dicha señal.
La siguiente ecuación describe la respuesta de fase de un elemento DT1:

φ(ω) = tan ωy/DJ 
-1

φ(ω)

Desfase en función de la frecuencia de circuito

ω

Frecuencia de circuito

La figura siguiente muestra la respuesta de fase de un elemento DT1:

Programación del PLC
Manual de programación y manejo, 11/2019

3897

Instrucciones
4.1 Instrucciones
90°

ϕ(ω)

45°

0°

-45°

-90°
0.01/Lag

0.1/Lag

1/Lag

10/Lag

ω

100/Lag

Llamada
En un OB o FC, Filter_DT1 se llama como DB de instancia individual. En un FB, Filter_DT1
puede llamarse como DB de instancia individual, como DB multiinstancia o como DB de
instancia de parámetro.
Cuando se llama la instrucción, no se crea ningún objeto tecnológico. No se dispone de interfaz
de parametrización o puesta en marcha. Filter_DT1 se parametriza directamente mediante el
DB de instancia y se pone en marcha por medio de una tabla de observación del programa de
usuario en la CPU o HMI.

Arranque
Las variables en el rango estático de Filter_DT1 no son remanentes. Estas variables se
inicializan con los valores de arranque después de cada cambio del estado operativo de la
CPU de STOP a RUN. Si modifica los valores actuales en modo online, y desea conservar
estos valores tras cambiar el estado operativo de la CPU, guarde estos valores en los valores
de arranque del bloque de datos.
En la variable StartMode se determina el valor de inicialización para el parámetro Output.
El valor de inicialización se emite durante la primera llamada de Filter_DT1 tras el
● cambio de estado operativo de la CPU.

3898

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
o bien
● tras ejecutar "Cargar valores de arranque como valores actuales" (solo con la opción
"Todos los valores", no con la opción "Solo valores de ajuste")
en el parámetro Output.
En las siguientes llamadas, Filter_DT1 calcula el valor de salida a partir de este valor de
inicialización, sobre la base del valor de entrada y de la configuración del filtro.
La tabla siguiente muestra la dependencia entre la variable StartMode y el parámetro Output.
Los valores de la columna Output se emiten en el parámetro Output tras el cambio de estado
operativo de la CPU:
StartMode

Output

0

Valor del parámetro Input

Ejemplo
Input
Output

CPU
STOP

1

Valor del parámetro SubstituteOutput

t

Input
Output

CPU
STOP

2

CPU
RUN

Permanece inalterado

SubstituteOutput

CPU
RUN

t

CPU
RUN

t

CPU
RUN

t

Input

El parámetro Output es remanente.
Ajuste estándar
Se utiliza cuando el StartMode no está
en el rango 0...3.
3

Output
CPU
STOP

0.0

Input

Output
CPU
STOP

Programación del PLC
Manual de programación y manejo, 11/2019

3899

Instrucciones
4.1 Instrucciones
Lo siguiente se aplica además a todos los valores de la variable StartMode:
● El valor de inicialización se limita al rango de valores del tipo de datos REAL. Solo entonces
se emite el valor de inicialización en el parámetro Output.
● Si el valor de inicialización no es un valor REAL válido, se emite el valor de salida sustitutivo
en el parámetro Output. El valor de salida sustitutivo se configura con la variable
ErrorMode. El valor de salida sustitutivo se limita al rango de valores del tipo de datos REAL
antes de emitirse en el parámetro Output. Si el valor de salida sustitutivo tampoco es un
valor REAL válido, se emite 0.0 en el parámetro Output. En las siguientes llamadas, la
instrucción calcula el valor de salida a partir de este valor de salida sustitutivo.
● La variable StartMode solo es efectiva si durante la primera llamada de la instrucción está
ajustado el parámetro Reset = FALSE y al mismo tiempo no hay ningún error con el
mensaje de error ErrorBits ≥ 16#0002_0000. Si el parámetro Reset = TRUE está activado,
el valor del parámetro SubstituteOutput se emite en el parámetro Output. Si está presente
un error con el mensaje de error ErrorBits ≥ 16#0002_0000, en el parámetro Output se
emite el valor de salida sustitutivo configurado en la variable ErrorMode.

Respuesta en caso de error
La instrucción Filter_DT1 detecta diversos errores que pueden producirse durante el cálculo
del valor de salida. El resultado del cálculo puede emitirse en la salida aunque haya un error
presente. Si, debido a un error, no es posible calcular correctamente el valor de salida, en la
salida se emitirá un valor de salida sustitutivo.
Si se produce un error que no permite calcular correctamente el valor de salida, se deberá
definir el valor de salida sustitutivo en la variable ErrorMode.
La tabla siguiente muestra la dependencia entre el valor de la variable ErrorMode y el valor de
salida sustitutivo que Filter_DT1 emite en el parámetro Output:
ErrorMode

Output

0

Valor del parámetro Input

1

Valor del parámetro SubstituteOutput

2

Último valor de salida de filtro válido
0.0 si no hay ningún valor de salida de filtro válido
Ajuste estándar
Se utiliza cuando ErrorMode no está en el rango 0...3

3

0.0

Lo siguiente se aplica además a todos los valores de la variable ErrorMode:
● Si el valor de salida sustitutivo no es un valor REAL válido, se emite 0.0 como valor de salida.
● El valor de salida sustitutivo se limita al rango de valores del tipo de datos REAL. Solo
entonces se emite el valor de salida sustitutivo en el parámetro Output.
● La variable ErrorMode solo es efectiva si está ajustado el parámetro Reset = FALSE. Si el
parámetro Reset = TRUE está activado, el valor del parámetro SubstituteOutput se emite
en el parámetro Output.
El parámetro Error indica si hay algún un error presente en ese momento. Cuando el error
desaparece, Error se ajusta a FALSE. El parámetro ErrorBits indica qué errores se han

3900

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
producido. ErrorBits es remanente y solo se borra con un flanco ascendente en el parámetro
Reset o ErrorAck.

Funcionamiento de Filter_DT1
Respuesta de Reset
Filter_DT1 se comporta de la siguiente manera en función del parámetro Reset:
● Si el parámetro Reset =TRUE está activado, el valor del parámetro SubstituteOutput se
emite en el parámetro Output.
● Si el parámetro Reset = FALSE está activado, el valor que se emite en el parámetro Output
se calcula por medio del algoritmo del filtro.
● Si se cambia el parámetro Reset de FALSE a TRUE, el valor del parámetro Output cambia
directamente al valor del parámetro SubstituteOutput. Este cambio puede ser brusco.
Además se restablece el parámetro ErrorBits.
● Si se cambia el parámetro Reset de TRUE a FALSE, se ajusta el algoritmo del filtro de
manera que el cambio se produce sin saltos.

Respuesta de habilitación EN/ENO
Si se cumple una de las siguientes condiciones, la salida de habilitación ENO se ajusta a
FALSE:
● La entrada de habilitación EN está ajustada a TRUE y el parámetro Output se ha definido
con un valor de salida sustitutivo en caso de los mensajes de error ErrorBits ≥
16#0001_0000.
● La entrada de habilitación EN está ajustada a FALSE.
De lo contrario, la salida de habilitación ENO se ajusta a TRUE.

Medición automática del tiempo de ciclo
Para calcular el valor de salida, Filter_DT1 necesita el tiempo que ha transcurrido desde la
última llamada de Filter_DT1.
En el ajuste predeterminado, el tiempo de ciclo se mide automáticamente y se emite en la
variable CycleTime.Value a partir de la segunda llamada. Filter_DT1 mide el tiempo de ciclo en
cada llamada de la instrucción, con lo que puede utilizarse en ciclos de llamada no
equidistantes, p. ej., en el OB1.
Tenga en cuenta que las llamadas condicionadas de la instrucción, los puntos de parada
activos o la carga de instantáneas como valores actuales con medición automática del tiempo
de ciclo hacen aumentar el valor del tiempo de ciclo. Un tiempo de ciclo excesivo se detecta
como error con el mensaje de error ErrorBits = 16#0008_0000.
Si la medición del tiempo de ciclo no da ningún resultado válido, Filter_DT1 calcula el valor de
salida actual con el último tiempo de ciclo válido. Además, Filter_DT1 emite un mensaje de
error en el parámetro ErrorBits.

Programación del PLC
Manual de programación y manejo, 11/2019

3901

Instrucciones
4.1 Instrucciones
Si se desactiva la medición automática del tiempo de ciclo ajustando la variable
CycleTime.EnableMeasurement = FALSE, hay que especificar manualmente el tiempo de
ciclo en la variable CycleTime.Value. Filter_DT1 comprueba la validez de la variable
CycleTime.Value en cada llamada.

Medición automática del tiempo de ciclo con puntos de parada
Si hay puntos de parada activos entre dos llamadas de Filter_DT1, la medición automática del
tiempo de ciclo da como resultado el tiempo transcurrido realmente entre dos llamadas. Si hay
un punto de parada activo, la CPU está en estado operativo PARADA.
Nota
Los puntos de parada activos hacen aumentar la distancia temporal entre dos llamadas de
Filter_DT1.
Cuanto mayor sea la distancia temporal entre dos llamadas tanto mayor será el cambio del
valor de salida en el parámetro Output.
Por lo demás, es posible que, debido a la mayor distancia temporal, se vulneren las
condiciones Lag ≥ CycleTime.Value/2 o Td ≥ CycleTime.Value. Esto da lugar a la detección de
un error con el mensaje de error ErrorBits = 16#0008_0000 .
Si no se requiere el cálculo del valor de salida basado en el tiempo real con puntos de parada
activos, ejecute los pasos siguientes:
● Desactive la medición automática del tiempo de ciclo ajustando la variable
CycleTime.EnableMeasurement = FALSE.
● Introduzca el tiempo de ciclo manualmente en la variable CycleTime.Value.

Parámetros de entrada Filter_DT1
Parámetro

Tipo de da‐
tos

Ajuste pre‐
determinado

Descripción

Input

REAL

0.0

Valor de entrada

Substitu‐
teOutput

REAL

0.0

SubstituteOutput se utiliza como valor de salida sustitutivo si:
● Reset = TRUE
o bien
● si no es posible calcular correctamente el valor de salida debido a un error
con mensaje de error ErrorBits ≥ 16#0001_0000 y ErrorMode está ajustado
al valor 1.

3902

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Tipo de da‐
tos

Ajuste pre‐
determinado

Descripción

ErrorAck

BOOL

FALSE

Borra los mensajes de error
● Flanco FALSE -> TRUE
ErrorBits se desactiva.

Reset

BOOL

FALSE

Reinicia la instrucción por medio de:
● Flanco FALSE -> TRUE
ErrorBits se desactiva.
● Mientras Reset esté ajustado a TRUE, el valor de salida sustitutivo
SubstituteOutput se emitirá en la salida.
● Mientras Reset esté ajustado a FALSE, se efectuará el cálculo del valor de
salida.

Parámetros de salida Filter_DT1
Parámetro

Tipo de da‐
tos

Ajuste pre‐
determinado

Descripción

Output

REAL

0.0

Valor de salida
El valor de salida es remanente.

ErrorBits

DWORD

DW#16#0

El parámetro ErrorBits (Página 3904) indica qué mensajes de error existen.
ErrorBits es remanente y se restablece con un flanco ascendente en Reset o
ErrorAck.

Error

BOOL

FALSE

Si Error está ajustado a TRUE, actualmente hay al menos un error presente.

Variables estáticas Filter_DT1
Variable

Tipo de datos

Ajuste predeter‐
minado

Descripción

Td

REAL

25.0

Tiempo derivativo en segundos
Rango admisible: Td ≥ CycleTime.Value

Lag

REAL

5.0

Constante de tiempo de retardo en segundos
Rango admisible: Lag ≥ CycleTime.Value/2

ErrorMode

INT

2

Selección del valor de salida sustitutivo en caso de error
● 0 = Input
● 1 = SubstituteOutput
● 2 = último valor de salida de filtro válido
● 3 = 0.0
Rango admisible: de 0 a 3

Programación del PLC
Manual de programación y manejo, 11/2019

3903

Instrucciones
4.1 Instrucciones
Variable

Tipo de datos

Ajuste predeter‐
minado

Descripción

StartMode

INT

2

Selección del valor de salida para la primera llamada de la instruc‐
ción
● 0 = Input
● 1 = SubstituteOutput
● 2 = último valor de salida
● 3 = 0.0
Rango admisible: de 0 a 3

CycleTime

AuxFct_CycleTi‐ me

Datos del tiempo de ciclo

CycleTime.Va‐
lue

REAL

0.1

Tiempo de ciclo en segundos (intervalo entre 2 llamadas)

TRUE

Medición automática del tiempo de ciclo

Rango admisible: CycleTime.Value > 0.0

CycleTime.Ena‐ BOOL
bleMeasurement

● FALSE = desactivada
● TRUE = activada

Parámetro ErrorBits
Si hay varios errores presentes a la vez, los valores de ErrorBits se muestran sumados
binariamente. Por ejemplo, si se muestra ErrorBits = 16#0000_0003, significa que los errores
16#0000_0001 y 16#0000_0002 están pendientes simultáneamente.
Con Filter_DT1, los errores que se emiten en el parámetro ErrorBits se dividen en dos
categorías:
● Errores con mensajes de error ErrorBits < 16#0001_0000
● Errores con mensajes de error ErrorBits ≥ 16#0001_0000

Errores con mensajes de error ErrorBits < 16#0001_0000
Si están presentes uno o varios errores con mensajes de error ErrorBits < 16#0001_0000,
Filter_DT1 reacciona de la siguiente manera:
●

Pese a este error, el valor de salida se determina del modo siguiente:
– Si Reset = FALSE, se calcula el valor de salida por medio del algoritmo del filtro.
– Si Reset = TRUE, se emite la SubstituteOutput.

●

Se activa el parámetro de salida Error.

● La salida de habilitación ENO no cambia.

3904

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
El parámetro de salida Error se borra en cuanto no hay errores.
ErrorBits

Descripción

(DW#16#...)
0000_0000

No hay ningún error presente.

0000_0001

Causa del error y reacción a errores:
El parámetro Output se ha limitado a -3.402823e+38 o a +3.402823e+38.
Solución:
Si el valor determinado por la función de filtro se emite en la salida (Reset = FALSE y ErrorBits <
16#0001_0000), compruebe las siguientes variables utilizadas en el cálculo del filtro:
● Input
● Td
● Lag
● CycleTime.Value
Si ErrorBits ≥ 16#0001_0000 y Reset = FALSE, el valor de salida sustitutivo se limitará al emitirse. En ese
caso, compruebe los siguientes parámetros dependiendo del valor ajustado en la variable ErrorMode:
● Input
● SubstituteOutput
Si Reset = TRUE, compruebe el parámetro SubstituteOutput.

0000_0002

Causa del error:
La medición del tiempo de ciclo da como resultado un valor no válido mientras se ejecuta el cálculo del
valor de salida (Reset = FALSE).
Reacción a errores:
Si ya se ha medido un valor válido del tiempo de ciclo, Filter_DT1 calcula el valor de salida a partir de este
último valor de la variable CycleTime.Value.
Si previamente no se ha medido ningún valor válido del tiempo de ciclo, Filter_DT1 sigue emitiendo en el
parámetro Output el valor de salida que se ha configurado con la variable StartMode.

Errores con mensajes de error ErrorBits ≥ 16#0001_0000
Si están presentes uno o varios errores con mensajes de error ErrorBits ≥ 16#0001_0000,
Filter_DT1 reacciona de la siguiente manera:
● El valor de salida no puede determinarse del modo previsto. En su lugar se emite el valor
de salida sustitutivo.
● Se activa el parámetro de salida Error.
● La salida de habilitación ENO se pone a FALSE.
En cuanto deja de haber errores con mensajes de error ErrorBits ≥ 16#0001_0000, Filter_DT1
reacciona de la siguiente manera:
● El valor de salida se determina del modo siguiente:
– Si Reset = FALSE, se calcula el valor de salida por medio del algoritmo del filtro.
– Si Reset = TRUE, se emite la SubstituteOutput.
● La salida de habilitación ENO se pone a TRUE.

Programación del PLC
Manual de programación y manejo, 11/2019

3905

Instrucciones
4.1 Instrucciones
El parámetro de salida Error se borra en cuanto no hay errores.
ErrorBits

Descripción

(DW#16#...)
0001_0000

Causa del error:
El parámetro SubstituteOutput u otra variable que se utiliza como valor de salida no tiene ningún valor
REAL válido.
Reacción a errores:
La salida se ajusta a 0.0.
Solución:
Asegúrese de que la variable que se utiliza como valor de salida sea un valor REAL válido (≠NaN, p. ej.,
16#7FFF_FFFF). La variable que se utiliza como valor de salida depende de Reset y ErrorMode:

0002_0000

Reset

ErrorMode

Valor de salida

FALSE

0

Input

FALSE

1

SubstituteOutput

TRUE

-

SubstituteOutput

Causa del error:
El parámetro Input no tiene ningún valor REAL válido mientras se ejecuta el cálculo del valor de salida
(Reset = FALSE).
Reacción a errores:
En el parámetro Output se emite el valor de salida sustitutivo configurado en la variable ErrorMode.
Si ErrorMode = 0, se emite 0.0 como valor de salida.
Solución:
Asegúrese de que el parámetro Input sea un valor REAL válido (≠NaN, p. ej., 16#7FFF_FFFF).

0004_0000

Causa del error:
El cálculo del valor de salida da como resultado un valor REAL no válido para el parámetro Output.
Reacción a errores:
En el parámetro Output se emite el valor de salida sustitutivo configurado en la variable ErrorMode.
Solución:
Compruebe todas las variables implicadas en el cálculo del valor de salida:
● Input
● Td
● Lag
● CycleTime.Value
Estas variables tienen valores válidos. El cálculo del valor de salida falla en esta combinación de variables.

3906

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
ErrorBits

Descripción

(DW#16#...)
0008_0000

Causa del error:
La variable Td o Lag tiene un valor no válido mientras se ejecuta el cálculo del valor de salida (Reset =
FALSE).
Reacción a errores:
En el parámetro Output se emite el valor de salida sustitutivo configurado en la variable ErrorMode.
Solución:
Asegúrese de que se cumplen las siguientes condiciones para los valores de las variables Td y Lag:
● CycleTime.Value ≤ Td ≤ 3.402823e+38
● CycleTime.Value/2 ≤ Lag ≤ 3.402823e+38
● Los valores son valores REAL válidos (≠ NaN, p. ej., 16#7FFF_FFFF).
Información adicional:
Tenga en cuenta que las condiciones CycleTime.Value ≤ Td y CycleTime.Value/2 ≤ Lag pueden vulne‐
rarse en los siguientes supuestos:
● El intervalo entre dos llamadas de Filter_DT1 es mayor que 2 * Lag o Td, p. ej., debido a llamadas
condicionadas durante la ejecución del programa o a puntos de parada activos.
● Una instantánea del DB de instancia de Filter_DT1 se carga como valores actuales en la CPU y desde
la creación de la instantánea ha transcurrido un plazo mayor que 2 * Lag o Td.
En estos supuestos, si está activada la medición automática del tiempo de ciclo, se detecta un error con
el mensaje de error ErrorBits = 16#0008_0000.

Programación del PLC
Manual de programación y manejo, 11/2019

3907

Instrucciones
4.1 Instrucciones
ErrorBits

Descripción

(DW#16#...)
0020_0000

Causa del error:
La variable (configurada con StartMode) para la inicialización del parámetro Output en la primera llamada
de la instrucción no tiene ningún valor REAL válido.
Reacción a errores:
En la primera llamada de la instrucción se emite en el parámetro Output el valor de salida sustitutivo
configurado en la variable ErrorMode. En las siguientes llamadas, Filter_DT1 calcula el valor de salida a
partir de este valor de salida sustitutivo.
Solución:
Asegúrese de que la variable para la inicialización del parámetro Output sea un valor REAL válido (≠ NaN,
p. ej., 16#7FFF_FFFF). Si está ajustado Reset = FALSE, la inicialización será efectiva la primera vez que
se llame la instrucción después de cambiar el estado operativo de la CPU de STOP a RUN. La variable
que se utiliza para la inicialización del parámetro Output depende de StartMode:
● StartMode = 1: SubstituteOutput
● StartMode = 2: Output

0040_0000

Causa del error:
La variable CycleTime.Value no tiene ningún valor válido mientras se ejecuta el cálculo del valor de salida
(Reset = FALSE).
Reacción a errores:
En el parámetro Output se emite el valor de salida sustitutivo configurado en la variable ErrorMode.
Solución:
Asegúrese de que se cumplen las siguientes condiciones:
● 0.0 < CycleTime.Value ≤ 3.402823e+38
● CycleTime.Value es un valor REAL válido (≠ NaN p. ej., 16#7FFF_FFFF)
Información adicional:
Para un cálculo automático del valor de la variableCycleTime.Value, ajuste la variable CycleTime.Ena‐
bleMeasurement a TRUE.

4.1.5.5

Time-based IO

Time-based IO
TIO_SYNC: sincronizar los módulos TIO
Descripción
TIO_SYNC es la base de todas las demás instrucciones de TIO. Con TIO_SYNC se logra una
sincronización de los módulos TIO en una base de tiempo común TIO_Time.
Con TIO_SYNC se pueden sincronizar 8 módulos TIO como máximo. Todos los módulos TIO
deben asignarse a la misma memoria imagen parcial de proceso (PIP). Si selecciona "0" para
el parámetro de entrada PIP_Mode, parametrice el número de la memoria imagen parcial de
proceso en el parámetro de entrada PIP_PART.

3908

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Encontrará más información para la configuración de Time-based IO en el capítulo Configurar
y parametrizar.

Comportamiento en arranque
Durante el arranque de la CPU, la instrucción TIO_SYNC adopta y comprueba una vez los
parámetros de entrada e inicializa TIO_Time.
Existen varias posibilidades para manejar los parámetros opcionales SendClock,
AppCycleFactor y ToTimes:
● Hacer que SendClock, AppCycleFactor y ToTimes se lean automáticamente en cada
arranque. Esto provoca un retardo en el arranque, pero los valores siempre serán
coherentes.
● Hacer que SendClock, AppCycleFactor y ToTimes se lean automáticamente en cada
arranque y aplicar los valores leídos como valores de ajuste durante la puesta en marcha.
Esto provoca que los arranques posteriores sean rápidos, pero genera incoherencias
después de realizar cambios en la configuración hardware (será necesario repetir la puesta
en marcha).
● Definir SendClock, AppCycleFactor y ToTimes manualmente antes de la primera llamada
de la instrucción, p. ej., en el OB100:

Esto provoca un arranque rápido, pero deberá actualizar manualmente los valores después
de realizar cambios en la configuración hardware.
Encontrará información sobre los parámetros en la tabla inferior.
Tras un arranque sin errores la instrucción cambia al modo normal. En caso de fallo, la
instrucción no cambia al modo normal y genera un mensaje de error.

Funcionamiento
En el modo normal la instrucción asegura la sincronización de todos los módulos TIO
configurados en la entrada HWID.
En la salida TIO_SYNC_Data se proporciona el TIO_Time calculado para las instrucciones de
los módulos TIO.

Comportamiento en caso de error
En la salida se muestra Error si la instrucción se ha procesado sin errores. En caso de error se
muestra la causa en la salida Status.

Programación del PLC
Manual de programación y manejo, 11/2019

3909

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción TIO_SYNC.
Parámetro

Declaración
en la versión
de la librería

Tipo de
datos

<
V2.0

S7-1500

≥
V2.0

Ajuste
predeter‐
minado

Descripción

HWID_1 ...
HWID_8*

Input

HW_IO

65535

Identificador de hardware para el módulo TIO desde la configu‐
ración hardware

PIP_Mode*

Input

PIP

0

Modo para la actualización de datos**:
● 0: Modelo AEV con actualización interna de la memoria
imagen de proceso mediante SYNC_PO y SYNC_PI.
● 1: Modelo AEV sin actualización interna de la memoria
imagen de proceso
● 2: Modelo EVA sin actualización interna de la memoria
imagen de proceso

PIP_PART*

Input

USInt

1

Solo relevante si PIP_Mode = 0
Número de la memoria imagen parcial de proceso que se debe
actualizar en modo isócrono.

TIO_SYNC_
Data

Output

"TIO_
SYNC_
Data"

Hora del sistema calculada para las instrucciones de TIO de los
módulos TIO y datos internos que se utilizan para la sincroniza‐
ción. Ver UDT TIO_SYNC_Data (Página 3939).

Status

Output

DWord

16#0

Estado de la instrucción: ver descripción del parámetro Status

Error

Output

Bool

False

Error = True: se ha producido un error. Ver información detallada
en el parámetro Status.
Error se restablecerá en cuanto se haya solucionado el error.

OperatingState

Static Int

0

Estado operativo interno de la instrucción:
● 0: se comprueban los parámetros de entrada
● 1: se leen los parámetros opcionales
● 2: se comprueban los parámetros leídos
● 3: modo normal (todos los parámetros son correctos, módulos
TIO sincronizados)
En cuanto se alcanza el estado operativo 3, pueden leerse eti‐
quetas de fecha/hora y emitirse flancos. Si se desea repetir la
sincronización de los módulos TIO y la lectura de los parámetros
opcionales, se puede ajustar el estado operativo a 0.

SendClock

Input

Static LTime

LT#0ns

Tiempo de ciclo de emisión del dominio Sync.
Adopte el tiempo de ciclo de emisión desde la configuración de
PROFINET.

3910

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración
en la versión
de la librería

Tipo de
datos

<
V2.0

S7-1500

AppCycleFac‐
tor

≥
V2.0

Static UInt

Ajuste
predeter‐
minado

Descripción

0

Factor de ciclo de aplicación:
● Rango de valores: 0 <= AppCycleFactor <= 85
● 0: SendClock, AppCycleFactor y ToTimes se leen
automáticamente
El ciclo de aplicación TAPP se calcula del modo siguiente:
TAPP = AppCycleFactor × SendClock

ToTimes

Static Array LTi‐
me [1...8]

LT#0ns

To para cada módulo TIO: Tiempo para emitir los datos de salida
isócronos.

* Comprobado una vez durante el arranque de la CPU
** El modelo EVA (PIP_Mode = 2) admite tiempos de reacción mínimos, pero exige unos requisitos de potencia del sistema muy
altos. El procesamiento de todas las instrucciones de TIO y de otras partes del programa debe finalizarse dentro de un ciclo
de emisión.
Elija el modelo AEV (PIP_Mode = 0) solo si se emplea únicamente una instancia de la instrucción TIO_SYNC por cada memoria
imagen parcial de proceso para que las instrucciones SYNC_PI y SYNC_PO no se llamen varias veces en el OB isócrono.
Tampoco llame SYNC_PI ni SYNC_PO en el modelo AEV en las siguientes partes del programa.

Nota
Las instrucciones de TIO no deben llamarse en un OB de tipo "MC-PreServo".
Si utiliza un OB de tipo "MC-PostServo", podrá decidir por separado para cada módulo TIO si
se utiliza o bien con objetos tecnológicos de Motion Control o bien con instrucciones de TIO.
Si llama TIO_SYNC en un OB de tipo "MC-PostServo", deberá utilizar PIP_Mode = 2 y,
además, no podrá utilizar reducciones de ciclo.

Parámetro Status
En la salida Status se emiten códigos de error o informaciones de estado como palabra doble.

Programación del PLC
Manual de programación y manejo, 11/2019

3911

Instrucciones
4.1 Instrucciones
La palabra doble tiene la siguiente segmentación:
Código de
error

Significado

(DW#16#...)
z0yywwww

Error de una función de sistema:
● Durante el arranque (z = 1)
● En el modo normal (z = 0)
En yy se codifican funciones subordinadas utilizadas del sistema: ver tabla con códigos de error.
wwww indica el RET_VAL de la función de sistema. Encontrará información de error en la ayuda de la función
de sistema.

z0yy0000

Un error que no proviene de una función de sistema. Recibe un número de error correlativo yy.
El error puede aparecer:
● Durante el arranque (z = 1)
● En el modo normal (z = 0)

Tabla con códigos de error
Código de
error

Significado

Solución

00000000

No hay error.

—

1001xxxx

Se ha producido un error en la función de sistema RD_SIN‐ ● Lea la descripción de RD_SINFO en el
FO. La palabra Low xxxx indica la información de error del
sistema de información de STEP 7 (TIA
valor de retorno RET_VAL de RD_SINFO.
Portal).

(DW#16#...)

● Asegúrese de que se llame TIO_SYNC en un
OB del tipo "Synchronous Cycle" o "MCPostServo".
10020000

El tiempo de ciclo leído del OB isócrono no es válido
(LT#0ms o negativo).
La instrucción solo se puede utilizar correctamente en un
OB isócrono.

● Corrija el valor del tiempo de ciclo.
● Asegúrese de que se llame TIO_SYNC en un
OB del tipo "Synchronous Cycle" o "MCPostServo".

10030000

La instrucción TIO_SYNC no se llama en un OB isócrono.
La instrucción solo se puede utilizar correctamente en un
OB isócrono.

Asegúrese de que se llame TIO_SYNC en un OB
del tipo "Synchronous Cycle" o "MC-PostServo".

10040000

El valor parametrizado en el parámetro de entrada
PIP_Mode está fuera del rango válido de 0 ... 2.

Corrija el valor en el parámetro de entrada
PIP_Mode.

10050000

El ciclo de emisión parametrizado está fuera del rango
permitido de 0 < SendClock <= 4 ms.

Corrija el valor del tiempo de ciclo de emisión.

0006xxxx*

Se ha producido un error en la ejecución de la función de Lea la descripción de SYNC_PI en el sistema de
sistema SYNC_PI. La palabra Low xxxx indica la informa‐ información de STEP 7 (TIA Portal).
ción de error del valor de retorno RET_VAL de SYNC_PI.

0007xxxx*

Se ha producido un error en la ejecución de la función de Lea la descripción de SYNC_PO en el sistema de
sistema SYNC_PO. La palabra Low xxxx indica la informa‐ información de STEP 7 (TIA Portal).
ción de error del valor de retorno RET_VAL de SYNC_PO.

3912

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Código de
error

Significado

Solución

10080000

Al menos uno de los identificadores de hardware no per‐
tenece a un módulo TIO.

Compruebe los valores de los parámetros de en‐
trada HWID_1 a HWID_8. Indique el identificador
de hardware del módulo TIO que figura en las
propiedades del módulo, en la configuración
hardware.

10090000

Compruebe el valor de cada parámetro de entra‐
da. Indique en cada caso el identificador de hard‐
Causa posible:
ware
del módulo TIO que figura en las propieda‐
No hay ningún módulo con este identificador de hardware.
des del módulo, en la configuración hardware.
HWID_2 no es un identificador de hardware válido.
Para el direccionamiento simbólico está disponi‐
Causa posible:
ble una constante de sistema interna del tipo de
No hay ningún módulo con este identificador de hardware. datos Hw_SubModule.
HWID_3 no es un identificador de hardware válido.

(DW#16#...)

100A0000

100B0000

HWID_1 no es un identificador de hardware válido.

Causa posible:
No hay ningún módulo con este identificador de hardware.
100C0000

HWID_4 no es un identificador de hardware válido.
Causa posible:
No hay ningún módulo con este identificador de hardware.

100D0000

HWID_5 no es un identificador de hardware válido.
Causa posible:
No hay ningún módulo con este identificador de hardware.

100E0000

HWID_6 no es un identificador de hardware válido.
Causa posible:
No hay ningún módulo con este identificador de hardware.

100F0000

HWID_7 no es un identificador de hardware válido.
Causa posible:
No hay ningún módulo con este identificador de hardware.

10100000

HWID_8 no es un identificador de hardware válido.
Causa posible:
No hay ningún módulo con este identificador de hardware.

10110000

El valor en el parámetro de entrada PIP_PART está fuera
del rango válido de 1 ... 31.

Corrija el valor en el parámetro de entrada
PIP_PART.

10120000

El parámetro de entrada PIP_Mode tiene parametrizado el Corrija el valor en el parámetro de entrada
PIP_Mode. PIP_Mode con el valor "2" no permite
valor "2", mientras que el parámetro estático AppCycle‐
Factor tiene parametrizado el valor >1 (reducción de ciclo). reducciones de ciclo.

x0130000

MC-Servo (OB91) no es isócrono con el tiempo de ciclo de
bus.

Corrija el tiempo de ciclo de MC-Servo al valor del
tiempo de ciclo de bus.
Nota:
Llamar las instrucciones de TIO en un OB de tipo
"MC-PostServo" con "MC-Servo" con reducción
de ciclo puede provocar un cálculo incorrecto de
la etiqueta de fecha/hora.

x014xxxx

Se ha producido un error al leer el registro. La palabra Low
xxxx indica la información de error de la instrucción
RDREC.

Lea la descripción de la instrucción RDREC en el
sistema de información de STEP 7 (TIA Portal).

x0FF0000

Error interno general.

—

* Solo es posible si se ha elegido "0" para el parámetro de entrada PIP_Mode.

Programación del PLC
Manual de programación y manejo, 11/2019

3913

Instrucciones
4.1 Instrucciones

TIO_IOLink_IN: Leer señales de entrada de proceso con etiqueta de fecha/hora
Descripción
Con la instrucción TIO_IOLink_IN puede utilizar el Time-based IO. TIO_IOLink_IN captura un
evento en el IO-Link Device y suministra el valor de proceso, incluida la correspondiente
etiqueta de fecha/hora.
El IO-Link Device tiene que estar provisto de la función para la etiqueta de fecha/hora y el Port
debe estar en el modo "IO-Link, Time based IN".

Comportamiento en arranque
Durante el arranque de la CPU, la instrucción TIO_IOLink_IN adopta una vez el parámetro de
entrada y comprueba lo siguiente:
● Comprobar HWID
● Comprobar si el número de Port está dentro del rango válido (1 a 4)
● Comprobar TIO_SYNC_Data.Error: ¿existe ya un error en TIO_SYNC?
● Comprobar que To tiene un valor positivo
● Comprobar el tipo de ajuste de IO-Link
● Comprobar la configuración del modo Port para IO-Link Time based IN
● Comprobar si el OB es del tipo "Synchronous Cycle"
● Comprobar PortQualifier
Tras un arranque sin errores la instrucción cambia al modo normal. En caso de fallo, la
instrucción no cambia al modo normal y genera un mensaje de error.

Funcionamiento
En el modo normal la instrucción captura los datos de proceso (SA_Data) de un IO-Link Device
y la correspondiente etiqueta de fecha/hora (hora = TIO_Time) del último cambio válido. A
cada cambio válido de los SA_Data, en un puerto en condiciones de funcionamiento sin
errores, lo acompaña una etiqueta de fecha/hora válida.
La entrada TIO_SYNC_Data se interconecta con la salida de igual nombre de la instrucción
TIO_SYNC. De ese modo se asegura una base de tiempo común.

Comportamiento en caso de error
En la salida se muestra Error si la instrucción se ha procesado sin errores. En caso de fallo, en
la salida Status se muestran las causas de error.

3914

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetro
La tabla siguiente muestra los parámetros de la instrucción TIO_IOLink_IN.
Parámetro

Declaración Tipo de da‐
tos

Ajuste pre‐
determinado

Descripción

S7-1500
HWID*

Input

HW_IO

0

Identificador de hardware para el módulo TIO de la configuración
hardware

Port*

Input

USInt

0

Número de Port (1 ... 4) del IO-Link Device conectado

TIO_SYNC_
Data*

Input

"TIO_SYNC
_Data"

Hora del sistema proporcionada por la instrucción TIO_SYNC
para las instrucciones de TIO de los módulos TIO. Ver UDT
TIO_SYNC_Data (Página 3939).
Este parámetro de entrada debe interconectarse con el paráme‐
tro de salida TIO_SYNC_Data de la instrucción TIO_SYNC.

TO*

Input

LTime

LT#0ns

To: Tiempo para emitir los datos de salida isócronos.
Adopte To de la estación ET 200 (características de la interfaz
PROFINET).

SA_Bit0

Output

Bool

False

Indicación de una modificación de los datos de proceso (bit 0 de
SA_Data)
SA_Bit0 está orientado al evento. Mientras no se haya detectado
una etiqueta de fecha y hora no válida (EventCount = 0), los
datos de proceso no serán válidos.

SA_Bit1

Output

Bool

False

Indicación de una modificación de los datos de proceso (bit 1 de
SA_Data)
SA_Bit1 está orientado al evento. Mientras no se haya detectado
una etiqueta de fecha y hora no válida (EventCount = 0), los
datos de proceso no serán válidos.

SA_Data

Output

DWord

16#0

Datos de proceso SA_Data (Sensor Application Data)

TimeStamp

Output

LTime

LT#0ns

Etiqueta de fecha/hora: Hora a la que se ha producido una mo‐
dificación de la señal de proceso SA-Data en el IO-Link Device.

EventCount

Output

UInt

0

Contadores: Se incrementa con cada etiqueta de fecha/hora
nueva y válida. Con cada arranque de la CPU se inicializa el
contador.

Status

Output

DWord

16#0

Estado de la instrucción: ver descripción del parámetro Status

Error

Output

Bool

False

Error = True: se ha producido un error. Ver información detallada
en el parámetro Status.
Error se restablecerá en cuanto se haya solucionado el error.

* Comprobado una vez durante el arranque de la CPU

Parámetro Status
En la salida Status se emiten códigos de error o informaciones de estado como palabra doble.

Programación del PLC
Manual de programación y manejo, 11/2019

3915

Instrucciones
4.1 Instrucciones
La palabra doble tiene la siguiente segmentación:
Código de
error

Significado

(DW#16#...)
z0yywwww

Error de una función de sistema:
● Durante el arranque (z = 1)
● En el modo normal (z = 0)
En yy se codifican funciones subordinadas utilizadas del sistema: ver tabla con códigos de error.
wwww indica el RET_VAL de la función de sistema. Encontrará información de error en la ayuda de la función
de sistema.

z0yy0000

Un error que no proviene de una función de sistema. Recibe un número de error correlativo yy.
El error puede aparecer:
● Durante el arranque (z = 1)
● En el modo normal (z = 0)

Tabla con códigos de error
Código de
error

Significado

Solución

00000000

No hay error.

—

10010000

El número parametrizado en el parámetro de entrada Port
está fuera del rango válido de 1 ... 4.

Corrija el valor en el parámetro de entrada Port.

10020000

La instrucción TIO_IOLink_IN no se llama en un OB isó‐
crono. La instrucción solo se puede utilizar correctamente
en un OB isócrono.

Asegúrese de que se llama TIO_IOLink_IN en un
OB del tipo "Synchronous Cycle".

10030000

Se ha producido un error en la lectura del parámetro de
entrada HWID.

Compruebe el valor en el parámetro de entrada
HWID. Indique el identificador de hardware del
módulo TIO que figura en las propiedades del
módulo, en la configuración hardware. Para el
direccionamiento simbólico está disponible una
constante de sistema interna del tipo de datos
Hw_SubModule.

x0040000

Los datos de TIO_SYNC_Data son incorrectos/no válidos. Compruebe la instrucción TIO_SYNC, así como
la interconexión de su salida TIO_SYNC_Data.

1005xxxx

Se ha producido un error en la ejecución de la función de ● Lea en el sistema de información TIA Portal
sistema RD_SINFO. La palabra Low xxxx indica la infor‐
la descripción de RD_SINFO.
mación de error del valor de retorno RET_VAL de RD_SIN‐
● Asegúrese de que se llama TIO_IOLink_IN
FO.
en un OB del tipo "Synchronous Cycle".

10060000

No se ha encontrado ningún IO-Link Device.

(DW#16#...)

Causa posible:
El módulo configurado mediante el identificador de hard‐
ware no es un IO‑Link Master para Time‑based IO.

3916

● Asegúrese de que el módulo configurado es
un IO‑Link Master para Time‑based IO.
● Compruebe el valor en el parámetro de
entrada HWID. Indique el identificador de
hardware del módulo TIO que figura en las
propiedades del módulo, en la configuración
hardware.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Código de
error

Significado

Solución

(DW#16#...)
10070000

Se ha producido un error interno en el cálculo de direccio‐ Compruebe el valor en el parámetro de entrada
nes.
HWID. Indique el identificador de hardware del
módulo TIO que figura en las propiedades del
módulo, en la configuración hardware. Para el
direccionamiento simbólico está disponible una
constante de sistema interna del tipo de datos
Hw_SubModule.

00080000

El módulo TIO no está sincronizado mediante la instrucción Compruebe la instrucción TIO_SYNC.
TIO_SYNC.

10090000

El tiempo de ciclo leído del OB isócrono está fuera del ran‐ ● Corrija el tiempo de ciclo.
go permitido de 0 < TAPP <= 16 ms y, por tanto, no es válido. ● Asegúrese de que se llama TIO_IOLink_IN
La instrucción solo se puede utilizar correctamente en un
en un OB del tipo "Synchronous Cycle".
OB isócrono.

100A0000

El tiempo parametrizado en el parámetro de entrada TO
está fuera del rango permitido de 0 < To <= 4 ms.

100Bxxxx

Se ha producido un error en la ejecución de la función de Lea en el sistema de información TIA Portal la
sistema RD_ADDR. La palabra Low xxxx indica la informa‐ descripción de RD_ADDR.
ción de error del valor de retorno RET_VAL de RD_ADDR.

000C0000

La etiqueta de fecha/hora convertida no es válida.

000D0000

La información de calidad de PortQualifier del IO-Link indi‐ Compruebe el sensor conectado y su configura‐
ca que los datos de proceso no son válidos.
ción.

100E0000

El modo de puerto configurado del IO-Link es incorrecto.

Compruebe la configuración del sensor conecta‐
do con S7‑PCT.

x0FF0000

Error interno general.

—

Corrija el valor en el parámetro de entrada TO.

Compruebe el sensor conectado y la interacción
entre IO‑Link Master y sensor (p. ej., configura‐
ción).

TIO_DI: leer flancos en entrada digital y correspondiente etiqueta de fecha/hora
Descripción
TIO_DI captura continuamente los flancos en una entrada digital de un módulo TIO y devuelve
las correspondientes etiquetas de fecha/hora.

Comportamiento en arranque
Durante el arranque de la CPU, la instrucción TIO_DI adopta una vez el parámetro de entrada
y comprueba lo siguiente:
● Comprobar HWID
● Comprobar si el número de la entrada digital (Channel) está en el rango permitido (en
función del módulo direccionado y la configuración del canal)
● Comprobar TIO_SYNC_Data.ERROR: ¿existe ya un error en TIO_SYNC?
● Comprobar la plausibilidad de TIO_SYNC_Data.TO_TIMES (de 0 ms a 4 ms)
● Comprobar si el OB es síncrono

Programación del PLC
Manual de programación y manejo, 11/2019

3917

Instrucciones
4.1 Instrucciones
Tras un arranque sin errores la instrucción cambia al modo normal. En caso de fallo, la
instrucción no cambia al modo normal y genera un mensaje de error.

Funcionamiento
En el modo normal, la instrucción captura los flancos en una entrada digital y las
correspondientes etiquetas de fecha/hora del último par de flancos definido válido del ciclo
isócrono anterior. Con el parámetro de entrada EdgeSel se determina para qué flancos se
registrarán etiquetas de fecha/hora.
La entrada TIO_SYNC_Data se interconecta con la salida de igual nombre de la instrucción
TIO_SYNC. De ese modo se asegura una base de tiempo común.
La siguiente figura muestra un ejemplo de comportamiento de LEC al iniciarse una orden de
lectura con EdgeSel = 3 (flanco ascendente y descendente, orden según aparición).
5

) 5

) 5

) 5

) 5

) 5

) 5

) 5

',

/(&

7,2B7LPH

7$33
TAPP

Ciclo de aplicación

Rn

Momentos leídos de un flanco DI ascendente

Fn

Momentos leídos de un flanco DI descendente

El módulo puede contar como máximo siete flancos por ciclo de aplicación. Por lo tanto, LEC
= 7 significa que se han contado siete o más flancos.

Comportamiento en caso de error
En la salida se muestra Error si la instrucción se ha procesado sin errores. En caso de error se
muestra la causa en la salida Status.

3918

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción TIO_DI.
Parámetro

Declaración
en la versión
de la librería

Tipo de
datos

<
V2.0

S7-1500

≥
V2.0

Ajuste
predeter‐
minado

Descripción

HWID*

Input

HW_IO

0

Identificador de hardware para el módulo TIO desde la configu‐
ración hardware

Channel*

Input

UInt

0

Número (0...m) de la entrada digital del módulo TIO conectado

EdgeSel

Input

UInt

3

Determinación de los flancos para los que se registrarán etique‐
tas de fecha/hora:
0D: No permitido
1: Dos flancos ascendentes
2: Dos flancos descendentes
3: Flanco ascendente y descendente (orden según aparición)
4: Primero flanco ascendente, luego descendente
5: Primero flanco descendente, luego ascendente
De 6 a 255: No permitido
EdgeSel puede modificarse en modo normal.

DI

Output

Bool

False

Estado de la entrada digital.
Cuando se ha parametrizado una inversión de la entrada digital,
este parámetro también está invertido.

TimeStampRE

Output

LTime

LT#0ns

Etiqueta de fecha/hora: fecha/hora a la que se detectó un flanco
ascendente.
Excepción:
EdgeSel = 2: fecha/hora a la que se detectó un flanco descen‐
dente (en caso de que hayan aparecido varios flancos descen‐
dentes en el ciclo de aplicación).

TimeStampFE

Output

LTime

LT#0ns

Etiqueta de fecha/hora: fecha/hora a la que se detectó un flanco
descendente.
Excepción:
EdgeSel = 1: fecha/hora a la que se detectó un flanco ascendente
(en caso de que hayan aparecido varios flancos ascendentes en
el ciclo de aplicación).

EventCountRE

Output

UInt

0

Contadores: se incrementa con cada etiqueta de fecha/hora nue‐
va y válida de un flanco ascendente. Con cada arranque de la
CPU se inicializa el contador.

EventCountFE

Output

UInt

0

Contadores: se incrementa con cada etiqueta de fecha/hora nue‐
va y válida de un flanco descendente. Con cada arranque de la
CPU se inicializa el contador.

LEC

Output

UInt

0

Contadores: Número de flancos para los que no se ha podido
almacenar etiqueta de fecha/hora. El módulo puede contar como
máximo siete flancos por ciclo de aplicación. Con cada nuevo
ciclo de aplicación se inicializa el contador.

Status

Output

DWord

16#0

Estado de la instrucción: ver descripción del parámetro Status

Programación del PLC
Manual de programación y manejo, 11/2019

3919

Instrucciones
4.1 Instrucciones
Parámetro

Error

Declaración
en la versión
de la librería

Tipo de
datos

<
V2.0

S7-1500

≥
V2.0

Output

Bool

Ajuste
predeter‐
minado

Descripción

False

Error = True: se ha producido un error. Ver información detallada
en el parámetro Status.
Error se restablecerá en cuanto se haya solucionado el error.

TIO_SYNC_Da Input
ta*

InOut

"TIO_
SYNC_
Data"

Hora del sistema proporcionada por la instrucción TIO_SYNC pa‐
ra las instrucciones de TIO de los módulos TIO. Ver UDT
TIO_SYNC_Data (Página 3939).
Este parámetro de entrada debe interconectarse con el paráme‐
tro de salida TIO_SYNC_Data de la instrucción TIO_SYNC.

* Comprobado una vez durante el arranque de la CPU

Parámetro Status
En la salida Status se emiten códigos de error o informaciones de estado como palabra doble.
La palabra doble tiene la siguiente segmentación:
Código de
error

Significado

(DW#16#...)
z0yywwww

Error de una función de sistema:
● Durante el arranque (z = 1)
● En el modo normal (z = 0)
En yy se codifican funciones subordinadas utilizadas del sistema: ver tabla con códigos de error.
wwww indica el RET_VAL de la función de sistema. Encontrará información de error en la ayuda de la función
de sistema.

z0yy0000

Un error que no proviene de una función de sistema. Recibe un número de error correlativo yy.
El error puede aparecer:
● Durante el arranque (z = 1)
● En el modo normal (z = 0)

Tabla con códigos de error
Código de
error

Significado

Solución

00000000

No hay error.

—

10010000

El número de la entrada digital parametrizado en el pará‐ Corrija el valor en el parámetro de entrada Chan‐
metro de entrada Channel está fuera del rango válido (en nel.
función del módulo direccionado y de la configuración del
canal).

10020000

La instrucción TIO_DI no se llama en un OB isócrono. La
instrucción solo se puede utilizar correctamente en un OB
isócrono.

(DW#16#...)

3920

Asegúrese de que se llame TIO_DI en un OB del
tipo "Synchronous Cycle" o "MC-PostServo".

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Código de
error

Significado

Solución

10030000

Se ha producido un error en la lectura del parámetro de
entrada HWID.

Compruebe el valor en el parámetro de entrada
HWID. Indique el identificador de hardware del
módulo TIO que figura en las propiedades del
módulo, en la configuración hardware. Para el di‐
reccionamiento simbólico está disponible una
constante de sistema interna del tipo de datos
Hw_SubModule.

x0040000

Los datos de TIO_SYNC_Data son incorrectos/no válidos. Compruebe la instrucción TIO_SYNC, así como
la interconexión de su salida TIO_SYNC_Data.

1005xxxx

Se ha producido un error en la ejecución de la función de ● Lea la descripción de RD_SINFO en el
sistema RD_SINFO. La palabra Low xxxx indica la infor‐
sistema de información de STEP 7 (TIA
mación de error del valor de retorno RET_VAL de RD_SIN‐
Portal).
FO.
● Asegúrese de que se llame TIO_DI en un OB
del tipo "Synchronous Cycle" o "MCPostServo".

(DW#16#...)

10060000

No se ha encontrado ningún módulo TIO.
Causa posible:
El módulo configurado mediante el identificador de hard‐
ware no es un módulo TIO.

● Asegúrese de que el módulo configurado sea
un módulo TIO.
● Compruebe el valor en el parámetro de
entrada HWID. Indique el identificador de
hardware del módulo TIO que figura en las
propiedades del módulo, en la configuración
hardware.

10070000

Se ha producido un error interno en el cálculo de direccio‐ Compruebe el valor en el parámetro de entrada
nes.
HWID. Indique el identificador de hardware del
módulo TIO que figura en las propiedades del
módulo, en la configuración hardware. Para el di‐
reccionamiento simbólico está disponible una
constante de sistema interna del tipo de datos
Hw_SubModule.

00080000

El módulo TIO no está sincronizado mediante la instruc‐
ción TIO_SYNC.

Compruebe la instrucción TIO_SYNC.

El código de error también puede ser un indicio de que:
● ya hay una orden pendiente antes de la primera
ejecución de la instrucción.
● el número parametrizado en el parámetro de entrada
Channel no es una entrada digital.
10090000

El tiempo de ciclo leído del OB isócrono está fuera del
rango permitido de 0 < TAPP <= 16 ms, y por tanto, no es
válido.
La instrucción solo se puede utilizar correctamente en un
OB isócrono.

● Corrija el tiempo de ciclo.
● Asegúrese de que se llame TIO_DI en un OB
del tipo "Synchronous Cycle" o "MCPostServo".

100A0000

El tiempo TO del módulo TIO guardado en TIO_SYNC_Da‐ Compruebe la instrucción TIO_SYNC.
ta está fuera del rango permitido de 0 < To <= 4 ms.

100Bxxxx

Se ha producido un error en la ejecución de la función de
sistema RD_ADDR. La palabra Low xxxx indica la infor‐
mación de error del valor de retorno RET_VAL de
RD_ADDR.

Programación del PLC
Manual de programación y manejo, 11/2019

Lea la descripción de RD_ADDR en el sistema de
información de STEP 7 (TIA Portal).

3921

Instrucciones
4.1 Instrucciones
Código de
error

Significado

Solución

La etiqueta de fecha/hora convertida no es válida.

Compruebe la comunicación con el módulo TIO.

(DW#16#...)
000C0000

Causa posible:
Fallo en la comunicación
000D0000

La Quality Information de la entrada digital indica que en
ella se ha producido un error.

Compruebe la tensión de alimentación L+/1L+/2L
+.

000E0000

El número parametrizado en el parámetro de entrada
Channel no es una entrada digital parametrizada como
Timer-DI.

● Compruebe la configuración del canal (solo
con TM Timer DIDQ 16x24V).
● Compruebe el modo de operación de la
entrada digital.

000F0000

El valor parametrizado en el parámetro de entrada Edge‐ Corrija el valor en el parámetro de entrada Edge‐
Sel está fuera del rango válido de 1 ... 5.
Sel.

10100000

El ciclo de emisión está fuera del rango permitido de 0
< SendClock <= 4 ms y, por tanto, no es válido.

Corrija el tiempo de ciclo de emisión.

El código de error también puede ser un indicio de que:
● los datos en TIO_SYNC_Data no son válidos o no
existen.
● la instrucción TIO_DI no se llama en un OB isócrono.
x0130000

MC-Servo (OB91) no es isócrono con el tiempo de ciclo de
bus.

Corrija el tiempo de ciclo de MC-Servo al valor del
tiempo de ciclo de bus.
Nota:
Llamar las instrucciones de TIO en un OB de tipo
"MC-PostServo" con "MC-Servo" con reducción
de ciclo puede provocar un cálculo incorrecto de
la etiqueta de fecha/hora.

10140000

El valor parametrizado en el parámetro de entrada HWID
no está presente en la estructura del parámetro
TIO_SYNC_Data. Los parámetros HWID y
TIO_SYNC_Data no son coherentes.

Corrija el valor en el parámetro de entrada HWID
o la estructura del parámetro TIO_SYNC_Data.

x0FF0000

Error interno general.

—

TIO_DI_ONCE: Leer una vez los flancos en la entrada digital y la correspondiente etiqueta de fecha/hora
Descripción
TIO_DI_ONCE captura una vez los flancos en una entrada digital de un módulo TIO y devuelve
las correspondientes etiquetas de fecha/hora. También es posible utilizar la instrucción para
controlar un canal Timer-DI configurado como habilitación controlada por flancos para otro
canal.

3922

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Comportamiento en arranque
Durante el arranque de la CPU, la instrucción TIO_DI_ONCE adopta una vez el parámetro de
entrada y comprueba lo siguiente:
● Comprobar HWID
● Comprobar si el número de la entrada digital (Channel) está en el rango permitido (en
función del módulo direccionado y la configuración del canal)
● Comprobar TIO_SYNC_Data.ERROR: ¿existe ya un error en TIO_SYNC?
● Comprobar la plausibilidad de TIO_SYNC_Data.TO_TIMES (de 0 ms a 4 ms)
● Comprobar si el OB es síncrono
Tras un arranque sin errores la instrucción cambia al modo normal. En caso de fallo, la
instrucción no cambia al modo normal y genera un mensaje de error.

Funcionamiento: lectura de etiquetas de fecha/hora
En el modo normal, la instrucción captura los flancos en una entrada digital y las
correspondientes etiquetas de fecha/hora del primer par de flancos definido que sea válido
después de iniciarse una orden de lectura. Con el parámetro de entrada EdgeSel se determina
para qué flancos se registrarán etiquetas de fecha/hora. Para capturar un nuevo par de
flancos, se necesita un nuevo flanco ascendente en el parámetro de entrada REQ de la
instrucción.
La entrada TIO_SYNC_Data se interconecta con la salida de igual nombre de la instrucción
TIO_SYNC. De ese modo se asegura una base de tiempo común.
La siguiente figura muestra un ejemplo de las reacciones de los bits DONE y BUSY al iniciarse
una orden de lectura (EdgeSel = 4).

Programación del PLC
Manual de programación y manejo, 11/2019

3923

Instrucciones
4.1 Instrucciones
5(4

%86<

'21(

',

/(&

5

7,2B7LPH

)

R

Momento leído del flanco DI ascendente

F

Momento leído del flanco DI descendente

Funcionamiento: habilitación controlada por flancos
Es posible utilizar la instrucción para controlar un canal Timer-DI configurado como habilitación
controlada por flancos para otro canal.
Ejemplo:
Para un módulo TIO TM Timer DIDQ 10x24V, se configura lo siguiente en la configuración
hardware para DQ0/DI0:
● Configuración grupo DQ/DI = Timer-DQ con habilitación
● Habilitación HW por DI0 = controlada por flancos
● DQ0 no está invertida
En este caso, utilice la instrucción TIO_DQ para DQ0 y la instrucción TIO_DI_ONCE para DI0.
Se puede controlar la habilitación con los parámetros de entrada REQ y EdgeSel de
TIO_DI_ONCE. En cuanto TIO_DI_ONCE captura una etiqueta de fecha/hora según el valor
de EdgeSel, la habilitación se considera concedida. La habilitación se anula de nuevo al
reiniciarse REQ.
La figura siguiente muestra un ejemplo con EdgeSel = 4 (primero flanco ascendente, luego
descendente). En este caso, el primer flanco ascendente que sea válido en DI0 después de
iniciarse una orden de lectura será quien conceda la habilitación para DQ0.

3924

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
5(4

%86<

'21(

',

/(&
5(4
7,2B'4
'4
7,2B7LPH





1

Inicio de la habilitación con flanco ascendente de la entrada de habilitación

2

Fin de la habilitación con flanco descendente en REQ

Si es necesario, puede utilizar las etiquetas de fecha/hora capturadas por la instrucción para
su aplicación.

Comportamiento en caso de error
En la salida se muestra Error si la instrucción se ha procesado sin errores. En caso de error se
muestra la causa en la salida Status.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción TIO_DI_ONCE.
Parámetro

Declaración

Tipo de da‐
tos

Ajuste pre‐
determinado

Descripción

S7-1500
REQ

Input

Bool

False

Inicia la orden con un flanco ascendente.

HWID*

Input

HW_IO

0

Identificador de hardware para el módulo TIO desde la configu‐
ración hardware

Channel*

Input

UInt

0

Número (0...m) de la entrada digital del módulo TIO conectado

Programación del PLC
Manual de programación y manejo, 11/2019

3925

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de da‐
tos

Ajuste pre‐
determinado

Descripción

3

Determinación de los flancos para los que se registrarán etique‐
tas de fecha/hora:

S7-1500
EdgeSel

Input

UInt

0D: No permitido
1: Dos flancos ascendentes
2: Dos flancos descendentes
3: Flanco ascendente y descendente (orden según aparición)
4: Primero flanco ascendente, luego descendente
5: Primero flanco descendente, luego ascendente
De 6 a 255: No permitido
Si se utiliza la habilitación controlada por flancos, se aplica ade‐
más lo siguiente:
1: Habilitación con el primer flanco DI ascendente
2: Habilitación con el primer flanco DI descendente
3: Habilitación con el primer flanco DI
4: Habilitación con el primer flanco DI ascendente
5: Habilitación con el primer flanco DI descendente
EdgeSel puede modificarse en modo normal.
DONE

Output

Bool

False

DONE = True: la orden ha finalizado sin errores.

BUSY

Output

Bool

False

BUSY = True: La orden aún no ha finalizado.

Error

Output

Bool

False

Error = True: se ha producido un error. Ver información detallada
en el parámetro Status.
Error se restablecerá en cuanto se haya solucionado el error.

Status

Output

DWord

16#0

Estado de la instrucción: ver descripción del parámetro Status

DI

Output

Bool

False

Estado de la entrada digital.
Cuando se ha parametrizado una inversión de la entrada digital,
este parámetro también está invertido.

TimeStam‐
pRE

Output

LTime

LT#0ns

Etiqueta de fecha/hora:
EdgeSel = 1: penúltima fecha/hora leída en la que se detectó un
flanco ascendente (en caso de que hayan aparecido varios flan‐
cos ascendentes).
EdgeSel = 2: última fecha/hora leída en la que se detectó un
flanco descendente (en caso de que hayan aparecido varios
flancos descendentes).
EdgeSel = 3; 4; 5: última fecha/hora leída en la que se detectó un
flanco descendente.

TimeStamp‐
FE

Output

LTime

LT#0ns

Etiqueta de fecha/hora:
EdgeSel = 1: última fecha/hora leída en la que se detectó un
flanco ascendente (en caso de que hayan aparecido varios flan‐
cos ascendentes).
EdgeSel = 2: penúltima fecha/hora leída en la que se detectó un
flanco descendente (en caso de que hayan aparecido varios
flancos descendentes).
EdgeSel = 3; 4; 5: última fecha/hora leída en la que se detectó un
flanco ascendente.

3926

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de da‐
tos

Ajuste pre‐
determinado

Descripción

0

Contadores: Número de flancos para los que no se ha podido
almacenar etiqueta de fecha/hora. El módulo puede contar como
máximo siete flancos mientras está ajustado REQ. Con el flanco
descendente en REQ, se reinicia el contador.

S7-1500
LEC

Output

UInt

TIO_SYNC_
Data*

InOut

"TIO_SYNC_
Data"

Hora del sistema proporcionada por la instrucción TIO_SYNC
para las instrucciones de TIO de los módulos TIO. Ver UDT
TIO_SYNC_Data (Página 3939).
Este parámetro de entrada debe interconectarse con el paráme‐
tro de salida TIO_SYNC_Data de la instrucción TIO_SYNC.

Initialized

Static

Bool

False

La instrucción se ha inicializado y está operativa.

* Comprobado una vez durante el arranque de la CPU

Parámetro Status
En la salida Status se emiten códigos de error o informaciones de estado como palabra doble.
La palabra doble tiene la siguiente segmentación:
Código de
error

Significado

(DW#16#...)
z0yywwww

Error de una función de sistema:
● Durante el arranque (z = 1)
● En el modo normal (z = 0)
En yy se codifican funciones subordinadas utilizadas del sistema: ver tabla con códigos de error.
wwww indica el RET_VAL de la función de sistema. Encontrará información de error en la ayuda de la función
de sistema.

z0yy0000

Un error que no proviene de una función de sistema. Recibe un número de error correlativo yy.
El error puede aparecer:
● Durante el arranque (z = 1)
● En el modo normal (z = 0)

Tabla con códigos de error
Código de
error

Significado

Solución

00000000

No hay error.

—

10010000

El número de la entrada digital parametrizado en el pará‐ Corrija el valor en el parámetro de entrada Chan‐
metro de entrada Channel está fuera del rango válido (en nel.
función del módulo direccionado y de la configuración del
canal).

10020000

La instrucción TIO_DI_ONCE no se llama en un OB isó‐
crono. La instrucción solo se puede utilizar correctamente
en un OB isócrono.

(DW#16#...)

Programación del PLC
Manual de programación y manejo, 11/2019

Asegúrese de que se llame TIO_DI_ONCE en un
OB del tipo "Synchronous Cycle" o "MC-PostSer‐
vo".

3927

Instrucciones
4.1 Instrucciones
Código de
error

Significado

Solución

10030000

Se ha producido un error en la lectura del parámetro de
entrada HWID.

Compruebe el valor en el parámetro de entrada
HWID. Indique el identificador de hardware del
módulo TIO que figura en las propiedades del
módulo, en la configuración hardware. Para el di‐
reccionamiento simbólico está disponible una
constante de sistema interna del tipo de datos
Hw_SubModule.

x0040000

Los datos de TIO_SYNC_Data son incorrectos/no válidos. Compruebe la instrucción TIO_SYNC, así como
la interconexión de su salida TIO_SYNC_Data.

1005xxxx

Se ha producido un error en la ejecución de la función de ● Lea la descripción de RD_SINFO en el
sistema RD_SINFO. La palabra Low xxxx indica la infor‐
sistema de información de STEP 7 (TIA
mación de error del valor de retorno RET_VAL de RD_SIN‐
Portal).
FO.
● Asegúrese de que se llame TIO_DI_ONCE en
un OB del tipo "Synchronous Cycle" o "MCPostServo".

(DW#16#...)

10060000

No se ha encontrado ningún módulo TIO.
Causa posible:
El módulo configurado mediante el identificador de hard‐
ware no es un módulo TIO.

● Asegúrese de que el módulo configurado sea
un módulo TIO.
● Compruebe el valor en el parámetro de
entrada HWID. Indique el identificador de
hardware del módulo TIO que figura en las
propiedades del módulo, en la configuración
hardware.

10070000

Se ha producido un error interno en el cálculo de direccio‐ Compruebe el valor en el parámetro de entrada
nes.
HWID. Indique el identificador de hardware del
módulo TIO que figura en las propiedades del
módulo, en la configuración hardware. Para el di‐
reccionamiento simbólico está disponible una
constante de sistema interna del tipo de datos
Hw_SubModule.

00080000

El módulo TIO no está sincronizado mediante la instruc‐
ción TIO_SYNC.

Compruebe la instrucción TIO_SYNC.

El código de error también puede ser un indicio de que:
● ya hay una orden pendiente antes de la primera
ejecución de la instrucción.
● el número parametrizado en el parámetro de entrada
Channel no es una entrada digital.
10090000

El tiempo de ciclo leído del OB isócrono está fuera del
rango permitido de 0 < TAPP <= 16 ms, y por tanto, no es
válido.
La instrucción solo se puede utilizar correctamente en un
OB isócrono.

● Corrija el tiempo de ciclo.
● Asegúrese de que se llame TIO_DI_ONCE en
un OB del tipo "Synchronous Cycle" o "MCPostServo".

100A0000

El tiempo TO del módulo TIO guardado en TIO_SYNC_Da‐ Compruebe la instrucción TIO_SYNC.
ta está fuera del rango permitido de 0 < To <= 4 ms.

100Bxxxx

Se ha producido un error en la ejecución de la función de
sistema RD_ADDR. La palabra Low xxxx indica la infor‐
mación de error del valor de retorno RET_VAL de
RD_ADDR.

3928

Lea la descripción de RD_ADDR en el sistema de
información de STEP 7 (TIA Portal).

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Código de
error

Significado

Solución

La etiqueta de fecha/hora convertida no es válida.

Compruebe la comunicación con el módulo TIO.

(DW#16#...)
000C0000

Causa posible:
Fallo en la comunicación
000D0000

La Quality Information de la entrada digital indica que en
ella se ha producido un error.

Compruebe la tensión de alimentación L+/1L+/2L
+.

000E0000

El número parametrizado en el parámetro de entrada
Channel no es una entrada digital parametrizada como
Timer-DI.

● Compruebe la configuración del canal (solo
con TM Timer DIDQ 16x24V).
● Compruebe el modo de operación de la
entrada digital.

000F0000

El valor parametrizado en el parámetro de entrada Edge‐ Corrija el valor en el parámetro de entrada Edge‐
Sel está fuera del rango válido de 1 ... 5.
Sel.

10100000

El ciclo de emisión está fuera del rango permitido de 0
< SendClock <= 4 ms y, por tanto, no es válido.

Corrija el tiempo de ciclo de emisión.

El código de error también puede ser un indicio de que:
● los datos en TIO_SYNC_Data no son válidos o no
existen.
● la instrucción TIO_DI no se llama en un OB isócrono.
x0130000

MC-Servo (OB91) no es isócrono con el tiempo de ciclo de
bus.

Corrija el tiempo de ciclo de MC-Servo al valor del
tiempo de ciclo de bus.
Nota:
Llamar las instrucciones de TIO en un OB de tipo
"MC-PostServo" con "MC-Servo" con reducción
de ciclo puede provocar un cálculo incorrecto de
la etiqueta de fecha/hora.

10140000

El valor parametrizado en el parámetro de entrada HWID
no está presente en la estructura del parámetro
TIO_SYNC_Data. Los parámetros HWID y
TIO_SYNC_Data no son coherentes.

Corrija el valor en el parámetro de entrada HWID
o la estructura del parámetro TIO_SYNC_Data.

x0FF0000

Error interno general.

—

TIO_IOLink_OUT: emitir señales de salida de proceso controladas por tiempo
Descripción
Con la instrucción TIO_IOLink_OUT se puede utilizar el Time-based IO. TIO_IOLink_OUT
permite la activación de los datos de salida de un IO-Link Device a una hora predefinida.
El IO-Link Device tiene que estar provisto de la función para la etiqueta de fecha/hora y el Port
debe estar en el modo "IO-Link, Time based OUT".

Programación del PLC
Manual de programación y manejo, 11/2019

3929

Instrucciones
4.1 Instrucciones

Comportamiento en arranque
Durante el arranque de la CPU, la instrucción TIO_IOLink_OUT adopta una vez el parámetro
de entrada y comprueba lo siguiente:
● Comprobar HWID
● Comprobar si el número de Port está dentro del rango válido (1 a 4)
● Comprobar TIO_SYNC_Data.Error: ¿existe ya un error en TIO_SYNC?
● Comprobar si To tiene un valor positivo
● Comprobar el tipo de ajuste de IO-Link
● Comprobar la configuración del modo Port para IO-Link Time based OUT
● Comprobar si el OB es del tipo "Synchronous Cycle"
● Comprobar PortQualifier
Tras un arranque sin errores la instrucción cambia al modo normal. Los parámetros de entrada
REQ, Out_Mode, TimeStamp y AA_Data pueden modificarse durante el modo normal. En caso
de fallo, la instrucción no cambia al modo normal y genera un mensaje de error.

Funcionamiento
En el modo normal la instrucción envía los datos de proceso (AA_Data) a un IO-Link Device.
Los datos de salida AA_Data se activan a una hora definida en el parámetro de entrada
TimeStamp.
La entrada TIO_SYNC_Data se interconecta con la salida de igual nombre de la instrucción
TIO_SYNC. De ese modo se asegura una base de tiempo común.
Una orden de salida se inicia con un flanco ascendente en el parámetro "REQ". Solo se puede
iniciar una nueva orden si no existe ningún error y no hay ninguna orden activada. Al iniciar la
orden de salida se activan los AA_Data (bit 0, 1) a una hora definida por la TimeStamp en el IOLink Device. Al terminar el último ciclo de aplicación antes de llegar a la hora de salida, la orden
finaliza (Done). Status y Error se actualizan permanentemente durante el tiempo de ejecución
de la orden.
Nota
Una vez iniciada la orden a través de un flanco ascendente se puede adaptar el momento de
salida mediante una nueva indicación de TimeStamp sin tener que volver a iniciar la orden.
Condición:
Si la hora de las etiquetas de fecha/hora adaptada es menos de 16 ms anterior al momento de
salida (TimeStamp - TIO_Time < 16), se utiliza la última etiqueta de fecha/hora válida.
Si se especifica el valor 0 como TimeStamp, la salida se describe directamente con los datos
predefinidos en la entrada AA_Data. Con ello podrá implementar en modo manual un control
directo del módulo TIO sin etiqueta de fecha/hora. Puede utilizar el control directo para
interrumpir una orden en curso.

3930

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Comportamiento en caso de error
En la salida se muestra Error si la instrucción se ha procesado sin errores. En caso de fallo, en
la salida Status se muestran las causas de error.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción TIO_IOLink_OUT.
Parámetro

Declaración

Tipo de datos Ajuste pre‐
determinado
S7-1500

Descripción

REQ

Input

Bool

False

Inicia la orden con un flanco ascendente.

HWID*

Input

HW_IO

0

Identificador de hardware para el módulo TIO desde el HWCN.

TO*

Input

LTime

LT#0ns

To: Tiempo para emitir los datos de salida isócronos.
Adopte To de la estación ET 200 (características de la interfaz
PROFINET).

Port*

Input

USInt

TIO_SYNC_
Data*

Input

"TIO_SYNC_
Data"

0

Número de puerto (1 ... 4) del IO-Link Device determinado
Hora del sistema proporcionada por la instrucción TIO_SYNC
para las instrucciones de TIO de los módulos TIO. Ver UDT
TIO_SYNC_Data (Página 3939).
Este parámetro de entrada debe interconectarse con el paráme‐
tro de salida TIO_SYNC_Data de la instrucción TIO_SYNC.

TimeStamp

Input

LTime

LT#0ns

Etiqueta de fecha/hora: hora a la que deben visualizarse los da‐
tos de proceso (AAE1, AAE2).

AA_Data

Input

Word

16#0

Datos de salida de proceso: Fecha que debe emitirse (palabra).

Busy

Output

Bool

False

Busy = True: La orden aún no ha finalizado.

Done

Output

Bool

False

Done = True se indica durante un ciclo: la orden se señaliza
como "lista, sin errores".

Error

Output

Bool

False

Error = True: se ha producido un error. En este caso, BUSY y
DONE están ajustados a False. Ver información detallada en el
parámetro Status.

Contiene AAE1 y AAE2 en bit 0, 1.

Error se restablecerá en cuanto se haya solucionado el error.
Status

Output

DWord

16#0

Estado de la instrucción: ver descripción del parámetro Status

* Comprobado una vez durante el arranque de la CPU

Parámetro Status
En la salida Status se emiten códigos de error o informaciones de estado como palabra doble.

Programación del PLC
Manual de programación y manejo, 11/2019

3931

Instrucciones
4.1 Instrucciones
La palabra doble tiene la siguiente segmentación:
Código de
error

Significado

(DW#16#...)
z0yywwww

Error de una función de sistema:
● Durante el arranque (z = 1)
● En el modo normal (z = 0)
En yy se codifican funciones subordinadas utilizadas del sistema: ver tabla con códigos de error.
wwww indica el RET_VAL de la función de sistema. Encontrará información de error en la ayuda de la función
de sistema.

z0yy0000

Un error que no proviene de una función de sistema. Recibe un número de error correlativo yy.
El error puede aparecer:
● Durante el arranque (z = 1)
● En el modo normal (z = 0)

Tabla con códigos de error
Código de
error

Significado

Solución

00000000

No hay error.

—

10010000

El número parametrizado en el parámetro de entrada Port
está fuera del rango válido de 1 ... 4.

Corrija el valor en el parámetro de entrada Port.

10020000

La instrucción TIO_IOLink_OUT no se llama en un OB isó‐ Asegúrese de que se llama TIO_IOLink_OUT en
crono. La instrucción solo se puede utilizar correctamente un OB del tipo "Synchronous Cycle".
en un OB isócrono.

10030000

Se ha producido un error en la lectura del parámetro de
entrada HWID.

x0040000

Los datos de TIO_SYNC_Data son incorrectos/no válidos. Compruebe la instrucción TIO_SYNC, así como
la interconexión de su salida TIO_SYNC_Data.

1005xxxx

Se ha producido un error en la ejecución de la función de ● Lea en el sistema de información TIA Portal
sistema RD_SINFO. La palabra Low xxxx indica la infor‐
la descripción de RD_SINFO.
mación de error del valor de retorno RET_VAL de RD_SIN‐
● Asegúrese de que se llama
FO.
TIO_IOLink_OUT en un OB del tipo
"Synchronous Cycle".

10060000

No se ha encontrado ningún IO-Link Device.

(DW#16#...)

Causa posible:
El módulo configurado mediante el identificador de hard‐
ware no es un IO‑Link Master para Time‑based IO.

3932

Compruebe el valor en el parámetro de entrada
HWID. Indique el identificador de hardware del
módulo TIO que figura en las propiedades del
módulo, en la configuración hardware. Para el
direccionamiento simbólico está disponible una
constante de sistema interna del tipo de datos
Hw_SubModule.

● Asegúrese de que el módulo configurado es
un IO‑Link Master para Time‑based IO.
● Compruebe el valor en el parámetro de
entrada HWID. Indique el identificador de
hardware del módulo TIO que figura en las
propiedades del módulo, en la configuración
hardware.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Código de
error

Significado

Solución

(DW#16#...)
10070000

Se ha producido un error interno en el cálculo de direccio‐ Compruebe el valor en el parámetro de entrada
nes.
HWID. Indique el identificador de hardware del
módulo TIO que figura en las propiedades del
módulo, en la configuración hardware. Para el
direccionamiento simbólico está disponible una
constante de sistema interna del tipo de datos
Hw_SubModule.

00080000

El módulo TIO no está sincronizado mediante la instrucción Compruebe la instrucción TIO_SYNC.
TIO_SYNC.

10090000

El tiempo de ciclo leído del OB isócrono está fuera del ran‐ ● Corrija el tiempo de ciclo.
go permitido de 0 < TAPP <= 16 ms y, por tanto, no es válido. ● Asegúrese de que se llama
La instrucción solo se puede utilizar correctamente en un
TIO_IOLink_OUT en un OB del tipo
OB isócrono.
"Synchronous Cycle".

100A0000

El tiempo parametrizado en el parámetro de entrada TO
está fuera del rango permitido de 0 < To <= 4 ms.

100Bxxxx

Se ha producido un error en la ejecución de la función de Lea en el sistema de información TIA Portal la
sistema RD_ADDR. La palabra Low xxxx indica la informa‐ descripción de RD_ADDR.
ción de error del valor de retorno RET_VAL de RD_ADDR.

000C0000

La etiqueta de fecha/hora en el parámetro de entrada Ti‐
meStamp no es válida.

000D0000

La información de calidad de PortQualifier del IO-Link indi‐ Compruebe el sensor conectado y su configura‐
ca que los datos de proceso no son válidos.
ción.

100E0000

El modo de puerto configurado del IO-Link es incorrecto.

Compruebe la configuración del sensor conecta‐
do con S7‑PCT.

100F0000

El tiempo de ciclo leído en el OB de tipo "Synchronous
Cycle" es demasiado largo: TAPP > 16 ms.

Configure un múltiplo menor del tiempo de ciclo
de emisión como tiempo de ciclo.

x0FF0000

Error interno general.

—

Corrija el valor en el parámetro de entrada TO.

Compruebe el parámetro de entrada TimeS‐
tamp.

TIO_DQ: emitir flancos en salida digital controlados por tiempo
Descripción
TIO_DQ permite conmutar una salida digital de un módulo TIO en momentos definidos.

Comportamiento en arranque
Durante el arranque de la CPU, la instrucción TIO_DQ adopta una vez el parámetro de entrada
y comprueba lo siguiente:
● Comprobar HWID
● Comprobar si el número de la salida digital (Channel) está en el rango permitido (en función
del módulo direccionado y la configuración del canal)
● Comprobar TIO_SYNC_Data.Error: ¿existe ya un error en TIO_SYNC?

Programación del PLC
Manual de programación y manejo, 11/2019

3933

Instrucciones
4.1 Instrucciones
● Comprobar la plausibilidad de TIO_SYNC_Data.TO_TIMES (de 0 ms a 4 ms)
● Comprobar si el OB es síncrono
Tras un arranque sin errores la instrucción cambia al modo normal. Los parámetros de entrada
REQ, Out_Mode, TimeStampRE y TimeStampFE pueden modificarse durante el modo
normal. En caso de fallo, la instrucción no cambia al modo normal y genera un mensaje de
error.

Funcionamiento
En el modo normal, la instrucción emite flancos controlados por tiempo en una salida digital.
● En el momento definido en el parámetro de entrada TimeStampRE, se emite un flanco
ascendente en la salida digital.
● En el momento definido en el parámetro de entrada TimeStampFE, se emite un flanco
descendente en la salida digital.
En función del modelo de ejecución del programa, la etiqueta de fecha/hora deberá superar el
siguiente valor:
Modelo de ejecución del programa

TimeStampRE > ...
TimeStampFE > ...

Modelo EVA

TIO_Time + TAPP + TO

Modelo AEV

TIO_Time + TAPP + SendClock + TO

Con el parámetro de entrada Out_Mode se determina si se emiten uno o los dos flancos.
La entrada TIO_SYNC_Data se interconecta con la salida de igual nombre de la instrucción
TIO_SYNC. De ese modo se asegura una base de tiempo común.
Una orden de salida se inicia con un flanco ascendente en el parámetro REQ. Solo se puede
iniciar una nueva orden si no existe ningún error y no hay ninguna orden activada. Al iniciarse
la orden de salida, la salida digital se conmuta en los instantes definidos mediante
TimeStampRE y TimeStampFE.
● Si la salida digital ya está activada en el momento TimeStampRE, la orden de salida no se
transferirá al módulo para el flanco ascendente.
● Si la salida digital no está activada en el momento TimeStampFE, la orden de salida no se
transferirá al módulo para el flanco descendente.
De esta forma, en ninguno de los dos casos se conmutará la salida digital.
Al terminar el último ciclo de aplicación antes de llegar a la segunda hora de salida, la orden
finaliza (DONE). Status y Error se actualizan permanentemente durante el tiempo de ejecución
de la orden. Una orden de salida activa se puede cancelar cambiando TimeStampRE o
TimeStampFE a una etiqueta de fecha/hora no válida, p. ej., LT#5μs.
La siguiente figura muestra un ejemplo de las reacciones de los bits DONE y BUSY al iniciarse
una orden de salida en las siguientes condiciones:
● Out_Mode = 2 (se emiten los dos flancos).
● Ninguna de las dos etiquetas de fecha/hora se modifica entre el inicio de la orden y la salida.

3934

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
7$33

5(4

%86<

'21(

'4

5

)

5

TAPP

Ciclo de aplicación

R1, R2

Momentos predefinidos de un flanco DQ ascendente

F1, F2

Momentos predefinidos de un flanco DQ descendente

)

7,2B7LPH

Nota
Una vez iniciada la orden a través de un flanco ascendente en REQ, se pueden modificar los
momentos de salida mediante una nueva indicación de TimeStampRE y TimeStampFE sin
tener que volver a iniciar la orden.
Condición:
Si una etiqueta de fecha/hora modificada es menos de dos ciclos de aplicación anterior al
tiempo de salida (TimeStampRE - TIO_Time < 2*TAPP o TimeStampFE - TIO_Time < 2*TAPP),
no se tiene en cuenta. En este caso, se utiliza la última etiqueta de fecha/hora válida, ya que
esta ya se ha transferido al módulo TIO.
Nota
Si se especifica el mismo valor para TimeStampRE y TimeStampFE, la instrucción pasa por
alto la orden y no emite flancos.
Si se especifica el valor 0 para TimeStampRE o TimeStampFE, podrá emitirse directamente el
correspondiente flanco en la salida digital con el parámetro de entrada Out_Mode = 3. Con ello
podrá implementar en modo manual un control directo del módulo TIO sin etiqueta de fecha/
hora. Puede utilizar el control directo para interrumpir una orden en curso.

Programación del PLC
Manual de programación y manejo, 11/2019

3935

Instrucciones
4.1 Instrucciones

Comportamiento en caso de error
En la salida se muestra Error si la instrucción se ha procesado sin errores. En caso de error se
muestra la causa en la salida Status.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción TIO_DQ.
Parámetro

Declaración
en la versión
de la librería

Tipo de
datos

<
V2.0

S7-1500

≥
V2.0

Ajuste
predeter‐
minado

Descripción

REQ

Input

Bool

False

Inicia la orden con un flanco ascendente.

HWID*

Input

HW_IO

0

Identificador de hardware para el módulo TIO desde la configu‐
ración hardware

Channel*

Input

UInt

0

Número (0...m) de la salida digital del módulo TIO conectado

Out_Mode

Input

UInt

2

Determinación del modo de salida de los flancos en la salida di‐
gital:
0: Solo se emite el flanco ascendente (TimeStampRE).
1: Solo se emite el flanco descendente (TimeStampFE).
2: Se emiten los dos flancos (TimeStampRE y TimeStampFE).
3: Se emite directamente el flanco correspondiente cuando Ti‐
meStampRE = 0 o TimeStampFE = 0. Si ambas etiquetas de
fecha/hora tienen asignado "0", o si no hay etiqueta de fecha/hora
que tenga "0" asignado, no se emite ningún flanco.
De 4 a 255: No permitido

TimeStampRE

Input

LTime

LT#0ns

Etiqueta de fecha/hora: fecha/hora a la que debe emitirse un flan‐
co ascendente.

TimeStampFE

Input

LTime

LT#0ns

Etiqueta de fecha/hora: fecha/hora a la que debe emitirse un flan‐
co descendente.

StatusDQ

Output

Bool

False

Estado real de la salida digital.
Cuando se ha parametrizado una inversión de la salida digital,
StatusDQ también está invertido.
StatusDQ indica el estado interno de la salida digital indepen‐
dientemente del efecto de una habilitación HW que pudiera estar
parametrizada.

DONE

Output

Bool

False

DONE = True se indica durante un ciclo: la orden ha finalizado sin
errores.

BUSY

Output

Bool

False

BUSY = True: La orden aún no ha finalizado.

Error

Output

Bool

False

Error = True: se ha producido un error. En este caso, BUSY y
DONE están ajustados a False. Ver información detallada en el
parámetro Status.
Error se restablecerá en cuanto se haya solucionado el error.

3936

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración
en la versión
de la librería

Tipo de
datos

<
V2.0

S7-1500

Status

Output

TIO_SYNC_Da
ta*

Input

≥
V2.0

DWord
InOut

Ajuste
predeter‐
minado

Descripción

16#0

Estado de la instrucción: ver descripción del parámetro Status

"TIO_
SYNC_
Data"

Hora del sistema proporcionada por la instrucción TIO_SYNC
para las instrucciones de TIO de los módulos TIO. Ver UDT
TIO_SYNC_Data (Página 3939).
Este parámetro debe interconectarse con el parámetro de salida
TIO_SYNC_Data de la instrucción TIO_SYNC.

* Comprobado una vez durante el arranque de la CPU

Parámetro Status
En la salida Status se emiten códigos de error o informaciones de estado como palabra doble.
La palabra doble tiene la siguiente segmentación:
Código de
error

Significado

(DW#16#...)
z0yywwww

Error de una función de sistema:
● Durante el arranque (z = 1)
● En el modo normal (z = 0)
En yy se codifican funciones subordinadas utilizadas del sistema: ver tabla con códigos de error.
wwww indica el RET_VAL de la función de sistema. Encontrará información de error en la ayuda de la función
de sistema.

z0yy0000

Un error que no proviene de una función de sistema. Recibe un número de error correlativo yy.
El error puede aparecer:
● Durante el arranque (z = 1)
● En el modo normal (z = 0)

Tabla con códigos de error
Código de
error

Significado

Solución

00000000

No hay error.

—

10010000

El número de la salida digital parametrizado en el paráme‐ Corrija el valor en el parámetro de entrada Chan‐
tro de entrada Channel está fuera del rango válido (en fun‐ nel.
ción del módulo direccionado y de la configuración del ca‐
nal).

10020000

La instrucción TIO_DQ no se llama en un OB isócrono. La
instrucción solo se puede utilizar correctamente en un OB
isócrono.

(DW#16#...)

Programación del PLC
Manual de programación y manejo, 11/2019

Asegúrese de que se llame TIO_DQ en un OB
del tipo "Synchronous Cycle" o "MC-PostServo".

3937

Instrucciones
4.1 Instrucciones
Código de
error

Significado

Solución

10030000

Se ha producido un error en la lectura del parámetro de
entrada HWID.

Compruebe el valor en el parámetro de entrada
HWID. Indique el identificador de hardware del
módulo TIO que figura en las propiedades del
módulo, en la configuración hardware. Para el
direccionamiento simbólico está disponible una
constante de sistema interna del tipo de datos
Hw_SubModule.

x0040000

Los datos de TIO_SYNC_Data son incorrectos/no válidos.

Compruebe la instrucción TIO_SYNC, así como
la interconexión de su salida TIO_SYNC_Data.

1005xxxx

Se ha producido un error en la ejecución de la función de ● Lea la descripción de RD_SINFO en el
sistema RD_SINFO. La palabra Low xxxx indica la infor‐
sistema de información de STEP 7 (TIA
mación de error del valor de retorno RET_VAL de RD_SIN‐
Portal).
FO.
● Asegúrese de que se llame TIO_DQ en un
OB del tipo "Synchronous Cycle" o "MCPostServo".

(DW#16#...)

10060000

No se ha encontrado ningún módulo TIO.
Causa posible:
El módulo configurado mediante el identificador de hard‐
ware no es un módulo TIO.

● Asegúrese de que el módulo configurado
sea un módulo TIO.
● Compruebe el valor en el parámetro de
entrada HWID. Indique el identificador de
hardware del módulo TIO que figura en las
propiedades del módulo, en la configuración
hardware.

10070000

Se ha producido un error interno en el cálculo de direccio‐ Compruebe el valor en el parámetro de entrada
nes.
HWID. Indique el identificador de hardware del
módulo TIO que figura en las propiedades del
módulo, en la configuración hardware. Para el
direccionamiento simbólico está disponible una
constante de sistema interna del tipo de datos
Hw_SubModule.

x0080000

El módulo TIO no está sincronizado mediante la instrucción
TIO_SYNC.

Compruebe la instrucción TIO_SYNC.

El código de error también puede ser un indicio de que:
● ya hay una orden pendiente antes de la primera
ejecución de la instrucción.
● el número parametrizado en el parámetro de entrada
Channel no es una salida digital.
10090000

El tiempo de ciclo leído del OB isócrono es LT#0ms o ne‐
gativo, y por tanto, no válido. Corrija el valor.
La instrucción solo se puede utilizar correctamente en un
OB isócrono.

● Corrija el tiempo de ciclo.
● Asegúrese de que se llame TIO_DQ en un
OB del tipo "Synchronous Cycle" o "MCPostServo".

100A0000

El tiempo TO del módulo TIO guardado en TIO_SYNC_Data
está fuera del rango permitido de 0 < To <= 4 ms.

100Bxxxx

Se ha producido un error en la ejecución de la función de Lea la descripción de RD_ADDR en el sistema
sistema RD_ADDR. La palabra Low xxxx indica la informa‐ de información de STEP 7 (TIA Portal).
ción de error del valor de retorno RET_VAL de RD_ADDR.

3938

Compruebe la instrucción TIO_SYNC.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Código de
error

Significado

Solución

(DW#16#...)
000C0000

Una o ambas etiquetas de fecha/hora en los parámetros de Compruebe los parámetros de entrada TimeS‐
entrada TimeStampRE y TimeStampFE no es válida, o nin‐ tampRE y TimeStampFE.
guna de las dos lo es. El error solo se notifica mientras dura
un ciclo de aplicación.

000D0000

La Quality Information de la salida digital indica que en ella
se ha producido un error.

● Compruebe la parametrización de la salida
digital.
● Compruebe la tensión de alimentación L+/1L
+/2L+.
● Compruebe el cableado de la salida digital
en relación con cortocircuito, sobrecarga y
sobretemperatura.

000E0000

El número parametrizado en el parámetro de entrada Chan‐ ● Compruebe la configuración del canal (solo
nel no es una salida digital parametrizada como Timer-DQ.
con TM Timer DIDQ 16x24V).
● Compruebe el modo de operación de la
salida digital.

100F0000

El tiempo de ciclo leído en el OB de tipo "Synchronous
Cycle" es demasiado largo: TAPP > 16 ms.

Configure un múltiplo menor del tiempo de ciclo
de emisión como tiempo de ciclo.

10100000

El ciclo de emisión está fuera del rango permitido de 0 <
SEND_CLOCK <= 4 ms y, por tanto, no es válido.

Corrija el tiempo de ciclo de emisión.

El código de error también puede ser un indicio de que:
● los datos en TIO_SYNC_Data no son válidos o no
existen.
● la instrucción TIO_DQ no se llama en un OB isócrono.
00110000

El valor parametrizado en el parámetro de entrada Out_Mo‐ Corrija el valor en el parámetro de entrada
de está fuera del rango válido de 0 ... 3.
Out_Mode.

x0130000

MC-Servo (OB91) no es isócrono con el tiempo de ciclo de
bus.

Corrija el tiempo de ciclo de MC-Servo al valor
del tiempo de ciclo de bus.
Nota:
Llamar las instrucciones de TIO en un OB de tipo
"MC-PostServo" con "MC-Servo" con reducción
de ciclo puede provocar un cálculo incorrecto de
la etiqueta de fecha/hora.

10140000

El valor parametrizado en el parámetro de entrada HWID Corrija el valor en el parámetro de entrada HWID
o la estructura del parámetro TIO_SYNC_Data.
no está presente en la estructura del parámetro
TIO_SYNC_Data. Los parámetros HWID y TIO_SYNC_Da‐
ta no son coherentes.

x0FF0000

Error interno general.

—

UDT TIO_SYNC_Data
Descripción
El tipo de datos UDT TIO_SYNC_Data contiene la estructura central y los datos para la
sincronización de los módulos y la transmisión de TIO_Time.

Programación del PLC
Manual de programación y manejo, 11/2019

3939

Instrucciones
4.1 Instrucciones

Parámetros
Parámetro

Tipo de datos

Descripción

S7-1500

4.1.5.6

TIO_TIME

LTime

Base de tiempo común (tiempo relativo) de los módulos
TIO

PIP_MODE

USInt

Modo para la actualización de datos (transmitido por el
parámetro de entrada PIP_Mode de la instrucción
TIO_SYNC)

APP_CYC

LTime

Ciclo de aplicación del OB "Synchronous Cycle", "MCPreServo" o "MC-PostServo"

SEND_CLOCK

LTime

Ciclo de emisión del dominio Sync (transmitido por el pa‐
rámetro SendClock de la instrucción TIO_SYNC)

SYNC_MODULES

Array HW_IO [1...8]

Identificadores de hardware de los módulos TIO a partir
de la configuración hardware

TO_TIMES

Array UDInt [1...8]

TO para cada módulo TIO

TIO_TIME_BASE

LTime

Uso interno

TBASE

LTime

ERROR

Bool

SINAMICS - TO_BasicPos

TO_BasicPos
Descripción
Puede usar la instrucción "TO_BasicPos" de SINAMICS si en el accionamiento SINAMICS
conectado se usa el módulo de función de posicionador simple. "TO_BasicPos" se usa para
controlar cíclicamente un accionamiento SINAMICS con la tecnología de posicionador simple
SINAMICS S/G/V.
Nota
Debido a que hay varios modos de EPos, hay una entrada especial de modo: la entrada
"ModePos". Los modos de operación se seleccionan con esa entrada. Debido a la estructura
de EPos, no se pueden seleccionar varios modos de operación a la vez. No obstante, es
posible en cualquier momento conmutar a otro modo desde un modo de operación, como
pasar de modo de configuración a posicionamiento absoluto.
Nota
Para controlar todos los bits adicionales en el sentido de consigna sin una entrada explícita, a
partir de TIA Portal/Startdrive V14 se dispone de una entrada de configuración adicional, la
entrada "ConfigEPos". Al usar esa entrada ya es posible activar funciones de dispositivo
básicas como DES2/DES3, o también funciones de EPos como la transferencia continua de
consigna, SIN tener que intervenir en el bloque de datos de instancia con un acceso SLICE.

3940

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Nota
Al configurar el accionamiento SINAMICS, debe asegurarse de que se haya seleccionado el
telegrama de tipo estándar 111 para la comunicación.

Parámetro
La siguiente tabla muestra los parámetros de la instrucción TO_BasicPos:
Parámetro

Declaración Tipo

Predetermi‐
nado[…]

Significado

ModePos

INPUT

0

Modo de operación:

INT

1 = Posicionamiento relativo
2 = Posicionamiento absoluto
3 = Posicionamiento según configuración
4 = Procedimiento de referenciado
5 = Definir punto de referencia
6 = Bloque de desplazamiento 0 – 15/63 (G120/S120)
7 = Jog
8 = Jog incremental
EnableAxis

INPUT

BOOL

0

Comando conmutación: 0 = OFF1, 1 = ON

CancelTraversing

INPUT

BOOL

1

0 = Rechazar una petición de desplazamiento, 1 = No rechazar

IntermediateStop

INPUT

BOOL

1

0 = Se interrumpe el comando de desplazamiento activo, 1 =
Sin parada intermedia

Positive

INPUT

BOOL

0

Sentido positivo

Negative

INPUT

BOOL

0

Sentido negativo

Jog1

INPUT

BOOL

0

Fuente de señal Jog 1

Jog2

INPUT

BOOL

0

Fuente de señal Jog 2

FlyRef

INPUT

BOOL

0

0 = Deseleccionar referenciado al vuelo, 1 = Seleccionar refe‐
renciado al vuelo

AckError

INPUT

BOOL

0

Confirmación de fallos

ExecuteMode

INPUT

BOOL

0

Activar la función de petición de desplazamiento/aplicación de
consigna/activación de referencia

Position

INPUT

DINT

0[LU]

Consigna de posición en [LU] para la introducción directa de
consignas/modo MDI o número de bloque de desplazamiento
para modo Bloque de desplazamiento

Velocity

INPUT

DINT

0[LU/min]

Velocidad en [LU/min] para el modo de operación MDI

OverV

INPUT

INT

100[%]

Corrección de velocidad activa para todos los modos de ope‐
ración: 0-199%

OverAcc

INPUT

INT

100[%]

Corrección de aceleración activa 0-100%

OverDec

INPUT

INT

100[%]

Corrección de deceleración activa 0-100%

ConfigEPos

INPUT

DWORD

3h

Para obtener una descripción detallada, consulte el tema de
posicionamiento relativo de las instrucciones de SINAMICS en
la ayuda de TIA.

AxisEnabled

OUTPUT

BOOL

0

El accionamiento está listo y conectado

AxisPosOk

OUTPUT

BOOL

0

Se ha alcanzado la posición de destino del eje

Programación del PLC
Manual de programación y manejo, 11/2019

3941

Instrucciones
4.1 Instrucciones
Parámetro

Declaración Tipo

Predetermi‐
nado[…]

Significado

AxisRef

OUTPUT

0

Punto de referencia definido

BOOL

AxisWarn

OUTPUT

BOOL

0

Alarma de accionamiento activa

AxisError

OUTPUT

BOOL

0

Hay un fallo en el accionamiento

Lockout

OUTPUT

BOOL

0

Conexión bloqueada

ActVelocity

OUTPUT

DINT

0

Velocidad actual (normalizada 40000000h = 100% p2000)

ActPosition

OUTPUT

DINT

0[LU]

Posición actual en LU

ActMode

OUTPUT

INT

0

Modo de operación actualmente activo

EPosZSW1

OUTPUT

WORD

0

Estado de ZSW1 de EPos (granularidad de bit)

EPosZSW2

OUTPUT

WORD

0

Estado de ZSW2 de EPos (granularidad de bit)

ActWarn

OUTPUT

WORD

0

Número de alarma actual

ActFault

OUTPUT

WORD

0

Número de fallo actual

Error

OUTPUT

BOOL

0

1 = Presencia de fallo agrupado

Status

OUTPUT

INT

0

16#7002: Sin fallo, bloque en funcionamiento
16#8401: Fallo en el accionamiento
16#8402: Conexión bloqueada
16#8403: El referenciado al vuelo no ha podido iniciarse
16#8600: Error DPRD_DAT
16#8601: Error DPWR_DAT
16#8202: El modo de operación seleccionado es incorrecto
16#8203: La consigna parametrizada es incorrecta
16#8204: El número de bloque de desplazamiento seleccio‐
nado es incorrecto

DiagID

OUTPUT

WORD

0

Error de comunicaciones ampliadas → error llamada SFB

Para obtener más información, consulte el capítulo "Using technology object" (Uso de objeto
tecnológico) -> "SINAMICS" de la ayuda en línea de TIA Portal.

4.1.6

Comunicación

4.1.6.1

Comunicación S7

Coherencia de datos
Definición
El bloque de datos que no puede ser modificado por procesos concurrentes se denomina área
de datos coherente. Así, un bloque de datos que supera el tamaño del área de datos coherente
puede falsearse en su totalidad al transferirse. Esto significa que un bloque de datos conexos
cuyo volumen supere el del área de datos coherente, puede estar compuesto en un momento
dado en parte por datos nuevos, y en parte por datos coherentes antiguos.

3942

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Ejemplo
Puede surgir una incoherencia si se interrumpe una instrucción de comunicación, p. ej.,
mediante un OB de alarma de proceso con mayor prioridad. Si el programa de usuario de este
OB modifica ahora los datos que en parte ya había procesado la instrucción, los datos
transferidos proceden:
● en parte, de antes de la ejecución de la alarma de proceso
● y, en parte, de después de ejecutar la alarma de proceso.
Esto significa que los datos son incoherentes (no concuerdan entre sí).

Aseguramiento de la coherencia de datos
Si el proceso de comunicación puede ser interrumpido por un OB de alarma, hay que asegurar
que los datos se transmitan con coherencia. Asegúrese de que los datos transferidos no sean
modificados directamente por el OB de alarma, sino que este modifique solo una imagen de los
datos. Copie la imagen de los datos en el área de transferencia de la instrucción de
comunicación antes de la siguiente transferencia de datos.
● Si en el programa de usuario existe una instrucción de comunicación que acceda a datos
comunes, el acceso a esa área de datos puede coordinarse, por ejemplo, con el parámetro
DONE. La coherencia de datos de las áreas de comunicación que se transmite localmente
con una instrucción de comunicación puede garantizarse por tanto en el programa de
usuario.
● En las instrucciones de comunicación S7 "PUT (Página 3953)"/"GET (Página 3947)", el
tamaño de las áreas de datos coherentes ya debe tenerse en cuenta en la programación o
configuración, puesto que en el programa de usuario del dispositivo de destino (servidor) no
hay ningún bloque de comunicación que pueda sincronizar los datos de comunicación al
entrar en el programa de usuario:
● Con la CPU S7-300 y C7-300 (excepción: CPU 318-2 DP) los datos de comunicación se
copian en el programa de usuario con coherencia en bloques de 32 bytes en el punto de
control de ciclo del sistema operativo. Para todas las áreas de datos de mayor tamaño no
se garantiza la coherencia de datos. Si se requiere una
coherencia de datos definida, los datos de comunicación en el programa de usuario no
deben superar los 32 bytes (según la versión, máximo 8 bytes).
● Por el contrario, en las CPU S7-400 y S7-1500 los datos de comunicación no se procesan
en bloques de 462 bytes en el punto de control del ciclo, sino en segmentos de tiempo fijos
durante el ciclo del programa. El propio sistema garantiza la coherencia de una variable.
Así, un OP o una OS, por ejemplo, puede acceder con coherencia a estas áreas de
comunicación con las instrucciones "PUT (Página 3953)" / "GET (Página 3947)" o bien leer/
escribir variables.
Nota
Encontrará más indicaciones sobre la coherencia de datos en la descripción de las distintas
instrucciones.
En la familia de módulos S7-1500 es posible modificar parámetros durante el funcionamiento
en las instrucciones de la comunicación S7. Los parámetros modificados se utilizan de
inmediato aunque haya todavía una petición activa. En ambos casos pueden producirse

Programación del PLC
Manual de programación y manejo, 11/2019

3943

Instrucciones
4.1 Instrucciones
incoherencias en los datos. Para evitar incoherencias en los datos, en ningún caso deben
modificarse parámetros mientras se está ejecutando una petición.

Efecto en los tiempos de respuesta de alarma
Al copiar los datos, los tiempos de respuesta de alarma se prolongan mínimamente. Cuanto
más datos deban transmitirse con garantía de coherencia, tanto mayor será el tiempo de
reacción a alarmas de un sistema.

Parámetros comunes de las instrucciones para la comunicación S7
Clasificación
Los parámetros de las instrucciones para la comunicación S7 pueden clasificarse en las
siguientes cinco categorías funcionales:
1. Los parámetros de control permiten activar una instrucción.
2. Los parámetros de direccionamiento sirven para direccionar el interlocutor remoto.
3. Los parámetros de transmisión indican las diferentes áreas de datos que deben
transmitirse al interlocutor remoto.
4. Los parámetros de recepción indican las áreas de datos en las que se registran los datos
recibidos del interlocutor remoto.
5. Los parámetros de estado permiten controlar si la instrucción ha terminado su cometido
correctamente, o bien analizar los errores ocurridos.

Parámetros de control
El intercambio de datos no se activa hasta que en la llamada de la instrucción los parámetros
de control correspondientes no tengan un valor definido (p. ej. que estén activados) o hasta
que el valor haya cambiado en un modo determinado respecto a la última llamada (p. ej. flanco
ascendente).

Parámetros de direccionamiento
Parámetro

Descripción

ID

Referencia a la descripción de la conexión local (predeterminada por la configuración de
conexiones).

R_ID

Con el parámetro R_ID se define la correspondencia entre una instrucción de transmisión
y una de recepción: El parámetro R_ID debe coincidir en las instrucciones del lado de
transmisión y del lado de recepción.
Ello permite la comunicación de varios pares de instrucciones a través de la misma co‐
nexión lógica.
● R_ID debe indicarse en la forma DW#16#wxyzWXYZ.
● Los pares de instrucciones de una conexión lógica definidos con R_ID deben ser
unívocos para dicha conexión.

3944

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Nota
Parámetros de direccionamiento ID y R_ID
Los parámetros de direccionamiento ID y R_ID pueden reparametrizarse en el tiempo de
ejecución. Los nuevos parámetros se hacen efectivos con cada nueva petición al finalizar la
petición anterior.
Las siguientes posibilidades permiten reducir el número de DBs de instancia y, con ello,
ahorrar memoria de trabajo:
1. Con IDs variables pueden utilizarse varias conexiones a través de un bloque de datos de
instancia.
2. Con R_IDs variables es posible definir con una instancia varias correspondencias entre
pares de instrucciones de transmisión y recepción para una petición.
3. Los casos 1 y 2 pueden combinarse entre sí.
Recuerde que los nuevos parámetros no se hacen efectivos hasta no haberse completado la
petición anterior. Al activar el proceso de transmisión, el parámetro R_ID debe coincidir en la
instrucción del lado de transmisión y en la del lado de recepción.

Parámetros de estado
Con los parámetros de control se controla si la instrucción ha terminado su cometido
correctamente o si todavía está activa. Además, indican los errores ocurridos.
Nota
Los parámetros de estado sólo son válidos durante un ciclo, es decir, desde el primer comando
que sigue a la llamada, hasta la siguiente llamada. Por ello es necesario evaluar estos
parámetros cada vez que se ejecuta la instrucción.

Parámetros de transmisión y recepción
En las instrucciones para la comunicación bilateral
● el número de parámetros SD_i y RD_i utilizados en los lados de transmisión y recepción
debe coincidir
● en los parámetros SD_i y RD_i conexos deben coincidir los tipos de datos en los lados de
transmisión y recepción
● el número de datos que deben transferirse a través del parámetro SD_i no puede ser
superior al área abarcada por el parámetro correspondiente RD_i (no es válido para
"BSEND (Página 3968)" / "BRCV (Página 3971)"). Los parámetros RD_i (a excepción de
"BSEND"/"BRCV") deben direccionar el mismo volumen de datos.

Programación del PLC
Manual de programación y manejo, 11/2019

3945

Instrucciones
4.1 Instrucciones
La infracción de estas reglas se indica con ERROR = 1 y STATUS = 4.
Nota
Alimentación de los parámetros de transmisión y recepción
Los parámetros de transmisión y recepción con el tipo de datos VARIANT deben tener
alimentación siempre que se llame cualquier instrucción de comunicación. No es posible
alimentar los parámetros de transmisión de las instrucciones de comunicación en el arranque
y lanzar solo la petición de transmisión durante el funcionamiento cíclico.

Volumen de datos de usuario
En las instrucciones "USEND (Página 3959)", "URCV (Página 3961)", "GET (Página 3947)" y
"PUT (Página 3953)", el número de datos que deben transferirse no puede superar un volumen
de datos de usuario determinado. El volumen máximo de datos de usuario depende:
● de la instrucción utilizada y
● del interlocutor
El volumen mínimo garantizado de datos de usuario para una instrucción con 1-4 variables se
puede consultar en la siguiente tabla:
Instrucción

Interlocutor:
S7-300

Interlocutor:
S7-400

Interlocutor:
S7-1200

Interlocutor:
S7-1500

PUT / GET

160 bytes

400 bytes

160 bytes

880 bytes

USEND / URCV

160 bytes

440 bytes

-

920 bytes

BSEND / BRCV

32768/65534
bytes

65534 bytes

-

● 65534 bytes
en el acceso
estándar
● 65535 bytes
en el acceso
optimizado

Observe las limitaciones relativas al volumen de datos de usuario en los datos técnicos de la
respectiva CPU.

Volumen exacto de datos de usuario
Si el volumen de datos de usuario indicado anteriormente no es suficiente, es posible
determinar la longitud de datos de usuario máxima exacta en bytes del siguiente modo:

3946

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
En primer lugar consulte en la tabla siguiente el tamaño válido para bloques de datos en la
comunicación:
CPU propia

CPU remota

Tamaño del bloque de datos en bytes

S7-1200

cualquiera

240

S7-1500

S7-300

240

S7-400

480

S7-1200

240

S7-1500

960

Partiendo de este valor, consulte en la tabla siguiente la longitud de datos de usuario máxima
posible en bytes, como suma de los parámetros de usuario. Es aplicable a longitudes pares de
las áreas SD_i, RD_i, ADDR_i.
Para cada área de longitud impar la longitud de datos de usuario máxima posible se reduce en
un byte.
Número de parámetros utilizados SD_i, RD_i, ADDR_i
Tamaño del bloque
de datos

Instrucción

1

2

3

4

240 (S7-300)

PUT/GET/
USEND

160

-

-

-

240 (S7-300 vía in‐
terfaz integrada)
240 (S7-400)

480 (S7-400)

PUT

212

-

-

-

GET

222

-

-

-

USEND

212

-

-

-

PUT

212

196

180

164

GET

222

218

214

210

USEND

212

-

-

-

PUT

452

436

420

404

GET

462

458

454

450

USEND

452

448

444

440

240 (S7-1200)

PUT

212

196

180

164

GET

222

218

214

210

960 (S7-1500)

PUT

932

916

900

884

GET

942

938

934

930

USEND

932

928

924

920

GET: Leer datos de una CPU remota
Descripción
La instrucción "GET" permite leer datos de una CPU remota.

Programación del PLC
Manual de programación y manejo, 11/2019

3947

Instrucciones
4.1 Instrucciones
Con un flanco ascendente en la entrada de control REQ se inicia la instrucción:
● Los punteros hacia las áreas que deben leerse (ADDR_i) se transfieren a la CPU
interlocutora. La CPU interlocutora puede encontrarse en el estado operativo RUN o STOP.
● La CPU interlocutora devuelve los contenidos de los datos:
– Si la respuesta supera la longitud máxima de datos de usuario, se indica en el parámetro
STATUS con el código de error "2".
– Los datos recibidos se copian durante la siguiente llamada de la instrucción en las áreas
de recepción configuradas (RD_i).
● El término de este proceso se indica con "1" en el parámetro de estado NDR.
No es posible activar otro proceso de lectura hasta que no haya finalizado el último. En caso
de problemas de acceso al leer los datos, o si la comprobación del tipo de datos devolvió un
error, los errores y advertencias correspondientes se indican a través de ERROR y STATUS.
Las modificaciones en áreas de datos direccionadas en la CPU interlocutora no se registran
mediante la instrucción "GET".

Requisitos para el uso de la instrucción
● En las propiedades de la CPU interlocutora se ha activado la función "Permitir acceso vía
comunicación PUT/GET del interlocutor remoto" para la CPU interlocutora, en "Protección".
● Los bloques a los que se accede con la instrucción "GET" se han creado con el tipo de
acceso "estándar".
● Hay que asegurarse de que las áreas definidas por los parámetros ADDR_i y SD_i se
correspondan en cuanto a la cantidad, la longitud y el tipo de datos.
● El área que se debe leer (parámetro ADDR_i) no puede ser mayor que el área de
almacenamiento de datos (parámetro RD_i).

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "GET":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

REQ

Input

BOOL

I, Q, M, D, L o cons‐
tante

El parámetro de control request activa el in‐
tercambio de datos con un flanco ascenden‐
te.

ID

Input

WORD

I, Q, M, D, L o cons‐
tante

Parámetro de direccionamiento para indicar
la conexión con la CPU interlocutora.

NDR

Output

BOOL

I, Q, M, D, L

Parámetro de estado NDR:
● 0: La petición aún no se ha iniciado o
todavía está en curso.
● 1: La petición ha finalizado
correctamente.

3948

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

ERROR

Output

BOOL

I, Q, M, D, L

Parámetros de estado ERROR y STATUS,
indicación de error:

STATUS

Output

WORD

I, Q, M, D, L

● ERROR=0
STATUS tiene el valor:
–

0000H: ni advertencia ni error

–

<> 0000H: Advertencia, STATUS
devuelve información detallada.

● ERROR=1
Hay un error. STATUS devuelve
información detallada sobre el tipo de
error.
ADDR_1

InOut

REMOTE

ADDR_2

InOut

REMOTE

ADDR_3

InOut

REMOTE

ADDR_4

InOut

REMOTE

RD_1

InOut

VARIANT

RD_2

InOut

VARIANT

RD_3

InOut

VARIANT

RD_4

InOut

VARIANT

I, Q, M, D

Puntero hacia las áreas de la CPU interlo‐
cutora que deben leerse.
Si el puntero REMOTE accede a un DB, és‐
te siempre debe especificarse.
Ejemplo: P#DB10.DBX5.0 Byte 10.

I, Q, M, D, L

Puntero hacia las áreas de la CPU propia en
las que se depositan los datos leídos.

Encontrará más información sobre los tipos de datos válidos en "Vista general de los tipos de
datos válidos (Página 241)".

Parámetros ERROR y STATUS
La siguiente tabla contiene toda la información de error específica de la instrucción "GET" que
puede indicarse a través de los parámetros ERROR y STATUS .
ERROR

STATUS
(decimal)

Explicación

0

11

Advertencia: La nueva petición no tiene efecto, ya que la anterior todavía no ha finalizado.

0

25

La comunicación se ha iniciado. La petición está en proceso.

1

1

Problemas de comunicación, p. ej.
● Descripción de la conexión no cargada (local o remoto)
● Conexión interrumpida (p. ej. cable, CPU desconectada, CP en STOP)
● Conexión con el interlocutor todavía no establecida

1

2

● Acuse negativo del interlocutor. La función no puede ejecutarse.
● La respuesta de la estación remota supera la longitud de datos de usuario máxima
(consulte: Parámetros comunes de las instrucciones para la comunicación S7
(Página 3944)).
● La protección contra acceso está activada en la CPU interlocutora. Desactive la protección
contra acceso en los ajustes de la CPU.

Programación del PLC
Manual de programación y manejo, 11/2019

3949

Instrucciones
4.1 Instrucciones
ERROR

STATUS
(decimal)

Explicación

1

4

Error en los punteros de almacenamiento de datos RD_i:
● Los tipos de datos de los parámetros RD_i y ADDR_i no son compatibles entre sí.
● La longitud del área RD_i es menor que la longitud de los datos que se deben leer de los
parámetros ADDR_i.

1

8

Error de acceso en la CPU interlocutora.

1

10

El acceso a la memoria de usuario local no es posible (p. ej. acceso a un DB borrado).

1

20

● Se ha excedido el número máximo de peticiones paralelas.
● La petición se llamará en una clase de baja prioridad (primera llamada).

1

W#16#80C3 (solo en S7-1500)
● Se ha excedido el número máximo de peticiones paralelas.
● La petición se llamará en una clase de baja prioridad (primera llamada).

Nota
Coherencia de datos
Los datos se reciben con coherencia si lee la parte actualmente utilizada del área de recepción
RD_i por completo antes de activar otra petición.

Ejemplo
En el ejemplo siguiente se utiliza una conexión S7 y se lee en la CPU 1 un juego de datos de
la CPU 2. El juego de datos que debe transferirse es del tipo de datos INT.
Requisitos
● Se han creado dos CPU de la serie S7-1500 y se han conectado entre sí a través de
PROFINET. La conexión todavía no está configurada.
● En ">CPU> > Propiedades > Protección" se ha ajustado para las CPU un nivel de
protección bajo para garantizar que se permitan accesos de lectura y escritura.
● Se permite el acceso mediante la instrucción PUT/GET.

Programa de la CPU 1
Para almacenar los datos de "GET" se crean seis variables en un bloque de datos global.

3950

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Para almacenar el juego de datos que se recibirá, se crea un bloque de datos global con una
variable.

Segmento 1: Los parámetros de la instrucción "GET" se interconectan del siguiente modo.

Segmento 2: En caso de error de GET, el estado se guarda del siguiente modo.

Segmento 3: Para el caso de que GET sea correcto, el estado se guarda del siguiente modo.

Programación del PLC
Manual de programación y manejo, 11/2019

3951

Instrucciones
4.1 Instrucciones
Configuración de GET
Para interconectar el parámetro de entrada ID debe abrirse el asistente con la instrucción
"GET" mediante "Propiedades > Configuración".
Realice los siguientes ajustes para la conexión:
Sección

Ajuste

Punto final

Seleccione el interlocutor de la comunicación.
El resto de datos de conexión se introduce automáticamente.
Se crea automáticamente una conexión S7 y su identificador
se introduce en el parámetro de entrada ID.

Activa

Asegúrese de que la conexión activa salga de la CPU 1.

Programa de la CPU 2
Para almacenar el juego de datos que se transferirá, se crea un bloque de datos global con una
variable.

En "Propiedades > Atributos" del bloque de datos, desactive el acceso optimizado al bloque.

Comportamiento de GET
Si el parámetro de entrada REQ ("start") devuelve el estado lógico "TRUE", se inicia la
instrucción "GET". La instrucción consulta los datos de conexión y se pone en contacto con el
interlocutor de comunicación de la conexión S7 utilizada. Para ello, en el parámetro de entrada
ID está almacenado el identificador de la conexión S7.
Mediante el parámetro ADDR_1 se captura la ubicación del juego de datos que se transferirá
("myValue") de la CPU 2. El juego de datos ("myValue") se lee y se escribe en la ubicación leída
("readValue") en el parámetro RD_1.

Con el estado lógico "TRUE" en el parámetro de salida NDR ("done") y con el valor "16#0000"
en el parámetro de salida STATUS ("status") se indica que la ejecución se ha realizado
correctamente. Puesto que los valores de los parámetros de salida solo se muestran en el
momento en que son válidos, el estado correcto debe guardarse en la variable

3952

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
"memDoneStat". En el parámetro de salida ERROR ("error") o en la variable "memErrStatus"
se indica que la ejecución se ha realizado sin errores.

Encontrará información adicional y el código del programa del ejemplo anterior aquí: Sample
Library for Instructions (Página 615).

Consulte también
Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente (Página 618)
Bytes de relleno cuando se usan tipos de datos estructurados (Página 143)

PUT: Escribir datos en una CPU remota
Descripción
La instrucción "PUT" permite escribir datos en una CPU remota.
Con un flanco ascendente en la entrada de control REQ se inicia la instrucción:
● Los punteros hacia las áreas que deben escribirse (ADDR_i) y los datos (SD_i) se
transfieren a la CPU interlocutora. La CPU interlocutora puede encontrarse en el estado
operativo RUN o STOP.
● Los datos que deben enviarse se copian desde las áreas de transmisión configuradas
(SD_i). La CPU interlocutora deposita los datos transmitidos en las direcciones indicadas
y devuelve un acuse de ejecución.
● Si no se ha producido ningún error, esto se indica en la siguiente llamada de la instrucción
con "1" en el parámetro de estado DONE. No es posible activar otro proceso de escritura
hasta que no haya finalizado el último.
En caso de problemas de acceso al escribir los datos, o si la comprobación del acuse de
ejecución devolvió un error, los errores y advertencias correspondientes se indican a través de
ERRORy STATUS.

Requisitos para el uso de la instrucción
● En las propiedades de la CPU interlocutora se ha activado la función "Permitir acceso vía
comunicación PUT/GET del interlocutor remoto" para la CPU interlocutora, en "Protección".
● Los bloques a los que se accede con la instrucción "PUT" se han creado con el tipo de
acceso "estándar".

Programación del PLC
Manual de programación y manejo, 11/2019

3953

Instrucciones
4.1 Instrucciones
● Hay que asegurarse de que las áreas definidas por los parámetros ADDR_i y SD_i se
correspondan en cuanto a la cantidad, la longitud y el tipo de datos.
● El área que se debe escribir (parámetro ADDR_i) debe ser del mismo tamaño que el área
de transmisión (parámetro SD_i).

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "PUT":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

REQ

Input

BOOL

I, Q, M, D, L o cons‐
tante

El parámetro de control request activa el inter‐
cambio de datos con un flanco ascendente.

ID

Input

WORD

I, Q, M, D, L o cons‐
tante

Parámetro de direccionamiento para indicar la
conexión con la CPU interlocutora.

DONE

Output

BOOL

I, Q, M, D, L

Parámetro de estado DONE:
● 0: La petición aún no se ha iniciado o
todavía se está ejecutando.
● 1: Petición finalizada sin errores.

ERROR

Output

BOOL

I, Q, M, D, L

Parámetros de estado ERROR y STATUS, in‐
dicación de error:

STATUS

Output

WORD

I, Q, M, D, L

● ERROR=0
STATUS tiene el valor:
–

0000H: ni advertencia ni error

–

<> 0000H: Advertencia, STATUS
devuelve información detallada.

● ERROR=1
Hay un error. STATUS devuelve
información detallada sobre el tipo de error.
ADDR_1

InOut

REMOTE

ADDR_2

InOut

REMOTE

ADDR_3

InOut

REMOTE

ADDR_4

InOut

REMOTE

I, Q, M, D

Puntero hacia las áreas de la CPU interlocuto‐
ra en las que debe escribirse.
Si el puntero REMOTE accede a un DB, éste
siempre debe especificarse.
Ejemplo: P#DB10.DBX5.0 Byte 10.
En la transferencia de estructuras de datos
(p. ej. Struct) debe utilizarse el tipo de datos
CHAR en los parámetros ADDR_i.

SD_1

InOut

VARIANT

SD_2

InOut

VARIANT

SD_3

InOut

VARIANT

SD_4

InOut

VARIANT

I, Q, M, D, L

Puntero hacia las áreas de la CPU propia que
contienen los datos que deben transmitirse.
Solo están permitidos los tipos de datos
BOOL, BYTE, CHAR, WORD, INT, DWORD,
DINT, REAL.
En la transferencia de estructuras de datos
(p. ej. Struct) debe utilizarse el tipo de datos
CHAR en los parámetros SD_i.

Encontrará más información sobre los tipos de datos válidos en "Vista general de los tipos de
datos válidos (Página 241)".

3954

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros ERROR y STATUS
La siguiente tabla contiene toda la información de error específica de la instrucción "PUT" que
puede indicarse a través de los parámetros ERROR y STATUS .
ERROR

STATUS
(decimal)

Explicación

0

11

Advertencia: La nueva petición no tiene efecto, ya que la anterior todavía no ha finalizado.

0

25

La comunicación se ha iniciado. La petición está en proceso.

1

1

Problemas de comunicación, p. ej.
● Descripción de la conexión no cargada (local o remoto).
● Conexión interrumpida (p. ej. cable, CPU desconectada, CP en STOP).
● Conexión con el interlocutor todavía no establecida.

1

2

● Acuse negativo de la CPU interlocutora. La función no puede ejecutarse.
● El acceso en la CPU interlocutora no se ha permitido. Active el acceso en los ajustes de la
CPU.

1

4

Error en los punteros de almacenamiento de datos:
● Los tipos de datos de los parámetros SD_i y ADDR_i no son compatibles entre sí.
● La longitud del área SD_i es mayor que la longitud de los datos que se deben escribir de los
parámetros ADDR_i.
● No es posible acceder a SD_i.
● Se ha excedido el volumen máximo de datos de usuario.
● El número de parámetros SD_i y ADDR_i no coinciden.

1

8

Error de acceso en la CPU interlocutora (p. ej. no se ha cargado el DB o está protegido contra
escritura).

1

10

El acceso a la memoria de usuario local no es posible (p. ej. acceso a un DB borrado).

1

20

● Se ha excedido el número máximo de peticiones paralelas.
● La petición se llamará en una clase de baja prioridad (primera llamada).

1

W#16#80C3

(solo en S7-1500)
● Se ha excedido el número máximo de peticiones paralelas.
● La petición se llamará en una clase de baja prioridad (primera llamada).

Coherencia de datos
Con la activación de un proceso de transmisión (flanco ascendente en REQ) los datos que
deben transmitirse de las áreas de transmisión SD_i se copian del programa de usuario. Se
puede volver a escribir en estas áreas tras la llamada del bloque, sin que se falsifiquen los
datos de transmisión actuales.
Nota
El proceso de transmisión completo finaliza sólo cuando el parámetro de estado DONE adopta
el valor "1".

Programación del PLC
Manual de programación y manejo, 11/2019

3955

Instrucciones
4.1 Instrucciones

Ejemplo
En el ejemplo siguiente se utiliza una conexión S7 y se transfiere un juego de datos de la CPU
1 a la CPU 2. El juego de datos que debe transferirse es del tipo de datos INT.
Requisitos
● Se han creado dos CPU de la serie S7-1500 y se han conectado entre sí a través de
PROFINET. La conexión todavía no está configurada.
● En ">CPU> > Propiedades > Protección" se ha ajustado para las CPU un nivel de
protección bajo para garantizar que se permitan accesos de lectura y escritura.
● Se permite el acceso mediante la instrucción PUT/GET.

Programa de la CPU 1
Para almacenar los datos de "PUT" se crean seis variables en un bloque de datos global.

Para almacenar el juego de datos que se transferirá, se crea un bloque de datos global con una
variable.

Segmento 1: Los parámetros de la instrucción "PUT" se interconectan del siguiente modo.

3956

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Segmento 2: En caso de error de PUT, el estado se guarda del siguiente modo.

Segmento 3: Para el caso de que PUT sea correcto, el estado se guarda del siguiente modo.

Configuración de PUT
Para interconectar el parámetro de entrada ID debe abrirse el asistente con la instrucción
"PUT" mediante "Propiedades > Configuración".
Realice los siguientes ajustes para la conexión:
Sección

Ajuste

Punto final

Seleccione el interlocutor de la comunicación.
El resto de datos de conexión se introduce automáticamente.
Se crea automáticamente una conexión S7 y su identificador
se introduce en el parámetro de entrada ID.

Activa

Asegúrese de que la conexión activa salga de la CPU 1.

Programa de la CPU 2
Para almacenar el juego de datos que se recibirá, se crea un bloque de datos global con una
variable.

En "Propiedades > Atributos" del bloque de datos, desactive el acceso optimizado al bloque.

Programación del PLC
Manual de programación y manejo, 11/2019

3957

Instrucciones
4.1 Instrucciones
Comportamiento de PUT
Si el parámetro de entrada REQ ("start") devuelve el estado lógico "TRUE", se inicia la
instrucción "PUT". La instrucción consulta los datos de conexión y se pone en contacto con el
interlocutor de comunicación de la conexión S7 utilizada. Para ello, en el parámetro de entrada
ID está almacenado el identificador de la conexión S7.
En el parámetro SD_1 se indica la ubicación del juego de datos que se enviará ("writeValue")
de la CPU 1. En el parámetro ADDR_1 se indica la ubicación ("myValue") del juego de datos
de la CPU 2. El juego de datos ("writeValue") se transfiere y se indica en la ubicación de la CPU
2 ("myValue").

Con el estado lógico "TRUE" en el parámetro de salida DONE ("done") y con el valor "16#0000"
en el parámetro de salida STATUS ("status") se indica que la ejecución se ha realizado
correctamente. Puesto que los valores de los parámetros de salida solo se muestran en el
momento en que son válidos, el estado correcto debe guardarse en la variable
"memDoneStat". En el parámetro de salida ERROR ("error") o en la variable "memErrStatus"
se indica que la ejecución se ha realizado sin errores.

Encontrará información adicional y el código del programa del ejemplo anterior aquí: Sample
Library for Instructions (Página 615).

Consulte también
Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente (Página 618)
Bytes de relleno cuando se usan tipos de datos estructurados (Página 143)

3958

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Otras
USEND: Envío de datos sin coordinación
Descripción
La instrucción "USEND" envía datos a una instrucción remota de interlocutor del tipo "URCV
(Página 3961)". El proceso de transmisión se desarrolla sin coordinación con la instrucción del
interlocutor, es decir, que la transmisión de datos se produce sin acuse por la instrucción del
interlocutor.
Con la activación de un proceso de transmisión (flanco ascendente en REQ), los datos que
deben transmitirse de las áreas de transmisión SD_i se copian del programa de usuario. Se
puede volver a escribir en estas áreas de transmisión tras la llamada de la instrucción sin que
se falsifiquen los datos de transmisión actuales.
La finalización correcta del proceso de transmisión se indica con "1" en el parámetro de estado
DONE .

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "USEND":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

REQ

Input

BOOL

I, Q, M, D, L o cons‐
tante

El parámetro de control request activa el inter‐
cambio de datos con un flanco ascendente.

ID

Input

CONN_PRG

I, Q, M, D, L, P o
constante

Parámetro de direccionamiento para indicar la
conexión con la CPU interlocutora.

R_ID

Input

CONN_R_ID

I, Q, M, D, L o cons‐
tante

Parámetro de direccionamiento R_ID para definir
los pares de instrucciones "USEND" y "URCV".
Consulte también: Parámetros comunes de las
instrucciones para la comunicación S7 (Pági‐
na 3944)

DONE

Output

BOOL

I, Q, M, D, L

Parámetro de estado
● 0: la petición aún no se ha iniciado o todavía
se está ejecutando.
● 1: petición finalizada sin errores.

ERROR

Output

BOOL

I, Q, M, D, L

Parámetro de estado
● 0: ni advertencia ni error.
● 1: hay un error. STATUS devuelve
información detallada sobre el tipo de error.

Programación del PLC
Manual de programación y manejo, 11/2019

3959

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

STATUS

Output

WORD

I, Q, M, D, L

Parámetro de estado
Véase tabla "Parámetros ERROR y STATUS".

SD_i (1≤ i ≤4)

InOut

VARIANT

I, Q, M, D, L

Puntero al área de transmisión n.º i.
Solo se permiten los tipos de datos BOOL (no
permitido: campo de bits), BYTE, CHAR, WORD,
INT, DWORD, DINT, REAL o STRUCT.
El volumen máximo de datos de usuario para los
parámetros SD_i depende de la CPU interlocuto‐
ra (instrucción "URCV") y del número de pará‐
metros utilizados.
Encontrará más información en: Parámetros co‐
munes de las instrucciones para la comunicación
S7 (Página 3944)

Encontrará más información sobre los tipos de datos válidos en "Vista general de los tipos de
datos válidos (Página 241)".

Parámetros ERROR y STATUS
ERROR

STATUS
(decimal)

Explicación

0

11

Advertencia: La nueva petición no tiene efecto, ya que la anterior todavía no ha finalizado.

0

25

La comunicación se ha iniciado. La petición está en proceso.

1

1

Se ha producido un problema de comunicación. Causas posibles:
● Descripción de la conexión no cargada (local o remoto)
● Conexión interrumpida (p. ej. cable, CPU desconectada, CP en STOP)
● Conexión con el interlocutor todavía no establecida

1

4

● Error en los punteros de área de transmisión SD_i en cuanto a la longitud o el tipo de datos.
● Se ha excedido la longitud máxima de datos de usuario.

1

10

El acceso a la memoria de usuario local no es posible (p. ej. acceso a un DB borrado).

1

18

El valor del parámetro R_ID ya existe en la conexión especificada en el parámetro ID (el valor para
R_ID debe ser unívoco para la conexión).

1

20

● Se ha excedido el número máximo de peticiones paralelas.
● La petición se está llamando en una clase de menor prioridad (primera llamada).

1

W#16#80C
3

(solo en S7-1500)
● Se ha excedido el número máximo de peticiones paralelas.
● La petición se llamará en una clase de baja prioridad (primera llamada).

Ejemplo
Encontrará el ejemplo aquí: Ejemplo de programa con USEND y URCV (Página 3963).
Encontrará información adicional y el código del programa del ejemplo aquí: Sample Library for
Instructions (Página 615).

3960

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Consulte también
Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente (Página 618)

URCV: Recibir datos sin coordinación
Descripción
La instrucción "URCV" recibe datos de forma asíncrona de una instrucción remota del
interlocutor del tipo "USEND (Página 3959)" y los copia en las áreas de recepción
configuradas.
La instrucción está lista para recibir cuando en la entrada EN_R hay un "1" lógico. Con EN_R=0
no es posible interrumpir una petición en curso.
Las áreas de datos de recepción se referencian con los parámetros RD_1, ... RD_4. Hay que
asegurarse de que las áreas definidas por los parámetros RD_i/RD_1 y SD_i/SD_1 (en la
respectiva instrucción del interlocutor correspondiente "USEND (Página 3959)") coincidan en
número y longitud.
La finalización correcta del proceso de copia se indica con un "1" lógico en el parámetro de
estado NDR . Después de que el parámetro de estado NDR haya adoptado el valor "1", hay
nuevos datos de recepción en las áreas de recepción (RD_i). Una nueva llamada del bloque
puede sobrescribir estos datos con nuevos datos de recepción. Para impedirlo, llame "URCV"
con el valor "0" en EN_R (p. ej. en caso de ejecución cíclica del bloque) hasta haber finalizado
el procesamiento de los datos de recepción.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "URCV":
Parámetro

Declaración

Tipo de da‐
tos

Área de memoria

Descripción

EN_R

Input

BOOL

I, Q, M, D, L o cons‐
tante

El parámetro de control enabled to receive señaliza
disponibilidad de recepción cuando la entrada está
activada.

ID

Input

CONN_PR
G

I, Q, M, D, L, P o
constante

Parámetro de direccionamiento para indicar la co‐
nexión con la CPU interlocutora.

R_ID

Input

CONN_R_I
D

I, Q, M, D, L o cons‐
tante

Parámetro de direccionamiento para definir los pa‐
res de instrucciones "USEND" y "URCV".
Consulte también: Parámetros comunes de las ins‐
trucciones para la comunicación S7 (Página 3944)

NDR

Output

BOOL

I, Q, M, D, L

Parámetro de estado
● 0: La petición aún no se ha iniciado o todavía
está en curso.
● 1: La petición ha finalizado correctamente.

ERROR

Output

BOOL

I, Q, M, D, L

Parámetro de estado
● 0: ni advertencia ni error
● 1: Hay un error. STATUS devuelve información
detallada sobre el tipo de error.

Programación del PLC
Manual de programación y manejo, 11/2019

3961

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de da‐
tos

Área de memoria

Descripción

STATUS

Output

WORD

I, Q, M, D, L

Parámetros de estado
Véase tabla "Parámetros ERROR y STATUS".

RD_i (1≤ i ≤4)

InOut

VARIANT

I, Q, M, D, L

Puntero al área de recepción n.º i.
Solo se permiten los tipos de datos BOOL (no per‐
mitido: campo de bits), BYTE, CHAR, WORD, INT,
DWORD, DINT, REAL o STRUCT.
Encontrará más información en: Parámetros comu‐
nes de las instrucciones para la comunicación S7
(Página 3944)

Encontrará más información sobre los tipos de datos válidos en "Vista general de los tipos de
datos válidos (Página 241)".

Parámetros ERROR y STATUS
ERROR

STATUS

Explicación

(decimal)
0

9

Advertencia: Los datos de recepción antiguos han sido sobrescritos por datos de recepción más
actuales.

0

11

Advertencia: Los datos de recepción ya se están procesando con una clase de menor prioridad
(puede producirse un error al copiar los datos en el área de recepción).

0

25

La comunicación se ha iniciado. La petición está en proceso.

1

1

Se ha producido un problema de comunicación. Causas posibles:
● Descripción de la conexión no cargada (local o remoto)
● Conexión interrumpida (p. ej. cable, CPU desconectada, CP en STOP)
● Conexión con el interlocutor todavía no establecida

1

4

Error en los punteros de áreas de recepción RD_i en cuanto a la longitud o el tipo de datos.

1

10

El acceso a la memoria de usuario local no es posible (p. ej. acceso a un DB borrado).

1

18

El valor del parámetro R_ID ya existe en la conexión especificada en el parámetro ID (el valor
para R_ID debe ser unívoco para la conexión).

1

19

La instrucción correspondiente "USEND (Página 3959)" envía datos más rápido de lo que
"URCV" puede copiarlos en las áreas de recepción.

1

20

● Se ha excedido el número máximo de peticiones paralelas.

1

W#16#80C
3

● La petición se está llamando en una clase de menor prioridad (primera llamada).
(solo en S7-1500)
● Se ha excedido el número máximo de peticiones paralelas.
● La petición se llamará en una clase de baja prioridad (primera llamada).

Ejemplo
Encontrará el ejemplo aquí: Ejemplo de programa con USEND y URCV (Página 3963).
Encontrará información adicional y el código del programa del ejemplo aquí: Sample Library for
Instructions (Página 615).

3962

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Consulte también
Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente (Página 618)

Ejemplo de programa con USEND y URCV
Introducción
En el ejemplo siguiente se utiliza una conexión S7 entre dos CPU de la serie S7-1500. Se envía
una cadena de caracteres (tipo de datos STRING) de la CPU 1 a la CPU 2. Los datos son
transferidos sin acuse (confirmación) por el interlocutor de la comunicación.

Requisitos
● Se han creado dos CPU de la serie S7-1500 y se han conectado entre sí vía PROFINET.
Hay una conexión S7 configurada.

● En "<CPU> > Propiedades > Protección" se ha ajustado para las CPU un nivel de
protección bajo para garantizar que se permitan accesos de lectura y escritura.

Programa de la CPU 1
Para almacenar los datos de USEND deben crearse las variables siguientes en un bloque de
datos global.

Se crea un FB "SLI_FB_USEND". En el se crean las siguientes variables locales.

Programación del PLC
Manual de programación y manejo, 11/2019

3963

Instrucciones
4.1 Instrucciones

Segmento 1: Los parámetros de la instrucción "USEND" se interconectan del siguiente modo.

Segmento 2: En caso de fallo de USEND, guarde el estado del siguiente modo.

3964

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Programa de la CPU 2
Para almacenar los datos de URCV deben crearse las variables siguientes en un bloque de
datos global.

Se crea un FB "SLI_FB_URCV". En el se crean las siguientes variables locales.

Segmento 1: Los parámetros de la instrucción "URCV" se interconectan del siguiente modo.

Segmento 2: En caso de fallo de URCV, guarde el estado del siguiente modo.

Programación del PLC
Manual de programación y manejo, 11/2019

3965

Instrucciones
4.1 Instrucciones

Asignar una conexión de comunicación
Los parámetros de direccionamiento para conectar las dos CPU y definir la pareja de
instrucciones deben ser unitarios.
● En cada parámetro de entrada ID ("connectionID") debe almacenarse el valor hexadecimal
del identificador de hardware de la conexión S7 configurada.
Encontrará el identificador de hardware en la "Vista de redes" bajo "Conexiones".

● En cada parámetro de entrada R_ID ("instructionPair") debe almacenarse un identificador
de libre elección (como valor hexadecimal, en tamaño de bytes) para la pareja de
instrucciones. El identificador no debe estar asignado a otras parejas de instrucciones.

Comportamiento de la CPU 1
Si el parámetro de entrada REQ ("start") devuelve el estado lógico "TRUE", se inicia la
instrucción "USEND". De este modo, la instrucción "USEND" copia en la memoria de trabajo
de la CPU el juego de datos leído en el parámetro de entrada SD_1 ("sendData"). Con el
parámetro de salida DONE ("#done") a "TRUE" se indica la copia correcta del juego de datos.
Puesto que los valores de los parámetros de salida solo se muestran en el momento en que
son válidos, el estado correcto debe guardarse en la variable "done".
De acuerdo con los parámetros de entrada ID ("connectionID") y R_ID ("instructionPair"), la
instrucción "URCV" de la CPU 2 está direccionada como destinataria del juego de datos
("sendData" con el valor "HelloData"). La continuación de la transferencia de datos a través de
la conexión S7 se lleva a cabo sin más intervención por USEND ("start" puede estar ajustado
a "FALSE").
En el parámetro de salida ERROR ("error") o en la variable "memErrStatus" se indica que la
ejecución de USEND se ha realizado sin errores en el ejemplo.

3966

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Comportamiento de la CPU 2
La CPU 2 recibe un juego de datos de la CPU 1 a través de la conexión S7. De acuerdo con
los parámetros de entrada ID ("connectionID") y R_ID ("instructionPair"), la instrucción "URCV"
conoce el destinatario del juego de datos.
Si el parámetro de entrada EN_R ("start") devuelve el estado lógico "TRUE", se inicia la
instrucción "URCV" y está preparada para recibir. La instrucción "URCV" lee el juego de datos
transferido y lo copia en el rango de valores del parámetro de entrada RD_1 ("rcvData").
Con el parámetro de salida NDR ("#done") a "TRUE" se indica la copia correcta del juego de
datos. Puesto que los valores de los parámetros de salida solo se muestran en el momento en
que son válidos, el estado correcto debe guardarse en la variable "done".
En el parámetro de salida ERROR ("error") o en la variable "memErrStatus" se indica que la
ejecución de URCV se ha realizado sin errores en el ejemplo.

Código del programa
Encontrará información adicional y el código del programa del ejemplo anterior aquí: Sample
Library for Instructions (Página 615).

Consulte también
USEND: Envío de datos sin coordinación (Página 3959)
URCV: Recibir datos sin coordinación (Página 3961)

Programación del PLC
Manual de programación y manejo, 11/2019

3967

Instrucciones
4.1 Instrucciones

BSEND: Transmitir datos en segmentos
Descripción
La instrucción "BSEND" envía datos a una instrucción remota del interlocutor del tipo "BRCV
(Página 3971)". En este tipo de transferencia de datos es posible transportar una cantidad de
datos mayor entre los interlocutores que con las demás instrucciones de comunicación para
conexiones S7 configuradas. La cantidad de datos máxima asciende a 65534 bytes (acceso
estándar) o 65535 bytes (acceso optimizado) tanto en la interfaz integrada como en el CP
SIMATIC Net.

Funcionamiento
El par de instrucciones "BSEND" y "BRCV" se define con el parámetro R_ID. El parámetro
R_ID debe ser idéntico en las instrucciones conexas.
El proceso de transmisión se activa después de la llamada de la instrucción y del flanco
ascendente en la entrada de control REQ. "BSEND" no se ejecuta en segundo plano tras la
llamada, es decir, los datos solo se pueden leer dentro del programa de usuario.
El área de datos que se va a transmitir se segmenta. Cada segmento se transmite
individualmente al interlocutor. El interlocutor acusa cada segmento tras la aceptación de
dicho segmento mediante "BRCV (Página 3971)". En el caso de una segmentación de los
datos, debe llamarse la instrucción "BSEND" varias veces hasta que se hayan transmitido
todos los segmentos.
El área de datos de los datos que deben transmitirse viene determinada por SD_1. Para
garantizar la coherencia de datos, no puede volver a escribirse en la parte del área de
transmisión SD_1 utilizada actualmente hasta que no haya finalizado el proceso de
transmisión actual. Esto ocurre cuando el parámetro de estado DONE adopta el valor "1".
La longitud de los datos de transmisión se define individualmente para cada petición con LEN.
Si LEN = "0" se envían todos los datos direccionados por el parámetro SD_1.
Con un flanco ascendente en la entrada de control R se cancela el proceso de transmisión en
curso.
Debido a la transmisión de datos asíncrona, no es posible iniciar una nueva transmisión de
datos mientras los datos anteriores no hayan sido recogidos por la llamada de la instrucción del
interlocutor. Cuando los datos han sido recogidos, en la instrucción del interlocutor "BRCV" se
ajusta el parámetro de estado "NDR".

Nota
Migración de programas de usuario S7-400
Una CPU S7-400 interpreta el parámetro SD_1 como puntero, no como área de datos.
En el S7-1500 LEN no puede rebasar el área de SD1. En el S7-400 estaba permitido.
Recomendación: Utilice como tamaño del área de datos en el parámetro SD_1 el tamaño
máximo permitido para el parámetro LEN (65534 bytes con la interfaz integrada).

3968

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "BSEND":
Parámetro

Declaración

Tipo de da‐
tos

Área de memoria

Descripción

REQ

Input

BOOL

I, Q, M, D, L o cons‐
tante

El parámetro de control request activa el intercambio
de datos con un flanco ascendente.

R

Input

BOOL

I, Q, M, D, L o cons‐
tante

El parámetro de control reset activa la cancelación de
un intercambio de datos todavía en curso con un flan‐
co ascendente.

ID

Input

CONN_PR
G

I, Q, M, D, L, P o
constante

Parámetro de direccionamiento para indicar la cone‐
xión con la CPU interlocutora.

R_ID

Input

CONN_R_I
D

I, Q, M, D, L o cons‐
tante

Parámetro de direccionamiento para definir los pares
de instrucciones "BSEND" y "BRCV (Página 3971)".
Consulte también: Parámetros comunes de las ins‐
trucciones para la comunicación S7 (Página 3944)

SD_1

InOut

VARIANT

I, Q, M, D, L

Puntero al área de transmisión
Para transferir estructuras, estas deben ser idénticas
tanto en el lado de transmisión como en el de recep‐
ción.

LEN

InOut

WORD

I, Q, M, D, L

DONE

Output

BOOL

I, Q, M, D, L

Longitud del bloque de datos que debe transferirse en
bytes.
Si LEN = "0" se envían todos los datos de SD_1.
Parámetro de estado
● 0: la petición aún no se ha iniciado o todavía se
está ejecutando.
● 1: petición finalizada sin errores.

ERROR

Output

BOOL

I, Q, M, D, L

Parámetro de estado
● 0: ni advertencia ni error.
● 1: hay un error. STATUS devuelve información
detallada sobre el tipo de error.

STATUS

Output

WORD

I, Q, M, D, L

Parámetro de estado
Véase tabla "Parámetros ERROR y STATUS".

Encontrará más información sobre los tipos de datos válidos en "Vista general de los tipos de
datos válidos (Página 241)".

Parámetros ERROR y STATUS
La siguiente tabla contiene toda la información de error específica de "BSEND", que puede
indicarse a través de los parámetros ERROR y STATUS .
ERROR

STATUS
(decimal)

Explicación

0

11

Advertencia: La nueva petición no tiene efecto, ya que la anterior todavía no ha finalizado.

0

25

La comunicación se ha iniciado. La petición está en proceso.

Programación del PLC
Manual de programación y manejo, 11/2019

3969

Instrucciones
4.1 Instrucciones
ERROR

STATUS
(decimal)

Explicación

1

1

Se ha producido un problema de comunicación. Causas posibles:
● Descripción de la conexión no cargada (local o remoto)
● Conexión interrumpida (p. ej. cable, CPU desconectada, CP en STOP)
● Conexión con el interlocutor todavía no establecida

1

2

Acuse negativo de la instrucción del interlocutor. La instrucción no puede ejecutarse.

1

3

R_ID no es conocido en la conexión de comunicación especificada por ID, o el bloque de recepción
no se ha llamado nunca.

1

4

● Error en el puntero del área de transmisión SD_1 en cuanto a la longitud o el tipo de datos.
● El valor de LEN es superior al área SD_1.

1

5

Se ha ejecutado la solicitud de reset.

1

6

La instrucción del interlocutor se encuentra en estado DISABLED (EN_R tiene el valor "0"). Com‐
pruebe también si los parámetros de entrada de "BRCV (Página 3971)" son coherentes con
"BSEND".

1

7

La instrucción del interlocutor "BRCV (Página 3971)" no se ha vuelto a llamar desde la última
transmisión de datos.

1

8

Se ha rechazado el acceso al objeto remoto en la memoria de usuario: El área de destino en el
"BRCV (Página 3971)" correspondiente es demasiado pequeña.
En los parámetros de salida de "BRCV (Página 3971)" se notifica ERROR = 1, STATUS = 4 o
ERROR = 1, STATUS = 10.

1

10

El acceso a la memoria de usuario local no es posible (p. ej. acceso a un DB borrado).

1

18

R_ID ya existe en la conexión.

1

20

● Se ha excedido el número máximo de peticiones paralelas.
● La petición se está llamando en una clase de menor prioridad (primera llamada).

1

W#16#80
C3

(solo en S7-1500)
● Se ha excedido el número máximo de peticiones paralelas.
● La petición se llamará en una clase de baja prioridad (primera llamada).

Ejemplo
Encontrará el ejemplo aquí: Ejemplo de programa con BSEND y BRCV (Página 3973).
Encontrará información adicional y el código del programa del ejemplo aquí: Sample Library for
Instructions (Página 615).

Consulte también
Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente (Página 618)

3970

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

BRCV: Recibir datos en segmentos
Descripción
La instrucción "BRCV" recibe datos de una instrucción remota del interlocutor del tipo "BSEND
(Página 3968)". El parámetro R_ID debe ser idéntico en las instrucciones conexas.
La instrucción está lista para recibir tras la llamada con el valor "1" en la entrada de control
EN_R (STATUS = 25). Con EN_R=0 no es posible interrumpir una petición en curso.
El área de recepción máxima viene determinada por RD_1. Los datos se reciben con
coherencia si evalúa por completo la parte del área de recepción RD_1 utilizada actualmente
antes de volver a llamar el bloque con el valor "1" en la entrada de control EN_R.
Después de cada segmento de datos recibido se envía un acuse a la instrucción del
interlocutor. En el caso de varios segmentos, es necesario llamar la instrucción "BRCV" varias
veces hasta que se hayan recibido todos los segmentos. La recepción de datos asíncrona se
indica mediante STATUS = 17. La cantidad actual de datos recibidos se indica en el parámetro
LEN. El parámetro RD_1 debe permanecer constante durante la operación.
La recepción sin errores de todos los segmentos de datos se indica en el parámetro de estado
NDR con el valor "1". Los datos recibidos permanecen invariables hasta la siguiente llamada
con EN_R=1.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "BRCV":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN_R

Input

BOOL

I, Q, M, D, L o cons‐
tante

El parámetro de control enabled to receive seña‐
liza disponibilidad de recepción cuando la entra‐
da está activada.

ID

Input

CONN_PRG

I, Q, M, D, L, P o
constante

Parámetro de direccionamiento para indicar la
conexión con la CPU interlocutora.

R_ID

Input

CONN_R_ID

I, Q, M, D, L o cons‐
tante

Parámetro de direccionamiento para definir los
pares de instrucciones "BSEND (Página 3968)" y
"BRCV".
Consulte también: Parámetros comunes de las
instrucciones para la comunicación S7 (Pági‐
na 3944)

RD_1

InOut

VARIANT

I, Q, M, D, L

Puntero al área de recepción.
Para transferir estructuras, estas deben ser idén‐
ticas tanto en el lado de transmisión como en el
de recepción.

LEN

InOut

WORD

I, Q, M, D, L

Longitud de los datos recibidos hasta el momen‐
to en bytes.

NDR

Output

BOOL

I, Q, M, D, L

Parámetro de estado
● 0: La petición aún no se ha iniciado o todavía
está en curso.
● 1: La petición ha finalizado correctamente.

Programación del PLC
Manual de programación y manejo, 11/2019

3971

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

ERROR

Output

BOOL

I, Q, M, D, L

Parámetro de estado
● 0: ni advertencia ni error
● 1: Hay un error. STATUS devuelve
información detallada sobre el tipo de error.

STATUS

Output

WORD

I, Q, M, D, L

Parámetros de estado
Véase tabla "Parámetros ERROR y STATUS".

Encontrará más información sobre los tipos de datos válidos en "Vista general de los tipos de
datos válidos (Página 241)".

Parámetros ERROR y STATUS
La siguiente tabla contiene toda la información de error específica de "BRCV", que puede
indicarse a través de los parámetros ERROR y STATUS .
ERROR

STATUS
(decimal)

Explicación

0

17

Advertencia: La instrucción recibe datos de forma asíncrona. El parámetro LEN indica el número
de datos recibidos hasta ahora en bytes.

0

25

La comunicación se ha iniciado. La petición está en proceso.

1

1

Se ha producido un problema de comunicación. Causas posibles:
● Descripción de la conexión no cargada (local o remoto)
● Conexión interrumpida (p. ej. cable, CPU desconectada, CP en STOP)
● Conexión con el interlocutor todavía no establecida

1

2

Función no ejecutable (error de protocolo)

1

4

Error en el puntero del área de recepción RD_1 en cuanto a la longitud o el tipo de datos. El bloque
de datos enviado supera la longitud del área de recepción.

1

5

Petición de reset recibida, transmisión incompleta.

1

8

Error de acceso en el respectivo "BSEND (Página 3968)": Tras enviar el último segmento de datos
válido, se indica ERROR = 1 y STATUS = 4 o ERROR = 1 y STATUS = 10.

1

10

El acceso a la memoria de usuario local no es posible (p. ej. acceso a un DB borrado).

1

18

El valor del parámetro R_ID ya existe en la conexión especificada en el parámetro ID (el valor para
R_ID debe ser unívoco para la conexión).

1

20

● Se ha excedido el número máximo de peticiones paralelas.

1

W#16#80C
3

● La petición se está llamando en una clase de menor prioridad (primera llamada).
(solo en S7-1500)
● Se ha excedido el número máximo de peticiones paralelas.
● La petición se llamará en una clase de baja prioridad (primera llamada).

Ejemplo
Encontrará el ejemplo aquí: Ejemplo de programa con BSEND y BRCV (Página 3973).
Encontrará información adicional y el código del programa del ejemplo aquí: Sample Library for
Instructions (Página 615).

3972

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Consulte también
Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente (Página 618)

Ejemplo de programa con BSEND y BRCV
Introducción
En el ejemplo siguiente se utiliza una conexión S7 entre dos CPU de la serie S7-1500. Por
medio de BSEND y BRCV se envía un juego de datos de la CPU 1 a la CPU 2. Los datos son
transferidos con acuse (confirmación ) por BRCV.

Requisitos
● Se han creado dos CPU de la serie S7-1500 y se han conectado entre sí vía PROFINET.
Hay una conexión S7 configurada.

● En "<CPU> > Propiedades > Protección" se ha ajustado para las CPU un nivel de
protección bajo para garantizar que se permitan accesos de lectura y escritura.

Programa de la CPU 1
Para almacenar los datos de BSEND deben crearse las variables siguientes en un bloque de
datos global.

Para el juego de datos se crea el siguiente tipo de datos PLC.

Programación del PLC
Manual de programación y manejo, 11/2019

3973

Instrucciones
4.1 Instrucciones

Para la transferencia de datos se crea el siguiente bloque de datos sobre la base del tipo de
datos PLC "BSEND_User" que se ha creado.

Se crea un FB "SLI_FB_BSEND". En él se crean las siguientes variables locales.

Segmento 1: Los parámetros de la instrucción "BSEND" se interconectan del siguiente modo.

Segmento 2: En caso de fallo de BSEND, guarde el estado del siguiente modo.

3974

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Programa de la CPU 2
Para almacenar los datos de BRCV deben crearse las variables siguientes en un bloque de
datos global.

Para el juego de datos se crea el siguiente tipo de datos PLC.

Para la recepción de los datos se crea el siguiente bloque de datos sobre la base del tipo de
datos PLC "BSEND_User" que se ha creado.

Se crea un FB "SLI_FB_BSEND". En él se crean las siguientes variables locales.

Segmento 1: Los parámetros de la instrucción "BRCV" se interconectan del siguiente modo.

Programación del PLC
Manual de programación y manejo, 11/2019

3975

Instrucciones
4.1 Instrucciones

Segmento 2: En caso de fallo de BRCV, guarde el estado del siguiente modo.

Asignar una conexión de comunicación
Los parámetros de direccionamiento para conectar las dos CPU y definir la pareja de
instrucciones deben ser unitarios.
● En cada parámetro de entrada ID ("connectionID") debe almacenarse el valor hexadecimal
del identificador de hardware de la conexión S7 configurada.
Encontrará el identificador de hardware en la "Vista de redes" bajo "Conexiones".

● En cada parámetro de entrada R_ID ("instructionPair") debe almacenarse un identificador
de libre elección (como valor hexadecimal, en tamaño de bytes) para la pareja de
instrucciones. El identificador no debe estar asignado a otras parejas de instrucciones.

3976

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Comportamiento de la CPU 1
De acuerdo con los parámetros de entrada ID ("connectionID") y R_ID ("instructionPair"), la
instrucción "BRCV" de la CPU 2 está direccionada como destinataria del juego de datos
("SLI_plcDB_sendData_BSEND").
Si el parámetro de entrada REQ ("start") devuelve el estado lógico "TRUE", se inicia la
instrucción "BSEND". Durante varias llamadas, la instrucción "BSEND" envía a la CPU 2 por
segmentos el juego de datos leído en el parámetro de entrada SD_1
("SLI_plcDB_sendData_BSEND"). De acuerdo con el valor "0" del parámetro de entrada LEN
("maxLength"), la longitud del juego de datos es ilimitada.
Con el parámetro de salida DONE ("#done") a "TRUE" se indica la transmisión correcta del
juego de datos. Puesto que los valores de los parámetros de salida solo se muestran en el
momento en que son válidos, el estado correcto debe guardarse en la variable "done".
En el parámetro de salida ERROR ("error") o en la variable "memErrStatus" se indica que la
ejecución se ha realizado sin errores en el ejemplo.

No es posible iniciar una nueva transmisión de datos mientras los datos anteriores no hayan
sido recogidos por la llamada de BRCV.

Comportamiento de la CPU 2
La CPU 2 recibe un juego de datos de la CPU 1 (en segmentos) a través de la conexión S7. De
acuerdo con los parámetros de entrada ID ("connectionID") y R_ID ("instructionPair"), la
instrucción "BRCV" conoce el destinatario del juego de datos.
Si el parámetro de entrada EN_R ("start") devuelve el estado lógico "TRUE", se inicia la
instrucción "BRCV" y está preparada para recibir. Durante varias llamadas, la instrucción
"BRCV" recibe el juego de datos en segmentos y lo guarda en el parámetro de entrada RD_1
("SLI_plcDB_rcvData_BRCV").

Con el parámetro de salida NDR ("#done") a "TRUE" se indica la recepción correcta de todo
el juego de datos. La longitud en BYTE del juego de datos realmente transferido se obtiene en

Programación del PLC
Manual de programación y manejo, 11/2019

3977

Instrucciones
4.1 Instrucciones
el parámetro de salida LEN ("#length"). Su valor solo se muestra durante el estado correcto. A
continuación se lee "0". Puesto que los valores de los parámetros de salida solo se muestran
en el momento en que son válidos, el estado correcto de #done debe guardarse en la variable
"done", y la longitud en BYTE en la variable "readLength".
En el parámetro de salida ERROR ("error") o en la variable "memErrStatus" se indica que la
ejecución se ha realizado sin errores en el ejemplo.

Código del programa
Encontrará información adicional y el código del programa del ejemplo anterior aquí: Sample
Library for Instructions (Página 615).

Consulte también
BSEND: Transmitir datos en segmentos (Página 3968)
BRCV: Recibir datos en segmentos (Página 3971)

4.1.6.2

Open User Communication

Coherencia de datos
Aseguramiento de la coherencia de datos
En la familia de módulos S7-1500 es posible modificar parámetros durante el funcionamiento
en las instrucciones de la Open User Communication. Los parámetros modificados se utilizan
de inmediato aunque haya todavía una petición activa. En ambos casos pueden producirse
incoherencias en los datos. Para evitar incoherencias en los datos, en ningún caso deben
modificarse parámetros mientras se está ejecutando una petición.

3978

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

TSEND_C: Establecer conexión y enviar datos
TSEND_C: Enviar datos a través de Ethernet
Validez
La siguiente descripción de la instrucción "TSEND_C" se aplica a las CPU S7-1200 con versión
de firmware < V4.0.

Descripción
La instrucción "TSEND_C" configura y establece una conexión TCP o ISO on TCP. Una vez
configurada y establecida la conexión, la CPU la mantiene y la vigila automáticamente. Para
configurar la conexión se utiliza la descripción de la conexión especificada en el parámetro
CONNECT.
La instrucción se ejecuta de forma asíncrona y tiene las funciones siguientes:
● Configurar y establecer una conexión de comunicación:
La conexión se configura y establece con CONT=1. Si la conexión se establece
correctamente, el parámetro DONE se pone a "1" durante un ciclo. Si la CPU pasa al estado
operativo STOP, se interrumpe una conexión existente y se elimina la conexión creada.
Para volver a configurar y establecer la conexión, es preciso volver a ejecutar "TSEND_C".
El número de conexiones posibles se indica en los datos técnicos de la CPU.
● Enviar datos a través de la conexión existente:
el área de transmisión se especifica en el parámetro DATA. Este contiene la dirección y la
longitud de los datos que deben enviarse. No utilice en el parámetro DATA áreas de datos
con el tipo de datos BOOL o Array of BOOL. Si utiliza únicamente valores simbólicos en el
parámetro DATA, el parámetro LEN debe tener el valor "0".
● La orden de transmisión se ejecuta cuando se detecta un flanco ascendente en el
parámetro REQ. En el parámetro LEN se especifica el número máximo de bytes que deben
enviarse con una orden de transmisión. Al enviar datos (flanco ascendente en el parámetro
REQ), el parámetro CONT deberá tener el valor "1" para establecer o mantener una
conexión. Los datos por enviar no se pueden editar hasta que no se haya ejecutado por
completo la orden de transmisión. Si la orden de transmisión se ejecuta correctamente, el
parámetro DONE se pone a "1". No obstante, el estado lógico "1" en el parámetro DONE no
confirma que el interlocutor haya leído ya los datos enviados.
● Deshacer la conexión:
La conexión se deshace cuando el parámetro CONT se pone al valor "0" aunque no haya
finalizado aún una transferencia de datos en curso. Esto no es aplicable si se utiliza una
conexión ya configurada para "TSEND_C".
Ajustando el parámetro COM_RST a "1", se puede resetear el establecimiento de la conexión
o una transferencia de datos en curso en cualquier momento. Con ello, la conexión existente
se deshace y se establece una nueva. Si se están transfiriendo datos al reiniciarse la
instrucción, podrían perderse datos.

Programación del PLC
Manual de programación y manejo, 11/2019

3979

Instrucciones
4.1 Instrucciones
Para volver a habilitar "TSEND_C" tras la ejecución (DONE = 1), debe llamar la instrucción una
vez con REQ = 0.
Nota
Soporte en caso de programación de conexiones
Cuando se selecciona una instrucción de comunicación TCON, TSEND_C o TRCV_C en un
bloque de programa y se crean y parametrizan conexiones del tipo TCP, UDP o ISO-on-TCP,
existe la posibilidad de recibir ayuda de la parametrización de conexiones.
La parametrización de conexiones se encuentra en la ventana de inspección del editor de
programación.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "TSEND_C":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

REQ

Input

BOOL

I, Q, M, D, L

Inicia la orden de transmisión cuando se detecta un
flanco ascendente.

CONT

Input

BOOL

I, Q, M, D, L

Controla la conexión:
● 0: Deshacer la conexión
● 1: Establecer y mantener la conexión
Al enviar datos (flanco ascendente en el parámetro
REQ), el parámetro CONT deberá tener el valor
TRUE para establecer o mantener una conexión.

LEN

Input

UINT

I, Q, M, D, L o cons‐ Número máximo de bytes que se envían con la or‐
tante
den. Si utiliza únicamente valores simbólicos en el
parámetro DATA, el parámetro LEN debe tener el
valor "0".

CONNECT

InOut

TCON_Param

D

Puntero hacia la descripción de la conexión
Consulte también: AUTOHOTSPOT

DATA

InOut

VARIANT

I, Q, M, D, L

Puntero al área de transmisión que contiene la di‐
rección y la longitud de los datos por enviar (longi‐
tud máxima: 8192 bytes).
Para transferir estructuras, estas deben ser idénti‐
cas tanto en el lado de transmisión como en el de
recepción.

COM_RST

InOut

BOOL

I, Q, M, D, L

Reinicia la instrucción:
● 0: Irrelevante
● 1: Reinicio completo de la instrucción, con lo
que se deshace la conexión existente y se
establece una nueva.

DONE

Output

BOOL

I, Q, M, D, L

Parámetro de estado con los valores siguientes:
● 0: Orden no iniciada aún o en ejecución
● 1: Orden finalizada sin errores

3980

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

BUSY

Output

BOOL

I, Q, M, D, L

Parámetro de estado con los valores siguientes:
● 0: Orden no iniciada aún o ya finalizada
● 1: Orden no finalizada aún. No es posible iniciar
una nueva orden.

ERROR

Output

BOOL

I, Q, M, D, L

Parámetro de estado con los valores siguientes:
● 0: Ningún error
● 1: Se han producido errores

STATUS

Output

WORD

I, Q, M, D, L

Estado de la instrucción

Encontrará más información sobre los tipos de datos válidos en "Vista general de los tipos de
datos válidos (Página 241)".

Parámetros BUSY, DONE y ERROR
El estado de ejecución se comprueba con los parámetros BUSY, DONE, ERROR y STATUS.
El parámetro BUSY indica el estado de ejecución. El parámetro DONE permite comprobar si
una orden se ha ejecutado correctamente. El parámetro ERROR se activa si ocurren errores
durante la ejecución de "TSEND_C". La información de error se indica en el parámetro
STATUS.
La tabla siguiente muestra la relación entre los parámetros BUSY, DONE y ERROR:
BUSY

DONE

ERROR

Descripción

1

-

-

La orden se está procesando.

0

1

0

La orden se ha ejecutado correctamente.

0

0

1

La orden se ha finalizado con un error. La causa del error se indica en el parámetro
STATUS.

0

0

0

No se ha asignado ninguna nueva orden.

Parámetros ERROR y STATUS
ERROR

STATUS*

Descripción

(W#16#...)
0

0000

Orden finalizada sin errores.

0

0001

El establecimiento de la conexión ha finalizado.

0

0003

La desconexión ha finalizado.

0

7000

No se está procesando ninguna orden.

0

7001

● Iniciar procesamiento de la orden
● Establecer conexión
● Esperar al interlocutor

0

7002

Datos enviados.

0

7003

Se está deshaciendo la conexión.

0

7004

Conexión establecida y vigilada, no se está procesando ninguna orden.

1

80A0

Error de grupo para los códigos de error 80A1 y 80A2.

Programación del PLC
Manual de programación y manejo, 11/2019

3981

Instrucciones
4.1 Instrucciones
ERROR

STATUS*

Descripción

(W#16#...)
1

80A1

● El usuario ya está utilizando la conexión o el puerto.
● Error de comunicación:
–

La conexión indicada no se ha establecido todavía.

–

La conexión indicada se está finalizando. No es posible transferir a través de esta
conexión.

–

La interfaz se está reinicializando.

1

80A2

El sistema está utilizando el puerto local o remoto.

1

80A3

Se está intentando finalizar una conexión no existente.

1

80A4

La dirección IP del punto final remoto de la conexión no es válida, es decir, concuerda con la
dirección IP del interlocutor local.

1

80A7

Error de comunicación: Se ha llamado la instrucción con COM_RST = 1 antes de finalizar la
orden de transmisión.

1

80AA

Se está intentando establecer una conexión desde otro bloque con la misma ID de conexión.
Repita la orden con un nuevo flanco ascendente en el parámetro REQ.

1

80B2

El parámetro CONNECT apunta a un bloque de datos que ha sido generado con el atributo
"Guardar solo en la memoria de carga".

1

80B3

Parametrización incoherente: Error de grupo para los códigos de error 80A0 a 80A2, 80A4, 80B4
a 80B9.

1

80B4

Al establecer una conexión pasiva (active_est = FALSE) con la variante de protocolo ISO on TCP
(connection_type = B#16#12) se ha infringido una (o ambas) de las condiciones siguientes:
"local_tsap_id_len >= B#16#02" y/o "local_tsap_id[1] = B#16#E0".

1

80B5

Con el tipo de conexión 13 = UDP solo se permite un establecimiento pasivo de la conexión.

1

80B6

Error de parametrización en el parámetro connection_type del bloque de datos para la descrip‐
ción de la conexión.

1

80B7

Error en uno de los parámetros siguientes del bloque de datos para la descripción de la conexión:
block_length, local_tsap_id_len, rem_subnet_id_len, rem_staddr_len, rem_tsap_id_len,
next_staddr_len.

1

8085

El parámetro LEN excede el valor máximo admisible.

1

8086

El parámetro ID dentro del parámetro CONNECT está fuera del rango admisible.

1

8087

Se ha alcanzado el número máximo de conexiones, no es posible establecer más conexiones.

1

8088

El valor del parámetro LEN no es compatible con el área de recepción indicada en el parámetro
DATA.

1

8089

El parámetro CONNECT no apunta a un bloque de datos.

1

8091

Se ha excedido la profundidad de anidamiento máxima.

1

809A

El parámetro CONNECT apunta a un campo que no concuerda con la longitud de la descripción
de la conexión.

1

809B

La ID del dispositivo local indicado en la descripción de la conexión no concuerda con la CPU.

1

80C3

● Todos los recursos de conexión están ocupados.
● Ya se está procesando un bloque con esta ID en otro grupo de prioridad.

3982

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
ERROR

STATUS*

Descripción

(W#16#...)
1

80C4

Error de comunicación temporal:
● La conexión no se puede establecer en estos momentos.
● La conexión no se puede establecer porque los cortafuegos que están en la vía de conexión
no están activados para los puertos necesarios.
● La interfaz está recibiendo nuevos parámetros o la conexión se está estableciendo.
● Una instrucción "TDISCON" está deshaciendo la conexión configurada.
● La conexión utilizada está siendo finalizada por una llamada con COM_RST= 1

1

80C6

Error de red remoto. No es posible acceder al interlocutor remoto.

1

8722

Parámetro CONNECT: El rango de origen no es válido. El rango no existe en el DB.

1

873A

Parámetro CONNECT: Imposible acceder a la descripción de la conexión (p. ej. porque el DB no
está disponible).

1

877F

Parámetro CONNECT: Error interno.

1

8822

Parámetro DATA: El área de origen no es válida, el área no existe en el DB.

1

8824

Parámetro DATA: Error de área en el puntero VARIANT.

1

8832

Parámetro DATA: El número de DB es demasiado alto.

1

883A

Parámetro DATA: Imposible acceder al área de datos, p. ej., porque el bloque de datos no existe.

1

887F

Parámetro DATA: Error interno, p. ej., referencia VARIANT no admisible.

1

893A

Parámetro ADDR: Imposible acceder al área de transmisión (p. ej., porque el DB no está dispo‐
nible).

* Los códigos de error en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Nota
Mensajes de error de las instrucciones "TCON", "TSEND", "T_DIAG" y "TDISCON"
La instrucción "TSEND_C" utiliza internamente las instrucciones "TCON (Página 4045)",
"TSEND (Página 4061)", "T_DIAG (Página 4112)", "T_RESET (Página 4106)" y "TDISCON
(Página 4056)". Los mensajes de error de estas instrucciones pueden emitirse también en el
parámetro STATUS. El significado de los códigos de error está descrito en las instrucciones
correspondientes. En caso de haber códigos de error idénticos de instrucciones usadas
internamente con un significado distinto, es posible determinar la instrucción que ha emitido el
error mediante el bloque de datos de instancia de "TSEND_C".

Consulte también
Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente (Página 618)

Programación del PLC
Manual de programación y manejo, 11/2019

3983

Instrucciones
4.1 Instrucciones

TSEND_C: Establecer conexión y enviar datos
Validez
La siguiente descripción de la instrucción "TSEND_C" es válida para:
● Ethernet
– CPU S7-1200 con versión de firmware ≥ V4.0 y CPU S7-1500
– CPU S7-1500 con versión de firmware V2.1 o superior: Comunicación UDP-Multicast
– CPU S7-1500 con versión de firmware V2.0 o superior y TSEND_C a partir de la versión
V3.2 de la instrucción: Secure Communication
● PROFIBUS
Conexiones FDL de S7‑1500 con CM 1542‑5 a partir de V2.0 con el tipo de datos de sistema
TCON_FDL

Descripción
La instrucción "TSEND_C" permite configurar y establecer una conexión. Una vez configurada
y establecida la conexión, la CPU la mantiene y la vigila automáticamente.
La instrucción se ejecuta de forma asíncrona y tiene las funciones siguientes:
● Configurar y establecer una conexión
● Enviar datos a través de la conexión existente
● Deshacer o inicializar la conexión
La instrucción "TSEND_C" utiliza internamente las instrucciones de comunicación "TCON",
"TSEND", "T_DIAG", "T_RESET" y "TDISCON".
Nota
Soporte en caso de programación de conexiones
Cuando se selecciona una instrucción de comunicación TCON, TSEND_C o TRCV_C en un
bloque de programa y se crean y parametrizan conexiones del tipo TCP, UDP, ISO-on-TCP o
FDL, puede recibir ayuda para la parametrización de conexiones. Las conexiones UDPMulticast a través de interfaces PROFINET integradas son posibles con las CPU S7-1500 con
versión de firmware V2.1 o superior.
La parametrización de conexiones se encuentra en la ventana de inspección del editor de
programación.

3984

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Configurar y establecer una conexión
La conexión de comunicación se crea y establece con CONT=1. El número de conexiones
posibles se indica en los datos técnicos de la CPU. Para configurar la conexión se utiliza la
descripción de la conexión especificada en el parámetro CONNECT. Existen los siguientes
tipos de conexión:
● Conexiones programadas (establecimiento de la conexión con "TCON"):
– TCP/UDP: Descripción de la conexión mediante el tipo de datos de sistema
TCON_IP_v4
– TCP / UDP mediante secure communication: Descripción de la conexión mediante los
tipos de datos de sistema TCON_IP_V4_SEC o TCON_QDN_SEC
– ISO on TCP: Descripción de la conexión mediante el tipo de datos de sistema
TCON_IP_RFC
– ISO: Descripción de la conexión mediante el tipo de datos de sistema TCON_ISOnative
(CP 1543‑1 / CP 1545‑1)
– Conexiones de Telecontrol a clientes SMS: Descripción de la conexión mediante el tipo
de datos de sistema TCON_PHONE
Para este tipo de conexión, la estación debe tener acceso a una red de telefonía móvil
a través de un CP de telefonía móvil.
– Conexiones FDL de S7‑1500 con CM 1542‑5 a partir de V2.0 con el tipo de datos de
sistema TCON_FDL
● Conexiones configuradas
– Especificación de una conexión existente en el tipo de datos del sistema
TCON_Configured.
Si la CPU pasa al estado operativo STOP, se interrumpe una conexión existente y se elimina
la conexión creada. Para volver a configurar y establecer la conexión, es preciso volver a
ejecutar "TSEND_C".

Enviar datos a través de la conexión existente
La orden de transmisión se ejecuta cuando se detecta un flanco ascendente en el parámetro
REQ. Como se describe anteriormente, primero se establece la conexión.
El área de transmisión se especifica en el parámetro DATA. Este contiene la dirección y la
longitud de los datos que deben enviarse. No utilice en el parámetro DATA áreas de datos con
el tipo de datos BOOL o Array of BOOL. En el parámetro LEN se especifica el número máximo
de bytes que deben enviarse con una orden de transmisión. Si utiliza únicamente un área de
transmisión de acceso optimizado en el parámetro DATA, el parámetro LEN debe tener el valor
"0".
Los datos por enviar no se pueden editar hasta que no se haya ejecutado por completo la orden
de transmisión.

Deshacer e inicializar la conexión
La conexión se deshace cuando el parámetro CONT se pone al valor "0" aunque no haya
finalizado aún una transferencia de datos en curso. Esto no es aplicable si se utiliza una
conexión configurada para "TSEND_C".

Programación del PLC
Manual de programación y manejo, 11/2019

3985

Instrucciones
4.1 Instrucciones
Ajustando el parámetro COM_RST a "1" se puede inicializar la conexión en cualquier
momento. Con ello, la conexión existente se deshace y se establece una nueva. Si se están
transfiriendo datos en ese momento, podrían perderse.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "TSEND_C":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

REQ

Input

BOOL

I, Q, M, D, L, T, C o
constante

Inicia la orden de transmisión cuando se detecta un
flanco ascendente.

CONT

Input

BOOL

I, Q, M, D, L

Controla la conexión:
● 0: Deshacer la conexión.
● 1: Establecer y mantener la conexión.

LEN

Input

UDINT

I, Q, M, D, L o cons‐ Parámetro opcional (oculto)
tante
Número máximo de bytes que se envían con la or‐
den. Si utiliza un área de transmisión de acceso
optimizado en el parámetro DATA, el parámetro
LEN debe tener el valor "0".
En conexiones FDL del CM 1542‑5 la longitud má‐
xima es de 240 bytes. Tenga en cuenta las longitu‐
des máximas que se pueden procesar en los inter‐
locutores.

3986

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CONNECT

InOut

VARIANT

D

Puntero hacia la estructura de la descripción de la
conexión:
● Conexión programada:
–

Con TCP o UDP utilice el tipo de datos de
sistema TCON_IP_v4. Consulte la
descripción enAUTOHOTSPOT.

–

Con TCP o UDP mediante secure
communication utilice la estructura
TCON_IP_V4_SEC o TCON_QDN_SEC.
Consulte la descripción en: Parámetros de
conexión conforme a TCON_IP_V4_SEC o
parámetros de conexión conforme a
TCON_QDN_SEC

–

Con ISO-on-TCP utilice el tipo de datos de
sistema TCON_IP_RFC. Consulte la
descripción en AUTOHOTSPOT.

–

Con ISO utilice el tipo de datos de sistema
TCON_ISOnative (CP 1543‑1 / CP 1545‑1).
Consulte la descripción en la instrucción
"TCON (Página 4048)".

–

Para establecer conexiones con clientes
SMS utilice el tipo de datos de sistema
TCON_PHONE. Consulte la descripción en
AUTOHOTSPOT".

–

Para conexiones FDL del CM 1542‑5 utilice
el tipo de datos de sistema TCON_FDL,
consulte AUTOHOTSPOT.

● Conexión configurada:
–

DATA

InOut

VARIANT

I, Q, M, D, L

Para conexiones existentes, utilice el tipo de
datos de sistema TCON_Configured.
Consulte la descripción más abajo, en "Tipo
de datos de sistema para conexiones
configuradas".

Puntero hacia el área de transmisión que contiene
la dirección y la longitud de los datos por enviar.
Para transferir estructuras, estas deben ser idénti‐
cas tanto en el lado de transmisión como en el de
recepción.

ADDR

InOut

VARIANT

D

Parámetro oculto que debe utilizarse con UDP. En
este caso contiene un puntero al tipo de datos de
sistema TADDR_Param. Guarde la información de
dirección del destinatario (dirección IP y número de
puerto) en un bloque de datos con el tipo de datos
de sistema TADDR_Param.
Consulte también: Estructura de la información de
dirección del interlocutor remoto en UDP (Pági‐
na 4096)

Programación del PLC
Manual de programación y manejo, 11/2019

3987

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

COM_RST

InOut

BOOL

I, Q, M, D, L

Parámetro opcional (oculto)
Efectúa la inicialización de la conexión:
● 0: Irrelevante
● 1: Se inicializa la conexión existente.
El parámetro COM_RST se restablece tras la eva‐
luación mediante la instrucción "TSEND_C" y, por
tanto, no debe interconectarse estáticamente.

DONE

Output

BOOL

I, Q, M, D, L

Parámetro de estado con los valores siguientes:
● 0: Orden de transmisión no iniciada aún o en
ejecución.
● 1: Orden de transmisión ejecutada sin errores.
Este estado solo se muestra durante un ciclo.
El parámetro de salida DONE se activa cuando fi‐
naliza correctamente un paso intermedio del pro‐
cesamiento (establecer conexión, enviar, deshacer
conexión) y cuando la ejecución de "TSEND_C" fi‐
naliza correctamente.

BUSY

Output

BOOL

I, Q, M, D, L

Parámetro de estado con los valores siguientes:
● 0: Orden de transmisión no iniciada aún o ya
finalizada.
● 1: Orden de transmisión no finalizada aún. No
es posible iniciar una nueva orden de
transmisión.

ERROR

Output

BOOL

I, Q, M, D, L

Parámetro de estado con los valores siguientes:
● 0: Ningún error
● 1: Se ha producido un error al establecer la
conexión, al enviar los datos o al deshacer la
conexión.
El parámetro de salida ERROR puede activarse
debido a un error en la instrucción "TSEND_C" o en
las instrucciones de comunicación utilizadas inter‐
namente.

STATUS

Output

WORD

I, Q, M, D, L

Estado de la instrucción (véase la descripción "Pa‐
rámetros ERROR y STATUS").

Encontrará más información sobre los tipos de datos válidos en "Vista general de los tipos de
datos válidos (Página 241)".

3988

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros REQ, CONT y COM_RST
El parámetro CONT controla el establecimiento de conexión de la instrucción "TSEND_C",
independientemente del parámetro REQ. El comportamiento del parámetro CONT depende
en parte de si se utiliza una conexión programada o configurada:
● Si CONT = "0": No se envían datos (independientemente de si se utiliza una conexión
programada o configurada).
● Al cambiar de CONT = "0" a "1":
– En el caso de una conexión programada, esta se establece con "TCON".
– En el caso de una conexión configurada, esta se comprueba con "T_DIAG".
● Si CONT = "1":
– Mientras no se envíe ningún dato (REQ="0"), la conexión se comprobará con "T_DIAG".
– Si las instrucciones de comunicación internas notifican que no hay ningún punto final de
la conexión, esta se restablecerá automáticamente mediante "TCON".
● Al cambiar de CONT = "1" a "0":
– En el caso de una conexión programada, esta se deshace con "TDISCON".
– En el caso de una conexión configurada, esta se inicializa con "T_RESET".
El parámetro COM_RST inicializa la conexión al cambiar de "0" a "1":
● Si hay una conexión establecida, esta se inicializa mediante "T_RESET"
(independientemente de si se utiliza una conexión programada o configurada).
● Si no hay ninguna conexión establecida, la activación del parámetro no tiene efecto.
Los parámetros REQ y COM_RST solo se hacen efectivos si se ha puesto CONT a "1". La tabla
siguiente muestra la relación entre los parámetros REQ, CONT y COM_RST:
REQ

CONT

COM_
RST

Estado de la ins‐
trucción

irrele‐
vante

0

irrele‐
vante

No se ha ejecuta‐ Ninguna orden activa (STATUS = 7000).
do aún

irrele‐
vante

0

irrele‐
vante

Inicialización

Se está deshaciendo la conexión. La instrucción se inicializa.

irrele‐
vante

0>1

irrele‐
vante

Establecimiento
de la conexión

La conexión se está estableciendo. Todavía no se transfieren datos.

0

1

0

Conexión esta‐
blecida

La conexión se ha establecido y se vigila con la instrucción "T_DIAG".

irrele‐
vante

1

0>1

Conexión esta‐
blecida

La conexión se interrumpe brevemente y se inicializa con "T_RESET".

0>1

1

0

Conexión esta‐
blecida

La instrucción empieza a enviar.

irrele‐
vante

1

0>1

Enviando datos

La transferencia de datos se interrumpe. La conexión se inicializa.

Programación del PLC
Manual de programación y manejo, 11/2019

Descripción

3989

Instrucciones
4.1 Instrucciones

Tipo de datos de sistema para conexiones configuradas
Para conexiones configuradas, utilice en el parámetro CONNECT la siguiente estructura para
la descripción de la conexión según TCON_Configured:
Byte

Parámetro

Tipo de datos Valor de arran‐ Descripción
que

0 … 1 InterfaceID

HW_ANY

-

Identificador de hardware de la interfaz local (rango de valo‐
res: de 0 a 65535).

2 … 3 ID

CONN_OUC

-

Referencia a la conexión (rango de valores: de 1 a 4095).
Indique la ID de la conexión existente.

4

ConnectionType

BYTE

-

Tipo de conexión
Seleccione 254 (decimal) para una conexión configurada.

Nota
Por motivos de compatibilidad, los parámetros InterfaceID y ConnectionType forman parte de
la estructura para describir la conexión según TCON_Configured. Estos parámetros no tienen
efecto sobre la parametrización de conexión, solo el parámetro ID para la ID de conexión se
evalúa en la parametrización de la conexión.

Parámetros BUSY, DONE y ERROR
El estado de ejecución se comprueba con los parámetros BUSY, DONE, ERROR y STATUS.
El parámetro BUSY indica el estado de ejecución. El parámetro DONE permite comprobar si
una orden de transmisión se ha ejecutado correctamente. El parámetro ERROR se activa si
ocurren errores durante la ejecución de "TSEND_C". La información de error se indica en el
parámetro STATUS.
La tabla siguiente muestra la relación entre los parámetros BUSY, DONE y ERROR:
DONE

BUSY

ERROR

Descripción

0

0

0

La instrucción aún no se ha ejecutado (no hay ningún flanco ascendente en el parámetro
REQ).

0

1

0

La instrucción se ejecuta y llama las instrucciones de comunicación utilizadas interna‐
mente.

1

0

0

La orden de transmisión se ha ejecutado correctamente. En el parámetro STATUS se
devuelve "0000". DONE = "1" solo se muestra durante un ciclo.

0

0

1

La ejecución de la instrucción o un paso intermedio ha finalizado con un error. Si se
produce un error como consecuencia de una instrucción de comunicación utilizada inter‐
namente, se indica el error que se ha producido en primer lugar durante el procesamiento.
Este estado solo se muestra durante un ciclo.

Parámetros ERROR y STATUS
ERROR

STATUS*

Descripción

(W#16#...)
0

0000

Orden de transmisión ejecutada sin errores.

0

0001

Comunicación establecida.

3990

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
ERROR

STATUS*

Descripción

(W#16#...)
0

0003

Comunicación desconectada.

0

7000

No se está procesando ninguna orden de transmisión, no se ha establecido ninguna conexión.

0

7001

Primera llamada al establecer una conexión.

0

7002

La conexión se está estableciendo (REQ irrelevante)

0

7003

Se está deshaciendo la conexión.

0

7004

Conexión establecida y vigilada. No hay ninguna orden de transmisión activa.

0

7005

Transmisión de datos en curso.

1

80A1

● El usuario ya está utilizando la conexión o el puerto.
● Error de comunicación:
–

La conexión indicada no se ha establecido todavía.

–

La conexión indicada se está finalizando.
No es posible transferir a través de esta conexión.

–

La interfaz se está reinicializando.

1

80A3

La instrucción "T_DIAG" subordinada ha notificado que se ha deshecho la conexión.

1

80A4

La dirección IP del punto final remoto de la conexión no es válida o bien concuerda con la
dirección IP del interlocutor local.

1

80A7

Error de comunicación: Se ha llamado la instrucción con COM_RST = 1 antes de finalizar la
orden de transmisión.

1

80AA

Se está intentando establecer una conexión desde otro bloque con la misma ID de conexión.
Repita la orden con un nuevo flanco ascendente en el parámetro REQ.

1

80B3

● Si se utiliza la variante de protocolo UDP, el parámetro ADDR no contendrá datos.
● Error en la descripción de la conexión
● El puerto local ya se utiliza en otra descripción de conexión.

1

80B4

Al establecer una conexión pasiva (active_est = FALSE) con la variante de protocolo ISO on TCP
(connection_type = B#16#12) se ha infringido una (o ambas) de las condiciones siguientes:
● local_tsap_id_len >= B#16#02
● local_tsap_id[1] = B#16#E0

1

80B5

Con el tipo de conexión 13 = UDP solo se permite un establecimiento pasivo de la conexión.

1

80B6

Error de parametrización en el parámetro connection_type del bloque de datos para la descrip‐
ción de la conexión.

1

80B7

● Para el tipo de datos de sistema TCON_Param:
Error en uno de los parámetros siguientes del bloque de datos para la descripción de la
conexión: block_length, local_tsap_id_len, rem_subnet_id_len, rem_staddr_len,
rem_tsap_id_len, next_staddr_len.
● Para los tipos de datos de sistema TCON_IP_V4 y TCON_IP_RFC:
La dirección IP del punto final del interlocutor se ha puesto a 0.0.0.0.

1

8085

El parámetro LEN excede el valor máximo admisible.

1

8086

El parámetro ID dentro del parámetro CONNECT está fuera del rango admisible.

1

8087

Se ha alcanzado el número máximo de conexiones, no es posible establecer más conexiones.

1

8088

El valor del parámetro LEN no es compatible con el área de recepción indicada en el parámetro
DATA.

Programación del PLC
Manual de programación y manejo, 11/2019

3991

Instrucciones
4.1 Instrucciones
ERROR

STATUS*

Descripción

(W#16#...)
1

8089

● El parámetro CONNECT no apunta a un bloque de datos.
● El parámetro CONNECT no apunta a una descripción de conexión.
● La descripción de conexión generada manualmente tiene una estructura incorrecta para el
tipo de conexión seleccionado.

1

8091

Se ha excedido la profundidad de anidamiento máxima.

1

809A

El parámetro CONNECT apunta a un campo que no concuerda con la longitud de la descripción
de la conexión.

1

809B

InterfaceID no es válida:
● No apunta a una interfaz de CPU local o un CP.
● No puede tener el valor 0 en caso de utilizar la parametrización de la conexión.
● No puede tener el valor 0 en la estructura TCON_xxx utilizada. Ver TCON: Establecer una
conexión (Página 4048)

1

80C3

● Todos los recursos de conexión están ocupados.
● Ya se está procesando un bloque con esta ID en otro grupo de prioridad.

1

80C4

Error de comunicación temporal:
● La conexión no se puede establecer en estos momentos.
● La conexión no se puede establecer porque los cortafuegos que están en la vía de conexión
no están activados para los puertos necesarios.
● La interfaz está recibiendo nuevos parámetros o la conexión se está estableciendo.
● Una instrucción "TDISCON (Página 4056)" está deshaciendo la conexión configurada.
● La conexión utilizada está siendo finalizada por una llamada con COM_RST = 1.
● Temporalmente no se dispone de recursos de recepción en el interlocutor. El interlocutor no
está preparado para la recepción.

1

80C5

1

80C6

● El interlocutor ha finalizado la conexión.
● LSAP del interlocutor remoto no habilitado
Error de red:
● No es posible acceder al interlocutor remoto.
● Interrupción física en PROFIBUS

1

8722

Parámetro CONNECT: El rango de origen no es válido. El rango no existe en el DB.

1

873A

Parámetro CONNECT: Imposible acceder a la descripción de la conexión (p. ej. porque el DB no
está disponible).

1

877F

Parámetro CONNECT: Error interno.

1

8822

Parámetro DATA: El área de origen no es válida, el área no existe en el DB.

1

8824

Parámetro DATA: Error de área en el puntero VARIANT.

1

8832

Parámetro DATA: El número de DB es demasiado alto.

1

883A

Parámetro DATA: Imposible acceder al área de datos, p. ej., porque el bloque de datos no existe.

1

887F

Parámetro DATA: Error interno, p. ej., referencia VARIANT no admisible.

1

893A

Parámetro ADDR: Imposible acceder al área de transmisión (p. ej., porque el DB no está dispo‐
nible).

* Los códigos de error en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

3992

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Nota
Mensajes de error de las instrucciones "TCON", "TSEND", "T_DIAG", "T_RESET" y
"TDISCON"
La instrucción "TSEND_C" utiliza internamente las instrucciones "TCON", "TSEND
(Página 4061)", "T_DIAG (Página 4112)", "T_RESET (Página 4106)" y "TDISCON
(Página 4056)". Los mensajes de error de estas instrucciones pueden emitirse también en el
parámetro STATUS. El significado de los códigos de error está descrito en las instrucciones
correspondientes. En caso de haber códigos de error idénticos de instrucciones usadas
internamente con un significado distinto, es posible determinar la instrucción que ha emitido el
error mediante el bloque de datos de instancia de "TSEND_C".

Ejemplo
Encontrará el ejemplo aquí: Ejemplo de programa para funciones de transmisión
(Página 4009).
Encontrará información adicional y el código del programa del ejemplo aquí: Sample Library for
Instructions (Página 615).

Consulte también
Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente (Página 618)
Bytes de relleno cuando se usan tipos de datos estructurados (Página 143)

TRCV_C: Establecer conexión y recibir datos
TRCV_C: Recibir datos a través de Ethernet
Validez
La siguiente descripción de la instrucción "TRCV_C" se aplica a las CPU S7-1200 con versión
de firmware < V4.0.

Programación del PLC
Manual de programación y manejo, 11/2019

3993

Instrucciones
4.1 Instrucciones

Descripción
La instrucción "TRCV_C" se ejecuta de forma asíncrona y tiene las funciones siguientes:
1. Configurar y establecer una conexión:
"TRCV_C" crea y establece una conexión TCP o ISO on TCP. Una vez configurada y
establecida la conexión, la CPU la mantiene y la vigila automáticamente.
Para configurar la conexión se utiliza la descripción de la conexión especificada en el
parámetro CONNECT. Para establecer la conexión, el parámetro CONT se debe poner a
"1". Si la conexión se establece correctamente, el parámetro DONE se pone a "1".
Si la CPU pasa al estado operativo STOP, se interrumpe una conexión existente y se
elimina la conexión creada. Para volver a configurar y establecer la conexión, es preciso
volver a ejecutar "TRCV_C".
El número de conexiones posibles se indica en los datos técnicos de la CPU.
2. Recibir datos a través de la conexión existente:
cuando el parámetro EN_R se pone a "1", se activa la recepción de datos. Al recibir datos
(flanco ascendente en el parámetro EN_R), el parámetro CONT debe tener el valor TRUE
para establecer o mantener una conexión.
Los datos recibidos se escriben en un área de recepción. La longitud del área de recepción
se especifica, en función de la variante de protocolo utilizada, bien sea con el parámetro
LEN (si LEN <> 0), o bien mediante la indicación de longitud del parámetro DATA (si
LEN = 0). Si utiliza únicamente valores simbólicos en el parámetro DATA, el parámetro LEN
debe tener el valor "0".
Una vez finalizada correctamente la recepción de datos, el estado lógico en el parámetro
DONE es "1". Si ocurren errores durante la transferencia de datos, el parámetro DONE se
pone a "0".
3. Deshacer la conexión:
La conexión se deshace inmediatamente cuando el parámetro CONT se pone a "0".
Al activar el parámetro COM_RST se vuelve a ejecutar "TRCV_C". Con ello, la conexión
existente se deshace y se establece una nueva. Si se están recibiendo datos al reiniciarse la
instrucción, podrían perderse datos.
Nota
Soporte en caso de programación de conexiones
Cuando se selecciona una instrucción de comunicación TCON, TSEND_C o TRCV_C en un
bloque de programa y se crean y parametrizan conexiones del tipo TCP, UDP o ISO-on-TCP,
existe la posibilidad de recibir ayuda de la parametrización de conexiones.
La parametrización de conexiones se encuentra en la ventana de inspección del editor de
programación.

3994

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Modos de recepción de TRCV_C
La tabla siguiente muestra cómo se escriben los datos recibidos en el área de recepción.
Variante de protocolo

Disponibilidad de los datos en el área
de recepción

TCP

Los datos están disponibles inmediata‐ Valor hexadecimal: B#16#11
mente.
Valor entero: 17

(Modo Ad hoc)

Parámetro connection_type de la
descripción de la conexión

Los datos están disponibles en cuanto
se ha recibido toda la longitud de datos
(Recepción de datos
de longitud especifica‐ especificada en el parámetro LEN.
da)

Valor hexadecimal: B#16#11

Los datos están disponibles en cuanto
(Transmisión de datos se ha recibido toda la longitud de datos
orientada a mensajes) especificada en el parámetro LEN.

Valor hexadecimal: B#16#12

TCP

ISO on TCP

Parámetro LEN
0
de 1 a 8192

Valor entero: 17

Valor entero: 18

● de 1 a 1452 si se
utiliza un CP.
● de 1 a 8192 si no
se utiliza ningún
CP.

TCP (modo Ad hoc)
El modo Ad hoc solo está disponible en la variante de protocolo TCP. Utilice el modo Ad hoc
para recibir datos de longitudes dinámicas con la instrucción "TRCV".
El modo Ad hoc se establece asignando el valor "0" al parámetro LEN. Con el modo Ad hoc se
pueden utilizar todos los tipos de datos para bloques de datos de acceso estándar. Para
bloques de datos de acceso optimizado solo es posible utilizar el tipo de datos ARRAY of BYTE
o tipos de datos de una longitud de 8 bits (p. ej., CHAR, USINT, SINT, etc.). La longitud de
datos realmente recibida se visualiza en el parámetro RCVD_LEN.

TCP (recepción de datos de longitud especificada)
La longitud para la recepción de datos se predetermina con el valor del parámetro LEN. La
recepción de datos finalizará cuando se haya recibido la longitud de los datos indicados en el
parámetro LEN en su totalidad. Solo entonces estarán disponibles los datos en el área de
recepción (parámetro DATA). Tras la recepción, la longitud de datos realmente recibida en
bytes en el parámetro RCVD_LEN coincide con la longitud de datos del parámetro LEN.

ISO on TCP (transmisión de datos orientada a mensajes)
En la variante de protocolo ISO on TCP se envían a través de una conexión bloques cerrados
de mensajes que el receptor también reconoce como tales. Si se utiliza ISO on TCP,
"TRCV_C" notifica la recepción de los datos en cuanto se recibe el bloque de mensajes en su
totalidad. Los parámetros LEN y DATA definen el área de recepción. Si el búfer de recepción
(parámetro DATA) es demasiado pequeño para los datos enviados, "TRCV_C" notifica un
error. Tras la recepción, la longitud de datos realmente recibida en bytes en el parámetro
RCVD_LEN coincide con la longitud de datos del parámetro LEN.

Programación del PLC
Manual de programación y manejo, 11/2019

3995

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "TRCV_C":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN_R

Input

BOOL

I, Q, M, D, L

Habilitación de recepción

CONT

Input

BOOL

I, Q, M, D, L

Controla la conexión:
● 0: Deshacer la conexión
● 1: Establecer y mantener la conexión
Al recibir datos (flanco ascendente en el parámetro
EN_R), el parámetro CONT debe tener el valor
TRUE para establecer o mantener una conexión.

LEN

Input

UINT

I, Q, M, D, L o cons‐ Longitud máxima de los datos por recibir (valor má‐
tante
ximo: 8192 bytes). Si utiliza únicamente valores
simbólicos en el parámetro DATA, el parámetro
LEN debe tener el valor "0".

CONNECT

InOut

TCON_Param

D

DATA

InOut

VARIANT

I, Q, M, D, L

Puntero hacia la descripción de la conexión
Consulte también: AUTOHOTSPOT
Puntero hacia el área de recepción
Para transferir estructuras, estas deben ser idénti‐
cas tanto en el lado de transmisión como en el de
recepción.

COM_RST

InOut

BOOL

I, Q, M, D, L

Reinicia la instrucción:
● 0: Irrelevante
● 1: Reinicio completo de la instrucción, con lo
que se deshace la conexión existente

DONE

Output

BOOL

I, Q, M, D, L

Parámetro de estado con los valores siguientes:
● 0: Orden no iniciada aún o en ejecución
● 1: Orden finalizada sin errores

BUSY

Output

BOOL

I, Q, M, D, L

Parámetro de estado con los valores siguientes:
● 0: Orden no iniciada aún o ya finalizada
● 1: Orden no finalizada aún. No se puede iniciar
una nueva orden

ERROR

Output

BOOL

I, Q, M, D, L

Parámetro de estado ERROR:
● 0: Ningún error
● 1: Se han producido errores

STATUS

Output

WORD

I, Q, M, D, L

Estado de la instrucción

RCVD_LEN

Output

UINT

I, Q, M, D, L

Cantidad de datos (en bytes) recibida realmente

Encontrará más información sobre los tipos de datos válidos en "Vista general de los tipos de
datos válidos (Página 241)".

3996

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros BUSY, DONE y ERROR
El estado de ejecución se comprueba con los parámetros BUSY, DONE, ERROR y STATUS.
El parámetro BUSY indica el estado de ejecución. El parámetro DONE permite comprobar si
una orden se ha ejecutado correctamente. El parámetro ERROR se activa si ocurren errores
durante la ejecución de "TRCV_C". La información de error se indica en el parámetro STATUS.
La tabla siguiente muestra la relación entre los parámetros BUSY, DONE y ERROR:
BUSY

DONE

ERROR

Descripción

1

-

-

La orden se está procesando.

0

1

0

La orden se ha ejecutado correctamente.

0

0

1

La orden se ha finalizado con un error. La causa del error se indica en el parámetro
STATUS.

0

0

0

No se ha asignado ninguna nueva orden.

Parámetros ERROR y STATUS
ERROR

STATUS*

Descripción

(W#16#...)
0

0000

Orden finalizada sin errores.

0

0001

El establecimiento de la conexión ha finalizado.

0

0003

La desconexión ha finalizado.

0

7000

No se está procesando ninguna orden.

0

7001

● Iniciar procesamiento de la orden
● Establecer conexión
● Esperar al interlocutor

0

7002

Recibiendo datos.

0

7003

Se deshace la conexión

0

7004

● Conexión establecida y vigilada
● No se está procesando ninguna orden

0

7006

Se están recibiendo datos.

1

8085

● El parámetro LEN excede el valor máximo admisible.
● El valor del parámetro LEN o DATA ha sido modificado después de la primera llamada.

1

8086

El parámetro ID se encuentra fuera del rango admisible.

1

8087

Se ha alcanzado el número máximo de conexiones, no es posible establecer más conexiones

1

8088

El valor del parámetro LEN no es compatible con el área de recepción indicada en el parámetro
DATA.

1

8089

El parámetro CONNECT no apunta a un bloque de datos.

1

8091

Se ha excedido la profundidad de anidamiento máxima.

1

809A

El parámetro CONNECT apunta a un campo que no concuerda con la longitud de la descripción de
la conexión.

1

809B

La ID del dispositivo local (local_device_id) indicado en la descripción de la conexión no concuerda
con la CPU.

1

80A0

Error de grupo para los códigos de error W#16#80A1 y W#16#80A2.

Programación del PLC
Manual de programación y manejo, 11/2019

3997

Instrucciones
4.1 Instrucciones
ERROR

STATUS*

Descripción

(W#16#...)
1

80A1

● El usuario ya está utilizando la conexión o el puerto.
● Error de comunicación:
–

La conexión indicada no se ha establecido todavía.

–

La conexión indicada se está finalizando.
No es posible transferir a través de esta conexión.

–

La interfaz se está reinicializando.

1

80A2

El sistema está utilizando el puerto local o remoto.

1

80A3

● Se está intentando volver a establecer una conexión existente.
● Se está intentando finalizar una conexión no existente.

1

80A4

La dirección IP del punto final remoto de la conexión no es válida, es decir, concuerda con la
dirección IP del interlocutor local.

1

80A7

Error de comunicación: Se ha llamado la instrucción con COM_RST = 1 antes de finalizar la orden
de transmisión.

1

80B2

El parámetro CONNECT apunta a un bloque de datos que ha sido generado con el atributo "Guar‐
dar solo en la memoria de carga".

1

80B3

Parametrización incoherente: Error de grupo para los códigos de error W#16#80A0 a W#16#80A2,
W#16#80A4, W#16#80B4 a W#16#80B9.

1

80B4

Al establecer una conexión pasiva (active_est = FALSE) con la variante de protocolo ISO on TCP
(connection_type = B#16#12) se ha infringido una (o ambas) de las condiciones siguientes: "lo‐
cal_tsap_id_len >= B#16#02" y/o "local_tsap_id[1] = B#16#E0".

1

80B5

Con el tipo de conexión 13 = UDP solo se permite un establecimiento pasivo de la conexión.

1

80B6

Error de parametrización en el parámetro connection_type del bloque de datos para la descripción
de la conexión.

1

80B7

Error en uno de los parámetros siguientes del bloque de datos para la descripción de la conexión:
block_length, local_tsap_id_len, rem_subnet_id_len, rem_staddr_len, rem_tsap_id_len,
next_staddr_len.

1

80C3

● Todos los recursos de conexión están ocupados.
● Ya se está procesando un bloque con esta ID en otro grupo de prioridad.

1

80C4

Error de comunicación temporal:
● La conexión no se puede establecer en estos momentos.
● La conexión no se puede establecer porque los cortafuegos que están en la vía de conexión no
están activados para los puertos necesarios.
● La interfaz está recibiendo nuevos parámetros o la conexión se está estableciendo.
● Una instrucción "TDISCON" está deshaciendo la conexión configurada.
● La conexión utilizada está siendo finalizada por una llamada con COM_RST= 1

1

80C6

No es posible acceder al interlocutor remoto (error de red).

1

8722

Error en el parámetro CONNECT: Rango de origen no válido (el rango no está declarado en el
bloque de datos).

1

873A

Error en el parámetro CONNECT: El acceso a la descripción de la conexión no es posible (no hay
acceso al bloque de datos).

1

877F

Error en el parámetro CONNECT: Error interno

1

8922

Parámetro DATA: El rango de destino no es válido, el rango no existe en el DB.

1

8924

Parámetro DATA: Error de área en el puntero VARIANT.

1

8932

Parámetro DATA: El número de DB es demasiado alto.

3998

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
ERROR

STATUS*

Descripción

(W#16#...)
1

893A

Parámetro DATA: Imposible acceder al área de datos, p. ej., porque el bloque de datos no existe.

1

897F

Parámetro DATA: Error interno, p. ej., referencia VARIANT no admisible.

1

8A3A

Parámetro ADDR: Imposible acceder al área de direcciones, p. ej., porque el bloque de datos no
existe.

* Los códigos de error en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Nota
Mensajes de error de las instrucciones "TCON", "TRCV" y "TDISCON"
La instrucción "TRV_C" utiliza internamente las instrucciones "TCON (Página 4045)", "TRCV
(Página 4065)" y "TDISCON (Página 4056)". Los mensajes de error de estas instrucciones
están incluidos en las descripciones correspondientes.

Consulte también
Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente (Página 618)

TRCV_C: Establecer conexión y recibir datos
Validez
La siguiente descripción de la instrucción "TRCV_C" es válida para:
● Ethernet:
– CPU S7-1200 con versión de firmware V4.0 o superior y CPU S7-1500
– CPU S7-1500 con versión de firmware V2.1 o superior: Comunicación UDP-Multicast
– CPU S7-1500 con versión de firmware V2.0 o superior y TRCV_C a partir de la versión
V3.2 de la instrucción: Secure Communication
● PROFIBUS: Conexiones FDL de S7‑1500 con CM 1542‑5 a partir de V2.0 con el tipo de
datos de sistema TCON_FDL

Descripción
La instrucción "TRCV_C" se ejecuta de forma asíncrona y ejecuta por orden las funciones
siguientes:
● Configurar y establecer una conexión
● Recibir datos a través de la conexión existente
● Deshacer o inicializar la conexión

Programación del PLC
Manual de programación y manejo, 11/2019

3999

Instrucciones
4.1 Instrucciones
La instrucción "TRCV_C" utiliza internamente las instrucciones de comunicación "TCON",
"TRCV", "T_DIAG", "T_RESET" y "TDISCON".
Nota
Soporte en caso de programación de conexiones
Cuando se selecciona una instrucción de comunicación TCON, TSEND_C o TRCV_C en un
bloque de programa y se crean y parametrizan conexiones del tipo TCP, UDP, ISO-on-TCP o
FDL, puede recibir ayuda para la parametrización de conexiones. Las conexiones UDPMulticast a través de interfaces PROFINET integradas son posibles con las CPU S7-1500 con
versión de firmware V2.1 o superior.
La parametrización de conexiones se encuentra en la ventana de inspección del editor de
programación.

Configurar y establecer una conexión
La conexión de comunicación se crea y establece con CONT=1. El número de conexiones
posibles se indica en los datos técnicos de la CPU. Para configurar la conexión se utiliza la
descripción de la conexión especificada en el parámetro CONNECT. Existen los siguientes
tipos de conexión:
● Conexiones programadas (establecimiento de la conexión con "TCON"):
– TCP/UDP: Descripción de la conexión mediante el tipo de datos de sistema
TCON_IP_v4
– TCP / UDP mediante secure communication: Descripción de la conexión mediante los
tipos de datos de sistema TCON_IP_V4_SEC o TCON_QDN_SEC
– ISO on TCP: Descripción de la conexión mediante el tipo de datos de sistema
TCON_IP_RFC
– ISO: Descripción de la conexión mediante el tipo de datos de sistema TCON_ISOnative
(CP 1543‑1 / CP 1545‑1)
– Conexiones de Telecontrol a clientes SMS: Descripción de la conexión mediante el tipo
de datos de sistema TCON_PHONE
Para este tipo de conexión, la estación debe tener acceso a una red de telefonía móvil
a través de un CP de telefonía móvil.
– Conexiones FDL de S7‑1500 con CM 1542‑5 a partir de V2.0 con el tipo de datos de
sistema TCON_FDL
● Conexiones configuradas
– Especificación de una conexión existente en el tipo de datos del sistema
TCON_Configured.
Si la CPU pasa al estado operativo STOP, se interrumpe una conexión existente y se elimina
la conexión creada. Para volver a configurar y establecer la conexión, es preciso volver a
ejecutar "TRCV_C".

4000

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Recibir datos a través de la conexión existente
Cuando el parámetro EN_R se pone a "1", se activa la recepción de datos. Los datos recibidos
se escriben en un área de recepción. La longitud del área de recepción se especifica, en
función de la variante de protocolo utilizada, bien sea con el parámetro LEN (si LEN <> 0), o
bien mediante la indicación de longitud del parámetro DATA (si LEN = 0). Si utiliza únicamente
valores simbólicos en el parámetro DATA, para el parámetro LEN debe utilizarse el valor "0".
Modos de recepción de TRCV_C:
● TCP (modo Ad hoc)
El modo Ad hoc solo está disponible en la variante de protocolo TCP. Utilice el modo Ad hoc
para recibir datos de longitudes dinámicas con la instrucción "TRCV_C".
El modo Ad hoc se establece asignando el valor "1" al parámetro ADHOC. Con el modo Ad
hoc se pueden utilizar todos los tipos de datos para bloques de datos de acceso estándar.
Para bloques de datos de acceso optimizado solo es posible utilizar el tipo de datos ARRAY
of BYTE o tipos de datos de una longitud de 8 bits (p. ej., CHAR, USINT, SINT, etc.). La
longitud de datos realmente recibida se visualiza en el parámetro RCVD_LEN.
● TCP (recepción de datos de longitud especificada)
Para una recepción de datos con longitud indicada, asigne el valor "0" al parámetro
ADHOC. Si el modo Ad hoc está desactivado, la recepción de datos finalizará solo cuando
se haya recibido la longitud de los datos indicada en el parámetro LEN en su totalidad. Solo
entonces estarán disponibles los datos en el área de recepción (parámetro DATA). Tras la
recepción, la longitud de datos realmente recibida en bytes en el parámetro RCVD_LEN
coincide con la longitud de datos del parámetro LEN.
● ISO‑on‑TCP (transmisión de datos orientada a mensajes)
En la variante de protocolo ISO‑on‑TCP se envían a través de una conexión bloques
cerrados de mensajes que el receptor también reconoce como tales. Los parámetros LEN
y DATA definen el área de recepción. Si el búfer de recepción (parámetro DATA) es
demasiado pequeño para los datos enviados, "TRCV_C" notifica un error. Tras la
recepción, la longitud de datos realmente recibida en bytes en el parámetro RCVD_LEN
coincide con la longitud de datos del parámetro LEN.
La tabla siguiente muestra cómo se escriben los datos recibidos en el área de recepción.
Variante de protocolo

Disponibilidad de los datos en el área
de recepción

TCP

Los datos están disponibles inmediata‐ Valor hexadecimal: B#16#11
mente.
Valor entero: 17

(Modo Ad hoc)

Parámetro connection_type de
la descripción de la conexión

Los datos están disponibles en cuanto
se ha recibido toda la longitud de datos
(Recepción de datos
de longitud especifica‐ especificada en el parámetro LEN.
da)

Valor hexadecimal: B#16#11

Los datos están disponibles en cuanto
(Transmisión de datos se ha recibido toda la longitud de datos
orientada a mensajes) especificada en el parámetro LEN.

Valor hexadecimal: B#16#12

FDL

Valor hexadecimal: B#16#15

TCP

ISO‑on‑TCP

Los datos están disponibles en cuanto
se ha recibido toda la longitud de datos
especificada en el parámetro LEN.

Programación del PLC
Manual de programación y manejo, 11/2019

Parámetro LEN
1 hasta longitud máxi‐
ma (depende de CPU)
de 1 a 8192

Valor entero: 17

de 1 a 8192

Valor entero: 18
de 1 a 240

Decimal: 21

4001

Instrucciones
4.1 Instrucciones

Deshacer la conexión
La conexión se deshace cuando el parámetro CONT se pone al valor "0" aunque no haya
finalizado aún una transferencia de datos en curso. Esto no es aplicable si se utiliza una
conexión configurada.
Ajustando el parámetro COM_RST a "1" se puede inicializar la conexión en cualquier
momento. Con ello, la conexión existente se deshace y se establece una nueva. Si se están
transfiriendo datos en ese momento, podrían perderse.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "TRCV_C":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN_R

Input

BOOL

I, Q, M, D, L, T, C o
constante

Habilitación de recepción

CONT

Input

BOOL

I, Q, M, D, L

Controla la conexión:
● 0: Deshacer la conexión.
● 1: Establecer la conexión y mantenerla tras
recibir los datos.

LEN

Input

UDINT

I, Q, M, D, L o cons‐ Longitud máxima de los datos que hay que recibir.
tante
Si utiliza un área de recepción de acceso optimiza‐
do en el parámetro DATA, el parámetro LEN debe
tener el valor "0".

ADHOC

Input

BOOL

I, Q, M, D, L o cons‐ Parámetro opcional (oculto)
tante
Utilizar el modo Ad hoc para la variante de proto‐
colo TCP.
ADHOC tiene que tener el valor FALSE, si no se
utiliza ningún protocolo TCP.

4002

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

CONNECT

InOut

VARIANT

D

Puntero hacia la descripción de la conexión
● Conexión programada:
–

Con TCP o UDP, utilice la estructura
TCON_IP_v4
Consulte la descripción
en:AUTOHOTSPOT

–

Con TCP o UDP mediante secure
communication utilice la estructura
TCON_IP_V4_SEC o TCON_QDN_SEC.
Consulte la descripción en: Parámetros de
conexión conforme a TCON_IP_V4_SEC o
parámetros de conexión conforme a
TCON_QDN_SEC

–

Con ISO-on-TCP, utilice la estructura
TCON_IP_RFC
Consulte la descripción en:
AUTOHOTSPOT

–

Con ISO, utilice la estructura
TCON_ISOnative (CP 1543‑1 / CP 1545‑1)
Consulte la descripción en la instrucción
"TCON (Página 4048)": "Estructura de la
descripción de la conexión conforme a
TCON_ISOnative"

–

Para establecer conexiones con clientes
SMS utilice el tipo de datos de sistema
TCON_PHONE.
Consulte la descripción en
AUTOHOTSPOT.

–

Para conexiones FDL del CM 1542‑5 utilice
el tipo de datos de sistema TCON_FDL,
consulte AUTOHOTSPOT.

● Conexión configurada:
–

DATA

InOut

VARIANT

I, Q, M, D, L

Para conexiones existentes, utilice el tipo de
datos de sistema TCON_Configured.
Consulte la descripción más abajo, en "Tipo
de datos de sistema para conexiones
configuradas".

Puntero hacia el área de recepción.
Para transferir estructuras, estas deben ser idénti‐
cas tanto en el lado de transmisión como en el de
recepción.

Programación del PLC
Manual de programación y manejo, 11/2019

4003

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

ADDR

InOut

VARIANT

D

Parámetro oculto que debe utilizarse con UDP. En
este caso contiene un puntero al tipo de datos de
sistema TADDR_Param. Guarde la información de
dirección del transmisor (dirección IP y número de
puerto) en un bloque de datos con el tipo de datos
de sistema TADDR_Param.
Consulte también: Estructura de la información de
dirección del interlocutor remoto en UDP (Pági‐
na 4096)

COM_RST

InOut

BOOL

I, Q, M, D, L

Parámetro opcional (oculto)
Efectúa la inicialización de la conexión:
● 0: Irrelevante
● 1: Se inicializa la conexión existente.
El parámetro COM_RST se restablece tras la eva‐
luación mediante la instrucción "TRCV_C" y, por
tanto, no debe interconectarse estáticamente.

DONE

Output

BOOL

I, Q, M, D, L

Parámetro de estado con los valores siguientes:
● 0: Recepción no iniciada aún o en ejecución.
● 1: Recepción ejecutada sin errores. Este
estado solo se muestra durante un ciclo.
El parámetro de salida DONE se activa cuando fi‐
naliza correctamente un paso intermedio del pro‐
cesamiento (establecer conexión, recepción, des‐
hacer conexión) y cuando la ejecución de
"TRCV_C" finaliza correctamente.

BUSY

Output

BOOL

I, Q, M, D, L

Parámetro de estado con los valores siguientes:
● 0: Recepción no iniciada aún o ya finalizada.
● 1: Recepción no finalizada todavía. No es
posible iniciar una nueva orden de transmisión.

ERROR

Output

BOOL

I, Q, M, D, L

Parámetro de estado con los valores siguientes:
● 0: Ningún error
● 1: Se ha producido un error al establecer la
conexión, al recibir los datos o al deshacer la
conexión.
El parámetro de salida ERROR puede activarse
debido a un error en la instrucción "TRCV_C" o en
las instrucciones de comunicación utilizadas inter‐
namente.

STATUS

Output

WORD

I, Q, M, D, L

Estado de la instrucción

RCVD_LEN

Output

UDINT

I, Q, M, D, L

Cantidad de datos (en bytes) recibida realmente

Encontrará más información sobre los tipos de datos válidos en "Vista general de los tipos de
datos válidos (Página 241)".

4004

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros EN_R, CONT y COM_RST
El parámetro CONT controla el establecimiento de conexión de la instrucción "TRCV_C",
independientemente del parámetro EN_R. El comportamiento del parámetro CONT depende
en parte de si se utiliza una conexión programada o configurada:
● Si CONT = "0": No se reciben datos (independientemente de si se utiliza una conexión
programada o configurada).
● Al cambiar de CONT = "0" a "1":
– En el caso de una conexión programada, esta se establece con "TCON".
– En el caso de una conexión configurada, esta se comprueba con "T_DIAG".
● Si CONT = "1":
– Mientras no se reciba ningún dato (EN_R ="0"), se comprueba la conexión con
"T_DIAG".
– Si las instrucciones de comunicación internas notifican que no hay ningún punto final de
la conexión, esta se restablecerá automáticamente mediante "TCON".
● Al cambiar de CONT = "1" a "0":
– En el caso de una conexión programada, esta se deshace con "TDISCON".
– En el caso de una conexión configurada, esta se inicializa con "T_RESET".
El parámetro COM_RST inicializa la conexión al cambiar de "0" a "1":
● Si hay una conexión establecida, esta se inicializa mediante "T_RESET"
(independientemente de si se utiliza una conexión programada o configurada).
● Si no hay ninguna conexión establecida, la activación del parámetro no tiene efecto.
Los parámetros EN_R y COM_RST solo se hacen efectivos si se ha puesto CONT a "1". La
tabla siguiente muestra la relación entre los parámetros EN_R, CONT y COM_RST:
EN_R

CONT

COM_
RST

Estado de la ins‐
trucción

irrele‐
vante

0

irrele‐
vante

No se ha ejecuta‐ Ninguna orden activa (STATUS = 7000).
do aún

irrele‐
vante

0

irrele‐
vante

Inicialización

Se está deshaciendo la conexión. La instrucción se inicializa.

irrele‐
vante

0>1

irrele‐
vante

Establecimiento
de la conexión

La conexión se está estableciendo. Todavía no se transfieren datos.

0

1

0

Conexión esta‐
blecida

La conexión se ha establecido y se vigila con la instrucción "T_DIAG".

irrele‐
vante

1

0>1

Conexión esta‐
blecida

La conexión se interrumpe brevemente y se inicializa con "T_RESET".

0>1

1

0

Conexión esta‐
blecida

La instrucción empieza a recibir.

irrele‐
vante

1

0>1

Recibiendo datos La transferencia de datos se interrumpe. La conexión se inicializa.

Programación del PLC
Manual de programación y manejo, 11/2019

Descripción

4005

Instrucciones
4.1 Instrucciones

Tipo de datos de sistema para conexiones configuradas
Para conexiones configuradas, utilice en el parámetro CONNECT la siguiente estructura para
la descripción de la conexión según TCON_Configured:
Byte

Parámetro

Tipo de datos Valor de arran‐ Descripción
que

0 … 1 InterfaceID

HW_ANY

-

Identificador de hardware de la interfaz local (rango de valo‐
res: de 0 a 65535).

2 … 3 ID

CONN_OUC

-

Referencia a la conexión (rango de valores: de 1 a 4095).
Indique la ID de la conexión existente.

4

ConnectionType

BYTE

-

Tipo de conexión
Seleccione 254 (decimal) para una conexión configurada.

Parámetros BUSY, DONE y ERROR
El estado de ejecución se comprueba con los parámetros BUSY, DONE, ERROR y STATUS.
El parámetro BUSY indica el estado de ejecución. El parámetro DONE permite comprobar si
una orden se ha ejecutado correctamente. El parámetro ERROR se activa si ocurren errores
durante la ejecución de "TRCV_C". La información de error se indica en el parámetro STATUS.
La tabla siguiente muestra la relación entre los parámetros BUSY, DONE y ERROR:
DONE

BUSY

ERROR

Descripción

0

0

0

La instrucción aún no se ha ejecutado (no hay ningún flanco ascendente en el parámetro
EN_R).

0

1

0

La instrucción se ejecuta y llama las instrucciones de comunicación utilizadas interna‐
mente.

1

0

0

La recepción se ha ejecutado correctamente. En el parámetro STATUS se devuelve
"0000". DONE = "1" solo se muestra durante un ciclo.

0

0

1

La ejecución de la instrucción o un paso intermedio ha finalizado con un error. Si se
produce un error como consecuencia de una instrucción de comunicación utilizada inter‐
namente, se indica el error que se ha producido en primer lugar durante el procesamiento.
Este estado solo se muestra durante un ciclo.

Parámetros ERROR y STATUS
ERROR

STATUS

Descripción

(W#16#...)
0

0000

Orden de recepción ejecutada sin errores.

0

0001

Comunicación establecida.

0

0003

Comunicación desconectada.

0

7000

No se está procesando ninguna orden.

0

7001

Primera llamada al establecer una conexión.

0

7002

La conexión se está estableciendo (REQ irrelevante)

0

7003

Se está deshaciendo la conexión.

0

7004

Conexión establecida y vigilada. No se está procesando ninguna orden de recepción.

0

7006

Se están recibiendo datos.

4006

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
ERROR

STATUS

Descripción

(W#16#...)
1

8085

● El parámetro LEN excede el valor máximo admisible.
● El valor del parámetro LEN o DATA ha sido modificado después de la primera llamada.

1

8086

El parámetro ID se encuentra fuera del rango admisible.

1

8087

Se ha alcanzado el número máximo de conexiones, no es posible establecer más conexiones

1

8088

El valor del parámetro LEN no es compatible con el área de recepción indicada en el parámetro
DATA.

1

8089

● El parámetro CONNECT no apunta a un bloque de datos.
● El parámetro CONNECT no apunta a una descripción de conexión.
● La descripción de conexión generada manualmente tiene una estructura incorrecta para el tipo
de conexión seleccionado.

1

8091

Se ha excedido la profundidad de anidamiento máxima.

1

809A

El parámetro CONNECT apunta a un campo que no concuerda con la longitud de la descripción de
la conexión.

1

809B

InterfaceID no es válida:
● No apunta a una interfaz de CPU local o un CP.
● No puede tener el valor 0 en caso de utilizar la parametrización de la conexión.
● No puede tener el valor 0 en la estructura TCON_xxx utilizada. Ver TCON: Establecer una
conexión (Página 4048)

1

80A1

● El usuario ya está utilizando la conexión o el puerto.
● Error de comunicación:
–

La conexión indicada no se ha establecido todavía.

–

La conexión indicada se está finalizando.
No es posible transferir a través de esta conexión.

–

La interfaz se está reinicializando.

1

80A3

La instrucción "T_DIAG" subordinada ha notificado que se ha deshecho la conexión.

1

80A4

La dirección IP del punto final remoto de la conexión no es válida o bien concuerda con la dirección
IP del interlocutor local.

1

80A7

Error de comunicación: Se ha llamado la instrucción con COM_RST = 1 antes de finalizar la orden
de transmisión.

1

80AA

Se está intentando establecer una conexión desde otro bloque con la misma ID de conexión. Repita
la orden con un nuevo flanco ascendente en el parámetro REQ.

1

80B3

● Si se utiliza la variante de protocolo UDP, el parámetro ADDR no contendrá datos.
● Error en la descripción de la conexión
● El puerto local ya se utiliza en otra descripción de conexión.

1

80B4

Al establecer una conexión pasiva (active_est = FALSE) con la variante de protocolo ISO on TCP
(connection_type = B#16#12) se ha infringido una (o ambas) de las condiciones siguientes: "lo‐
cal_tsap_id_len >= B#16#02" y/o "local_tsap_id[1] = B#16#E0".

1

80B5

Con el tipo de conexión 13 = UDP solo se permite un establecimiento pasivo de la conexión.

1

80B6

Error de parametrización en el parámetro connection_type del bloque de datos para la descripción
de la conexión.

Programación del PLC
Manual de programación y manejo, 11/2019

4007

Instrucciones
4.1 Instrucciones
ERROR

STATUS

Descripción

(W#16#...)
1

80B7

● Para el tipo de datos de sistema TCON_Param:
Error en uno de los parámetros siguientes del bloque de datos para la descripción de la
conexión: block_length, local_tsap_id_len, rem_subnet_id_len, rem_staddr_len,
rem_tsap_id_len, next_staddr_len.
● Para los tipos de datos de sistema TCON_IP_V4 y TCON_IP_RFC:
La dirección IP del punto final del interlocutor se ha puesto a 0.0.0.0.

1

80C3

● Todos los recursos de conexión están ocupados.
● Ya se está procesando un bloque con esta ID en otro grupo de prioridad.

1

80C4

Error de comunicación temporal:
● La conexión no se puede establecer en estos momentos.
● La conexión no se puede establecer porque los cortafuegos que están en la vía de conexión no
están activados para los puertos necesarios.
● La interfaz está recibiendo nuevos parámetros o la conexión se está estableciendo.
● Una instrucción "TDISCON" está deshaciendo la conexión configurada.
● La conexión utilizada está siendo finalizada por una llamada con COM_RST = 1

1

80C6

No es posible acceder al interlocutor remoto (error de red).

1

8722

Error en el parámetro CONNECT: Rango de origen no válido (el rango no está declarado en el
bloque de datos).

1

873A

Error en el parámetro CONNECT: El acceso a la descripción de la conexión no es posible (no hay
acceso al bloque de datos).

1

877F

Error en el parámetro CONNECT: Error interno

1

8922

Parámetro DATA: El rango de destino no es válido, el rango no existe en el DB.

1

8924

Parámetro DATA: Error de área en el puntero VARIANT.

1

8932

Parámetro DATA: El número de DB es demasiado alto.

1

893A

Parámetro DATA: Imposible acceder al área de datos, p. ej., porque el bloque de datos no existe.

1

897F

Parámetro DATA: Error interno, p. ej., referencia VARIANT no admisible.

1

8A3A

Parámetro ADDR: Imposible acceder al área de direcciones, p. ej., porque el bloque de datos no
existe.

Nota
Mensajes de error de las instrucciones "TCON", "TRCV" y "TDISCON"
La instrucción "TRV_C" utiliza internamente las instrucciones "TCON (Página 4048)", "TRCV
(Página 4065)" y "TDISCON (Página 4056)". Los mensajes de error de estas instrucciones
están incluidos en las descripciones correspondientes.

Ejemplo
Encontrará el ejemplo aquí: Ejemplo de programa para funciones de transmisión
(Página 4009).
Encontrará información adicional y el código del programa del ejemplo aquí: Sample Library for
Instructions (Página 615).

4008

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Consulte también
TSEND_C: Establecer conexión y enviar datos (Página 3984)
Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente (Página 618)
Bytes de relleno cuando se usan tipos de datos estructurados (Página 143)

Ejemplo de programa para funciones de transmisión
Introducción
En el ejemplo siguiente se establece una conexión programada entre dos CPU de la serie
S7-1500 y se envía una cadena de caracteres de la CPU 1 a la CPU 2. La cadena de caracteres
que debe transmitirse es del tipo de datos STRING.

Requisitos
● Se han creado dos CPU de la serie S7-1500 y se han conectado entre sí a través de
PROFINET. Su conexión no está configurada.

● En Propiedades > Protección se ha ajustado para cada CPU un nivel de protección bajo
para garantizar que se permitan accesos de lectura y escritura.

Programa de la CPU 1
Para almacenar los datos de "TSEND_C" cree nueve variables en un bloque de datos global.

Se crea un FB "SLI_FB_TSEND_C" y en él se crean las variables locales siguientes.

Programación del PLC
Manual de programación y manejo, 11/2019

4009

Instrucciones
4.1 Instrucciones

Segmento 1: Los parámetros de la instrucción "TSEND_C" se interconectan del siguiente
modo. El parámetro CONNECT no debe interconectarse aún.

Segmento 2: En caso de error de TSEND_C, el estado se guarda del siguiente modo.

Configuración de TSEND_C
Para interconectar el parámetro CONNECT debe abrirse el asistente con la instrucción
"TSEND_C" mediante Propiedades > Configuración.
Realice los siguientes ajustes para la configuración de TSEND_C:
Campo de entrada

Entrada

Punto final

En la lista desplegable, elija una CPU para emisor y receptor.
La interfaz, la subred y la dirección se introducen automáticamente.

Datos de conexión

Seleccionando "Nuevo" en la lista desplegable se crea un bloque de datos para cada CPU.
El bloque de datos es necesario para almacenar los datos de conexión. El nombre del bloque de
datos se puede elegir libremente.
Para la CPU 1 (CPU local) está activado el establecimiento de conexión activo.

Tipo de conexión

Seleccione la entrada "TCP".
Con ello, para establecer la conexión se utilizará una conexión Ethernet con el protocolo "TCP".

4010

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Campo de entrada

Entrada

Modo de configura‐
ción

Seleccione la entrada "Utilizar bloque de programa".

ID de conexión

Con ello, la conexión se establecerá a través de una conexión programada.
Para la conexión de comunicación, introduzca una ID de conexión de su elección.
La ID de conexión no se deberá haber asignado antes en el proyecto.

Puerto del interlocutor Introduzca un valor para el puerto del interlocutor. El valor debe ser >=2000.

Programa de la CPU 2
Para almacenar los datos de "TRCV_C" cree diez variables en un bloque de datos global.

Se crea un FB "SLI_FB_TRCV_C" y en él se crean las variables locales siguientes.

Programación del PLC
Manual de programación y manejo, 11/2019

4011

Instrucciones
4.1 Instrucciones

Segmento 1: Los parámetros de la instrucción "TRCV_C" se interconectan del siguiente modo.
El parámetro CONNECT no debe interconectarse aún.

Segmento 2: En caso de error de TRCV_C, el estado se guarda del siguiente modo.

Configuración de TRCV_C
Realice los siguientes ajustes para la configuración de TRCV_C:
Nota
Datos de conexión
Con la configuración de TSEND_C ya se ha creado un bloque de datos
("SLI_cDB_Connector") para cada CPU con los datos de conexión almacenados. En lugar de
crear bloques de datos nuevos e introducir los datos de conexión, puede utilizar los bloques de
datos creados ("SLI_cDB_Connector").
Para que los bloques de datos creados puedan seleccionarse, deben seguir estando en el
árbol del proyecto, bajo Bloques de programa > Bloques de sistema.

4012

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Procedimiento para establecer una conexión
Para establecer una conexión de comunicación en modo RUN, proceda del siguiente modo:
1. Para TRCV_C, ajuste el parámetro EN_R a "1".
2. Para TRCV_C, ajuste el parámetro CONT a "1".
3. Para TSEND_C, ajuste el parámetro REQ a "1".
4. Para TSEND_C, ajuste el parámetro CONT a "1".

Procedimiento para deshacer una conexión
Para deshacer una conexión de comunicación en modo RUN, proceda del siguiente modo:
1. Para TSEND_C, ajuste el parámetro CONT a "0".
2. Para TSEND_C, ajuste el parámetro REQ a "0".
3. Para TRCV_C, ajuste el parámetro CONT a "0".
4. Para TRCV_C, ajuste el parámetro EN_R a "0".

Comportamiento de la CPU 1
Si el parámetro de entrada REQ ("start") devuelve el estado lógico "TRUE", se inicia la
instrucción "TSEND_C". Si el parámetro de entrada CONT ("comControl") devuelve el estado
lógico "TRUE", la instrucción "TSEND_C" creará una conexión de comunicación entre CPU 1
y CPU 2. Para ello, los datos de conexión se consultan por medio del parámetro de entrada
CONNECT (o del bloque de datos "SLI_cDB_Connector").

Programación del PLC
Manual de programación y manejo, 11/2019

4013

Instrucciones
4.1 Instrucciones
Durante varias llamadas, la instrucción "TSEND_C" transfiere el juego de datos leído en el
parámetro de entrada DATA ("sendData"). Con el parámetro de salida DONE ("#statDone") a
"TRUE" y el parámetro de salida STATUS ("status") a "0000" se indica la transmisión correcta
del juego de datos. Puesto que los valores de los parámetros de salida solo se muestran
mientras son válidos, el estado correcto de DONE ("#statDone") debe guardarse en la variable
"done".
Una vez transmitido el juego de datos a la CPU 2, la conexión de comunicación se sigue
vigilando (estado "7004"). En el parámetro de salida ERROR ("error") o en la variable
"memErrStatus" se indica que la ejecución se ha realizado sin errores en el ejemplo.

Comportamiento de la CPU 2
Si el parámetro de entrada EN_R ("start") devuelve el estado lógico "TRUE", se inicia la
instrucción "TRCV_C". Si el parámetro de entrada CONT ("comControl") devuelve el estado
lógico "TRUE", la instrucción "TRCV_C" crea una conexión de comunicación entre CPU 2 y
CPU 1. Para ello, los datos de conexión se consultan por medio del parámetro de entrada
CONNECT (o del bloque de datos "SLI_cDB_Connector").
Durante varias llamadas, la instrucción "TRCV_C" recibe el juego de datos transmitido. En el
parámetro DATA ("rcvData") se registra el juego de datos. Con el parámetro de salida DONE
("done") a "TRUE" y el parámetro de salida STATUS ("status") a "0000" se indica la transmisión
correcta del juego de datos. La longitud en BYTE del juego de datos realmente transmitido se
captura mediante el parámetro de salida RCVD_LEN ("#statRcvLen"). Su valor solo se
muestra durante el estado correcto. A continuación se lee "0".
Puesto que los valores de los parámetros de salida solo se muestran mientras son válidos,
haga lo siguiente:
● El valor de "#statRcvLen" se guarda en "rcvLen".
● El valor de "#statDone" se guarda en "done".
● El valor de "#status" se guarda en "memErrStatus".
Una vez que la CPU 2 ha recibido el juego de datos, la conexión de comunicación se sigue
vigilando (estado "7006"). En el parámetro de salida ERROR ("error") o en la variable
"memErrStatus" se indica que la ejecución del ejemplo se ha realizado sin errores.

4014

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Código del programa
Encontrará información adicional y el código del programa del ejemplo anterior aquí: Sample
Library for Instructions (Página 615).

TMAIL_C: Transmitir un mensaje de correo electrónico
Descripción de TMAIL_C
Descripción
La instrucción "TMAIL_C" envía un correo electrónico a través de la interfaz Ethernet del
S7-1500 o S7-1200 > V4.0, de un módulo de comunicación (CM) o de un procesador de
comunicaciones (CP).
Para utilizar la instrucción, es imprescindible haber configurado previamente el hardware y que
la infraestructura de la red permita establecer una conexión con el servidor de correo
electrónico.
El contenido del correo electrónico y los datos de conexión se definen mediante los siguientes
parámetros:
● Las direcciones de los destinatarios se definen a través de los parámetros TO_S y CC.
● El contenido del e-mail se define con los parámetros SUBJECT y TEXT.
● Puede definirse un archivo adjunto con el puntero VARIANT en los parámetros
ATTACHMENT y ATTACHMENT_NAME.
● Los datos de conexión, al igual que el direccionamiento y la autenticación para el servidor
de correo electrónico, se definen mediante el tipo de datos de sistema TMail_V4, TMail_V6
o TMail_FQDN del parámetro MAIL_ADDR_PARAM.
– Si se utiliza la interfaz de la CPU S7-1500, únicamente se emplea el tipo de datos de
sistema TMail_V4. En este caso, el envío del mensaje de correo electrónico solo es
posible a través de SMTP.
– Si se utiliza la interfaz de un CM/CP, es posible emplear todos los tipos de datos de
sistema. El envío del mensaje de correo electrónico también es posible a través de
SMTPS.

Programación del PLC
Manual de programación y manejo, 11/2019

4015

Instrucciones
4.1 Instrucciones
● El envío de un e-mail se inicia con un cambio de flanco de "0" a "1" en el parámetro REQ.
● A través de los parámetros de salida "BUSY", "DONE", "ERROR" y "STATUS" se indica el
estado de la petición.
No es posible enviar directamente un SMS a través de la instrucción "TMAIL_C". La posibilidad
de reenviar el e-mail como SMS a través del servidor de correo depende del proveedor de los
servicios de telecomunicación.
Nota
Número de e-mails por enviar
Con un PLC es posible enviar más de un e-mail al mismo tiempo. Si se usa un CP 1243-8 IRC
o un CP 154x-1, solo es posible enviar un correo electrónico por cada CP. Por lo tanto, si se
utilizan dos CP es posible enviar paralelamente dos e-mails.

Funcionamiento de la instrucción
La instrucción "TMAIL_C" es una instrucción asíncrona, de modo que la ejecución se prolonga
a lo largo de varias llamadas. Al llamar la instrucción "TMAIL_C" es imprescindible indicar una
instancia.
La conexión con el servidor de correo electrónico se interrumpe en los siguientes casos:
● Si la CPU pasa al estado operativo STOP mientras "TMAIL_C" está activo.
● Si aparecen problemas de comunicación en el bus Industrial Ethernet.
En esos casos, el envío del e-mail se cancela y este no llega a su destinatario. La conexión
también se interrumpe tras ejecutar correctamente la instrucción y enviar el mensaje de correo
electrónico.
ATENCIÓN
Cambiar programas de usuario
Las partes del programa de usuario con efecto directo sobre llamadas de "TMAIL_C" solo
pueden modificarse en los siguientes casos:
● Si la CPU está en estado operativo "STOP".
● Si no se envía ningún mensaje (REQ = 0 y BUSY = 0).
Esto se refiere en especial al borrado e intercambio de bloques de programa que contienen
llamadas de "TMAIL_C" o llamadas de la instancia de "TMAIL_C"
En caso de incumplimiento, es posible que los recursos de conexión permanezcan ocupados.
El sistema de automatización puede pasar a un estado no definido con las funciones de
comunicación TCP/IP a través de Industrial Ethernet.
Una vez transmitidas las modificaciones es necesario ejecutar un rearranque completo (en
caliente) o un arranque en frío de la CPU.

4016

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Coherencia de datos
Los parámetros TO_S, CC, SUBJECT, TEXT, ATTACHMENT y MAIL_ADDR_PARAM son
aplicados durante el funcionamiento de la instrucción "TMAIL_C", por lo que no deben
modificarse hasta que haya finalizado la petición (BUSY = 0).

Autenticación SMTP
Bajo el término "autenticación" se entiende un proceso con el que se garantiza una identidad,
p. ej., mediante la solicitud de una contraseña.
Si se utiliza la interfaz de la CPU S7-1500, la instrucción "TMAIL_C" soporta el método de
autenticación SMTP AUTH-LOGIN, requerido por la mayoría de servidores de correo. Para
más información sobre el método de autenticación de su servidor de correo, consulte el manual
del servidor o la página web del proveedor de servicios de Internet.
● Para utilizar el método de autenticación AUTH-LOGIN, la instrucción "TMAIL_C" requiere
el nombre de usuario con el que poder iniciar sesión en el servidor de correo. Este nombre
de usuario equivale al nombre de usuario con el que se ha configurado la cuenta de correo
en el servidor de correo. Se transfiere a la estructura del parámetro MAIL_ADDR_PARAM
a través del parámetro UserName.
Si en la estructura del parámetro MAIL_ADDR_PARAM no se ha especificado ningún
nombre de usuario, no se hace uso del método de autenticación AUTH-LOGIN. El correo
electrónico se envía entonces sin autenticación.
● Asimismo, para iniciar sesión la instrucción "TMAIL_C" requiere la contraseña
correspondiente. Esta contraseña equivale a la contraseña indicada al configurar la cuenta
de correo. Se transfiere a la estructura del parámetro MAIL_ADDR_PARAM a través del
parámetro PassWord.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "TMAIL_C":
Parámetro

Declara‐
ción

Tipo de
datos

Área de me‐
moria

Descripción

REQ

Input

BOOL

I, Q, M, D, L,
T, C o cons‐
tante

Parámetro de control REQUEST: activa el
envío de un e-mail con un flanco ascenden‐
te.

TO_S (Pági‐
na 4028)

Input

STRING

D, L o cons‐
tante

Direcciones de destinatario
STRING con una longitud máxima de 240
caracteres (byte).
Respecto a la notación de la dirección de
correo electrónico, véase el ejemplo en la
descripción del parámetro.

CC (Pági‐
na 4028)

Input

STRING

D, L o cons‐
tante

Direcciones de destinatario CC (opcional)
STRING con una longitud máxima de 240
caracteres (byte).
Notación de la dirección de correo electróni‐
co idéntica a la del parámetro TO_S. Si se
asigna un string vacío, el e-mail no se envia‐
rá a un destinatario CC.

Programación del PLC
Manual de programación y manejo, 11/2019

4017

Instrucciones
4.1 Instrucciones
Parámetro

Declara‐
ción

Tipo de
datos

SUBJECT

Input

STRING

TEXT

Input

ATTACH‐
MENT

Input

ATTACH‐
MENT_NAME

Input

STRING

Área de me‐
moria

Descripción

D, L o cons‐
tante

Asunto del e-mail

D, L o cons‐
tante

Texto del e-mail (opcional)

VARIANT D

STRING con una longitud máxima de 240
caracteres (byte).
STRING con una longitud máxima de 240
caracteres (byte). Si a este parámetro se le
asigna un string vacío, el e-mail se envía sin
texto.
Archivos adjuntos del e-mail (opcional)
Referencia a un campo de byte/palabra/
palabra doble (ArrayOfByte, ArrayOfWord o
ArrayOfDWord) con una longitud máxima de
64 Kbytes. Si no se asigna ningún valor, el email se envía sin archivos adjuntos.

STRING

D, L o cons‐
tante

Nombre de los archivos adjuntos del e-mail
(opcional)
Referencia a una cadena de caracteres con
una longitud máxima de 50 caracteres (byte)
para definir el nombre del archivo adjunto. Si
a este parámetro se le asigna un string va‐
cío, el archivo adjunto del e-mail se recibe
con un nombre asignado por el programa de
recepción de correos electrónicos. Por este
motivo se recomienda utilizar un nombre de
archivo definido.

MAIL_ADDR_ Input
PARAM (Pági‐
na 4028)

VARIANT D

DONE (Pági‐
na 4037)

Output

BOOL

BUSY (Pági‐
na 4037)

Output

Parámetros de la conexión y dirección del
servidor de correo
Para definir los parámetros de conexión de‐
ben utilizarse las estructuras TMail_V4,
TMail_V6 o TMail_FQDN (véase la des‐
cripción del parámetro).

I, Q, M, D, L

Parámetro de estado
● DONE = 0: la petición aún no se ha
iniciado o todavía se está ejecutando.
● DONE = 1: petición finalizada sin errores.

BOOL

I, Q, M, D, L

Parámetro de estado
● BUSY = 0: la ejecución de "TMAIL_C" ha
finalizado.
● BUSY = 1: el envío del e-mail todavía no
ha finalizado.

4018

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declara‐
ción

ERROR (Pági‐ Output
na 4037)

Tipo de
datos
BOOL

Área de me‐
moria
I, Q, M, D, L

Descripción
Parámetro de estado
● ERROR = 0: no se ha producido ningún
error.
● ERROR = 1: durante la ejecución se ha
producido un error. STATUS devuelve
información detallada sobre el tipo de
error.

STATUS (Pá‐
gina 4038)

Output

WORD

I, Q, M, D, L

Parámetro de estado
Valor de retorno o información de error de la
instrucción "TMAIL_C" (véase la descripción
del parámetro).

Encontrará más información sobre los tipos de datos válidos en "Vista general de los tipos de
datos válidos (Página 241)".
Nota
Parámetros opcionales
Los parámetros opcionales CC, TEXT y ATTACHMENT solo se envían con el e-mail si los
parámetros correspondientes contienen un string de longitud > 0.

Ejemplo
En el enlace siguiente encontrará un ejemplo para enviar e-mails con la instrucción
TMAIL_C: Ejemplo: enviar un mensaje de correo electrónico con TMAIL_C (Página 4042)

Consulte también
Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente (Página 618)
Descripción de TMAIL_C a partir de la versión V4.0 (Página 4019)
Descripción TMAIL_C a partir de versión V5.0 (Página 4021)

Descripción de TMAIL_C a partir de la versión V4.0
Introducción
A continuación se describe la instrucción TMAIL_C a partir de la versión V4.0. Sin profundizar
en el detalle, solo se explicarán las diferencias con las versiones de la instrucción anteriores
a la versión V4.0.
Tampoco se tratará aquí el manejo de los certificados necesarios.

Programación del PLC
Manual de programación y manejo, 11/2019

4019

Instrucciones
4.1 Instrucciones

CP con Secure Communication
Mediante la instrucción TMAIL_C a partir de la versión V4.0 envían correos electrónicos
seguros los CP siguientes:
● CP 1543‑1 ‑ V2.0
● CP 1545‑1
● CP 1542SP‑1 IRC ‑ V1.0, CP 1543SP‑1 ‑ V1.0
● CP 1243‑1 ‑ V2.1
● CP 1242‑7 GPRS V2 ‑ V2.1
● CP 1243‑7 LTE ‑ V2.1
● CP 1243‑8 IRC ‑ V2.1
Los datos que van a enviarse y el puerto TCP del servidor de correo electrónico se definen en
el parámetro MAIL_ADDR_PARAM de los siguientes tipos de datos de sistema:
TMAIL_V4_SEC, TMAIL_V6_SEC, TMAIL_QDN_SEC
Nota
Compatibilidad con las versiones de TMAIL_C < V4.0
Por razones de compatibilidad también es posible utilizar los tipos de datos de sistema
anteriores, TMAIL_V4, TMAIL_V6 y TMAIL_FQDN, del modo siguiente:
● CPU:
TMAIL_V4, TMAIL_FQDN
● Todas las CP mencionadas anteriormente y CP 1542SP‑1:
TMAIL_V4, TMAIL_V6, TMAIL_FQDN

Reglas para CPU
Tenga en cuenta las siguientes reglas:
● Para cada instancia TMAIL_C solo está permitido utilizar un CP como cliente de correo
electrónico.
● Debe ser posible acceder al servidor de correo electrónico desde los CP (clientes de correo
electrónico) a través de una red IP.
● Si a un servidor de correo electrónico se va a acceder a través de su nombre de dominio
completo, también debe poder accederse en la red IP a los servidores DNS configurados
en el CP.

4020

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros
Parámetro

Declara‐
ción

Tipo de
datos

Área de me‐
moria

Descripción

...
MAIL_ADDR_ Input
PARAM (Pági‐
na 4031)

VARIANT D

Datos necesarios para el proceso de envío
(entre otros, los parámetros de conexión, la
dirección del servidor de correo electrónico y
el puerto TCP utilizado).
Para ello, utilice uno de los siguientes tipos
de datos de sistema:
● TMail_V4_SEC
● TMail_V6_SEC
● TMail_QDN_SEC

...

Posibilidades de diagnóstico cuando se produce un error
Cuando se produce un error se dispone de las dos posibilidades de diagnóstico siguientes:
● Evaluación del parámetro STATUS
Pueden producirse los mismos valores que en las versiones de la instrucción < 4.0.
El único valor que se amplía es W#16#8015. Consulte Parámetro STATUS (Página 4038)
● Evaluación de la variable MS_STATUS en los datos de instancia de TMAIL_C. Esta variable
se ha añadido en la versión V4.0 de TMAIL_C. Contiene tanto los códigos de protocolo
como sus correspondientes descripciones textuales. Los códigos de protocolo están
definidos en RFC 5321 "Simple Mail Transfer Protocol". Sus correspondientes
descripciones textuales se encuentran en el mismo lugar o en las correspondientes
extensiones, o en otros medios.
Ejemplos de información de diagnóstico en MS_STATUS:
– 550 SMTP AUTH required before submission
– 550 StartTLS required
– 550 Requested action not taken
– 550 A valid address is required.

Descripción TMAIL_C a partir de versión V5.0
Introducción
A continuación se describe la instrucción TMAIL_C a partir de la versión V5.0. Sin profundizar
en el detalle, solo se explicarán las diferencias con las versiones de la instrucción anteriores
a la versión V5.0.

Programación del PLC
Manual de programación y manejo, 11/2019

4021

Instrucciones
4.1 Instrucciones

Descripción
A partir de la versión V5.0 de la instrucción TMAIL_C, el parámetro ATTACHMENT soporta
más tipos de datos.
Adicionalmente, las versiones posteriores a la V5.0 de la instrucción TMAIL_C permiten, a
través de Secure Communication, enviar un correo electrónico a través de una interfaz
Ethernet integrada en la CPU S7-1500. Para ello, la CPU S7-1500 necesita como mínimo la
versión de firmware V2.5. Los datos necesarios para el proceso de transmisión se definen
mediante uno de los tipos de datos de sistema TMAIL_V4_SEC o TMAIL_QDN_SEC en el
parámetro MAIL_ADDR_PARAM.
Si se utiliza el tipo de datos de sistema TMAIL_V4, a través de una interfaz Ethernet integrada
en la CPU S7-1500 solo es posible el envío no seguro de correos electrónicos.
Cuando se envían correos electrónicos a través de una interfaz Ethernet integrada en la CPU
S7-1500 no se soportan los tipos de datos de sistema TMAIL_FQDN ni TMAIL_V6.
Nota
Controlador por software S7-1500
Con el controlador por software S7-1500 no es posible utilizar los tipos de datos de sistema
TMAIL_V4_SEC ni TMAIL_QDN_SEC a través de ID=59.

Parámetro ATTACHMENT
El parámetro ATTACHMENT soporta también los tipos de datos siguientes a partir de la
versión V5.0 de la instrucción TMAIL_C: ARRAY of CHAR, ARRAY of LWORD (solo con CPU
S7-1500) y STRING (nota: un string vacío en el parámetro ATTACHMENT hace que el correo
electrónico se envíe sin datos adjuntos).
Esto afecta también al valor W#16#8016 de STATUS: este valor deja de emitirse a partir de la
versión V5.0 de la instrucción cuando se utilizan los tipos de datos ARRAY of CHAR, ARRAY
of LWORD (solo con CPU S7-1500) y STRING.

Valor de retorno adicional en el parámetro STATUS
A partir de la versión V5.0 de TMAIL_C, en el parámetro STATUS (Página 4038) existe además
el siguiente valor de retorno:
STATUS
(W#16#...)

Explicación

Indicaciones

8009

Fallo de funciona‐
miento interno

Una función interna ha devuelto un error. Encontrará información detallada al res‐
pecto en el parámetro SFB_STATUS del DB de instancia. Seguidamente se descri‐
ben sus posibles valores.

4022

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
La tabla siguiente muestra los valores posibles en el parámetro SFB_STATUS del DB de
instancia:
Parámetros

Explicación

SFB_STATUS
del DB de ins‐
tancia
(W#16#...)
8080

Evalúe el parámetro Status de la subinstancia T_MAIL.
● 8080_04xx: respuestas temporalmente negativas del servidor SMTP. Vuelva a intentarlo. Encontrará
más detalles en RFC 5321.
● 8080_05xx: respuestas permanentemente negativas del servidor SMTP. Encontrará más detalles en
RFC 5321.

8085

La ID de conexión (parámetro ID) ya está siendo utilizada por una conexión configurada.

8086

El parámetro ID está fuera del rango admisible.

8087

Se ha alcanzado el número máximo de conexiones, no es posible establecer más conexiones

8090

El tiempo del WatchDog debe ser mayor que cero.

8092

Los parámetros TO_S y CC están vacíos, o bien el subparámetro From está vacío o incompleto.

8093

El parámetro MAIL_ADDR_PARAM prescribe convertir la conexión en una conexión segura, pero el ser‐
vidor de correo electrónico no soporta el comando STARTTLS.

8095

Respuesta no válida del servidor de correo. Es posible que el servidor de correo no sea compatible con
RFC.

809A

La estructura SDT del parámetro MAIL_ADDR_PARAM no se soporta en una interfaz integrada.

809B

ID de interfaz no válida en el SDT en MAIL_ADDR_PARAM.

80A1

La conexión indicada o el puerto remoto ya están ocupados.

80A3

La ID está siendo utilizada por una conexión creada por el programa de usuario.

80A4

La dirección IP del punto final remoto de la conexión no es válida o bien concuerda con la dirección IP del
interlocutor local.

80A7

Error de comunicación: TDISCON se ha ejecutado antes de finalizar TMAIL_C.

80B7

El puerto remoto es 0 o la dirección IP del punto final del interlocutor se ha puesto a 0.0.0.0.

80C3

Recursos insuficientes en la CPU

80C4

Error de comunicación temporal:
● La conexión no se puede establecer en estos momentos.
● La conexión no se puede establecer porque los cortafuegos que están en la vía de conexión no están
liberados para los puertos necesarios.
● La interfaz está recibiendo nuevos parámetros.
● Una instrucción TDISCON está eliminando la conexión configurada.

80C5

El servidor de correo rechaza el establecimiento de la conexión, la ha deshecho o la ha finalizado de
manera activa.

80C6

No es posible acceder al interlocutor (error de red).

80C7

Rebase del tiempo de ejecución

80C8

Se está intentando volver a crear una conexión existente.

80C9

Error en la validación del interlocutor. El servidor de correo no concuerda con el interlocutor definido en
Parameter MailServerAddress.

80CE

La dirección IP de la interfaz local es 0.0.0.0.

80D0

El parámetro MailServerAddress contiene una cadena de caracteres vacía en el intento de utilizar DNS.

Programación del PLC
Manual de programación y manejo, 11/2019

4023

Instrucciones
4.1 Instrucciones
Parámetros

Explicación

SFB_STATUS
del DB de ins‐
tancia
(W#16#...)
80D1

El parámetro MailServerAddress no es un nombre de dominio completo. Probablemente falte un punto al
final.

80D2

No hay configurada ninguna dirección de servidor DNS.

80D3

No se ha podido resolver el nombre de dominio completo. Causas posibles:
● El servidor DNS- no está accesible, p. ej. porque está apagado o porque no se puede acceder al puerto
remoto.
● Se ha producido un error durante la comunicación con el servidor DNS-.
● El servidor DNS ha devuelto una respuesta DNS válida, pero la respuesta no contenía ninguna
dirección IPv4.

80E0

La comunicación con el servidor de correo ha fallado debido a un mensaje incorrecto. Causas posibles:
● El código de autenticación de mensajes no es válido.
● Ha fallado la descodificación de un mensaje.
● Error al descomprimir un mensaje
● Desbordamiento de registro interno

80E1

Error durante el handshake. Causas posibles:
● Interrupción por el usuario
● Seguridad insuficiente
● No se soporta una nueva negociación
● No se soporta la versión de SSL/TLS
● Error de descodificación

80E2

Certificado no soportado / no válido
Causa posible: La hora del módulo afectado no está ajustada o el módulo no se sincroniza.
Ejemplo: La fecha predeterminada del módulo es el 1.1.2012 y no se ha ajustado durante la puesta en
marcha. El periodo de validez del certificado comienza el 20.08.2016 y finaliza el 20.08.2024. En este caso,
la fecha del módulo está fuera del período de validez del certificado; el certificado no es válido para el
módulo.

80E3

El certificado del servidor de correo se ha rechazado.

80E4

No se ha encontrado una autoridad de certificación válida para el certificado del servidor de correo.

80E5

Certificado del servidor de correo caducado

80E6

Error de integridad en el protocolo Transport-Layer-Security

80E7

Ampliación no soportada del certificado del servidor de correo

80E9

No se soporta servidor TLS sin certificado de servidor.

4024

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Rango de valores ampliado de los parámetros de conexión InterfaceID y ID
Para el envío seguro de un correo electrónico a través de una interfaz integrada de la CPU
S7-1500, a los parámetros de conexión InterfaceID y ID en los SDT TMAIL_V4_SEC y
TMAIL_QDN_SEC se aplica:
Parámetros
InterfaceID

Descripción
ID de hardware de la interfaz. Rango de valores:
● 0 (nuevo): el sistema operativo selecciona automáticamente la interfaz integrada adecuada.
● ID de hardware de la interfaz integrada que debe utilizarse

ID

Referencia a la conexión: Rango de valores:
● 0 (nuevo): el sistema operativo selecciona automáticamente una ID de conexión libre en el área interna.
● 1 a 4095: la ID de conexión que debe utilizarse

Descripción de TMAIL_C a partir de la versión V6.0
Introducción
A continuación se describe la instrucción TMAIL_C a partir de la versión V6.0. Sin profundizar
en el detalle, solo se explicarán las diferencias con las versiones de la instrucción anteriores
a la versión V6.0.
Nota
CPU S7-1200
Para las CPU S7-1200, a partir de la versión V6.0 de la instrucción se aplican también todas
las ampliaciones que se describen en el tema "Descripción TMAIL_C a partir de versión V5.0".

Sinopsis
A partir de la versión V6.0 de la instrucción TMAIL_C existe la posibilidad de enviar como datos
adjuntos de un correo electrónico los Data Logs, las recetas y los archivos de usuario que se
encuentran en la SIMATIC Memory Card utilizando una interfaz integrada de la CPU. Con una
SIMATIC Memory Card insertada, en las CPU S7-1200 se pueden utilizar archivos de la
memoria interna de la CPU.
Se utiliza el tipo de datos de sistema TMail_FileReference en el parámetro ATTACHMENT. El
SDT TMail_FileReference está disponible en TIA Portal V16.0 o superior, con una versión de
firmware V4.4 o superior en las CPU S7-1200 y con una versión de firmware V2.8 o superior
en las CPU S7-1500.
En las estructuras que se admiten en MAIL_ADDR_PARAM, ahora también se admite el valor
cero para el parámetro WatchDogTime.
Si se utiliza el SDT TMail_FileReference, el parámetro ATTACHMENT_NAME recibe
automáticamente el nombre del archivo adjunto.
Se introduce información de error nueva que hace referencia a una ruta inadmisible o a
nombres de archivo no permitidos.

Programación del PLC
Manual de programación y manejo, 11/2019

4025

Instrucciones
4.1 Instrucciones

Estructura del tipo de datos de sistema TMail_FileReference
Parámetros

Tipo de
datos

Valor de
arranque

Descripción

Directory‐
Path

String[254 "/Data‐
]
Logs/"

Ruta del archivo que debe adjuntarse

FileName

String[254 "data‐
]
log.csv"

Nombre de archivo con o sin extensión

El tamaño del archivo que debe enviarse no queda limitado por la instrucción TMAIL_C.

Reglas para direccionar un archivo mediante el SDT TMail_FileReference
Primero se indican las reglas que rigen tanto para el parámetro DirectoryPath como para el
parámetro FileName. Si se infringen estas reglas se emite una información de error en el
parámetro STATUS.
● Ningún parámetro puede ser un string vacío.
● No deben utilizarse caracteres de control ASCII (de 0x00 a 0x1F).
● Los siguientes caracteres no pueden utilizarse:
– <
– >
– :
– "
– / (este carácter está permitido en el parámetro DirectoryPath como separador)
– \
– |
– ?
– *
● El parámetro no debe terminar con un espacio ni un punto.

Parámetro DirectoryPath del SDT TMail_FileReference
A la hora de introducir la ruta deseada en el parámetro DirectoryPath del SDT hay que tener
en cuenta que solo puede deducirse el directorio raíz a partir de la lógica de firmware del PLC
y que no es necesario conocer dicho directorio. Para direccionar correctamente un directorio,
el parámetro DirectoryPath debe empezar y terminar con "/". Así pues, cada ruta tiene la forma
"/abcdef/".
También es posible llegar a un directorio más profundo que el directorio raíz + 1. En este caso,
la ruta tiene la forma "/abc/def/", siendo cada "/" un directorio nuevo. La profundidad máxima
incluido el directorio raíz es de 8.
Si se desea direccionar un archivo en el directorio raíz, debe ponerse un solo "/" en la
DirectoryPath.

4026

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Además de las reglas del apartado anterior, el uso de rutas relativas está prohibido. Así pues,
"../" no es un nombre de ruta válido. También está prohibido el uso de un punto para
representar el directorio actual. Así, por ejemplo, "./" no está permitido.

Parámetro Filename del SDT TMail_FileReference
Además de las reglas citadas anteriormente, hay que tener en cuenta que el sistema operativo
del PLC limita los nombres de archivo a 60 caracteres. Si se intenta introducir un nombre de
archivo de más de 60 caracteres, la instrucción TMAIL_C se cancelará con un error.
Es posible introducir una extensión de archivo, pero no es necesario.

Parámetro WatchDogTime
Toda estructura que puede utilizarse en el parámetro MAIL_ADDR_PARAM contiene el
parámetro WatchDogTime. Dicho parámetro define el tiempo de ejecución máximo de la
operación de transmisión.
A partir de la versión V6.0 de la instrucción TMAIL_C es posible asignar a este parámetro el
valor cero. El valor cero significa que para la ejecución de TMAIL_C no se vigila el tiempo.
El valor W#16#8090 deja de aparecer en el parámetro SFB_STATUS del DB de instancia a
partir de la versión V6.0 de la instrucción.

Parámetro ATTACHMENT_NAME
En el parámetro ATTACHMENT_NAME se define el nombre con el que se muestra el archivo
adjunto de correo electrónico cuando el destinatario recibe el mensaje.
Si se utiliza TMail_FileReference, su parámetro FileName se asigna automáticamente al
parámetro ATTACHMENT_NAME. Por consiguiente, en ese caso no debe asignarse ningún
valor al parámetro ATTACHMENT_NAME. En caso contrario, la instrucción TMAIL_C genera
un error.

Nuevos códigos de error
A partir de la versión V6.0 de la instrucción TMAIL_C existen adicionalmente los siguientes
valores de retorno en el parámetro STATUS de TMAIL_C o en el parámetro SFB_STATUS del
DB de instancia:

Parámetro STATUS de TMAIL_C o parámetro SFB_STATUS
del DB de instancia (W#16#...)

Explicación

8088

El archivo no existe o no está disponible en este momento.

8089

No es posible abrir el archivo porque ya se ha alcanzado el
número máximo de archivos que pueden abrirse simultánea‐
mente (59 en CPU S7-1500 y 26 en CPU S7-1200).

808A

El parámetro DirectoryPath contiene una secuencia de ca‐
racteres no admisible o está vacío.

Programación del PLC
Manual de programación y manejo, 11/2019

4027

Instrucciones
4.1 Instrucciones
Parámetro STATUS de TMAIL_C o parámetro SFB_STATUS
del DB de instancia (W#16#...)

Explicación

808B

El parámetro FileName contiene una secuencia de caracte‐
res no admisible o está vacío.

808C

El parámetro ATTACHMENT_NAME debe estar vacío cuan‐
do se utiliza TMail_FileReference.

Parámetros TO_S y CC
Descripción
Los parámetros TO_S y CC son strings que tienen, por ejemplo, el siguiente contenido:
● <wenna@mydomain.com>, <ruby@mydomain.com>
● <admin@mydomain.com>, <judy@mydomain.com>
Las siguientes reglas deben observarse a la hora de introducir los parámetros:
● Para versiones de OUC anteriores a V6.0 (S7-1500) o a V7.0 (S7-1200), se recomienda
introducir un espacio y "<" antes de cada dirección. En todas las demás versiones de la
instrucción, "<" es opcional.
● Para versiones de OUC anteriores a V6.0 (S7-1500) o a V7.0 (S7-1200), se recomienda
introducir ">" después de cada dirección. En todas las demás versiones de la instrucción,
">" es opcional.
● Entre las direcciones indicadas en TO_S y CC debe introducirse una coma.
Por motivos relacionados con el tiempo de ejecución y el espacio en memoria, la instrucción
"TMAIL_C" no realiza ninguna prueba de sintaxis de los parámetros TO_S y CC.

Parámetro MAIL_ADDR_PARAM
Descripción
En las estructuras TMail_V4, TMail_V6 o Tmail_FQDN del parámetro MAIL_ADDR_PARAM se
define a través de qué conexión debe enviarse el mensaje de correo electrónico y se guardan
tanto la dirección del servidor de correo como los datos de inicio de sesión.
En función del formato con que desee direccionar el servidor de correo, utilice en el parámetro
MAIL_ADDR_PARAM la estructura:
● TMail_V4: direccionamiento a través de la dirección IP según IPv4.
● TMail_V6: direccionamiento a través de la dirección IP según IPv6.
● TMail_FQDN: Direccionamiento a través de un nombre de dominio completo (FQDN).

4028

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
El tipo de estructura que puede utilizarse depende de la interfaz direccionada en el parámetro
InterfaceId:
● Para utilizar la instrucción "TMAIL_C" con la interfaz interna, en el parámetro
MAIL_ADDR_PARAM debe emplearse la estructura TMail_V4.
● Si se utiliza un procesador de comunicaciones (CP) o un módulo de comunicación (CM),
pueden emplearse las tres posibilidades de direccionamiento (IPv4, IPv6 y FQDN).

Tabla 4-70

TMail_V4: direccionamiento del servidor de correo a través de la dirección IP tras IPv4

Parámetro

Tipo de datos

TMail_V4

Struct

Descripción

InterfaceId

LADDR

ID de hardware de la interfaz

ID

CONN_OUC

ID de conexión

ConnectionType

BYTE

Tipo de conexión. Seleccione 16#20 como tipo de conexión
para IPv4.

ActiveEstablished

BOOL

Bit de estado. Se pone a "1" cuando se ha establecido la
conexión.

CertIndex

BYTE

● =0: utilización de SMTP (Simple Mail Transfer Protocol).
Para enviar el mensaje de correo electrónico a través de
la interfaz de una CPU S7-1500, debe utilizarse SMTP.
● ≠0: utilización de SMTPS para proteger la conexión
antes de establecerla (en CP/CM).

WatchDogTime

TIME

Vigilancia del tiempo de ejecución. A través de este pará‐
metro se define el tiempo máximo para ejecutar el proceso
de transmisión.
Nota: con una conexión lenta, la conexión puede requerir
cierto tiempo para establecerse (aprox. un minuto). El tiem‐
po necesario para establecer la conexión debe tenerse en
cuenta al especificar el parámetro WATCH_DOG_TIME.
Una vez ha transcurrido el tiempo especificado se deshace
la conexión.

MailServerAddress

IP_V4

Dirección IP del servidor de correo. Según IPv4 en formato
XXX.XXX.XXX.XXX (decimal).
Ejemplo: 192.142.131.237.

UserName

STRING[254]

Nombre de inicio de sesión del servidor de correo

PassWord

STRING[254]

Contraseña del servidor de correo

From

EMAIL_ADDR

Dirección de remitente del mensaje de correo electrónico
que se define a través de los dos parámetros STRING si‐
guientes. Por ejemplo: "myname@mymailserver.com".

LocalPartPlusAt‐
Sign

STRING[64]

Parte local de la dirección del remitente, incluido el carácter
@. Ejemplo: "myname@".

FullQualifiedDo‐
mainName

STRING[254]

Fully Qualified Domain Name (abreviado: FQDN) del servi‐
dor de correo. Ejemplo: "mymailserver.com".

Programación del PLC
Manual de programación y manejo, 11/2019

4029

Instrucciones
4.1 Instrucciones
Tabla 4-71

TMail_V6: direccionamiento del servidor de correo a través de la dirección IP tras IPv6

Parámetro

Tipo de datos

TMail_V6

Struct

Descripción

InterfaceId

LADDR

ID de hardware de la interfaz

ID

CONN_OUC

ID de conexión

ConnectionType

BYTE

Tipo de conexión. Seleccione 16#21 como tipo de conexión
para IPv6.

ActiveEstablished

BOOL

Bit de estado. Se pone a "1" cuando se ha establecido la
conexión.

CertIndex

BYTE

● =0: utilización de SMTP (Simple Mail Transfer Protocol).
Para enviar el mensaje de correo electrónico a través de
la interfaz de una CPU S7-1500, debe utilizarse SMTP.
● ≠0: utilización de SMTPS para proteger la conexión
antes de establecerla (en CP/CM). El certificado que
debe utilizarse se especifica en el parámetro CertIndex
(véase Árbol del proyecto" > "Ajustes de seguridad
global" > "Administrador de certificados").

WatchDogTime

TIME

Vigilancia del tiempo de ejecución. A través de este paráme‐
tro se define el tiempo máximo para ejecutar el proceso de
transmisión.
Nota: con una conexión lenta, la conexión puede requerir
cierto tiempo para establecerse (aprox. un minuto). El tiempo
necesario para establecer la conexión debe tenerse en cuen‐
ta al especificar el parámetro WATCH_DOG_TIME.
Una vez ha transcurrido el tiempo predefinido se deshace la
conexión.

MailServerAddress

IP_V6

Dirección IP del servidor de correo según IPv6 en formato
XXXX.XXXX.XXXX.XXXX.XXXX.XXXX.XXXX.XXXX (hexa‐
decimal).
La dirección se divide en 8 bloques de 2 bytes cada uno (en
total, 16 bytes).
Ejemplo: 2001:db8:1f11:08d3:290:27ff:0370:2093

4030

UserName

STRING[254]

Nombre de inicio de sesión del servidor de correo

PassWord

STRING[254]

Contraseña del servidor de correo

From

EMAIL_ADDR

Dirección de remitente del mensaje de correo electrónico
que se define a través de los dos parámetros STRING si‐
guientes. Por ejemplo: "myname@mymailserver.com".

LocalPartPlusAt‐
Sign

STRING[64]

Parte local de la dirección del remitente, incluido el carácter
@. Ejemplo: "myname@".

FullQualifiedDo‐
mainName

STRING[254]

Fully Qualified Domain Name (abreviado: FQDN) del servi‐
dor de correo. Ejemplo: "mymailserver.com".

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Tabla 4-72

TMail_FQDN: direccionamiento del servidor de correo a través de FQDN

Parámetro

Tipo de datos

TMail_FQDN

Struct

Descripción

InterfaceId

LADDR

ID de hardware de la interfaz

ID

CONN_OUC

ID de conexión

ConnectionType

BYTE

Tipo de conexión. Seleccione 16#22 como tipo de conexión
para el FQDN.

ActiveEstablished

BOOL

Bit de estado. Se pone a "1" cuando se ha establecido la
conexión.

CertIndex

BYTE

● =0: utilización de SMTP (Simple Mail Transfer Protocol).
Para enviar el mensaje de correo electrónico a través de
la interfaz de una CPU S7-1500, debe utilizarse SMTP.
● ≠0: utilización de SMTPS para proteger la conexión
antes de establecerla (en CP/CM). El certificado que
debe utilizarse se especifica en el parámetro CertIndex
(véase "Árbol del proyecto" > "Ajustes de seguridad
global" > "Administrador de certificados").

WatchDogTime

TIME

Vigilancia del tiempo de ejecución. A través de este paráme‐
tro se define el tiempo máximo para ejecutar el proceso de
transmisión.
Nota: con una conexión lenta, la conexión puede requerir
cierto tiempo para establecerse (aprox. un minuto). El tiempo
necesario para establecer la conexión debe tenerse en cuen‐
ta al especificar el parámetro WATCH_DOG_TIME.
Una vez ha transcurrido el tiempo especificado se deshace
la conexión.

MailServerAddress

STRING[254]

FQDN (Fully Qualified Domain Name) del servidor de correo.
El servidor de correo se direcciona a través del nombre com‐
pleto del dominio.

UserName

STRING[254]

Nombre de inicio de sesión del servidor de correo

PassWord

STRING[254]

Contraseña del servidor de correo

From

Struct

Dirección de remitente del mensaje de correo electrónico
que se define a través de los dos parámetros STRING si‐
guientes. Por ejemplo: "myname@mymailserver.com".

LocalPartPlusAt‐
Sign

STRING[64]

Parte local de la dirección del remitente, incluido el carácter
@. Ejemplo: "myname@".

FullQualifiedDo‐
mainName

STRING[254]

Fully Qualified Domain Name (abreviado: FQDN) del servi‐
dor de correo. Ejemplo: "mymailserver.com".

Ejemplo: "www.mymailserver.com.".

Parámetro MAIL_ADDR_PARAM a partir de versión 4.0 de TMAIL_C
Descripción
Mediante el parámetro MAIL_ADDR_PARAM se especifican los datos necesarios para el
proceso de transmisión, p. ej. los parámetros de conexión, la dirección del servidor de correo
electrónico y el puerto TCP utilizado.

Programación del PLC
Manual de programación y manejo, 11/2019

4031

Instrucciones
4.1 Instrucciones
En función del formato con que desee direccionar el servidor de correo, utilice en el parámetro
MAIL_ADDR_PARAM una de las estructuras siguientes:
● TMail_V4_SEC: Direccionamiento a través de la dirección IP en formato IPv4
● TMail_V6_SEC: Direccionamiento a través de la dirección IP en formato IPv6
● TMail_QDN_SEC: Direccionamiento mediante un nombre de host completo (FQDN)

TMail_V4_SEC: Direccionamiento del servidor de correo mediante la dirección IP en formato IPv4
Parámetro

Tipo de datos

TMail_V4_SEC

Struct

Descripción

InterfaceId

LADDR

Identificador de hardware de la interfaz Et‐
hernet

ID

CONN_OUC

ID de conexión

ConnectionType

BYTE

Tipo de conexión. Seleccione 16#20 como
tipo de conexión para IPv4.

ActiveEstablishment

BOOL

Establecimiento activo / pasivo de la cone‐
xión. Como el CP es siempre el cliente
SMTP, este parámetro debe estar puesto a
"1".

WatchDogTime

TIME

Vigilancia del tiempo de ejecución. A través
de este parámetro se define el tiempo máxi‐
mo para ejecutar el proceso de transmisión.
Nota: con una conexión lenta, la conexión
puede requerir cierto tiempo para estable‐
cerse (aprox. un minuto). El tiempo necesa‐
rio para establecer la conexión debe tenerse
en cuenta al especificar el parámetro Watch‐
DogTime.
Una vez ha transcurrido el tiempo especifi‐
cado se deshace la conexión.

MailServerAddress

IP_V4

Dirección IP del servidor de correo en for‐
mato IPv4: XXX.XXX.XXX.XXX (decimal).
Ejemplo: 192.142.131.237.

UserName

STRING[254]

Nombre de usuario.
Se necesita cuando el usuario desea acce‐
der a su buzón de correo electrónico para
identificarse como propietario del mismo an‐
te el proveedor del correo electrónico.

PassWord

STRING[254]

Contraseña del usuario.
Se necesita cuando el usuario desea acce‐
der a su buzón de correo electrónico para
identificarse como propietario del mismo an‐
te el proveedor del correo electrónico.

From

LocalPartPlusAtSign

4032

EMAIL_ADDR

Dirección de remitente del mensaje de co‐
rreo electrónico que se define a través de los
dos parámetros STRING siguientes. Por
ejemplo: "myname@mymailserver.com".

STRING[64]

Parte local de la dirección del remitente, in‐
cluido el carácter @. Ejemplo: "myname@".

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Tipo de datos

Descripción

STRING[254]

Fully Qualified Domain Name (abreviado:
FQDN) del servidor de correo. Ejemplo:
"mymailserver.com".

RemotePort

UINT

Puerto TCP del servidor de correo

ActivateSecureConn

BOOL

● 1: conexión SMTP segura

FullQualifiedDomainName

● 0: conexión SMTP (no segura). En este
caso, los parámetros siguientes son
irrelevantes.
ExtTLSCapabilities

BYTE

Actualmente no se utiliza

TLSServerCertRef

UDINT

Referencia al certificado X.509 V3 (CA) del
servidor de correo, que será utilizada por el
cliente TLS para validar la autenticación del
servidor TLS.

Programación del PLC
Manual de programación y manejo, 11/2019

4033

Instrucciones
4.1 Instrucciones

TMail_V6_SEC: Direccionamiento del servidor de correo a través de la dirección IP en formato IPv6
Parámetro

Tipo de datos

TMail_V6_SEC

Struct

Descripción

InterfaceId

LADDR

Identificador de hardware de la interfaz Et‐
hernet

ID

CONN_OUC

ID de conexión

ConnectionType

BYTE

Tipo de conexión. Seleccione 16#21 como
tipo de conexión para IPv6.

ActiveEstablishment

BOOL

Establecimiento activo / pasivo de la cone‐
xión. Como el CP es siempre el cliente
SMTP, este parámetro debe estar puesto a
"1".

WatchDogTime

TIME

Vigilancia del tiempo de ejecución. A través
de este parámetro se define el tiempo máxi‐
mo para ejecutar el proceso de transmisión.
Nota: con una conexión lenta, la conexión
puede requerir cierto tiempo para estable‐
cerse (aprox. un minuto). El tiempo necesa‐
rio para establecer la conexión debe tenerse
en cuenta al especificar el parámetro Watch‐
DogTime.
Una vez ha transcurrido el tiempo especifi‐
cado se deshace la conexión.

MailServerAddress

IP_V6

Dirección IP del servidor de correo en for‐
mato IPv6:
XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:XX
XX:XXXX (hexadecimal). La dirección se di‐
vide en 8 bloques de 2 bytes cada uno (en
total, 16 bytes).
Ejemplo:
2001:db8:1f11:08d3:290:27ff:0370:2093

UserName

STRING[254]

Nombre de usuario.
Se necesita cuando el usuario desea acce‐
der a su buzón de correo electrónico para
identificarse como propietario del mismo an‐
te el proveedor del correo electrónico.

PassWord

STRING[254]

Contraseña del usuario.
Se necesita cuando el usuario desea acce‐
der a su buzón de correo electrónico para
identificarse como propietario del mismo an‐
te el proveedor del correo electrónico.

From

4034

EMAIL_ADDR

Dirección de remitente del mensaje de co‐
rreo electrónico que se define a través de los
dos parámetros STRING siguientes. Por
ejemplo: "myname@mymailserver.com".

LocalPartPlusAtSign

STRING[64]

Parte local de la dirección del remitente, in‐
cluido el carácter @. Ejemplo: "myname@".

FullQualifiedDomainName

STRING[254]

Fully Qualified Domain Name (abreviado:
FQDN) del servidor de correo. Ejemplo:
"mymailserver.com".

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Tipo de datos

Descripción

RemotePort

UINT

Puerto TCP del servidor de correo

ActivateSecureConn

BOOL

● 1: conexión SMTP segura
● 0: conexión SMTP (no segura). En este
caso, los parámetros siguientes son
irrelevantes.

ExtTLSCapabilities

BYTE

Actualmente no se utiliza

TLSServerCertRef

UDINT

Referencia al certificado X.509 V3 (CA) del
servidor de correo, que será utilizada por el
cliente TLS para validar la autenticación del
servidor TLS.

Programación del PLC
Manual de programación y manejo, 11/2019

4035

Instrucciones
4.1 Instrucciones

TMail_QDN_SEC: Direccionamiento del servidor de correo mediante FQDN
Parámetro

Tipo de datos

TMail_QDN_SEC

Struct

Descripción

InterfaceId

LADDR

Identificador de hardware de la interfaz Et‐
hernet

ID

CONN_OUC

ID de conexión

ConnectionType

BYTE

Tipo de conexión. Seleccione 16#22 como
tipo de conexión para FQDN.

ActiveEstablishment

BOOL

Establecimiento activo / pasivo de la cone‐
xión. Como el CP S7 es siempre el cliente
SMTP, este parámetro debe estar puesto a
"1".

WatchDogTime

TIME

Vigilancia del tiempo de ejecución. A través
de este parámetro se define el tiempo máxi‐
mo para ejecutar el proceso de transmisión.
Nota: con una conexión lenta, la conexión
puede requerir cierto tiempo para estable‐
cerse (aprox. un minuto). El tiempo necesa‐
rio para establecer la conexión debe tenerse
en cuenta al especificar el parámetro Watch‐
DogTime.
Una vez ha transcurrido el tiempo especifi‐
cado se deshace la conexión.

MailServerQDN

STRING[254]

FQDN (Fully Qualified Domain Name) del
servidor de correo. El servidor de correo se
direcciona a través del nombre completo del
dominio, que debe terminar en ".".
Ejemplo: "www.mymailserver.com."

UserName

STRING[254]

Nombre de usuario
Se necesita cuando el usuario desea acce‐
der a su buzón de correo electrónico para
identificarse como propietario del mismo an‐
te el proveedor del correo electrónico.

PassWord

STRING[254]

Contraseña del usuario
Se necesita cuando el usuario desea acce‐
der a su buzón de correo electrónico para
identificarse como propietario del mismo an‐
te el proveedor del correo electrónico.

From

4036

EMAIL_ADDR

Dirección de remitente del mensaje de co‐
rreo electrónico que se define a través de los
dos parámetros STRING siguientes. Por
ejemplo: "myname@mymailserver.com"

LocalPartPlusAtSign

STRING[64]

Parte local de la dirección del remitente, in‐
cluido el carácter @. Ejemplo: "myname@".

FullQualifiedDomainName

STRING[254]

Fully Qualified Domain Name (abreviado:
FQDN) del servidor de correo. Ejemplo:
"mymailserver.com"

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Tipo de datos

Descripción

RemotePort

UINT

Puerto TCP del servidor de correo

ActivateSecureConn

BOOL

● 1: Conexión SMTP segura
● 0: Conexión SMTP no segura En este
caso, los parámetros siguientes son
irrelevantes.

ExtTLSCapabilities

BYTE

Actualmente no se utiliza

TLSServerCertRef

UDINT

Referencia al certificado X.509 V3 (CA) del
servidor de correo, que será utilizada por el
cliente TLS para validar la autenticación del
servidor TLS.

Parámetros DONE, BUSY y ERROR
Descripción
Los parámetros de salida DONE, BUSY y ERROR solo se indican durante un ciclo si el estado
del parámetro de salida BUSY cambia de "1" a "0".
En la tabla siguiente se muestra la correspondencia entre DONE, BUSY y ERROR. Permite
determinar en qué estado se encuentra la instrucción "TMAIL_C" actualmente o cuándo se
completó la transmisión del mensaje de correo electrónico.
DONE

BUSY

ERRO
R

Descripción

0

1

0

La petición está en proceso.

1

0

0

La petición ha finalizado correctamente.

0

0

1

La petición se ha finalizado con un error. La causa del error se puede
consultar en el parámetro STATUS (Página 4038).

0

0

0

No se ha asignado ninguna (nueva) petición a la instrucción "TMAIL_C".

Programación del PLC
Manual de programación y manejo, 11/2019

4037

Instrucciones
4.1 Instrucciones

Parámetro STATUS
Descripción
La tabla siguiente muestra los valores de retorno en el parámetro STATUS de "TMAIL_C":
Valor de re‐
torno

Explicación

Indicaciones

La ejecución de "TMAIL_C" ha finali‐
zado sin errores.

La finalización sin errores de "TMAIL_C" no sig‐
nifica que el mensaje de correo electrónico en‐
viado sea recibido.

STATUS*
(W#16#...):
0000

La entrada incorrecta de las direcciones de los
destinatarios no genera un error de estado de la
instrucción "TMAIL_C". En tal caso no es posi‐
ble garantizar el envío del mensaje de correo
electrónico a otros destinatarios, aunque se ha‐
yan introducido correctamente.

4038

7001

"TMAIL_C" está activa (BUSY = 1).

Primera llamada: orden lanzada.

7002

"TMAIL_C" está activa (BUSY = 1).

Llamada intermedia: orden ya activa.

8xxx

La ejecución de "TMAIL_C" ha finali‐
zado con un código de error de las ins‐
trucciones de comunicación llamadas
internamente.

Encontrará información detallada en las des‐
cripciones del parámetro STATUS de las ins‐
trucciones de comunicación "TCON (Pági‐
na 4048)", "TDISCON (Página 4056)", "TSEND
(Página 4061)" y "TRCV (Página 4065)".

8010

Error al establecer la conexión

Encontrará más información sobre la evalua‐
ción
en el parámetro SFB_STATUS del bloque de
datos de instancia. El significado del código de
error mostrado en SFB_STATUS puede con‐
sultarse en la descripción del parámetro STA‐
TUS de la instrucción "TCON (Página 4048)".

8011

Error al enviar los datos

Encontrará más información sobre la evalua‐
ción
en el parámetro SFB_STATUS del bloque de
datos de instancia. El significado del código de
error mostrado en SFB_STATUS puede con‐
sultarse en la descripción del parámetro STA‐
TUS de la instrucción "TSEND (Página 4061)".

8012

Error al recibir los datos

Encontrará más información sobre la evalua‐
ción
en el parámetro SFB_STATUS del bloque de
datos de instancia. El significado del código de
error mostrado en SFB_STATUS puede con‐
sultarse en la descripción del parámetro STA‐
TUS de la instrucción "TRCV (Página 4065)".

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Valor de re‐
torno

Explicación

Indicaciones

8013

Error al establecer la conexión

Encontrará más información sobre la evalua‐
ción
en el parámetro SFB_STATUS del bloque de
datos de instancia. El significado del código de
error mostrado en SFB_STATUS puede con‐
sultarse en la descripción del parámetro STA‐
TUS de las instrucciones "TCON (Pági‐
na 4048)" y "TDISCON (Página 4056)".

8014

No es posible establecer una cone‐
xión.

Posiblemente ha introducido una dirección IP
del servidor de correo incorrecta (MailServe‐
rAddress (Página 4028)) o un intervalo dema‐
siado corto (WatchDogTime (Página 4028)) pa‐
ra establecer la conexión. También existe la
posibilidad de que la CPU no tenga conexión
con la red o que la configuración de la CPU sea
incorrecta.

8015

Tipo de datos incorrecto para
MAIL_ADDR_PARAM

Los tipos de datos permitidos son los tipos de
datos de sistema (estructuras) TMail_V4,
TMail_V6 y TMail_FQDN.

STATUS*
(W#16#...):

A partir de la versión de instrucción V4.0 están
permitidos adicionalmente los siguientes tipos
de datos de sistema: TMail_V4_SEC,
TMail_V6_SEC y TMail_QDN_SEC.
8016

Tipo de datos incorrecto para el pará‐
metro ATTACHMENT

Los tipos de datos permitidos son ArrayOfByte,
ArrayOfWord y ArrayOfDWord.

8017

Longitud de datos incorrecta para el
parámetro ATTACHMENT

La longitud de datos permitida es <= 65534
bytes.

8401

Ningún canal disponible. Causa posi‐ Error específico de CP 154x‑1
ble: ya existe una conexión de correo
electrónico a través del CP. No es po‐
sible establecer una segunda cone‐
xión paralela.

8403

No ha podido establecerse ninguna
conexión TCP/IP con el servidor de
correo.

Error específico de CP 154x‑1

8405

El servidor ha denegado la solicitud de
iniciar sesión.

Error específico de CP 154x‑1

8406

El cliente SMTP ha detectado un error
de SSL interno o un problema con la
estructura del certificado.

Error específico de CP 154x‑1

8407

Se ha denegado la solicitud de utilizar
SSL.

Error específico de CP 154x‑1

8408

El cliente no ha podido determinar nin‐ Error específico de CP 154x‑1
guna toma de enchufe para establecer
la conexión TCP/IP con el servidor de
correo.

Programación del PLC
Manual de programación y manejo, 11/2019

4039

Instrucciones
4.1 Instrucciones
Valor de re‐
torno

Explicación

Indicaciones

8409

No es posible escribir a través de la
conexión. Causa posible: el interlocu‐
tor ha reseteado la conexión o esta se
ha interrumpido.

Error específico de CP 154x‑1

8410

No es posible leer a través de la cone‐ Error específico de CP 154x‑1
xión. Causa posible: el interlocutor ha
reseteado la conexión o esta se ha in‐
terrumpido.

8411

Error específico de CP 154x‑1
Error al enviar el mensaje de correo
electrónico. Causa: el espacio de me‐
moria no es suficiente para llevar a ca‐
bo el proceso de transmisión

8412

El servidor DNS configurado no ha po‐ Error específico de CP 154x‑1
dido resolver el nombre de dominio in‐
dicado.

8413

El nombre de dominio no ha podido
resolverse a causa de un error interno
en el subsistema DNS.

8414

Se ha indicado una cadena de carac‐ Error específico de CP 154x‑1
teres vacía como nombre de dominio.

8415

Se ha producido un error interno en el Error específico de CP 154x‑1
módulo Curl. Se ha detenido la ejecu‐
ción.

8416

Se ha producido un error interno en el Error específico de CP 154x‑1
módulo SMTP. Se ha detenido la eje‐
cución.

8417

Solicitud a SMTP en un canal que ya Error específico de CP 154x‑1
se está utilizando o ID de canal no vá‐
lida. Se ha detenido la ejecución.

8418

Envío del mensaje de correo electróni‐ Error específico de CP 154x‑1
co interrumpido. Causas posibles: re‐
base del tiempo de ejecución (paráme‐
tro WatchDogTime) o de la transición
arranque/parada del CP.

8419

El canal se ha interrumpido y no se
puede utilizar antes de que la cone‐
xión se haya cerrado.

Error específico de CP 154x‑1

8420

La cadena de certificados del servidor
no ha podido verificarse con el certifi‐
cado raíz del CP.

Error específico de CP 154x‑1

8421

Se ha producido un error interno. Se
ha detenido la ejecución.

Error específico de CP 154x‑1

STATUS*
(W#16#...):

4040

Error específico de CP 154x‑1

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Valor de re‐
torno

Explicación

Indicaciones

STATUS*
(W#16#...):
82xx, 84xx,
o 85xx

El mensaje de error procede del servi‐
dor de correo y, exceptuando el "8",
corresponde al número de error del
protocolo SMTP.

Encontrará más información sobre el código de
error SMTP y otros códigos de error en el pro‐
tocolo SMTP en Internet, o bien en la documen‐
tación sobre errores del servidor de correo.
En las siguientes filas se indican algu‐ También es posible consultar el último mensaje
de error enviado por el servidor de correo en
nos códigos de error posibles.
forma de texto en el DB de instancia en el pa‐
rámetro BUFFER1. En el DB de instancia, en
DATEN, encontrará los últimos datos enviados
por la instrucción "TMAIL_C".

8450

Acción no ejecutada: Buzón de correo
no disponible/no accesible

Vuelva a intentarlo más tarde.

8451

Acción cancelada: Error local en el
procesamiento

Vuelva a intentarlo más tarde.

8500

Error de sintaxis: Error no detectado.
Ello incluye también el error debido a
una cadena de comandos demasiado
larga. Otra posible causa es que el
servidor de correo electrónico no so‐
porte el método de autenticación LO‐
GIN.

Compruebe los parámetros de "TMAIL_C". In‐
tente enviar un mensaje de correo electrónico
sin autenticación. Sustituya para ello el conte‐
nido del parámetro UserName por un string va‐
cío. Si no se especifica un nombre de usuario,
no se hace uso del método de autenticación
LOGIN.

8501

Error de sintaxis: Entrada incorrecta
en un parámetro

Causa posible: Dirección incorrecta en los pa‐
rámetros TO_S o CC (véase también: Paráme‐
tros TO_S y CC (Página 4028)).

8502

Comando desconocido o no imple‐
mentado

Compruebe las entradas realizadas, especial‐
mente el parámetro FROM. Es posible que esté
incompleto y que haya olvidado "@" o "." (con‐
sulte también: Parámetros TO_S y CC (Pági‐
na 4028)).

8504

Parámetro de comando no implemen‐ Compruebe las entradas realizadas, especial‐
tado
mente el parámetro FROM. Es posible que esté
incompleto y que haya olvidado "@" (consulte
también: Parámetros TO_S y CC (Pági‐
na 4028)).

8535

Autenticación SMTP incompleta

8550

Posiblemente ha introducido un nombre de
No es posible acceder al servidor de
correo. No dispone de derechos de ac‐ usuario o una contraseña incorrectos o el ser‐
ceso.
vidor de correo no soporta el Login. Otra posi‐
ble causa del error puede ser la entrada inco‐
rrecta del nombre del dominio después de "@"
o que falte un "." en los parámetros TO_S, CC y
FROM (consulte también: Parámetros TO_S y
CC (Página 4028)).

8552

Acción cancelada: Rebase del espa‐
cio de memoria asignado

Vuelva a intentarlo más tarde.

8554

Error al realizar la transmisión.

Vuelva a intentarlo más tarde.

Programación del PLC
Manual de programación y manejo, 11/2019

Puede que haya introducido un nombre de
usuario o una contraseña incorrectas.

4041

Instrucciones
4.1 Instrucciones
Valor de re‐
torno

Explicación

Indicaciones

Error debido a dirección de e-mail in‐
correcta.

Si se escriben varias direcciones, deben sepa‐
rarse mediante comas.

STATUS*
(W#16#...):
8555

* Los códigos de error en el editor de programas se pueden representar como valores enteros o
hexadecimales. Encontrará más información sobre el cambio de los formatos de visualización en
"Consulte también".

Ejemplo: enviar un mensaje de correo electrónico con TMAIL_C
Introducción
El siguiente ejemplo de llamada muestra el uso de la instrucción TMAIL_C:

Requisitos
● Para enviar un correo electrónico es imprescindible haber configurado previamente el
hardware.
● La infraestructura de la red debe permitir establecer una conexión con el servidor de correo.

Anexo de un correo electrónico
El mensaje de correo electrónico debe enviarse con un anexo.
Como origen del anexo debe crearse un Array of Byte con el nombre "Data" en un bloque de
datos global ("SLI_gDB_MailAttach_scl"). El array se interconecta posteriormente en el
parámetro de entrada ATTACHMENT.

Almacenamiento de datos
La información de conexión de la CPU y los datos de dirección del servidor de correo se
recogen en el tipo de datos de sistema TMail_V4.
● Cree un bloque de datos global ("SLI_gDB_TMAIL_C_scl").
● Cree una variable "Par1" con el tipo de datos "TMail_V4" en el bloque de datos.
● En la estructura siguiente, introduzca los parámetros de acuerdo con la configuración de la
CPU y los datos de conexión del servidor de correo. Encontrará más información en la
descripción del parámetro de entrada MAIL_ADDR_PARAM (Página 4028).
La variable "Par1" se interconecta posteriormente en el parámetro de entrada
MAIL_ADDR_PARAM.

4042

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Además, cree en el bloque de datos global las variables siguientes:

Llamada de la instrucción
Cree un bloque de función nuevo en el lenguaje SCL con las interfaces siguientes:

Programación del PLC
Manual de programación y manejo, 11/2019

4043

Instrucciones
4.1 Instrucciones
Copie el siguiente código fuente llamando a TMAIL_C en la ventana de programación:
Llamada TMAIL_C
//Set "sendMail" to "TRUE" to start TMAIL_C.
#TMAIL_C_Instance(REQ:="SLI_gDB_TMAIL_C_scl".sendMail AND NOT("SLI_gDB_TMAIL_C_scl".busy),
TO_S:="SLI_gDB_TMAIL_C_scl".target,
SUBJECT:="SLI_gDB_TMAIL_C_scl".subject,
TEXT:="SLI_gDB_TMAIL_C_scl".text,
ATTACHMENT:="SLI_gDB_MailAttach_scl".data,
MAIL_ADDR_PARAM:="SLI_gDB_TMAIL_C_scl".par1,
DONE=>#done,
BUSY=>"SLI_gDB_TMAIL_C_scl".busy,
ERROR=>"SLI_gDB_TMAIL_C_scl".error,
STATUS=>#status);
//INFO: Saves the success status of TMAIL_C.
IF #done THEN
"SLI_gDB_TMAIL_C_scl".done := TRUE;
"SLI_gDB_TMAIL_C_scl".sendMail := FALSE;
END_IF;
//INFO: In case of an error, saves the error status of TMAIL_C and resets "sendMail".
IF "SLI_gDB_TMAIL_C_scl".error THEN
"SLI_gDB_TMAIL_C_scl".memErrStatus := #status;
"SLI_gDB_TMAIL_C_scl".sendMail := FALSE;
END_IF;

Resultado
Si la variable "sendMail" devuelve el estado lógico "TRUE" (cambio de flanco de "0" a "1" en el
parámetro REQ), se ejecuta la instrucción "TMAIL_C". En cuanto la variable "#done" devuelve
el estado lógico "TRUE", la variable "sendMail" se restablece automáticamente al estado
lógico "FALSE". Además, el envío correcto del correo electrónico ("#done" es "TRUE") se
guarda en la variable "done".
En caso de fallo de la instrucción "TMAIL_C" el valor del parámetro STATUS ("#status") se
guarda en la variable "memErrStatus", y se restablece la variable "sendMail".

Consulte también
Descripción de TMAIL_C (Página 4015)

4044

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Otros
TCON: Establecer conexión
TCON: Establecer una conexión
Validez
La siguiente descripción de la instrucción "TCON" se aplica a las CPU S7-1200 con versión de
firmware < V4.0.

Descripción
La instrucción "TCON" permite configurar y establecer una conexión. Una vez configurada y
establecida la conexión, la CPU la mantiene y la vigila automáticamente. "TCON" se ejecuta
de forma asíncrona.
Para configurar la conexión se utilizan los datos de conexión especificados en los parámetros
CONNECT e ID. Para poder establecer la conexión debe detectarse un flanco ascendente en
el parámetro REQ. Si la conexión se establece correctamente, el parámetro DONE se pone a
"1".
Nota
Soporte en caso de programación de conexiones
Cuando se selecciona una instrucción de comunicación TCON, TSEND_C o TRCV_C en un
bloque de programa y se crean y parametrizan conexiones del tipo TCP, UDP o ISO-on-TCP,
existe la posibilidad de recibir ayuda de la parametrización de conexiones.
La parametrización de conexiones se encuentra en la ventana de inspección del editor de
programación.

Número de conexiones posibles
El número de conexiones posibles se indica en los datos técnicos de la CPU.

Conexiones TCP e ISO‑on‑TCP
Ambos interlocutores llaman la instrucción "TCON" para crear y establecer la conexión. En la
parametrización se especifica cuáles son el punto final activo y el punto final pasivo de la
comunicación.
Si se interrumpe la conexión, p. ej. debido a una interrupción de la línea o por el interlocutor
remoto, el interlocutor activo intenta restablecer la conexión. No es preciso volver a llamar
"TCON". No obstante, esto solo es aplicable si "TCON" se ha ejecutado una vez correctamente
(DONE = 1).

Programación del PLC
Manual de programación y manejo, 11/2019

4045

Instrucciones
4.1 Instrucciones
Con la ejecución de la instrucción "TDISCON (Página 4056)" o en el estado operativo STOP
de la CPU se deshace una conexión existente y se elimina la conexión configurada. Para
volver a configurar y establecer la conexión es preciso ejecutar "TCON" de nuevo.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "TCON":
Parámetro

Declaración

Tipo de datos

REQ

Input

BOOL

I, Q, M, D, L o cons‐
tante

Inicia la petición de establecer la conexión es‐
pecificada en ID cuando se detecta un flanco
ascendente.

ID

Input

CONN_OUC

I, Q, M, D, L o cons‐
tante

Referencia a la conexión asignada.

D

Puntero hacia la descripción de la conexión

CONNECT

InOut

TCON_Param

Área de memoria

Descripción

Rango de valores: W#16#0001 a W#16#0FFF
Consulte también: AUTOHOTSPOT

DONE

Output

BOOL

I, Q, M, D, L

Parámetro de estado con los valores siguien‐
tes:
● 0: Petición no iniciada aún o en ejecución
● 1: Petición finalizada sin errores

BUSY

Output

BOOL

I, Q, M, D, L

Parámetro de estado con los valores siguien‐
tes:
● 0: Petición no iniciada aún o ya finalizada
● 1: Petición no finalizada aún. No se puede
iniciar una nueva petición

ERROR

Output

BOOL

I, Q, M, D, L

Parámetro de estado ERROR:
● 0: Ningún error
● 1: Se han producido errores

STATUS

Output

WORD

I, Q, M, D, L

Estado de la instrucción

Encontrará más información sobre los tipos de datos válidos en "Vista general de los tipos de
datos válidos (Página 241)".

Parámetros BUSY, DONE y ERROR
El estado de ejecución se controla a través de los parámetros BUSY, DONE, ERROR y
STATUS. El parámetro BUSY indica el estado de ejecución. El parámetro DONE permite
comprobar si una petición se ha ejecutado correctamente. El parámetro ERROR se activa si
ocurren errores durante la ejecución de "TCON". La información de error se indica en el
parámetro STATUS.
La tabla siguiente muestra la relación entre los parámetros BUSY, DONE y ERROR:
BUSY

DONE

ERROR

Descripción

1

0

0

La petición se está procesando.

0

1

0

La petición se ha ejecutado correctamente.

4046

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
BUSY

DONE

ERROR

Descripción

0

0

1

La petición se ha finalizado con un error. La causa del error se indica en el parámetro
STATUS.

0

0

0

No se ha asignado ninguna petición nueva.

Parámetros ERROR y STATUS
ERROR

STATUS*
(W#16#...)

Explicación

0

0000

La conexión se ha establecido correctamente.

0

7000

No se está procesando ninguna petición

0

7001

Iniciar el procesamiento de la petición, establecer la conexión

0

7002

Estableciendo la conexión (REQ es irrelevante).

1

8085

La ID de conexión (parámetro ID) ya está siendo utilizada por una conexión configurada.

1

8086

El parámetro ID está fuera del rango admisible.

1

8087

Se ha alcanzado el número máximo de conexiones, no es posible establecer más conexiones

1

8089

El parámetro CONNECT no apunta a un bloque de datos.

1

809A

La estructura del parámetro CONNECT no se soporta en una interfaz integrada, o la longitud no
es válida, o se ha indicado una "InterfaceID" errónea en la descripción de la conexión (SDT).

1

809B

El elemento InterfaceId de la estructura TCON_xxx no hace referencia a ninguna ID de hardware
de una interfaz de CPU o de CM/CP, o bien tiene el valor "0".

1

80A0

Error de grupo para los códigos de error W#16#80A1 y W#16#80A2

1

80A1

La conexión indicada o el puerto ya están ocupados.

1

80A2

El sistema está utilizando el puerto local o remoto.

1

80A3

Se está intentando volver a establecer una conexión existente.

1

80A4

La dirección IP del punto final remoto de la conexión no es válida, es decir, concuerda con la
dirección IP del interlocutor local.

1

80A5

Ya se está utilizando la ID de conexión.

1

80A7

Error de comunicación: "TDISCON (Página 4056)" se ha ejecutado antes de finalizar "TCON".

1

80B2

El parámetro CONNECT apunta a un bloque de datos que ha sido generado con el atributo
"Guardar solo en la memoria de carga".

1

80B4

Al establecer una conexión pasiva vía el protocolo ISO on TCP (connection_type = B#16#12) se
han infringido una o varias de las condiciones siguientes:
● local_tsap_id_len >= B#16#02
● local_tsap_id[1] = B#16#E0
● Con local_tsap_id_len >= B#16#03, local_tsap_id[1] es un carácter ASCII.
● local_tsap_id[1] es un carácter ASCII y local_tsap_id_len >= B#16#03.

1

80B5

Con el tipo de conexión 13 = UDP solo se permite un establecimiento pasivo de la conexión.

1

80B6

Error de parametrización en el parámetro connection_type del TCON_Param de SDT.

1

80B7

Error en uno de los parámetros siguientes del bloque de datos para la descripción de la conexión:
block_length, local_tsap_id_len, rem_subnet_id_len, rem_staddr_len, rem_tsap_id_len,
next_staddr_len.
Nota: Si llama TCON con TCP para el lado pasivo, local_tsap_id_len tiene que tener el valor 2 y
rem_tsap_id_len el valor 0.

1

80B8

La descripción de la conexión de la ID del elemento de la estructura y la ID del parámetro del
bloque son distintas.

Programación del PLC
Manual de programación y manejo, 11/2019

4047

Instrucciones
4.1 Instrucciones
ERROR

STATUS*
(W#16#...)

Explicación

1

80C3

Todos los recursos de conexión están ocupados.

1

80C4

Error de comunicación temporal:
● La conexión no se puede establecer en estos momentos.
● La conexión no se puede establecer porque los cortafuegos que están en la vía de conexión
no están habilitados para los puertos necesarios.
● La interfaz está recibiendo nuevos parámetros.
● Una instrucción "TDISCON (Página 4056)" está deshaciendo la conexión configurada.

* Los códigos de error en el editor de programación se pueden representar como valores enteros o hexadecimales. Encon‐
trará más información sobre el cambio de los formatos de visualización en "Consulte también".

Consulte también
Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente (Página 618)
Cambiar formatos de visualización en el estado del programa (Página 8529)

TCON: Establecer una conexión
Descripción
La instrucción "TCON" permite configurar y establecer una conexión. Una vez configurada y
establecida la conexión, la CPU la mantiene y la vigila automáticamente. "TCON" se ejecuta
de forma asíncrona.
En las CPU S7-1500 de versión de firmware V2.0 o superior, con la instrucción "TCON" es
posible crear también un punto de acceso para la comunicación IPv4-Multicast a través de las
interfaces PROFINET integradas.
Para configurar la conexión se utilizan los datos de conexión especificados en los parámetros
CONNECT e ID. En lo posible, en el parámetro CONNECT utilice solo estructuras predefinidas
tal y como se crearon en la parametrización de la conexión, en la ventana de inspección del
editor de programas.
A partir de la versión del firmware V2.0 de las CPU S7-1500, en determinadas estructuras
TCON_xxx es posible especificar el valor 0 en el parámetro InterfaceId. De este modo se deja
en manos del firmware la selección de la interfaz Industrial Ethernet que se utilizará. Es posible
especificar el valor 0 con los siguientes SDT: TCON_IP_V4_SEC, TCON_QDN,
TCON_QDN_SEC, TMail_QDN_SEC, TMail_V4 y TMAIL_V4_SEC. En todos los demás SDT
es preciso asignar un valor fijo a InterfaceId.

4048

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Para poder establecer la conexión debe detectarse un flanco ascendente en el parámetro
REQ. Si la conexión se establece correctamente, el parámetro DONE se pone a "1".
Nota
Soporte en caso de programación de conexiones
Cuando se selecciona una instrucción de comunicación TCON, TSEND_C o TRCV_C en un
bloque de programa y se crean y parametrizan conexiones del tipo TCP, UDP, ISO-on-TCP o
FDL, existe la posibilidad de recibir ayuda de la parametrización de conexiones.
La parametrización de conexiones se encuentra en la ventana de inspección del editor de
programación.

Número de conexiones posibles
El número de conexiones posibles se indica en los datos técnicos de la CPU.

Conexión vía TCP e ISO on TCP
Ambos interlocutores llaman la instrucción "TCON" para crear y establecer la conexión. En la
parametrización se especifica cuáles son el punto final activo y el punto final pasivo de la
comunicación.
Si se interrumpe la conexión, p. ej. debido a una interrupción de la línea o por el interlocutor
remoto, el interlocutor activo intenta restablecer la conexión. No es preciso volver a llamar
"TCON". No obstante, esto solo es aplicable si "TCON" se ha ejecutado una vez correctamente
(DONE = 1).
Con la ejecución de la instrucción "TDISCON (Página 4056)" o en el estado operativo STOP
de la CPU se deshace una conexión existente y se elimina la conexión configurada. Para
volver a configurar y establecer la conexión es preciso ejecutar "TCON" de nuevo.

Conexiones de Telecontrol entre el CP y el cliente SMS
Utilice en el parámetro CONNECT el tipo de datos de sistema TCON_PHONE para la
descripción de la conexión.
Para este tipo de conexión, la estación debe tener acceso a una red de telefonía móvil a través
de un CP de telefonía móvil.

Conexiones FDL
Para configurar conexiones FDL del CM 1542‑5 consulte AUTOHOTSPOT.

Programación del PLC
Manual de programación y manejo, 11/2019

4049

Instrucciones
4.1 Instrucciones

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "TCON":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

REQ

Input

BOOL

I, Q, M, D, L o cons‐
tante

Inicia la petición para establecer la conexión
con un flanco ascendente.

ID

Input

CONN_OUC

I, Q, M, D, L o cons‐
tante

Referencia a la conexión asignada.

D

Puntero hacia la descripción de la conexión

CONNECT

InOut

VARIANT

Rango de valores: W#16#0001 a W#16#0FFF
● Con TCP o UDP, utilice la estructura
TCON_IP_v4 o TCON_QDN
Consulte la descripción en:
AUTOHOTSPOT o AUTOHOTSPOT
● Con TCP o UDP mediante comunicación
segura, utilice la estructura
TCON_IP_V4_SEC o TCON_QDN_SEC
Consulte la descripción en:
AUTOHOTSPOT o AUTOHOTSPOT
● Con ISO on TCP, utilice la estructura
TCON_IP_RFC
Consulte la descripción en:
AUTOHOTSPOT
● Con conexiones ISO del CP 1543‑1 /
CP 1545‑1, utilice la estructura
TCON_ISOnative.
Consulte la descripción en: "Estructura de
la descripción de la conexión conforme a
TCON_ISOnative"
● Para establecer conexiones con clientes
SMS utilice el tipo de datos de sistema
TCON_PHONE.
Consulte la descripción en
AUTOHOTSPOT.
● Para conexiones FDL del CM 1542‑5 utilice
el tipo de datos de sistema TCON_FDL,
consulte AUTOHOTSPOT.

DONE

Output

BOOL

I, Q, M, D, L

Parámetro de estado con los valores siguien‐
tes:
● 0: petición no iniciada aún o en ejecución
● 1: petición finalizada sin errores

BUSY

Output

BOOL

I, Q, M, D, L

Parámetro de estado con los valores siguien‐
tes:
● 0: petición no iniciada aún o ya finalizada
● 1: petición no finalizada aún. No se puede
iniciar una nueva petición

4050

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

ERROR

Output

BOOL

I, Q, M, D, L

Parámetro de estado ERROR:
● 0: Ningún error
● 1: Se han producido errores

STATUS

Output

WORD

I, Q, M, D, L

Estado de la instrucción

Encontrará más información sobre los tipos de datos válidos en "Vista general de los tipos de
datos válidos (Página 241)".

Parámetros BUSY, DONE y ERROR
El estado de ejecución se comprueba con los parámetros BUSY, DONE, ERROR y STATUS.
El parámetro BUSY indica el estado de ejecución. El parámetro DONE permite comprobar si
una petición se ha ejecutado correctamente. El parámetro ERROR se activa si ocurren errores
durante la ejecución de "TCON". La información de error se indica en el parámetro STATUS.
La instrucción "TCON" genera un mensaje de error en la versión 3.0 cuando fracasa un
establecimiento activo de la conexión con un interlocutor remoto. Para realizar un nuevo
establecimiento de conexión, genere un flanco ascendente en el parámetro REQ.
La tabla siguiente muestra la relación entre los parámetros BUSY, DONE y ERROR:
BUSY

DONE

ERROR

Descripción

1

0

0

La petición se está procesando.

0

1

0

La petición se ha ejecutado correctamente.

0

0

1

La petición se ha finalizado con un error. La causa del error se indica en el parámetro
STATUS.

0

0

0

No se ha asignado ninguna petición nueva.

Estructura de la descripción de la conexión conforme a TCON_ISOnative
Para parametrizar las conexiones en ISO, se utiliza un DB de descripción de la conexión con
una estructura conforme a TCON_ISOnative. La estructura de datos fija de TCON_ISOnative
contiene los parámetros necesarios para establecer la conexión.
Byte Parámetro

Tipo de datos

Valor de
arranque

Descripción

0…
1

InterfaceId

HW_ANY

0

ID de hardware de la interfaz del CP

2…
3

ID

CONN_OUC

1

Referencia a esta conexión (ID unívoca en el rango de valo‐
res: de 1 a 4095).

4

ConnectionType

BYTE

16#16

Tipo de conexión: ISO

5

ActiveEstablished

BOOL

TRUE

Identificador del tipo de establecimiento de conexión:
● FALSE: establecimiento pasivo de la conexión
● TRUE: establecimiento activo de la conexión

Programación del PLC
Manual de programación y manejo, 11/2019

4051

Instrucciones
4.1 Instrucciones
Byte Parámetro

Tipo de datos

Valor de
arranque

Descripción

8…
13

ARRAY [1..6] of
BYTE

-

Dirección MAC del punto final del interlocutor, p. ej. para
00-74-41-FD-AE-84:

RemoteMacAddress

● MacAddr[1] = 00
● MacAddr[2] = 74
● MacAddr[3] = 41
● MacAddr[4] = FD
● MacAddr[5] = AE
● MacAddr[6] = 84
14 .. LocalMacAddress
. 19

ARRAY [1..6] of
BYTE

-

Dirección MAC del punto final local, p. ej. para 00-74-41-FDAE-84:
● MacAddr[1] = 00
● MacAddr[2] = 74
● MacAddr[3] = 41
● MacAddr[4] = FD
● MacAddr[5] = AE
● MacAddr[6] = 84

20 .. RemoteTSelector
. 53

Struct

-

TSelector del interlocutor remoto:
● Bytes 20 a 21 = TSelLength
● Bytes 22 a 53 = TSel[1-32]

TSelLength

UINT

-

Rango de valores de 0 a 32

TSel

ARRAY [1..32]
of BYTE

-

Rango de valores de 0 a 255 en bytes

Struct

-

TSelector del interlocutor remoto:

54 .. LocalTSelector
. 87

● Bytes 20 a 21 = TSelLength
● Bytes 22 a 53 = TSel[1-32]

TSelLength

UINT

TSel

ARRAY [1..32]
of BYTE

-

Rango de valores de 0 a 255 en bytes

88 .. CrRetransmitionTime
. 89

UINT

-

Tiempo hasta que se repite el establecimiento de la conexión
en segundos.

90 .. DataRetransmitionTi‐
. 91 me

UINT

100 ms

Tiempo hasta que se repite la transferencia de datos en mi‐
lisegundos.

92 .. MaxRetransmition‐
. 93 Count

UINT

-

Número máximo de repeticiones.

94 .. InactivityTime
. 95

UINT

-

En segundos

96 .. WindowTime
. 97

UINT

4052

Rango de valores de 0 a 32

En segundos

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros ERROR y STATUS
ERROR

STATUS*
(W#16#...)

Explicación

0

0000

La conexión se ha establecido correctamente.

0

7000

No se está procesando ninguna petición

0

7001

Iniciar ejecución de la petición, establecer la conexión

0

7002

Estableciendo la conexión (REQ es irrelevante).

1

8085

La ID de conexión (parámetro ID) ya está siendo utilizada por una conexión configurada.

1

8086

El parámetro ID está fuera del rango admisible.

1

8087

Se ha alcanzado el número máximo de conexiones, no es posible establecer más conexiones

1

8089

El parámetro CONNECT no apunta a una descripción de la conexión o bien la descripción de la
conexión se ha creado manualmente.

1

809A

La estructura del parámetro CONNECT no se soporta en una interfaz integrada o la longitud no
es válida.

1

809B

● El elemento InterfaceId de la estructura TCON_xxx no hace referencia a ninguna ID de
hardware de una interfaz de CPU o de CM/CP.
● En la estructura TCON_xxx utilizada no está permitido que el elemento InterfaceId tenga el
valor 0, véase el apartado "Descripción".
● El elemento InterfaceId no tiene el valor "0" ni la InterfaceId de un CP admisible en la
estructura TCON_QDN o TCON_QDN_SEC utilizada.

1

809C

Para la comunicación UDP Multicast no se permite InterfaceID = 0. Hay que introducir el identi‐
ficador de hardware de la interfaz PLC o CP local a través de la cual debe desarrollarse la
comunicación UDP Multicast.

1

80A1

La conexión indicada o el puerto ya están ocupados.

1

80A2

El sistema está utilizando el puerto local o remoto. Localmente se reservan los siguientes puer‐
tos: 20, 21, 80, 102, 135, 161, 162, 443, 34962, 34963, 34964 y el rango de 49152 a 65535.

1

80A3

La ID está siendo utilizada por una conexión creada por el programa de usuario y que también
utiliza la misma descripción de conexión en el parámetro CONNECT.

1

80A4

La dirección IP del punto final remoto de la conexión no es válida o bien concuerda con la
dirección IP del interlocutor local.

1

80A7

Error de comunicación: "TDISCON (Página 4056)" se ha ejecutado antes de finalizar "TCON".

1

80B4

Solo en TCON_IP_RFC: No se ha indicado el T-Selector local, el primer byte no contiene el valor
0x0E (solo para una longitud de T-Selector = 2) o bien el T-Selector local empieza por "SIMA‐
TIC-".

1

80B5

En el tipo de conexión 13 = UDP solo se permite establecer una conexión pasiva (el parámetro
ActiveEstablished de la estructura TCON_IP_v4 / TCON_PARAM tiene el valor TRUE).

1

80B6

Error de parametrización en el parámetro ConnectionType del bloque de datos para la descrip‐
ción de la conexión.
● Solo válido para TCON_IP_v4: 0x11, 0x0B y 0x13.
● Solo válido para TCON_IP_RFC: 0x0C y 0x12

Programación del PLC
Manual de programación y manejo, 11/2019

4053

Instrucciones
4.1 Instrucciones
ERROR

STATUS*
(W#16#...)

Explicación

1

80B7

Con TCON_IP_v4:
● TCP (establecimiento activo de la conexión): el puerto remoto es "0".
● TCP (establecimiento pasivo de la conexión): El puerto local es "0".
● UDP: El puerto local es "0".
● La dirección IP del punto final del interlocutor se ha puesto a 0.0.0.0.
Con TCON_IP_RFC:
● Se ha indicado una longitud superior a 32 bytes para el T-Selector local (LocalTSelector) o
remoto (RemoteTSelector).
● Se ha introducido una longitud superior a 32 bytes para el T-Selector (local o remoto) en
TSelLength.
● Error de longitud de la dirección IP del interlocutor correspondiente.
● La dirección IP del punto final del interlocutor se ha puesto a 0.0.0.0.

1

80B8

La ID del parámetro de la descripción de la conexión local (estructura del parámetro CONNECT)
y la ID del parámetro de la instrucción son distintas.

1

80C3

Todos los recursos de conexión están ocupados, o puede ser que los puertos estén siendo
utilizados dinámicamente por otras aplicaciones o conexiones.

1

80C4

Error de comunicación temporal:
● La conexión no se puede establecer en estos momentos.
● La conexión no se puede establecer porque los cortafuegos que están en la vía de conexión
no están activados para los puertos necesarios.
● La interfaz está recibiendo nuevos parámetros.
● Una instrucción "TDISCON (Página 4056)" está deshaciendo la conexión configurada.

1

80C5

El interlocutor rechaza la conexión, la ha deshecho o la ha finalizado de manera activa.

1

80C6

No es posible acceder al interlocutor (error de red).

1

80C7

Rebase de tiempo de la ejecución.

1

80C8

El valor del parámetro ID ya está siendo utilizado por una conexión creada mediante el programa
de usuario. La conexión utiliza la misma ID pero distintos ajustes de conexión en el parámetro
CONNECT.

1

80C9

Error en la validación del interlocutor. El interlocutor que pretende establecer una conexión no se
corresponde con el interlocutor definido en la estructura del parámetro CONNECT.

1

80CE

La dirección IP de la interfaz local es 0.0.0.0.

1

80D0

En relación con TCP y el punto final de la conexión activado: El parámetro remote_qdn es una
cadena de caracteres vacía. En ese caso no es posible establecer una conexión.

1

80D1

El parámetro remote_qdn no es un nombre de dominio completo. Probablemente falte un punto
al final.

1

80D2

No hay configurada ninguna dirección de servidor DNS.

1

80D3

No se ha podido resolver el nombre de dominio completo. Causas posibles:
● El servidor DNS no está accesible, p. ej. porque está apagado o porque no se puede acceder
al puerto remoto.
● Se ha producido un error durante la comunicación con el servidor DNS.
● El servidor DNS ha devuelto una respuesta DNS válida, pero la respuesta no contenía
ninguna dirección IPv4.

1

4054

80E0

Se ha recibido un mensaje inadecuado o malo.

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
ERROR

STATUS*
(W#16#...)

Explicación

1

80E1

Error durante el handshake. Causas posibles:
● Interrupción por el usuario
● Seguridad insuficiente
● No se soporta una nueva negociación
● Versión SSL/TLS no soportada
● Ha fallado la validación del nombre de host

1

80E2

Certificado no soportado / no válido / no existe
Causa posible: La hora del módulo afectado no está ajustada o el módulo no se sincroniza.
Ejemplo: La fecha predeterminada del módulo es el 1.1.2012 y no se ha ajustado durante la
puesta en marcha. El periodo de validez del certificado comienza el 20.08.2016 y finaliza el
20.08.2024. En este caso, la fecha del módulo está fuera del período de validez del certificado;
el certificado no es válido para el módulo.

1

80E3

El certificado se ha rechazado.

1

80E4

No se ha encontrado una autoridad de certificación válida.

1

80E5

Certificado caducado

1

80E6

Error de integridad en el protocolo Transport-Layer-Security

1

80E7

Ampliación no soportada del certificado X.509-V3

1

80E9

No se soporta servidor TLS sin certificado de servidor.

1

80EA

No se soporta el protocolo DTLS (UDP)

1

80EB

Un cliente no puede solicitar un certificado de cliente.

1

80EC

El servidor no puede validar contra el subjectAlternateName (solo pueden hacerlo los clientes).

1

80ED

TLSServerCertRef_m-ID no válido

1

xxyy, xx > 80 Información de error general, consulte Evaluación de errores con el parámetro de salida
RET_VAL (Página 174)

* Los códigos de error se pueden representar en el editor de programación como valores enteros o hexadecimales. Encon‐
trará más información sobre el cambio de los formatos de visualización en "Consulte también".

Ejemplo
Encontrará el ejemplo aquí: Ejemplo de programa con TCON, TDISCON, TSEND y TRCV
(Página 4074).
Encontrará información adicional y el código del programa del ejemplo aquí: Sample Library for
Instructions (Página 615).

Consulte también
Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente (Página 618)
Cambiar formatos de visualización en el estado del programa (Página 8529)
TCON: Establecer una conexión (Página 4045)

Programación del PLC
Manual de programación y manejo, 11/2019

4055

Instrucciones
4.1 Instrucciones

TDISCON: Desconectar comunicación
Descripción
La instrucción "TDISCON" deshace la conexión entre la CPU y un interlocutor.

Funcionamiento
"TDISCON" es una instrucción asíncrona, de modo que la ejecución de la petición se prolonga
a lo largo de varias llamadas. La petición para el establecimiento de la conexión se inicia
llamando "TDISCON" con REQ = 1.
Tras la ejecución correcta de "TDISCON", la ID indicada en "TCON" ya no es válida, por lo que
no puede utilizarse para transmitir ni para recibir.
El estado de la petición se indica a través de los parámetros de salida BUSY y STATUS.
STATUS corresponde al parámetro de salida RET_VAL de las instrucciones asíncronas
(véase también: Diferencia entre las instrucciones que funcionan síncronamente y las que
funcionan asíncronamente (Página 618)).
En la tabla siguiente se muestra la correspondencia entre BUSY, DONE y ERROR. Permite
determinar en qué estado se encuentra "TDISCON" actualmente o cuándo ha finalizado el
establecimiento de la conexión.
BUSY

DONE

ERROR

Descripción

1

0

0

La petición está en proceso.

0

1

0

La petición ha finalizado correctamente.

0

0

1

La petición se ha finalizado con un error. La causa del error se puede consultar
en el parámetro STATUS.

0

0

0

No se ha asignado ninguna (nueva) petición a la instrucción.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "TDISCON":
Parámetro

Declaración

Tipo de da‐
tos

Área de memoria

Descripción

S7-1200

S7-1500

REQ

Input

BOOL

I, Q, M, D, L o
constante

I, Q, M, D, L o
constante

Parámetro de control REQUEST, inicia la
petición para deshacer la conexión dada
por ID. La petición se inicia con un flanco
ascendente.

ID

Input

CONN_OU
C (WORD)

D, L o constante I, Q, M, D, L o
constante

Referencia a la conexión que se va a des‐
hacer (ID de conexión)
Rango de valores: W#16#0001 a
W#16#0FFF

DONE

Output

BOOL

I, Q, M, D, L

I, Q, M, D, L

Parámetros de estado:
● 0: la petición aún no se ha iniciado o
todavía se está ejecutando.
● 1: petición finalizada sin errores

4056

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro
BUSY

Declaración
Output

Tipo de da‐
tos

S7-1200

Área de memoria
S7-1500

BOOL

I, Q, M, D, L

I, Q, M, D, L

Descripción
Parámetros de estado:
● BUSY = 1: la petición todavía no ha
finalizado.
● BUSY = 0: la petición ha finalizado o
aún no se ha iniciado.

ERROR

Output

BOOL

I, Q, M, D, L

I, Q, M, D, L

Parámetros de estado:
● ERROR= 0: ningún error.
● ERROR=1: durante la ejecución se ha
producido un error. STATUS devuelve
información detallada sobre el tipo de
error.

STATUS

Output

WORD

I, Q, M, D, L

I, Q, M, D, L

Parámetros de estado:
Información de error (véase "Parámetro
ERROR y STATUS")

Encontrará más información sobre los tipos de datos válidos en "Vista general de los tipos de
datos válidos (Página 241)".

Parámetros ERROR y STATUS
ERROR

STATUS*
(W#16#...)

Explicación

0

0000

Se ha podido deshacer la conexión

0

7000

No se está procesando ninguna petición.

0

7001

Inicio del procesamiento de la petición, deshaciendo conexión.

0

7002

Llamada intermedia (REQ irrelevante), deshaciendo conexión.

1

8086

El parámetro ID se encuentra en un rango de valores no válido.

1

80A3

Se está intentando deshacer una conexión inexistente o la conexión ya se ha deshecho.

1

80C4

Error de comunicación temporal: la interfaz se está reparametrizando o la conexión se está confi‐
gurando.

* Los códigos de error en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Ejemplo
Encontrará el ejemplo aquí: Ejemplo de programa con TCON, TDISCON, TSEND y TRCV
(Página 4074).
Encontrará información adicional y el código del programa del ejemplo aquí: Sample Library for
Instructions (Página 615).

Programación del PLC
Manual de programación y manejo, 11/2019

4057

Instrucciones
4.1 Instrucciones

TSEND: Enviar datos a través de la conexión
TSEND: Enviar datos a través de la conexión
Descripción
La siguiente descripción de la instrucción "TSEND" es válida para la CPU S7-1200 hasta la
versión 3.0.
La instrucción "TSEND" sirve para enviar datos a través de una conexión existente. "TSEND"
se ejecuta de forma asíncrona.
El área de transmisión se especifica en el parámetro DATA. Este contiene la dirección y la
longitud de los datos que deben enviarse. Para los datos que deben enviarse se pueden utilizar
todos los tipos de datos exceptuando BOOL y Array of BOOL.
La orden de transmisión se ejecuta cuando se detecta un flanco ascendente en el parámetro
REQ.
En el parámetro LEN se especifica el número máximo de bytes que deben enviarse con una
orden de transmisión.
● En la transmisión de datos a través de TCP (protocolo de streaming), la instrucción
"TSEND" no transfiere información sobre la longitud de los datos enviados a "TRCV
(Página 4065)".
● En la transmisión de datos a través de ISO-on-TCP (protocolo orientado a mensajes) se
transfiere la longitud de los datos enviados a "TRCV (Página 4065)". La cantidad de datos
enviados a través de "TSEND" en forma de paquete debe volver a recibirse también en el
lado del receptor ("TRCV (Página 4065)"):
– si el búfer de recepción es demasiado pequeño para los datos enviados, se produce un
error en el lado de receptor.
– si el búfer de recepción es suficientemente grande, "TRCV" devuelve DONE=1 en
cuanto se ha recibido el paquete de datos.
Los datos por enviar no se pueden editar hasta que no se haya ejecutado por completo la orden
de transmisión. Si la petición de transmisión se ejecuta correctamente, el parámetro DONE se
pone a "1". No obstante, el estado lógico "1" en el parámetro DONE no confirma que el
interlocutor haya leído ya los datos enviados.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "TSEND":
Parámetro

Declaración

Tipo de datos

Área de memoria

REQ

Input

BOOL

I, Q, M, D, L o cons‐ Inicia la orden de transmisión cuando se detecta un
tante
flanco ascendente.

ID

Input

CONN_OUC

I, Q, M, D, L o cons‐ Referencia a la conexión establecida con "TCON".
tante
Rango de valores: W#16#0001 a W#16#0FFF

LEN

Input

UINT

I, Q, M, D, L o cons‐ Número máximo de bytes que se envían con la orden.
tante

4058

Descripción

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

DATA

InOut

VARIANT

I, Q, M, D

Puntero hacia el área de transmisión que contiene la
dirección y la longitud de los datos por enviar. La di‐
rección hace referencia a:
● La memoria imagen de proceso de las entradas
● La memoria imagen de proceso de las salidas
● Una marca
● Un bloque de datos
Para transferir estructuras, estas deben ser idénticas
tanto en el lado de transmisión como en el de recep‐
ción.

DONE

Output

BOOL

I, Q, M, D, L

Parámetro de estado con los valores siguientes:
● 0: Orden no iniciada aún o en ejecución
● 1: Orden finalizada sin errores

BUSY

Output

BOOL

I, Q, M, D, L

Parámetro de estado con los valores siguientes:
● 0: Orden no iniciada aún o ya finalizada
● 1: Orden no finalizada aún. No es posible iniciar
una nueva petición.

ERROR

Output

BOOL

I, Q, M, D, L

Parámetro de estado con los valores siguientes:
● 0: Ningún error
● 1: Se han producido errores

STATUS

Output

WORD

I, Q, M, D, L

Estado de la instrucción

Encontrará más información sobre los tipos de datos válidos en "Vista general de los tipos de
datos válidos (Página 241)".

Parámetros LEN y DATA
● Con LEN = 0 se envían todos los datos especificados con el parámetro DATA.
● Si el número de bytes en el parámetro LEN excede la longitud de los datos que deben
enviarse y que se han definido con el parámetro DATA, se visualiza el código de error 8088
en el parámetro STATUS (véase a continuación la descripción del parámetro STATUS).
● Si a través del parámetro DATA se hace referencia a una estructura (Struct), LEN puede ser
más corto que la estructura. En este caso, solo se transfieren los datos hasta la longitud del
parámetro LEN.
● En los tipos de datos STRING y WSTRING se transfieren todos los datos cuando el
parámetro LEN = 0. Si LEN > 0 la longitud debe abarcar como mínimo el número máximo
de bytes, además de dos bytes que contienen la información de la longitud. Encontrará más
información sobre la estructura de los tipos de datos en: "Vista general de los tipos de datos
válidos (Página 241)".
● El número máximo de bytes que se pueden transferir es 8192.
● Si se utilizan variables estructuradas de DB optimizados, la dirección de la variable
estructurada del parámetro DATA se deberá interconectar y el parámetro LEN se deberá
poner a 0. De este modo se puede garantizar una transferencia de toda la estructura con
seguridad de tipos siempre que en el lado del receptor se utilice la misma estructura.

Programación del PLC
Manual de programación y manejo, 11/2019

4059

Instrucciones
4.1 Instrucciones

Parámetros BUSY, DONE y ERROR
El estado de ejecución se comprueba con los parámetros BUSY, DONE, ERROR y STATUS.
El parámetro BUSY indica el estado de ejecución. El parámetro DONE permite comprobar si
una orden se ha ejecutado correctamente. El parámetro ERROR se activa si ocurren errores
durante la ejecución de "TSEND". La información de error se indica en el parámetro STATUS.
La tabla siguiente muestra la relación entre los parámetros BUSY, DONE y ERROR:
BUSY

DONE

ERROR

Descripción

1

0

0

La orden se está procesando.

0

1

0

La orden se ha ejecutado correctamente.

0

0

1

La orden se ha finalizado con un error. La causa del error se indica en el parámetro
STATUS.

0

0

0

No se ha asignado ninguna otra orden.

Nota
Debido al procesamiento asíncrono de "TSEND", los datos del área de transmisión deben
mantenerse coherentes hasta que el parámetro DONE o el parámetro ERROR se ponga a "1".

Parámetros ERROR y STATUS
ERROR

STATUS*
(W#16#...)

Descripción

0

0000

Petición de transmisión finalizada sin errores.

0

7000

No se está procesando ninguna orden.

0

7001

Inicio del procesamiento de la petición, enviando los datos.

0

7002

Procesando la petición (REQ es irrelevante).

1

8085

● El parámetro LEN excede el valor máximo admisible (65536).

Durante el procesamiento, el sistema operativo accede a los datos del área de transmisión DATA.
Durante el procesamiento, el sistema operativo accede a los datos del área de transmisión DATA.
● Los parámetros DATA y LEN tienen ambos el valor "0".
El parámetro ID se encuentra fuera del área de direcciones admisible (1..0xFFF).

1

8086

1

8088

El parámetro LEN es mayor que el rango indicado en DATA.

1

80A1

Error de comunicación:
● La conexión indicada no se ha establecido todavía.
● La conexión indicada se está finalizando. No es posible transferir a través de esta conexión.
● La interfaz se está reinicializando.

1

80B3

La variante de protocolo parametrizada (parámetro ConnectionType en la descripción de la cone‐
xión) es UDP. En el caso de una conexión UDP, utilice la instrucción "TUSEND".

1

80C3

● Ya se está procesando un bloque con esta ID en otro grupo de prioridad.
● Escasez interna de recursos.

1

80C4

Error de comunicación temporal:
● La conexión con el interlocutor no se puede establecer en estos momentos.
● La interfaz está recibiendo nuevos ajustes de parámetros o la conexión se está estableciendo.

4060

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
ERROR

STATUS*
(W#16#...)

Descripción

1

80C5

El interlocutor ha finalizado la conexión.

1

80C6

Error de red. No es posible acceder al interlocutor.

1

80C7

Rebase de tiempo de la ejecución.

* Los códigos de error en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Consulte también
Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente (Página 618)

TSEND: Enviar datos a través de la conexión
Descripción
La siguiente descripción de la instrucción "TSEND" es válida para:
● Ethernet
CPU S7-1200 con versión de firmware ≥ V4.0 y CPU S7-1500
● PROFIBUS
Conexiones FDL de S7‑1500 con CM 1542‑5 a partir de V2.0 con el tipo de datos de sistema
TCON_FDL
La instrucción "TSEND" sirve para enviar datos a través de una conexión existente. "TSEND"
se ejecuta de forma asíncrona.
El área de transmisión se especifica en el parámetro DATA. Este contiene la dirección y la
longitud de los datos que deben enviarse. Para los datos que deben enviarse se pueden utilizar
todos los tipos de datos exceptuando BOOL y Array of BOOL.
La petición de transmisión se ejecuta cuando se detecta un flanco ascendente en el parámetro
REQ.
En el parámetro LEN se especifica el número máximo de bytes que deben enviarse con una
petición de transmisión.
● En la transmisión de datos a través de TCP (protocolo de streaming), la instrucción
"TSEND" no transfiere información sobre la longitud de los datos enviados a "TRCV
(Página 4065)".
● En la transmisión de datos a través de ISO-on-TCP (protocolo orientado a mensajes) se
transfiere la longitud de los datos enviados a "TRCV (Página 4065)". La cantidad de datos
enviados a través de "TSEND" en forma de paquete debe volver a recibirse también en el
lado del receptor ("TRCV (Página 4065)"):
– si el búfer de recepción es demasiado pequeño para los datos enviados, se produce un
error en el lado de receptor.
– si el búfer de recepción es suficientemente grande, "TRCV" devuelve DONE=1 en
cuanto se ha recibido el paquete de datos.

Programación del PLC
Manual de programación y manejo, 11/2019

4061

Instrucciones
4.1 Instrucciones
Los datos por enviar no se pueden editar hasta que no se haya ejecutado por completo la
petición de transmisión. Si la petición de transmisión se ejecuta correctamente, el parámetro
DONE se pone a "1". No obstante, el estado lógico "1" en el parámetro DONE no confirma que
el interlocutor haya leído ya los datos enviados.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "TSEND":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

REQ

Input

BOOL

I, Q, M, D, L o cons‐ Inicia la petición de transmisión cuando se detecta un
tante
flanco ascendente.

ID

Input

CONN_OUC

I, Q, M, D, L o cons‐ Referencia a la conexión establecida con "TCON".
tante
Rango de valores: W#16#0001 a W#16#0FFF

LEN

Input

UDINT

I, Q, M, D, L o cons‐ Número máximo de bytes que se envían con la peti‐
tante
ción (máximo valor admisible para S7-1200: 8192,
máximo valor admisible para S7-1500: 65536).
En conexiones FDL del CM 1542‑5 la longitud máxi‐
ma es de 240 bytes. Tenga en cuenta las longitudes
máximas que se pueden procesar en los interlocuto‐
res.

DATA

InOut

VARIANT

I, Q, M, D, L

Puntero hacia el área de transmisión que contiene la
dirección y la longitud de los datos por enviar. La di‐
rección hace referencia a:
● La memoria imagen de proceso de las entradas
● La memoria imagen de proceso de las salidas
● Una marca
● Un bloque de datos
● Datos locales
Para transferir estructuras, estas deben ser idénticas
tanto en el lado de transmisión como en el de recep‐
ción.

DONE

Output

BOOL

I, Q, M, D, L

Parámetro de estado con los valores siguientes:
● 0: petición no iniciada aún o en ejecución
● 1: petición finalizada sin errores

BUSY

Output

BOOL

I, Q, M, D, L

Parámetro de estado con los valores siguientes:
● 0: petición no iniciada aún o ya finalizada
● 1: petición no finalizada aún. No es posible iniciar
una nueva petición.

ERROR

Output

BOOL

I, Q, M, D, L

Parámetro de estado con los valores siguientes:
● 0: Ningún error
● 1: Se han producido errores

STATUS

Output

WORD

I, Q, M, D, L

Estado de la instrucción

Encontrará más información sobre los tipos de datos válidos en "Vista general de los tipos de
datos válidos (Página 241)".

4062

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros LEN y DATA
● Con LEN = 0 se envían todos los datos especificados con el parámetro DATA.
● Si el número de bytes en el parámetro LEN excede la longitud de los datos que deben
enviarse y que se han definido con el parámetro DATA, se visualiza el código de error 8088
en el parámetro STATUS (véase a continuación la descripción del parámetro STATUS).
● Si a través del parámetro DATA se hace referencia a una estructura (Struct), LEN puede ser
más corto que la estructura. En este caso, solo se transfieren los datos hasta la longitud del
parámetro LEN.
● En los tipos de datos STRING y WSTRING se transfieren todos los datos cuando el
parámetro LEN = 0. Si LEN > 0 la longitud debe abarcar como mínimo el número máximo
de bytes, además de dos bytes que contienen la información de la longitud. Encontrará más
información sobre la estructura de los tipos de datos en: "Vista general de los tipos de datos
válidos (Página 241)".
● El número máximo de bytes que se pueden transferir depende del dispositivo.
● Si se utilizan variables estructuradas de DB optimizados, la dirección de la variable
estructurada del parámetro DATA se deberá interconectar y el parámetro LEN se deberá
poner a 0. De este modo se puede garantizar una transferencia de toda la estructura con
seguridad de tipos siempre que en el lado del receptor se utilice la misma estructura.

Parámetros BUSY, DONE y ERROR
El estado de ejecución se comprueba con los parámetros BUSY, DONE, ERROR y STATUS.
El parámetro BUSY indica el estado de ejecución. El parámetro DONE permite comprobar si
una petición se ha ejecutado correctamente. El parámetro ERROR se activa si ocurren errores
durante la ejecución de "TSEND". La información de error se indica en el parámetro STATUS.
La tabla siguiente muestra la relación entre los parámetros BUSY, DONE y ERROR:
BUSY

DONE

ERROR

Descripción

1

0

0

La petición se está procesando.

0

1

0

La petición se ha ejecutado correctamente.

0

0

1

La petición se ha finalizado con un error. La causa del error se indica en el parámetro
STATUS.

0

0

0

No se ha asignado ninguna petición nueva.

Nota
Debido al procesamiento asíncrono de "TSEND", los datos del área de transmisión deben
mantenerse coherentes hasta que el parámetro DONE o el parámetro ERROR se ponga a "1".

Parámetros ERROR y STATUS
ERROR

STATUS*
(W#16#...)

Descripción

0

0000

Petición de transmisión finalizada sin errores.

0

7000

No se está procesando ninguna petición.

Programación del PLC
Manual de programación y manejo, 11/2019

4063

Instrucciones
4.1 Instrucciones
ERROR

STATUS*
(W#16#...)

Descripción

0

7001

Inicio del procesamiento de la petición, enviando los datos.

0

7002

Procesando la petición (REQ es irrelevante).

1

8085

● El parámetro LEN excede el valor máximo admisible.
Para S7-1200: 8192; para S7‑1500 (TCP): 65536; para S7‑1500 (FDL): 240 / 236

Durante el procesamiento, el sistema operativo accede a los datos del área de transmisión DATA.
Durante el procesamiento, el sistema operativo accede a los datos del área de transmisión DATA.

● Los parámetros DATA y LEN tienen ambos el valor "0".
1

8086

El parámetro ID se encuentra fuera del área de direcciones admisible (1..0xFFF).

1

8088

El parámetro LEN es mayor que el rango indicado en DATA.

1

80A1

Error de comunicación:
● La conexión indicada no se ha establecido todavía.
● La conexión indicada se está finalizando. No es posible transferir a través de esta conexión.
● La interfaz se está reinicializando.

1

80B1

El parámetro DATA se ha modificado antes de finalizar la petición en curso.

1

80B3

La variante de protocolo parametrizada (parámetro ConnectionType en la descripción de la cone‐
xión) es UDP. En el caso de una conexión UDP, utilice la instrucción "TUSEND".

1

80C3

● Ya se está procesando un bloque con esta ID en otro grupo de prioridad.

1

80C4

● Escasez interna de recursos.
Error de comunicación temporal:
● La conexión con el interlocutor no se puede establecer en estos momentos.
● La interfaz está recibiendo nuevos ajustes de parámetros o la conexión se está estableciendo.
● Solo con FDL / PROFIBUS: temporalmente no se dispone de recursos de recepción en el
interlocutor. El interlocutor no está preparado para la recepción.
● El sistema R/H está en el estado del sistema SYNCUP o se produce una conmutación primariareserva. La conexión se cierra. El procesamiento de TSEND se detiene.
1

80C5

● El interlocutor ha finalizado la conexión.
● LSAP del interlocutor remoto no habilitado

1

Error de red:

80C6

● No es posible acceder al interlocutor remoto.
● Interrupción física en PROFIBUS
1

80C7

Rebase de tiempo de la ejecución.

1

80EE

Handshake no finalizado aún.

1

xxyy, xx >
80

Información de error general, consulte Evaluación de errores con el parámetro de salida RET_VAL
(Página 174)

* Los códigos de error en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Ejemplo
Encontrará el ejemplo aquí: Ejemplo de programa con TCON, TDISCON, TSEND y TRCV
(Página 4074).
Encontrará información adicional y el código del programa del ejemplo aquí: Sample Library for
Instructions (Página 615).

4064

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Consulte también
Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente (Página 618)
TSEND: Enviar datos a través de la conexión (Página 4058)

TRCV: Recibir datos a través de la conexión
TRCV: Recibir datos a través de la conexión
Descripción
La siguiente descripción de la instrucción "TRCV" es válida para la CPU S7-1200 hasta la
versión 3.0.
La instrucción "TRCV" sirve para recibir datos a través de una conexión existente. "TRCV" se
ejecuta de forma asíncrona.
Cuando el parámetro EN_R se pone a "1", se activa la recepción de datos. Los datos recibidos
se escriben en un área de recepción. La longitud del área de recepción se especifica, en
función de la variante de protocolo utilizada, bien sea con el parámetro LEN (si LEN <> 0), o
bien mediante la indicación de longitud del parámetro DATA (si LEN = 0).
Para garantizar la coherencia de los datos recibidos, no se pueden realizar modificaciones en
el parámetro DATA y en el área de recepción definida mientras se estén recibiendo datos.
Tras haberse recibido los datos correctamente, el parámetro NDR se pone a "1". La cantidad
de datos recibida realmente se puede consultar en el parámetro RCVD_LEN.

Modos de recepción de "TRCV"
La tabla siguiente muestra cómo se escriben los datos recibidos en el área de recepción.
Variante de protocolo

Disponibilidad de los datos en el área de
recepción

Parámetro connec‐
tion_type* de la descrip‐
ción de la conexión

Parámetro LEN

TCP

Los datos están disponibles inmediata‐
mente.

Valor hexadecimal:
B#16#11

0

(Modo Ad hoc)
TCP
(Recepción de datos de
longitud especificada)
ISO on TCP
(Transmisión de datos
orientada a mensajes)

Valor entero: 17
Los datos están disponibles en cuanto se
ha recibido toda la longitud de datos es‐
pecificada en el parámetro LEN.

Valor hexadecimal:
B#16#11

Los datos están disponibles en cuanto se
ha recibido toda la longitud de datos es‐
pecificada en el parámetro LEN.

Valor hexadecimal:
B#16#12

de 1 a 8192

Valor entero: 17

Valor entero: 18

● de 1 a 1452 si se
utiliza un CP.
● de 1 a 8192 si no se
utiliza ningún CP.

* Ver "AUTOHOTSPOT".

Programación del PLC
Manual de programación y manejo, 11/2019

4065

Instrucciones
4.1 Instrucciones

TCP (modo Ad hoc)
El modo Ad hoc solo está disponible en la variante de protocolo TCP. Utilice el modo Ad hoc
para recibir datos de longitudes dinámicas con la instrucción "TRCV".
El modo Ad hoc se establece asignando el valor "0" al parámetro LEN. Con el modo Ad hoc se
pueden utilizar todos los tipos de datos para bloques de datos de acceso estándar. Para
bloques de datos de acceso optimizado solo es posible utilizar el tipo de datos ARRAY of BYTE
o tipos de datos de una longitud de 8 bits (p. ej., CHAR, USINT, SINT, etc.). Si está activado
el modo Ad hoc, la recepción de datos se indica en el parámetro NDR tras recibir un byte.

TCP (recepción de datos de longitud especificada)
Para una recepción de datos de la longitud indicada, introduzca la longitud de los datos en el
parámetro LEN. La recepción de datos finalizará cuando se haya recibido la longitud de los
datos indicados en el parámetro LEN en su totalidad. Solo entonces estarán disponibles los
datos en el área de recepción (parámetro DATA). La recepción de los datos se notifica a través
del parámetro de salida NDR. Tras la recepción, la longitud de datos realmente recibida en
bytes en el parámetro RCVD_LEN coincide con la longitud de datos del parámetro LEN.

ISO on TCP (transmisión de datos orientada a mensajes)
En la variante de protocolo ISO on TCP se envían a través de una conexión bloques cerrados
de mensajes que el receptor también reconoce como tales. Si se utiliza ISO on TCP, "TRCV"
notifica la recepción de los datos en cuanto se recibe el bloque de mensajes en su totalidad.
Los parámetros LEN y DATA definen el área de recepción. Si el búfer de recepción (parámetro
DATA) es demasiado pequeño para los datos enviados, "TRCV" notifica un error. Si la
recepción de datos es correcta, esto se notifica a través del parámetro de salida NDR. Tras la
recepción, la longitud de datos realmente recibida en bytes en el parámetro RCVD_LEN
coincide con la longitud de datos del parámetro LEN.

Parámetro
La tabla siguiente muestra los parámetros de la instrucción "TRCV":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN_R

Input

BOOL

I, Q, M, D, L o cons‐ Habilitación de recepción
tante

ID

Input

CONN_OUC

I, Q, M, D, L o cons‐ Referencia a la conexión establecida con "TCON
tante
(Página 4045)".
Rango de valores: W#16#0001 (1) a W#16#0FFF
(4095)

LEN

Input

UINT

I, Q, M, D, L o cons‐ Longitud del área de recepción en bytes (oculta).
tante
Si utiliza únicamente un área de memoria de acceso
optimizado en el parámetro DATA, el parámetro LEN
debe tener el valor "0".

DATA

InOut

VARIANT

I, Q, M, D

Puntero hacia el área de recepción
Para transferir estructuras, estas deben ser idénticas
tanto en el lado de transmisión como en el de recep‐
ción.

4066

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

NDR

Output

BOOL

I, Q, M, D, L

Parámetro de estado (New Data Received):
● 0: Petición no iniciada aún o en ejecución
● 1: Petición finalizada sin errores

BUSY

Output

BOOL

I, Q, M, D, L

Parámetros de estado:
● 0: Petición no iniciada aún o ya finalizada
● 1: Petición no finalizada aún. No se puede iniciar
una nueva petición

ERROR

Output

BOOL

I, Q, M, D, L

Parámetros de estado:
● 0: Ningún error.
● 1: Se ha producido un error al ejecutar la
instrucción.
El parámetro STATUS contiene información más de‐
tallada.

STATUS

Output

WORD

I, Q, M, D, L

Parámetros de estado:
Salida de la información de estado y error.

RCVD_LEN

Output

UINT

I, Q, M, D, L

Cantidad de datos (en bytes) recibida realmente

Encontrará más información sobre los tipos de datos válidos en "Vista general de los tipos de
datos válidos (Página 241)".

Parámetros LEN, DATA y RCVD_LEN
● Si LEN = 0, los datos recibidos se guardan en el área de recepción indicada en el parámetro
DATA. El número de bytes recibidos se visualiza en el parámetro RCVD_LEN.
Con LEN = 0 (ajuste predeterminado del parámetro LEN), la longitud de los datos que se
reciben se define mediante el parámetro DATA. Es recomendable que el área de recepción
(parámetro DATA) tenga el mismo tamaño que el de los datos transferidos por TSEND.
Si LEN tiene el valor 0 y los datos enviados se transfieren en segmentos más pequeños que
el área de recepción DATA, se aplica lo siguiente. Es recomendable mantener EN_R
activado hasta que la instrucción TSEND correspondiente haya enviado todos los datos.
Mientras el tamaño de los datos enviados por TSEND sea distinto del tamaño del área de
recepción DATA, STATUS muestra el valor 7002. EN_R debe estar activado hasta que el
número de datos recibidos sea igual al tamaño del área de recepción DATA. Si se pulsa
EN_R, debe hacerse hasta que BUSY=0 o ERROR <> 0.
Los datos del área de recepción DATA no son válidos hasta que BUSY toma el valor 0.
● Si la longitud indicada en el parámetro LEN excede la longitud de los datos recibidos en el
parámetro DATA, se visualiza el código de error 8088 en el parámetro STATUS (véase a
continuación la descripción del parámetro STATUS).
● Si a través del parámetro DATA se hace referencia a una estructura (Struct), LEN puede ser
más corto que la estructura. En este caso, solo se transfieren los datos hasta la longitud del
parámetro LEN.
● Si el parámetro DATA hace referencia a un bloque de datos de acceso optimizado, se debe
ajustar el parámetro LEN a "0".

Programación del PLC
Manual de programación y manejo, 11/2019

4067

Instrucciones
4.1 Instrucciones
● Si a través del parámetro DATA se hace referencia a un tipo de datos STRING, la longitud
indicada en el parámetro LEN debe ser 0 o >=2 (LEN = no puede ser =1).
● Si a través del parámetro DATA se hace referencia a un tipo de datos WSTRING, la longitud
indicada en el parámetro LEN debe ser 0 o >=5.

Parámetros BUSY, NDR y ERROR
El estado de ejecución se controla a través de los parámetros BUSY, NDR, ERROR y
STATUS. El parámetro BUSY indica el estado de ejecución. El parámetro NDR permite
comprobar si una petición se ha ejecutado correctamente. El parámetro ERROR se activa si
ocurren errores durante la ejecución de TRCV. La información de error se indica en el
parámetro STATUS.
La tabla siguiente muestra la relación entre los parámetros BUSY, NDR y ERROR:
BUSY

NDR

ERROR

Descripción

1

-

-

La petición se está procesando.

0

1

0

La petición se ha ejecutado correctamente.

0

0

1

La petición se ha finalizado con un error. La causa del error se indica en el parámetro
STATUS.

0

0

0

No se ha asignado ninguna petición nueva.

Nota
Debido al procesamiento asíncrono de "TRCV", los datos del área de recepción solo son
coherentes si el parámetro NDR se pone a "1".

Parámetros ERROR y STATUS
ERROR

STATUS* Explicación
(W#16#...)

0

0000

Petición finalizada correctamente. La longitud actual de los datos recibidos se indica en el pará‐
metro RCVD_LEN.

0

7000

El bloque no está listo para la recepción.

0

7001

El bloque está listo para la recepción, se ha activado la petición de recepción.

0

7002

Llamada intermedia, se está procesando la petición de recepción.
Nota: Durante este proceso se escriben datos en el área de recepción. Entretanto el acceso al área
de recepción puede devolver datos incoherentes.

1

8085

● El parámetro LEN excede el valor máximo admisible.
● El valor del parámetro LEN o DATA ha sido modificado después de la primera llamada.
● Los dos parámetros LEN y el parámetro DATA tienen el valor "0" o LEN tiene una longitud
mayor que el máximo valor admisible (65536).

1

8086

El parámetro ID se encuentra fuera del área de direcciones admisible (1 .. 0x0FFF).

1

8088

● El área de recepción es demasiado pequeña.
● El valor del parámetro LEN es mayor que el área de recepción indicada en el parámetro DATA.

4068

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
ERROR

STATUS* Explicación
(W#16#...)

1

80A1

Error de comunicación:
● La conexión indicada no se ha establecido todavía.
● La conexión indicada se está finalizando. La petición de recepción no es posible a través de
esta conexión.
● La conexión se está reinicializando.

1

80B3

La variante de protocolo parametrizada (parámetro connection_type en la descripción de la cone‐
xión) es UDP. En el caso de una conexión UDP, utilice la instrucción "TURCV".

1

80C3

● Ya se está procesando un bloque con esta ID en otro grupo de prioridad.
● Escasez interna de recursos.

1

80C4

Error de comunicación temporal:
● La conexión con el interlocutor no se puede establecer en estos momentos.
● La interfaz está recibiendo nuevos ajustes de parámetros o la conexión se está estableciendo.

1

80C5

El interlocutor remoto ha finalizado la conexión.

1

80C6

No es posible acceder al interlocutor remoto (error de red).

1

80C7

Rebase de tiempo de la ejecución.

1

80C9

La longitud del área de recepción es menor que la longitud de los datos enviados.

* Los códigos de error en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Consulte también
Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente (Página 618)

TRCV: Recibir datos a través de la conexión
Descripción
La siguiente descripción de la instrucción "TRCV" es válida para:
● Ethernet
CPU S7-1200 con versión de firmware ≥ V4.0 y CPU S7-1500
● PROFIBUS
Conexiones FDL de S7‑1500 con CM 1542‑5 a partir de V2.0 con el tipo de datos de sistema
TCON_FDL
La instrucción "TRCV" sirve para recibir datos a través de una conexión existente. "TRCV" se
ejecuta de forma asíncrona.
Cuando el parámetro EN_R se pone a "1", se activa la recepción de datos. Los datos recibidos
se escriben en un área de recepción. La longitud del área de recepción se especifica, en
función de la variante de protocolo utilizada, bien sea con el parámetro LEN (si LEN <> 0), o
bien mediante la indicación de longitud del parámetro DATA (si LEN = 0).
Para garantizar la coherencia de los datos recibidos, no se pueden realizar modificaciones en
el parámetro DATA y en el área de recepción definida mientras se estén recibiendo datos.

Programación del PLC
Manual de programación y manejo, 11/2019

4069

Instrucciones
4.1 Instrucciones
Tras haberse recibido los datos correctamente, el parámetro NDR se pone a "1". La cantidad
de datos recibida realmente se puede consultar en el parámetro RCVD_LEN.

Modos de recepción de "TRCV"
La tabla siguiente muestra cómo se escriben los datos recibidos en el área de recepción.
Variante de protocolo Parámetro
ADHOC
TCP

Disponibilidad de los datos en
el área de recepción

Parámetro connec‐
tion_type de la descripción
de la conexión

1 (Ad hoc ac‐ Los datos están disponibles in‐ Valor hexadecimal:
tivado)
mediatamente.
B#16#11

(Modo Ad hoc)

Valor entero: 17

Parámetro LEN

Se leen tantos datos
como estén disponi‐
bles en este momento;
como máximo hasta la
longitud de datos defi‐
nida mediante LEN.
LEN = 0 (recomenda‐
do): longitud del área
de recepción referen‐
ciada mediante DATA

(Recepción de datos
de longitud especifi‐
cada)

0 (Ad hoc
Los datos están disponibles en
desactivado) cuanto se ha recibido toda la
longitud de datos especificada
en el parámetro LEN.

Valor hexadecimal:
B#16#11

ISO on TCP

-

Los datos están disponibles en
cuanto se ha recibido toda la
longitud de datos especificada
en el parámetro LEN.

Valor hexadecimal:
B#16#12

Los datos están disponibles en
cuanto se ha recibido toda la
longitud de datos especificada
en el parámetro LEN.

Valor hexadecimal:
B#16#15

TCP

(Transmisión de da‐
tos orientada a men‐
sajes)
FDL

-

Valor entero: 17

Valor entero: 18

● S7-1200: de 1 a
8192
● S7-1500: de 1 a
65536
● S7-1200: de 1 a
8192
● S7-1500: de 1 a
65536
de 1 a 240

Decimal: 21

TCP (modo Ad hoc)
El modo Ad hoc solo está disponible en la variante de protocolo TCP. Utilice el modo Ad hoc
para recibir datos de longitudes dinámicas con la instrucción "TRCV".
El modo Ad hoc se establece asignando el valor "1" al parámetro ADHOC. Si está activado el
modo Ad hoc, la recepción de datos se indica en el parámetro NDR tras recibir un byte. Con el
modo Ad hoc se pueden utilizar todos los tipos de datos para bloques de datos de acceso
estándar. Para bloques de datos de acceso optimizado solo es posible utilizar el tipo de datos
ARRAY of BYTE o tipos de datos de una longitud de 8 bits (p. ej., CHAR, USINT, SINT, etc.).

4070

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

TCP (recepción de datos de longitud especificada)
Para una recepción de datos con longitud indicada, asigne el valor "0" al parámetro ADHOC.
Si el modo Ad hoc está desactivado, la recepción de datos finalizará solo cuando se haya
recibido la longitud de los datos indicada en el parámetro LEN en su totalidad. Solo entonces
estarán disponibles los datos en el área de recepción (parámetro DATA). Si la recepción de
datos es correcta, esto se notifica a través del parámetro de salida NDR. Tras la recepción, la
longitud de datos realmente recibida en bytes en el parámetro RCVD_LEN coincide con la
longitud de datos del parámetro LEN.

ISO on TCP (transmisión de datos orientada a mensajes)
En la variante de protocolo ISO on TCP se envían a través de una conexión bloques cerrados
de mensajes que el receptor también reconoce como tales. Si se utiliza ISO on TCP, "TRCV"
notifica la recepción de los datos en cuanto se recibe el bloque de mensajes en su totalidad.
Los parámetros LEN y DATA definen el área de recepción. Si el búfer de recepción (parámetro
DATA) es demasiado pequeño para los datos enviados, "TRCV" notifica un error. Si la
recepción de datos es correcta, esto se notifica a través del parámetro de salida NDR. Tras la
recepción, la longitud de datos realmente recibida en bytes en el parámetro RCVD_LEN
coincide con la longitud de datos del parámetro LEN.

Parámetros
La tabla siguiente muestra los parámetros de la instrucción "TRCV":
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

EN_R

Input

BOOL

I, Q, M, D, L o cons‐
tante

Habilitación de recepción

ID

Input

CONN_OUC

I, Q, M, D, L o cons‐
tante

Referencia a la conexión establecida con "TCON".

LEN

Input

UDINT

I, Q, M, D, L o cons‐
tante

Longitud del área de recepción en bytes (oculta)

Rango de valores: W#16#0001 a W#16#0FFF
Valor máximo para S7-1200: 8192; valor máximo
para S7-1500: 65536; valor máximo en el
CM 1542‑5 (FDL): 240.
Si utiliza únicamente un área de recepción de acce‐
so optimizado en el parámetro DATA, el parámetro
LEN debe tener el valor "0".

ADHOC

Input

BOOL

I, Q, M, D, L o cons‐
tante

Utilizar el modo Ad hoc para la variante de protocolo
TCP (oculto).
ADHOC tiene que tener el valor FALSE, si no se
utiliza ningún protocolo TCP.

DATA

InOut

VARIANT

I, Q, M, D, L

Puntero hacia el área de recepción
Para transferir estructuras, estas deben ser idénti‐
cas tanto en el lado de transmisión como en el de
recepción.

NDR

Output

BOOL

I, Q, M, D, L

Parámetro de estado (New Data Received):
● 0: petición no iniciada aún o en ejecución
● 1: Recibir nuevos datos

Programación del PLC
Manual de programación y manejo, 11/2019

4071

Instrucciones
4.1 Instrucciones
Parámetro

Declaración

Tipo de datos

Área de memoria

Descripción

BUSY

Output

BOOL

I, Q, M, D, L

Parámetro de estado con los valores siguientes:
● 0: petición no iniciada aún o ya finalizada
● 1: petición no finalizada aún. No se puede iniciar
una nueva petición

ERROR

Output

BOOL

I, Q, M, D, L

Parámetro de estado ERROR:
● 0: Ningún error
● 1: Se han producido errores

STATUS

Output

WORD

I, Q, M, D, L

Estado de la instrucción

RCVD_LEN

Output

UDINT

I, Q, M, D, L

Cantidad de datos (en bytes) recibida realmente

Encontrará más información sobre los tipos de datos válidos en "Vista general de los tipos de
datos válidos (Página 241)".

Parámetros LEN, DATA y RCVD_LEN
● Si LEN = 0, los datos recibidos se guardan en el área de recepción indicada en el parámetro
DATA. El número de bytes recibidos se visualiza en el parámetro RCVD_LEN.
Con LEN = 0 (ajuste predeterminado del parámetro LEN), la longitud de los datos que se
reciben se define mediante el parámetro DATA. Es recomendable que el área de recepción
(parámetro DATA) tenga el mismo tamaño que el de los datos transferidos por TSEND.
Si LEN tiene el valor 0 y los datos enviados se transfieren en segmentos más pequeños que
el área de recepción DATA, se aplica lo siguiente. Es recomendable mantener EN_R
activado hasta que la instrucción TSEND correspondiente haya enviado todos los datos.
Mientras el tamaño de los datos enviados por TSEND sea distinto del tamaño del área de
recepción DATA, STATUS muestra el valor 7002. EN_R debe estar activado hasta que el
número de datos recibidos sea igual al tamaño del área de recepción DATA. Si se pulsa
EN_R, debe hacerse hasta que BUSY=0 o ERROR <> 0.
Los datos del área de recepción DATA no son válidos hasta que BUSY toma el valor 0.
● Si la longitud indicada en el parámetro LEN excede la longitud de los datos recibidos en el
parámetro DATA, se visualiza el código de error 8088 en el parámetro STATUS (véase a
continuación la descripción del parámetro STATUS).
● Si a través del parámetro DATA se hace referencia a una estructura (Struct), LEN puede ser
más corto que la estructura. En este caso, solo se transfieren los datos hasta la longitud del
parámetro LEN.
● Si el parámetro DATA hace referencia a un bloque de datos de acceso optimizado, se debe
poner el parámetro LEN a "0". Si la longitud de los datos en los tipos de datos simples no
coincide, los datos no se reciben y se visualiza el código de error 8088 en el parámetro
STATUS.
● Si a través del parámetro DATA se hace referencia a un tipo de datos STRING, la longitud
indicada en el parámetro LEN debe ser 0 o >=2 (LEN = no puede ser =1).
● Si a través del parámetro DATA se hace referencia a un tipo de datos WSTRING, la longitud
indicada en el parámetro LEN debe ser 0 o >=5.

4072

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Parámetros BUSY, NDR y ERROR
El estado de ejecución se comprueba con los parámetros BUSY, NDR, ERROR y STATUS. El
parámetro BUSY indica el estado de ejecución. El parámetro NDR permite comprobar si una
petición se ha ejecutado correctamente. El parámetro ERROR se activa si ocurren errores
durante la ejecución de TRCV. La información de error se indica en el parámetro STATUS.
La tabla siguiente muestra la relación entre los parámetros BUSY, NDR y ERROR:
BUSY

NDR

ERROR

Descripción

1

-

-

La petición se está procesando.

0

1

0

La petición se ha ejecutado correctamente.

0

0

1

La petición se ha finalizado con un error. La causa del error se indica en el parámetro
STATUS.

0

0

0

No se ha asignado ninguna petición nueva.

Nota
Debido al procesamiento asíncrono de "TRCV", los datos del área de recepción solo son
coherentes si el parámetro NDR se pone a "1".

Parámetros ERROR y STATUS
ERROR

STATUS* Explicación
(W#16#...)

0

0000

Petición finalizada correctamente. La longitud actual de los datos recibidos se indica en el pará‐
metro RCVD_LEN.

0

7000

El bloque no está listo para la recepción.

0

7001

El bloque está listo para la recepción, se ha activado la petición de recepción.

0

7002

Llamada intermedia, se está procesando la petición de recepción.
Nota: Durante este proceso se escriben datos en el área de recepción. Entretanto el acceso al área
de recepción puede devolver datos incoherentes.

1

8085

● El parámetro LEN excede el máximo valor admisible (para S7-1200: 8192 bytes, para S7-1500:
65536 bytes).
● El valor del parámetro LEN o DATA ha sido modificado después de la primera llamada.
● Los dos parámetros LEN y el parámetro DATA tienen el valor "0" o LEN tiene una longitud mayor
que el máximo valor admisible (para S7-1200: 8192 bytes, para S7-1500: 65536 bytes).

1

8086

El parámetro ID se encuentra fuera del área de valores admisible (1 .. 0x0FFF).

1

8088

● El área de recepción es demasiado pequeña.
● El valor del parámetro LEN es mayor que el área de recepción indicada en el parámetro DATA.

1

80A1

Error de comunicación:
● La conexión indicada no se ha establecido todavía.
● La conexión indicada se está finalizando. La petición de recepción no es posible a través de
esta conexión.
● La conexión se está reinicializando.

1

80B1

El parámetro DATA se ha modificado antes de finalizar la petición en curso.

Programación del PLC
Manual de programación y manejo, 11/2019

4073

Instrucciones
4.1 Instrucciones
ERROR

STATUS* Explicación
(W#16#...)

1

80B3

La variante de protocolo parametrizada (parámetro connection_type en la descripción de la cone‐
xión) es UDP. En el caso de una conexión UDP, utilice la instrucción "TURCV".

1

80C3

● Ya se está procesando un bloque con esta ID en otro grupo de prioridad.
● Escasez interna de recursos.

1

80C4

Error de comunicación temporal:
● La conexión con el interlocutor no se puede establecer en estos momentos.
● La interfaz está recibiendo nuevos ajustes de parámetros o la conexión se está estableciendo.
● El sistema R/H está en el estado del sistema SYNCUP o se produce una conmutación primariareserva. La conexión se cierra. El procesamiento de TRCV se detiene.

1

80C5

El interlocutor remoto ha finalizado la conexión.

1

80C6

No es posible acceder al interlocutor remoto (error de red).

1

80C7

Rebase de tiempo de la ejecución.

1

80C9

La longitud del área de recepción es menor que la longitud de los datos enviados.

1

80EE

Handshake no finalizado aún.

1

xxyy, xx >
80

Información de error general, consulte Evaluación de errores con el parámetro de salida RET_VAL
(Página 174)

* Los códigos de error en el editor de programas se pueden representar como valores enteros o hexadecimales. Encontrará
más información sobre el cambio de los formatos de visualización en "Consulte también".

Ejemplo
Encontrará el ejemplo aquí: Ejemplo de programa con TCON, TDISCON, TSEND y TRCV
(Página 4074).
Encontrará información adicional y el código del programa del ejemplo aquí: Sample Library for
Instructions (Página 615).

Consulte también
TRCV: Recibir datos a través de la conexión (Página 4065)
TCON: Establecer una conexión (Página 4048)
Diferencia entre las instrucciones que funcionan síncronamente y las que funcionan
asíncronamente (Página 618)

Ejemplo de programa con TCON, TDISCON, TSEND y TRCV
Introducción
En el ejemplo siguiente se establece una conexión programada entre dos CPU de la serie
S7-1500 y se envía un juego de datos de la CPU 1 a la CPU 2.

4074

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Requisitos
● Se han creado dos CPU de la serie S7-1500 y se han conectado entre sí vía PROFINET.
Su conexión no está configurada.

● En Propiedades > Protección se ha ajustado en cada CPU un nivel de protección bajo para
garantizar que se permitan accesos de lectura y escritura.

Programa de la CPU 1: Almacenamiento de datos
Para el juego de datos se crea el siguiente tipo de datos PLC.

Para la transferencia de datos se crea el siguiente bloque de datos sobre la base del tipo de
datos PLC ("SLI_plcDB_sendData_TSEND") que se ha creado.

Para almacenar los datos debe crearse un bloque de datos global ("SLI_gDB_TSEND") con las
estructuras y variables siguientes.

Programación del PLC
Manual de programación y manejo, 11/2019

4075

Instrucciones
4.1 Instrucciones

Programa de la CPU 1: Interconectar parámetros
Se crea el FB "SLI_FB_TSEND". En el se crean las siguientes variables locales.

Segmento 1: Los parámetros de la instrucción "TCON" se interconectan del siguiente modo.

4076

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Segmento 2: En caso de fallo de TCON, guarde el estado del siguiente modo.

Segmento 3: Los parámetros de la instrucción "TSEND" se interconectan del siguiente modo.

Segmento 4: En caso de fallo de TSEND, guarde el estado del siguiente modo.

Programación del PLC
Manual de programación y manejo, 11/2019

4077

Instrucciones
4.1 Instrucciones

Segmento 5: Los parámetros de la instrucción "TDISCON" se interconectan del siguiente
modo.

Segmento 6: En caso de fallo de TDISCON, guarde el estado del siguiente modo.

Programa de la CPU 1: Configuración de TCON
Para interconectar el parámetro de entrada CONNECT debe abrirse el asistente de la
instrucción "TCON" mediante sus Propiedades > Configuración.

4078

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones
Realice los siguientes ajustes para la configuración de TCON:
Campo de entra‐
da
Punto final

Entrada
En la lista desplegable, elija una CPU para emisor y receptor.
La interfaz, la subred y la dirección se introducen automáticamente.

Datos de cone‐
xión

Seleccionando "Nuevo" en la lista desplegable se crea un bloque de datos para
cada CPU.
El bloque de datos es necesario para almacenar los datos de conexión. El nombre
del bloque de datos se puede elegir libremente.
Para la CPU 1 (CPU local) está activado el establecimiento de conexión activo
(iniciativa local).

Tipo de conexión

Seleccione la entrada "ISO-on-TCP".
Con ello, para establecer la conexión se utilizará una conexión Ethernet con el
protocolo "ISO-on-TCP".

ID de conexión

Para la conexión de comunicación, introduzca una ID de conexión de su elección.
La ID de conexión no se deberá haber asignado antes en el proyecto. Vigile que el
valor concuerde con el valor utilizado en la variable "connectionID".

ID TSAP

Programación del PLC
Manual de programación y manejo, 11/2019

Los detalles de dirección se registran automáticamente al seleccionar el tipo de
conexión "ISO-on-TCP".

4079

Instrucciones
4.1 Instrucciones

Programa de la CPU 2: Almacenamiento de datos
Para el juego de datos se crea el siguiente tipo de datos PLC.

Para la transferencia de datos se crea el siguiente bloque de datos sobre la base del tipo de
datos PLC ("SLI_plcDB_rcvData_TRCV") que se ha creado.

Para almacenar los datos debe crearse un bloque de datos global ("SLI_gDB_TRCV") con las
estructuras y variables siguientes.

4080

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Programa de la CPU 2: Interconectar parámetros
Se crea el FB "SLI_FB_TRCV". En el se crean las siguientes variables locales.

Segmento 1: Los parámetros de la instrucción "TCON" se interconectan del siguiente modo.

Segmento 2: En caso de fallo de TCON, guarde el estado del siguiente modo.

Segmento 3: Los parámetros de la instrucción "TRCV" se interconectan del siguiente modo.

Programación del PLC
Manual de programación y manejo, 11/2019

4081

Instrucciones
4.1 Instrucciones

Segmento 4: En caso de fallo de TRCV, guarde el estado del siguiente modo.

Segmento 5: Los parámetros de la instrucción "TDISCON" se interconectan del siguiente
modo.

Segmento 6: En caso de fallo de TDISCON, guarde el estado del siguiente modo.

4082

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Programa de la CPU 2: Configuración de TCON
Realice los siguientes ajustes para la conexión de CPU 2 / TCON siguiendo el ejemplo de CPU
1 / TCON:
Nota
Datos de conexión
Con la configuración de CPU 1 / TCON ya se ha creado un bloque de datos
("PLC_Tsend_Connection_DB", "PLC_Trcv_Connection_DB") para cada CPU con los datos
de conexión almacenados. En lugar de crear bloques de datos nuevos e introducir los datos de
conexión, puede utilizar los bloques de datos creados ("PLC_Tsend_Connection_DB",
"PLC_Trcv_Connection_DB").
Para que los bloques de datos creados puedan seleccionarse, deben seguir estando en el
árbol del proyecto, bajo Bloques de programa > Bloques de sistema.

Programación del PLC
Manual de programación y manejo, 11/2019

4083

Instrucciones
4.1 Instrucciones

Procedimiento para establecer la conexión
Tenga en cuenta el orden de los pasos a seguir:
1. Para CPU 2 / TCON, ajuste el parámetro REQ a "TRUE".
2. Para CPU 1 / TCON, ajuste el parámetro REQ a "TRUE".
3. Para CPU 2 / TCON, ajuste el parámetro REQ a "FALSE".
4. Para CPU 1 / TCON, ajuste el parámetro REQ a "FALSE".

Procedimiento para deshacer la conexión
Tenga en cuenta el orden de los pasos a seguir:
1. Para CPU 1 / TDISCON, ajuste el parámetro REQ a "TRUE".
2. Para CPU 2 / TDISCON, ajuste el parámetro REQ a "TRUE".
3. Para CPU 1 / TDISCON, ajuste el parámetro REQ a "FALSE".
4. Para CPU 2 / TDISCON, ajuste el parámetro REQ a "FALSE".

4084

Programación del PLC
Manual de programación y manejo, 11/2019

Instrucciones
4.1 Instrucciones

Comportamiento de la CPU 1
Segmento 1 (TCON):
Si el parámetro de entrada REQ ("TCON.start") devuelve el estado lógico "TRUE", se inicia la
instrucción "TCON". Durante varias llamadas, la instrucción "TCON" crea una conexión de
comunicación con la CPU interlocutora. Para ello, los datos de conexión se consultan por
medio del parámetro de entrada CONNECT (bloque de datos "PLC_Trcv_Connection_DB").
Con el estado lógico "TRUE" en el parámetro de salida DONE ("#doneCON") y con el valor
"0000" en el parámetro de salida STATUS ("TCON.status") se indica que la conexión se ha
establecido correctamente. Puesto que los valores de los parámetros de salida solo se
muestran en el momento en que son válidos, el estado correcto debe guardarse en la variable
"TCON.done". El estado correcto de una desconexión anterior ("TDISCON.done") se
restablece.
En el parámetro de salida ERROR ("TCON.error") o en la variable "TCON.memErrStatus" se
indica que la ejecución se ha realizado sin errores en el ejemplo.

Segmento 2 (TCON):
Si TCON notifica un error ("TCON.error" es "TRUE"), el estado notificado ("TCON.status") se
guarda de forma permanente ("TCON.memErrStatus").
Segmento 3 (TSEND):
De acuerdo con el parámetro de entrada ID ("connectionID"), la instrucción "TSEND" conoce
la conexión de comunicación que debe utilizarse.
Si el parámetro de entrada REQ ("TSEND.start") devuelve el estado lógico "TRUE", se inicia
la instrucción "TSEND". Durante varias llamadas, la instrucción "TSEND" transfiere el juego de
datos leído en el parámetro de entrada DATA ("SLI_plcDB_sendData_TSEND").
Con el parámetro de salida DONE ("#doneSEND") a "TRUE" y el parámetro de salida STATUS
("TSEND.status") a "0000" se indica la transmisión correcta del juego de 